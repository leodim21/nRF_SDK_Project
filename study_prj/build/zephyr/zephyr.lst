
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	80 5d 00 20 15 36 01 00 5f 45 02 00 e9 35 01 00     .]. .6.._E...5..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	e9 35 01 00 e9 35 01 00 e9 35 01 00 00 00 00 00     .5...5...5......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	91 30 01 00 e9 35 01 00 00 00 00 00 3d 30 01 00     .0...5......=0..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	e9 35 01 00                                         .5..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	41 31 01 00 6f 6b 02 00 41 31 01 00 41 31 01 00     A1..ok..A1..A1..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	41 31 01 00 41 31 01 00 41 31 01 00 41 31 01 00     A1..A1..A1..A1..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	37 6b 02 00 41 31 01 00 41 31 01 00 55 6b 02 00     7k..A1..A1..Uk..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	41 31 01 00 41 31 01 00 41 31 01 00 41 31 01 00     A1..A1..A1..A1..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	41 31 01 00 41 31 01 00 41 31 01 00 41 31 01 00     A1..A1..A1..A1..
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  90:	41 31 01 00 41 31 01 00 41 31 01 00 41 31 01 00     A1..A1..A1..A1..
			switch (*fmt) {
  a0:	41 31 01 00 41 31 01 00 41 31 01 00 41 31 01 00     A1..A1..A1..A1..
  b0:	41 31 01 00 41 31 01 00 41 31 01 00 41 31 01 00     A1..A1..A1..A1..
  c0:	41 31 01 00 41 31 01 00 41 31 01 00 41 31 01 00     A1..A1..A1..A1..
  d0:	41 31 01 00 41 31 01 00 41 31 01 00                 A1..A1..A1..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				align = VA_STACK_ALIGN(void *);
     100:	f00b fc98 	bl	ba34 <__udivmoddi4>
			switch (*fmt) {
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <ocrypto_bigint_add256>:
     114:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     118:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     11c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     120:	185b      	adds	r3, r3, r1
     122:	eb54 040c 	adcs.w	r4, r4, ip
		buf = (void *) ROUND_UP(buf, align);
     126:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     12a:	414d      	adcs	r5, r1
     12c:	eb56 060c 	adcs.w	r6, r6, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     130:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     134:	414f      	adcs	r7, r1
     136:	eb58 080c 	adcs.w	r8, r8, ip
     13a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     13e:	eb59 0901 	adcs.w	r9, r9, r1
		if (is_str_arg) {
     142:	eb5a 0a0c 	adcs.w	sl, sl, ip
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     146:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
			int v = va_arg(ap, int);
     14a:	4180      	sbcs	r0, r0

			if (buf0 != NULL) {
				*(int *)buf = v;
     14c:	3001      	adds	r0, #1
			}
			buf += sizeof(int);
     14e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     152:	4770      	bx	lr

00000154 <ocrypto_bigint_sub256>:
				arg_idx--;
     154:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     158:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
				parsing = false;
     15c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				if (fmt[-1] == 'l') {
     160:	1a5b      	subs	r3, r3, r1
     162:	eb74 040c 	sbcs.w	r4, r4, ip
     166:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
					if (fmt[-2] == 'l') {
     16a:	418d      	sbcs	r5, r1
     16c:	eb76 060c 	sbcs.w	r6, r6, ip
				parsing = false;
     170:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
						align = VA_STACK_ALIGN(long long);
     174:	418f      	sbcs	r7, r1
     176:	eb78 080c 	sbcs.w	r8, r8, ip
				size = sizeof(void *);
     17a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
					v.ld = va_arg(ap, long double);
     17e:	eb79 0901 	sbcs.w	r9, r9, r1
     182:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     186:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
				buf = (void *) ROUND_UP(buf, align);
     18a:	4180      	sbcs	r0, r0
     18c:	4240      	negs	r0, r0
				if (buf0 != NULL) {
     18e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
					if (BUF_OFFSET + size > len) {
     192:	4770      	bx	lr

00000194 <ocrypto_bigint_cadd256>:
     194:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     198:	4252      	negs	r2, r2
						*(long double *)buf = v.ld;
     19a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
				buf += size;
     19e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
				parsing = false;
     1a2:	4017      	ands	r7, r2
			switch (*fmt) {
     1a4:	19db      	adds	r3, r3, r7
     1a6:	ea18 0802 	ands.w	r8, r8, r2
			if (*++fmt == '\0') {
     1aa:	eb54 0408 	adcs.w	r4, r4, r8
     1ae:	ea19 0902 	ands.w	r9, r9, r2
     1b2:	eb55 0509 	adcs.w	r5, r5, r9
			if (!parsing) {
     1b6:	ea1a 0a02 	ands.w	sl, sl, r2
     1ba:	eb56 060a 	adcs.w	r6, r6, sl
				if (*fmt == '%') {
     1be:	c078      	stmia	r0!, {r3, r4, r5, r6}
					arg_idx++;
     1c0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1c4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
					parsing = true;
     1c8:	4017      	ands	r7, r2
				align = VA_STACK_ALIGN(size_t);
     1ca:	417b      	adcs	r3, r7
     1cc:	ea18 0802 	ands.w	r8, r8, r2
			switch (*fmt) {
     1d0:	eb54 0408 	adcs.w	r4, r4, r8
     1d4:	ea19 0902 	ands.w	r9, r9, r2
				parsing = false;
     1d8:	eb55 0509 	adcs.w	r5, r5, r9

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1dc:	ea1a 0a02 	ands.w	sl, sl, r2
			long long v = va_arg(ap, long long);
     1e0:	eb56 060a 	adcs.w	r6, r6, sl
     1e4:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e6:	4180      	sbcs	r0, r0
     1e8:	3001      	adds	r0, #1
     1ea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     1ee:	4770      	bx	lr

000001f0 <ocrypto_bigint_csub256>:
				}
			}
			buf += sizeof(long long);
     1f0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1f4:	4252      	negs	r2, r2
		if (is_str_arg) {
     1f6:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
		} else if (size == sizeof(int)) {
     1fa:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
			int v = va_arg(ap, int);
     1fe:	4017      	ands	r7, r2
			if (buf0 != NULL) {
     200:	1bdb      	subs	r3, r3, r7
		} else if (size == sizeof(long long)) {
     202:	ea18 0802 	ands.w	r8, r8, r2
			long long v = va_arg(ap, long long);
     206:	eb74 0408 	sbcs.w	r4, r4, r8
     20a:	ea19 0902 	ands.w	r9, r9, r2
     20e:	eb75 0509 	sbcs.w	r5, r5, r9
			if (buf0 != NULL) {
     212:	ea1a 0a02 	ands.w	sl, sl, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     216:	eb76 060a 	sbcs.w	r6, r6, sl
			s = va_arg(ap, char *);
     21a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     21c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     220:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
			if (is_ro && !do_ro) {
     224:	4017      	ands	r7, r2
     226:	41bb      	sbcs	r3, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     228:	ea18 0802 	ands.w	r8, r8, r2
     22c:	eb74 0408 	sbcs.w	r4, r4, r8
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     230:	ea19 0902 	ands.w	r9, r9, r2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     234:	eb75 0509 	sbcs.w	r5, r5, r9
     238:	ea1a 0a02 	ands.w	sl, sl, r2
					__ASSERT(false, "String with too many arguments");
     23c:	eb76 060a 	sbcs.w	r6, r6, sl
     240:	c078      	stmia	r0!, {r3, r4, r5, r6}
     242:	4180      	sbcs	r0, r0
     244:	4240      	negs	r0, r0
     246:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
					__ASSERT(false, "str_ptr_pos[] too small");
     24a:	4770      	bx	lr

0000024c <ocrypto_bigint_cswap256>:
     24c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     250:	4252      	negs	r2, r2
     252:	f04f 0804 	mov.w	r8, #4

00000256 <cswap256_loop>:
				if (buf0 != NULL) {
     256:	e890 0030 	ldmia.w	r0, {r4, r5}
					str_ptr_pos[s_idx] = s_ptr_idx;
     25a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     25e:	1ba3      	subs	r3, r4, r6
					str_ptr_arg[s_idx] = arg_idx;
     260:	4013      	ands	r3, r2
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	1ae4      	subs	r4, r4, r3
     264:	18f6      	adds	r6, r6, r3
					str_ptr_arg[s_idx] = arg_idx;
     266:	1beb      	subs	r3, r5, r7
     268:	4013      	ands	r3, r2
						s_rw_cnt++;
     26a:	1aed      	subs	r5, r5, r3
     26c:	18ff      	adds	r7, r7, r3
     26e:	c030      	stmia	r0!, {r4, r5}
     270:	c1c0      	stmia	r1!, {r6, r7}
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     272:	f1b8 0801 	subs.w	r8, r8, #1
					__ASSERT(false, "str_ptr_pos[] too small");
     276:	d1ee      	bne.n	256 <cswap256_loop>
     278:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     27c:	4770      	bx	lr
     27e:	bf00      	nop

00000280 <ocrypto_mul256_noframe>:
     280:	b500      	push	{lr}
     282:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     286:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
					str_ptr_pos[s_idx] = s_ptr_idx;
     28a:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     28e:	b402      	push	{r1}
     290:	fba7 5102 	umull	r5, r1, r7, r2
					str_ptr_arg[s_idx] = arg_idx;
     294:	950a      	str	r5, [sp, #40]	; 0x28
					str_ptr_pos[s_idx] = s_ptr_idx;
     296:	fba8 0b02 	umull	r0, fp, r8, r2
					str_ptr_arg[s_idx] = arg_idx;
     29a:	fbe7 1063 	umaal	r1, r0, r7, r3
					if (is_ro) {
     29e:	fbe9 b062 	umaal	fp, r0, r9, r2
     2a2:	910b      	str	r1, [sp, #44]	; 0x2c
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     2a4:	fba8 5103 	umull	r5, r1, r8, r3
     2a8:	fbea 0162 	umaal	r0, r1, sl, r2
						s_ro_cnt++;
     2ac:	fbe7 b564 	umaal	fp, r5, r7, r4
				s_idx++;
     2b0:	fbe7 0566 	umaal	r0, r5, r7, r6
					if (BUF_OFFSET + size > len) {
     2b4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2b8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
			switch (*fmt) {
     2bc:	fba9 b603 	umull	fp, r6, r9, r3
				} else if (is_ro) {
     2c0:	fbea 1663 	umaal	r1, r6, sl, r3
     2c4:	fbec 5663 	umaal	r5, r6, ip, r3
					len += 1;
     2c8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2cc:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2d0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2d4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2d8:	900d      	str	r0, [sp, #52]	; 0x34
     2da:	fbac 3002 	umull	r3, r0, ip, r2
					len += 2;
     2de:	9c05      	ldr	r4, [sp, #20]
				} else if (rws_pos_en) {
     2e0:	fbee 5062 	umaal	r5, r0, lr, r2
					len += strlen(s) + 1 + 1;
     2e4:	fbe9 6064 	umaal	r6, r0, r9, r4
     2e8:	fbea b064 	umaal	fp, r0, sl, r4
     2ec:	fbe7 3164 	umaal	r3, r1, r7, r4
     2f0:	fbe8 5164 	umaal	r5, r1, r8, r4
     2f4:	9c06      	ldr	r4, [sp, #24]
		} else {
			__ASSERT(false, "unexpected size %u", size);
     2f6:	fbe8 6164 	umaal	r6, r1, r8, r4
     2fa:	fbe9 b164 	umaal	fp, r1, r9, r4
     2fe:	fbea 0164 	umaal	r0, r1, sl, r4
     302:	930e      	str	r3, [sp, #56]	; 0x38
     304:	fba7 3204 	umull	r3, r2, r7, r4
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     308:	9c07      	ldr	r4, [sp, #28]
     30a:	fbe7 6264 	umaal	r6, r2, r7, r4
     30e:	fbe8 b264 	umaal	fp, r2, r8, r4
		__ASSERT(false, "too many format args");
     312:	fbe9 0264 	umaal	r0, r2, r9, r4
     316:	fbea 1264 	umaal	r1, r2, sl, r4
     31a:	9c04      	ldr	r4, [sp, #16]
     31c:	fbe9 5364 	umaal	r5, r3, r9, r4
     320:	fbea 6364 	umaal	r6, r3, sl, r4
	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     324:	9c08      	ldr	r4, [sp, #32]
     326:	fbe7 b364 	umaal	fp, r3, r7, r4
     32a:	fbe8 0364 	umaal	r0, r3, r8, r4
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     32e:	fbe9 1364 	umaal	r1, r3, r9, r4

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     332:	fbea 2364 	umaal	r2, r3, sl, r4

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     336:	950f      	str	r5, [sp, #60]	; 0x3c
	if (rws_pos_en) {
     338:	f85d 9b04 	ldr.w	r9, [sp], #4
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     33c:	e899 0600 	ldmia.w	r9, {r9, sl}
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     340:	f8dd 8000 	ldr.w	r8, [sp]
     344:	fba9 5408 	umull	r5, r4, r9, r8
		for (i = 0; i < s_idx; i++) {
     348:	fbea b468 	umaal	fp, r4, sl, r8
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     34c:	f8dd 8010 	ldr.w	r8, [sp, #16]
		for (i = 0; i < s_idx; i++) {
     350:	fbec 0468 	umaal	r0, r4, ip, r8
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     354:	fbee 1468 	umaal	r1, r4, lr, r8
     358:	fbe9 2468 	umaal	r2, r4, r9, r8
			*buf++ = str_ptr_arg[i];
     35c:	fbea 3468 	umaal	r3, r4, sl, r8
     360:	f8dd 8004 	ldr.w	r8, [sp, #4]
	for (i = 0; i < s_idx; i++) {
     364:	fbee 6568 	umaal	r6, r5, lr, r8
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     368:	fbe9 b568 	umaal	fp, r5, r9, r8
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     36c:	fbea 0568 	umaal	r0, r5, sl, r8
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     370:	f8dd 8014 	ldr.w	r8, [sp, #20]
     374:	fbec 1568 	umaal	r1, r5, ip, r8
			if (BUF_OFFSET + 1 > len) {
     378:	fbee 2568 	umaal	r2, r5, lr, r8
     37c:	fbe9 3568 	umaal	r3, r5, r9, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     380:	fbea 4568 	umaal	r4, r5, sl, r8
			if (BUF_OFFSET + 1 > len) {
     384:	960f      	str	r6, [sp, #60]	; 0x3c
			*buf++ = pos;
     386:	f8dd 8008 	ldr.w	r8, [sp, #8]
		for (i = 0; i < s_idx; i++) {
     38a:	fbae 7608 	umull	r7, r6, lr, r8
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     38e:	fbe9 0668 	umaal	r0, r6, r9, r8
     392:	fbea 1668 	umaal	r1, r6, sl, r8
     396:	f8dd 8018 	ldr.w	r8, [sp, #24]
     39a:	fbec 2668 	umaal	r2, r6, ip, r8
		if (rws_pos_en) {
     39e:	fbee 3668 	umaal	r3, r6, lr, r8
			*buf++ = str_ptr_arg[i];
     3a2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3a6:	fbea 5668 	umaal	r5, r6, sl, r8
		if (BUF_OFFSET + 1 + size > len) {
     3aa:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ae:	fbec b768 	umaal	fp, r7, ip, r8
     3b2:	fbee 0768 	umaal	r0, r7, lr, r8
		*buf++ = str_ptr_pos[i];
     3b6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3ba:	fbea 2768 	umaal	r2, r7, sl, r8
		memcpy(buf, s, size);
     3be:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3c2:	fbec 3768 	umaal	r3, r7, ip, r8
     3c6:	fbee 4768 	umaal	r4, r7, lr, r8
		buf += size;
     3ca:	fbe9 5768 	umaal	r5, r7, r9, r8
	for (i = 0; i < s_idx; i++) {
     3ce:	fbea 6768 	umaal	r6, r7, sl, r8
     3d2:	b008      	add	sp, #32
     3d4:	bd00      	pop	{pc}
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     3d6:	bf00      	nop

000003d8 <ocrypto_bigint_mul256>:
     3d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3dc:	b087      	sub	sp, #28
     3de:	f7ff ff4f 	bl	280 <ocrypto_mul256_noframe>
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     3e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
			size = strlen(s) + 1;
     3e6:	f108 0820 	add.w	r8, r8, #32
     3ea:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     3ee:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
		return -EFAULT;
     3f0:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000003f8 <ocrypto_sqr256_noframe>:
     3f8:	b500      	push	{lr}
     3fa:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     3fe:	fba3 5203 	umull	r5, r2, r3, r3
     402:	9501      	str	r5, [sp, #4]
     404:	fba3 0104 	umull	r0, r1, r3, r4
     408:	fbe3 2064 	umaal	r2, r0, r3, r4
     40c:	fbe3 1067 	umaal	r1, r0, r3, r7
     410:	9202      	str	r2, [sp, #8]
     412:	fba3 5207 	umull	r5, r2, r3, r7
     416:	fbe3 0268 	umaal	r0, r2, r3, r8
     41a:	fbe4 1564 	umaal	r1, r5, r4, r4
     41e:	fbe3 0568 	umaal	r0, r5, r3, r8
     422:	fbe3 2569 	umaal	r2, r5, r3, r9
     426:	9103      	str	r1, [sp, #12]
     428:	fba4 b607 	umull	fp, r6, r4, r7
     42c:	fbe3 2669 	umaal	r2, r6, r3, r9
     430:	fbe3 566a 	umaal	r5, r6, r3, sl
     434:	fbe4 0b67 	umaal	r0, fp, r4, r7
     438:	fbe4 2b68 	umaal	r2, fp, r4, r8
     43c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     440:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     444:	9004      	str	r0, [sp, #16]
     446:	fba4 1008 	umull	r1, r0, r4, r8
     44a:	fbe4 5069 	umaal	r5, r0, r4, r9
     44e:	fbe3 606c 	umaal	r6, r0, r3, ip
     452:	fbe3 b06e 	umaal	fp, r0, r3, lr
     456:	fbe7 2167 	umaal	r2, r1, r7, r7
     45a:	fbe4 5169 	umaal	r5, r1, r4, r9
     45e:	fbe4 616a 	umaal	r6, r1, r4, sl
     462:	fbe3 b16e 	umaal	fp, r1, r3, lr
     466:	fbe4 016e 	umaal	r0, r1, r4, lr
     46a:	9205      	str	r2, [sp, #20]
     46c:	fba7 3208 	umull	r3, r2, r7, r8
     470:	fbe4 626a 	umaal	r6, r2, r4, sl
     474:	fbe4 b26c 	umaal	fp, r2, r4, ip
     478:	fbe4 026e 	umaal	r0, r2, r4, lr
     47c:	fbe7 126e 	umaal	r1, r2, r7, lr
     480:	fbe7 5368 	umaal	r5, r3, r7, r8
     484:	fbe7 6369 	umaal	r6, r3, r7, r9
     488:	fbe4 b36c 	umaal	fp, r3, r4, ip
     48c:	fbe7 036c 	umaal	r0, r3, r7, ip
     490:	fbe7 136e 	umaal	r1, r3, r7, lr
     494:	fbe8 236e 	umaal	r2, r3, r8, lr
     498:	9506      	str	r5, [sp, #24]
     49a:	fba7 5409 	umull	r5, r4, r7, r9
     49e:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4a2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4a6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4aa:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ae:	fbe9 346e 	umaal	r3, r4, r9, lr
     4b2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4b6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4ba:	fbe8 056a 	umaal	r0, r5, r8, sl
     4be:	fbe8 156c 	umaal	r1, r5, r8, ip
     4c2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4c6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ca:	fbea 456e 	umaal	r4, r5, sl, lr
     4ce:	9607      	str	r6, [sp, #28]
     4d0:	fba8 7609 	umull	r7, r6, r8, r9
     4d4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4d8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4dc:	fbe9 266c 	umaal	r2, r6, r9, ip
     4e0:	fbea 366c 	umaal	r3, r6, sl, ip
     4e4:	fbea 466e 	umaal	r4, r6, sl, lr
     4e8:	fbec 566e 	umaal	r5, r6, ip, lr
     4ec:	fbe8 b769 	umaal	fp, r7, r8, r9
     4f0:	fbe9 0769 	umaal	r0, r7, r9, r9
     4f4:	fbe9 176a 	umaal	r1, r7, r9, sl
     4f8:	fbea 276a 	umaal	r2, r7, sl, sl
     4fc:	fbea 376c 	umaal	r3, r7, sl, ip
     500:	fbec 476c 	umaal	r4, r7, ip, ip
     504:	fbec 576e 	umaal	r5, r7, ip, lr
     508:	fbee 676e 	umaal	r6, r7, lr, lr
     50c:	bd00      	pop	{pc}
     50e:	bf00      	nop

00000510 <ocrypto_bigint_sqr256>:
     510:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     514:	b087      	sub	sp, #28
     516:	f7ff ff6f 	bl	3f8 <ocrypto_sqr256_noframe>
     51a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     51e:	f108 0820 	add.w	r8, r8, #32
     522:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     526:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     528:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000530 <ocrypto_constant_time_equal>:
     530:	b430      	push	{r4, r5}
     532:	f04f 0300 	mov.w	r3, #0

00000536 <constant_time_equal_loop>:
     536:	f810 4b01 	ldrb.w	r4, [r0], #1
     53a:	f811 5b01 	ldrb.w	r5, [r1], #1
     53e:	3a01      	subs	r2, #1
     540:	ea84 0405 	eor.w	r4, r4, r5
     544:	ea43 0304 	orr.w	r3, r3, r4
     548:	d1f5      	bne.n	536 <constant_time_equal_loop>
     54a:	f1a3 0301 	sub.w	r3, r3, #1
     54e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     552:	bc30      	pop	{r4, r5}
     554:	4770      	bx	lr
     556:	bf00      	nop

00000558 <ocrypto_constant_time_is_zero>:
     558:	f04f 0300 	mov.w	r3, #0

0000055c <constant_time_is_zero_loop>:
     55c:	f810 2b01 	ldrb.w	r2, [r0], #1
     560:	3901      	subs	r1, #1
     562:	ea43 0302 	orr.w	r3, r3, r2
     566:	d1f9      	bne.n	55c <constant_time_is_zero_loop>
     568:	f1a3 0301 	sub.w	r3, r3, #1
     56c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     570:	4770      	bx	lr
     572:	bf00      	nop

00000574 <ocrypto_constant_time_xor>:
     574:	b430      	push	{r4, r5}

00000576 <constant_time_xor_loop>:
     576:	f811 4b01 	ldrb.w	r4, [r1], #1
     57a:	f812 5b01 	ldrb.w	r5, [r2], #1
     57e:	406c      	eors	r4, r5
     580:	f800 4b01 	strb.w	r4, [r0], #1
     584:	3b01      	subs	r3, #1
     586:	d1f6      	bne.n	576 <constant_time_xor_loop>
     588:	bc30      	pop	{r4, r5}
     58a:	4770      	bx	lr

0000058c <ocrypto_mod_p256_add>:
     58c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     590:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     594:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     598:	185b      	adds	r3, r3, r1
     59a:	eb54 040c 	adcs.w	r4, r4, ip
     59e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5a2:	414d      	adcs	r5, r1
     5a4:	eb56 060c 	adcs.w	r6, r6, ip
     5a8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5ac:	414f      	adcs	r7, r1
     5ae:	eb58 080c 	adcs.w	r8, r8, ip
     5b2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b6:	eb59 0901 	adcs.w	r9, r9, r1
     5ba:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5be:	4189      	sbcs	r1, r1
     5c0:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
     5c4:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
     5c8:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
     5cc:	f176 0600 	sbcs.w	r6, r6, #0
     5d0:	f177 0700 	sbcs.w	r7, r7, #0
     5d4:	f178 0800 	sbcs.w	r8, r8, #0
     5d8:	f179 0901 	sbcs.w	r9, r9, #1
     5dc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
     5e0:	f151 0100 	adcs.w	r1, r1, #0
     5e4:	185b      	adds	r3, r3, r1
     5e6:	414c      	adcs	r4, r1
     5e8:	414d      	adcs	r5, r1
     5ea:	f156 0600 	adcs.w	r6, r6, #0
     5ee:	f157 0700 	adcs.w	r7, r7, #0
     5f2:	f158 0800 	adcs.w	r8, r8, #0
     5f6:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     5fa:	eb5a 0a01 	adcs.w	sl, sl, r1
     5fe:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     602:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     606:	4770      	bx	lr

00000608 <ocrypto_mod_p256_sub>:
     608:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     60c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     610:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     614:	1a5b      	subs	r3, r3, r1
     616:	eb74 040c 	sbcs.w	r4, r4, ip
     61a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     61e:	418d      	sbcs	r5, r1
     620:	eb76 060c 	sbcs.w	r6, r6, ip
     624:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     628:	418f      	sbcs	r7, r1
     62a:	eb78 080c 	sbcs.w	r8, r8, ip
     62e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     632:	eb79 0901 	sbcs.w	r9, r9, r1
     636:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     63a:	4189      	sbcs	r1, r1
     63c:	185b      	adds	r3, r3, r1
     63e:	414c      	adcs	r4, r1
     640:	414d      	adcs	r5, r1
     642:	f156 0600 	adcs.w	r6, r6, #0
     646:	f157 0700 	adcs.w	r7, r7, #0
     64a:	f158 0800 	adcs.w	r8, r8, #0
     64e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     652:	eb5a 0a01 	adcs.w	sl, sl, r1
     656:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     65a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     65e:	4770      	bx	lr

00000660 <mul_reduce>:
     660:	eb18 0804 	adds.w	r8, r8, r4
     664:	eb59 0905 	adcs.w	r9, r9, r5
     668:	eb5a 0a06 	adcs.w	sl, sl, r6
     66c:	eb5b 0b07 	adcs.w	fp, fp, r7
     670:	f05f 0c00 	movs.w	ip, #0
     674:	f14c 0c00 	adc.w	ip, ip, #0
     678:	eb18 0805 	adds.w	r8, r8, r5
     67c:	eb59 0906 	adcs.w	r9, r9, r6
     680:	eb5a 0a07 	adcs.w	sl, sl, r7
     684:	eb5b 0b07 	adcs.w	fp, fp, r7
     688:	eb50 000c 	adcs.w	r0, r0, ip
     68c:	f05f 0c00 	movs.w	ip, #0
     690:	eb51 010c 	adcs.w	r1, r1, ip
     694:	eb52 020c 	adcs.w	r2, r2, ip
     698:	4163      	adcs	r3, r4
     69a:	f14c 0c00 	adc.w	ip, ip, #0
     69e:	ebb8 0807 	subs.w	r8, r8, r7
     6a2:	f179 0900 	sbcs.w	r9, r9, #0
     6a6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6aa:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ae:	41a8      	sbcs	r0, r5
     6b0:	41b1      	sbcs	r1, r6
     6b2:	41a2      	sbcs	r2, r4
     6b4:	41b3      	sbcs	r3, r6
     6b6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ba:	ebbb 0b05 	subs.w	fp, fp, r5
     6be:	41b0      	sbcs	r0, r6
     6c0:	41b9      	sbcs	r1, r7
     6c2:	41aa      	sbcs	r2, r5
     6c4:	41bb      	sbcs	r3, r7
     6c6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ca:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ce:	ebb8 0804 	subs.w	r8, r8, r4
     6d2:	eb79 0904 	sbcs.w	r9, r9, r4
     6d6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6da:	f17b 0b00 	sbcs.w	fp, fp, #0
     6de:	f170 0000 	sbcs.w	r0, r0, #0
     6e2:	f171 0100 	sbcs.w	r1, r1, #0
     6e6:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     6ea:	41a3      	sbcs	r3, r4
     6ec:	f16c 0c00 	sbc.w	ip, ip, #0
     6f0:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     6f4:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     6f8:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     6fc:	f15b 0b00 	adcs.w	fp, fp, #0
     700:	f150 0400 	adcs.w	r4, r0, #0
     704:	f151 0500 	adcs.w	r5, r1, #0
     708:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     70c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     710:	f14c 0c00 	adc.w	ip, ip, #0
     714:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     718:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     71c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     720:	f15b 0300 	adcs.w	r3, fp, #0
     724:	f154 0400 	adcs.w	r4, r4, #0
     728:	f155 0500 	adcs.w	r5, r5, #0
     72c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     730:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     734:	4770      	bx	lr
     736:	bf00      	nop

00000738 <ocrypto_mod_p256_mul>:
     738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	b087      	sub	sp, #28
     73e:	f7ff fd9f 	bl	280 <ocrypto_mul256_noframe>
     742:	f8dd 8010 	ldr.w	r8, [sp, #16]
     746:	f8dd 9014 	ldr.w	r9, [sp, #20]
     74a:	f8dd a018 	ldr.w	sl, [sp, #24]
     74e:	f7ff ff87 	bl	660 <mul_reduce>
     752:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     756:	f7ff ff83 	bl	660 <mul_reduce>
     75a:	b003      	add	sp, #12
     75c:	f85d 8b04 	ldr.w	r8, [sp], #4
     760:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000768 <ocrypto_mod_p256_sqr>:
     768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     76c:	b087      	sub	sp, #28
     76e:	f7ff fe43 	bl	3f8 <ocrypto_sqr256_noframe>
     772:	f8dd 8010 	ldr.w	r8, [sp, #16]
     776:	f8dd 9014 	ldr.w	r9, [sp, #20]
     77a:	f8dd a018 	ldr.w	sl, [sp, #24]
     77e:	f7ff ff6f 	bl	660 <mul_reduce>
     782:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     786:	f7ff ff6b 	bl	660 <mul_reduce>
     78a:	b003      	add	sp, #12
     78c:	f85d 8b04 	ldr.w	r8, [sp], #4
     790:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000798 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     798:	4801      	ldr	r0, [pc, #4]	; (7a0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     79a:	7800      	ldrb	r0, [r0, #0]
     79c:	4770      	bx	lr
     79e:	0000      	.short	0x0000
     7a0:	20000028 	.word	0x20000028

000007a4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     7a4:	b570      	push	{r4, r5, r6, lr}
     7a6:	4c17      	ldr	r4, [pc, #92]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7a8:	7860      	ldrb	r0, [r4, #1]
     7aa:	2800      	cmp	r0, #0
     7ac:	d123      	bne.n	7f6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
     7ae:	2001      	movs	r0, #1
     7b0:	7060      	strb	r0, [r4, #1]
     7b2:	f00b fe18 	bl	c3e6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     7b6:	f06f 0527 	mvn.w	r5, #39	; 0x27
     7ba:	b928      	cbnz	r0, 7c8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     7bc:	f00b fe49 	bl	c452 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     7c0:	b910      	cbnz	r0, 7c8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     7c2:	f00b fe50 	bl	c466 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     7c6:	b120      	cbz	r0, 7d2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     7c8:	480f      	ldr	r0, [pc, #60]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7ca:	6060      	str	r0, [r4, #4]
     7cc:	70a5      	strb	r5, [r4, #2]
     7ce:	2008      	movs	r0, #8
     7d0:	e010      	b.n	7f4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
     7d2:	f00b fddd 	bl	c390 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     7d6:	b940      	cbnz	r0, 7ea <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     7d8:	f00b fde4 	bl	c3a4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     7dc:	b928      	cbnz	r0, 7ea <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     7de:	f00b fdf8 	bl	c3d2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     7e2:	b910      	cbnz	r0, 7ea <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     7e4:	f00b fe09 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     7e8:	b130      	cbz	r0, 7f8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
     7ea:	4807      	ldr	r0, [pc, #28]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7ec:	3031      	adds	r0, #49	; 0x31
     7ee:	6060      	str	r0, [r4, #4]
     7f0:	70a5      	strb	r5, [r4, #2]
     7f2:	2004      	movs	r0, #4
     7f4:	70e0      	strb	r0, [r4, #3]
     7f6:	bd70      	pop	{r4, r5, r6, pc}
     7f8:	f44f 718f 	mov.w	r1, #286	; 0x11e
     7fc:	2074      	movs	r0, #116	; 0x74
     7fe:	f003 fbc7 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     802:	0000      	.short	0x0000
     804:	20000028 	.word	0x20000028
     808:	00010714 	.word	0x00010714

0000080c <mpsl_tx_power_radio_supported_power_adjust>:
     80c:	4908      	ldr	r1, [pc, #32]	; (830 <mpsl_tx_power_radio_supported_power_adjust+0x24>)
     80e:	f991 2003 	ldrsb.w	r2, [r1, #3]
     812:	4290      	cmp	r0, r2
     814:	da03      	bge.n	81e <mpsl_tx_power_radio_supported_power_adjust+0x12>
     816:	f991 2002 	ldrsb.w	r2, [r1, #2]
     81a:	4290      	cmp	r0, r2
     81c:	dc01      	bgt.n	822 <mpsl_tx_power_radio_supported_power_adjust+0x16>
     81e:	4610      	mov	r0, r2
     820:	4770      	bx	lr
     822:	6849      	ldr	r1, [r1, #4]
     824:	1a80      	subs	r0, r0, r2
     826:	5c08      	ldrb	r0, [r1, r0]
     828:	4902      	ldr	r1, [pc, #8]	; (834 <mpsl_tx_power_radio_supported_power_adjust+0x28>)
     82a:	5608      	ldrsb	r0, [r1, r0]
     82c:	4770      	bx	lr
     82e:	0000      	.short	0x0000
     830:	20000028 	.word	0x20000028
     834:	00010706 	.word	0x00010706

00000838 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     83c:	461c      	mov	r4, r3
     83e:	4690      	mov	r8, r2
     840:	460d      	mov	r5, r1
     842:	4606      	mov	r6, r0
     844:	f06f 0715 	mvn.w	r7, #21
     848:	2804      	cmp	r0, #4
     84a:	d804      	bhi.n	856 <__z_interrupt_stack_SIZEOF+0x16>
     84c:	b11c      	cbz	r4, 856 <__z_interrupt_stack_SIZEOF+0x16>
     84e:	f00b fa41 	bl	bcd4 <__udivmoddi4+0x2a0>
     852:	42a8      	cmp	r0, r5
     854:	d802      	bhi.n	85c <__z_interrupt_stack_SIZEOF+0x1c>
     856:	4638      	mov	r0, r7
     858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     85c:	4805      	ldr	r0, [pc, #20]	; (874 <__z_interrupt_stack_SIZEOF+0x34>)
     85e:	4642      	mov	r2, r8
     860:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     864:	b118      	cbz	r0, 86e <__z_interrupt_stack_SIZEOF+0x2e>
     866:	5740      	ldrsb	r0, [r0, r5]
     868:	4282      	cmp	r2, r0
     86a:	dd00      	ble.n	86e <__z_interrupt_stack_SIZEOF+0x2e>
     86c:	4602      	mov	r2, r0
     86e:	7022      	strb	r2, [r4, #0]
     870:	2000      	movs	r0, #0
     872:	e7f1      	b.n	858 <__z_interrupt_stack_SIZEOF+0x18>
     874:	20000c10 	.word	0x20000c10
     878:	2800      	cmp	r0, #0
     87a:	d019      	beq.n	8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>
     87c:	7803      	ldrb	r3, [r0, #0]
     87e:	4913      	ldr	r1, [pc, #76]	; (8cc <CONFIG_BT_RX_STACK_SIZE+0x34>)
     880:	4a13      	ldr	r2, [pc, #76]	; (8d0 <CONFIG_BT_RX_STACK_SIZE+0x38>)
     882:	b113      	cbz	r3, 88a <__data_size+0x12>
     884:	2b01      	cmp	r3, #1
     886:	d00e      	beq.n	8a6 <CONFIG_BT_RX_STACK_SIZE+0xe>
     888:	e011      	b.n	8ae <CONFIG_BT_RX_STACK_SIZE+0x16>
     88a:	7903      	ldrb	r3, [r0, #4]
     88c:	2b01      	cmp	r3, #1
     88e:	d000      	beq.n	892 <__data_size+0x1a>
     890:	b96b      	cbnz	r3, 8ae <CONFIG_BT_RX_STACK_SIZE+0x16>
     892:	7943      	ldrb	r3, [r0, #5]
     894:	b10b      	cbz	r3, 89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     896:	2b01      	cmp	r3, #1
     898:	d109      	bne.n	8ae <CONFIG_BT_RX_STACK_SIZE+0x16>
     89a:	6883      	ldr	r3, [r0, #8]
     89c:	3b64      	subs	r3, #100	; 0x64
     89e:	428b      	cmp	r3, r1
     8a0:	d205      	bcs.n	8ae <CONFIG_BT_RX_STACK_SIZE+0x16>
     8a2:	68c0      	ldr	r0, [r0, #12]
     8a4:	e00e      	b.n	8c4 <CONFIG_BT_RX_STACK_SIZE+0x2c>
     8a6:	7903      	ldrb	r3, [r0, #4]
     8a8:	2b01      	cmp	r3, #1
     8aa:	d002      	beq.n	8b2 <CONFIG_BT_RX_STACK_SIZE+0x1a>
     8ac:	b10b      	cbz	r3, 8b2 <CONFIG_BT_RX_STACK_SIZE+0x1a>
     8ae:	2000      	movs	r0, #0
     8b0:	4770      	bx	lr
     8b2:	7943      	ldrb	r3, [r0, #5]
     8b4:	b10b      	cbz	r3, 8ba <CONFIG_BT_RX_STACK_SIZE+0x22>
     8b6:	2b01      	cmp	r3, #1
     8b8:	d1f9      	bne.n	8ae <CONFIG_BT_RX_STACK_SIZE+0x16>
     8ba:	68c3      	ldr	r3, [r0, #12]
     8bc:	3b64      	subs	r3, #100	; 0x64
     8be:	428b      	cmp	r3, r1
     8c0:	d2f5      	bcs.n	8ae <CONFIG_BT_RX_STACK_SIZE+0x16>
     8c2:	6880      	ldr	r0, [r0, #8]
     8c4:	4290      	cmp	r0, r2
     8c6:	d8f2      	bhi.n	8ae <CONFIG_BT_RX_STACK_SIZE+0x16>
     8c8:	2001      	movs	r0, #1
     8ca:	4770      	bx	lr
     8cc:	0001863d 	.word	0x0001863d
     8d0:	0f423fff 	.word	0x0f423fff
     8d4:	b510      	push	{r4, lr}
     8d6:	4c05      	ldr	r4, [pc, #20]	; (8ec <CONFIG_BT_RX_STACK_SIZE+0x54>)
     8d8:	6820      	ldr	r0, [r4, #0]
     8da:	b110      	cbz	r0, 8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     8dc:	4780      	blx	r0
     8de:	2000      	movs	r0, #0
     8e0:	6020      	str	r0, [r4, #0]
     8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     8e6:	f002 b863 	b.w	29b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     8ea:	0000      	.short	0x0000
     8ec:	20000030 	.word	0x20000030

000008f0 <mpsl_timeslot_session_open>:
     8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8f4:	460e      	mov	r6, r1
     8f6:	0005      	movs	r5, r0
     8f8:	d004      	beq.n	904 <mpsl_timeslot_session_open+0x14>
     8fa:	f000 f847 	bl	98c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     8fe:	4607      	mov	r7, r0
     900:	2400      	movs	r4, #0
     902:	e00b      	b.n	91c <mpsl_timeslot_session_open+0x2c>
     904:	f06f 0015 	mvn.w	r0, #21
     908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     90c:	4620      	mov	r0, r4
     90e:	f000 f843 	bl	998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     912:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
     916:	b130      	cbz	r0, 926 <mpsl_timeslot_session_open+0x36>
     918:	1c64      	adds	r4, r4, #1
     91a:	b2e4      	uxtb	r4, r4
     91c:	42bc      	cmp	r4, r7
     91e:	d3f5      	bcc.n	90c <mpsl_timeslot_session_open+0x1c>
     920:	f06f 000b 	mvn.w	r0, #11
     924:	e7f0      	b.n	908 <mpsl_timeslot_session_open+0x18>
     926:	4627      	mov	r7, r4
     928:	2cff      	cmp	r4, #255	; 0xff
     92a:	d0f9      	beq.n	920 <mpsl_timeslot_session_open+0x30>
     92c:	4620      	mov	r0, r4
     92e:	f000 f833 	bl	998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     932:	4604      	mov	r4, r0
     934:	f00b fb9a 	bl	c06c <__udivmoddi4+0x638>
     938:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
     93c:	4621      	mov	r1, r4
     93e:	4808      	ldr	r0, [pc, #32]	; (960 <mpsl_timeslot_session_open+0x70>)
     940:	f002 f80e 	bl	2960 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     944:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
     948:	2820      	cmp	r0, #32
     94a:	d006      	beq.n	95a <mpsl_timeslot_session_open+0x6a>
     94c:	2001      	movs	r0, #1
     94e:	6225      	str	r5, [r4, #32]
     950:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     954:	7037      	strb	r7, [r6, #0]
     956:	2000      	movs	r0, #0
     958:	e7d6      	b.n	908 <mpsl_timeslot_session_open+0x18>
     95a:	f06f 0022 	mvn.w	r0, #34	; 0x22
     95e:	e7d3      	b.n	908 <mpsl_timeslot_session_open+0x18>
     960:	0000bd97 	.word	0x0000bd97

00000964 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     964:	b510      	push	{r4, lr}
     966:	0782      	lsls	r2, r0, #30
     968:	d002      	beq.n	970 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     96a:	f06f 000d 	mvn.w	r0, #13
     96e:	bd10      	pop	{r4, pc}
     970:	4a05      	ldr	r2, [pc, #20]	; (988 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     972:	7011      	strb	r1, [r2, #0]
     974:	6050      	str	r0, [r2, #4]
     976:	b128      	cbz	r0, 984 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     978:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     97c:	010a      	lsls	r2, r1, #4
     97e:	2100      	movs	r1, #0
     980:	f00b fdf5 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     984:	2000      	movs	r0, #0
     986:	bd10      	pop	{r4, pc}
     988:	20000034 	.word	0x20000034

0000098c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     98c:	4801      	ldr	r0, [pc, #4]	; (994 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     98e:	7800      	ldrb	r0, [r0, #0]
     990:	4770      	bx	lr
     992:	0000      	.short	0x0000
     994:	20000034 	.word	0x20000034

00000998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     998:	4905      	ldr	r1, [pc, #20]	; (9b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     99a:	780a      	ldrb	r2, [r1, #0]
     99c:	4290      	cmp	r0, r2
     99e:	d301      	bcc.n	9a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     9a0:	2000      	movs	r0, #0
     9a2:	4770      	bx	lr
     9a4:	6849      	ldr	r1, [r1, #4]
     9a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     9aa:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     9ae:	4770      	bx	lr
     9b0:	20000034 	.word	0x20000034

000009b4 <MPSL_IRQ_RADIO_Handler>:
     9b4:	490e      	ldr	r1, [pc, #56]	; (9f0 <MPSL_IRQ_RADIO_Handler+0x3c>)
     9b6:	b510      	push	{r4, lr}
     9b8:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9bc:	2820      	cmp	r0, #32
     9be:	d012      	beq.n	9e6 <MPSL_IRQ_RADIO_Handler+0x32>
     9c0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9c4:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     9c8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     9cc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     9d0:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     9d4:	6840      	ldr	r0, [r0, #4]
     9d6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     9da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     9e2:	2104      	movs	r1, #4
     9e4:	4710      	bx	r2
     9e6:	f640 01bc 	movw	r1, #2236	; 0x8bc
     9ea:	2070      	movs	r0, #112	; 0x70
     9ec:	f003 fad0 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9f0:	20001024 	.word	0x20001024
     9f4:	b570      	push	{r4, r5, r6, lr}
     9f6:	4605      	mov	r5, r0
     9f8:	2a20      	cmp	r2, #32
     9fa:	d028      	beq.n	a4e <MPSL_IRQ_RADIO_Handler+0x9a>
     9fc:	4819      	ldr	r0, [pc, #100]	; (a64 <MPSL_IRQ_RADIO_Handler+0xb0>)
     9fe:	4c1a      	ldr	r4, [pc, #104]	; (a68 <MPSL_IRQ_RADIO_Handler+0xb4>)
     a00:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     a04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a08:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     a0c:	4423      	add	r3, r4
     a0e:	2920      	cmp	r1, #32
     a10:	d022      	beq.n	a58 <MPSL_IRQ_RADIO_Handler+0xa4>
     a12:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     a16:	7840      	ldrb	r0, [r0, #1]
     a18:	784c      	ldrb	r4, [r1, #1]
     a1a:	7048      	strb	r0, [r1, #1]
     a1c:	4620      	mov	r0, r4
     a1e:	4601      	mov	r1, r0
     a20:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     a24:	4291      	cmp	r1, r2
     a26:	7005      	strb	r5, [r0, #0]
     a28:	7840      	ldrb	r0, [r0, #1]
     a2a:	d1f8      	bne.n	a1e <MPSL_IRQ_RADIO_Handler+0x6a>
     a2c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     a30:	2a20      	cmp	r2, #32
     a32:	bf1a      	itte	ne
     a34:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     a38:	7054      	strbne	r4, [r2, #1]
     a3a:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     a3e:	2220      	movs	r2, #32
     a40:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     a44:	f88c 2001 	strb.w	r2, [ip, #1]
     a48:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     a4c:	bd70      	pop	{r4, r5, r6, pc}
     a4e:	f44f 7126 	mov.w	r1, #664	; 0x298
     a52:	2070      	movs	r0, #112	; 0x70
     a54:	f003 fa9c 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a58:	f893 4020 	ldrb.w	r4, [r3, #32]
     a5c:	7840      	ldrb	r0, [r0, #1]
     a5e:	f883 0020 	strb.w	r0, [r3, #32]
     a62:	e7db      	b.n	a1c <MPSL_IRQ_RADIO_Handler+0x68>
     a64:	20000fa4 	.word	0x20000fa4
     a68:	20001024 	.word	0x20001024
     a6c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a70:	b08d      	sub	sp, #52	; 0x34
     a72:	4615      	mov	r5, r2
     a74:	460c      	mov	r4, r1
     a76:	f002 f9e7 	bl	2e48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     a7a:	4428      	add	r0, r5
     a7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a80:	9008      	str	r0, [sp, #32]
     a82:	6821      	ldr	r1, [r4, #0]
     a84:	1a08      	subs	r0, r1, r0
     a86:	0200      	lsls	r0, r0, #8
     a88:	17c1      	asrs	r1, r0, #31
     a8a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a8e:	1200      	asrs	r0, r0, #8
     a90:	2800      	cmp	r0, #0
     a92:	f300 80f0 	bgt.w	c76 <MPSL_IRQ_RADIO_Handler+0x2c2>
     a96:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
     a9a:	48cd      	ldr	r0, [pc, #820]	; (dd0 <MPSL_IRQ_RADIO_Handler+0x41c>)
     a9c:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     aa0:	4408      	add	r0, r1
     aa2:	9009      	str	r0, [sp, #36]	; 0x24
     aa4:	f890 5020 	ldrb.w	r5, [r0, #32]
     aa8:	2020      	movs	r0, #32
     aaa:	4eca      	ldr	r6, [pc, #808]	; (dd4 <MPSL_IRQ_RADIO_Handler+0x420>)
     aac:	f10d 0a18 	add.w	sl, sp, #24
     ab0:	f10d 091c 	add.w	r9, sp, #28
     ab4:	f88d 0018 	strb.w	r0, [sp, #24]
     ab8:	2d20      	cmp	r5, #32
     aba:	bf1c      	itt	ne
     abc:	48c6      	ldrne	r0, [pc, #792]	; (dd8 <MPSL_IRQ_RADIO_Handler+0x424>)
     abe:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     ac2:	d038      	beq.n	b36 <MPSL_IRQ_RADIO_Handler+0x182>
     ac4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ac8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     acc:	f100 0108 	add.w	r1, r0, #8
     ad0:	68c0      	ldr	r0, [r0, #12]
     ad2:	6827      	ldr	r7, [r4, #0]
     ad4:	1a38      	subs	r0, r7, r0
     ad6:	0200      	lsls	r0, r0, #8
     ad8:	17c2      	asrs	r2, r0, #31
     ada:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ade:	1200      	asrs	r0, r0, #8
     ae0:	d429      	bmi.n	b36 <MPSL_IRQ_RADIO_Handler+0x182>
     ae2:	89e0      	ldrh	r0, [r4, #14]
     ae4:	b300      	cbz	r0, b28 <MPSL_IRQ_RADIO_Handler+0x174>
     ae6:	89c8      	ldrh	r0, [r1, #14]
     ae8:	b9f0      	cbnz	r0, b28 <MPSL_IRQ_RADIO_Handler+0x174>
     aea:	6808      	ldr	r0, [r1, #0]
     aec:	9003      	str	r0, [sp, #12]
     aee:	f003 f8a5 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     af2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     af6:	bf08      	it	eq
     af8:	200d      	moveq	r0, #13
     afa:	d00b      	beq.n	b14 <MPSL_IRQ_RADIO_Handler+0x160>
     afc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     b00:	3856      	subs	r0, #86	; 0x56
     b02:	bf08      	it	eq
     b04:	201c      	moveq	r0, #28
     b06:	d005      	beq.n	b14 <MPSL_IRQ_RADIO_Handler+0x160>
     b08:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b0c:	389f      	subs	r0, #159	; 0x9f
     b0e:	bf14      	ite	ne
     b10:	2000      	movne	r0, #0
     b12:	2032      	moveq	r0, #50	; 0x32
     b14:	1c41      	adds	r1, r0, #1
     b16:	9803      	ldr	r0, [sp, #12]
     b18:	1a38      	subs	r0, r7, r0
     b1a:	0200      	lsls	r0, r0, #8
     b1c:	17c2      	asrs	r2, r0, #31
     b1e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b22:	1200      	asrs	r0, r0, #8
     b24:	4288      	cmp	r0, r1
     b26:	db06      	blt.n	b36 <MPSL_IRQ_RADIO_Handler+0x182>
     b28:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     b2c:	f88a 5000 	strb.w	r5, [sl]
     b30:	7845      	ldrb	r5, [r0, #1]
     b32:	2d20      	cmp	r5, #32
     b34:	d1c6      	bne.n	ac4 <MPSL_IRQ_RADIO_Handler+0x110>
     b36:	f89a 0000 	ldrb.w	r0, [sl]
     b3a:	f889 0000 	strb.w	r0, [r9]
     b3e:	2d20      	cmp	r5, #32
     b40:	bf1c      	itt	ne
     b42:	48a5      	ldrne	r0, [pc, #660]	; (dd8 <MPSL_IRQ_RADIO_Handler+0x424>)
     b44:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     b48:	f000 813e 	beq.w	dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     b4c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     b50:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     b54:	6861      	ldr	r1, [r4, #4]
     b56:	f8d7 8008 	ldr.w	r8, [r7, #8]
     b5a:	f107 0008 	add.w	r0, r7, #8
     b5e:	eba8 0101 	sub.w	r1, r8, r1
     b62:	0209      	lsls	r1, r1, #8
     b64:	17ca      	asrs	r2, r1, #31
     b66:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b6a:	1209      	asrs	r1, r1, #8
     b6c:	d427      	bmi.n	bbe <MPSL_IRQ_RADIO_Handler+0x20a>
     b6e:	89c0      	ldrh	r0, [r0, #14]
     b70:	2800      	cmp	r0, #0
     b72:	f000 8129 	beq.w	dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     b76:	89e0      	ldrh	r0, [r4, #14]
     b78:	2800      	cmp	r0, #0
     b7a:	f040 8125 	bne.w	dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     b7e:	f8d4 a000 	ldr.w	sl, [r4]
     b82:	f003 f85b 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     b86:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     b8a:	bf08      	it	eq
     b8c:	200d      	moveq	r0, #13
     b8e:	d00b      	beq.n	ba8 <MPSL_IRQ_RADIO_Handler+0x1f4>
     b90:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     b94:	3856      	subs	r0, #86	; 0x56
     b96:	bf08      	it	eq
     b98:	201c      	moveq	r0, #28
     b9a:	d005      	beq.n	ba8 <MPSL_IRQ_RADIO_Handler+0x1f4>
     b9c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ba0:	389f      	subs	r0, #159	; 0x9f
     ba2:	bf14      	ite	ne
     ba4:	2000      	movne	r0, #0
     ba6:	2032      	moveq	r0, #50	; 0x32
     ba8:	1c41      	adds	r1, r0, #1
     baa:	eba8 000a 	sub.w	r0, r8, sl
     bae:	0200      	lsls	r0, r0, #8
     bb0:	17c2      	asrs	r2, r0, #31
     bb2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     bb6:	1200      	asrs	r0, r0, #8
     bb8:	4288      	cmp	r0, r1
     bba:	f280 8105 	bge.w	dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     bbe:	f889 5000 	strb.w	r5, [r9]
     bc2:	7e38      	ldrb	r0, [r7, #24]
     bc4:	7c21      	ldrb	r1, [r4, #16]
     bc6:	4288      	cmp	r0, r1
     bc8:	d906      	bls.n	bd8 <MPSL_IRQ_RADIO_Handler+0x224>
     bca:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     bce:	7845      	ldrb	r5, [r0, #1]
     bd0:	2d20      	cmp	r5, #32
     bd2:	d1bb      	bne.n	b4c <MPSL_IRQ_RADIO_Handler+0x198>
     bd4:	f000 b8f8 	b.w	dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     bd8:	f89d 001c 	ldrb.w	r0, [sp, #28]
     bdc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     be0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     be4:	8ac1      	ldrh	r1, [r0, #22]
     be6:	68c5      	ldr	r5, [r0, #12]
     be8:	bbe1      	cbnz	r1, c64 <MPSL_IRQ_RADIO_Handler+0x2b0>
     bea:	89e1      	ldrh	r1, [r4, #14]
     bec:	b3d1      	cbz	r1, c64 <MPSL_IRQ_RADIO_Handler+0x2b0>
     bee:	6887      	ldr	r7, [r0, #8]
     bf0:	f003 f824 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     bf4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     bf8:	bf08      	it	eq
     bfa:	200d      	moveq	r0, #13
     bfc:	d00b      	beq.n	c16 <MPSL_IRQ_RADIO_Handler+0x262>
     bfe:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c02:	3856      	subs	r0, #86	; 0x56
     c04:	bf08      	it	eq
     c06:	201c      	moveq	r0, #28
     c08:	d005      	beq.n	c16 <MPSL_IRQ_RADIO_Handler+0x262>
     c0a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c0e:	389f      	subs	r0, #159	; 0x9f
     c10:	bf14      	ite	ne
     c12:	2000      	movne	r0, #0
     c14:	2032      	moveq	r0, #50	; 0x32
     c16:	1c41      	adds	r1, r0, #1
     c18:	1be8      	subs	r0, r5, r7
     c1a:	0200      	lsls	r0, r0, #8
     c1c:	17c2      	asrs	r2, r0, #31
     c1e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c22:	1200      	asrs	r0, r0, #8
     c24:	4288      	cmp	r0, r1
     c26:	da1d      	bge.n	c64 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c28:	f003 f808 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c2c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c30:	bf08      	it	eq
     c32:	200d      	moveq	r0, #13
     c34:	d00b      	beq.n	c4e <MPSL_IRQ_RADIO_Handler+0x29a>
     c36:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c3a:	3856      	subs	r0, #86	; 0x56
     c3c:	bf08      	it	eq
     c3e:	201c      	moveq	r0, #28
     c40:	d005      	beq.n	c4e <MPSL_IRQ_RADIO_Handler+0x29a>
     c42:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c46:	389f      	subs	r0, #159	; 0x9f
     c48:	bf14      	ite	ne
     c4a:	2000      	movne	r0, #0
     c4c:	2032      	moveq	r0, #50	; 0x32
     c4e:	f89d 101c 	ldrb.w	r1, [sp, #28]
     c52:	1c40      	adds	r0, r0, #1
     c54:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     c58:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     c5c:	6889      	ldr	r1, [r1, #8]
     c5e:	4408      	add	r0, r1
     c60:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     c64:	9808      	ldr	r0, [sp, #32]
     c66:	1a28      	subs	r0, r5, r0
     c68:	0200      	lsls	r0, r0, #8
     c6a:	17c1      	asrs	r1, r0, #31
     c6c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     c70:	1200      	asrs	r0, r0, #8
     c72:	2800      	cmp	r0, #0
     c74:	dd03      	ble.n	c7e <MPSL_IRQ_RADIO_Handler+0x2ca>
     c76:	b011      	add	sp, #68	; 0x44
     c78:	2000      	movs	r0, #0
     c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c7e:	6820      	ldr	r0, [r4, #0]
     c80:	42a8      	cmp	r0, r5
     c82:	d902      	bls.n	c8a <MPSL_IRQ_RADIO_Handler+0x2d6>
     c84:	68a1      	ldr	r1, [r4, #8]
     c86:	1c49      	adds	r1, r1, #1
     c88:	60a1      	str	r1, [r4, #8]
     c8a:	6861      	ldr	r1, [r4, #4]
     c8c:	f10d 0a18 	add.w	sl, sp, #24
     c90:	1a08      	subs	r0, r1, r0
     c92:	4428      	add	r0, r5
     c94:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     c98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c9c:	e9c4 1000 	strd	r1, r0, [r4]
     ca0:	9810      	ldr	r0, [sp, #64]	; 0x40
     ca2:	900b      	str	r0, [sp, #44]	; 0x2c
     ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
     ca6:	f10d 081c 	add.w	r8, sp, #28
     caa:	f890 5020 	ldrb.w	r5, [r0, #32]
     cae:	2020      	movs	r0, #32
     cb0:	f88d 0018 	strb.w	r0, [sp, #24]
     cb4:	2d20      	cmp	r5, #32
     cb6:	d03c      	beq.n	d32 <MPSL_IRQ_RADIO_Handler+0x37e>
     cb8:	4947      	ldr	r1, [pc, #284]	; (dd8 <MPSL_IRQ_RADIO_Handler+0x424>)
     cba:	980b      	ldr	r0, [sp, #44]	; 0x2c
     cbc:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
     cc0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     cc4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     cc8:	f100 0108 	add.w	r1, r0, #8
     ccc:	68c0      	ldr	r0, [r0, #12]
     cce:	6827      	ldr	r7, [r4, #0]
     cd0:	1a38      	subs	r0, r7, r0
     cd2:	0200      	lsls	r0, r0, #8
     cd4:	17c2      	asrs	r2, r0, #31
     cd6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     cda:	1200      	asrs	r0, r0, #8
     cdc:	d429      	bmi.n	d32 <MPSL_IRQ_RADIO_Handler+0x37e>
     cde:	89e0      	ldrh	r0, [r4, #14]
     ce0:	b300      	cbz	r0, d24 <MPSL_IRQ_RADIO_Handler+0x370>
     ce2:	89c8      	ldrh	r0, [r1, #14]
     ce4:	b9f0      	cbnz	r0, d24 <MPSL_IRQ_RADIO_Handler+0x370>
     ce6:	f8d1 9000 	ldr.w	r9, [r1]
     cea:	f002 ffa7 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     cee:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     cf2:	bf08      	it	eq
     cf4:	200d      	moveq	r0, #13
     cf6:	d00b      	beq.n	d10 <MPSL_IRQ_RADIO_Handler+0x35c>
     cf8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     cfc:	3856      	subs	r0, #86	; 0x56
     cfe:	bf08      	it	eq
     d00:	201c      	moveq	r0, #28
     d02:	d005      	beq.n	d10 <MPSL_IRQ_RADIO_Handler+0x35c>
     d04:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d08:	389f      	subs	r0, #159	; 0x9f
     d0a:	bf14      	ite	ne
     d0c:	2000      	movne	r0, #0
     d0e:	2032      	moveq	r0, #50	; 0x32
     d10:	1c41      	adds	r1, r0, #1
     d12:	eba7 0009 	sub.w	r0, r7, r9
     d16:	0200      	lsls	r0, r0, #8
     d18:	17c2      	asrs	r2, r0, #31
     d1a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d1e:	1200      	asrs	r0, r0, #8
     d20:	4288      	cmp	r0, r1
     d22:	db06      	blt.n	d32 <MPSL_IRQ_RADIO_Handler+0x37e>
     d24:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d28:	f88a 5000 	strb.w	r5, [sl]
     d2c:	7845      	ldrb	r5, [r0, #1]
     d2e:	2d20      	cmp	r5, #32
     d30:	d1c6      	bne.n	cc0 <MPSL_IRQ_RADIO_Handler+0x30c>
     d32:	f89a 0000 	ldrb.w	r0, [sl]
     d36:	f888 0000 	strb.w	r0, [r8]
     d3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
     d3c:	2d20      	cmp	r5, #32
     d3e:	bf1c      	itt	ne
     d40:	4925      	ldrne	r1, [pc, #148]	; (dd8 <MPSL_IRQ_RADIO_Handler+0x424>)
     d42:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     d46:	d03f      	beq.n	dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     d48:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     d4c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     d50:	6860      	ldr	r0, [r4, #4]
     d52:	f8d7 9008 	ldr.w	r9, [r7, #8]
     d56:	f107 0108 	add.w	r1, r7, #8
     d5a:	eba9 0000 	sub.w	r0, r9, r0
     d5e:	0200      	lsls	r0, r0, #8
     d60:	17c2      	asrs	r2, r0, #31
     d62:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d66:	1200      	asrs	r0, r0, #8
     d68:	d422      	bmi.n	db0 <MPSL_IRQ_RADIO_Handler+0x3fc>
     d6a:	89c8      	ldrh	r0, [r1, #14]
     d6c:	b360      	cbz	r0, dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     d6e:	89e0      	ldrh	r0, [r4, #14]
     d70:	bb50      	cbnz	r0, dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     d72:	f8d4 a000 	ldr.w	sl, [r4]
     d76:	f002 ff61 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d7a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d7e:	bf08      	it	eq
     d80:	200d      	moveq	r0, #13
     d82:	d00b      	beq.n	d9c <MPSL_IRQ_RADIO_Handler+0x3e8>
     d84:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     d88:	3856      	subs	r0, #86	; 0x56
     d8a:	bf08      	it	eq
     d8c:	201c      	moveq	r0, #28
     d8e:	d005      	beq.n	d9c <MPSL_IRQ_RADIO_Handler+0x3e8>
     d90:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d94:	389f      	subs	r0, #159	; 0x9f
     d96:	bf14      	ite	ne
     d98:	2000      	movne	r0, #0
     d9a:	2032      	moveq	r0, #50	; 0x32
     d9c:	1c41      	adds	r1, r0, #1
     d9e:	eba9 000a 	sub.w	r0, r9, sl
     da2:	0200      	lsls	r0, r0, #8
     da4:	17c2      	asrs	r2, r0, #31
     da6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     daa:	1200      	asrs	r0, r0, #8
     dac:	4288      	cmp	r0, r1
     dae:	da0b      	bge.n	dc8 <MPSL_IRQ_RADIO_Handler+0x414>
     db0:	f888 5000 	strb.w	r5, [r8]
     db4:	7e38      	ldrb	r0, [r7, #24]
     db6:	7c21      	ldrb	r1, [r4, #16]
     db8:	4288      	cmp	r0, r1
     dba:	f67f af0d 	bls.w	bd8 <MPSL_IRQ_RADIO_Handler+0x224>
     dbe:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     dc2:	7845      	ldrb	r5, [r0, #1]
     dc4:	2d20      	cmp	r5, #32
     dc6:	d1bf      	bne.n	d48 <MPSL_IRQ_RADIO_Handler+0x394>
     dc8:	b011      	add	sp, #68	; 0x44
     dca:	2001      	movs	r0, #1
     dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dd0:	20001024 	.word	0x20001024
     dd4:	20000c24 	.word	0x20000c24
     dd8:	20000fa4 	.word	0x20000fa4
     ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de0:	460f      	mov	r7, r1
     de2:	4606      	mov	r6, r0
     de4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     de8:	494b      	ldr	r1, [pc, #300]	; (f18 <MPSL_IRQ_RADIO_Handler+0x564>)
     dea:	4699      	mov	r9, r3
     dec:	4408      	add	r0, r1
     dee:	4692      	mov	sl, r2
     df0:	f890 4020 	ldrb.w	r4, [r0, #32]
     df4:	2020      	movs	r0, #32
     df6:	7010      	strb	r0, [r2, #0]
     df8:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     dfc:	2c20      	cmp	r4, #32
     dfe:	bf1c      	itt	ne
     e00:	4846      	ldrne	r0, [pc, #280]	; (f1c <MPSL_IRQ_RADIO_Handler+0x568>)
     e02:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     e06:	d038      	beq.n	e7a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e08:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     e0c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     e10:	f100 0108 	add.w	r1, r0, #8
     e14:	68c0      	ldr	r0, [r0, #12]
     e16:	6835      	ldr	r5, [r6, #0]
     e18:	1a28      	subs	r0, r5, r0
     e1a:	0200      	lsls	r0, r0, #8
     e1c:	17c2      	asrs	r2, r0, #31
     e1e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e22:	1200      	asrs	r0, r0, #8
     e24:	d429      	bmi.n	e7a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e26:	89f0      	ldrh	r0, [r6, #14]
     e28:	b300      	cbz	r0, e6c <MPSL_IRQ_RADIO_Handler+0x4b8>
     e2a:	89c8      	ldrh	r0, [r1, #14]
     e2c:	b9f0      	cbnz	r0, e6c <MPSL_IRQ_RADIO_Handler+0x4b8>
     e2e:	6808      	ldr	r0, [r1, #0]
     e30:	9000      	str	r0, [sp, #0]
     e32:	f002 ff03 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     e36:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     e3a:	bf08      	it	eq
     e3c:	200d      	moveq	r0, #13
     e3e:	d00b      	beq.n	e58 <MPSL_IRQ_RADIO_Handler+0x4a4>
     e40:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     e44:	3856      	subs	r0, #86	; 0x56
     e46:	bf08      	it	eq
     e48:	201c      	moveq	r0, #28
     e4a:	d005      	beq.n	e58 <MPSL_IRQ_RADIO_Handler+0x4a4>
     e4c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     e50:	389f      	subs	r0, #159	; 0x9f
     e52:	bf14      	ite	ne
     e54:	2000      	movne	r0, #0
     e56:	2032      	moveq	r0, #50	; 0x32
     e58:	1c41      	adds	r1, r0, #1
     e5a:	9800      	ldr	r0, [sp, #0]
     e5c:	1a28      	subs	r0, r5, r0
     e5e:	0200      	lsls	r0, r0, #8
     e60:	17c2      	asrs	r2, r0, #31
     e62:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e66:	1200      	asrs	r0, r0, #8
     e68:	4288      	cmp	r0, r1
     e6a:	db06      	blt.n	e7a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e6c:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     e70:	f88a 4000 	strb.w	r4, [sl]
     e74:	7844      	ldrb	r4, [r0, #1]
     e76:	2c20      	cmp	r4, #32
     e78:	d1c6      	bne.n	e08 <MPSL_IRQ_RADIO_Handler+0x454>
     e7a:	f89a 0000 	ldrb.w	r0, [sl]
     e7e:	f889 0000 	strb.w	r0, [r9]
     e82:	2c20      	cmp	r4, #32
     e84:	bf1c      	itt	ne
     e86:	4825      	ldrne	r0, [pc, #148]	; (f1c <MPSL_IRQ_RADIO_Handler+0x568>)
     e88:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     e8c:	d040      	beq.n	f10 <MPSL_IRQ_RADIO_Handler+0x55c>
     e8e:	bf00      	nop
     e90:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     e94:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     e98:	6870      	ldr	r0, [r6, #4]
     e9a:	68bd      	ldr	r5, [r7, #8]
     e9c:	f107 0108 	add.w	r1, r7, #8
     ea0:	1a28      	subs	r0, r5, r0
     ea2:	0200      	lsls	r0, r0, #8
     ea4:	17c2      	asrs	r2, r0, #31
     ea6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     eaa:	1200      	asrs	r0, r0, #8
     eac:	d422      	bmi.n	ef4 <MPSL_IRQ_RADIO_Handler+0x540>
     eae:	89c8      	ldrh	r0, [r1, #14]
     eb0:	b370      	cbz	r0, f10 <MPSL_IRQ_RADIO_Handler+0x55c>
     eb2:	89f0      	ldrh	r0, [r6, #14]
     eb4:	bb60      	cbnz	r0, f10 <MPSL_IRQ_RADIO_Handler+0x55c>
     eb6:	f8d6 b000 	ldr.w	fp, [r6]
     eba:	f002 febf 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ebe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ec2:	bf08      	it	eq
     ec4:	200d      	moveq	r0, #13
     ec6:	d00b      	beq.n	ee0 <MPSL_IRQ_RADIO_Handler+0x52c>
     ec8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     ecc:	3856      	subs	r0, #86	; 0x56
     ece:	bf08      	it	eq
     ed0:	201c      	moveq	r0, #28
     ed2:	d005      	beq.n	ee0 <MPSL_IRQ_RADIO_Handler+0x52c>
     ed4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ed8:	389f      	subs	r0, #159	; 0x9f
     eda:	bf14      	ite	ne
     edc:	2000      	movne	r0, #0
     ede:	2032      	moveq	r0, #50	; 0x32
     ee0:	1c41      	adds	r1, r0, #1
     ee2:	eba5 000b 	sub.w	r0, r5, fp
     ee6:	0200      	lsls	r0, r0, #8
     ee8:	17c2      	asrs	r2, r0, #31
     eea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     eee:	1200      	asrs	r0, r0, #8
     ef0:	4288      	cmp	r0, r1
     ef2:	da0d      	bge.n	f10 <MPSL_IRQ_RADIO_Handler+0x55c>
     ef4:	f889 4000 	strb.w	r4, [r9]
     ef8:	7e38      	ldrb	r0, [r7, #24]
     efa:	7c31      	ldrb	r1, [r6, #16]
     efc:	4288      	cmp	r0, r1
     efe:	d802      	bhi.n	f06 <MPSL_IRQ_RADIO_Handler+0x552>
     f00:	2000      	movs	r0, #0
     f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f06:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     f0a:	7844      	ldrb	r4, [r0, #1]
     f0c:	2c20      	cmp	r4, #32
     f0e:	d1bf      	bne.n	e90 <MPSL_IRQ_RADIO_Handler+0x4dc>
     f10:	2001      	movs	r0, #1
     f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f16:	0000      	.short	0x0000
     f18:	20001024 	.word	0x20001024
     f1c:	20000fa4 	.word	0x20000fa4
     f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f24:	b098      	sub	sp, #96	; 0x60
     f26:	4615      	mov	r5, r2
     f28:	468b      	mov	fp, r1
     f2a:	f002 fa3b 	bl	33a4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     f2e:	4604      	mov	r4, r0
     f30:	f002 fcb6 	bl	38a0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     f34:	4606      	mov	r6, r0
     f36:	f1bb 0f01 	cmp.w	fp, #1
     f3a:	bf18      	it	ne
     f3c:	f1bb 0f02 	cmpne.w	fp, #2
     f40:	d005      	beq.n	f4e <MPSL_IRQ_RADIO_Handler+0x59a>
     f42:	f640 1192 	movw	r1, #2450	; 0x992
     f46:	f04f 0070 	mov.w	r0, #112	; 0x70
     f4a:	f003 f821 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f4e:	49ff      	ldr	r1, [pc, #1020]	; (134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>)
     f50:	2001      	movs	r0, #1
     f52:	6008      	str	r0, [r1, #0]
     f54:	49fe      	ldr	r1, [pc, #1016]	; (1350 <CONFIG_FPROTECT_BLOCK_SIZE+0x350>)
     f56:	6889      	ldr	r1, [r1, #8]
     f58:	6008      	str	r0, [r1, #0]
     f5a:	2000      	movs	r0, #0
     f5c:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
     f60:	900e      	str	r0, [sp, #56]	; 0x38
     f62:	1e40      	subs	r0, r0, #1
     f64:	900f      	str	r0, [sp, #60]	; 0x3c
     f66:	49fb      	ldr	r1, [pc, #1004]	; (1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>)
     f68:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     f6c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
     f70:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
     f74:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     f78:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
     f7c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
     f80:	6989      	ldr	r1, [r1, #24]
     f82:	9114      	str	r1, [sp, #80]	; 0x50
     f84:	f00b f91f 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     f88:	4601      	mov	r1, r0
     f8a:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
     f8e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     f92:	4bf1      	ldr	r3, [pc, #964]	; (1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>)
     f94:	4440      	add	r0, r8
     f96:	1c42      	adds	r2, r0, #1
     f98:	1888      	adds	r0, r1, r2
     f9a:	4299      	cmp	r1, r3
     f9c:	d84f      	bhi.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
     f9e:	4def      	ldr	r5, [pc, #956]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
     fa0:	42aa      	cmp	r2, r5
     fa2:	dc53      	bgt.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
     fa4:	4269      	negs	r1, r5
     fa6:	428a      	cmp	r2, r1
     fa8:	db58      	blt.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
     faa:	1c59      	adds	r1, r3, #1
     fac:	4281      	cmp	r1, r0
     fae:	bfdc      	itt	le
     fb0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     fb4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     fb8:	dd05      	ble.n	fc6 <MPSL_IRQ_RADIO_Handler+0x612>
     fba:	2800      	cmp	r0, #0
     fbc:	bfbc      	itt	lt
     fbe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     fc2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     fc6:	900c      	str	r0, [sp, #48]	; 0x30
     fc8:	48e5      	ldr	r0, [pc, #916]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
     fca:	f1b8 0f00 	cmp.w	r8, #0
     fce:	8b80      	ldrh	r0, [r0, #28]
     fd0:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
     fd4:	bf04      	itt	eq
     fd6:	2000      	moveq	r0, #0
     fd8:	900b      	streq	r0, [sp, #44]	; 0x2c
     fda:	d00b      	beq.n	ff4 <MPSL_IRQ_RADIO_Handler+0x640>
     fdc:	2001      	movs	r0, #1
     fde:	900b      	str	r0, [sp, #44]	; 0x2c
     fe0:	48df      	ldr	r0, [pc, #892]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
     fe2:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
     fe6:	b928      	cbnz	r0, ff4 <MPSL_IRQ_RADIO_Handler+0x640>
     fe8:	f002 ff5a 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     fec:	2800      	cmp	r0, #0
     fee:	bf08      	it	eq
     ff0:	2701      	moveq	r7, #1
     ff2:	d000      	beq.n	ff6 <MPSL_IRQ_RADIO_Handler+0x642>
     ff4:	2700      	movs	r7, #0
     ff6:	f002 fe21 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ffa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ffe:	bf08      	it	eq
    1000:	200d      	moveq	r0, #13
    1002:	d00b      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1004:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1008:	3856      	subs	r0, #86	; 0x56
    100a:	bf08      	it	eq
    100c:	201c      	moveq	r0, #28
    100e:	d005      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1010:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1014:	389f      	subs	r0, #159	; 0x9f
    1016:	bf14      	ite	ne
    1018:	2000      	movne	r0, #0
    101a:	2032      	moveq	r0, #50	; 0x32
    101c:	f04f 0900 	mov.w	r9, #0
    1020:	46ca      	mov	sl, r9
    1022:	9009      	str	r0, [sp, #36]	; 0x24
    1024:	4546      	cmp	r6, r8
    1026:	d937      	bls.n	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1028:	990c      	ldr	r1, [sp, #48]	; 0x30
    102a:	f8df 932c 	ldr.w	r9, [pc, #812]	; 1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    102e:	ea6f 0c06 	mvn.w	ip, r6
    1032:	466b      	mov	r3, sp
    1034:	aa16      	add	r2, sp, #88	; 0x58
    1036:	eb01 000c 	add.w	r0, r1, ip
    103a:	4549      	cmp	r1, r9
    103c:	d904      	bls.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    103e:	f240 519e 	movw	r1, #1438	; 0x59e
    1042:	2070      	movs	r0, #112	; 0x70
    1044:	f002 ffa4 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1048:	45ac      	cmp	ip, r5
    104a:	dd04      	ble.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    104c:	f240 519f 	movw	r1, #1439	; 0x59f
    1050:	2070      	movs	r0, #112	; 0x70
    1052:	f002 ff9d 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1056:	49c3      	ldr	r1, [pc, #780]	; (1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>)
    1058:	458c      	cmp	ip, r1
    105a:	da04      	bge.n	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
    105c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    1060:	2070      	movs	r0, #112	; 0x70
    1062:	f002 ff95 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1066:	49c0      	ldr	r1, [pc, #768]	; (1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>)
    1068:	4281      	cmp	r1, r0
    106a:	bfdc      	itt	le
    106c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1070:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1074:	dd05      	ble.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
    1076:	2800      	cmp	r0, #0
    1078:	bfbc      	itt	lt
    107a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    107e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1082:	4619      	mov	r1, r3
    1084:	f001 fefc 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1088:	9800      	ldr	r0, [sp, #0]
    108a:	9910      	ldr	r1, [sp, #64]	; 0x40
    108c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1090:	9000      	str	r0, [sp, #0]
    1092:	1a08      	subs	r0, r1, r0
    1094:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    1098:	2f00      	cmp	r7, #0
    109a:	bf18      	it	ne
    109c:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
    10a0:	d105      	bne.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
    10a2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    10a6:	2800      	cmp	r0, #0
    10a8:	bf18      	it	ne
    10aa:	f04f 0a02 	movne.w	sl, #2
    10ae:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    10b2:	d008      	beq.n	10c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
    10b4:	9810      	ldr	r0, [sp, #64]	; 0x40
    10b6:	1b00      	subs	r0, r0, r4
    10b8:	0200      	lsls	r0, r0, #8
    10ba:	17c1      	asrs	r1, r0, #31
    10bc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    10c0:	1200      	asrs	r0, r0, #8
    10c2:	2801      	cmp	r0, #1
    10c4:	da02      	bge.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
    10c6:	2003      	movs	r0, #3
    10c8:	9d18      	ldr	r5, [sp, #96]	; 0x60
    10ca:	e00d      	b.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10cc:	b157      	cbz	r7, 10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
    10ce:	48a4      	ldr	r0, [pc, #656]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    10d0:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    10d4:	b130      	cbz	r0, 10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
    10d6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    10da:	f110 0a00 	adds.w	sl, r0, #0
    10de:	bf18      	it	ne
    10e0:	f04f 0a02 	movne.w	sl, #2
    10e4:	4625      	mov	r5, r4
    10e6:	2000      	movs	r0, #0
    10e8:	4482      	add	sl, r0
    10ea:	9810      	ldr	r0, [sp, #64]	; 0x40
    10ec:	eba0 0009 	sub.w	r0, r0, r9
    10f0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    10f4:	1e50      	subs	r0, r2, #1
    10f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10fa:	1b41      	subs	r1, r0, r5
    10fc:	0209      	lsls	r1, r1, #8
    10fe:	17cb      	asrs	r3, r1, #31
    1100:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1104:	1209      	asrs	r1, r1, #8
    1106:	4551      	cmp	r1, sl
    1108:	db04      	blt.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    110a:	f1b9 0f00 	cmp.w	r9, #0
    110e:	bf18      	it	ne
    1110:	9210      	strne	r2, [sp, #64]	; 0x40
    1112:	e02d      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1114:	f1b9 0f00 	cmp.w	r9, #0
    1118:	d005      	beq.n	1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
    111a:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
    111e:	b920      	cbnz	r0, 112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
    1120:	f002 fbb4 	bl	388c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1124:	b108      	cbz	r0, 112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
    1126:	b9af      	cbnz	r7, 1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1128:	e00c      	b.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
    112a:	b92f      	cbnz	r7, 1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    112c:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    1130:	2800      	cmp	r0, #0
    1132:	bf18      	it	ne
    1134:	f1aa 0a02 	subne.w	sl, sl, #2
    1138:	f04f 0900 	mov.w	r9, #0
    113c:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
    1140:	464e      	mov	r6, r9
    1142:	e007      	b.n	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1144:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    1148:	b120      	cbz	r0, 1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    114a:	2000      	movs	r0, #0
    114c:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    1150:	f1aa 0a02 	sub.w	sl, sl, #2
    1154:	9810      	ldr	r0, [sp, #64]	; 0x40
    1156:	eba0 0009 	sub.w	r0, r0, r9
    115a:	1e40      	subs	r0, r0, #1
    115c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1160:	1b41      	subs	r1, r0, r5
    1162:	0209      	lsls	r1, r1, #8
    1164:	17ca      	asrs	r2, r1, #31
    1166:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    116a:	1209      	asrs	r1, r1, #8
    116c:	4551      	cmp	r1, sl
    116e:	db7c      	blt.n	126a <CONFIG_FPROTECT_BLOCK_SIZE+0x26a>
    1170:	970a      	str	r7, [sp, #40]	; 0x28
    1172:	4605      	mov	r5, r0
    1174:	f04f 0900 	mov.w	r9, #0
    1178:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    117a:	f001 ffeb 	bl	3154 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    117e:	1a28      	subs	r0, r5, r0
    1180:	0200      	lsls	r0, r0, #8
    1182:	17c1      	asrs	r1, r0, #31
    1184:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1188:	ea4f 2a20 	mov.w	sl, r0, asr #8
    118c:	f002 fd56 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1190:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1194:	bf08      	it	eq
    1196:	200d      	moveq	r0, #13
    1198:	d00b      	beq.n	11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
    119a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    119e:	3856      	subs	r0, #86	; 0x56
    11a0:	bf08      	it	eq
    11a2:	201c      	moveq	r0, #28
    11a4:	d005      	beq.n	11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
    11a6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11aa:	389f      	subs	r0, #159	; 0x9f
    11ac:	bf14      	ite	ne
    11ae:	2000      	movne	r0, #0
    11b0:	2032      	moveq	r0, #50	; 0x32
    11b2:	300b      	adds	r0, #11
    11b4:	4582      	cmp	sl, r0
    11b6:	da20      	bge.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    11b8:	f1bb 0f01 	cmp.w	fp, #1
    11bc:	d002      	beq.n	11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
    11be:	980a      	ldr	r0, [sp, #40]	; 0x28
    11c0:	b140      	cbz	r0, 11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
    11c2:	e012      	b.n	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    11c4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11c8:	d11c      	bne.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11ca:	f640 1113 	movw	r1, #2323	; 0x913
    11ce:	2070      	movs	r0, #112	; 0x70
    11d0:	f002 fede 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11d4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11d8:	d007      	beq.n	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    11da:	1b60      	subs	r0, r4, r5
    11dc:	0200      	lsls	r0, r0, #8
    11de:	17c1      	asrs	r1, r0, #31
    11e0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11e4:	1200      	asrs	r0, r0, #8
    11e6:	2804      	cmp	r0, #4
    11e8:	dd04      	ble.n	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    11ea:	462c      	mov	r4, r5
    11ec:	4620      	mov	r0, r4
    11ee:	f001 ffd7 	bl	31a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    11f2:	e007      	b.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11f4:	2800      	cmp	r0, #0
    11f6:	dc64      	bgt.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
    11f8:	e004      	b.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11fa:	462c      	mov	r4, r5
    11fc:	4620      	mov	r0, r4
    11fe:	f001 ffcf 	bl	31a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1202:	46b9      	mov	r9, r7
    1204:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1208:	d056      	beq.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    120a:	9810      	ldr	r0, [sp, #64]	; 0x40
    120c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    120e:	1b00      	subs	r0, r0, r4
    1210:	1b12      	subs	r2, r2, r4
    1212:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1216:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    121a:	2801      	cmp	r0, #1
    121c:	d351      	bcc.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
    121e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1222:	bf98      	it	ls
    1224:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1228:	d84b      	bhi.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
    122a:	4620      	mov	r0, r4
    122c:	f00a ffcb 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1230:	990c      	ldr	r1, [sp, #48]	; 0x30
    1232:	4a4a      	ldr	r2, [pc, #296]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1234:	1a0d      	subs	r5, r1, r0
    1236:	f04f 0a00 	mov.w	sl, #0
    123a:	1aaa      	subs	r2, r5, r2
    123c:	f17a 0200 	sbcs.w	r2, sl, #0
    1240:	d318      	bcc.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1242:	4b46      	ldr	r3, [pc, #280]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1244:	1a42      	subs	r2, r0, r1
    1246:	1ad3      	subs	r3, r2, r3
    1248:	f17a 0300 	sbcs.w	r3, sl, #0
    124c:	d312      	bcc.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    124e:	4b42      	ldr	r3, [pc, #264]	; (1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>)
    1250:	42ab      	cmp	r3, r5
    1252:	bf3e      	ittt	cc
    1254:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    1258:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    125c:	1845      	addcc	r5, r0, r1
    125e:	d309      	bcc.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1260:	4293      	cmp	r3, r2
    1262:	d232      	bcs.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1264:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    1268:	e000      	b.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
    126a:	e02a      	b.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
    126c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1270:	4408      	add	r0, r1
    1272:	4245      	negs	r5, r0
    1274:	4f3a      	ldr	r7, [pc, #232]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    1276:	7fb8      	ldrb	r0, [r7, #30]
    1278:	b360      	cbz	r0, 12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
    127a:	bf00      	nop
    127c:	f1bb 0f01 	cmp.w	fp, #1
    1280:	d005      	beq.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
    1282:	2002      	movs	r0, #2
    1284:	f002 f9c8 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1288:	2001      	movs	r0, #1
    128a:	f002 f9c5 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    128e:	45b0      	cmp	r8, r6
    1290:	d22c      	bcs.n	12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
    1292:	eba5 0106 	sub.w	r1, r5, r6
    1296:	f04f 0002 	mov.w	r0, #2
    129a:	f002 f907 	bl	34ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    129e:	b390      	cbz	r0, 1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
    12a0:	f1b8 0f00 	cmp.w	r8, #0
    12a4:	bf1c      	itt	ne
    12a6:	eba5 0108 	subne.w	r1, r5, r8
    12aa:	2001      	movne	r0, #1
    12ac:	d034      	beq.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    12ae:	bf00      	nop
    12b0:	f002 f8fc 	bl	34ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12b4:	b338      	cbz	r0, 1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
    12b6:	e02f      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    12b8:	f640 2126 	movw	r1, #2598	; 0xa26
    12bc:	2070      	movs	r0, #112	; 0x70
    12be:	f002 fe67 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12c2:	b01b      	add	sp, #108	; 0x6c
    12c4:	2000      	movs	r0, #0
    12c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ca:	f640 21fa 	movw	r1, #2810	; 0xafa
    12ce:	2070      	movs	r0, #112	; 0x70
    12d0:	f002 fe5e 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12d4:	45b0      	cmp	r8, r6
    12d6:	bf34      	ite	cc
    12d8:	4630      	movcc	r0, r6
    12da:	4640      	movcs	r0, r8
    12dc:	301e      	adds	r0, #30
    12de:	42a8      	cmp	r0, r5
    12e0:	dbcc      	blt.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    12e2:	f640 213a 	movw	r1, #2618	; 0xa3a
    12e6:	2070      	movs	r0, #112	; 0x70
    12e8:	f002 fe52 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12ec:	d90c      	bls.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    12ee:	eba5 0108 	sub.w	r1, r5, r8
    12f2:	2001      	movs	r0, #1
    12f4:	f002 f8da 	bl	34ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12f8:	b128      	cbz	r0, 1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
    12fa:	2e00      	cmp	r6, #0
    12fc:	bf1c      	itt	ne
    12fe:	1ba9      	subne	r1, r5, r6
    1300:	2002      	movne	r0, #2
    1302:	d009      	beq.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    1304:	e7d4      	b.n	12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>
    1306:	e041      	b.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1308:	ea56 0008 	orrs.w	r0, r6, r8
    130c:	d004      	beq.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    130e:	f640 1176 	movw	r1, #2422	; 0x976
    1312:	2070      	movs	r0, #112	; 0x70
    1314:	f002 fe3c 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1318:	4629      	mov	r1, r5
    131a:	2000      	movs	r0, #0
    131c:	f002 f8c6 	bl	34ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1320:	b3a0      	cbz	r0, 138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1322:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1324:	2601      	movs	r6, #1
    1326:	2800      	cmp	r0, #0
    1328:	bf04      	itt	eq
    132a:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    132e:	2800      	cmpeq	r0, #0
    1330:	d002      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    1332:	f1b9 0f00 	cmp.w	r9, #0
    1336:	d034      	beq.n	13a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a>
    1338:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    133c:	b118      	cbz	r0, 1346 <CONFIG_FPROTECT_BLOCK_SIZE+0x346>
    133e:	f002 fc83 	bl	3c48 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1342:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    1346:	f1b9 0f00 	cmp.w	r9, #0
    134a:	e00f      	b.n	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
    134c:	40000508 	.word	0x40000508
    1350:	2000003c 	.word	0x2000003c
    1354:	20000c24 	.word	0x20000c24
    1358:	1e847fff 	.word	0x1e847fff
    135c:	0f424000 	.word	0x0f424000
    1360:	20001024 	.word	0x20001024
    1364:	f0bdc000 	.word	0xf0bdc000
    1368:	1e848000 	.word	0x1e848000
    136c:	d01c      	beq.n	13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
    136e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1370:	1a20      	subs	r0, r4, r0
    1372:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1376:	2005      	movs	r0, #5
    1378:	f002 f898 	bl	34ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    137c:	b360      	cbz	r0, 13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    137e:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1382:	2800      	cmp	r0, #0
    1384:	bf08      	it	eq
    1386:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    138a:	e015      	b.n	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    138c:	e7ff      	b.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    138e:	2002      	movs	r0, #2
    1390:	f002 f942 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1394:	2001      	movs	r0, #1
    1396:	f002 f93f 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    139a:	b01b      	add	sp, #108	; 0x6c
    139c:	2000      	movs	r0, #0
    139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13a2:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    13a6:	b190      	cbz	r0, 13ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46>
    13a8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    13ac:	b120      	cbz	r0, 13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    13ae:	2005      	movs	r0, #5
    13b0:	f002 f932 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13b4:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    13b8:	eba5 0008 	sub.w	r0, r5, r8
    13bc:	f1a0 0119 	sub.w	r1, r0, #25
    13c0:	2900      	cmp	r1, #0
    13c2:	dc0e      	bgt.n	13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
    13c4:	f640 2163 	movw	r1, #2659	; 0xa63
    13c8:	2070      	movs	r0, #112	; 0x70
    13ca:	f002 fde1 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ce:	f002 fc57 	bl	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    13d2:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    13d6:	e7b6      	b.n	1346 <CONFIG_FPROTECT_BLOCK_SIZE+0x346>
    13d8:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    13dc:	2070      	movs	r0, #112	; 0x70
    13de:	f002 fdd7 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13e2:	2003      	movs	r0, #3
    13e4:	f002 f862 	bl	34ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    13e8:	b1c0      	cbz	r0, 141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
    13ea:	480f      	ldr	r0, [pc, #60]	; (1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>)
    13ec:	6880      	ldr	r0, [r0, #8]
    13ee:	f8c0 a000 	str.w	sl, [r0]
    13f2:	480e      	ldr	r0, [pc, #56]	; (142c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4>)
    13f4:	f8c0 a000 	str.w	sl, [r0]
    13f8:	ac0e      	add	r4, sp, #56	; 0x38
    13fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    13fe:	6038      	str	r0, [r7, #0]
    1400:	6079      	str	r1, [r7, #4]
    1402:	60ba      	str	r2, [r7, #8]
    1404:	60fb      	str	r3, [r7, #12]
    1406:	ac12      	add	r4, sp, #72	; 0x48
    1408:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    140c:	6138      	str	r0, [r7, #16]
    140e:	6179      	str	r1, [r7, #20]
    1410:	61ba      	str	r2, [r7, #24]
    1412:	61fb      	str	r3, [r7, #28]
    1414:	b01b      	add	sp, #108	; 0x6c
    1416:	2001      	movs	r0, #1
    1418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    141c:	f640 216b 	movw	r1, #2667	; 0xa6b
    1420:	2070      	movs	r0, #112	; 0x70
    1422:	f002 fdb5 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1426:	0000      	.short	0x0000
    1428:	2000003c 	.word	0x2000003c
    142c:	40000508 	.word	0x40000508
    1430:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1434:	4614      	mov	r4, r2
    1436:	460d      	mov	r5, r1
    1438:	f04f 0a00 	mov.w	sl, #0
    143c:	890a      	ldrh	r2, [r1, #8]
    143e:	4651      	mov	r1, sl
    1440:	f362 411f 	bfi	r1, r2, #16, #16
    1444:	7aaa      	ldrb	r2, [r5, #10]
    1446:	46d1      	mov	r9, sl
    1448:	f362 0907 	bfi	r9, r2, #0, #8
    144c:	7aea      	ldrb	r2, [r5, #11]
    144e:	4606      	mov	r6, r0
    1450:	f362 290f 	bfi	r9, r2, #8, #8
    1454:	782a      	ldrb	r2, [r5, #0]
    1456:	b083      	sub	sp, #12
    1458:	6840      	ldr	r0, [r0, #4]
    145a:	f8c4 a000 	str.w	sl, [r4]
    145e:	f362 4917 	bfi	r9, r2, #16, #8
    1462:	f8c4 a004 	str.w	sl, [r4, #4]
    1466:	f8c4 9010 	str.w	r9, [r4, #16]
    146a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    146e:	4f9d      	ldr	r7, [pc, #628]	; (16e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x35c>)
    1470:	6870      	ldr	r0, [r6, #4]
    1472:	fba0 8907 	umull	r8, r9, r0, r7
    1476:	6830      	ldr	r0, [r6, #0]
    1478:	f00a fea5 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    147c:	eb10 0108 	adds.w	r1, r0, r8
    1480:	eb4a 0209 	adc.w	r2, sl, r9
    1484:	7828      	ldrb	r0, [r5, #0]
    1486:	ea4f 0967 	mov.w	r9, r7, asr #1
    148a:	f1c9 0b00 	rsb	fp, r9, #0
    148e:	b170      	cbz	r0, 14ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x126>
    1490:	89e0      	ldrh	r0, [r4, #14]
    1492:	f894 8011 	ldrb.w	r8, [r4, #17]
    1496:	43c0      	mvns	r0, r0
    1498:	f8d5 a004 	ldr.w	sl, [r5, #4]
    149c:	f104 020c 	add.w	r2, r4, #12
    14a0:	4548      	cmp	r0, r9
    14a2:	dd7c      	ble.n	159e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x216>
    14a4:	f240 519f 	movw	r1, #1439	; 0x59f
    14a8:	2070      	movs	r0, #112	; 0x70
    14aa:	f002 fd71 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14ae:	f8df c238 	ldr.w	ip, [pc, #568]	; 16e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x360>
    14b2:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    14b6:	eb11 0a0c 	adds.w	sl, r1, ip
    14ba:	f142 0c00 	adc.w	ip, r2, #0
    14be:	ebb0 0a0a 	subs.w	sl, r0, sl
    14c2:	eb73 0c0c 	sbcs.w	ip, r3, ip
    14c6:	d272      	bcs.n	15ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x226>
    14c8:	1a41      	subs	r1, r0, r1
    14ca:	eb73 0102 	sbcs.w	r1, r3, r2
    14ce:	d36e      	bcc.n	15ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x226>
    14d0:	ebb0 0608 	subs.w	r6, r0, r8
    14d4:	42b7      	cmp	r7, r6
    14d6:	d82b      	bhi.n	1530 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a8>
    14d8:	89e0      	ldrh	r0, [r4, #14]
    14da:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    14de:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    14e2:	43c1      	mvns	r1, r0
    14e4:	4a81      	ldr	r2, [pc, #516]	; (16ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x364>)
    14e6:	eb08 0001 	add.w	r0, r8, r1
    14ea:	4542      	cmp	r2, r8
    14ec:	d32b      	bcc.n	1546 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1be>
    14ee:	4549      	cmp	r1, r9
    14f0:	dcd8      	bgt.n	14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    14f2:	4559      	cmp	r1, fp
    14f4:	db66      	blt.n	15c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23c>
    14f6:	4287      	cmp	r7, r0
    14f8:	bfdc      	itt	le
    14fa:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    14fe:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1502:	dd05      	ble.n	1510 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188>
    1504:	2800      	cmp	r0, #0
    1506:	bfbc      	itt	lt
    1508:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    150c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1510:	466a      	mov	r2, sp
    1512:	a901      	add	r1, sp, #4
    1514:	f001 fcb4 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1518:	89e0      	ldrh	r0, [r4, #14]
    151a:	f89d 1000 	ldrb.w	r1, [sp]
    151e:	1a30      	subs	r0, r6, r0
    1520:	1a40      	subs	r0, r0, r1
    1522:	1e40      	subs	r0, r0, #1
    1524:	42b8      	cmp	r0, r7
    1526:	d302      	bcc.n	152e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a6>
    1528:	68a0      	ldr	r0, [r4, #8]
    152a:	1c40      	adds	r0, r0, #1
    152c:	60a0      	str	r0, [r4, #8]
    152e:	4646      	mov	r6, r8
    1530:	89e0      	ldrh	r0, [r4, #14]
    1532:	4b6e      	ldr	r3, [pc, #440]	; (16ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x364>)
    1534:	43c1      	mvns	r1, r0
    1536:	686d      	ldr	r5, [r5, #4]
    1538:	f894 8011 	ldrb.w	r8, [r4, #17]
    153c:	1870      	adds	r0, r6, r1
    153e:	f104 020c 	add.w	r2, r4, #12
    1542:	429e      	cmp	r6, r3
    1544:	d904      	bls.n	1550 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c8>
    1546:	f240 519e 	movw	r1, #1438	; 0x59e
    154a:	2070      	movs	r0, #112	; 0x70
    154c:	f002 fd20 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1550:	4549      	cmp	r1, r9
    1552:	dca7      	bgt.n	14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    1554:	4559      	cmp	r1, fp
    1556:	db35      	blt.n	15c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23c>
    1558:	4287      	cmp	r7, r0
    155a:	bfdc      	itt	le
    155c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1560:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1564:	dd05      	ble.n	1572 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ea>
    1566:	2800      	cmp	r0, #0
    1568:	bfbc      	itt	lt
    156a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    156e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1572:	4621      	mov	r1, r4
    1574:	f001 fc84 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1578:	6820      	ldr	r0, [r4, #0]
    157a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    157e:	1970      	adds	r0, r6, r5
    1580:	1c40      	adds	r0, r0, #1
    1582:	6021      	str	r1, [r4, #0]
    1584:	f1b8 0f00 	cmp.w	r8, #0
    1588:	bf08      	it	eq
    158a:	307a      	addeq	r0, #122	; 0x7a
    158c:	d004      	beq.n	1598 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x210>
    158e:	f1b8 0f01 	cmp.w	r8, #1
    1592:	bf08      	it	eq
    1594:	3048      	addeq	r0, #72	; 0x48
    1596:	d13a      	bne.n	160e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x286>
    1598:	f001 fc56 	bl	2e48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    159c:	e001      	b.n	15a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21a>
    159e:	e00e      	b.n	15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
    15a0:	e005      	b.n	15ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x226>
    15a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15a6:	6060      	str	r0, [r4, #4]
    15a8:	b007      	add	sp, #28
    15aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ae:	6830      	ldr	r0, [r6, #0]
    15b0:	1e40      	subs	r0, r0, #1
    15b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15b6:	6020      	str	r0, [r4, #0]
    15b8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    15bc:	e7f3      	b.n	15a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21e>
    15be:	4601      	mov	r1, r0
    15c0:	4558      	cmp	r0, fp
    15c2:	da04      	bge.n	15ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x246>
    15c4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    15c8:	2070      	movs	r0, #112	; 0x70
    15ca:	f002 fce1 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15ce:	4287      	cmp	r7, r0
    15d0:	bfdc      	itt	le
    15d2:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    15d6:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    15da:	dd05      	ble.n	15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>
    15dc:	2800      	cmp	r0, #0
    15de:	bfbc      	itt	lt
    15e0:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    15e4:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    15e8:	4621      	mov	r1, r4
    15ea:	f001 fc49 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    15ee:	6820      	ldr	r0, [r4, #0]
    15f0:	f1b8 0f00 	cmp.w	r8, #0
    15f4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    15f8:	f10a 0001 	add.w	r0, sl, #1
    15fc:	6021      	str	r1, [r4, #0]
    15fe:	bf08      	it	eq
    1600:	307a      	addeq	r0, #122	; 0x7a
    1602:	d009      	beq.n	1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>
    1604:	f1b8 0f01 	cmp.w	r8, #1
    1608:	bf08      	it	eq
    160a:	3048      	addeq	r0, #72	; 0x48
    160c:	d004      	beq.n	1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>
    160e:	f240 6139 	movw	r1, #1593	; 0x639
    1612:	2070      	movs	r0, #112	; 0x70
    1614:	f002 fcbc 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1618:	f001 fc16 	bl	2e48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    161c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1620:	6061      	str	r1, [r4, #4]
    1622:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    1626:	aa01      	add	r2, sp, #4
    1628:	4669      	mov	r1, sp
    162a:	4648      	mov	r0, r9
    162c:	6837      	ldr	r7, [r6, #0]
    162e:	f001 fc27 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1632:	f002 f935 	bl	38a0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1636:	f001 fc07 	bl	2e48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    163a:	4680      	mov	r8, r0
    163c:	482c      	ldr	r0, [pc, #176]	; (16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>)
    163e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1642:	2920      	cmp	r1, #32
    1644:	d02a      	beq.n	169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    1646:	68c0      	ldr	r0, [r0, #12]
    1648:	1d40      	adds	r0, r0, #5
    164a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    164e:	bf00      	nop
    1650:	e9d4 2100 	ldrd	r2, r1, [r4]
    1654:	1a89      	subs	r1, r1, r2
    1656:	4401      	add	r1, r0
    1658:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    165c:	e9c4 0100 	strd	r0, r1, [r4]
    1660:	6831      	ldr	r1, [r6, #0]
    1662:	4281      	cmp	r1, r0
    1664:	d902      	bls.n	166c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e4>
    1666:	68a0      	ldr	r0, [r4, #8]
    1668:	1c40      	adds	r0, r0, #1
    166a:	60a0      	str	r0, [r4, #8]
    166c:	6832      	ldr	r2, [r6, #0]
    166e:	6928      	ldr	r0, [r5, #16]
    1670:	4621      	mov	r1, r4
    1672:	9b06      	ldr	r3, [sp, #24]
    1674:	f7ff f9fa 	bl	a6c <MPSL_IRQ_RADIO_Handler+0xb8>
    1678:	2800      	cmp	r0, #0
    167a:	bf1c      	itt	ne
    167c:	b007      	addne	sp, #28
    167e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1682:	e9d4 1000 	ldrd	r1, r0, [r4]
    1686:	1a40      	subs	r0, r0, r1
    1688:	6831      	ldr	r1, [r6, #0]
    168a:	6021      	str	r1, [r4, #0]
    168c:	6831      	ldr	r1, [r6, #0]
    168e:	4408      	add	r0, r1
    1690:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1694:	6060      	str	r0, [r4, #4]
    1696:	b007      	add	sp, #28
    1698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    169c:	3709      	adds	r7, #9
    169e:	f1b9 0f00 	cmp.w	r9, #0
    16a2:	d016      	beq.n	16d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34a>
    16a4:	f002 fbfc 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16a8:	b998      	cbnz	r0, 16d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34a>
    16aa:	f002 fac7 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    16ae:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    16b2:	bf08      	it	eq
    16b4:	200d      	moveq	r0, #13
    16b6:	d00b      	beq.n	16d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x348>
    16b8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    16bc:	3856      	subs	r0, #86	; 0x56
    16be:	bf08      	it	eq
    16c0:	201c      	moveq	r0, #28
    16c2:	d005      	beq.n	16d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x348>
    16c4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    16c8:	389f      	subs	r0, #159	; 0x9f
    16ca:	bf14      	ite	ne
    16cc:	2000      	movne	r0, #0
    16ce:	2032      	moveq	r0, #50	; 0x32
    16d0:	4407      	add	r7, r0
    16d2:	9800      	ldr	r0, [sp, #0]
    16d4:	4580      	cmp	r8, r0
    16d6:	bf84      	itt	hi
    16d8:	eba8 0000 	subhi.w	r0, r8, r0
    16dc:	4407      	addhi	r7, r0
    16de:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    16e2:	e7b5      	b.n	1650 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c8>
    16e4:	1e848000 	.word	0x1e848000
    16e8:	0f424000 	.word	0x0f424000
    16ec:	1e847fff 	.word	0x1e847fff
    16f0:	20001024 	.word	0x20001024
    16f4:	b570      	push	{r4, r5, r6, lr}
    16f6:	4d1e      	ldr	r5, [pc, #120]	; (1770 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e8>)
    16f8:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    16fc:	2820      	cmp	r0, #32
    16fe:	bf18      	it	ne
    1700:	bd70      	popne	{r4, r5, r6, pc}
    1702:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1706:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    170a:	4428      	add	r0, r5
    170c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1710:	2c20      	cmp	r4, #32
    1712:	d027      	beq.n	1764 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3dc>
    1714:	4b17      	ldr	r3, [pc, #92]	; (1774 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ec>)
    1716:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    171a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    171e:	7849      	ldrb	r1, [r1, #1]
    1720:	f880 1020 	strb.w	r1, [r0, #32]
    1724:	20ff      	movs	r0, #255	; 0xff
    1726:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    172a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    172e:	4621      	mov	r1, r4
    1730:	2002      	movs	r0, #2
    1732:	f000 f891 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    1736:	2000      	movs	r0, #0
    1738:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    173c:	77a8      	strb	r0, [r5, #30]
    173e:	490e      	ldr	r1, [pc, #56]	; (1778 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f0>)
    1740:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1744:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1748:	7e00      	ldrb	r0, [r0, #24]
    174a:	2800      	cmp	r0, #0
    174c:	bf08      	it	eq
    174e:	f002 fd89 	bleq	4264 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1752:	2000      	movs	r0, #0
    1754:	4909      	ldr	r1, [pc, #36]	; (177c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f4>)
    1756:	6849      	ldr	r1, [r1, #4]
    1758:	2900      	cmp	r1, #0
    175a:	bf08      	it	eq
    175c:	bd70      	popeq	{r4, r5, r6, pc}
    175e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1762:	4708      	bx	r1
    1764:	f240 3132 	movw	r1, #818	; 0x332
    1768:	2070      	movs	r0, #112	; 0x70
    176a:	f002 fc11 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    176e:	0000      	.short	0x0000
    1770:	20001024 	.word	0x20001024
    1774:	20000fa4 	.word	0x20000fa4
    1778:	20000c24 	.word	0x20000c24
    177c:	2000003c 	.word	0x2000003c
    1780:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1784:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>
    1788:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    178c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1790:	4440      	add	r0, r8
    1792:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1796:	2c20      	cmp	r4, #32
    1798:	bf08      	it	eq
    179a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    179e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>
    17a2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1850 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c8>
    17a6:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    17aa:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    17ae:	2607      	movs	r6, #7
    17b0:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    17b4:	2801      	cmp	r0, #1
    17b6:	d00e      	beq.n	17d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44e>
    17b8:	2804      	cmp	r0, #4
    17ba:	bf08      	it	eq
    17bc:	2602      	moveq	r6, #2
    17be:	d00a      	beq.n	17d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44e>
    17c0:	2805      	cmp	r0, #5
    17c2:	bf0c      	ite	eq
    17c4:	2603      	moveq	r6, #3
    17c6:	2806      	cmpne	r0, #6
    17c8:	d005      	beq.n	17d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44e>
    17ca:	f640 01dd 	movw	r1, #2269	; 0x8dd
    17ce:	f04f 0070 	mov.w	r0, #112	; 0x70
    17d2:	f002 fbdd 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d6:	f1bb 0f00 	cmp.w	fp, #0
    17da:	bf18      	it	ne
    17dc:	f3af 8000 	nopne.w
    17e0:	f3ef 8010 	mrs	r0, PRIMASK
    17e4:	b672      	cpsid	i
    17e6:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    17ea:	784a      	ldrb	r2, [r1, #1]
    17ec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    17f0:	4441      	add	r1, r8
    17f2:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    17f6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    17fa:	42a2      	cmp	r2, r4
    17fc:	bf04      	itt	eq
    17fe:	2220      	moveq	r2, #32
    1800:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1804:	b1c0      	cbz	r0, 1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>
    1806:	462a      	mov	r2, r5
    1808:	4621      	mov	r1, r4
    180a:	2001      	movs	r0, #1
    180c:	f000 f824 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    1810:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1814:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1818:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    181c:	6840      	ldr	r0, [r0, #4]
    181e:	4631      	mov	r1, r6
    1820:	4790      	blx	r2
    1822:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1826:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    182a:	4440      	add	r0, r8
    182c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1830:	2c20      	cmp	r4, #32
    1832:	d1ba      	bne.n	17aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x422>
    1834:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1838:	4806      	ldr	r0, [pc, #24]	; (1854 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4cc>)
    183a:	2800      	cmp	r0, #0
    183c:	bf18      	it	ne
    183e:	f3af 8000 	nopne.w
    1842:	b662      	cpsie	i
    1844:	e7df      	b.n	1806 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x47e>
    1846:	0000      	.short	0x0000
    1848:	20001024 	.word	0x20001024
    184c:	00000000 	.word	0x00000000
    1850:	20000fa4 	.word	0x20000fa4
    1854:	00000000 	.word	0x00000000
    1858:	f8df c058 	ldr.w	ip, [pc, #88]	; 18b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52c>
    185c:	b510      	push	{r4, lr}
    185e:	2300      	movs	r3, #0
    1860:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1864:	2807      	cmp	r0, #7
    1866:	d21f      	bcs.n	18a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x520>
    1868:	e8df f000 	tbb	[pc, r0]
    186c:	05050505 	.word	0x05050505
    1870:	00040404 	.word	0x00040404
    1874:	2301      	movs	r3, #1
    1876:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    187a:	2b00      	cmp	r3, #0
    187c:	bf08      	it	eq
    187e:	bd10      	popeq	{r4, pc}
    1880:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1884:	480c      	ldr	r0, [pc, #48]	; (18b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x530>)
    1886:	4402      	add	r2, r0
    1888:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    188c:	2820      	cmp	r0, #32
    188e:	bf0e      	itee	eq
    1890:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1894:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1898:	7041      	strbne	r1, [r0, #1]
    189a:	2020      	movs	r0, #32
    189c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    18a0:	7058      	strb	r0, [r3, #1]
    18a2:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    18a6:	bd10      	pop	{r4, pc}
    18a8:	f240 216e 	movw	r1, #622	; 0x26e
    18ac:	2070      	movs	r0, #112	; 0x70
    18ae:	f002 fb6f 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18b2:	0000      	.short	0x0000
    18b4:	20000fa4 	.word	0x20000fa4
    18b8:	20001024 	.word	0x20001024
    18bc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    18c0:	460f      	mov	r7, r1
    18c2:	4680      	mov	r8, r0
    18c4:	f8df a158 	ldr.w	sl, [pc, #344]	; 1a20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x698>
    18c8:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    18cc:	4450      	add	r0, sl
    18ce:	f1b8 0f01 	cmp.w	r8, #1
    18d2:	f890 4020 	ldrb.w	r4, [r0, #32]
    18d6:	4625      	mov	r5, r4
    18d8:	bf18      	it	ne
    18da:	f1b8 0f02 	cmpne.w	r8, #2
    18de:	d005      	beq.n	18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>
    18e0:	f640 21a1 	movw	r1, #2721	; 0xaa1
    18e4:	f04f 0070 	mov.w	r0, #112	; 0x70
    18e8:	f002 fb52 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ec:	f04f 0b00 	mov.w	fp, #0
    18f0:	2d20      	cmp	r5, #32
    18f2:	d042      	beq.n	197a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5f2>
    18f4:	f89a 001e 	ldrb.w	r0, [sl, #30]
    18f8:	2600      	movs	r6, #0
    18fa:	2800      	cmp	r0, #0
    18fc:	bf08      	it	eq
    18fe:	2602      	moveq	r6, #2
    1900:	f001 fc28 	bl	3154 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1904:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1a24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69c>
    1908:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    190c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1910:	688a      	ldr	r2, [r1, #8]
    1912:	68c9      	ldr	r1, [r1, #12]
    1914:	1a12      	subs	r2, r2, r0
    1916:	1a09      	subs	r1, r1, r0
    1918:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    191c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1920:	4296      	cmp	r6, r2
    1922:	bf99      	ittee	ls
    1924:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1928:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    192c:	4a3e      	ldrhi	r2, [pc, #248]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    192e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1932:	d920      	bls.n	1976 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ee>
    1934:	4622      	mov	r2, r4
    1936:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    193a:	784c      	ldrb	r4, [r1, #1]
    193c:	2c20      	cmp	r4, #32
    193e:	d012      	beq.n	1966 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5de>
    1940:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1944:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1948:	688b      	ldr	r3, [r1, #8]
    194a:	68c9      	ldr	r1, [r1, #12]
    194c:	1a1b      	subs	r3, r3, r0
    194e:	1a09      	subs	r1, r1, r0
    1950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1954:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1958:	429e      	cmp	r6, r3
    195a:	bf9c      	itt	ls
    195c:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    1960:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1964:	d8e6      	bhi.n	1934 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ac>
    1966:	2a20      	cmp	r2, #32
    1968:	d005      	beq.n	1976 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ee>
    196a:	463b      	mov	r3, r7
    196c:	2120      	movs	r1, #32
    196e:	2004      	movs	r0, #4
    1970:	f7ff f840 	bl	9f4 <MPSL_IRQ_RADIO_Handler+0x40>
    1974:	4604      	mov	r4, r0
    1976:	42ac      	cmp	r4, r5
    1978:	d116      	bne.n	19a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x620>
    197a:	482c      	ldr	r0, [pc, #176]	; (1a2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a4>)
    197c:	2800      	cmp	r0, #0
    197e:	bf18      	it	ne
    1980:	f3af 8000 	nopne.w
    1984:	f001 fbe6 	bl	3154 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1988:	4603      	mov	r3, r0
    198a:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    198e:	2820      	cmp	r0, #32
    1990:	d00d      	beq.n	19ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x626>
    1992:	f8da 0008 	ldr.w	r0, [sl, #8]
    1996:	1c99      	adds	r1, r3, #2
    1998:	1a08      	subs	r0, r1, r0
    199a:	0200      	lsls	r0, r0, #8
    199c:	17c1      	asrs	r1, r0, #31
    199e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    19a2:	1200      	asrs	r0, r0, #8
    19a4:	2800      	cmp	r0, #0
    19a6:	dd02      	ble.n	19ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x626>
    19a8:	2000      	movs	r0, #0
    19aa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19ae:	2d20      	cmp	r5, #32
    19b0:	d014      	beq.n	19dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x654>
    19b2:	462a      	mov	r2, r5
    19b4:	4641      	mov	r1, r8
    19b6:	4618      	mov	r0, r3
    19b8:	f7ff fab2 	bl	f20 <MPSL_IRQ_RADIO_Handler+0x56c>
    19bc:	2800      	cmp	r0, #0
    19be:	bf1e      	ittt	ne
    19c0:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    19c4:	2002      	movne	r0, #2
    19c6:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19ca:	463b      	mov	r3, r7
    19cc:	462a      	mov	r2, r5
    19ce:	2120      	movs	r1, #32
    19d0:	2004      	movs	r0, #4
    19d2:	f7ff f80f 	bl	9f4 <MPSL_IRQ_RADIO_Handler+0x40>
    19d6:	2000      	movs	r0, #0
    19d8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19dc:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    19e0:	b118      	cbz	r0, 19ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x662>
    19e2:	f002 f931 	bl	3c48 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    19e6:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    19ea:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    19ee:	b120      	cbz	r0, 19fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x672>
    19f0:	2005      	movs	r0, #5
    19f2:	f001 fe11 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19f6:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    19fa:	2004      	movs	r0, #4
    19fc:	f001 fe0c 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a00:	f001 fe7a 	bl	36f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1a04:	2020      	movs	r0, #32
    1a06:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1a0a:	4809      	ldr	r0, [pc, #36]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    1a0c:	6880      	ldr	r0, [r0, #8]
    1a0e:	f8c0 b000 	str.w	fp, [r0]
    1a12:	4808      	ldr	r0, [pc, #32]	; (1a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ac>)
    1a14:	f8c0 b000 	str.w	fp, [r0]
    1a18:	2001      	movs	r0, #1
    1a1a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1a1e:	0000      	.short	0x0000
    1a20:	20001024 	.word	0x20001024
    1a24:	20000c24 	.word	0x20000c24
    1a28:	20000fa4 	.word	0x20000fa4
    1a2c:	00000000 	.word	0x00000000
    1a30:	2000003c 	.word	0x2000003c
    1a34:	40000508 	.word	0x40000508

00001a38 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1a38:	4906      	ldr	r1, [pc, #24]	; (1a54 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1a3a:	b510      	push	{r4, lr}
    1a3c:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    1a40:	2a20      	cmp	r2, #32
    1a42:	bf1c      	itt	ne
    1a44:	7788      	strbne	r0, [r1, #30]
    1a46:	bd10      	popne	{r4, pc}
    1a48:	f240 319a 	movw	r1, #922	; 0x39a
    1a4c:	2070      	movs	r0, #112	; 0x70
    1a4e:	f002 fa9f 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a52:	0000      	.short	0x0000
    1a54:	20001024 	.word	0x20001024

00001a58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a5c:	4e69      	ldr	r6, [pc, #420]	; (1c04 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1a5e:	4607      	mov	r7, r0
    1a60:	b08d      	sub	sp, #52	; 0x34
    1a62:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a66:	4688      	mov	r8, r1
    1a68:	2820      	cmp	r0, #32
    1a6a:	d055      	beq.n	1b18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1a6c:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a70:	f106 0408 	add.w	r4, r6, #8
    1a74:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1a78:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1a7c:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1a80:	2020      	movs	r0, #32
    1a82:	f88d 0020 	strb.w	r0, [sp, #32]
    1a86:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1a8a:	aa0a      	add	r2, sp, #40	; 0x28
    1a8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1a90:	4430      	add	r0, r6
    1a92:	a909      	add	r1, sp, #36	; 0x24
    1a94:	f890 5020 	ldrb.w	r5, [r0, #32]
    1a98:	68f0      	ldr	r0, [r6, #12]
    1a9a:	9002      	str	r0, [sp, #8]
    1a9c:	6830      	ldr	r0, [r6, #0]
    1a9e:	4438      	add	r0, r7
    1aa0:	f001 f9ee 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1aa4:	f8da 000c 	ldr.w	r0, [sl, #12]
    1aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1aaa:	2f65      	cmp	r7, #101	; 0x65
    1aac:	4408      	add	r0, r1
    1aae:	d338      	bcc.n	1b22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1ab0:	4a55      	ldr	r2, [pc, #340]	; (1c08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1ab2:	2100      	movs	r1, #0
    1ab4:	1bd2      	subs	r2, r2, r7
    1ab6:	eb71 0201 	sbcs.w	r2, r1, r1
    1aba:	d332      	bcc.n	1b22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1abc:	6822      	ldr	r2, [r4, #0]
    1abe:	1a82      	subs	r2, r0, r2
    1ac0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1ac4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1ac8:	d82b      	bhi.n	1b22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1aca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ace:	6060      	str	r0, [r4, #4]
    1ad0:	4630      	mov	r0, r6
    1ad2:	f884 8010 	strb.w	r8, [r4, #16]
    1ad6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1ada:	f10d 0a20 	add.w	sl, sp, #32
    1ade:	2d20      	cmp	r5, #32
    1ae0:	bf1c      	itt	ne
    1ae2:	494a      	ldrne	r1, [pc, #296]	; (1c0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1ae4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1ae8:	d050      	beq.n	1b8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1aea:	bf00      	nop
    1aec:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1af0:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1af4:	6861      	ldr	r1, [r4, #4]
    1af6:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1afa:	f108 0008 	add.w	r0, r8, #8
    1afe:	1a71      	subs	r1, r6, r1
    1b00:	0209      	lsls	r1, r1, #8
    1b02:	17ca      	asrs	r2, r1, #31
    1b04:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1b08:	1209      	asrs	r1, r1, #8
    1b0a:	d42d      	bmi.n	1b68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    1b0c:	89c0      	ldrh	r0, [r0, #14]
    1b0e:	2800      	cmp	r0, #0
    1b10:	d03c      	beq.n	1b8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b12:	89e0      	ldrh	r0, [r4, #14]
    1b14:	b148      	cbz	r0, 1b2a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1b16:	e039      	b.n	1b8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b18:	f640 3168 	movw	r1, #2920	; 0xb68
    1b1c:	2070      	movs	r0, #112	; 0x70
    1b1e:	f002 fa37 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b22:	b00d      	add	sp, #52	; 0x34
    1b24:	2001      	movs	r0, #1
    1b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b2a:	6820      	ldr	r0, [r4, #0]
    1b2c:	900c      	str	r0, [sp, #48]	; 0x30
    1b2e:	f002 f885 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1b32:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b36:	bf08      	it	eq
    1b38:	200d      	moveq	r0, #13
    1b3a:	d00b      	beq.n	1b54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1b3c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1b40:	3856      	subs	r0, #86	; 0x56
    1b42:	bf08      	it	eq
    1b44:	201c      	moveq	r0, #28
    1b46:	d005      	beq.n	1b54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1b48:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1b4c:	389f      	subs	r0, #159	; 0x9f
    1b4e:	bf14      	ite	ne
    1b50:	2000      	movne	r0, #0
    1b52:	2032      	moveq	r0, #50	; 0x32
    1b54:	1c41      	adds	r1, r0, #1
    1b56:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b58:	1a30      	subs	r0, r6, r0
    1b5a:	0200      	lsls	r0, r0, #8
    1b5c:	17c2      	asrs	r2, r0, #31
    1b5e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b62:	1200      	asrs	r0, r0, #8
    1b64:	4288      	cmp	r0, r1
    1b66:	da11      	bge.n	1b8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b68:	f88a 5000 	strb.w	r5, [sl]
    1b6c:	f898 1018 	ldrb.w	r1, [r8, #24]
    1b70:	7c20      	ldrb	r0, [r4, #16]
    1b72:	4281      	cmp	r1, r0
    1b74:	d805      	bhi.n	1b82 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1b76:	9802      	ldr	r0, [sp, #8]
    1b78:	6060      	str	r0, [r4, #4]
    1b7a:	b00d      	add	sp, #52	; 0x34
    1b7c:	2002      	movs	r0, #2
    1b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b82:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1b86:	7845      	ldrb	r5, [r0, #1]
    1b88:	2d20      	cmp	r5, #32
    1b8a:	d1af      	bne.n	1aec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    1b8c:	2005      	movs	r0, #5
    1b8e:	f001 fd43 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1b92:	4c1c      	ldr	r4, [pc, #112]	; (1c04 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b98:	6060      	str	r0, [r4, #4]
    1b9a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1b9e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1ba2:	2120      	movs	r1, #32
    1ba4:	2a20      	cmp	r2, #32
    1ba6:	d003      	beq.n	1bb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    1ba8:	2005      	movs	r0, #5
    1baa:	f7fe ff23 	bl	9f4 <MPSL_IRQ_RADIO_Handler+0x40>
    1bae:	e004      	b.n	1bba <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    1bb0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    1bb4:	4420      	add	r0, r4
    1bb6:	f890 0020 	ldrb.w	r0, [r0, #32]
    1bba:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    1bbe:	4913      	ldr	r1, [pc, #76]	; (1c0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1bc0:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1bc4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    1bc8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1bcc:	7048      	strb	r0, [r1, #1]
    1bce:	6820      	ldr	r0, [r4, #0]
    1bd0:	4438      	add	r0, r7
    1bd2:	6020      	str	r0, [r4, #0]
    1bd4:	20ff      	movs	r0, #255	; 0xff
    1bd6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1bda:	7e60      	ldrb	r0, [r4, #25]
    1bdc:	2801      	cmp	r0, #1
    1bde:	d105      	bne.n	1bec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    1be0:	68e0      	ldr	r0, [r4, #12]
    1be2:	1e40      	subs	r0, r0, #1
    1be4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1be8:	f001 fb7a 	bl	32e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1bec:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1bf0:	2820      	cmp	r0, #32
    1bf2:	d003      	beq.n	1bfc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    1bf4:	4806      	ldr	r0, [pc, #24]	; (1c10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    1bf6:	7840      	ldrb	r0, [r0, #1]
    1bf8:	f002 fa9e 	bl	4138 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1bfc:	b00d      	add	sp, #52	; 0x34
    1bfe:	2000      	movs	r0, #0
    1c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c04:	20001024 	.word	0x20001024
    1c08:	0f424000 	.word	0x0f424000
    1c0c:	20000fa4 	.word	0x20000fa4
    1c10:	2000003c 	.word	0x2000003c

00001c14 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1c14:	4806      	ldr	r0, [pc, #24]	; (1c30 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1c16:	b510      	push	{r4, lr}
    1c18:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1c1c:	2920      	cmp	r1, #32
    1c1e:	bf1c      	itt	ne
    1c20:	7e00      	ldrbne	r0, [r0, #24]
    1c22:	bd10      	popne	{r4, pc}
    1c24:	f640 3162 	movw	r1, #2914	; 0xb62
    1c28:	2070      	movs	r0, #112	; 0x70
    1c2a:	f002 f9b1 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c2e:	0000      	.short	0x0000
    1c30:	20001024 	.word	0x20001024

00001c34 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1c34:	b570      	push	{r4, r5, r6, lr}
    1c36:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    1c3a:	4809      	ldr	r0, [pc, #36]	; (1c60 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    1c3c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    1c40:	4908      	ldr	r1, [pc, #32]	; (1c64 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    1c42:	6920      	ldr	r0, [r4, #16]
    1c44:	fba0 5601 	umull	r5, r6, r0, r1
    1c48:	68a0      	ldr	r0, [r4, #8]
    1c4a:	f00a fabc 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c4e:	8ae1      	ldrh	r1, [r4, #22]
    1c50:	7d22      	ldrb	r2, [r4, #20]
    1c52:	1c40      	adds	r0, r0, #1
    1c54:	4411      	add	r1, r2
    1c56:	4408      	add	r0, r1
    1c58:	1940      	adds	r0, r0, r5
    1c5a:	f146 0100 	adc.w	r1, r6, #0
    1c5e:	bd70      	pop	{r4, r5, r6, pc}
    1c60:	20000c24 	.word	0x20000c24
    1c64:	1e848000 	.word	0x1e848000

00001c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c6a:	4d6b      	ldr	r5, [pc, #428]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1c6c:	4a6b      	ldr	r2, [pc, #428]	; (1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>)
    1c6e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    1c72:	2601      	movs	r6, #1
    1c74:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1c78:	2808      	cmp	r0, #8
    1c7a:	d27c      	bcs.n	1d76 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a>
    1c7c:	e8df f000 	tbb	[pc, r0]
    1c80:	a9977004 	.word	0xa9977004
    1c84:	b3ae41c7 	.word	0xb3ae41c7
    1c88:	b919      	cbnz	r1, 1c92 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1c8a:	f001 fff9 	bl	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1c8e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1c92:	8ae0      	ldrh	r0, [r4, #22]
    1c94:	b110      	cbz	r0, 1c9c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1c96:	f002 f903 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c9a:	b180      	cbz	r0, 1cbe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1c9c:	f7ff fd2a 	bl	16f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36c>
    1ca0:	20ff      	movs	r0, #255	; 0xff
    1ca2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1ca6:	6861      	ldr	r1, [r4, #4]
    1ca8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1cac:	d003      	beq.n	1cb6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1cae:	2005      	movs	r0, #5
    1cb0:	f001 fbfc 	bl	34ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cb4:	b140      	cbz	r0, 1cc8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1cb6:	7e60      	ldrb	r0, [r4, #25]
    1cb8:	2801      	cmp	r0, #1
    1cba:	d110      	bne.n	1cde <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1cbc:	e009      	b.n	1cd2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1cbe:	f640 0169 	movw	r1, #2153	; 0x869
    1cc2:	2070      	movs	r0, #112	; 0x70
    1cc4:	f002 f964 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cc8:	f640 016e 	movw	r1, #2158	; 0x86e
    1ccc:	2070      	movs	r0, #112	; 0x70
    1cce:	f002 f95f 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cd2:	68e0      	ldr	r0, [r4, #12]
    1cd4:	1e40      	subs	r0, r0, #1
    1cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cda:	f001 fb01 	bl	32e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1cde:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1ce2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1ce6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1cea:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1cee:	6840      	ldr	r0, [r0, #4]
    1cf0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1cf4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1cf8:	b001      	add	sp, #4
    1cfa:	2101      	movs	r1, #1
    1cfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d00:	4710      	bx	r2
    1d02:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1d06:	b140      	cbz	r0, 1d1a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1d08:	b919      	cbnz	r1, 1d12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    1d0a:	f001 ffb9 	bl	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d0e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1d12:	2000      	movs	r0, #0
    1d14:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d1a:	f7ff fceb 	bl	16f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36c>
    1d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d22:	6060      	str	r0, [r4, #4]
    1d24:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1d28:	f88d 0000 	strb.w	r0, [sp]
    1d2c:	f89d 0000 	ldrb.w	r0, [sp]
    1d30:	b188      	cbz	r0, 1d56 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa>
    1d32:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d36:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d3e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d42:	6840      	ldr	r0, [r0, #4]
    1d44:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d48:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1d4c:	b001      	add	sp, #4
    1d4e:	2106      	movs	r1, #6
    1d50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d54:	4710      	bx	r2
    1d56:	f640 0185 	movw	r1, #2181	; 0x885
    1d5a:	2070      	movs	r0, #112	; 0x70
    1d5c:	f002 f918 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d60:	f7ff fcc8 	bl	16f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36c>
    1d64:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1d68:	f002 f89a 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d6c:	b120      	cbz	r0, 1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d6e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    1d72:	b130      	cbz	r0, 1d82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d74:	e009      	b.n	1d8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e>
    1d76:	e04a      	b.n	1e0e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc2>
    1d78:	f640 0193 	movw	r1, #2195	; 0x893
    1d7c:	2070      	movs	r0, #112	; 0x70
    1d7e:	f002 f907 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d82:	f001 ff7d 	bl	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d86:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1d8a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d8e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d96:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d9a:	6840      	ldr	r0, [r0, #4]
    1d9c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1da0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1da4:	b001      	add	sp, #4
    1da6:	2100      	movs	r1, #0
    1da8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1dac:	4710      	bx	r2
    1dae:	f001 fd59 	bl	3864 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    1db2:	8ae0      	ldrh	r0, [r4, #22]
    1db4:	b110      	cbz	r0, 1dbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>
    1db6:	f002 f873 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1dba:	b128      	cbz	r0, 1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1dbc:	f001 fd66 	bl	388c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1dc0:	2800      	cmp	r0, #0
    1dc2:	bf18      	it	ne
    1dc4:	7766      	strbne	r6, [r4, #29]
    1dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dc8:	f640 019d 	movw	r1, #2205	; 0x89d
    1dcc:	2070      	movs	r0, #112	; 0x70
    1dce:	f002 f8df 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dd2:	4813      	ldr	r0, [pc, #76]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1dd4:	6006      	str	r6, [r0, #0]
    1dd6:	6890      	ldr	r0, [r2, #8]
    1dd8:	6006      	str	r6, [r0, #0]
    1dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ddc:	7810      	ldrb	r0, [r2, #0]
    1dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1de2:	f002 b9a9 	b.w	4138 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1de6:	f7ff fc85 	bl	16f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36c>
    1dea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1dee:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1df2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1df6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1dfa:	6840      	ldr	r0, [r0, #4]
    1dfc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1e00:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1e04:	b001      	add	sp, #4
    1e06:	2105      	movs	r1, #5
    1e08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1e0c:	4710      	bx	r2
    1e0e:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    1e12:	2070      	movs	r0, #112	; 0x70
    1e14:	f002 f8bc 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e18:	20000c24 	.word	0x20000c24
    1e1c:	2000003c 	.word	0x2000003c
    1e20:	40000508 	.word	0x40000508

00001e24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1e24:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e28:	4682      	mov	sl, r0
    1e2a:	48ef      	ldr	r0, [pc, #956]	; (21e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e8>)
    1e2c:	b095      	sub	sp, #84	; 0x54
    1e2e:	6800      	ldr	r0, [r0, #0]
    1e30:	4dee      	ldr	r5, [pc, #952]	; (21ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ec>)
    1e32:	05c0      	lsls	r0, r0, #23
    1e34:	0dc0      	lsrs	r0, r0, #23
    1e36:	d00e      	beq.n	1e56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1e38:	3810      	subs	r0, #16
    1e3a:	b240      	sxtb	r0, r0
    1e3c:	2800      	cmp	r0, #0
    1e3e:	bfb8      	it	lt
    1e40:	f000 000f 	andlt.w	r0, r0, #15
    1e44:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1e48:	bfac      	ite	ge
    1e4a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1e4e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1e52:	0940      	lsrs	r0, r0, #5
    1e54:	d00d      	beq.n	1e72 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1e56:	9816      	ldr	r0, [sp, #88]	; 0x58
    1e58:	f04f 0b00 	mov.w	fp, #0
    1e5c:	7800      	ldrb	r0, [r0, #0]
    1e5e:	2800      	cmp	r0, #0
    1e60:	bf18      	it	ne
    1e62:	2801      	cmpne	r0, #1
    1e64:	d018      	beq.n	1e98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1e66:	f240 713b 	movw	r1, #1851	; 0x73b
    1e6a:	f04f 0070 	mov.w	r0, #112	; 0x70
    1e6e:	f002 f88f 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e72:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1e76:	f04f 0b01 	mov.w	fp, #1
    1e7a:	2820      	cmp	r0, #32
    1e7c:	d007      	beq.n	1e8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1e7e:	9816      	ldr	r0, [sp, #88]	; 0x58
    1e80:	7800      	ldrb	r0, [r0, #0]
    1e82:	b148      	cbz	r0, 1e98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1e84:	f240 7137 	movw	r1, #1847	; 0x737
    1e88:	2070      	movs	r0, #112	; 0x70
    1e8a:	f002 f881 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e8e:	f240 7134 	movw	r1, #1844	; 0x734
    1e92:	2070      	movs	r0, #112	; 0x70
    1e94:	f002 f87c 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e98:	4cd5      	ldr	r4, [pc, #852]	; (21f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f0>)
    1e9a:	b124      	cbz	r4, 1ea6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1e9c:	2100      	movs	r1, #0
    1e9e:	f240 703e 	movw	r0, #1854	; 0x73e
    1ea2:	f3af 8000 	nop.w
    1ea6:	2000      	movs	r0, #0
    1ea8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1eac:	49d1      	ldr	r1, [pc, #836]	; (21f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f4>)
    1eae:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    1eb2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1eb6:	f04f 0901 	mov.w	r9, #1
    1eba:	9000      	str	r0, [sp, #0]
    1ebc:	b124      	cbz	r4, 1ec8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1ebe:	2100      	movs	r1, #0
    1ec0:	f240 7049 	movw	r0, #1865	; 0x749
    1ec4:	f3af 8000 	nop.w
    1ec8:	f1b9 0f00 	cmp.w	r9, #0
    1ecc:	d00a      	beq.n	1ee4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    1ece:	bf00      	nop
    1ed0:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1ed4:	f04f 0800 	mov.w	r8, #0
    1ed8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1edc:	f1bb 0f00 	cmp.w	fp, #0
    1ee0:	d007      	beq.n	1ef2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    1ee2:	e038      	b.n	1f56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    1ee4:	48c4      	ldr	r0, [pc, #784]	; (21f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f8>)
    1ee6:	2800      	cmp	r0, #0
    1ee8:	bf18      	it	ne
    1eea:	f3af 8000 	nopne.w
    1eee:	b662      	cpsie	i
    1ef0:	e7ee      	b.n	1ed0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    1ef2:	4637      	mov	r7, r6
    1ef4:	2001      	movs	r0, #1
    1ef6:	ea20 0607 	bic.w	r6, r0, r7
    1efa:	48c0      	ldr	r0, [pc, #768]	; (21fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1fc>)
    1efc:	2240      	movs	r2, #64	; 0x40
    1efe:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1f02:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1f06:	f00a fab8 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f0a:	b124      	cbz	r4, 1f16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    1f0c:	2100      	movs	r1, #0
    1f0e:	f240 505e 	movw	r0, #1374	; 0x55e
    1f12:	f3af 8000 	nop.w
    1f16:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1f1a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1f1e:	4429      	add	r1, r5
    1f20:	4428      	add	r0, r5
    1f22:	8c0a      	ldrh	r2, [r1, #32]
    1f24:	8402      	strh	r2, [r0, #32]
    1f26:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1f2a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1f2e:	b124      	cbz	r4, 1f3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    1f30:	2100      	movs	r1, #0
    1f32:	f240 5062 	movw	r0, #1378	; 0x562
    1f36:	f3af 8000 	nop.w
    1f3a:	b124      	cbz	r4, 1f46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1f3c:	2100      	movs	r1, #0
    1f3e:	f240 7053 	movw	r0, #1875	; 0x753
    1f42:	f3af 8000 	nop.w
    1f46:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1f4a:	f88d 0008 	strb.w	r0, [sp, #8]
    1f4e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f52:	2800      	cmp	r0, #0
    1f54:	d1b2      	bne.n	1ebc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1f56:	b124      	cbz	r4, 1f62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    1f58:	2100      	movs	r1, #0
    1f5a:	f240 705d 	movw	r0, #1885	; 0x75d
    1f5e:	f3af 8000 	nop.w
    1f62:	a802      	add	r0, sp, #8
    1f64:	f001 f8fc 	bl	3160 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1f6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1f70:	4633      	mov	r3, r6
    1f72:	aa09      	add	r2, sp, #36	; 0x24
    1f74:	a80e      	add	r0, sp, #56	; 0x38
    1f76:	9916      	ldr	r1, [sp, #88]	; 0x58
    1f78:	f7ff fa5a 	bl	1430 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8>
    1f7c:	b124      	cbz	r4, 1f88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    1f7e:	2100      	movs	r1, #0
    1f80:	f240 7064 	movw	r0, #1892	; 0x764
    1f84:	f3af 8000 	nop.w
    1f88:	4a9c      	ldr	r2, [pc, #624]	; (21fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1fc>)
    1f8a:	990e      	ldr	r1, [sp, #56]	; 0x38
    1f8c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1f90:	a809      	add	r0, sp, #36	; 0x24
    1f92:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1f96:	2a01      	cmp	r2, #1
    1f98:	bf18      	it	ne
    1f9a:	2a02      	cmpne	r2, #2
    1f9c:	d138      	bne.n	2010 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x10>
    1f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fa2:	eba2 0201 	sub.w	r2, r2, r1
    1fa6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1faa:	eba3 0101 	sub.w	r1, r3, r1
    1fae:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1fb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1fb6:	2a02      	cmp	r2, #2
    1fb8:	d364      	bcc.n	2084 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x84>
    1fba:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1fbe:	bf98      	it	ls
    1fc0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1fc4:	d85e      	bhi.n	2084 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x84>
    1fc6:	f04f 0801 	mov.w	r8, #1
    1fca:	ab14      	add	r3, sp, #80	; 0x50
    1fcc:	aa13      	add	r2, sp, #76	; 0x4c
    1fce:	4631      	mov	r1, r6
    1fd0:	f7fe ff04 	bl	ddc <MPSL_IRQ_RADIO_Handler+0x428>
    1fd4:	2800      	cmp	r0, #0
    1fd6:	d05d      	beq.n	2094 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x94>
    1fd8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1fdc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    1fe0:	4633      	mov	r3, r6
    1fe2:	428a      	cmp	r2, r1
    1fe4:	d05a      	beq.n	209c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9c>
    1fe6:	2005      	movs	r0, #5
    1fe8:	f7fe fd04 	bl	9f4 <MPSL_IRQ_RADIO_Handler+0x40>
    1fec:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1ff0:	7048      	strb	r0, [r1, #1]
    1ff2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1ff6:	2820      	cmp	r0, #32
    1ff8:	bf1c      	itt	ne
    1ffa:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1ffe:	f880 a001 	strbne.w	sl, [r0, #1]
    2002:	d057      	beq.n	20b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb4>
    2004:	4632      	mov	r2, r6
    2006:	4651      	mov	r1, sl
    2008:	f05f 0003 	movs.w	r0, #3
    200c:	f7ff fc24 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    2010:	b124      	cbz	r4, 201c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c>
    2012:	2100      	movs	r1, #0
    2014:	f240 7069 	movw	r0, #1897	; 0x769
    2018:	f3af 8000 	nop.w
    201c:	4878      	ldr	r0, [pc, #480]	; (2200 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x200>)
    201e:	2800      	cmp	r0, #0
    2020:	bf18      	it	ne
    2022:	f3af 8000 	nopne.w
    2026:	f3ef 8910 	mrs	r9, PRIMASK
    202a:	b672      	cpsid	i
    202c:	b124      	cbz	r4, 2038 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x38>
    202e:	2100      	movs	r1, #0
    2030:	f240 706f 	movw	r0, #1903	; 0x76f
    2034:	f3af 8000 	nop.w
    2038:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    203c:	f88d 0008 	strb.w	r0, [sp, #8]
    2040:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2044:	2800      	cmp	r0, #0
    2046:	f47f af39 	bne.w	1ebc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    204a:	b124      	cbz	r4, 2056 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x56>
    204c:	2100      	movs	r1, #0
    204e:	f240 7077 	movw	r0, #1911	; 0x777
    2052:	f3af 8000 	nop.w
    2056:	af09      	add	r7, sp, #36	; 0x24
    2058:	9800      	ldr	r0, [sp, #0]
    205a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    205e:	f100 0708 	add.w	r7, r0, #8
    2062:	f1b8 0f00 	cmp.w	r8, #0
    2066:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    206a:	990d      	ldr	r1, [sp, #52]	; 0x34
    206c:	6181      	str	r1, [r0, #24]
    206e:	d051      	beq.n	2114 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x114>
    2070:	b124      	cbz	r4, 207c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7c>
    2072:	2100      	movs	r1, #0
    2074:	f240 7084 	movw	r0, #1924	; 0x784
    2078:	f3af 8000 	nop.w
    207c:	f1bb 0f00 	cmp.w	fp, #0
    2080:	d139      	bne.n	20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    2082:	e01f      	b.n	20c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc4>
    2084:	4632      	mov	r2, r6
    2086:	4651      	mov	r1, sl
    2088:	2004      	movs	r0, #4
    208a:	f7ff fbe5 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    208e:	f04f 0801 	mov.w	r8, #1
    2092:	e7bd      	b.n	2010 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x10>
    2094:	4632      	mov	r2, r6
    2096:	4651      	mov	r1, sl
    2098:	2004      	movs	r0, #4
    209a:	e7b7      	b.n	200c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc>
    209c:	2920      	cmp	r1, #32
    209e:	bf19      	ittee	ne
    20a0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    20a4:	7840      	ldrbne	r0, [r0, #1]
    20a6:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    20aa:	4428      	addeq	r0, r5
    20ac:	bf08      	it	eq
    20ae:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    20b2:	e79b      	b.n	1fec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    20b4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    20b8:	4429      	add	r1, r5
    20ba:	f881 a020 	strb.w	sl, [r1, #32]
    20be:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    20c2:	e79f      	b.n	2004 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4>
    20c4:	9811      	ldr	r0, [sp, #68]	; 0x44
    20c6:	f010 0fff 	tst.w	r0, #255	; 0xff
    20ca:	d014      	beq.n	20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    20cc:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    20d0:	2820      	cmp	r0, #32
    20d2:	d110      	bne.n	20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    20d4:	b124      	cbz	r4, 20e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe0>
    20d6:	2100      	movs	r1, #0
    20d8:	f240 7089 	movw	r0, #1929	; 0x789
    20dc:	f3af 8000 	nop.w
    20e0:	4631      	mov	r1, r6
    20e2:	2002      	movs	r0, #2
    20e4:	f7ff fbea 	bl	18bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x534>
    20e8:	9010      	str	r0, [sp, #64]	; 0x40
    20ea:	b920      	cbnz	r0, 20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    20ec:	9816      	ldr	r0, [sp, #88]	; 0x58
    20ee:	7800      	ldrb	r0, [r0, #0]
    20f0:	b1e8      	cbz	r0, 212e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x12e>
    20f2:	2801      	cmp	r0, #1
    20f4:	d02a      	beq.n	214c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14c>
    20f6:	b124      	cbz	r4, 2102 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x102>
    20f8:	2100      	movs	r1, #0
    20fa:	f240 70a6 	movw	r0, #1958	; 0x7a6
    20fe:	f3af 8000 	nop.w
    2102:	20ff      	movs	r0, #255	; 0xff
    2104:	f1bb 0f00 	cmp.w	fp, #0
    2108:	bf18      	it	ne
    210a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    210e:	d026      	beq.n	215e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15e>
    2110:	f04f 0801 	mov.w	r8, #1
    2114:	b124      	cbz	r4, 2120 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x120>
    2116:	2100      	movs	r1, #0
    2118:	f240 70b7 	movw	r0, #1975	; 0x7b7
    211c:	f3af 8000 	nop.w
    2120:	9810      	ldr	r0, [sp, #64]	; 0x40
    2122:	4e38      	ldr	r6, [pc, #224]	; (2204 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x204>)
    2124:	2802      	cmp	r0, #2
    2126:	d023      	beq.n	2170 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x170>
    2128:	2801      	cmp	r0, #1
    212a:	d029      	beq.n	2180 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x180>
    212c:	e02d      	b.n	218a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x18a>
    212e:	b124      	cbz	r4, 213a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13a>
    2130:	2100      	movs	r1, #0
    2132:	f240 7091 	movw	r0, #1937	; 0x791
    2136:	f3af 8000 	nop.w
    213a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    213e:	4651      	mov	r1, sl
    2140:	2004      	movs	r0, #4
    2142:	f7ff fb89 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    2146:	f04f 0801 	mov.w	r8, #1
    214a:	e7e3      	b.n	2114 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x114>
    214c:	2c00      	cmp	r4, #0
    214e:	f43f aeb5 	beq.w	1ebc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2152:	2100      	movs	r1, #0
    2154:	f240 709c 	movw	r0, #1948	; 0x79c
    2158:	f3af 8000 	nop.w
    215c:	e6ae      	b.n	1ebc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    215e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2162:	2101      	movs	r1, #1
    2164:	4391      	bics	r1, r2
    2166:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    216a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    216e:	e7cf      	b.n	2110 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x110>
    2170:	68a8      	ldr	r0, [r5, #8]
    2172:	990e      	ldr	r1, [sp, #56]	; 0x38
    2174:	1a40      	subs	r0, r0, r1
    2176:	f00a f826 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    217a:	6871      	ldr	r1, [r6, #4]
    217c:	b921      	cbnz	r1, 2188 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x188>
    217e:	e004      	b.n	218a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x18a>
    2180:	6871      	ldr	r1, [r6, #4]
    2182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2186:	b101      	cbz	r1, 218a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x18a>
    2188:	4788      	blx	r1
    218a:	f1b9 0f00 	cmp.w	r9, #0
    218e:	d024      	beq.n	21da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1da>
    2190:	b124      	cbz	r4, 219c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x19c>
    2192:	2100      	movs	r1, #0
    2194:	f240 70c7 	movw	r0, #1991	; 0x7c7
    2198:	f3af 8000 	nop.w
    219c:	f1b8 0f00 	cmp.w	r8, #0
    21a0:	d011      	beq.n	21c6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c6>
    21a2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    21a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21aa:	4428      	add	r0, r5
    21ac:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    21b0:	2820      	cmp	r0, #32
    21b2:	d008      	beq.n	21c6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c6>
    21b4:	b124      	cbz	r4, 21c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c0>
    21b6:	2100      	movs	r1, #0
    21b8:	f240 70ce 	movw	r0, #1998	; 0x7ce
    21bc:	f3af 8000 	nop.w
    21c0:	7870      	ldrb	r0, [r6, #1]
    21c2:	f001 ffb9 	bl	4138 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    21c6:	b124      	cbz	r4, 21d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d2>
    21c8:	2100      	movs	r1, #0
    21ca:	f240 70d3 	movw	r0, #2003	; 0x7d3
    21ce:	f3af 8000 	nop.w
    21d2:	b017      	add	sp, #92	; 0x5c
    21d4:	4640      	mov	r0, r8
    21d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21da:	4807      	ldr	r0, [pc, #28]	; (21f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f8>)
    21dc:	2800      	cmp	r0, #0
    21de:	bf18      	it	ne
    21e0:	f3af 8000 	nopne.w
    21e4:	b662      	cpsie	i
    21e6:	e7d3      	b.n	2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    21e8:	e000ed04 	.word	0xe000ed04
    21ec:	20001024 	.word	0x20001024
    21f0:	00000000 	.word	0x00000000
    21f4:	20000c24 	.word	0x20000c24
    21f8:	00000000 	.word	0x00000000
    21fc:	20000fa4 	.word	0x20000fa4
    2200:	00000000 	.word	0x00000000
    2204:	2000003c 	.word	0x2000003c

00002208 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    220c:	4606      	mov	r6, r0
    220e:	7800      	ldrb	r0, [r0, #0]
    2210:	b08d      	sub	sp, #52	; 0x34
    2212:	b118      	cbz	r0, 221c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    2214:	b00d      	add	sp, #52	; 0x34
    2216:	2000      	movs	r0, #0
    2218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    221c:	488c      	ldr	r0, [pc, #560]	; (2450 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    221e:	6800      	ldr	r0, [r0, #0]
    2220:	05c0      	lsls	r0, r0, #23
    2222:	0dc0      	lsrs	r0, r0, #23
    2224:	d00e      	beq.n	2244 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    2226:	3810      	subs	r0, #16
    2228:	b240      	sxtb	r0, r0
    222a:	2800      	cmp	r0, #0
    222c:	bfb8      	it	lt
    222e:	f000 000f 	andlt.w	r0, r0, #15
    2232:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2236:	bfac      	ite	ge
    2238:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    223c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2240:	0940      	lsrs	r0, r0, #5
    2242:	d0e7      	beq.n	2214 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    2244:	4d83      	ldr	r5, [pc, #524]	; (2454 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    2246:	4c84      	ldr	r4, [pc, #528]	; (2458 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    2248:	f04f 0b01 	mov.w	fp, #1
    224c:	2700      	movs	r7, #0
    224e:	b125      	cbz	r5, 225a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2250:	2100      	movs	r1, #0
    2252:	f240 50e5 	movw	r0, #1509	; 0x5e5
    2256:	f3af 8000 	nop.w
    225a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    225e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    2262:	f04f 0900 	mov.w	r9, #0
    2266:	b125      	cbz	r5, 2272 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    2268:	2100      	movs	r1, #0
    226a:	f240 50ea 	movw	r0, #1514	; 0x5ea
    226e:	f3af 8000 	nop.w
    2272:	487a      	ldr	r0, [pc, #488]	; (245c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    2274:	ea2b 080a 	bic.w	r8, fp, sl
    2278:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    227c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2280:	2240      	movs	r2, #64	; 0x40
    2282:	f00a f8fa 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2286:	b125      	cbz	r5, 2292 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    2288:	2100      	movs	r1, #0
    228a:	f240 505e 	movw	r0, #1374	; 0x55e
    228e:	f3af 8000 	nop.w
    2292:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2296:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    229a:	4421      	add	r1, r4
    229c:	4420      	add	r0, r4
    229e:	8c0a      	ldrh	r2, [r1, #32]
    22a0:	8402      	strh	r2, [r0, #32]
    22a2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    22a6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    22aa:	b125      	cbz	r5, 22b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    22ac:	2100      	movs	r1, #0
    22ae:	f240 5062 	movw	r0, #1378	; 0x562
    22b2:	f3af 8000 	nop.w
    22b6:	b125      	cbz	r5, 22c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    22b8:	2100      	movs	r1, #0
    22ba:	f240 50ef 	movw	r0, #1519	; 0x5ef
    22be:	f3af 8000 	nop.w
    22c2:	a808      	add	r0, sp, #32
    22c4:	f000 ff4c 	bl	3160 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    22c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    22cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    22d0:	4643      	mov	r3, r8
    22d2:	466a      	mov	r2, sp
    22d4:	4631      	mov	r1, r6
    22d6:	a80a      	add	r0, sp, #40	; 0x28
    22d8:	f7ff f8aa 	bl	1430 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8>
    22dc:	b125      	cbz	r5, 22e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    22de:	2100      	movs	r1, #0
    22e0:	f240 50f5 	movw	r0, #1525	; 0x5f5
    22e4:	f3af 8000 	nop.w
    22e8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    22ec:	2820      	cmp	r0, #32
    22ee:	d01a      	beq.n	2326 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    22f0:	68e0      	ldr	r0, [r4, #12]
    22f2:	9900      	ldr	r1, [sp, #0]
    22f4:	1a09      	subs	r1, r1, r0
    22f6:	0209      	lsls	r1, r1, #8
    22f8:	17ca      	asrs	r2, r1, #31
    22fa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    22fe:	1209      	asrs	r1, r1, #8
    2300:	d511      	bpl.n	2326 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2302:	9900      	ldr	r1, [sp, #0]
    2304:	4281      	cmp	r1, r0
    2306:	d902      	bls.n	230e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    2308:	9902      	ldr	r1, [sp, #8]
    230a:	1c49      	adds	r1, r1, #1
    230c:	9102      	str	r1, [sp, #8]
    230e:	e9dd 2100 	ldrd	r2, r1, [sp]
    2312:	1a89      	subs	r1, r1, r2
    2314:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2318:	4408      	add	r0, r1
    231a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    231e:	e9cd 2000 	strd	r2, r0, [sp]
    2322:	f04f 0901 	mov.w	r9, #1
    2326:	b125      	cbz	r5, 2332 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    2328:	2100      	movs	r1, #0
    232a:	f240 50ff 	movw	r0, #1535	; 0x5ff
    232e:	f3af 8000 	nop.w
    2332:	9900      	ldr	r1, [sp, #0]
    2334:	980a      	ldr	r0, [sp, #40]	; 0x28
    2336:	9a01      	ldr	r2, [sp, #4]
    2338:	1a09      	subs	r1, r1, r0
    233a:	1a10      	subs	r0, r2, r0
    233c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2340:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2344:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2348:	bf98      	it	ls
    234a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    234e:	d809      	bhi.n	2364 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    2350:	4643      	mov	r3, r8
    2352:	4669      	mov	r1, sp
    2354:	4842      	ldr	r0, [pc, #264]	; (2460 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    2356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2358:	f7fe fb88 	bl	a6c <MPSL_IRQ_RADIO_Handler+0xb8>
    235c:	ea59 0000 	orrs.w	r0, r9, r0
    2360:	d129      	bne.n	23b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    2362:	e042      	b.n	23ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    2364:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2366:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    236a:	9002      	str	r0, [sp, #8]
    236c:	aa09      	add	r2, sp, #36	; 0x24
    236e:	a907      	add	r1, sp, #28
    2370:	4650      	mov	r0, sl
    2372:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    2376:	f000 fd83 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    237a:	f001 fa91 	bl	38a0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    237e:	f000 fd63 	bl	2e48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2382:	4681      	mov	r9, r0
    2384:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2388:	2820      	cmp	r0, #32
    238a:	d03b      	beq.n	2404 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    238c:	68e0      	ldr	r0, [r4, #12]
    238e:	1d40      	adds	r0, r0, #5
    2390:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2394:	9900      	ldr	r1, [sp, #0]
    2396:	4281      	cmp	r1, r0
    2398:	d902      	bls.n	23a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    239a:	9902      	ldr	r1, [sp, #8]
    239c:	1c49      	adds	r1, r1, #1
    239e:	9102      	str	r1, [sp, #8]
    23a0:	e9dd 2100 	ldrd	r2, r1, [sp]
    23a4:	1a89      	subs	r1, r1, r2
    23a6:	9000      	str	r0, [sp, #0]
    23a8:	4408      	add	r0, r1
    23aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23ae:	9001      	str	r0, [sp, #4]
    23b0:	201f      	movs	r0, #31
    23b2:	f88d 000c 	strb.w	r0, [sp, #12]
    23b6:	9800      	ldr	r0, [sp, #0]
    23b8:	f009 ff05 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    23bc:	1c41      	adds	r1, r0, #1
    23be:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    23c2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    23c6:	4410      	add	r0, r2
    23c8:	4408      	add	r0, r1
    23ca:	e9c6 0704 	strd	r0, r7, [r6, #16]
    23ce:	b125      	cbz	r5, 23da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    23d0:	2100      	movs	r1, #0
    23d2:	f240 601a 	movw	r0, #1562	; 0x61a
    23d6:	f3af 8000 	nop.w
    23da:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    23de:	4a21      	ldr	r2, [pc, #132]	; (2464 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    23e0:	9b02      	ldr	r3, [sp, #8]
    23e2:	fbe3 1002 	umlal	r1, r0, r3, r2
    23e6:	e9c6 1004 	strd	r1, r0, [r6, #16]
    23ea:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    23ee:	f88d 0014 	strb.w	r0, [sp, #20]
    23f2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    23f6:	2800      	cmp	r0, #0
    23f8:	f47f af29 	bne.w	224e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    23fc:	b00d      	add	sp, #52	; 0x34
    23fe:	2001      	movs	r0, #1
    2400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2404:	f108 0809 	add.w	r8, r8, #9
    2408:	f1ba 0f00 	cmp.w	sl, #0
    240c:	d016      	beq.n	243c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    240e:	f001 fd47 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2412:	b998      	cbnz	r0, 243c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    2414:	f001 fc12 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2418:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    241c:	bf08      	it	eq
    241e:	200d      	moveq	r0, #13
    2420:	d00b      	beq.n	243a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    2422:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2426:	3856      	subs	r0, #86	; 0x56
    2428:	bf08      	it	eq
    242a:	201c      	moveq	r0, #28
    242c:	d005      	beq.n	243a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    242e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2432:	389f      	subs	r0, #159	; 0x9f
    2434:	bf14      	ite	ne
    2436:	4638      	movne	r0, r7
    2438:	2032      	moveq	r0, #50	; 0x32
    243a:	4480      	add	r8, r0
    243c:	9807      	ldr	r0, [sp, #28]
    243e:	4581      	cmp	r9, r0
    2440:	bf84      	itt	hi
    2442:	eba9 0000 	subhi.w	r0, r9, r0
    2446:	4480      	addhi	r8, r0
    2448:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    244c:	e7a2      	b.n	2394 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    244e:	0000      	.short	0x0000
    2450:	e000ed04 	.word	0xe000ed04
    2454:	00000000 	.word	0x00000000
    2458:	20001024 	.word	0x20001024
    245c:	20000fa4 	.word	0x20000fa4
    2460:	0f424000 	.word	0x0f424000
    2464:	1e848000 	.word	0x1e848000

00002468 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2468:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    246c:	4d92      	ldr	r5, [pc, #584]	; (26b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    246e:	b08c      	sub	sp, #48	; 0x30
    2470:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2474:	2000      	movs	r0, #0
    2476:	9008      	str	r0, [sp, #32]
    2478:	9006      	str	r0, [sp, #24]
    247a:	2001      	movs	r0, #1
    247c:	4c8f      	ldr	r4, [pc, #572]	; (26bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    247e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    2482:	f04f 0800 	mov.w	r8, #0
    2486:	4607      	mov	r7, r0
    2488:	9007      	str	r0, [sp, #28]
    248a:	b124      	cbz	r4, 2496 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    248c:	2100      	movs	r1, #0
    248e:	f240 70e4 	movw	r0, #2020	; 0x7e4
    2492:	f3af 8000 	nop.w
    2496:	9807      	ldr	r0, [sp, #28]
    2498:	2800      	cmp	r0, #0
    249a:	d03c      	beq.n	2516 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    249c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    24a0:	b124      	cbz	r4, 24ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    24a2:	2100      	movs	r1, #0
    24a4:	f240 70e9 	movw	r0, #2025	; 0x7e9
    24a8:	f3af 8000 	nop.w
    24ac:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    24b0:	2240      	movs	r2, #64	; 0x40
    24b2:	ea27 060a 	bic.w	r6, r7, sl
    24b6:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    24ba:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    24be:	4683      	mov	fp, r0
    24c0:	f009 ffdb 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    24c4:	b124      	cbz	r4, 24d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    24c6:	2100      	movs	r1, #0
    24c8:	f240 505e 	movw	r0, #1374	; 0x55e
    24cc:	f3af 8000 	nop.w
    24d0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    24d4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    24d8:	4428      	add	r0, r5
    24da:	4429      	add	r1, r5
    24dc:	9000      	str	r0, [sp, #0]
    24de:	8c0a      	ldrh	r2, [r1, #32]
    24e0:	8402      	strh	r2, [r0, #32]
    24e2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    24e6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    24ea:	b124      	cbz	r4, 24f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    24ec:	2100      	movs	r1, #0
    24ee:	f240 5062 	movw	r0, #1378	; 0x562
    24f2:	f3af 8000 	nop.w
    24f6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    24fa:	f88d 0008 	strb.w	r0, [sp, #8]
    24fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2502:	b178      	cbz	r0, 2524 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2504:	2c00      	cmp	r4, #0
    2506:	bf1c      	itt	ne
    2508:	2100      	movne	r1, #0
    250a:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    250e:	d0bc      	beq.n	248a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2510:	f3af 8000 	nop.w
    2514:	e7b9      	b.n	248a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2516:	486a      	ldr	r0, [pc, #424]	; (26c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2518:	2800      	cmp	r0, #0
    251a:	bf18      	it	ne
    251c:	f3af 8000 	nopne.w
    2520:	b662      	cpsie	i
    2522:	e7bb      	b.n	249c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2524:	b124      	cbz	r4, 2530 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    2526:	2100      	movs	r1, #0
    2528:	f240 70f3 	movw	r0, #2035	; 0x7f3
    252c:	f3af 8000 	nop.w
    2530:	980c      	ldr	r0, [sp, #48]	; 0x30
    2532:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2536:	2803      	cmp	r0, #3
    2538:	d17e      	bne.n	2638 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    253a:	9a00      	ldr	r2, [sp, #0]
    253c:	990c      	ldr	r1, [sp, #48]	; 0x30
    253e:	f892 0020 	ldrb.w	r0, [r2, #32]
    2542:	4288      	cmp	r0, r1
    2544:	bf14      	ite	ne
    2546:	f04f 0a00 	movne.w	sl, #0
    254a:	f04f 0a01 	moveq.w	sl, #1
    254e:	f102 0c20 	add.w	ip, r2, #32
    2552:	4683      	mov	fp, r0
    2554:	2220      	movs	r2, #32
    2556:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    255a:	e003      	b.n	2564 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    255c:	4602      	mov	r2, r0
    255e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2562:	7840      	ldrb	r0, [r0, #1]
    2564:	4288      	cmp	r0, r1
    2566:	d002      	beq.n	256e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    2568:	2820      	cmp	r0, #32
    256a:	d00a      	beq.n	2582 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    256c:	e7f6      	b.n	255c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    256e:	2820      	cmp	r0, #32
    2570:	d007      	beq.n	2582 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2572:	4583      	cmp	fp, r0
    2574:	d107      	bne.n	2586 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    2576:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    257a:	7840      	ldrb	r0, [r0, #1]
    257c:	f88c 0000 	strb.w	r0, [ip]
    2580:	e007      	b.n	2592 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    2582:	4640      	mov	r0, r8
    2584:	e00c      	b.n	25a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    2586:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    258a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    258e:	7840      	ldrb	r0, [r0, #1]
    2590:	7048      	strb	r0, [r1, #1]
    2592:	b124      	cbz	r4, 259e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    2594:	2100      	movs	r1, #0
    2596:	f240 40c9 	movw	r0, #1225	; 0x4c9
    259a:	f3af 8000 	nop.w
    259e:	4638      	mov	r0, r7
    25a0:	46c3      	mov	fp, r8
    25a2:	ea10 0f0a 	tst.w	r0, sl
    25a6:	bf18      	it	ne
    25a8:	46bb      	movne	fp, r7
    25aa:	2800      	cmp	r0, #0
    25ac:	d04e      	beq.n	264c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    25ae:	b124      	cbz	r4, 25ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    25b0:	2100      	movs	r1, #0
    25b2:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    25b6:	f3af 8000 	nop.w
    25ba:	4632      	mov	r2, r6
    25bc:	2001      	movs	r0, #1
    25be:	990c      	ldr	r1, [sp, #48]	; 0x30
    25c0:	f7ff f94a 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    25c4:	b124      	cbz	r4, 25d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    25c6:	2100      	movs	r1, #0
    25c8:	f640 0001 	movw	r0, #2049	; 0x801
    25cc:	f3af 8000 	nop.w
    25d0:	483c      	ldr	r0, [pc, #240]	; (26c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    25d2:	2800      	cmp	r0, #0
    25d4:	bf18      	it	ne
    25d6:	f3af 8000 	nopne.w
    25da:	f3ef 8010 	mrs	r0, PRIMASK
    25de:	b672      	cpsid	i
    25e0:	9007      	str	r0, [sp, #28]
    25e2:	b124      	cbz	r4, 25ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    25e4:	2100      	movs	r1, #0
    25e6:	f640 0006 	movw	r0, #2054	; 0x806
    25ea:	f3af 8000 	nop.w
    25ee:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    25f2:	f88d 0008 	strb.w	r0, [sp, #8]
    25f6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    25fa:	b138      	cbz	r0, 260c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    25fc:	2c00      	cmp	r4, #0
    25fe:	bf1c      	itt	ne
    2600:	2100      	movne	r1, #0
    2602:	f640 000a 	movwne	r0, #2058	; 0x80a
    2606:	f43f af40 	beq.w	248a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    260a:	e781      	b.n	2510 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    260c:	f1bb 0f00 	cmp.w	fp, #0
    2610:	d009      	beq.n	2626 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    2612:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2616:	2820      	cmp	r0, #32
    2618:	d105      	bne.n	2626 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    261a:	4631      	mov	r1, r6
    261c:	2002      	movs	r0, #2
    261e:	f7ff f94d 	bl	18bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x534>
    2622:	9006      	str	r0, [sp, #24]
    2624:	b1f8      	cbz	r0, 2666 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    2626:	b124      	cbz	r4, 2632 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    2628:	2100      	movs	r1, #0
    262a:	f640 001e 	movw	r0, #2078	; 0x81e
    262e:	f3af 8000 	nop.w
    2632:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2636:	e000      	b.n	263a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2638:	e008      	b.n	264c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    263a:	ea27 0000 	bic.w	r0, r7, r0
    263e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    2642:	20ff      	movs	r0, #255	; 0xff
    2644:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2648:	2001      	movs	r0, #1
    264a:	9008      	str	r0, [sp, #32]
    264c:	b124      	cbz	r4, 2658 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    264e:	2100      	movs	r1, #0
    2650:	f640 0027 	movw	r0, #2087	; 0x827
    2654:	f3af 8000 	nop.w
    2658:	9806      	ldr	r0, [sp, #24]
    265a:	4e1b      	ldr	r6, [pc, #108]	; (26c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    265c:	2802      	cmp	r0, #2
    265e:	d009      	beq.n	2674 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    2660:	2801      	cmp	r0, #1
    2662:	d010      	beq.n	2686 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    2664:	e014      	b.n	2690 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2666:	b19c      	cbz	r4, 2690 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2668:	2100      	movs	r1, #0
    266a:	f640 0019 	movw	r0, #2073	; 0x819
    266e:	f3af 8000 	nop.w
    2672:	e7ec      	b.n	264e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2674:	f000 fd6e 	bl	3154 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2678:	68a9      	ldr	r1, [r5, #8]
    267a:	1a08      	subs	r0, r1, r0
    267c:	f009 fda3 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2680:	6871      	ldr	r1, [r6, #4]
    2682:	b921      	cbnz	r1, 268e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    2684:	e004      	b.n	2690 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2686:	6871      	ldr	r1, [r6, #4]
    2688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    268c:	b101      	cbz	r1, 2690 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    268e:	4788      	blx	r1
    2690:	9807      	ldr	r0, [sp, #28]
    2692:	b148      	cbz	r0, 26a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2694:	b124      	cbz	r4, 26a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    2696:	2100      	movs	r1, #0
    2698:	f640 003c 	movw	r0, #2108	; 0x83c
    269c:	f3af 8000 	nop.w
    26a0:	9808      	ldr	r0, [sp, #32]
    26a2:	b00d      	add	sp, #52	; 0x34
    26a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26a8:	4805      	ldr	r0, [pc, #20]	; (26c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    26aa:	2800      	cmp	r0, #0
    26ac:	bf18      	it	ne
    26ae:	f3af 8000 	nopne.w
    26b2:	b662      	cpsie	i
    26b4:	e7ee      	b.n	2694 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    26b6:	0000      	.short	0x0000
    26b8:	20001024 	.word	0x20001024
	...
    26c8:	2000003c 	.word	0x2000003c

000026cc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    26cc:	2820      	cmp	r0, #32
    26ce:	bf24      	itt	cs
    26d0:	2000      	movcs	r0, #0
    26d2:	4770      	bxcs	lr
    26d4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    26d8:	4b03      	ldr	r3, [pc, #12]	; (26e8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    26da:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    26de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    26e2:	6042      	str	r2, [r0, #4]
    26e4:	2001      	movs	r0, #1
    26e6:	4770      	bx	lr
    26e8:	20000c24 	.word	0x20000c24

000026ec <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    26ec:	b510      	push	{r4, lr}
    26ee:	2820      	cmp	r0, #32
    26f0:	d211      	bcs.n	2716 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    26f2:	490e      	ldr	r1, [pc, #56]	; (272c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    26f4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    26f8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    26fc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2700:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2704:	b13b      	cbz	r3, 2716 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2706:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    270a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    270e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2712:	2a01      	cmp	r2, #1
    2714:	d001      	beq.n	271a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2716:	2000      	movs	r0, #0
    2718:	bd10      	pop	{r4, pc}
    271a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    271e:	4601      	mov	r1, r0
    2720:	2000      	movs	r0, #0
    2722:	f7ff f899 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    2726:	2001      	movs	r0, #1
    2728:	bd10      	pop	{r4, pc}
    272a:	0000      	.short	0x0000
    272c:	20001024 	.word	0x20001024

00002730 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2734:	4e86      	ldr	r6, [pc, #536]	; (2950 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    2736:	4680      	mov	r8, r0
    2738:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    273c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2740:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2744:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2748:	2800      	cmp	r0, #0
    274a:	d071      	beq.n	2830 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    274c:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2750:	4d80      	ldr	r5, [pc, #512]	; (2954 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    2752:	b125      	cbz	r5, 275e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2754:	2100      	movs	r1, #0
    2756:	f640 30ae 	movw	r0, #2990	; 0xbae
    275a:	f3af 8000 	nop.w
    275e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2762:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2766:	2801      	cmp	r0, #1
    2768:	d018      	beq.n	279c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    276a:	b2c0      	uxtb	r0, r0
    276c:	2804      	cmp	r0, #4
    276e:	bf1c      	itt	ne
    2770:	2805      	cmpne	r0, #5
    2772:	2806      	cmpne	r0, #6
    2774:	d061      	beq.n	283a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2776:	b12d      	cbz	r5, 2784 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2778:	f04f 0100 	mov.w	r1, #0
    277c:	f640 30ba 	movw	r0, #3002	; 0xbba
    2780:	f3af 8000 	nop.w
    2784:	f001 fd3e 	bl	4204 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2788:	b125      	cbz	r5, 2794 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    278a:	2100      	movs	r1, #0
    278c:	f640 30be 	movw	r0, #3006	; 0xbbe
    2790:	f3af 8000 	nop.w
    2794:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2798:	2801      	cmp	r0, #1
    279a:	d1e6      	bne.n	276a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    279c:	2401      	movs	r4, #1
    279e:	b125      	cbz	r5, 27aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    27a0:	2100      	movs	r1, #0
    27a2:	f640 30c5 	movw	r0, #3013	; 0xbc5
    27a6:	f3af 8000 	nop.w
    27aa:	2c00      	cmp	r4, #0
    27ac:	d04b      	beq.n	2846 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    27ae:	2000      	movs	r0, #0
    27b0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    27b4:	b125      	cbz	r5, 27c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    27b6:	2100      	movs	r1, #0
    27b8:	f640 30ca 	movw	r0, #3018	; 0xbca
    27bc:	f3af 8000 	nop.w
    27c0:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    27c4:	2001      	movs	r0, #1
    27c6:	ea20 090b 	bic.w	r9, r0, fp
    27ca:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    27ce:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    27d2:	2240      	movs	r2, #64	; 0x40
    27d4:	f009 fe51 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    27d8:	b125      	cbz	r5, 27e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    27da:	2100      	movs	r1, #0
    27dc:	f240 505e 	movw	r0, #1374	; 0x55e
    27e0:	f3af 8000 	nop.w
    27e4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    27e8:	eb00 0a06 	add.w	sl, r0, r6
    27ec:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    27f0:	4430      	add	r0, r6
    27f2:	8c01      	ldrh	r1, [r0, #32]
    27f4:	f8aa 1020 	strh.w	r1, [sl, #32]
    27f8:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    27fc:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2800:	b125      	cbz	r5, 280c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2802:	2100      	movs	r1, #0
    2804:	f240 5062 	movw	r0, #1378	; 0x562
    2808:	f3af 8000 	nop.w
    280c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2810:	f88d 0000 	strb.w	r0, [sp]
    2814:	f89d 0000 	ldrb.w	r0, [sp]
    2818:	b1e0      	cbz	r0, 2854 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    281a:	2d00      	cmp	r5, #0
    281c:	bf1c      	itt	ne
    281e:	2100      	movne	r1, #0
    2820:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    2824:	d0bb      	beq.n	279e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2826:	bf00      	nop
    2828:	f3af 8000 	nop.w
    282c:	e7b7      	b.n	279e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    282e:	e7ff      	b.n	2830 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2830:	f640 31a5 	movw	r1, #2981	; 0xba5
    2834:	2070      	movs	r0, #112	; 0x70
    2836:	f001 fbab 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    283a:	464a      	mov	r2, r9
    283c:	4641      	mov	r1, r8
    283e:	2001      	movs	r0, #1
    2840:	f7ff f80a 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    2844:	e7a0      	b.n	2788 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2846:	4844      	ldr	r0, [pc, #272]	; (2958 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2848:	2800      	cmp	r0, #0
    284a:	bf18      	it	ne
    284c:	f3af 8000 	nopne.w
    2850:	b662      	cpsie	i
    2852:	e7ac      	b.n	27ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2854:	b125      	cbz	r5, 2860 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2856:	2100      	movs	r1, #0
    2858:	f640 30d4 	movw	r0, #3028	; 0xbd4
    285c:	f3af 8000 	nop.w
    2860:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2864:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2868:	4640      	mov	r0, r8
    286a:	461c      	mov	r4, r3
    286c:	f04f 0b20 	mov.w	fp, #32
    2870:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2874:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2878:	e004      	b.n	2884 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    287a:	46a3      	mov	fp, r4
    287c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2880:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2884:	4284      	cmp	r4, r0
    2886:	d002      	beq.n	288e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2888:	2c20      	cmp	r4, #32
    288a:	d02b      	beq.n	28e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    288c:	e7f5      	b.n	287a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    288e:	2c20      	cmp	r4, #32
    2890:	d028      	beq.n	28e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2892:	42a3      	cmp	r3, r4
    2894:	d104      	bne.n	28a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    2896:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    289a:	7840      	ldrb	r0, [r0, #1]
    289c:	7008      	strb	r0, [r1, #0]
    289e:	e005      	b.n	28ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    28a0:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    28a4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    28a8:	7840      	ldrb	r0, [r0, #1]
    28aa:	7048      	strb	r0, [r1, #1]
    28ac:	f1ba 0f00 	cmp.w	sl, #0
    28b0:	d011      	beq.n	28d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    28b2:	b125      	cbz	r5, 28be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    28b4:	2100      	movs	r1, #0
    28b6:	f240 40c1 	movw	r0, #1217	; 0x4c1
    28ba:	f3af 8000 	nop.w
    28be:	f89a 0000 	ldrb.w	r0, [sl]
    28c2:	42a0      	cmp	r0, r4
    28c4:	d107      	bne.n	28d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    28c6:	b125      	cbz	r5, 28d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    28c8:	2100      	movs	r1, #0
    28ca:	f240 40c4 	movw	r0, #1220	; 0x4c4
    28ce:	f3af 8000 	nop.w
    28d2:	f88a b000 	strb.w	fp, [sl]
    28d6:	b15d      	cbz	r5, 28f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    28d8:	2100      	movs	r1, #0
    28da:	f240 40c9 	movw	r0, #1225	; 0x4c9
    28de:	f3af 8000 	nop.w
    28e2:	e000      	b.n	28e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    28e4:	b125      	cbz	r5, 28f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    28e6:	2100      	movs	r1, #0
    28e8:	f640 30d8 	movw	r0, #3032	; 0xbd8
    28ec:	f3af 8000 	nop.w
    28f0:	481a      	ldr	r0, [pc, #104]	; (295c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    28f2:	2800      	cmp	r0, #0
    28f4:	bf18      	it	ne
    28f6:	f3af 8000 	nopne.w
    28fa:	f3ef 8410 	mrs	r4, PRIMASK
    28fe:	b672      	cpsid	i
    2900:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2904:	f88d 0000 	strb.w	r0, [sp]
    2908:	f89d 0000 	ldrb.w	r0, [sp]
    290c:	b138      	cbz	r0, 291e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    290e:	2d00      	cmp	r5, #0
    2910:	bf1c      	itt	ne
    2912:	2100      	movne	r1, #0
    2914:	f640 30de 	movwne	r0, #3038	; 0xbde
    2918:	f43f af41 	beq.w	279e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    291c:	e784      	b.n	2828 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    291e:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2922:	20ff      	movs	r0, #255	; 0xff
    2924:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2928:	b154      	cbz	r4, 2940 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    292a:	2d00      	cmp	r5, #0
    292c:	bf08      	it	eq
    292e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2932:	2100      	movs	r1, #0
    2934:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2938:	f3af 8000 	nop.w
    293c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2940:	4805      	ldr	r0, [pc, #20]	; (2958 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2942:	2800      	cmp	r0, #0
    2944:	bf18      	it	ne
    2946:	f3af 8000 	nopne.w
    294a:	b662      	cpsie	i
    294c:	e7ed      	b.n	292a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    294e:	0000      	.short	0x0000
    2950:	20001024 	.word	0x20001024
	...

00002960 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2960:	b570      	push	{r4, r5, r6, lr}
    2962:	460d      	mov	r5, r1
    2964:	4606      	mov	r6, r0
    2966:	f001 fa89 	bl	3e7c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    296a:	480f      	ldr	r0, [pc, #60]	; (29a8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    296c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    2970:	2400      	movs	r4, #0
    2972:	3880      	subs	r0, #128	; 0x80
    2974:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2978:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    297c:	b129      	cbz	r1, 298a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    297e:	1c61      	adds	r1, r4, #1
    2980:	b2cc      	uxtb	r4, r1
    2982:	2c20      	cmp	r4, #32
    2984:	d3f8      	bcc.n	2978 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2986:	2020      	movs	r0, #32
    2988:	bd70      	pop	{r4, r5, r6, pc}
    298a:	4808      	ldr	r0, [pc, #32]	; (29ac <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    298c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2990:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2994:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2998:	4621      	mov	r1, r4
    299a:	6045      	str	r5, [r0, #4]
    299c:	2001      	movs	r0, #1
    299e:	f7fe ff5b 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    29a2:	4620      	mov	r0, r4
    29a4:	bd70      	pop	{r4, r5, r6, pc}
    29a6:	0000      	.short	0x0000
    29a8:	20001024 	.word	0x20001024
    29ac:	20000c24 	.word	0x20000c24

000029b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    29b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29b4:	b083      	sub	sp, #12
    29b6:	f000 fbcd 	bl	3154 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    29ba:	4605      	mov	r5, r0
    29bc:	f000 fe9c 	bl	36f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    29c0:	4c84      	ldr	r4, [pc, #528]	; (2bd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    29c2:	6860      	ldr	r0, [r4, #4]
    29c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    29c8:	bf1c      	itt	ne
    29ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    29ce:	6060      	strne	r0, [r4, #4]
    29d0:	7fa0      	ldrb	r0, [r4, #30]
    29d2:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2bd8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    29d6:	b990      	cbnz	r0, 29fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    29d8:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    29dc:	1a40      	subs	r0, r0, r1
    29de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29e2:	f44f 710c 	mov.w	r1, #560	; 0x230
    29e6:	f009 fc19 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    29ea:	68e1      	ldr	r1, [r4, #12]
    29ec:	4408      	add	r0, r1
    29ee:	1a28      	subs	r0, r5, r0
    29f0:	0200      	lsls	r0, r0, #8
    29f2:	17c1      	asrs	r1, r0, #31
    29f4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    29f8:	1200      	asrs	r0, r0, #8
    29fa:	0fc0      	lsrs	r0, r0, #31
    29fc:	d012      	beq.n	2a24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    29fe:	7e60      	ldrb	r0, [r4, #25]
    2a00:	b320      	cbz	r0, 2a4c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2a02:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2a06:	f88d 0000 	strb.w	r0, [sp]
    2a0a:	f89d 0000 	ldrb.w	r0, [sp]
    2a0e:	b1e8      	cbz	r0, 2a4c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2a10:	f000 fcce 	bl	33b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2a14:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2a18:	b1f0      	cbz	r0, 2a58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    2a1a:	f240 31f5 	movw	r1, #1013	; 0x3f5
    2a1e:	2070      	movs	r0, #112	; 0x70
    2a20:	f001 fab6 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a24:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a28:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2a2c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a30:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    2a34:	6840      	ldr	r0, [r0, #4]
    2a36:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2a3a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    2a3e:	2108      	movs	r1, #8
    2a40:	4790      	blx	r2
    2a42:	f240 31dd 	movw	r1, #989	; 0x3dd
    2a46:	2070      	movs	r0, #112	; 0x70
    2a48:	f001 faa2 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a4c:	1ce8      	adds	r0, r5, #3
    2a4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a52:	f000 fba5 	bl	31a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2a56:	e7dd      	b.n	2a14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    2a58:	2001      	movs	r0, #1
    2a5a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2a5e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a62:	2820      	cmp	r0, #32
    2a64:	d021      	beq.n	2aaa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2a66:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    2a6a:	2020      	movs	r0, #32
    2a6c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2a70:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2a74:	2000      	movs	r0, #0
    2a76:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2a7a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2a7e:	6020      	str	r0, [r4, #0]
    2a80:	f000 ff14 	bl	38ac <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2a84:	7720      	strb	r0, [r4, #28]
    2a86:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    2a8a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2a8e:	1907      	adds	r7, r0, r4
    2a90:	f897 0020 	ldrb.w	r0, [r7, #32]
    2a94:	2820      	cmp	r0, #32
    2a96:	d058      	beq.n	2b4a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2a98:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a9c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    2aa0:	f899 001a 	ldrb.w	r0, [r9, #26]
    2aa4:	2801      	cmp	r0, #1
    2aa6:	d005      	beq.n	2ab4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2aa8:	e04f      	b.n	2b4a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2aaa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2aae:	2070      	movs	r0, #112	; 0x70
    2ab0:	f001 fa6e 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ab4:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    2ab8:	aa01      	add	r2, sp, #4
    2aba:	4669      	mov	r1, sp
    2abc:	4658      	mov	r0, fp
    2abe:	f000 f9df 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2ac2:	f000 feed 	bl	38a0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2ac6:	f000 f9bf 	bl	2e48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2aca:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2ace:	2820      	cmp	r0, #32
    2ad0:	d004      	beq.n	2adc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    2ad2:	68e0      	ldr	r0, [r4, #12]
    2ad4:	1d40      	adds	r0, r0, #5
    2ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ada:	e01d      	b.n	2b18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    2adc:	f105 0a09 	add.w	sl, r5, #9
    2ae0:	f1bb 0f00 	cmp.w	fp, #0
    2ae4:	d016      	beq.n	2b14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2ae6:	f001 f9db 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2aea:	b998      	cbnz	r0, 2b14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2aec:	f001 f8a6 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2af0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2af4:	bf08      	it	eq
    2af6:	200d      	moveq	r0, #13
    2af8:	d00b      	beq.n	2b12 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2afa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2afe:	3856      	subs	r0, #86	; 0x56
    2b00:	bf08      	it	eq
    2b02:	201c      	moveq	r0, #28
    2b04:	d005      	beq.n	2b12 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2b06:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2b0a:	389f      	subs	r0, #159	; 0x9f
    2b0c:	bf14      	ite	ne
    2b0e:	2000      	movne	r0, #0
    2b10:	2032      	moveq	r0, #50	; 0x32
    2b12:	4482      	add	sl, r0
    2b14:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    2b18:	f8d9 2008 	ldr.w	r2, [r9, #8]
    2b1c:	1a81      	subs	r1, r0, r2
    2b1e:	0209      	lsls	r1, r1, #8
    2b20:	17cb      	asrs	r3, r1, #31
    2b22:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    2b26:	1209      	asrs	r1, r1, #8
    2b28:	2900      	cmp	r1, #0
    2b2a:	dc0e      	bgt.n	2b4a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2b2c:	f109 0308 	add.w	r3, r9, #8
    2b30:	4282      	cmp	r2, r0
    2b32:	d202      	bcs.n	2b3a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    2b34:	6899      	ldr	r1, [r3, #8]
    2b36:	1e49      	subs	r1, r1, #1
    2b38:	6099      	str	r1, [r3, #8]
    2b3a:	e9d3 2100 	ldrd	r2, r1, [r3]
    2b3e:	1a89      	subs	r1, r1, r2
    2b40:	6018      	str	r0, [r3, #0]
    2b42:	4408      	add	r0, r1
    2b44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b48:	6058      	str	r0, [r3, #4]
    2b4a:	4631      	mov	r1, r6
    2b4c:	2001      	movs	r0, #1
    2b4e:	f7fe feb5 	bl	18bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x534>
    2b52:	ea5f 0900 	movs.w	r9, r0
    2b56:	d0f8      	beq.n	2b4a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2b58:	4820      	ldr	r0, [pc, #128]	; (2bdc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    2b5a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2b5e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2b62:	2802      	cmp	r0, #2
    2b64:	d104      	bne.n	2b70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    2b66:	4632      	mov	r2, r6
    2b68:	4641      	mov	r1, r8
    2b6a:	2006      	movs	r0, #6
    2b6c:	f7fe fe74 	bl	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    2b70:	20ff      	movs	r0, #255	; 0xff
    2b72:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2b76:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    2b7a:	4e19      	ldr	r6, [pc, #100]	; (2be0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    2b7c:	2820      	cmp	r0, #32
    2b7e:	bf1c      	itt	ne
    2b80:	7870      	ldrbne	r0, [r6, #1]
    2b82:	f001 fad9 	blne	4138 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b86:	7f20      	ldrb	r0, [r4, #28]
    2b88:	b120      	cbz	r0, 2b94 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    2b8a:	f000 fe6b 	bl	3864 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2b8e:	2000      	movs	r0, #0
    2b90:	7720      	strb	r0, [r4, #28]
    2b92:	7760      	strb	r0, [r4, #29]
    2b94:	f1b9 0f02 	cmp.w	r9, #2
    2b98:	d011      	beq.n	2bbe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    2b9a:	f1b9 0f01 	cmp.w	r9, #1
    2b9e:	bf1c      	itt	ne
    2ba0:	b003      	addne	sp, #12
    2ba2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2baa:	6871      	ldr	r1, [r6, #4]
    2bac:	2900      	cmp	r1, #0
    2bae:	bf04      	itt	eq
    2bb0:	b003      	addeq	sp, #12
    2bb2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bb6:	b003      	add	sp, #12
    2bb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bbc:	4708      	bx	r1
    2bbe:	68a0      	ldr	r0, [r4, #8]
    2bc0:	1b40      	subs	r0, r0, r5
    2bc2:	f009 fb00 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2bc6:	6871      	ldr	r1, [r6, #4]
    2bc8:	2900      	cmp	r1, #0
    2bca:	d1f4      	bne.n	2bb6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    2bcc:	b003      	add	sp, #12
    2bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd2:	0000      	.short	0x0000
    2bd4:	20001024 	.word	0x20001024
    2bd8:	20000c24 	.word	0x20000c24
    2bdc:	20000fa4 	.word	0x20000fa4
    2be0:	2000003c 	.word	0x2000003c

00002be4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2be4:	b570      	push	{r4, r5, r6, lr}
    2be6:	4c42      	ldr	r4, [pc, #264]	; (2cf0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    2be8:	4605      	mov	r5, r0
    2bea:	b082      	sub	sp, #8
    2bec:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2bf0:	2820      	cmp	r0, #32
    2bf2:	d008      	beq.n	2c06 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    2bf4:	6860      	ldr	r0, [r4, #4]
    2bf6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2bfa:	d009      	beq.n	2c10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    2bfc:	f640 21d9 	movw	r1, #2777	; 0xad9
    2c00:	2070      	movs	r0, #112	; 0x70
    2c02:	f001 f9c5 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c06:	f640 21d8 	movw	r1, #2776	; 0xad8
    2c0a:	2070      	movs	r0, #112	; 0x70
    2c0c:	f001 f9c0 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c10:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c14:	4937      	ldr	r1, [pc, #220]	; (2cf4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    2c16:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c1a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    2c1e:	68b0      	ldr	r0, [r6, #8]
    2c20:	f009 fad1 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c24:	4602      	mov	r2, r0
    2c26:	8af0      	ldrh	r0, [r6, #22]
    2c28:	7d31      	ldrb	r1, [r6, #20]
    2c2a:	4b33      	ldr	r3, [pc, #204]	; (2cf8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    2c2c:	4408      	add	r0, r1
    2c2e:	1c40      	adds	r0, r0, #1
    2c30:	1811      	adds	r1, r2, r0
    2c32:	429a      	cmp	r2, r3
    2c34:	d817      	bhi.n	2c66 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    2c36:	4a31      	ldr	r2, [pc, #196]	; (2cfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    2c38:	4290      	cmp	r0, r2
    2c3a:	dc1b      	bgt.n	2c74 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2c3c:	f1c2 0c00 	rsb	ip, r2, #0
    2c40:	4560      	cmp	r0, ip
    2c42:	db1e      	blt.n	2c82 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    2c44:	0056      	lsls	r6, r2, #1
    2c46:	428e      	cmp	r6, r1
    2c48:	bfdc      	itt	le
    2c4a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2c4e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2c52:	dd05      	ble.n	2c60 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2c54:	2900      	cmp	r1, #0
    2c56:	bfbc      	itt	lt
    2c58:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2c5c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2c60:	1948      	adds	r0, r1, r5
    2c62:	4299      	cmp	r1, r3
    2c64:	d904      	bls.n	2c70 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    2c66:	f240 519e 	movw	r1, #1438	; 0x59e
    2c6a:	2070      	movs	r0, #112	; 0x70
    2c6c:	f001 f990 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c70:	4295      	cmp	r5, r2
    2c72:	dd04      	ble.n	2c7e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    2c74:	f240 519f 	movw	r1, #1439	; 0x59f
    2c78:	2070      	movs	r0, #112	; 0x70
    2c7a:	f001 f989 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c7e:	4565      	cmp	r5, ip
    2c80:	da04      	bge.n	2c8c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    2c82:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    2c86:	2070      	movs	r0, #112	; 0x70
    2c88:	f001 f982 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c8c:	4286      	cmp	r6, r0
    2c8e:	bfdc      	itt	le
    2c90:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2c94:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2c98:	dd05      	ble.n	2ca6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    2c9a:	2800      	cmp	r0, #0
    2c9c:	bfbc      	itt	lt
    2c9e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2ca2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2ca6:	aa01      	add	r2, sp, #4
    2ca8:	4669      	mov	r1, sp
    2caa:	f000 f8e9 	bl	2e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2cae:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2cb2:	280f      	cmp	r0, #15
    2cb4:	bf8c      	ite	hi
    2cb6:	2001      	movhi	r0, #1
    2cb8:	2000      	movls	r0, #0
    2cba:	9900      	ldr	r1, [sp, #0]
    2cbc:	4408      	add	r0, r1
    2cbe:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2cc2:	6061      	str	r1, [r4, #4]
    2cc4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2cc8:	f88d 0000 	strb.w	r0, [sp]
    2ccc:	f89d 0000 	ldrb.w	r0, [sp]
    2cd0:	2800      	cmp	r0, #0
    2cd2:	bf04      	itt	eq
    2cd4:	b002      	addeq	sp, #8
    2cd6:	bd70      	popeq	{r4, r5, r6, pc}
    2cd8:	2005      	movs	r0, #5
    2cda:	f000 fbe7 	bl	34ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2cde:	2800      	cmp	r0, #0
    2ce0:	bf1c      	itt	ne
    2ce2:	b002      	addne	sp, #8
    2ce4:	bd70      	popne	{r4, r5, r6, pc}
    2ce6:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    2cea:	2070      	movs	r0, #112	; 0x70
    2cec:	f001 f950 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cf0:	20001024 	.word	0x20001024
    2cf4:	20000c24 	.word	0x20000c24
    2cf8:	1e847fff 	.word	0x1e847fff
    2cfc:	0f424000 	.word	0x0f424000

00002d00 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2d00:	b570      	push	{r4, r5, r6, lr}
    2d02:	4c1c      	ldr	r4, [pc, #112]	; (2d74 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    2d04:	2120      	movs	r1, #32
    2d06:	f884 1020 	strb.w	r1, [r4, #32]
    2d0a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2d0e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2d12:	2000      	movs	r0, #0
    2d14:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2d18:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    2d1c:	1e42      	subs	r2, r0, #1
    2d1e:	e9c4 0200 	strd	r0, r2, [r4]
    2d22:	77a0      	strb	r0, [r4, #30]
    2d24:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2d28:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2d2c:	7720      	strb	r0, [r4, #28]
    2d2e:	7760      	strb	r0, [r4, #29]
    2d30:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    2d34:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2d38:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2d3c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2d40:	2210      	movs	r2, #16
    2d42:	7088      	strb	r0, [r1, #2]
    2d44:	f801 0f04 	strb.w	r0, [r1, #4]!
    2d48:	1e52      	subs	r2, r2, #1
    2d4a:	d1fa      	bne.n	2d42 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2d4c:	f000 fdb8 	bl	38c0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    2d50:	4d09      	ldr	r5, [pc, #36]	; (2d78 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    2d52:	2601      	movs	r6, #1
    2d54:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2d58:	20ff      	movs	r0, #255	; 0xff
    2d5a:	7028      	strb	r0, [r5, #0]
    2d5c:	4807      	ldr	r0, [pc, #28]	; (2d7c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2d5e:	f001 f9cd 	bl	40fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2d62:	7068      	strb	r0, [r5, #1]
    2d64:	f001 fa38 	bl	41d8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2d68:	60a8      	str	r0, [r5, #8]
    2d6a:	f000 fd33 	bl	37d4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2d6e:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    2d72:	bd70      	pop	{r4, r5, r6, pc}
    2d74:	20001024 	.word	0x20001024
    2d78:	2000003c 	.word	0x2000003c
    2d7c:	00001781 	.word	0x00001781

00002d80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2d80:	b500      	push	{lr}
    2d82:	b083      	sub	sp, #12
    2d84:	4668      	mov	r0, sp
    2d86:	f000 f9eb 	bl	3160 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2d8a:	9800      	ldr	r0, [sp, #0]
    2d8c:	f009 fa1b 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2d90:	9a01      	ldr	r2, [sp, #4]
    2d92:	4b03      	ldr	r3, [pc, #12]	; (2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2d94:	2100      	movs	r1, #0
    2d96:	fbe2 0103 	umlal	r0, r1, r2, r3
    2d9a:	b003      	add	sp, #12
    2d9c:	bd00      	pop	{pc}
    2d9e:	0000      	.short	0x0000
    2da0:	1e848000 	.word	0x1e848000

00002da4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2da4:	b570      	push	{r4, r5, r6, lr}
    2da6:	4606      	mov	r6, r0
    2da8:	b082      	sub	sp, #8
    2daa:	461d      	mov	r5, r3
    2dac:	4610      	mov	r0, r2
    2dae:	f009 fa0a 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2db2:	4604      	mov	r4, r0
    2db4:	4668      	mov	r0, sp
    2db6:	f000 f9d3 	bl	3160 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2dba:	4920      	ldr	r1, [pc, #128]	; (2e3c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    2dbc:	9801      	ldr	r0, [sp, #4]
    2dbe:	fba0 0201 	umull	r0, r2, r0, r1
    2dc2:	1a30      	subs	r0, r6, r0
    2dc4:	bf44      	itt	mi
    2dc6:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    2dca:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    2dce:	d504      	bpl.n	2dda <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    2dd0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2dd4:	2070      	movs	r0, #112	; 0x70
    2dd6:	f001 f8db 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dda:	4288      	cmp	r0, r1
    2ddc:	db04      	blt.n	2de8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    2dde:	f640 4101 	movw	r1, #3073	; 0xc01
    2de2:	2070      	movs	r0, #112	; 0x70
    2de4:	f001 f8d4 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2de8:	4a15      	ldr	r2, [pc, #84]	; (2e40 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    2dea:	1a21      	subs	r1, r4, r0
    2dec:	2300      	movs	r3, #0
    2dee:	1a8a      	subs	r2, r1, r2
    2df0:	f173 0200 	sbcs.w	r2, r3, #0
    2df4:	d318      	bcc.n	2e28 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2df6:	f8df c048 	ldr.w	ip, [pc, #72]	; 2e40 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    2dfa:	1b02      	subs	r2, r0, r4
    2dfc:	ebb2 0c0c 	subs.w	ip, r2, ip
    2e00:	f173 0300 	sbcs.w	r3, r3, #0
    2e04:	d310      	bcc.n	2e28 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2e06:	4b0f      	ldr	r3, [pc, #60]	; (2e44 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    2e08:	428b      	cmp	r3, r1
    2e0a:	bf3e      	ittt	cc
    2e0c:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2e10:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    2e14:	1901      	addcc	r1, r0, r4
    2e16:	d307      	bcc.n	2e28 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2e18:	4293      	cmp	r3, r2
    2e1a:	d20a      	bcs.n	2e32 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    2e1c:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    2e20:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    2e24:	4408      	add	r0, r1
    2e26:	4241      	negs	r1, r0
    2e28:	f101 000f 	add.w	r0, r1, #15
    2e2c:	b002      	add	sp, #8
    2e2e:	1a28      	subs	r0, r5, r0
    2e30:	bd70      	pop	{r4, r5, r6, pc}
    2e32:	f640 21fa 	movw	r1, #2810	; 0xafa
    2e36:	2070      	movs	r0, #112	; 0x70
    2e38:	f001 f8aa 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e3c:	1e848000 	.word	0x1e848000
    2e40:	0f424000 	.word	0x0f424000
    2e44:	1e847fff 	.word	0x1e847fff

00002e48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2e48:	0b41      	lsrs	r1, r0, #13
    2e4a:	f248 6237 	movw	r2, #34359	; 0x8637
    2e4e:	4351      	muls	r1, r2
    2e50:	0c0a      	lsrs	r2, r1, #16
    2e52:	4b09      	ldr	r3, [pc, #36]	; (2e78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2e54:	0251      	lsls	r1, r2, #9
    2e56:	fb02 0203 	mla	r2, r2, r3, r0
    2e5a:	4808      	ldr	r0, [pc, #32]	; (2e7c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2e5c:	4350      	muls	r0, r2
    2e5e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2e62:	306e      	adds	r0, #110	; 0x6e
    2e64:	0d40      	lsrs	r0, r0, #21
    2e66:	425b      	negs	r3, r3
    2e68:	fb10 f303 	smulbb	r3, r0, r3
    2e6c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2e70:	bf88      	it	hi
    2e72:	1c49      	addhi	r1, r1, #1
    2e74:	4408      	add	r0, r1
    2e76:	4770      	bx	lr
    2e78:	ffffc2f7 	.word	0xffffc2f7
    2e7c:	00010c6f 	.word	0x00010c6f

00002e80 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2e80:	0b43      	lsrs	r3, r0, #13
    2e82:	f248 6c37 	movw	ip, #34359	; 0x8637
    2e86:	fb03 f30c 	mul.w	r3, r3, ip
    2e8a:	b430      	push	{r4, r5}
    2e8c:	0c1b      	lsrs	r3, r3, #16
    2e8e:	f8df c044 	ldr.w	ip, [pc, #68]	; 2ed4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2e92:	025c      	lsls	r4, r3, #9
    2e94:	fb03 030c 	mla	r3, r3, ip, r0
    2e98:	480f      	ldr	r0, [pc, #60]	; (2ed8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2e9a:	4358      	muls	r0, r3
    2e9c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2ea0:	eb04 000c 	add.w	r0, r4, ip
    2ea4:	f643 5409 	movw	r4, #15625	; 0x3d09
    2ea8:	fb1c f404 	smulbb	r4, ip, r4
    2eac:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2eb0:	f643 5508 	movw	r5, #15624	; 0x3d08
    2eb4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2eb8:	442c      	add	r4, r5
    2eba:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2ebe:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2ec2:	bf84      	itt	hi
    2ec4:	f04f 0c00 	movhi.w	ip, #0
    2ec8:	1c40      	addhi	r0, r0, #1
    2eca:	6008      	str	r0, [r1, #0]
    2ecc:	f882 c000 	strb.w	ip, [r2]
    2ed0:	bc30      	pop	{r4, r5}
    2ed2:	4770      	bx	lr
    2ed4:	ffffc2f7 	.word	0xffffc2f7
    2ed8:	00010c6f 	.word	0x00010c6f

00002edc <MPSL_IRQ_RTC0_Handler>:
    2edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ee0:	4d3b      	ldr	r5, [pc, #236]	; (2fd0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2ee2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2ee6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2fd4 <MPSL_IRQ_RTC0_Handler+0xf8>
    2eea:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2eee:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2ef2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2ef6:	f04f 0400 	mov.w	r4, #0
    2efa:	d019      	beq.n	2f30 <MPSL_IRQ_RTC0_Handler+0x54>
    2efc:	4836      	ldr	r0, [pc, #216]	; (2fd8 <MPSL_IRQ_RTC0_Handler+0xfc>)
    2efe:	6800      	ldr	r0, [r0, #0]
    2f00:	b1b0      	cbz	r0, 2f30 <MPSL_IRQ_RTC0_Handler+0x54>
    2f02:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2f06:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f0a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    2f0e:	f8d8 1000 	ldr.w	r1, [r8]
    2f12:	1a40      	subs	r0, r0, r1
    2f14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f18:	2802      	cmp	r0, #2
    2f1a:	d302      	bcc.n	2f22 <MPSL_IRQ_RTC0_Handler+0x46>
    2f1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f20:	d906      	bls.n	2f30 <MPSL_IRQ_RTC0_Handler+0x54>
    2f22:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2f26:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f2a:	2004      	movs	r0, #4
    2f2c:	f7fe fe9c 	bl	1c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f30:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f34:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2f38:	d01a      	beq.n	2f70 <MPSL_IRQ_RTC0_Handler+0x94>
    2f3a:	4828      	ldr	r0, [pc, #160]	; (2fdc <MPSL_IRQ_RTC0_Handler+0x100>)
    2f3c:	6800      	ldr	r0, [r0, #0]
    2f3e:	b1b8      	cbz	r0, 2f70 <MPSL_IRQ_RTC0_Handler+0x94>
    2f40:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2f44:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f48:	4825      	ldr	r0, [pc, #148]	; (2fe0 <MPSL_IRQ_RTC0_Handler+0x104>)
    2f4a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2f4e:	f8d8 1000 	ldr.w	r1, [r8]
    2f52:	1a40      	subs	r0, r0, r1
    2f54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f58:	2802      	cmp	r0, #2
    2f5a:	d302      	bcc.n	2f62 <MPSL_IRQ_RTC0_Handler+0x86>
    2f5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f60:	d906      	bls.n	2f70 <MPSL_IRQ_RTC0_Handler+0x94>
    2f62:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2f66:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f6a:	2005      	movs	r0, #5
    2f6c:	f7fe fe7c 	bl	1c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f70:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f74:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2f78:	d01a      	beq.n	2fb0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2f7a:	481a      	ldr	r0, [pc, #104]	; (2fe4 <MPSL_IRQ_RTC0_Handler+0x108>)
    2f7c:	6800      	ldr	r0, [r0, #0]
    2f7e:	b1b8      	cbz	r0, 2fb0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2f80:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    2f84:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f88:	4817      	ldr	r0, [pc, #92]	; (2fe8 <MPSL_IRQ_RTC0_Handler+0x10c>)
    2f8a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2f8e:	f8d8 1000 	ldr.w	r1, [r8]
    2f92:	1a40      	subs	r0, r0, r1
    2f94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f98:	2802      	cmp	r0, #2
    2f9a:	d302      	bcc.n	2fa2 <MPSL_IRQ_RTC0_Handler+0xc6>
    2f9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2fa0:	d906      	bls.n	2fb0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2fa2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2fa6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2faa:	2006      	movs	r0, #6
    2fac:	f7fe fe5c 	bl	1c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fb0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2fb4:	2800      	cmp	r0, #0
    2fb6:	bf08      	it	eq
    2fb8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fbc:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    2fc0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fc4:	4809      	ldr	r0, [pc, #36]	; (2fec <MPSL_IRQ_RTC0_Handler+0x110>)
    2fc6:	68c1      	ldr	r1, [r0, #12]
    2fc8:	1c49      	adds	r1, r1, #1
    2fca:	60c1      	str	r1, [r0, #12]
    2fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fd0:	4000b000 	.word	0x4000b000
    2fd4:	4000b504 	.word	0x4000b504
    2fd8:	4000b140 	.word	0x4000b140
    2fdc:	4000b144 	.word	0x4000b144
    2fe0:	4000b004 	.word	0x4000b004
    2fe4:	4000b148 	.word	0x4000b148
    2fe8:	4000b008 	.word	0x4000b008
    2fec:	20000048 	.word	0x20000048

00002ff0 <MPSL_IRQ_TIMER0_Handler>:
    2ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ff4:	4d38      	ldr	r5, [pc, #224]	; (30d8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2ff6:	7828      	ldrb	r0, [r5, #0]
    2ff8:	2804      	cmp	r0, #4
    2ffa:	d068      	beq.n	30ce <MPSL_IRQ_TIMER0_Handler+0xde>
    2ffc:	1ca8      	adds	r0, r5, #2
    2ffe:	2201      	movs	r2, #1
    3000:	7801      	ldrb	r1, [r0, #0]
    3002:	b159      	cbz	r1, 301c <MPSL_IRQ_TIMER0_Handler+0x2c>
    3004:	2901      	cmp	r1, #1
    3006:	bf08      	it	eq
    3008:	706a      	strbeq	r2, [r5, #1]
    300a:	d002      	beq.n	3012 <MPSL_IRQ_TIMER0_Handler+0x22>
    300c:	7869      	ldrb	r1, [r5, #1]
    300e:	2900      	cmp	r1, #0
    3010:	d058      	beq.n	30c4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    3012:	2102      	movs	r1, #2
    3014:	7001      	strb	r1, [r0, #0]
    3016:	7840      	ldrb	r0, [r0, #1]
    3018:	f000 fafe 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    301c:	4c2f      	ldr	r4, [pc, #188]	; (30dc <MPSL_IRQ_TIMER0_Handler+0xec>)
    301e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3022:	f04f 0800 	mov.w	r8, #0
    3026:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    302a:	f44f 7780 	mov.w	r7, #256	; 0x100
    302e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3032:	d00a      	beq.n	304a <MPSL_IRQ_TIMER0_Handler+0x5a>
    3034:	482a      	ldr	r0, [pc, #168]	; (30e0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3036:	6800      	ldr	r0, [r0, #0]
    3038:	b138      	cbz	r0, 304a <MPSL_IRQ_TIMER0_Handler+0x5a>
    303a:	2003      	movs	r0, #3
    303c:	f000 faec 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3040:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3044:	2003      	movs	r0, #3
    3046:	f7fe fe0f 	bl	1c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    304a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    304e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3052:	d00a      	beq.n	306a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3054:	4823      	ldr	r0, [pc, #140]	; (30e4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3056:	6800      	ldr	r0, [r0, #0]
    3058:	b138      	cbz	r0, 306a <MPSL_IRQ_TIMER0_Handler+0x7a>
    305a:	2002      	movs	r0, #2
    305c:	f000 fadc 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3060:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3064:	2002      	movs	r0, #2
    3066:	f7fe fdff 	bl	1c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    306a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    306e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3072:	d00a      	beq.n	308a <MPSL_IRQ_TIMER0_Handler+0x9a>
    3074:	481c      	ldr	r0, [pc, #112]	; (30e8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3076:	6800      	ldr	r0, [r0, #0]
    3078:	b138      	cbz	r0, 308a <MPSL_IRQ_TIMER0_Handler+0x9a>
    307a:	2001      	movs	r0, #1
    307c:	f000 facc 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3080:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3084:	2001      	movs	r0, #1
    3086:	f7fe fdef 	bl	1c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    308a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    308e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3092:	bf08      	it	eq
    3094:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3098:	4814      	ldr	r0, [pc, #80]	; (30ec <MPSL_IRQ_TIMER0_Handler+0xfc>)
    309a:	6800      	ldr	r0, [r0, #0]
    309c:	2800      	cmp	r0, #0
    309e:	bf08      	it	eq
    30a0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    30a4:	2000      	movs	r0, #0
    30a6:	f000 fab7 	bl	3618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30aa:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30ae:	2004      	movs	r0, #4
    30b0:	7028      	strb	r0, [r5, #0]
    30b2:	f8c5 8004 	str.w	r8, [r5, #4]
    30b6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    30ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30be:	2000      	movs	r0, #0
    30c0:	f7fe bdd2 	b.w	1c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30c4:	f240 41a3 	movw	r1, #1187	; 0x4a3
    30c8:	206c      	movs	r0, #108	; 0x6c
    30ca:	f000 ff61 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30d2:	2007      	movs	r0, #7
    30d4:	f7fe bdc8 	b.w	1c68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30d8:	20000048 	.word	0x20000048
    30dc:	40008000 	.word	0x40008000
    30e0:	4000814c 	.word	0x4000814c
    30e4:	40008148 	.word	0x40008148
    30e8:	40008144 	.word	0x40008144
    30ec:	40008140 	.word	0x40008140
    30f0:	2201      	movs	r2, #1
    30f2:	0211      	lsls	r1, r2, #8
    30f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    30f8:	2000      	movs	r0, #0
    30fa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    30fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3102:	f3bf 8f4f 	dsb	sy
    3106:	f3bf 8f6f 	isb	sy
    310a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    310e:	490e      	ldr	r1, [pc, #56]	; (3148 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3110:	f841 2f04 	str.w	r2, [r1, #4]!
    3114:	1e43      	subs	r3, r0, #1
    3116:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    311a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    311e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3122:	4b0a      	ldr	r3, [pc, #40]	; (314c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3124:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3128:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    312c:	1d1b      	adds	r3, r3, #4
    312e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3132:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3136:	1d1b      	adds	r3, r3, #4
    3138:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    313c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3140:	60ca      	str	r2, [r1, #12]
    3142:	4903      	ldr	r1, [pc, #12]	; (3150 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3144:	7048      	strb	r0, [r1, #1]
    3146:	4770      	bx	lr
    3148:	40008000 	.word	0x40008000
    314c:	40008004 	.word	0x40008004
    3150:	20000048 	.word	0x20000048

00003154 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3154:	4801      	ldr	r0, [pc, #4]	; (315c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3156:	6800      	ldr	r0, [r0, #0]
    3158:	4770      	bx	lr
    315a:	0000      	.short	0x0000
    315c:	4000b504 	.word	0x4000b504

00003160 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    3160:	b430      	push	{r4, r5}
    3162:	f3ef 8c10 	mrs	ip, PRIMASK
    3166:	b672      	cpsid	i
    3168:	2500      	movs	r5, #0
    316a:	4b0b      	ldr	r3, [pc, #44]	; (3198 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    316c:	4a0b      	ldr	r2, [pc, #44]	; (319c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    316e:	bf00      	nop
    3170:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3174:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    3178:	b12c      	cbz	r4, 3186 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    317a:	68d1      	ldr	r1, [r2, #12]
    317c:	1c49      	adds	r1, r1, #1
    317e:	60d1      	str	r1, [r2, #12]
    3180:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    3184:	e7f4      	b.n	3170 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    3186:	68d2      	ldr	r2, [r2, #12]
    3188:	f1bc 0f00 	cmp.w	ip, #0
    318c:	d100      	bne.n	3190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    318e:	b662      	cpsie	i
    3190:	e9c0 1200 	strd	r1, r2, [r0]
    3194:	bc30      	pop	{r4, r5}
    3196:	4770      	bx	lr
    3198:	4000b000 	.word	0x4000b000
    319c:	20000048 	.word	0x20000048

000031a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    31a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31a4:	4e46      	ldr	r6, [pc, #280]	; (32c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    31a6:	4605      	mov	r5, r0
    31a8:	1eb7      	subs	r7, r6, #2
    31aa:	7833      	ldrb	r3, [r6, #0]
    31ac:	68b9      	ldr	r1, [r7, #8]
    31ae:	2b01      	cmp	r3, #1
    31b0:	bf04      	itt	eq
    31b2:	42a9      	cmpeq	r1, r5
    31b4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31b8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    31bc:	4a41      	ldr	r2, [pc, #260]	; (32c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    31be:	6010      	str	r0, [r2, #0]
    31c0:	4a42      	ldr	r2, [pc, #264]	; (32cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    31c2:	4841      	ldr	r0, [pc, #260]	; (32c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    31c4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    31c8:	f102 0c04 	add.w	ip, r2, #4
    31cc:	f04f 0400 	mov.w	r4, #0
    31d0:	2b00      	cmp	r3, #0
    31d2:	d062      	beq.n	329a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    31d4:	483e      	ldr	r0, [pc, #248]	; (32d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    31d6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    31da:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    31de:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    31e2:	bf00      	nop
    31e4:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    31e8:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    31ec:	f04f 0801 	mov.w	r8, #1
    31f0:	2800      	cmp	r0, #0
    31f2:	bf01      	itttt	eq
    31f4:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    31f8:	2800      	cmpeq	r0, #0
    31fa:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    31fe:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3202:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3206:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    320a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    320e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3212:	4830      	ldr	r0, [pc, #192]	; (32d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3214:	f8d0 c000 	ldr.w	ip, [r0]
    3218:	eba5 0c0c 	sub.w	ip, r5, ip
    321c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3220:	f1bc 0f02 	cmp.w	ip, #2
    3224:	d344      	bcc.n	32b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3226:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    322a:	d841      	bhi.n	32b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    322c:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3230:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3234:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3238:	b12b      	cbz	r3, 3246 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    323a:	6802      	ldr	r2, [r0, #0]
    323c:	1a8a      	subs	r2, r1, r2
    323e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3242:	2a02      	cmp	r2, #2
    3244:	d3f9      	bcc.n	323a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    3246:	f8c7 8004 	str.w	r8, [r7, #4]
    324a:	703c      	strb	r4, [r7, #0]
    324c:	f7ff ff50 	bl	30f0 <MPSL_IRQ_TIMER0_Handler+0x100>
    3250:	4821      	ldr	r0, [pc, #132]	; (32d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3252:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3256:	f364 0101 	bfi	r1, r4, #0, #2
    325a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    325e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3262:	2102      	movs	r1, #2
    3264:	f361 0201 	bfi	r2, r1, #0, #2
    3268:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    326c:	2104      	movs	r1, #4
    326e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    3272:	f8c0 800c 	str.w	r8, [r0, #12]
    3276:	6879      	ldr	r1, [r7, #4]
    3278:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    327c:	1580      	asrs	r0, r0, #22
    327e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3282:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3286:	4915      	ldr	r1, [pc, #84]	; (32dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3288:	05c0      	lsls	r0, r0, #23
    328a:	6008      	str	r0, [r1, #0]
    328c:	2004      	movs	r0, #4
    328e:	60bd      	str	r5, [r7, #8]
    3290:	7070      	strb	r0, [r6, #1]
    3292:	f886 8000 	strb.w	r8, [r6]
    3296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    329a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    329e:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    32a2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    32a6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    32aa:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    32ae:	e799      	b.n	31e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    32b0:	2000      	movs	r0, #0
    32b2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    32b6:	f240 2197 	movw	r1, #663	; 0x297
    32ba:	206c      	movs	r0, #108	; 0x6c
    32bc:	f000 fe68 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32c0:	2000004a 	.word	0x2000004a
    32c4:	4001f508 	.word	0x4001f508
    32c8:	fffbfffd 	.word	0xfffbfffd
    32cc:	4000b000 	.word	0x4000b000
    32d0:	fffafffd 	.word	0xfffafffd
    32d4:	4000b504 	.word	0x4000b504
    32d8:	40008000 	.word	0x40008000
    32dc:	4001f504 	.word	0x4001f504

000032e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    32e0:	b570      	push	{r4, r5, r6, lr}
    32e2:	4c2a      	ldr	r4, [pc, #168]	; (338c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    32e4:	68a1      	ldr	r1, [r4, #8]
    32e6:	4281      	cmp	r1, r0
    32e8:	bf14      	ite	ne
    32ea:	2201      	movne	r2, #1
    32ec:	2200      	moveq	r2, #0
    32ee:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3390 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    32f2:	f89c 5000 	ldrb.w	r5, [ip]
    32f6:	2d02      	cmp	r5, #2
    32f8:	d002      	beq.n	3300 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    32fa:	2a00      	cmp	r2, #0
    32fc:	d034      	beq.n	3368 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    32fe:	e002      	b.n	3306 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3300:	2a00      	cmp	r2, #0
    3302:	bf08      	it	eq
    3304:	bd70      	popeq	{r4, r5, r6, pc}
    3306:	7862      	ldrb	r2, [r4, #1]
    3308:	b39a      	cbz	r2, 3372 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    330a:	4b22      	ldr	r3, [pc, #136]	; (3394 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    330c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3310:	601a      	str	r2, [r3, #0]
    3312:	4b21      	ldr	r3, [pc, #132]	; (3398 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3314:	1392      	asrs	r2, r2, #14
    3316:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    331a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    331e:	2200      	movs	r2, #0
    3320:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3324:	4a1d      	ldr	r2, [pc, #116]	; (339c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3326:	6816      	ldr	r6, [r2, #0]
    3328:	1b86      	subs	r6, r0, r6
    332a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    332e:	2e02      	cmp	r6, #2
    3330:	d324      	bcc.n	337c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3332:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3336:	d821      	bhi.n	337c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3338:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    333c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3340:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3344:	b12d      	cbz	r5, 3352 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3346:	6813      	ldr	r3, [r2, #0]
    3348:	1acb      	subs	r3, r1, r3
    334a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    334e:	2b02      	cmp	r3, #2
    3350:	d3f9      	bcc.n	3346 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3352:	4b13      	ldr	r3, [pc, #76]	; (33a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3354:	2102      	movs	r1, #2
    3356:	074a      	lsls	r2, r1, #29
    3358:	601a      	str	r2, [r3, #0]
    335a:	60a0      	str	r0, [r4, #8]
    335c:	2004      	movs	r0, #4
    335e:	f88c 0001 	strb.w	r0, [ip, #1]
    3362:	f88c 1000 	strb.w	r1, [ip]
    3366:	bd70      	pop	{r4, r5, r6, pc}
    3368:	f240 21a5 	movw	r1, #677	; 0x2a5
    336c:	206c      	movs	r0, #108	; 0x6c
    336e:	f000 fe0f 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3372:	f240 21a9 	movw	r1, #681	; 0x2a9
    3376:	206c      	movs	r0, #108	; 0x6c
    3378:	f000 fe0a 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    337c:	2000      	movs	r0, #0
    337e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3382:	f240 21b5 	movw	r1, #693	; 0x2b5
    3386:	206c      	movs	r0, #108	; 0x6c
    3388:	f000 fe02 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    338c:	20000048 	.word	0x20000048
    3390:	2000004a 	.word	0x2000004a
    3394:	4001f508 	.word	0x4001f508
    3398:	4000b000 	.word	0x4000b000
    339c:	4000b504 	.word	0x4000b504
    33a0:	4001f504 	.word	0x4001f504

000033a4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    33a4:	4801      	ldr	r0, [pc, #4]	; (33ac <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    33a6:	6880      	ldr	r0, [r0, #8]
    33a8:	4770      	bx	lr
    33aa:	0000      	.short	0x0000
    33ac:	20000048 	.word	0x20000048

000033b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    33b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33b4:	4836      	ldr	r0, [pc, #216]	; (3490 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    33b6:	4a35      	ldr	r2, [pc, #212]	; (348c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    33b8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    33bc:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3494 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    33c0:	1d03      	adds	r3, r0, #4
    33c2:	2100      	movs	r1, #0
    33c4:	f89c 4000 	ldrb.w	r4, [ip]
    33c8:	b184      	cbz	r4, 33ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    33ca:	4a33      	ldr	r2, [pc, #204]	; (3498 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    33cc:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    33d0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    33d4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    33d8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    33dc:	2301      	movs	r3, #1
    33de:	2a00      	cmp	r2, #0
    33e0:	bf04      	itt	eq
    33e2:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    33e6:	2800      	cmpeq	r0, #0
    33e8:	d111      	bne.n	340e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    33ea:	e00a      	b.n	3402 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    33ec:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    33f0:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    33f4:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    33f8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    33fc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3400:	e7ea      	b.n	33d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3402:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3406:	f44f 6000 	mov.w	r0, #2048	; 0x800
    340a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    340e:	2c02      	cmp	r4, #2
    3410:	d004      	beq.n	341c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    3412:	f240 21c1 	movw	r1, #705	; 0x2c1
    3416:	206c      	movs	r0, #108	; 0x6c
    3418:	f000 fdba 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    341c:	4e1f      	ldr	r6, [pc, #124]	; (349c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    341e:	6830      	ldr	r0, [r6, #0]
    3420:	4c1f      	ldr	r4, [pc, #124]	; (34a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3422:	1cc0      	adds	r0, r0, #3
    3424:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3428:	68a2      	ldr	r2, [r4, #8]
    342a:	4d1e      	ldr	r5, [pc, #120]	; (34a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    342c:	4290      	cmp	r0, r2
    342e:	d00b      	beq.n	3448 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3430:	6837      	ldr	r7, [r6, #0]
    3432:	1bd7      	subs	r7, r2, r7
    3434:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3438:	2f04      	cmp	r7, #4
    343a:	d305      	bcc.n	3448 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    343c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3440:	d802      	bhi.n	3448 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3442:	f7ff fead 	bl	31a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3446:	e01b      	b.n	3480 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3448:	6830      	ldr	r0, [r6, #0]
    344a:	1a10      	subs	r0, r2, r0
    344c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3450:	2802      	cmp	r0, #2
    3452:	d313      	bcc.n	347c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3454:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3458:	d810      	bhi.n	347c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    345a:	4a13      	ldr	r2, [pc, #76]	; (34a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    345c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3460:	6010      	str	r0, [r2, #0]
    3462:	6063      	str	r3, [r4, #4]
    3464:	7021      	strb	r1, [r4, #0]
    3466:	606b      	str	r3, [r5, #4]
    3468:	60eb      	str	r3, [r5, #12]
    346a:	0040      	lsls	r0, r0, #1
    346c:	1f11      	subs	r1, r2, #4
    346e:	6008      	str	r0, [r1, #0]
    3470:	2004      	movs	r0, #4
    3472:	f88c 0001 	strb.w	r0, [ip, #1]
    3476:	f88c 3000 	strb.w	r3, [ip]
    347a:	e001      	b.n	3480 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    347c:	6063      	str	r3, [r4, #4]
    347e:	7021      	strb	r1, [r4, #0]
    3480:	6860      	ldr	r0, [r4, #4]
    3482:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    348a:	0000      	.short	0x0000
    348c:	fffbfffd 	.word	0xfffbfffd
    3490:	4000b000 	.word	0x4000b000
    3494:	2000004a 	.word	0x2000004a
    3498:	fffafffd 	.word	0xfffafffd
    349c:	4000b504 	.word	0x4000b504
    34a0:	20000048 	.word	0x20000048
    34a4:	40008000 	.word	0x40008000
    34a8:	4001f508 	.word	0x4001f508

000034ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    34ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34b0:	4a54      	ldr	r2, [pc, #336]	; (3604 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    34b2:	2500      	movs	r5, #0
    34b4:	2401      	movs	r4, #1
    34b6:	f892 c000 	ldrb.w	ip, [r2]
    34ba:	7853      	ldrb	r3, [r2, #1]
    34bc:	f44f 76a0 	mov.w	r6, #320	; 0x140
    34c0:	2807      	cmp	r0, #7
    34c2:	d27d      	bcs.n	35c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    34c4:	e8df f000 	tbb	[pc, r0]
    34c8:	04040404 	.word	0x04040404
    34cc:	00585858 	.word	0x00585858
    34d0:	4a4d      	ldr	r2, [pc, #308]	; (3608 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    34d2:	6897      	ldr	r7, [r2, #8]
    34d4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    34d8:	bf04      	itt	eq
    34da:	7852      	ldrbeq	r2, [r2, #1]
    34dc:	2a00      	cmpeq	r2, #0
    34de:	d003      	beq.n	34e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    34e0:	f1bc 0f02 	cmp.w	ip, #2
    34e4:	d005      	beq.n	34f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    34e6:	e026      	b.n	3536 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    34e8:	f240 3151 	movw	r1, #849	; 0x351
    34ec:	206c      	movs	r0, #108	; 0x6c
    34ee:	f000 fd4f 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34f2:	1f1a      	subs	r2, r3, #4
    34f4:	b2d2      	uxtb	r2, r2
    34f6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    34fa:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    34fe:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3502:	2200      	movs	r2, #0
    3504:	f1bc 0f01 	cmp.w	ip, #1
    3508:	d003      	beq.n	3512 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    350a:	f1bc 0f02 	cmp.w	ip, #2
    350e:	d008      	beq.n	3522 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3510:	e00e      	b.n	3530 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3512:	2b04      	cmp	r3, #4
    3514:	bf24      	itt	cs
    3516:	6837      	ldrcs	r7, [r6, #0]
    3518:	2f00      	cmpcs	r7, #0
    351a:	bf08      	it	eq
    351c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3520:	e006      	b.n	3530 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3522:	2b04      	cmp	r3, #4
    3524:	bf24      	itt	cs
    3526:	6837      	ldrcs	r7, [r6, #0]
    3528:	2f00      	cmpcs	r7, #0
    352a:	bf08      	it	eq
    352c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3530:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3534:	d1e5      	bne.n	3502 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3536:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 360c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    353a:	f100 0210 	add.w	r2, r0, #16
    353e:	fa04 f202 	lsl.w	r2, r4, r2
    3542:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3546:	f04f 0340 	mov.w	r3, #64	; 0x40
    354a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    354e:	b2db      	uxtb	r3, r3
    3550:	4463      	add	r3, ip
    3552:	601c      	str	r4, [r3, #0]
    3554:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3558:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    355c:	eba1 0303 	sub.w	r3, r1, r3
    3560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3564:	2b03      	cmp	r3, #3
    3566:	bf26      	itte	cs
    3568:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    356c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3570:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3574:	d237      	bcs.n	35e6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    3576:	e03c      	b.n	35f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    3578:	f1bc 0f00 	cmp.w	ip, #0
    357c:	d006      	beq.n	358c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    357e:	4283      	cmp	r3, r0
    3580:	d104      	bne.n	358c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3582:	f240 3171 	movw	r1, #881	; 0x371
    3586:	206c      	movs	r0, #108	; 0x6c
    3588:	f000 fd02 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    358c:	1f02      	subs	r2, r0, #4
    358e:	b2d3      	uxtb	r3, r2
    3590:	2b03      	cmp	r3, #3
    3592:	d304      	bcc.n	359e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    3594:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    3598:	206c      	movs	r0, #108	; 0x6c
    359a:	f000 fcf9 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    359e:	f8df c070 	ldr.w	ip, [pc, #112]	; 3610 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    35a2:	f103 0210 	add.w	r2, r3, #16
    35a6:	fa04 f202 	lsl.w	r2, r4, r2
    35aa:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    35ae:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    35b2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    35b6:	f84c 5003 	str.w	r5, [ip, r3]
    35ba:	4b16      	ldr	r3, [pc, #88]	; (3614 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    35bc:	681b      	ldr	r3, [r3, #0]
    35be:	e000      	b.n	35c2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    35c0:	e01a      	b.n	35f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    35c2:	1f00      	subs	r0, r0, #4
    35c4:	1acb      	subs	r3, r1, r3
    35c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    35ca:	b2c0      	uxtb	r0, r0
    35cc:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    35d0:	2b02      	cmp	r3, #2
    35d2:	d30b      	bcc.n	35ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    35d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    35d8:	d808      	bhi.n	35ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    35da:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35de:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    35e2:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    35e6:	2001      	movs	r0, #1
    35e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35ec:	2100      	movs	r1, #0
    35ee:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35f2:	2000      	movs	r0, #0
    35f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35f8:	f240 3175 	movw	r1, #885	; 0x375
    35fc:	206c      	movs	r0, #108	; 0x6c
    35fe:	f000 fcc7 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3602:	0000      	.short	0x0000
    3604:	2000004a 	.word	0x2000004a
    3608:	20000048 	.word	0x20000048
    360c:	40008000 	.word	0x40008000
    3610:	4000b000 	.word	0x4000b000
    3614:	4000b504 	.word	0x4000b504

00003618 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    361c:	2601      	movs	r6, #1
    361e:	2700      	movs	r7, #0
    3620:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3624:	2807      	cmp	r0, #7
    3626:	d251      	bcs.n	36cc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3628:	e8df f000 	tbb	[pc, r0]
    362c:	04040404 	.word	0x04040404
    3630:	00191919 	.word	0x00191919
    3634:	f100 0110 	add.w	r1, r0, #16
    3638:	fa06 f201 	lsl.w	r2, r6, r1
    363c:	4926      	ldr	r1, [pc, #152]	; (36d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    363e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3642:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3646:	2200      	movs	r2, #0
    3648:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    364c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3650:	508f      	str	r7, [r1, r2]
    3652:	4922      	ldr	r1, [pc, #136]	; (36dc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3654:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3658:	9000      	str	r0, [sp, #0]
    365a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    365e:	4d20      	ldr	r5, [pc, #128]	; (36e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3660:	1f01      	subs	r1, r0, #4
    3662:	b2cc      	uxtb	r4, r1
    3664:	7829      	ldrb	r1, [r5, #0]
    3666:	b179      	cbz	r1, 3688 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3668:	786a      	ldrb	r2, [r5, #1]
    366a:	4282      	cmp	r2, r0
    366c:	d10c      	bne.n	3688 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    366e:	4a1d      	ldr	r2, [pc, #116]	; (36e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3670:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3674:	6010      	str	r0, [r2, #0]
    3676:	2901      	cmp	r1, #1
    3678:	bf08      	it	eq
    367a:	f7ff fd39 	bleq	30f0 <MPSL_IRQ_TIMER0_Handler+0x100>
    367e:	702f      	strb	r7, [r5, #0]
    3680:	4919      	ldr	r1, [pc, #100]	; (36e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3682:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3686:	6088      	str	r0, [r1, #8]
    3688:	4918      	ldr	r1, [pc, #96]	; (36ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    368a:	f104 0010 	add.w	r0, r4, #16
    368e:	fa06 f000 	lsl.w	r0, r6, r0
    3692:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3696:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    369a:	00a0      	lsls	r0, r4, #2
    369c:	4408      	add	r0, r1
    369e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    36a2:	4a13      	ldr	r2, [pc, #76]	; (36f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    36a4:	6812      	ldr	r2, [r2, #0]
    36a6:	1a80      	subs	r0, r0, r2
    36a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36ac:	2802      	cmp	r0, #2
    36ae:	d307      	bcc.n	36c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    36b0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    36b4:	2000      	movs	r0, #0
    36b6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    36ba:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    36be:	500f      	str	r7, [r1, r0]
    36c0:	480c      	ldr	r0, [pc, #48]	; (36f4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    36c2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    36c6:	9000      	str	r0, [sp, #0]
    36c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36cc:	f240 31f9 	movw	r1, #1017	; 0x3f9
    36d0:	206c      	movs	r0, #108	; 0x6c
    36d2:	f000 fc5d 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36d6:	0000      	.short	0x0000
    36d8:	40008000 	.word	0x40008000
    36dc:	40008140 	.word	0x40008140
    36e0:	2000004a 	.word	0x2000004a
    36e4:	4001f508 	.word	0x4001f508
    36e8:	20000048 	.word	0x20000048
    36ec:	4000b000 	.word	0x4000b000
    36f0:	4000b504 	.word	0x4000b504
    36f4:	4000b140 	.word	0x4000b140

000036f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    36f8:	4825      	ldr	r0, [pc, #148]	; (3790 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    36fa:	4a24      	ldr	r2, [pc, #144]	; (378c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    36fc:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3700:	4924      	ldr	r1, [pc, #144]	; (3794 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3702:	1d03      	adds	r3, r0, #4
    3704:	f891 c000 	ldrb.w	ip, [r1]
    3708:	2100      	movs	r1, #0
    370a:	f1bc 0f00 	cmp.w	ip, #0
    370e:	d010      	beq.n	3732 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3710:	4a21      	ldr	r2, [pc, #132]	; (3798 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3712:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3716:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    371a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    371e:	bf00      	nop
    3720:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3724:	2a00      	cmp	r2, #0
    3726:	bf04      	itt	eq
    3728:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    372c:	2800      	cmpeq	r0, #0
    372e:	d111      	bne.n	3754 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3730:	e00a      	b.n	3748 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3732:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3736:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    373a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    373e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3742:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3746:	e7eb      	b.n	3720 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3748:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    374c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3750:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3754:	4811      	ldr	r0, [pc, #68]	; (379c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    375a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    375e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3762:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3766:	f100 0204 	add.w	r2, r0, #4
    376a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    376e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3772:	f102 0204 	add.w	r2, r2, #4
    3776:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    377a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    377e:	f102 0204 	add.w	r2, r2, #4
    3782:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3786:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    378a:	4770      	bx	lr
    378c:	fffbfffd 	.word	0xfffbfffd
    3790:	4000b000 	.word	0x4000b000
    3794:	2000004a 	.word	0x2000004a
    3798:	fffafffd 	.word	0xfffafffd
    379c:	40008000 	.word	0x40008000

000037a0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    37a0:	b510      	push	{r4, lr}
    37a2:	2807      	cmp	r0, #7
    37a4:	d20d      	bcs.n	37c2 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    37a6:	e8df f000 	tbb	[pc, r0]
    37aa:	0404      	.short	0x0404
    37ac:	06060404 	.word	0x06060404
    37b0:	0006      	.short	0x0006
    37b2:	4906      	ldr	r1, [pc, #24]	; (37cc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    37b4:	e002      	b.n	37bc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    37b6:	1f00      	subs	r0, r0, #4
    37b8:	4905      	ldr	r1, [pc, #20]	; (37d0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    37ba:	b2c0      	uxtb	r0, r0
    37bc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    37c0:	bd10      	pop	{r4, pc}
    37c2:	f240 3199 	movw	r1, #921	; 0x399
    37c6:	206c      	movs	r0, #108	; 0x6c
    37c8:	f000 fbe2 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37cc:	40008140 	.word	0x40008140
    37d0:	4000b140 	.word	0x4000b140

000037d4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    37d4:	b570      	push	{r4, r5, r6, lr}
    37d6:	481f      	ldr	r0, [pc, #124]	; (3854 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    37d8:	2400      	movs	r4, #0
    37da:	2104      	movs	r1, #4
    37dc:	7004      	strb	r4, [r0, #0]
    37de:	1e80      	subs	r0, r0, #2
    37e0:	7001      	strb	r1, [r0, #0]
    37e2:	0589      	lsls	r1, r1, #22
    37e4:	60c4      	str	r4, [r0, #12]
    37e6:	6081      	str	r1, [r0, #8]
    37e8:	f7ff fc82 	bl	30f0 <MPSL_IRQ_TIMER0_Handler+0x100>
    37ec:	2501      	movs	r5, #1
    37ee:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    37f2:	02eb      	lsls	r3, r5, #11
    37f4:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    37f8:	f3bf 8f4f 	dsb	sy
    37fc:	f3bf 8f6f 	isb	sy
    3800:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3804:	4814      	ldr	r0, [pc, #80]	; (3858 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3806:	6045      	str	r5, [r0, #4]
    3808:	6085      	str	r5, [r0, #8]
    380a:	4914      	ldr	r1, [pc, #80]	; (385c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    380c:	680a      	ldr	r2, [r1, #0]
    380e:	2a00      	cmp	r2, #0
    3810:	d1fc      	bne.n	380c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3812:	1e51      	subs	r1, r2, #1
    3814:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3818:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    381c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3820:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3824:	490e      	ldr	r1, [pc, #56]	; (3860 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3826:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    382a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    382e:	1d09      	adds	r1, r1, #4
    3830:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3834:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3838:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    383c:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3840:	6005      	str	r5, [r0, #0]
    3842:	f44f 7182 	mov.w	r1, #260	; 0x104
    3846:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    384a:	2102      	movs	r1, #2
    384c:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3850:	bd70      	pop	{r4, r5, r6, pc}
    3852:	0000      	.short	0x0000
    3854:	2000004a 	.word	0x2000004a
    3858:	4000b000 	.word	0x4000b000
    385c:	4000b504 	.word	0x4000b504
    3860:	4000b004 	.word	0x4000b004

00003864 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3864:	4808      	ldr	r0, [pc, #32]	; (3888 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    3866:	f990 0000 	ldrsb.w	r0, [r0]
    386a:	2800      	cmp	r0, #0
    386c:	bfb8      	it	lt
    386e:	4770      	bxlt	lr
    3870:	f000 011f 	and.w	r1, r0, #31
    3874:	2201      	movs	r2, #1
    3876:	fa02 f101 	lsl.w	r1, r2, r1
    387a:	0940      	lsrs	r0, r0, #5
    387c:	0080      	lsls	r0, r0, #2
    387e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3882:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3886:	4770      	bx	lr
    3888:	20000354 	.word	0x20000354

0000388c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    388c:	4803      	ldr	r0, [pc, #12]	; (389c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    388e:	7800      	ldrb	r0, [r0, #0]
    3890:	2803      	cmp	r0, #3
    3892:	bf0c      	ite	eq
    3894:	2001      	moveq	r0, #1
    3896:	2000      	movne	r0, #0
    3898:	4770      	bx	lr
    389a:	0000      	.short	0x0000
    389c:	20000340 	.word	0x20000340

000038a0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    38a0:	4801      	ldr	r0, [pc, #4]	; (38a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    38a2:	8840      	ldrh	r0, [r0, #2]
    38a4:	4770      	bx	lr
    38a6:	0000      	.short	0x0000
    38a8:	20000340 	.word	0x20000340

000038ac <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    38ac:	4803      	ldr	r0, [pc, #12]	; (38bc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    38ae:	7800      	ldrb	r0, [r0, #0]
    38b0:	2802      	cmp	r0, #2
    38b2:	bf16      	itet	ne
    38b4:	2803      	cmpne	r0, #3
    38b6:	2001      	moveq	r0, #1
    38b8:	2000      	movne	r0, #0
    38ba:	4770      	bx	lr
    38bc:	20000340 	.word	0x20000340

000038c0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    38c0:	4802      	ldr	r0, [pc, #8]	; (38cc <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    38c2:	2100      	movs	r1, #0
    38c4:	7001      	strb	r1, [r0, #0]
    38c6:	8041      	strh	r1, [r0, #2]
    38c8:	4770      	bx	lr
    38ca:	0000      	.short	0x0000
    38cc:	20000340 	.word	0x20000340

000038d0 <MPSL_IRQ_CLOCK_Handler>:
    38d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38d4:	4c16      	ldr	r4, [pc, #88]	; (3930 <MPSL_IRQ_CLOCK_Handler+0x60>)
    38d6:	7a60      	ldrb	r0, [r4, #9]
    38d8:	2800      	cmp	r0, #0
    38da:	d027      	beq.n	392c <MPSL_IRQ_CLOCK_Handler+0x5c>
    38dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    38e0:	058d      	lsls	r5, r1, #22
    38e2:	4628      	mov	r0, r5
    38e4:	f008 fcbe 	bl	c264 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    38e8:	4680      	mov	r8, r0
    38ea:	f44f 7182 	mov.w	r1, #260	; 0x104
    38ee:	4628      	mov	r0, r5
    38f0:	f008 fcb8 	bl	c264 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    38f4:	2600      	movs	r6, #0
    38f6:	4607      	mov	r7, r0
    38f8:	f1b8 0f00 	cmp.w	r8, #0
    38fc:	d009      	beq.n	3912 <MPSL_IRQ_CLOCK_Handler+0x42>
    38fe:	2001      	movs	r0, #1
    3900:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3904:	7920      	ldrb	r0, [r4, #4]
    3906:	b120      	cbz	r0, 3912 <MPSL_IRQ_CLOCK_Handler+0x42>
    3908:	7126      	strb	r6, [r4, #4]
    390a:	69e0      	ldr	r0, [r4, #28]
    390c:	b108      	cbz	r0, 3912 <MPSL_IRQ_CLOCK_Handler+0x42>
    390e:	4780      	blx	r0
    3910:	61e6      	str	r6, [r4, #28]
    3912:	b137      	cbz	r7, 3922 <MPSL_IRQ_CLOCK_Handler+0x52>
    3914:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3918:	2002      	movs	r0, #2
    391a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    391e:	f000 fa6b 	bl	3df8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3922:	4640      	mov	r0, r8
    3924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3928:	f000 b858 	b.w	39dc <MPSL_IRQ_CLOCK_Handler+0x10c>
    392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3930:	20000058 	.word	0x20000058
    3934:	b510      	push	{r4, lr}
    3936:	f008 fd3f 	bl	c3b8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    393a:	b930      	cbnz	r0, 394a <MPSL_IRQ_CLOCK_Handler+0x7a>
    393c:	f008 fd5d 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3940:	b918      	cbnz	r0, 394a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3942:	f008 fd90 	bl	c466 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3946:	2800      	cmp	r0, #0
    3948:	d002      	beq.n	3950 <MPSL_IRQ_CLOCK_Handler+0x80>
    394a:	4902      	ldr	r1, [pc, #8]	; (3954 <MPSL_IRQ_CLOCK_Handler+0x84>)
    394c:	2002      	movs	r0, #2
    394e:	6008      	str	r0, [r1, #0]
    3950:	bd10      	pop	{r4, pc}
    3952:	0000      	.short	0x0000
    3954:	40000c34 	.word	0x40000c34
    3958:	b570      	push	{r4, r5, r6, lr}
    395a:	f000 f991 	bl	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    395e:	f000 fa9f 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3962:	4c09      	ldr	r4, [pc, #36]	; (3988 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3964:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3968:	b130      	cbz	r0, 3978 <MPSL_IRQ_CLOCK_Handler+0xa8>
    396a:	f7ff ffe3 	bl	3934 <MPSL_IRQ_CLOCK_Handler+0x64>
    396e:	2001      	movs	r0, #1
    3970:	6128      	str	r0, [r5, #16]
    3972:	2004      	movs	r0, #4
    3974:	72a0      	strb	r0, [r4, #10]
    3976:	e004      	b.n	3982 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3978:	2003      	movs	r0, #3
    397a:	72a0      	strb	r0, [r4, #10]
    397c:	2001      	movs	r0, #1
    397e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3982:	2000      	movs	r0, #0
    3984:	71e0      	strb	r0, [r4, #7]
    3986:	bd70      	pop	{r4, r5, r6, pc}
    3988:	20000058 	.word	0x20000058
    398c:	b570      	push	{r4, r5, r6, lr}
    398e:	4c12      	ldr	r4, [pc, #72]	; (39d8 <MPSL_IRQ_CLOCK_Handler+0x108>)
    3990:	79a0      	ldrb	r0, [r4, #6]
    3992:	b1e0      	cbz	r0, 39ce <MPSL_IRQ_CLOCK_Handler+0xfe>
    3994:	79e1      	ldrb	r1, [r4, #7]
    3996:	1e40      	subs	r0, r0, #1
    3998:	4281      	cmp	r1, r0
    399a:	da18      	bge.n	39ce <MPSL_IRQ_CLOCK_Handler+0xfe>
    399c:	f000 fa80 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    39a0:	4605      	mov	r5, r0
    39a2:	f000 fb69 	bl	4078 <mpsl_temperature_get>
    39a6:	79a1      	ldrb	r1, [r4, #6]
    39a8:	2901      	cmp	r1, #1
    39aa:	d902      	bls.n	39b2 <MPSL_IRQ_CLOCK_Handler+0xe2>
    39ac:	79e1      	ldrb	r1, [r4, #7]
    39ae:	1c49      	adds	r1, r1, #1
    39b0:	71e1      	strb	r1, [r4, #7]
    39b2:	b10d      	cbz	r5, 39b8 <MPSL_IRQ_CLOCK_Handler+0xe8>
    39b4:	6961      	ldr	r1, [r4, #20]
    39b6:	e000      	b.n	39ba <MPSL_IRQ_CLOCK_Handler+0xea>
    39b8:	6921      	ldr	r1, [r4, #16]
    39ba:	1a41      	subs	r1, r0, r1
    39bc:	2902      	cmp	r1, #2
    39be:	da02      	bge.n	39c6 <MPSL_IRQ_CLOCK_Handler+0xf6>
    39c0:	f111 0f02 	cmn.w	r1, #2
    39c4:	dc07      	bgt.n	39d6 <MPSL_IRQ_CLOCK_Handler+0x106>
    39c6:	b10d      	cbz	r5, 39cc <MPSL_IRQ_CLOCK_Handler+0xfc>
    39c8:	6160      	str	r0, [r4, #20]
    39ca:	e000      	b.n	39ce <MPSL_IRQ_CLOCK_Handler+0xfe>
    39cc:	6120      	str	r0, [r4, #16]
    39ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39d2:	f7ff bfc1 	b.w	3958 <MPSL_IRQ_CLOCK_Handler+0x88>
    39d6:	bd70      	pop	{r4, r5, r6, pc}
    39d8:	20000058 	.word	0x20000058
    39dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39e0:	4606      	mov	r6, r0
    39e2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    39e6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    39ea:	4628      	mov	r0, r5
    39ec:	f008 fc3a 	bl	c264 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    39f0:	4680      	mov	r8, r0
    39f2:	f44f 7188 	mov.w	r1, #272	; 0x110
    39f6:	4628      	mov	r0, r5
    39f8:	f008 fc34 	bl	c264 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    39fc:	4c27      	ldr	r4, [pc, #156]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    39fe:	4682      	mov	sl, r0
    3a00:	7827      	ldrb	r7, [r4, #0]
    3a02:	f104 0008 	add.w	r0, r4, #8
    3a06:	f008 fca1 	bl	c34c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3a0a:	b110      	cbz	r0, 3a12 <MPSL_IRQ_CLOCK_Handler+0x142>
    3a0c:	f240 11b9 	movw	r1, #441	; 0x1b9
    3a10:	e016      	b.n	3a40 <MPSL_IRQ_CLOCK_Handler+0x170>
    3a12:	f04f 0901 	mov.w	r9, #1
    3a16:	b146      	cbz	r6, 3a2a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3a18:	7aa0      	ldrb	r0, [r4, #10]
    3a1a:	2803      	cmp	r0, #3
    3a1c:	d105      	bne.n	3a2a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3a1e:	2004      	movs	r0, #4
    3a20:	72a0      	strb	r0, [r4, #10]
    3a22:	f7ff ff87 	bl	3934 <MPSL_IRQ_CLOCK_Handler+0x64>
    3a26:	f8c5 9010 	str.w	r9, [r5, #16]
    3a2a:	2600      	movs	r6, #0
    3a2c:	f1b8 0f00 	cmp.w	r8, #0
    3a30:	d018      	beq.n	3a64 <MPSL_IRQ_CLOCK_Handler+0x194>
    3a32:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3a36:	7aa0      	ldrb	r0, [r4, #10]
    3a38:	2804      	cmp	r0, #4
    3a3a:	d004      	beq.n	3a46 <MPSL_IRQ_CLOCK_Handler+0x176>
    3a3c:	f240 11cb 	movw	r1, #459	; 0x1cb
    3a40:	206d      	movs	r0, #109	; 0x6d
    3a42:	f000 faa5 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a46:	f008 fcb7 	bl	c3b8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3a4a:	b928      	cbnz	r0, 3a58 <MPSL_IRQ_CLOCK_Handler+0x188>
    3a4c:	f008 fcd5 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a50:	b910      	cbnz	r0, 3a58 <MPSL_IRQ_CLOCK_Handler+0x188>
    3a52:	f008 fd08 	bl	c466 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3a56:	b108      	cbz	r0, 3a5c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a58:	4811      	ldr	r0, [pc, #68]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a5a:	6006      	str	r6, [r0, #0]
    3a5c:	2002      	movs	r0, #2
    3a5e:	72a0      	strb	r0, [r4, #10]
    3a60:	f000 f8f2 	bl	3c48 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a64:	f1ba 0f00 	cmp.w	sl, #0
    3a68:	d008      	beq.n	3a7c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3a6a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3a6e:	7aa0      	ldrb	r0, [r4, #10]
    3a70:	2802      	cmp	r0, #2
    3a72:	d101      	bne.n	3a78 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    3a74:	f7ff ff8a 	bl	398c <MPSL_IRQ_CLOCK_Handler+0xbc>
    3a78:	f8c5 9014 	str.w	r9, [r5, #20]
    3a7c:	b13f      	cbz	r7, 3a8e <MPSL_IRQ_CLOCK_Handler+0x1be>
    3a7e:	7026      	strb	r6, [r4, #0]
    3a80:	7aa0      	ldrb	r0, [r4, #10]
    3a82:	2802      	cmp	r0, #2
    3a84:	d101      	bne.n	3a8a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    3a86:	f7ff ff67 	bl	3958 <MPSL_IRQ_CLOCK_Handler+0x88>
    3a8a:	f000 f8dd 	bl	3c48 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a92:	4802      	ldr	r0, [pc, #8]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a94:	3008      	adds	r0, #8
    3a96:	f008 bc70 	b.w	c37a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3a9a:	0000      	.short	0x0000
    3a9c:	20000058 	.word	0x20000058
    3aa0:	40000c34 	.word	0x40000c34
    3aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3aa8:	4c5f      	ldr	r4, [pc, #380]	; (3c28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x190>)
    3aaa:	2700      	movs	r7, #0
    3aac:	4606      	mov	r6, r0
    3aae:	61a7      	str	r7, [r4, #24]
    3ab0:	7842      	ldrb	r2, [r0, #1]
    3ab2:	7881      	ldrb	r1, [r0, #2]
    3ab4:	7800      	ldrb	r0, [r0, #0]
    3ab6:	72e0      	strb	r0, [r4, #11]
    3ab8:	7162      	strb	r2, [r4, #5]
    3aba:	71a1      	strb	r1, [r4, #6]
    3abc:	71e7      	strb	r7, [r4, #7]
    3abe:	f04f 0801 	mov.w	r8, #1
    3ac2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3ac6:	2805      	cmp	r0, #5
    3ac8:	d225      	bcs.n	3b16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7e>
    3aca:	e8df f000 	tbb	[pc, r0]
    3ace:	0310      	.short	0x0310
    3ad0:	00222006 	.word	0x00222006
    3ad4:	f8c4 8018 	str.w	r8, [r4, #24]
    3ad8:	e009      	b.n	3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
    3ada:	f000 f8d1 	bl	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3ade:	2101      	movs	r1, #1
    3ae0:	4628      	mov	r0, r5
    3ae2:	f008 fbc4 	bl	c26e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d0f9      	beq.n	3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    3aea:	2002      	movs	r0, #2
    3aec:	61a0      	str	r0, [r4, #24]
    3aee:	f008 fbea 	bl	c2c6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3af2:	b1b0      	cbz	r0, 3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3af4:	f000 f9ee 	bl	3ed4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3af8:	7e21      	ldrb	r1, [r4, #24]
    3afa:	f001 0103 	and.w	r1, r1, #3
    3afe:	4288      	cmp	r0, r1
    3b00:	d10f      	bne.n	3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3b02:	79b0      	ldrb	r0, [r6, #6]
    3b04:	b150      	cbz	r0, 3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
    3b06:	2002      	movs	r0, #2
    3b08:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b0c:	e070      	b.n	3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>
    3b0e:	4847      	ldr	r0, [pc, #284]	; (3c2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x194>)
    3b10:	e7ec      	b.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3b12:	4847      	ldr	r0, [pc, #284]	; (3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>)
    3b14:	e7ea      	b.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3b16:	f240 313a 	movw	r1, #826	; 0x33a
    3b1a:	e04d      	b.n	3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>
    3b1c:	f000 f9ae 	bl	3e7c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3b20:	e066      	b.n	3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>
    3b22:	f8c5 800c 	str.w	r8, [r5, #12]
    3b26:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3b2a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3b2e:	69a0      	ldr	r0, [r4, #24]
    3b30:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3b34:	f008 fc2c 	bl	c390 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b38:	b940      	cbnz	r0, 3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
    3b3a:	f008 fc33 	bl	c3a4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b3e:	b928      	cbnz	r0, 3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
    3b40:	f008 fc47 	bl	c3d2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b44:	b910      	cbnz	r0, 3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
    3b46:	f008 fc58 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b4a:	b138      	cbz	r0, 3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>
    3b4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3b50:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    3b54:	4937      	ldr	r1, [pc, #220]	; (3c34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19c>)
    3b56:	f3c0 3042 	ubfx	r0, r0, #13, #3
    3b5a:	6008      	str	r0, [r1, #0]
    3b5c:	f008 fc18 	bl	c390 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b60:	b940      	cbnz	r0, 3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
    3b62:	f008 fc1f 	bl	c3a4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b66:	b928      	cbnz	r0, 3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
    3b68:	f008 fc33 	bl	c3d2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b6c:	b910      	cbnz	r0, 3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
    3b6e:	f008 fc44 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b72:	b118      	cbz	r0, 3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>
    3b74:	492f      	ldr	r1, [pc, #188]	; (3c34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19c>)
    3b76:	3110      	adds	r1, #16
    3b78:	f8c1 8000 	str.w	r8, [r1]
    3b7c:	f8c5 8008 	str.w	r8, [r5, #8]
    3b80:	2002      	movs	r0, #2
    3b82:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b86:	79b0      	ldrb	r0, [r6, #6]
    3b88:	bb90      	cbnz	r0, 3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>
    3b8a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3b8e:	f010 0f02 	tst.w	r0, #2
    3b92:	d00f      	beq.n	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
    3b94:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3c38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a0>
    3b98:	f8d9 1000 	ldr.w	r1, [r9]
    3b9c:	43c9      	mvns	r1, r1
    3b9e:	f341 1100 	sbfx	r1, r1, #4, #1
    3ba2:	f101 0801 	add.w	r8, r1, #1
    3ba6:	f8d9 1000 	ldr.w	r1, [r9]
    3baa:	f041 0110 	orr.w	r1, r1, #16
    3bae:	f8c9 1000 	str.w	r1, [r9]
    3bb2:	e007      	b.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
    3bb4:	f240 21fb 	movw	r1, #763	; 0x2fb
    3bb8:	206d      	movs	r0, #109	; 0x6d
    3bba:	f000 f9e9 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bbe:	bf00      	nop
    3bc0:	f000 fb20 	bl	4204 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3bc4:	4651      	mov	r1, sl
    3bc6:	4628      	mov	r0, r5
    3bc8:	f008 fb4c 	bl	c264 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3bcc:	2800      	cmp	r0, #0
    3bce:	d0f7      	beq.n	3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>
    3bd0:	f000 f954 	bl	3e7c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3bd4:	f1b8 0f00 	cmp.w	r8, #0
    3bd8:	d105      	bne.n	3be6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14e>
    3bda:	f8d9 1000 	ldr.w	r1, [r9]
    3bde:	f021 0110 	bic.w	r1, r1, #16
    3be2:	f8c9 1000 	str.w	r1, [r9]
    3be6:	2002      	movs	r0, #2
    3be8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3bec:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3bf0:	79a0      	ldrb	r0, [r4, #6]
    3bf2:	b170      	cbz	r0, 3c12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17a>
    3bf4:	7830      	ldrb	r0, [r6, #0]
    3bf6:	b960      	cbnz	r0, 3c12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17a>
    3bf8:	f000 f952 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3bfc:	4606      	mov	r6, r0
    3bfe:	f000 fa3b 	bl	4078 <mpsl_temperature_get>
    3c02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3c06:	b116      	cbz	r6, 3c0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x176>
    3c08:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3c0c:	e001      	b.n	3c12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17a>
    3c0e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3c12:	2101      	movs	r1, #1
    3c14:	4628      	mov	r0, r5
    3c16:	f008 fb2a 	bl	c26e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c1a:	b108      	cbz	r0, 3c20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x188>
    3c1c:	f000 f93a 	bl	3e94 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c20:	72a7      	strb	r7, [r4, #10]
    3c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c26:	0000      	.short	0x0000
    3c28:	20000058 	.word	0x20000058
    3c2c:	00020001 	.word	0x00020001
    3c30:	00030001 	.word	0x00030001
    3c34:	4000053c 	.word	0x4000053c
    3c38:	e000ed10 	.word	0xe000ed10

00003c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3c3c:	4801      	ldr	r0, [pc, #4]	; (3c44 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3c3e:	89c0      	ldrh	r0, [r0, #14]
    3c40:	4770      	bx	lr
    3c42:	0000      	.short	0x0000
    3c44:	20000058 	.word	0x20000058

00003c48 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3c48:	b510      	push	{r4, lr}
    3c4a:	f3ef 8410 	mrs	r4, PRIMASK
    3c4e:	b672      	cpsid	i
    3c50:	480a      	ldr	r0, [pc, #40]	; (3c7c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3c52:	7841      	ldrb	r1, [r0, #1]
    3c54:	b129      	cbz	r1, 3c62 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3c56:	7841      	ldrb	r1, [r0, #1]
    3c58:	1e49      	subs	r1, r1, #1
    3c5a:	7041      	strb	r1, [r0, #1]
    3c5c:	7841      	ldrb	r1, [r0, #1]
    3c5e:	b129      	cbz	r1, 3c6c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3c60:	e008      	b.n	3c74 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c62:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3c66:	206d      	movs	r0, #109	; 0x6d
    3c68:	f000 f992 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c6c:	7880      	ldrb	r0, [r0, #2]
    3c6e:	b908      	cbnz	r0, 3c74 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c70:	f000 f924 	bl	3ebc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3c74:	2c00      	cmp	r4, #0
    3c76:	d100      	bne.n	3c7a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3c78:	b662      	cpsie	i
    3c7a:	bd10      	pop	{r4, pc}
    3c7c:	20000058 	.word	0x20000058

00003c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3c80:	b510      	push	{r4, lr}
    3c82:	f3ef 8410 	mrs	r4, PRIMASK
    3c86:	b672      	cpsid	i
    3c88:	4806      	ldr	r0, [pc, #24]	; (3ca4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3c8a:	7841      	ldrb	r1, [r0, #1]
    3c8c:	1c49      	adds	r1, r1, #1
    3c8e:	7041      	strb	r1, [r0, #1]
    3c90:	7840      	ldrb	r0, [r0, #1]
    3c92:	2801      	cmp	r0, #1
    3c94:	d101      	bne.n	3c9a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3c96:	f008 fb01 	bl	c29c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3c9a:	2c00      	cmp	r4, #0
    3c9c:	d100      	bne.n	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3c9e:	b662      	cpsie	i
    3ca0:	bd10      	pop	{r4, pc}
    3ca2:	0000      	.short	0x0000
    3ca4:	20000058 	.word	0x20000058

00003ca8 <mpsl_clock_hfclk_release>:
    3ca8:	4805      	ldr	r0, [pc, #20]	; (3cc0 <mpsl_clock_hfclk_release+0x18>)
    3caa:	b510      	push	{r4, lr}
    3cac:	78c1      	ldrb	r1, [r0, #3]
    3cae:	b121      	cbz	r1, 3cba <mpsl_clock_hfclk_release+0x12>
    3cb0:	2100      	movs	r1, #0
    3cb2:	7101      	strb	r1, [r0, #4]
    3cb4:	70c1      	strb	r1, [r0, #3]
    3cb6:	f7ff ffc7 	bl	3c48 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3cba:	2000      	movs	r0, #0
    3cbc:	bd10      	pop	{r4, pc}
    3cbe:	0000      	.short	0x0000
    3cc0:	20000058 	.word	0x20000058

00003cc4 <mpsl_clock_hfclk_request>:
    3cc4:	b570      	push	{r4, r5, r6, lr}
    3cc6:	4c0c      	ldr	r4, [pc, #48]	; (3cf8 <mpsl_clock_hfclk_request+0x34>)
    3cc8:	78e1      	ldrb	r1, [r4, #3]
    3cca:	b961      	cbnz	r1, 3ce6 <mpsl_clock_hfclk_request+0x22>
    3ccc:	2501      	movs	r5, #1
    3cce:	70e5      	strb	r5, [r4, #3]
    3cd0:	61e0      	str	r0, [r4, #28]
    3cd2:	f7ff ffd5 	bl	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3cd6:	f000 f8e3 	bl	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3cda:	b130      	cbz	r0, 3cea <mpsl_clock_hfclk_request+0x26>
    3cdc:	69e0      	ldr	r0, [r4, #28]
    3cde:	b110      	cbz	r0, 3ce6 <mpsl_clock_hfclk_request+0x22>
    3ce0:	4780      	blx	r0
    3ce2:	2000      	movs	r0, #0
    3ce4:	61e0      	str	r0, [r4, #28]
    3ce6:	2000      	movs	r0, #0
    3ce8:	bd70      	pop	{r4, r5, r6, pc}
    3cea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3cee:	7125      	strb	r5, [r4, #4]
    3cf0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3cf4:	e7f7      	b.n	3ce6 <mpsl_clock_hfclk_request+0x22>
    3cf6:	0000      	.short	0x0000
    3cf8:	20000058 	.word	0x20000058

00003cfc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d00:	0005      	movs	r5, r0
    3d02:	f06f 0015 	mvn.w	r0, #21
    3d06:	d03f      	beq.n	3d88 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d08:	7829      	ldrb	r1, [r5, #0]
    3d0a:	2904      	cmp	r1, #4
    3d0c:	d83c      	bhi.n	3d88 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d0e:	2900      	cmp	r1, #0
    3d10:	7869      	ldrb	r1, [r5, #1]
    3d12:	d03b      	beq.n	3d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3d14:	2900      	cmp	r1, #0
    3d16:	d137      	bne.n	3d88 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d18:	78a9      	ldrb	r1, [r5, #2]
    3d1a:	2900      	cmp	r1, #0
    3d1c:	d134      	bne.n	3d88 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d1e:	2000      	movs	r0, #0
    3d20:	f008 fa6b 	bl	c1fa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    3d24:	2000      	movs	r0, #0
    3d26:	f008 fa5b 	bl	c1e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3d2a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3d2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3d32:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3d36:	2600      	movs	r6, #0
    3d38:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3d3c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3d40:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3d44:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3d48:	4c14      	ldr	r4, [pc, #80]	; (3d9c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3d4a:	7066      	strb	r6, [r4, #1]
    3d4c:	88a8      	ldrh	r0, [r5, #4]
    3d4e:	81a0      	strh	r0, [r4, #12]
    3d50:	f008 fa9b 	bl	c28a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3d54:	2701      	movs	r7, #1
    3d56:	b108      	cbz	r0, 3d5c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3d58:	70e7      	strb	r7, [r4, #3]
    3d5a:	7067      	strb	r7, [r4, #1]
    3d5c:	2101      	movs	r1, #1
    3d5e:	4640      	mov	r0, r8
    3d60:	f008 fa85 	bl	c26e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3d64:	b108      	cbz	r0, 3d6a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3d66:	f000 f895 	bl	3e94 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3d6a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3d6e:	81e0      	strh	r0, [r4, #14]
    3d70:	4628      	mov	r0, r5
    3d72:	f7ff fe97 	bl	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3d76:	7267      	strb	r7, [r4, #9]
    3d78:	2000      	movs	r0, #0
    3d7a:	f008 fa31 	bl	c1e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3d7e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3d82:	4630      	mov	r0, r6
    3d84:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d8c:	2900      	cmp	r1, #0
    3d8e:	d0fb      	beq.n	3d88 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d90:	2920      	cmp	r1, #32
    3d92:	d8f9      	bhi.n	3d88 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d94:	78a9      	ldrb	r1, [r5, #2]
    3d96:	2921      	cmp	r1, #33	; 0x21
    3d98:	d9c1      	bls.n	3d1e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3d9a:	e7f5      	b.n	3d88 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d9c:	20000058 	.word	0x20000058

00003da0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3da0:	4801      	ldr	r0, [pc, #4]	; (3da8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3da2:	8980      	ldrh	r0, [r0, #12]
    3da4:	4770      	bx	lr
    3da6:	0000      	.short	0x0000
    3da8:	20000058 	.word	0x20000058

00003dac <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3dac:	b510      	push	{r4, lr}
    3dae:	480d      	ldr	r0, [pc, #52]	; (3de4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3db0:	f008 facc 	bl	c34c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3db4:	490b      	ldr	r1, [pc, #44]	; (3de4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3db6:	3908      	subs	r1, #8
    3db8:	b148      	cbz	r0, 3dce <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    3dba:	2001      	movs	r0, #1
    3dbc:	7008      	strb	r0, [r1, #0]
    3dbe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3dc2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3dca:	f7ff bf59 	b.w	3c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3dce:	7a88      	ldrb	r0, [r1, #10]
    3dd0:	2802      	cmp	r0, #2
    3dd2:	d101      	bne.n	3dd8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3dd4:	f7ff fdc0 	bl	3958 <MPSL_IRQ_CLOCK_Handler+0x88>
    3dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ddc:	4801      	ldr	r0, [pc, #4]	; (3de4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3dde:	f008 bacc 	b.w	c37a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3de2:	0000      	.short	0x0000
    3de4:	20000060 	.word	0x20000060

00003de8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3de8:	4802      	ldr	r0, [pc, #8]	; (3df4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3dea:	7a80      	ldrb	r0, [r0, #10]
    3dec:	2800      	cmp	r0, #0
    3dee:	d000      	beq.n	3df2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3df0:	2001      	movs	r0, #1
    3df2:	4770      	bx	lr
    3df4:	20000058 	.word	0x20000058

00003df8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dfa:	4d1f      	ldr	r5, [pc, #124]	; (3e78 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3dfc:	7ae8      	ldrb	r0, [r5, #11]
    3dfe:	2800      	cmp	r0, #0
    3e00:	d10f      	bne.n	3e22 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e02:	7e28      	ldrb	r0, [r5, #24]
    3e04:	f000 0003 	and.w	r0, r0, #3
    3e08:	f008 fa4d 	bl	c2a6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d008      	beq.n	3e22 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e10:	f3ef 8110 	mrs	r1, PRIMASK
    3e14:	b672      	cpsid	i
    3e16:	f7ff ffe7 	bl	3de8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3e1a:	b118      	cbz	r0, 3e24 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3e1c:	2900      	cmp	r1, #0
    3e1e:	d100      	bne.n	3e22 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e20:	b662      	cpsie	i
    3e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e24:	2601      	movs	r6, #1
    3e26:	72ae      	strb	r6, [r5, #10]
    3e28:	b901      	cbnz	r1, 3e2c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3e2a:	b662      	cpsie	i
    3e2c:	2018      	movs	r0, #24
    3e2e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3e32:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3e36:	61a6      	str	r6, [r4, #24]
    3e38:	f44f 7020 	mov.w	r0, #640	; 0x280
    3e3c:	f8ad 0000 	strh.w	r0, [sp]
    3e40:	f8bd 0000 	ldrh.w	r0, [sp]
    3e44:	1e41      	subs	r1, r0, #1
    3e46:	f8ad 1000 	strh.w	r1, [sp]
    3e4a:	d2f9      	bcs.n	3e40 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3e4c:	2700      	movs	r7, #0
    3e4e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3e52:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3e56:	4808      	ldr	r0, [pc, #32]	; (3e78 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e58:	3008      	adds	r0, #8
    3e5a:	f008 fa8a 	bl	c372 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3e5e:	702f      	strb	r7, [r5, #0]
    3e60:	f7ff fd7a 	bl	3958 <MPSL_IRQ_CLOCK_Handler+0x88>
    3e64:	6166      	str	r6, [r4, #20]
    3e66:	7968      	ldrb	r0, [r5, #5]
    3e68:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3e6c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3e70:	2018      	movs	r0, #24
    3e72:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e78:	20000058 	.word	0x20000058

00003e7c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3e7c:	b510      	push	{r4, lr}
    3e7e:	4c04      	ldr	r4, [pc, #16]	; (3e90 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3e80:	7e20      	ldrb	r0, [r4, #24]
    3e82:	f000 0003 	and.w	r0, r0, #3
    3e86:	f008 fa0e 	bl	c2a6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e8a:	2800      	cmp	r0, #0
    3e8c:	d0f8      	beq.n	3e80 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3e8e:	bd10      	pop	{r4, pc}
    3e90:	20000058 	.word	0x20000058

00003e94 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3e94:	4901      	ldr	r1, [pc, #4]	; (3e9c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3e96:	2001      	movs	r0, #1
    3e98:	7008      	strb	r0, [r1, #0]
    3e9a:	4770      	bx	lr
    3e9c:	20000355 	.word	0x20000355

00003ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3ea0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3ea4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3ea8:	b918      	cbnz	r0, 3eb2 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3eaa:	4803      	ldr	r0, [pc, #12]	; (3eb8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3eac:	7800      	ldrb	r0, [r0, #0]
    3eae:	2800      	cmp	r0, #0
    3eb0:	d000      	beq.n	3eb4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3eb2:	2001      	movs	r0, #1
    3eb4:	4770      	bx	lr
    3eb6:	0000      	.short	0x0000
    3eb8:	20000355 	.word	0x20000355

00003ebc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3ebc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3ec0:	2101      	movs	r1, #1
    3ec2:	6041      	str	r1, [r0, #4]
    3ec4:	2100      	movs	r1, #0
    3ec6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3eca:	4801      	ldr	r0, [pc, #4]	; (3ed0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3ecc:	7001      	strb	r1, [r0, #0]
    3ece:	4770      	bx	lr
    3ed0:	20000355 	.word	0x20000355

00003ed4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3ed4:	4802      	ldr	r0, [pc, #8]	; (3ee0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3ed6:	6800      	ldr	r0, [r0, #0]
    3ed8:	f000 0003 	and.w	r0, r0, #3
    3edc:	4770      	bx	lr
    3ede:	0000      	.short	0x0000
    3ee0:	4000041c 	.word	0x4000041c
    3ee4:	b510      	push	{r4, lr}
    3ee6:	b131      	cbz	r1, 3ef6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3ee8:	2901      	cmp	r1, #1
    3eea:	d007      	beq.n	3efc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3eec:	f240 3102 	movw	r1, #770	; 0x302
    3ef0:	a005      	add	r0, pc, #20	; (adr r0, 3f08 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3ef2:	f000 f821 	bl	3f38 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3ef6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3efa:	e001      	b.n	3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3efc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3f00:	f000 0001 	and.w	r0, r0, #1
    3f04:	bd10      	pop	{r4, pc}
    3f06:	0000      	.short	0x0000
    3f08:	5f66726e 	.word	0x5f66726e
    3f0c:	636f6c63 	.word	0x636f6c63
    3f10:	00682e6b 	.word	0x00682e6b
    3f14:	f3bf 8f4f 	dsb	sy
    3f18:	4805      	ldr	r0, [pc, #20]	; (3f30 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3f1a:	6801      	ldr	r1, [r0, #0]
    3f1c:	4a05      	ldr	r2, [pc, #20]	; (3f34 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3f1e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f22:	4311      	orrs	r1, r2
    3f24:	6001      	str	r1, [r0, #0]
    3f26:	f3bf 8f4f 	dsb	sy
    3f2a:	bf00      	nop
    3f2c:	e7fd      	b.n	3f2a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3f2e:	0000      	.short	0x0000
    3f30:	e000ed0c 	.word	0xe000ed0c
    3f34:	05fa0004 	.word	0x05fa0004

00003f38 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3f38:	b672      	cpsid	i
    3f3a:	4a03      	ldr	r2, [pc, #12]	; (3f48 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3f3c:	6852      	ldr	r2, [r2, #4]
    3f3e:	b102      	cbz	r2, 3f42 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3f40:	4790      	blx	r2
    3f42:	f7ff ffe7 	bl	3f14 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3f46:	0000      	.short	0x0000
    3f48:	20000078 	.word	0x20000078
    3f4c:	4806      	ldr	r0, [pc, #24]	; (3f68 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3f4e:	b510      	push	{r4, lr}
    3f50:	2100      	movs	r1, #0
    3f52:	6001      	str	r1, [r0, #0]
    3f54:	2101      	movs	r1, #1
    3f56:	6001      	str	r1, [r0, #0]
    3f58:	4608      	mov	r0, r1
    3f5a:	f008 f9cb 	bl	c2f4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f62:	2001      	movs	r0, #1
    3f64:	f008 b9b9 	b.w	c2da <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f68:	40001ffc 	.word	0x40001ffc
    3f6c:	4807      	ldr	r0, [pc, #28]	; (3f8c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3f6e:	b510      	push	{r4, lr}
    3f70:	2101      	movs	r1, #1
    3f72:	6041      	str	r1, [r0, #4]
    3f74:	1e89      	subs	r1, r1, #2
    3f76:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3f7a:	200c      	movs	r0, #12
    3f7c:	f008 f9ba 	bl	c2f4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f84:	200c      	movs	r0, #12
    3f86:	f008 b9a8 	b.w	c2da <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f8a:	0000      	.short	0x0000
    3f8c:	4000c000 	.word	0x4000c000

00003f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3f90:	b50e      	push	{r1, r2, r3, lr}
    3f92:	b672      	cpsid	i
    3f94:	4a0f      	ldr	r2, [pc, #60]	; (3fd4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3f96:	6855      	ldr	r5, [r2, #4]
    3f98:	b1d5      	cbz	r5, 3fd0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3f9a:	2200      	movs	r2, #0
    3f9c:	4603      	mov	r3, r0
    3f9e:	466e      	mov	r6, sp
    3fa0:	240a      	movs	r4, #10
    3fa2:	e003      	b.n	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3fa4:	fbb0 f0f4 	udiv	r0, r0, r4
    3fa8:	1c52      	adds	r2, r2, #1
    3faa:	b2d2      	uxtb	r2, r2
    3fac:	2800      	cmp	r0, #0
    3fae:	d1f9      	bne.n	3fa4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3fb0:	54b0      	strb	r0, [r6, r2]
    3fb2:	e009      	b.n	3fc8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3fb4:	fbb3 f0f4 	udiv	r0, r3, r4
    3fb8:	fb04 3010 	mls	r0, r4, r0, r3
    3fbc:	fbb3 f3f4 	udiv	r3, r3, r4
    3fc0:	1e52      	subs	r2, r2, #1
    3fc2:	b2d2      	uxtb	r2, r2
    3fc4:	3030      	adds	r0, #48	; 0x30
    3fc6:	54b0      	strb	r0, [r6, r2]
    3fc8:	2a00      	cmp	r2, #0
    3fca:	d1f3      	bne.n	3fb4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3fcc:	4630      	mov	r0, r6
    3fce:	47a8      	blx	r5
    3fd0:	f7ff ffa0 	bl	3f14 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3fd4:	20000078 	.word	0x20000078

00003fd8 <mpsl_init>:
    3fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fdc:	4c18      	ldr	r4, [pc, #96]	; (4040 <mpsl_init+0x68>)
    3fde:	4606      	mov	r6, r0
    3fe0:	4617      	mov	r7, r2
    3fe2:	7860      	ldrb	r0, [r4, #1]
    3fe4:	460d      	mov	r5, r1
    3fe6:	b118      	cbz	r0, 3ff0 <mpsl_init+0x18>
    3fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ff0:	f7fc fbd8 	bl	7a4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    3ff4:	b906      	cbnz	r6, 3ff8 <mpsl_init+0x20>
    3ff6:	4e13      	ldr	r6, [pc, #76]	; (4044 <mpsl_init+0x6c>)
    3ff8:	6067      	str	r7, [r4, #4]
    3ffa:	7025      	strb	r5, [r4, #0]
    3ffc:	f7ff ffa6 	bl	3f4c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4000:	f7ff ffb4 	bl	3f6c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4004:	4630      	mov	r0, r6
    4006:	f7ff fe79 	bl	3cfc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    400a:	0006      	movs	r6, r0
    400c:	d1ee      	bne.n	3fec <mpsl_init+0x14>
    400e:	f7fe fe77 	bl	2d00 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4012:	f7ff fef1 	bl	3df8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4016:	f008 f830 	bl	c07a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    401a:	4628      	mov	r0, r5
    401c:	f008 f95d 	bl	c2da <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4020:	2001      	movs	r0, #1
    4022:	2d00      	cmp	r5, #0
    4024:	db09      	blt.n	403a <mpsl_init+0x62>
    4026:	f005 011f 	and.w	r1, r5, #31
    402a:	fa00 f101 	lsl.w	r1, r0, r1
    402e:	096a      	lsrs	r2, r5, #5
    4030:	0092      	lsls	r2, r2, #2
    4032:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4036:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    403a:	7060      	strb	r0, [r4, #1]
    403c:	4630      	mov	r0, r6
    403e:	e7d5      	b.n	3fec <mpsl_init+0x14>
    4040:	20000078 	.word	0x20000078
    4044:	0000c316 	.word	0x0000c316

00004048 <mpsl_is_initialized>:
    4048:	4801      	ldr	r0, [pc, #4]	; (4050 <mpsl_is_initialized+0x8>)
    404a:	7840      	ldrb	r0, [r0, #1]
    404c:	4770      	bx	lr
    404e:	0000      	.short	0x0000
    4050:	20000078 	.word	0x20000078

00004054 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4054:	4807      	ldr	r0, [pc, #28]	; (4074 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4056:	f990 0000 	ldrsb.w	r0, [r0]
    405a:	2800      	cmp	r0, #0
    405c:	db09      	blt.n	4072 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    405e:	f000 021f 	and.w	r2, r0, #31
    4062:	2101      	movs	r1, #1
    4064:	4091      	lsls	r1, r2
    4066:	0940      	lsrs	r0, r0, #5
    4068:	0080      	lsls	r0, r0, #2
    406a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    406e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4072:	4770      	bx	lr
    4074:	20000078 	.word	0x20000078

00004078 <mpsl_temperature_get>:
    4078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    407c:	2601      	movs	r6, #1
    407e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4082:	0331      	lsls	r1, r6, #12
    4084:	f04f 0800 	mov.w	r8, #0
    4088:	4640      	mov	r0, r8
    408a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    408e:	f3bf 8f4f 	dsb	sy
    4092:	f3bf 8f6f 	isb	sy
    4096:	4c16      	ldr	r4, [pc, #88]	; (40f0 <mpsl_temperature_get+0x78>)
    4098:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    409c:	200c      	movs	r0, #12
    409e:	f008 f948 	bl	c332 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40a2:	4d14      	ldr	r5, [pc, #80]	; (40f4 <mpsl_temperature_get+0x7c>)
    40a4:	6828      	ldr	r0, [r5, #0]
    40a6:	43c0      	mvns	r0, r0
    40a8:	f340 1700 	sbfx	r7, r0, #4, #1
    40ac:	6828      	ldr	r0, [r5, #0]
    40ae:	f040 0010 	orr.w	r0, r0, #16
    40b2:	6028      	str	r0, [r5, #0]
    40b4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    40b8:	6026      	str	r6, [r4, #0]
    40ba:	1c7f      	adds	r7, r7, #1
    40bc:	e002      	b.n	40c4 <mpsl_temperature_get+0x4c>
    40be:	bf00      	nop
    40c0:	f000 f8a0 	bl	4204 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40c4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    40c8:	2800      	cmp	r0, #0
    40ca:	d0f9      	beq.n	40c0 <mpsl_temperature_get+0x48>
    40cc:	b91f      	cbnz	r7, 40d6 <mpsl_temperature_get+0x5e>
    40ce:	6828      	ldr	r0, [r5, #0]
    40d0:	f020 0010 	bic.w	r0, r0, #16
    40d4:	6028      	str	r0, [r5, #0]
    40d6:	4808      	ldr	r0, [pc, #32]	; (40f8 <mpsl_temperature_get+0x80>)
    40d8:	6805      	ldr	r5, [r0, #0]
    40da:	6066      	str	r6, [r4, #4]
    40dc:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    40e0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    40e4:	200c      	movs	r0, #12
    40e6:	f008 f924 	bl	c332 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40ea:	4628      	mov	r0, r5
    40ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40f0:	4000c000 	.word	0x4000c000
    40f4:	e000ed10 	.word	0xe000ed10
    40f8:	4000c508 	.word	0x4000c508

000040fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    40fc:	b510      	push	{r4, lr}
    40fe:	4602      	mov	r2, r0
    4100:	2005      	movs	r0, #5
    4102:	490c      	ldr	r1, [pc, #48]	; (4134 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4104:	e004      	b.n	4110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4106:	bf00      	nop
    4108:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    410c:	791b      	ldrb	r3, [r3, #4]
    410e:	b133      	cbz	r3, 411e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4110:	1e40      	subs	r0, r0, #1
    4112:	b2c0      	uxtb	r0, r0
    4114:	d2f8      	bcs.n	4108 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4116:	2148      	movs	r1, #72	; 0x48
    4118:	2069      	movs	r0, #105	; 0x69
    411a:	f7ff ff39 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    411e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4122:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4126:	2200      	movs	r2, #0
    4128:	714a      	strb	r2, [r1, #5]
    412a:	718a      	strb	r2, [r1, #6]
    412c:	2201      	movs	r2, #1
    412e:	710a      	strb	r2, [r1, #4]
    4130:	bd10      	pop	{r4, pc}
    4132:	0000      	.short	0x0000
    4134:	20001054 	.word	0x20001054

00004138 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4138:	b510      	push	{r4, lr}
    413a:	2805      	cmp	r0, #5
    413c:	d301      	bcc.n	4142 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    413e:	2158      	movs	r1, #88	; 0x58
    4140:	e006      	b.n	4150 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4142:	490a      	ldr	r1, [pc, #40]	; (416c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4144:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4148:	7901      	ldrb	r1, [r0, #4]
    414a:	2901      	cmp	r1, #1
    414c:	d003      	beq.n	4156 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    414e:	2159      	movs	r1, #89	; 0x59
    4150:	2069      	movs	r0, #105	; 0x69
    4152:	f7ff ff1d 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4156:	7941      	ldrb	r1, [r0, #5]
    4158:	7982      	ldrb	r2, [r0, #6]
    415a:	1c49      	adds	r1, r1, #1
    415c:	b2c9      	uxtb	r1, r1
    415e:	428a      	cmp	r2, r1
    4160:	d000      	beq.n	4164 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4162:	7141      	strb	r1, [r0, #5]
    4164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4168:	f7ff bf74 	b.w	4054 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    416c:	20001054 	.word	0x20001054

00004170 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    4170:	b510      	push	{r4, lr}
    4172:	2805      	cmp	r0, #5
    4174:	d303      	bcc.n	417e <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    4176:	214f      	movs	r1, #79	; 0x4f
    4178:	2069      	movs	r0, #105	; 0x69
    417a:	f7ff ff09 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    417e:	4a03      	ldr	r2, [pc, #12]	; (418c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    4180:	2100      	movs	r1, #0
    4182:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    4186:	7101      	strb	r1, [r0, #4]
    4188:	bd10      	pop	{r4, pc}
    418a:	0000      	.short	0x0000
    418c:	20001054 	.word	0x20001054

00004190 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4190:	b570      	push	{r4, r5, r6, lr}
    4192:	2505      	movs	r5, #5
    4194:	4e0e      	ldr	r6, [pc, #56]	; (41d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4196:	4c0f      	ldr	r4, [pc, #60]	; (41d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4198:	e016      	b.n	41c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    419a:	7821      	ldrb	r1, [r4, #0]
    419c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    41a0:	7902      	ldrb	r2, [r0, #4]
    41a2:	2a01      	cmp	r2, #1
    41a4:	d108      	bne.n	41b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    41a6:	7942      	ldrb	r2, [r0, #5]
    41a8:	7983      	ldrb	r3, [r0, #6]
    41aa:	429a      	cmp	r2, r3
    41ac:	d004      	beq.n	41b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    41ae:	7942      	ldrb	r2, [r0, #5]
    41b0:	7182      	strb	r2, [r0, #6]
    41b2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    41b6:	4780      	blx	r0
    41b8:	7820      	ldrb	r0, [r4, #0]
    41ba:	1c40      	adds	r0, r0, #1
    41bc:	b2c0      	uxtb	r0, r0
    41be:	7020      	strb	r0, [r4, #0]
    41c0:	2805      	cmp	r0, #5
    41c2:	d301      	bcc.n	41c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    41c4:	2000      	movs	r0, #0
    41c6:	7020      	strb	r0, [r4, #0]
    41c8:	1e6d      	subs	r5, r5, #1
    41ca:	b2ed      	uxtb	r5, r5
    41cc:	d2e5      	bcs.n	419a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    41ce:	bd70      	pop	{r4, r5, r6, pc}
    41d0:	20001054 	.word	0x20001054
    41d4:	20000356 	.word	0x20000356

000041d8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    41d8:	b500      	push	{lr}
    41da:	f008 f8d9 	bl	c390 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    41de:	b940      	cbnz	r0, 41f2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41e0:	f008 f8e0 	bl	c3a4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    41e4:	b928      	cbnz	r0, 41f2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41e6:	f008 f8f4 	bl	c3d2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    41ea:	b910      	cbnz	r0, 41f2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41ec:	f008 f905 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41f0:	b108      	cbz	r0, 41f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    41f2:	4802      	ldr	r0, [pc, #8]	; (41fc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    41f4:	bd00      	pop	{pc}
    41f6:	4802      	ldr	r0, [pc, #8]	; (4200 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    41f8:	bd00      	pop	{pc}
    41fa:	0000      	.short	0x0000
    41fc:	4000050c 	.word	0x4000050c
    4200:	4001e700 	.word	0x4001e700

00004204 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4204:	b510      	push	{r4, lr}
    4206:	f008 f8f8 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    420a:	b330      	cbz	r0, 425a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    420c:	f3ef 8010 	mrs	r0, PRIMASK
    4210:	b1c8      	cbz	r0, 4246 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4212:	2100      	movs	r1, #0
    4214:	b672      	cpsid	i
    4216:	4812      	ldr	r0, [pc, #72]	; (4260 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4218:	6802      	ldr	r2, [r0, #0]
    421a:	6803      	ldr	r3, [r0, #0]
    421c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4220:	f043 0310 	orr.w	r3, r3, #16
    4224:	6003      	str	r3, [r0, #0]
    4226:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    422a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    422e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4232:	431c      	orrs	r4, r3
    4234:	d000      	beq.n	4238 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4236:	bf40      	sev
    4238:	bf20      	wfe
    423a:	bf00      	nop
    423c:	bf00      	nop
    423e:	bf00      	nop
    4240:	bf00      	nop
    4242:	b112      	cbz	r2, 424a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4244:	e005      	b.n	4252 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4246:	2101      	movs	r1, #1
    4248:	e7e4      	b.n	4214 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    424a:	6802      	ldr	r2, [r0, #0]
    424c:	f022 0210 	bic.w	r2, r2, #16
    4250:	6002      	str	r2, [r0, #0]
    4252:	2900      	cmp	r1, #0
    4254:	d000      	beq.n	4258 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4256:	b662      	cpsie	i
    4258:	bd10      	pop	{r4, pc}
    425a:	bf20      	wfe
    425c:	bd10      	pop	{r4, pc}
    425e:	0000      	.short	0x0000
    4260:	e000ed10 	.word	0xe000ed10

00004264 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4264:	4901      	ldr	r1, [pc, #4]	; (426c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4266:	2001      	movs	r0, #1
    4268:	7088      	strb	r0, [r1, #2]
    426a:	4770      	bx	lr
    426c:	20000080 	.word	0x20000080

00004270 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4270:	0000c647 0000c67f 0000c669 0000c657     G.......i...W...
    4280:	0000c663 0000c651 0000c645 0000c643     c...Q...E...C...
    4290:	0000c67b 0000c66f 0000c65d 0000c64b     {...o...]...K...
    42a0:	0000c63d 0000c635 0000c639 0000c62f     =...5...9.../...

000042b0 <mpsl_fem_disable>:
    42b0:	4801      	ldr	r0, [pc, #4]	; (42b8 <mpsl_fem_disable+0x8>)
    42b2:	6800      	ldr	r0, [r0, #0]
    42b4:	6800      	ldr	r0, [r0, #0]
    42b6:	4700      	bx	r0
    42b8:	20000094 	.word	0x20000094

000042bc <mpsl_fem_lna_configuration_clear>:
    42bc:	4801      	ldr	r0, [pc, #4]	; (42c4 <mpsl_fem_lna_configuration_clear+0x8>)
    42be:	6800      	ldr	r0, [r0, #0]
    42c0:	6940      	ldr	r0, [r0, #20]
    42c2:	4700      	bx	r0
    42c4:	20000094 	.word	0x20000094

000042c8 <mpsl_fem_lna_configuration_set>:
    42c8:	4a01      	ldr	r2, [pc, #4]	; (42d0 <mpsl_fem_lna_configuration_set+0x8>)
    42ca:	6812      	ldr	r2, [r2, #0]
    42cc:	68d2      	ldr	r2, [r2, #12]
    42ce:	4710      	bx	r2
    42d0:	20000094 	.word	0x20000094

000042d4 <mpsl_fem_lna_is_configured>:
    42d4:	4901      	ldr	r1, [pc, #4]	; (42dc <mpsl_fem_lna_is_configured+0x8>)
    42d6:	6809      	ldr	r1, [r1, #0]
    42d8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    42da:	4708      	bx	r1
    42dc:	20000094 	.word	0x20000094

000042e0 <mpsl_fem_pa_configuration_clear>:
    42e0:	4801      	ldr	r0, [pc, #4]	; (42e8 <mpsl_fem_pa_configuration_clear+0x8>)
    42e2:	6800      	ldr	r0, [r0, #0]
    42e4:	6900      	ldr	r0, [r0, #16]
    42e6:	4700      	bx	r0
    42e8:	20000094 	.word	0x20000094

000042ec <mpsl_fem_pa_configuration_set>:
    42ec:	4a01      	ldr	r2, [pc, #4]	; (42f4 <mpsl_fem_pa_configuration_set+0x8>)
    42ee:	6812      	ldr	r2, [r2, #0]
    42f0:	6892      	ldr	r2, [r2, #8]
    42f2:	4710      	bx	r2
    42f4:	20000094 	.word	0x20000094

000042f8 <mpsl_fem_pa_gain_set>:
    42f8:	4901      	ldr	r1, [pc, #4]	; (4300 <mpsl_fem_pa_gain_set+0x8>)
    42fa:	6809      	ldr	r1, [r1, #0]
    42fc:	6a49      	ldr	r1, [r1, #36]	; 0x24
    42fe:	4708      	bx	r1
    4300:	20000094 	.word	0x20000094

00004304 <mpsl_fem_pa_is_configured>:
    4304:	4901      	ldr	r1, [pc, #4]	; (430c <mpsl_fem_pa_is_configured+0x8>)
    4306:	6809      	ldr	r1, [r1, #0]
    4308:	6a89      	ldr	r1, [r1, #40]	; 0x28
    430a:	4708      	bx	r1
    430c:	20000094 	.word	0x20000094

00004310 <mpsl_fem_tx_power_split>:
    4310:	4b01      	ldr	r3, [pc, #4]	; (4318 <mpsl_fem_tx_power_split+0x8>)
    4312:	681b      	ldr	r3, [r3, #0]
    4314:	685b      	ldr	r3, [r3, #4]
    4316:	4718      	bx	r3
    4318:	20000094 	.word	0x20000094

0000431c <mpsl_fem_device_config_254_apply_get>:
    431c:	4801      	ldr	r0, [pc, #4]	; (4324 <mpsl_fem_device_config_254_apply_get+0x8>)
    431e:	7800      	ldrb	r0, [r0, #0]
    4320:	4770      	bx	lr
    4322:	0000      	.short	0x0000
    4324:	20000357 	.word	0x20000357
    4328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    432a:	4c14      	ldr	r4, [pc, #80]	; (437c <mpsl_fem_device_config_254_apply_get+0x60>)
    432c:	7a20      	ldrb	r0, [r4, #8]
    432e:	f88d 0001 	strb.w	r0, [sp, #1]
    4332:	79e0      	ldrb	r0, [r4, #7]
    4334:	f88d 0000 	strb.w	r0, [sp]
    4338:	79a0      	ldrb	r0, [r4, #6]
    433a:	f8ad 0004 	strh.w	r0, [sp, #4]
    433e:	7960      	ldrb	r0, [r4, #5]
    4340:	f8ad 0002 	strh.w	r0, [sp, #2]
    4344:	4668      	mov	r0, sp
    4346:	f005 fe73 	bl	a030 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    434a:	b108      	cbz	r0, 4350 <mpsl_fem_device_config_254_apply_get+0x34>
    434c:	2190      	movs	r1, #144	; 0x90
    434e:	e010      	b.n	4372 <mpsl_fem_device_config_254_apply_get+0x56>
    4350:	68e0      	ldr	r0, [r4, #12]
    4352:	9002      	str	r0, [sp, #8]
    4354:	a802      	add	r0, sp, #8
    4356:	f005 fe81 	bl	a05c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    435a:	b108      	cbz	r0, 4360 <mpsl_fem_device_config_254_apply_get+0x44>
    435c:	2194      	movs	r1, #148	; 0x94
    435e:	e008      	b.n	4372 <mpsl_fem_device_config_254_apply_get+0x56>
    4360:	4807      	ldr	r0, [pc, #28]	; (4380 <mpsl_fem_device_config_254_apply_get+0x64>)
    4362:	6800      	ldr	r0, [r0, #0]
    4364:	9003      	str	r0, [sp, #12]
    4366:	a803      	add	r0, sp, #12
    4368:	f00b fd5b 	bl	fe22 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    436c:	2800      	cmp	r0, #0
    436e:	d003      	beq.n	4378 <mpsl_fem_device_config_254_apply_get+0x5c>
    4370:	2198      	movs	r1, #152	; 0x98
    4372:	2003      	movs	r0, #3
    4374:	f000 f8ea 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4378:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    437a:	0000      	.short	0x0000
    437c:	2000107c 	.word	0x2000107c
    4380:	00004654 	.word	0x00004654

00004384 <sdc_build_revision_get>:
    4384:	b510      	push	{r4, lr}
    4386:	b128      	cbz	r0, 4394 <sdc_build_revision_get+0x10>
    4388:	2214      	movs	r2, #20
    438a:	4904      	ldr	r1, [pc, #16]	; (439c <sdc_build_revision_get+0x18>)
    438c:	f008 f875 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4390:	2000      	movs	r0, #0
    4392:	bd10      	pop	{r4, pc}
    4394:	f06f 0015 	mvn.w	r0, #21
    4398:	bd10      	pop	{r4, pc}
    439a:	0000      	.short	0x0000
    439c:	00004678 	.word	0x00004678

000043a0 <sdc_cfg_set>:
    43a0:	b570      	push	{r4, r5, r6, lr}
    43a2:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    43a6:	bb90      	cbnz	r0, 440e <sdc_cfg_set+0x6e>
    43a8:	4c24      	ldr	r4, [pc, #144]	; (443c <sdc_cfg_set+0x9c>)
    43aa:	7860      	ldrb	r0, [r4, #1]
    43ac:	b108      	cbz	r0, 43b2 <sdc_cfg_set+0x12>
    43ae:	1198      	asrs	r0, r3, #6
    43b0:	bd70      	pop	{r4, r5, r6, pc}
    43b2:	b309      	cbz	r1, 43f8 <sdc_cfg_set+0x58>
    43b4:	f06f 0515 	mvn.w	r5, #21
    43b8:	b33a      	cbz	r2, 440a <sdc_cfg_set+0x6a>
    43ba:	4821      	ldr	r0, [pc, #132]	; (4440 <sdc_cfg_set+0xa0>)
    43bc:	2908      	cmp	r1, #8
    43be:	d237      	bcs.n	4430 <sdc_cfg_set+0x90>
    43c0:	e8df f001 	tbb	[pc, r1]
    43c4:	0a070436 	.word	0x0a070436
    43c8:	291e1b18 	.word	0x291e1b18
    43cc:	7811      	ldrb	r1, [r2, #0]
    43ce:	7001      	strb	r1, [r0, #0]
    43d0:	e023      	b.n	441a <sdc_cfg_set+0x7a>
    43d2:	7811      	ldrb	r1, [r2, #0]
    43d4:	7041      	strb	r1, [r0, #1]
    43d6:	e020      	b.n	441a <sdc_cfg_set+0x7a>
    43d8:	7891      	ldrb	r1, [r2, #2]
    43da:	b1b1      	cbz	r1, 440a <sdc_cfg_set+0x6a>
    43dc:	78d1      	ldrb	r1, [r2, #3]
    43de:	b1a1      	cbz	r1, 440a <sdc_cfg_set+0x6a>
    43e0:	7811      	ldrb	r1, [r2, #0]
    43e2:	291b      	cmp	r1, #27
    43e4:	d311      	bcc.n	440a <sdc_cfg_set+0x6a>
    43e6:	7851      	ldrb	r1, [r2, #1]
    43e8:	291b      	cmp	r1, #27
    43ea:	d30e      	bcc.n	440a <sdc_cfg_set+0x6a>
    43ec:	6811      	ldr	r1, [r2, #0]
    43ee:	f8c0 1005 	str.w	r1, [r0, #5]
    43f2:	e012      	b.n	441a <sdc_cfg_set+0x7a>
    43f4:	6811      	ldr	r1, [r2, #0]
    43f6:	60c1      	str	r1, [r0, #12]
    43f8:	e00f      	b.n	441a <sdc_cfg_set+0x7a>
    43fa:	7811      	ldrb	r1, [r2, #0]
    43fc:	7081      	strb	r1, [r0, #2]
    43fe:	e00c      	b.n	441a <sdc_cfg_set+0x7a>
    4400:	78e1      	ldrb	r1, [r4, #3]
    4402:	b129      	cbz	r1, 4410 <sdc_cfg_set+0x70>
    4404:	7811      	ldrb	r1, [r2, #0]
    4406:	2902      	cmp	r1, #2
    4408:	d202      	bcs.n	4410 <sdc_cfg_set+0x70>
    440a:	4628      	mov	r0, r5
    440c:	bd70      	pop	{r4, r5, r6, pc}
    440e:	e00f      	b.n	4430 <sdc_cfg_set+0x90>
    4410:	7811      	ldrb	r1, [r2, #0]
    4412:	7401      	strb	r1, [r0, #16]
    4414:	e001      	b.n	441a <sdc_cfg_set+0x7a>
    4416:	8811      	ldrh	r1, [r2, #0]
    4418:	8241      	strh	r1, [r0, #18]
    441a:	2201      	movs	r2, #1
    441c:	4908      	ldr	r1, [pc, #32]	; (4440 <sdc_cfg_set+0xa0>)
    441e:	2000      	movs	r0, #0
    4420:	f008 f949 	bl	c6b6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4424:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4428:	db04      	blt.n	4434 <sdc_cfg_set+0x94>
    442a:	f06f 000b 	mvn.w	r0, #11
    442e:	e7ed      	b.n	440c <sdc_cfg_set+0x6c>
    4430:	4618      	mov	r0, r3
    4432:	e7eb      	b.n	440c <sdc_cfg_set+0x6c>
    4434:	2101      	movs	r1, #1
    4436:	70a1      	strb	r1, [r4, #2]
    4438:	e7e8      	b.n	440c <sdc_cfg_set+0x6c>
    443a:	0000      	.short	0x0000
    443c:	20000098 	.word	0x20000098
    4440:	2000107c 	.word	0x2000107c

00004444 <sdc_disable>:
    4444:	b510      	push	{r4, lr}
    4446:	4c07      	ldr	r4, [pc, #28]	; (4464 <sdc_disable+0x20>)
    4448:	7860      	ldrb	r0, [r4, #1]
    444a:	b120      	cbz	r0, 4456 <sdc_disable+0x12>
    444c:	f006 f8aa 	bl	a5a4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    4450:	7820      	ldrb	r0, [r4, #0]
    4452:	f7ff fe8d 	bl	4170 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    4456:	f000 fd85 	bl	4f64 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    445a:	f000 fe5f 	bl	511c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    445e:	2000      	movs	r0, #0
    4460:	7060      	strb	r0, [r4, #1]
    4462:	bd10      	pop	{r4, pc}
    4464:	20000098 	.word	0x20000098

00004468 <sdc_enable>:
    4468:	b570      	push	{r4, r5, r6, lr}
    446a:	460c      	mov	r4, r1
    446c:	0005      	movs	r5, r0
    446e:	d019      	beq.n	44a4 <sdc_enable+0x3c>
    4470:	b1c4      	cbz	r4, 44a4 <sdc_enable+0x3c>
    4472:	f000 f927 	bl	46c4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4476:	b1c0      	cbz	r0, 44aa <sdc_enable+0x42>
    4478:	4628      	mov	r0, r5
    447a:	f7ff fe3f 	bl	40fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    447e:	4d0c      	ldr	r5, [pc, #48]	; (44b0 <sdc_enable+0x48>)
    4480:	2200      	movs	r2, #0
    4482:	490c      	ldr	r1, [pc, #48]	; (44b4 <sdc_enable+0x4c>)
    4484:	7028      	strb	r0, [r5, #0]
    4486:	4620      	mov	r0, r4
    4488:	f008 f915 	bl	c6b6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    448c:	f00c f8cc 	bl	10628 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4490:	2100      	movs	r1, #0
    4492:	7828      	ldrb	r0, [r5, #0]
    4494:	f006 f876 	bl	a584 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4498:	f7ff ff46 	bl	4328 <mpsl_fem_device_config_254_apply_get+0xc>
    449c:	2001      	movs	r0, #1
    449e:	7068      	strb	r0, [r5, #1]
    44a0:	2000      	movs	r0, #0
    44a2:	bd70      	pop	{r4, r5, r6, pc}
    44a4:	f06f 0015 	mvn.w	r0, #21
    44a8:	bd70      	pop	{r4, r5, r6, pc}
    44aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    44ae:	bd70      	pop	{r4, r5, r6, pc}
    44b0:	20000098 	.word	0x20000098
    44b4:	2000107c 	.word	0x2000107c

000044b8 <sdc_init>:
    44b8:	b530      	push	{r4, r5, lr}
    44ba:	b089      	sub	sp, #36	; 0x24
    44bc:	0005      	movs	r5, r0
    44be:	d00c      	beq.n	44da <sdc_init+0x22>
    44c0:	f7ff fdc2 	bl	4048 <mpsl_is_initialized>
    44c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    44c8:	b120      	cbz	r0, 44d4 <sdc_init+0x1c>
    44ca:	f7ff fc69 	bl	3da0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    44ce:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    44d2:	d905      	bls.n	44e0 <sdc_init+0x28>
    44d4:	4620      	mov	r0, r4
    44d6:	b009      	add	sp, #36	; 0x24
    44d8:	bd30      	pop	{r4, r5, pc}
    44da:	f06f 0015 	mvn.w	r0, #21
    44de:	e7fa      	b.n	44d6 <sdc_init+0x1e>
    44e0:	4c15      	ldr	r4, [pc, #84]	; (4538 <sdc_init+0x80>)
    44e2:	4816      	ldr	r0, [pc, #88]	; (453c <sdc_init+0x84>)
    44e4:	6065      	str	r5, [r4, #4]
    44e6:	f000 fa0b 	bl	4900 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    44ea:	2000      	movs	r0, #0
    44ec:	7060      	strb	r0, [r4, #1]
    44ee:	70a0      	strb	r0, [r4, #2]
    44f0:	70e0      	strb	r0, [r4, #3]
    44f2:	4601      	mov	r1, r0
    44f4:	2220      	movs	r2, #32
    44f6:	4668      	mov	r0, sp
    44f8:	f008 f839 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    44fc:	2220      	movs	r2, #32
    44fe:	4910      	ldr	r1, [pc, #64]	; (4540 <sdc_init+0x88>)
    4500:	4668      	mov	r0, sp
    4502:	f007 ffba 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4506:	2220      	movs	r2, #32
    4508:	4669      	mov	r1, sp
    450a:	480e      	ldr	r0, [pc, #56]	; (4544 <sdc_init+0x8c>)
    450c:	f007 ffb5 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4510:	f3ef 8410 	mrs	r4, PRIMASK
    4514:	b672      	cpsid	i
    4516:	f06f 000c 	mvn.w	r0, #12
    451a:	f000 fd31 	bl	4f80 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    451e:	480a      	ldr	r0, [pc, #40]	; (4548 <sdc_init+0x90>)
    4520:	f000 fe08 	bl	5134 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4524:	b118      	cbz	r0, 452e <sdc_init+0x76>
    4526:	21ab      	movs	r1, #171	; 0xab
    4528:	2003      	movs	r0, #3
    452a:	f000 f80f 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    452e:	b904      	cbnz	r4, 4532 <sdc_init+0x7a>
    4530:	b662      	cpsie	i
    4532:	2000      	movs	r0, #0
    4534:	e7cf      	b.n	44d6 <sdc_init+0x1e>
    4536:	0000      	.short	0x0000
    4538:	20000098 	.word	0x20000098
    453c:	00004329 	.word	0x00004329
    4540:	00004658 	.word	0x00004658
    4544:	2000107c 	.word	0x2000107c
    4548:	000046f1 	.word	0x000046f1

0000454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    454c:	b50e      	push	{r1, r2, r3, lr}
    454e:	b672      	cpsid	i
    4550:	4a15      	ldr	r2, [pc, #84]	; (45a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4552:	6855      	ldr	r5, [r2, #4]
    4554:	b1dd      	cbz	r5, 458e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    4556:	2200      	movs	r2, #0
    4558:	4603      	mov	r3, r0
    455a:	466e      	mov	r6, sp
    455c:	240a      	movs	r4, #10
    455e:	e003      	b.n	4568 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4560:	fbb0 f0f4 	udiv	r0, r0, r4
    4564:	1c52      	adds	r2, r2, #1
    4566:	b2d2      	uxtb	r2, r2
    4568:	2800      	cmp	r0, #0
    456a:	d1f9      	bne.n	4560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    456c:	54b0      	strb	r0, [r6, r2]
    456e:	e00a      	b.n	4586 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4570:	b2d8      	uxtb	r0, r3
    4572:	fbb0 f7f4 	udiv	r7, r0, r4
    4576:	fbb3 f3f4 	udiv	r3, r3, r4
    457a:	fb04 0017 	mls	r0, r4, r7, r0
    457e:	1e52      	subs	r2, r2, #1
    4580:	b2d2      	uxtb	r2, r2
    4582:	3030      	adds	r0, #48	; 0x30
    4584:	54b0      	strb	r0, [r6, r2]
    4586:	2a00      	cmp	r2, #0
    4588:	d1f2      	bne.n	4570 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    458a:	4630      	mov	r0, r6
    458c:	47a8      	blx	r5
    458e:	f3bf 8f4f 	dsb	sy
    4592:	4806      	ldr	r0, [pc, #24]	; (45ac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4594:	6801      	ldr	r1, [r0, #0]
    4596:	4a06      	ldr	r2, [pc, #24]	; (45b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4598:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    459c:	4311      	orrs	r1, r2
    459e:	6001      	str	r1, [r0, #0]
    45a0:	f3bf 8f4f 	dsb	sy
    45a4:	bf00      	nop
    45a6:	e7fd      	b.n	45a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    45a8:	20000098 	.word	0x20000098
    45ac:	e000ed0c 	.word	0xe000ed0c
    45b0:	05fa0004 	.word	0x05fa0004

000045b4 <sdc_support_adv>:
    45b4:	4806      	ldr	r0, [pc, #24]	; (45d0 <sdc_support_adv+0x1c>)
    45b6:	b510      	push	{r4, lr}
    45b8:	7881      	ldrb	r1, [r0, #2]
    45ba:	7840      	ldrb	r0, [r0, #1]
    45bc:	4301      	orrs	r1, r0
    45be:	d002      	beq.n	45c6 <sdc_support_adv+0x12>
    45c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    45c4:	bd10      	pop	{r4, pc}
    45c6:	f005 fffb 	bl	a5c0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    45ca:	2000      	movs	r0, #0
    45cc:	bd10      	pop	{r4, pc}
    45ce:	0000      	.short	0x0000
    45d0:	20000098 	.word	0x20000098

000045d4 <sdc_support_dle_peripheral>:
    45d4:	4806      	ldr	r0, [pc, #24]	; (45f0 <sdc_support_dle_peripheral+0x1c>)
    45d6:	b510      	push	{r4, lr}
    45d8:	7881      	ldrb	r1, [r0, #2]
    45da:	7840      	ldrb	r0, [r0, #1]
    45dc:	4301      	orrs	r1, r0
    45de:	d002      	beq.n	45e6 <sdc_support_dle_peripheral+0x12>
    45e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    45e4:	bd10      	pop	{r4, pc}
    45e6:	f005 fd51 	bl	a08c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    45ea:	2000      	movs	r0, #0
    45ec:	bd10      	pop	{r4, pc}
    45ee:	0000      	.short	0x0000
    45f0:	20000098 	.word	0x20000098

000045f4 <sdc_support_le_2m_phy>:
    45f4:	4806      	ldr	r0, [pc, #24]	; (4610 <sdc_support_le_2m_phy+0x1c>)
    45f6:	b510      	push	{r4, lr}
    45f8:	7881      	ldrb	r1, [r0, #2]
    45fa:	7840      	ldrb	r0, [r0, #1]
    45fc:	4301      	orrs	r1, r0
    45fe:	d002      	beq.n	4606 <sdc_support_le_2m_phy+0x12>
    4600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4604:	bd10      	pop	{r4, pc}
    4606:	f00b fdd7 	bl	101b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    460a:	2000      	movs	r0, #0
    460c:	bd10      	pop	{r4, pc}
    460e:	0000      	.short	0x0000
    4610:	20000098 	.word	0x20000098

00004614 <sdc_support_peripheral>:
    4614:	4806      	ldr	r0, [pc, #24]	; (4630 <sdc_support_peripheral+0x1c>)
    4616:	b510      	push	{r4, lr}
    4618:	7881      	ldrb	r1, [r0, #2]
    461a:	7840      	ldrb	r0, [r0, #1]
    461c:	4301      	orrs	r1, r0
    461e:	d002      	beq.n	4626 <sdc_support_peripheral+0x12>
    4620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4624:	bd10      	pop	{r4, pc}
    4626:	f005 ffdd 	bl	a5e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    462a:	2000      	movs	r0, #0
    462c:	bd10      	pop	{r4, pc}
    462e:	0000      	.short	0x0000
    4630:	20000098 	.word	0x20000098

00004634 <sdc_support_phy_update_peripheral>:
    4634:	4806      	ldr	r0, [pc, #24]	; (4650 <sdc_support_phy_update_peripheral+0x1c>)
    4636:	b510      	push	{r4, lr}
    4638:	7881      	ldrb	r1, [r0, #2]
    463a:	7840      	ldrb	r0, [r0, #1]
    463c:	4301      	orrs	r1, r0
    463e:	d002      	beq.n	4646 <sdc_support_phy_update_peripheral+0x12>
    4640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4644:	bd10      	pop	{r4, pc}
    4646:	f00b fdc7 	bl	101d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    464a:	2000      	movs	r0, #0
    464c:	bd10      	pop	{r4, pc}
    464e:	0000      	.short	0x0000
    4650:	20000098 	.word	0x20000098
    4654:	00000001 	.word	0x00000001
    4658:	00010101 	.word	0x00010101
    465c:	031b1b00 	.word	0x031b1b00
    4660:	00000002 	.word	0x00000002
    4664:	00001d4c 	.word	0x00001d4c
    4668:	001f0003 	.word	0x001f0003
	...
    4678:	2a41906d 	.word	0x2a41906d
    467c:	17ade838 	.word	0x17ade838
    4680:	3803a529 	.word	0x3803a529
    4684:	85d72739 	.word	0x85d72739
    4688:	e1d8851f 	.word	0xe1d8851f

0000468c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    468c:	4a05      	ldr	r2, [pc, #20]	; (46a4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    468e:	b510      	push	{r4, lr}
    4690:	6852      	ldr	r2, [r2, #4]
    4692:	b112      	cbz	r2, 469a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4698:	4710      	bx	r2
    469a:	2192      	movs	r1, #146	; 0x92
    469c:	2004      	movs	r0, #4
    469e:	f7ff ff55 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46a2:	0000      	.short	0x0000
    46a4:	2000109c 	.word	0x2000109c

000046a8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    46a8:	4a05      	ldr	r2, [pc, #20]	; (46c0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    46aa:	b510      	push	{r4, lr}
    46ac:	6892      	ldr	r2, [r2, #8]
    46ae:	b112      	cbz	r2, 46b6 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    46b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46b4:	4710      	bx	r2
    46b6:	2198      	movs	r1, #152	; 0x98
    46b8:	2004      	movs	r0, #4
    46ba:	f7ff ff47 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46be:	0000      	.short	0x0000
    46c0:	2000109c 	.word	0x2000109c

000046c4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    46c4:	4805      	ldr	r0, [pc, #20]	; (46dc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    46c6:	6801      	ldr	r1, [r0, #0]
    46c8:	b129      	cbz	r1, 46d6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46ca:	6841      	ldr	r1, [r0, #4]
    46cc:	b119      	cbz	r1, 46d6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46ce:	6880      	ldr	r0, [r0, #8]
    46d0:	b108      	cbz	r0, 46d6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46d2:	2001      	movs	r0, #1
    46d4:	4770      	bx	lr
    46d6:	2000      	movs	r0, #0
    46d8:	4770      	bx	lr
    46da:	0000      	.short	0x0000
    46dc:	2000109c 	.word	0x2000109c

000046e0 <sdc_rand_source_register>:
    46e0:	4902      	ldr	r1, [pc, #8]	; (46ec <sdc_rand_source_register+0xc>)
    46e2:	c80d      	ldmia	r0, {r0, r2, r3}
    46e4:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    46e8:	2000      	movs	r0, #0
    46ea:	4770      	bx	lr
    46ec:	2000109c 	.word	0x2000109c

000046f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    46f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46f2:	4c12      	ldr	r4, [pc, #72]	; (473c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    46f4:	2600      	movs	r6, #0
    46f6:	6825      	ldr	r5, [r4, #0]
    46f8:	e011      	b.n	471e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    46fa:	9800      	ldr	r0, [sp, #0]
    46fc:	2802      	cmp	r0, #2
    46fe:	d002      	beq.n	4706 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4700:	2803      	cmp	r0, #3
    4702:	d10c      	bne.n	471e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4704:	e006      	b.n	4714 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4706:	6820      	ldr	r0, [r4, #0]
    4708:	b110      	cbz	r0, 4710 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    470a:	2000      	movs	r0, #0
    470c:	6026      	str	r6, [r4, #0]
    470e:	e005      	b.n	471c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4710:	2128      	movs	r1, #40	; 0x28
    4712:	e00c      	b.n	472e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4714:	6820      	ldr	r0, [r4, #0]
    4716:	b168      	cbz	r0, 4734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4718:	2001      	movs	r0, #1
    471a:	6026      	str	r6, [r4, #0]
    471c:	47a8      	blx	r5
    471e:	4668      	mov	r0, sp
    4720:	f000 fcce 	bl	50c0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4724:	2800      	cmp	r0, #0
    4726:	d0e8      	beq.n	46fa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4728:	2805      	cmp	r0, #5
    472a:	d005      	beq.n	4738 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    472c:	2135      	movs	r1, #53	; 0x35
    472e:	2004      	movs	r0, #4
    4730:	f7ff ff0c 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4734:	212d      	movs	r1, #45	; 0x2d
    4736:	e7fa      	b.n	472e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    473a:	0000      	.short	0x0000
    473c:	200000a0 	.word	0x200000a0

00004740 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    4740:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4744:	4c29      	ldr	r4, [pc, #164]	; (47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4746:	4605      	mov	r5, r0
    4748:	1d00      	adds	r0, r0, #4
    474a:	f504 7782 	add.w	r7, r4, #260	; 0x104
    474e:	60a0      	str	r0, [r4, #8]
    4750:	7838      	ldrb	r0, [r7, #0]
    4752:	b158      	cbz	r0, 476c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    4754:	78ba      	ldrb	r2, [r7, #2]
    4756:	463c      	mov	r4, r7
    4758:	1c79      	adds	r1, r7, #1
    475a:	4628      	mov	r0, r5
    475c:	1c92      	adds	r2, r2, #2
    475e:	f007 fe8c 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4762:	2000      	movs	r0, #0
    4764:	7020      	strb	r0, [r4, #0]
    4766:	2004      	movs	r0, #4
    4768:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    476c:	481f      	ldr	r0, [pc, #124]	; (47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    476e:	f001 fe97 	bl	64a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4772:	4606      	mov	r6, r0
    4774:	2802      	cmp	r0, #2
    4776:	d002      	beq.n	477e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
    4778:	2e04      	cmp	r6, #4
    477a:	d005      	beq.n	4788 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
    477c:	e026      	b.n	47cc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    477e:	491b      	ldr	r1, [pc, #108]	; (47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4780:	4628      	mov	r0, r5
    4782:	f008 f834 	bl	c7ee <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    4786:	e021      	b.n	47cc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    4788:	7820      	ldrb	r0, [r4, #0]
    478a:	2811      	cmp	r0, #17
    478c:	d104      	bne.n	4798 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
    478e:	210a      	movs	r1, #10
    4790:	203e      	movs	r0, #62	; 0x3e
    4792:	f007 fffe 	bl	c792 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4796:	b118      	cbz	r0, 47a0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
    4798:	7820      	ldrb	r0, [r4, #0]
    479a:	2808      	cmp	r0, #8
    479c:	d005      	beq.n	47aa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
    479e:	e009      	b.n	47b4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
    47a0:	4912      	ldr	r1, [pc, #72]	; (47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    47a2:	4628      	mov	r0, r5
    47a4:	f008 fa1b 	bl	cbde <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    47a8:	e00a      	b.n	47c0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    47aa:	2105      	movs	r1, #5
    47ac:	203e      	movs	r0, #62	; 0x3e
    47ae:	f007 fff0 	bl	c792 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    47b2:	b168      	cbz	r0, 47d0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    47b4:	490d      	ldr	r1, [pc, #52]	; (47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    47b6:	4628      	mov	r0, r5
    47b8:	f008 f847 	bl	c84a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    47bc:	2800      	cmp	r0, #0
    47be:	d0c7      	beq.n	4750 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    47c0:	78a9      	ldrb	r1, [r5, #2]
    47c2:	7828      	ldrb	r0, [r5, #0]
    47c4:	f007 ffe5 	bl	c792 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    47c8:	2800      	cmp	r0, #0
    47ca:	d0c1      	beq.n	4750 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    47cc:	4630      	mov	r0, r6
    47ce:	e7cb      	b.n	4768 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    47d0:	88a0      	ldrh	r0, [r4, #4]
    47d2:	f8ad 0000 	strh.w	r0, [sp]
    47d6:	a901      	add	r1, sp, #4
    47d8:	4668      	mov	r0, sp
    47da:	f008 fb33 	bl	ce44 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    47de:	2800      	cmp	r0, #0
    47e0:	d0b6      	beq.n	4750 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    47e2:	21aa      	movs	r1, #170	; 0xaa
    47e4:	2008      	movs	r0, #8
    47e6:	f7ff feb1 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47ea:	0000      	.short	0x0000
    47ec:	200010a8 	.word	0x200010a8
    47f0:	b570      	push	{r4, r5, r6, lr}
    47f2:	780a      	ldrb	r2, [r1, #0]
    47f4:	7082      	strb	r2, [r0, #2]
    47f6:	b33a      	cbz	r2, 4848 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    47f8:	2a01      	cmp	r2, #1
    47fa:	d825      	bhi.n	4848 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    47fc:	2313      	movs	r3, #19
    47fe:	7003      	strb	r3, [r0, #0]
    4800:	2300      	movs	r3, #0
    4802:	e00a      	b.n	481a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xda>
    4804:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4808:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    480c:	78a6      	ldrb	r6, [r4, #2]
    480e:	70ee      	strb	r6, [r5, #3]
    4810:	8864      	ldrh	r4, [r4, #2]
    4812:	0a24      	lsrs	r4, r4, #8
    4814:	1c5b      	adds	r3, r3, #1
    4816:	712c      	strb	r4, [r5, #4]
    4818:	b2db      	uxtb	r3, r3
    481a:	4293      	cmp	r3, r2
    481c:	d3f2      	bcc.n	4804 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
    481e:	2300      	movs	r3, #0
    4820:	e00b      	b.n	483a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xfa>
    4822:	bf00      	nop
    4824:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4828:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    482c:	792e      	ldrb	r6, [r5, #4]
    482e:	7166      	strb	r6, [r4, #5]
    4830:	88ad      	ldrh	r5, [r5, #4]
    4832:	0a2d      	lsrs	r5, r5, #8
    4834:	1c5b      	adds	r3, r3, #1
    4836:	71a5      	strb	r5, [r4, #6]
    4838:	b2db      	uxtb	r3, r3
    483a:	4293      	cmp	r3, r2
    483c:	d3f2      	bcc.n	4824 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>
    483e:	2101      	movs	r1, #1
    4840:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4844:	b2c0      	uxtb	r0, r0
    4846:	bd70      	pop	{r4, r5, r6, pc}
    4848:	2000      	movs	r0, #0
    484a:	bd70      	pop	{r4, r5, r6, pc}

0000484c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    484c:	2840      	cmp	r0, #64	; 0x40
    484e:	d203      	bcs.n	4858 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4850:	1e40      	subs	r0, r0, #1
    4852:	b2c1      	uxtb	r1, r0
    4854:	4805      	ldr	r0, [pc, #20]	; (486c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4856:	e005      	b.n	4864 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    4858:	28ff      	cmp	r0, #255	; 0xff
    485a:	d005      	beq.n	4868 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    485c:	3840      	subs	r0, #64	; 0x40
    485e:	b2c1      	uxtb	r1, r0
    4860:	4802      	ldr	r0, [pc, #8]	; (486c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4862:	3008      	adds	r0, #8
    4864:	f008 b9e5 	b.w	cc32 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4868:	2001      	movs	r0, #1
    486a:	4770      	bx	lr
    486c:	200000a4 	.word	0x200000a4

00004870 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4870:	1e40      	subs	r0, r0, #1
    4872:	b2c1      	uxtb	r1, r0
    4874:	4801      	ldr	r0, [pc, #4]	; (487c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4876:	f008 b9dc 	b.w	cc32 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    487a:	0000      	.short	0x0000
    487c:	200000b4 	.word	0x200000b4

00004880 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4880:	4902      	ldr	r1, [pc, #8]	; (488c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    4882:	6802      	ldr	r2, [r0, #0]
    4884:	610a      	str	r2, [r1, #16]
    4886:	6840      	ldr	r0, [r0, #4]
    4888:	6148      	str	r0, [r1, #20]
    488a:	4770      	bx	lr
    488c:	200000a4 	.word	0x200000a4

00004890 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4890:	4905      	ldr	r1, [pc, #20]	; (48a8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4892:	6802      	ldr	r2, [r0, #0]
    4894:	600a      	str	r2, [r1, #0]
    4896:	6840      	ldr	r0, [r0, #4]
    4898:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    489c:	600a      	str	r2, [r1, #0]
    489e:	4a03      	ldr	r2, [pc, #12]	; (48ac <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    48a0:	4310      	orrs	r0, r2
    48a2:	6048      	str	r0, [r1, #4]
    48a4:	4770      	bx	lr
    48a6:	0000      	.short	0x0000
    48a8:	200000a4 	.word	0x200000a4
    48ac:	024007f8 	.word	0x024007f8

000048b0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    48b0:	4902      	ldr	r1, [pc, #8]	; (48bc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    48b2:	6802      	ldr	r2, [r0, #0]
    48b4:	608a      	str	r2, [r1, #8]
    48b6:	6840      	ldr	r0, [r0, #4]
    48b8:	60c8      	str	r0, [r1, #12]
    48ba:	4770      	bx	lr
    48bc:	200000a4 	.word	0x200000a4

000048c0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    48c0:	4807      	ldr	r0, [pc, #28]	; (48e0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    48c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    48c6:	2200      	movs	r2, #0
    48c8:	6001      	str	r1, [r0, #0]
    48ca:	0cc9      	lsrs	r1, r1, #19
    48cc:	6041      	str	r1, [r0, #4]
    48ce:	f100 0108 	add.w	r1, r0, #8
    48d2:	201f      	movs	r0, #31
    48d4:	600a      	str	r2, [r1, #0]
    48d6:	604a      	str	r2, [r1, #4]
    48d8:	3108      	adds	r1, #8
    48da:	e9c1 0200 	strd	r0, r2, [r1]
    48de:	4770      	bx	lr
    48e0:	200000a4 	.word	0x200000a4

000048e4 <sdc_hci_cmd_cb_reset>:
    48e4:	b510      	push	{r4, lr}
    48e6:	f7ff ffeb 	bl	48c0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    48ea:	f00b fbde 	bl	100aa <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    48ee:	4604      	mov	r4, r0
    48f0:	4802      	ldr	r0, [pc, #8]	; (48fc <sdc_hci_cmd_cb_reset+0x18>)
    48f2:	6800      	ldr	r0, [r0, #0]
    48f4:	b100      	cbz	r0, 48f8 <sdc_hci_cmd_cb_reset+0x14>
    48f6:	4780      	blx	r0
    48f8:	4620      	mov	r0, r4
    48fa:	bd10      	pop	{r4, pc}
    48fc:	200000bc 	.word	0x200000bc

00004900 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4900:	4901      	ldr	r1, [pc, #4]	; (4908 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4902:	6008      	str	r0, [r1, #0]
    4904:	4770      	bx	lr
    4906:	0000      	.short	0x0000
    4908:	200000bc 	.word	0x200000bc

0000490c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    490c:	2102      	movs	r1, #2
    490e:	8001      	strh	r1, [r0, #0]
    4910:	8041      	strh	r1, [r0, #2]
    4912:	2100      	movs	r1, #0
    4914:	7101      	strb	r1, [r0, #4]
    4916:	216d      	movs	r1, #109	; 0x6d
    4918:	7141      	strb	r1, [r0, #5]
    491a:	f244 1190 	movw	r1, #16784	; 0x4190
    491e:	80c1      	strh	r1, [r0, #6]
    4920:	4901      	ldr	r1, [pc, #4]	; (4928 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4922:	6081      	str	r1, [r0, #8]
    4924:	2000      	movs	r0, #0
    4926:	4770      	bx	lr
    4928:	ade8382a 	.word	0xade8382a

0000492c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    492c:	b510      	push	{r4, lr}
    492e:	2802      	cmp	r0, #2
    4930:	d304      	bcc.n	493c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4932:	f44f 7101 	mov.w	r1, #516	; 0x204
    4936:	2017      	movs	r0, #23
    4938:	f7ff fe08 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    493c:	4901      	ldr	r1, [pc, #4]	; (4944 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    493e:	5c08      	ldrb	r0, [r1, r0]
    4940:	bd10      	pop	{r4, pc}
    4942:	0000      	.short	0x0000
    4944:	200012b0 	.word	0x200012b0

00004948 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    494a:	0005      	movs	r5, r0
    494c:	9500      	str	r5, [sp, #0]
    494e:	d00d      	beq.n	496c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    4950:	2600      	movs	r6, #0
    4952:	7808      	ldrb	r0, [r1, #0]
    4954:	7849      	ldrb	r1, [r1, #1]
    4956:	4604      	mov	r4, r0
    4958:	42a1      	cmp	r1, r4
    495a:	d900      	bls.n	495e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    495c:	460c      	mov	r4, r1
    495e:	07aa      	lsls	r2, r5, #30
    4960:	d006      	beq.n	4970 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4962:	f240 11cb 	movw	r1, #459	; 0x1cb
    4966:	2017      	movs	r0, #23
    4968:	f7ff fdf0 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    496c:	2601      	movs	r6, #1
    496e:	e7f0      	b.n	4952 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4970:	4f12      	ldr	r7, [pc, #72]	; (49bc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    4972:	7038      	strb	r0, [r7, #0]
    4974:	7079      	strb	r1, [r7, #1]
    4976:	4631      	mov	r1, r6
    4978:	4668      	mov	r0, sp
    497a:	f000 f8d3 	bl	4b24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    497e:	2100      	movs	r1, #0
    4980:	460b      	mov	r3, r1
    4982:	9800      	ldr	r0, [sp, #0]
    4984:	1cc0      	adds	r0, r0, #3
    4986:	f020 0003 	bic.w	r0, r0, #3
    498a:	9000      	str	r0, [sp, #0]
    498c:	b966      	cbnz	r6, 49a8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    498e:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4992:	60d0      	str	r0, [r2, #12]
    4994:	2000      	movs	r0, #0
    4996:	e005      	b.n	49a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    4998:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    499c:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    49a0:	1c40      	adds	r0, r0, #1
    49a2:	b2c0      	uxtb	r0, r0
    49a4:	42a0      	cmp	r0, r4
    49a6:	d3f7      	bcc.n	4998 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    49a8:	9800      	ldr	r0, [sp, #0]
    49aa:	1c49      	adds	r1, r1, #1
    49ac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    49b0:	b2c9      	uxtb	r1, r1
    49b2:	9000      	str	r0, [sp, #0]
    49b4:	2902      	cmp	r1, #2
    49b6:	d3e4      	bcc.n	4982 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    49b8:	1b40      	subs	r0, r0, r5
    49ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49bc:	200012b0 	.word	0x200012b0

000049c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    49c0:	b570      	push	{r4, r5, r6, lr}
    49c2:	4604      	mov	r4, r0
    49c4:	7985      	ldrb	r5, [r0, #6]
    49c6:	f000 f8e9 	bl	4b9c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    49ca:	4a0c      	ldr	r2, [pc, #48]	; (49fc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    49cc:	79e1      	ldrb	r1, [r4, #7]
    49ce:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    49d2:	e00e      	b.n	49f2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    49d4:	68d3      	ldr	r3, [r2, #12]
    49d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    49da:	b143      	cbz	r3, 49ee <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    49dc:	1c48      	adds	r0, r1, #1
    49de:	71e0      	strb	r0, [r4, #7]
    49e0:	80a1      	strh	r1, [r4, #4]
    49e2:	68d0      	ldr	r0, [r2, #12]
    49e4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    49e8:	6020      	str	r0, [r4, #0]
    49ea:	2000      	movs	r0, #0
    49ec:	bd70      	pop	{r4, r5, r6, pc}
    49ee:	1c49      	adds	r1, r1, #1
    49f0:	b2c9      	uxtb	r1, r1
    49f2:	4281      	cmp	r1, r0
    49f4:	d3ee      	bcc.n	49d4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    49f6:	71e1      	strb	r1, [r4, #7]
    49f8:	2005      	movs	r0, #5
    49fa:	bd70      	pop	{r4, r5, r6, pc}
    49fc:	200012b0 	.word	0x200012b0

00004a00 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4a00:	b4f0      	push	{r4, r5, r6, r7}
    4a02:	b121      	cbz	r1, 4a0e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4a04:	2901      	cmp	r1, #1
    4a06:	d002      	beq.n	4a0e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4a08:	bcf0      	pop	{r4, r5, r6, r7}
    4a0a:	2000      	movs	r0, #0
    4a0c:	4770      	bx	lr
    4a0e:	4a0f      	ldr	r2, [pc, #60]	; (4a4c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4a10:	2500      	movs	r5, #0
    4a12:	462b      	mov	r3, r5
    4a14:	f64f 74ff 	movw	r4, #65535	; 0xffff
    4a18:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    4a1c:	5c57      	ldrb	r7, [r2, r1]
    4a1e:	e00a      	b.n	4a36 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4a20:	195a      	adds	r2, r3, r5
    4a22:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    4a26:	b292      	uxth	r2, r2
    4a28:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    4a2c:	f1bc 0f00 	cmp.w	ip, #0
    4a30:	d004      	beq.n	4a3c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4a32:	1c5b      	adds	r3, r3, #1
    4a34:	b29b      	uxth	r3, r3
    4a36:	429f      	cmp	r7, r3
    4a38:	d8f2      	bhi.n	4a20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4a3a:	4622      	mov	r2, r4
    4a3c:	8002      	strh	r2, [r0, #0]
    4a3e:	4610      	mov	r0, r2
    4a40:	42a2      	cmp	r2, r4
    4a42:	d0e1      	beq.n	4a08 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    4a44:	bcf0      	pop	{r4, r5, r6, r7}
    4a46:	f000 b835 	b.w	4ab4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4a4a:	0000      	.short	0x0000
    4a4c:	200012b0 	.word	0x200012b0

00004a50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a54:	4606      	mov	r6, r0
    4a56:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4a5a:	460c      	mov	r4, r1
    4a5c:	f243 0702 	movw	r7, #12290	; 0x3002
    4a60:	38ff      	subs	r0, #255	; 0xff
    4a62:	d020      	beq.n	4aa6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4a64:	2c02      	cmp	r4, #2
    4a66:	d302      	bcc.n	4a6e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4a68:	2007      	movs	r0, #7
    4a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a6e:	4630      	mov	r0, r6
    4a70:	f000 f848 	bl	4b04 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4a74:	0005      	movs	r5, r0
    4a76:	d016      	beq.n	4aa6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4a78:	480c      	ldr	r0, [pc, #48]	; (4aac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4a7a:	4629      	mov	r1, r5
    4a7c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4a80:	4630      	mov	r0, r6
    4a82:	4790      	blx	r2
    4a84:	480a      	ldr	r0, [pc, #40]	; (4ab0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4a86:	2100      	movs	r1, #0
    4a88:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4a8c:	68f8      	ldr	r0, [r7, #12]
    4a8e:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4a92:	4620      	mov	r0, r4
    4a94:	f000 f878 	bl	4b88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4a98:	4602      	mov	r2, r0
    4a9a:	4629      	mov	r1, r5
    4a9c:	6878      	ldr	r0, [r7, #4]
    4a9e:	f008 fc63 	bl	d368 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4aa2:	2000      	movs	r0, #0
    4aa4:	e7e1      	b.n	4a6a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4aa6:	4638      	mov	r0, r7
    4aa8:	e7df      	b.n	4a6a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4aaa:	0000      	.short	0x0000
    4aac:	00004bb4 	.word	0x00004bb4
    4ab0:	200012b0 	.word	0x200012b0
    4ab4:	b570      	push	{r4, r5, r6, lr}
    4ab6:	460e      	mov	r6, r1
    4ab8:	4605      	mov	r5, r0
    4aba:	f008 fc8f 	bl	d3dc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4abe:	b158      	cbz	r0, 4ad8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4ac0:	480f      	ldr	r0, [pc, #60]	; (4b00 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    4ac2:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4ac6:	68e0      	ldr	r0, [r4, #12]
    4ac8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4acc:	b138      	cbz	r0, 4ade <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4ace:	f240 118b 	movw	r1, #395	; 0x18b
    4ad2:	2017      	movs	r0, #23
    4ad4:	f7ff fd3a 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ad8:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    4adc:	e7f9      	b.n	4ad2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    4ade:	6860      	ldr	r0, [r4, #4]
    4ae0:	2800      	cmp	r0, #0
    4ae2:	d00b      	beq.n	4afc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4ae4:	4630      	mov	r0, r6
    4ae6:	f000 f84f 	bl	4b88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4aea:	4601      	mov	r1, r0
    4aec:	6860      	ldr	r0, [r4, #4]
    4aee:	f008 fbe3 	bl	d2b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4af2:	2800      	cmp	r0, #0
    4af4:	d002      	beq.n	4afc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4af6:	68e1      	ldr	r1, [r4, #12]
    4af8:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    4afc:	bd70      	pop	{r4, r5, r6, pc}
    4afe:	0000      	.short	0x0000
    4b00:	200012b0 	.word	0x200012b0
    4b04:	b570      	push	{r4, r5, r6, lr}
    4b06:	460c      	mov	r4, r1
    4b08:	4605      	mov	r5, r0
    4b0a:	f008 fc67 	bl	d3dc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4b0e:	2800      	cmp	r0, #0
    4b10:	d005      	beq.n	4b1e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    4b12:	4803      	ldr	r0, [pc, #12]	; (4b20 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4b14:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4b18:	68c0      	ldr	r0, [r0, #12]
    4b1a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4b1e:	bd70      	pop	{r4, r5, r6, pc}
    4b20:	200012b0 	.word	0x200012b0
    4b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b28:	4e16      	ldr	r6, [pc, #88]	; (4b84 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    4b2a:	4688      	mov	r8, r1
    4b2c:	4605      	mov	r5, r0
    4b2e:	2400      	movs	r4, #0
    4b30:	6828      	ldr	r0, [r5, #0]
    4b32:	1cc0      	adds	r0, r0, #3
    4b34:	f020 0003 	bic.w	r0, r0, #3
    4b38:	6028      	str	r0, [r5, #0]
    4b3a:	4620      	mov	r0, r4
    4b3c:	f000 f824 	bl	4b88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4b40:	5d31      	ldrb	r1, [r6, r4]
    4b42:	4348      	muls	r0, r1
    4b44:	f1b8 0f00 	cmp.w	r8, #0
    4b48:	d001      	beq.n	4b4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    4b4a:	2200      	movs	r2, #0
    4b4c:	e000      	b.n	4b50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    4b4e:	682a      	ldr	r2, [r5, #0]
    4b50:	4601      	mov	r1, r0
    4b52:	9200      	str	r2, [sp, #0]
    4b54:	b132      	cbz	r2, 4b64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    4b56:	2700      	movs	r7, #0
    4b58:	ea4f 000d 	mov.w	r0, sp
    4b5c:	f008 fbdd 	bl	d31a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b60:	b11f      	cbz	r7, 4b6a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    4b62:	e006      	b.n	4b72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4b64:	2701      	movs	r7, #1
    4b66:	2000      	movs	r0, #0
    4b68:	e7f8      	b.n	4b5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    4b6a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4b6e:	9a00      	ldr	r2, [sp, #0]
    4b70:	604a      	str	r2, [r1, #4]
    4b72:	6829      	ldr	r1, [r5, #0]
    4b74:	1c64      	adds	r4, r4, #1
    4b76:	4408      	add	r0, r1
    4b78:	b2e4      	uxtb	r4, r4
    4b7a:	6028      	str	r0, [r5, #0]
    4b7c:	2c02      	cmp	r4, #2
    4b7e:	d3d7      	bcc.n	4b30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b84:	200012b0 	.word	0x200012b0
    4b88:	4903      	ldr	r1, [pc, #12]	; (4b98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    4b8a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4b8e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4b92:	1cc0      	adds	r0, r0, #3
    4b94:	4008      	ands	r0, r1
    4b96:	4770      	bx	lr
    4b98:	00004bb0 	.word	0x00004bb0
    4b9c:	4903      	ldr	r1, [pc, #12]	; (4bac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    4b9e:	7808      	ldrb	r0, [r1, #0]
    4ba0:	7849      	ldrb	r1, [r1, #1]
    4ba2:	4288      	cmp	r0, r1
    4ba4:	d200      	bcs.n	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    4ba6:	4608      	mov	r0, r1
    4ba8:	4770      	bx	lr
    4baa:	0000      	.short	0x0000
    4bac:	200012b0 	.word	0x200012b0
    4bb0:	011802e8 	.word	0x011802e8
    4bb4:	0000f209 	.word	0x0000f209
    4bb8:	0000e57d 	.word	0x0000e57d

00004bbc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4bbc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bc0:	4c24      	ldr	r4, [pc, #144]	; (4c54 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    4bc2:	4606      	mov	r6, r0
    4bc4:	b081      	sub	sp, #4
    4bc6:	6820      	ldr	r0, [r4, #0]
    4bc8:	469a      	mov	sl, r3
    4bca:	4693      	mov	fp, r2
    4bcc:	b158      	cbz	r0, 4be6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4bce:	7a01      	ldrb	r1, [r0, #8]
    4bd0:	42b1      	cmp	r1, r6
    4bd2:	d903      	bls.n	4bdc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4bd4:	6840      	ldr	r0, [r0, #4]
    4bd6:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    4bda:	b140      	cbz	r0, 4bee <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4bdc:	f243 0002 	movw	r0, #12290	; 0x3002
    4be0:	b005      	add	sp, #20
    4be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4be6:	21a5      	movs	r1, #165	; 0xa5
    4be8:	2018      	movs	r0, #24
    4bea:	f7ff fcaf 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bee:	4619      	mov	r1, r3
    4bf0:	9802      	ldr	r0, [sp, #8]
    4bf2:	f008 fc16 	bl	d422 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4bf6:	4680      	mov	r8, r0
    4bf8:	4658      	mov	r0, fp
    4bfa:	990e      	ldr	r1, [sp, #56]	; 0x38
    4bfc:	f008 fc07 	bl	d40e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4c00:	4605      	mov	r5, r0
    4c02:	eb08 0005 	add.w	r0, r8, r5
    4c06:	1d00      	adds	r0, r0, #4
    4c08:	b287      	uxth	r7, r0
    4c0a:	6820      	ldr	r0, [r4, #0]
    4c0c:	46a1      	mov	r9, r4
    4c0e:	4639      	mov	r1, r7
    4c10:	6800      	ldr	r0, [r0, #0]
    4c12:	f008 fb51 	bl	d2b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4c16:	0004      	movs	r4, r0
    4c18:	d01a      	beq.n	4c50 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    4c1a:	8067      	strh	r7, [r4, #2]
    4c1c:	8025      	strh	r5, [r4, #0]
    4c1e:	4629      	mov	r1, r5
    4c20:	1d20      	adds	r0, r4, #4
    4c22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4c24:	4607      	mov	r7, r0
    4c26:	465a      	mov	r2, fp
    4c28:	2309      	movs	r3, #9
    4c2a:	9500      	str	r5, [sp, #0]
    4c2c:	f008 faba 	bl	d1a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c30:	8820      	ldrh	r0, [r4, #0]
    4c32:	4641      	mov	r1, r8
    4c34:	4438      	add	r0, r7
    4c36:	230a      	movs	r3, #10
    4c38:	9a02      	ldr	r2, [sp, #8]
    4c3a:	f8cd a000 	str.w	sl, [sp]
    4c3e:	f008 fab1 	bl	d1a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c42:	f8d9 0000 	ldr.w	r0, [r9]
    4c46:	6840      	ldr	r0, [r0, #4]
    4c48:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    4c4c:	2000      	movs	r0, #0
    4c4e:	e7c7      	b.n	4be0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c50:	2004      	movs	r0, #4
    4c52:	e7c5      	b.n	4be0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c54:	200000c0 	.word	0x200000c0

00004c58 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4c58:	b570      	push	{r4, r5, r6, lr}
    4c5a:	4c14      	ldr	r4, [pc, #80]	; (4cac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4c5c:	6823      	ldr	r3, [r4, #0]
    4c5e:	b18b      	cbz	r3, 4c84 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4c60:	7a19      	ldrb	r1, [r3, #8]
    4c62:	4281      	cmp	r1, r0
    4c64:	d912      	bls.n	4c8c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c66:	685a      	ldr	r2, [r3, #4]
    4c68:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4c6c:	b171      	cbz	r1, 4c8c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c6e:	2500      	movs	r5, #0
    4c70:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4c74:	884a      	ldrh	r2, [r1, #2]
    4c76:	6818      	ldr	r0, [r3, #0]
    4c78:	f008 fb76 	bl	d368 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4c7c:	6821      	ldr	r1, [r4, #0]
    4c7e:	2000      	movs	r0, #0
    4c80:	7a0a      	ldrb	r2, [r1, #8]
    4c82:	e00c      	b.n	4c9e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4c84:	21c6      	movs	r1, #198	; 0xc6
    4c86:	2018      	movs	r0, #24
    4c88:	f7ff fc60 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c8c:	f243 0002 	movw	r0, #12290	; 0x3002
    4c90:	bd70      	pop	{r4, r5, r6, pc}
    4c92:	684b      	ldr	r3, [r1, #4]
    4c94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4c98:	b933      	cbnz	r3, 4ca8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4c9a:	1c40      	adds	r0, r0, #1
    4c9c:	b2c0      	uxtb	r0, r0
    4c9e:	4282      	cmp	r2, r0
    4ca0:	d8f7      	bhi.n	4c92 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4ca2:	6808      	ldr	r0, [r1, #0]
    4ca4:	f008 fb55 	bl	d352 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4ca8:	2000      	movs	r0, #0
    4caa:	bd70      	pop	{r4, r5, r6, pc}
    4cac:	200000c0 	.word	0x200000c0

00004cb0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cb4:	460d      	mov	r5, r1
    4cb6:	0004      	movs	r4, r0
    4cb8:	4690      	mov	r8, r2
    4cba:	f04f 0600 	mov.w	r6, #0
    4cbe:	d006      	beq.n	4cce <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    4cc0:	2700      	movs	r7, #0
    4cc2:	07a0      	lsls	r0, r4, #30
    4cc4:	d005      	beq.n	4cd2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    4cc6:	2186      	movs	r1, #134	; 0x86
    4cc8:	2018      	movs	r0, #24
    4cca:	f7ff fc3f 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cce:	2701      	movs	r7, #1
    4cd0:	e7f7      	b.n	4cc2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4cd2:	b1cd      	cbz	r5, 4d08 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4cd4:	4611      	mov	r1, r2
    4cd6:	2000      	movs	r0, #0
    4cd8:	f008 fb1f 	bl	d31a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4cdc:	300c      	adds	r0, #12
    4cde:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4ce2:	b98f      	cbnz	r7, 4d08 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4ce4:	4f0a      	ldr	r7, [pc, #40]	; (4d10 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    4ce6:	f104 000c 	add.w	r0, r4, #12
    4cea:	00aa      	lsls	r2, r5, #2
    4cec:	603c      	str	r4, [r7, #0]
    4cee:	7225      	strb	r5, [r4, #8]
    4cf0:	6060      	str	r0, [r4, #4]
    4cf2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4cf6:	6020      	str	r0, [r4, #0]
    4cf8:	2100      	movs	r1, #0
    4cfa:	6860      	ldr	r0, [r4, #4]
    4cfc:	f007 fc37 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4d00:	4641      	mov	r1, r8
    4d02:	6838      	ldr	r0, [r7, #0]
    4d04:	f008 fb09 	bl	d31a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d08:	4630      	mov	r0, r6
    4d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d0e:	0000      	.short	0x0000
    4d10:	200000c0 	.word	0x200000c0

00004d14 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4d14:	b570      	push	{r4, r5, r6, lr}
    4d16:	4d08      	ldr	r5, [pc, #32]	; (4d38 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4d18:	6828      	ldr	r0, [r5, #0]
    4d1a:	2800      	cmp	r0, #0
    4d1c:	d00a      	beq.n	4d34 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4d1e:	2400      	movs	r4, #0
    4d20:	e004      	b.n	4d2c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4d22:	4620      	mov	r0, r4
    4d24:	f7ff ff98 	bl	4c58 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4d28:	1c64      	adds	r4, r4, #1
    4d2a:	b2e4      	uxtb	r4, r4
    4d2c:	6828      	ldr	r0, [r5, #0]
    4d2e:	7a00      	ldrb	r0, [r0, #8]
    4d30:	42a0      	cmp	r0, r4
    4d32:	d8f6      	bhi.n	4d22 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4d34:	bd70      	pop	{r4, r5, r6, pc}
    4d36:	0000      	.short	0x0000
    4d38:	200000c0 	.word	0x200000c0

00004d3c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4d3c:	4909      	ldr	r1, [pc, #36]	; (4d64 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4d3e:	b510      	push	{r4, lr}
    4d40:	4602      	mov	r2, r0
    4d42:	6809      	ldr	r1, [r1, #0]
    4d44:	2000      	movs	r0, #0
    4d46:	b149      	cbz	r1, 4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4d48:	7a0b      	ldrb	r3, [r1, #8]
    4d4a:	4293      	cmp	r3, r2
    4d4c:	d905      	bls.n	4d5a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d4e:	6849      	ldr	r1, [r1, #4]
    4d50:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4d54:	2900      	cmp	r1, #0
    4d56:	d000      	beq.n	4d5a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d58:	1d08      	adds	r0, r1, #4
    4d5a:	bd10      	pop	{r4, pc}
    4d5c:	21ec      	movs	r1, #236	; 0xec
    4d5e:	2018      	movs	r0, #24
    4d60:	f7ff fbf4 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d64:	200000c0 	.word	0x200000c0

00004d68 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4d68:	490a      	ldr	r1, [pc, #40]	; (4d94 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4d6a:	b510      	push	{r4, lr}
    4d6c:	4602      	mov	r2, r0
    4d6e:	6809      	ldr	r1, [r1, #0]
    4d70:	2000      	movs	r0, #0
    4d72:	b159      	cbz	r1, 4d8c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4d74:	7a0b      	ldrb	r3, [r1, #8]
    4d76:	4293      	cmp	r3, r2
    4d78:	d907      	bls.n	4d8a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4d7a:	6849      	ldr	r1, [r1, #4]
    4d7c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4d80:	2900      	cmp	r1, #0
    4d82:	d002      	beq.n	4d8a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4d84:	f831 0b04 	ldrh.w	r0, [r1], #4
    4d88:	4408      	add	r0, r1
    4d8a:	bd10      	pop	{r4, pc}
    4d8c:	21fa      	movs	r1, #250	; 0xfa
    4d8e:	2018      	movs	r0, #24
    4d90:	f7ff fbdc 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d94:	200000c0 	.word	0x200000c0
    4d98:	b570      	push	{r4, r5, r6, lr}
    4d9a:	4b1e      	ldr	r3, [pc, #120]	; (4e14 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4d9c:	6845      	ldr	r5, [r0, #4]
    4d9e:	4604      	mov	r4, r0
    4da0:	2200      	movs	r2, #0
    4da2:	b1a1      	cbz	r1, 4dce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    4da4:	2001      	movs	r0, #1
    4da6:	7060      	strb	r0, [r4, #1]
    4da8:	8858      	ldrh	r0, [r3, #2]
    4daa:	0881      	lsrs	r1, r0, #2
    4dac:	f05f 0000 	movs.w	r0, #0
    4db0:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4db4:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4db8:	831a      	strh	r2, [r3, #24]
    4dba:	8419      	strh	r1, [r3, #32]
    4dbc:	fb00 5301 	mla	r3, r0, r1, r5
    4dc0:	6073      	str	r3, [r6, #4]
    4dc2:	1823      	adds	r3, r4, r0
    4dc4:	1c40      	adds	r0, r0, #1
    4dc6:	751a      	strb	r2, [r3, #20]
    4dc8:	2804      	cmp	r0, #4
    4dca:	d3f1      	bcc.n	4db0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4dcc:	bd70      	pop	{r4, r5, r6, pc}
    4dce:	7062      	strb	r2, [r4, #1]
    4dd0:	f05f 0000 	movs.w	r0, #0
    4dd4:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4dd8:	830a      	strh	r2, [r1, #24]
    4dda:	840a      	strh	r2, [r1, #32]
    4ddc:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4de0:	604a      	str	r2, [r1, #4]
    4de2:	1821      	adds	r1, r4, r0
    4de4:	1c40      	adds	r0, r0, #1
    4de6:	750a      	strb	r2, [r1, #20]
    4de8:	2804      	cmp	r0, #4
    4dea:	d3f3      	bcc.n	4dd4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4dec:	8858      	ldrh	r0, [r3, #2]
    4dee:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4df2:	d201      	bcs.n	4df8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4df4:	0846      	lsrs	r6, r0, #1
    4df6:	e000      	b.n	4dfa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    4df8:	26ff      	movs	r6, #255	; 0xff
    4dfa:	f008 fb86 	bl	d50a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4dfe:	6065      	str	r5, [r4, #4]
    4e00:	8420      	strh	r0, [r4, #32]
    4e02:	1829      	adds	r1, r5, r0
    4e04:	60a1      	str	r1, [r4, #8]
    4e06:	8466      	strh	r6, [r4, #34]	; 0x22
    4e08:	60e5      	str	r5, [r4, #12]
    4e0a:	84a0      	strh	r0, [r4, #36]	; 0x24
    4e0c:	6121      	str	r1, [r4, #16]
    4e0e:	84e6      	strh	r6, [r4, #38]	; 0x26
    4e10:	bd70      	pop	{r4, r5, r6, pc}
    4e12:	0000      	.short	0x0000
    4e14:	200000c4 	.word	0x200000c4

00004e18 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e1c:	b158      	cbz	r0, 4e36 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4e1e:	2500      	movs	r5, #0
    4e20:	4411      	add	r1, r2
    4e22:	4e24      	ldr	r6, [pc, #144]	; (4eb4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    4e24:	b2cc      	uxtb	r4, r1
    4e26:	2700      	movs	r7, #0
    4e28:	7034      	strb	r4, [r6, #0]
    4e2a:	0781      	lsls	r1, r0, #30
    4e2c:	d005      	beq.n	4e3a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    4e2e:	214e      	movs	r1, #78	; 0x4e
    4e30:	2009      	movs	r0, #9
    4e32:	f7ff fb8b 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e36:	2501      	movs	r5, #1
    4e38:	e7f2      	b.n	4e20 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4e3a:	2b1f      	cmp	r3, #31
    4e3c:	d804      	bhi.n	4e48 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    4e3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4e42:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4e46:	e009      	b.n	4e5c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    4e48:	0059      	lsls	r1, r3, #1
    4e4a:	2bff      	cmp	r3, #255	; 0xff
    4e4c:	d90c      	bls.n	4e68 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    4e4e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4e52:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4e56:	d200      	bcs.n	4e5a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e58:	4611      	mov	r1, r2
    4e5a:	b289      	uxth	r1, r1
    4e5c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4e60:	1cc9      	adds	r1, r1, #3
    4e62:	4011      	ands	r1, r2
    4e64:	b135      	cbz	r5, 4e74 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    4e66:	e007      	b.n	4e78 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    4e68:	227c      	movs	r2, #124	; 0x7c
    4e6a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4e6e:	d3f4      	bcc.n	4e5a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e70:	217c      	movs	r1, #124	; 0x7c
    4e72:	e7f2      	b.n	4e5a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e74:	6070      	str	r0, [r6, #4]
    4e76:	8071      	strh	r1, [r6, #2]
    4e78:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4e7c:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    4e80:	2200      	movs	r2, #0
    4e82:	6876      	ldr	r6, [r6, #4]
    4e84:	f04f 0c01 	mov.w	ip, #1
    4e88:	e00d      	b.n	4ea6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    4e8a:	b94d      	cbnz	r5, 4ea0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    4e8c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    4e90:	eb00 0e03 	add.w	lr, r0, r3
    4e94:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4e98:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    4e9c:	f8c7 e004 	str.w	lr, [r7, #4]
    4ea0:	1c52      	adds	r2, r2, #1
    4ea2:	440b      	add	r3, r1
    4ea4:	b2d2      	uxtb	r2, r2
    4ea6:	42a2      	cmp	r2, r4
    4ea8:	d3ef      	bcc.n	4e8a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    4eaa:	1ddb      	adds	r3, r3, #7
    4eac:	f023 0007 	bic.w	r0, r3, #7
    4eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4eb4:	200000c4 	.word	0x200000c4

00004eb8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	4a10      	ldr	r2, [pc, #64]	; (4efc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4ebc:	2000      	movs	r0, #0
    4ebe:	6851      	ldr	r1, [r2, #4]
    4ec0:	7812      	ldrb	r2, [r2, #0]
    4ec2:	e014      	b.n	4eee <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    4ec4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4ec8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    4ecc:	b16b      	cbz	r3, 4eea <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    4ece:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4ed2:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    4ed6:	d00c      	beq.n	4ef2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4ed8:	2500      	movs	r5, #0
    4eda:	70a5      	strb	r5, [r4, #2]
    4edc:	2101      	movs	r1, #1
    4ede:	4620      	mov	r0, r4
    4ee0:	f7ff ff5a 	bl	4d98 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4ee4:	7025      	strb	r5, [r4, #0]
    4ee6:	4620      	mov	r0, r4
    4ee8:	bd70      	pop	{r4, r5, r6, pc}
    4eea:	1c40      	adds	r0, r0, #1
    4eec:	b2c0      	uxtb	r0, r0
    4eee:	4290      	cmp	r0, r2
    4ef0:	d3e8      	bcc.n	4ec4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4ef2:	21a9      	movs	r1, #169	; 0xa9
    4ef4:	2009      	movs	r0, #9
    4ef6:	f7ff fb29 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4efa:	0000      	.short	0x0000
    4efc:	200000c4 	.word	0x200000c4

00004f00 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4f00:	4804      	ldr	r0, [pc, #16]	; (4f14 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    4f02:	b510      	push	{r4, lr}
    4f04:	8840      	ldrh	r0, [r0, #2]
    4f06:	0884      	lsrs	r4, r0, #2
    4f08:	f008 faff 	bl	d50a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4f0c:	4284      	cmp	r4, r0
    4f0e:	d300      	bcc.n	4f12 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4f10:	4620      	mov	r0, r4
    4f12:	bd10      	pop	{r4, pc}
    4f14:	200000c4 	.word	0x200000c4
    4f18:	b530      	push	{r4, r5, lr}
    4f1a:	490d      	ldr	r1, [pc, #52]	; (4f50 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    4f1c:	2001      	movs	r0, #1
    4f1e:	6048      	str	r0, [r1, #4]
    4f20:	1e82      	subs	r2, r0, #2
    4f22:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f26:	490b      	ldr	r1, [pc, #44]	; (4f54 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    4f28:	6088      	str	r0, [r1, #8]
    4f2a:	2300      	movs	r3, #0
    4f2c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4f30:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f34:	4c08      	ldr	r4, [pc, #32]	; (4f58 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    4f36:	6023      	str	r3, [r4, #0]
    4f38:	1d25      	adds	r5, r4, #4
    4f3a:	6028      	str	r0, [r5, #0]
    4f3c:	6088      	str	r0, [r1, #8]
    4f3e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f42:	6023      	str	r3, [r4, #0]
    4f44:	6028      	str	r0, [r5, #0]
    4f46:	4906      	ldr	r1, [pc, #24]	; (4f60 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    4f48:	4804      	ldr	r0, [pc, #16]	; (4f5c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    4f4a:	6008      	str	r0, [r1, #0]
    4f4c:	bd30      	pop	{r4, r5, pc}
    4f4e:	0000      	.short	0x0000
    4f50:	4000e000 	.word	0x4000e000
    4f54:	4000f000 	.word	0x4000f000
    4f58:	4000f500 	.word	0x4000f500
    4f5c:	3ff60000 	.word	0x3ff60000
    4f60:	4001f508 	.word	0x4001f508

00004f64 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    4f64:	b510      	push	{r4, lr}
    4f66:	f7ff ffd7 	bl	4f18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4f6a:	f008 fba1 	bl	d6b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4f6e:	4903      	ldr	r1, [pc, #12]	; (4f7c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    4f70:	4801      	ldr	r0, [pc, #4]	; (4f78 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    4f72:	6008      	str	r0, [r1, #0]
    4f74:	bd10      	pop	{r4, pc}
    4f76:	0000      	.short	0x0000
    4f78:	3ff60000 	.word	0x3ff60000
    4f7c:	4001f508 	.word	0x4001f508

00004f80 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4f80:	b510      	push	{r4, lr}
    4f82:	4604      	mov	r4, r0
    4f84:	f7ff ffc8 	bl	4f18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4f88:	f008 fb92 	bl	d6b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4f8c:	f000 f888 	bl	50a0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4f90:	4905      	ldr	r1, [pc, #20]	; (4fa8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    4f92:	4804      	ldr	r0, [pc, #16]	; (4fa4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    4f94:	6008      	str	r0, [r1, #0]
    4f96:	4620      	mov	r0, r4
    4f98:	f000 f8b8 	bl	510c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fa0:	f000 b8dc 	b.w	515c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4fa4:	3ff60000 	.word	0x3ff60000
    4fa8:	4001f508 	.word	0x4001f508
    4fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fb0:	4682      	mov	sl, r0
    4fb2:	4838      	ldr	r0, [pc, #224]	; (5094 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4fb4:	f007 f9ca 	bl	c34c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4fb8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 5094 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    4fbc:	b128      	cbz	r0, 4fca <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    4fbe:	2601      	movs	r6, #1
    4fc0:	f10b 0001 	add.w	r0, fp, #1
    4fc4:	21ff      	movs	r1, #255	; 0xff
    4fc6:	7001      	strb	r1, [r0, #0]
    4fc8:	e000      	b.n	4fcc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    4fca:	2600      	movs	r6, #0
    4fcc:	f44f 7580 	mov.w	r5, #256	; 0x100
    4fd0:	4c31      	ldr	r4, [pc, #196]	; (5098 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    4fd2:	f04f 0800 	mov.w	r8, #0
    4fd6:	1d2f      	adds	r7, r5, #4
    4fd8:	2101      	movs	r1, #1
    4fda:	6061      	str	r1, [r4, #4]
    4fdc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4fe0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4fe4:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    4fe8:	6021      	str	r1, [r4, #0]
    4fea:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 509c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    4fee:	e01c      	b.n	502a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4ff0:	f8d9 0000 	ldr.w	r0, [r9]
    4ff4:	06c0      	lsls	r0, r0, #27
    4ff6:	d518      	bpl.n	502a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4ff8:	200e      	movs	r0, #14
    4ffa:	f008 fb68 	bl	d6ce <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4ffe:	f3ef 8010 	mrs	r0, PRIMASK
    5002:	9000      	str	r0, [sp, #0]
    5004:	b672      	cpsid	i
    5006:	2103      	movs	r1, #3
    5008:	4620      	mov	r0, r4
    500a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    500e:	4629      	mov	r1, r5
    5010:	f008 fb6a 	bl	d6e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5014:	b930      	cbnz	r0, 5024 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5016:	4639      	mov	r1, r7
    5018:	4620      	mov	r0, r4
    501a:	f008 fb65 	bl	d6e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    501e:	b908      	cbnz	r0, 5024 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5020:	f7ff f8f0 	bl	4204 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5024:	9800      	ldr	r0, [sp, #0]
    5026:	b900      	cbnz	r0, 502a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5028:	b662      	cpsie	i
    502a:	4629      	mov	r1, r5
    502c:	4620      	mov	r0, r4
    502e:	f008 fb5b 	bl	d6e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5032:	b928      	cbnz	r0, 5040 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    5034:	4639      	mov	r1, r7
    5036:	4620      	mov	r0, r4
    5038:	f008 fb56 	bl	d6e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    503c:	2800      	cmp	r0, #0
    503e:	d0d7      	beq.n	4ff0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    5040:	4639      	mov	r1, r7
    5042:	4620      	mov	r0, r4
    5044:	f008 fb50 	bl	d6e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5048:	2800      	cmp	r0, #0
    504a:	d1c5      	bne.n	4fd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    504c:	bb06      	cbnz	r6, 5090 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    504e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    5052:	f88d 1000 	strb.w	r1, [sp]
    5056:	9900      	ldr	r1, [sp, #0]
    5058:	9100      	str	r1, [sp, #0]
    505a:	f89d 1000 	ldrb.w	r1, [sp]
    505e:	b109      	cbz	r1, 5064 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5060:	2501      	movs	r5, #1
    5062:	e000      	b.n	5066 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    5064:	2500      	movs	r5, #0
    5066:	f10b 0001 	add.w	r0, fp, #1
    506a:	f880 8000 	strb.w	r8, [r0]
    506e:	2003      	movs	r0, #3
    5070:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5074:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5078:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    507c:	200e      	movs	r0, #14
    507e:	f008 fb26 	bl	d6ce <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5082:	4804      	ldr	r0, [pc, #16]	; (5094 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5084:	f007 f979 	bl	c37a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5088:	b115      	cbz	r5, 5090 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    508a:	2011      	movs	r0, #17
    508c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5090:	2000      	movs	r0, #0
    5092:	e7fb      	b.n	508c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    5094:	20000358 	.word	0x20000358
    5098:	4000e000 	.word	0x4000e000
    509c:	e000ed10 	.word	0xe000ed10

000050a0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    50a0:	b510      	push	{r4, lr}
    50a2:	4806      	ldr	r0, [pc, #24]	; (50bc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    50a4:	f007 f965 	bl	c372 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    50a8:	b118      	cbz	r0, 50b2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    50aa:	2127      	movs	r1, #39	; 0x27
    50ac:	201d      	movs	r0, #29
    50ae:	f7ff fa4d 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50b2:	4802      	ldr	r0, [pc, #8]	; (50bc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    50b4:	2100      	movs	r1, #0
    50b6:	7041      	strb	r1, [r0, #1]
    50b8:	bd10      	pop	{r4, pc}
    50ba:	0000      	.short	0x0000
    50bc:	20000358 	.word	0x20000358

000050c0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    50c0:	b570      	push	{r4, r5, r6, lr}
    50c2:	4911      	ldr	r1, [pc, #68]	; (5108 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    50c4:	680a      	ldr	r2, [r1, #0]
    50c6:	b1ea      	cbz	r2, 5104 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    50c8:	2300      	movs	r3, #0
    50ca:	461d      	mov	r5, r3
    50cc:	2401      	movs	r4, #1
    50ce:	684a      	ldr	r2, [r1, #4]
    50d0:	1c52      	adds	r2, r2, #1
    50d2:	604a      	str	r2, [r1, #4]
    50d4:	2a09      	cmp	r2, #9
    50d6:	d300      	bcc.n	50da <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    50d8:	604d      	str	r5, [r1, #4]
    50da:	790e      	ldrb	r6, [r1, #4]
    50dc:	fa04 f206 	lsl.w	r2, r4, r6
    50e0:	680e      	ldr	r6, [r1, #0]
    50e2:	4216      	tst	r6, r2
    50e4:	d00b      	beq.n	50fe <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    50e6:	f3ef 8310 	mrs	r3, PRIMASK
    50ea:	b672      	cpsid	i
    50ec:	680c      	ldr	r4, [r1, #0]
    50ee:	4394      	bics	r4, r2
    50f0:	600c      	str	r4, [r1, #0]
    50f2:	b903      	cbnz	r3, 50f6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    50f4:	b662      	cpsie	i
    50f6:	6849      	ldr	r1, [r1, #4]
    50f8:	6001      	str	r1, [r0, #0]
    50fa:	2000      	movs	r0, #0
    50fc:	bd70      	pop	{r4, r5, r6, pc}
    50fe:	1c5b      	adds	r3, r3, #1
    5100:	2b09      	cmp	r3, #9
    5102:	d3e4      	bcc.n	50ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5104:	2005      	movs	r0, #5
    5106:	bd70      	pop	{r4, r5, r6, pc}
    5108:	200000cc 	.word	0x200000cc

0000510c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    510c:	4802      	ldr	r0, [pc, #8]	; (5118 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    510e:	2100      	movs	r1, #0
    5110:	6001      	str	r1, [r0, #0]
    5112:	6041      	str	r1, [r0, #4]
    5114:	4770      	bx	lr
    5116:	0000      	.short	0x0000
    5118:	200000cc 	.word	0x200000cc

0000511c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    511c:	b510      	push	{r4, lr}
    511e:	4c04      	ldr	r4, [pc, #16]	; (5130 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    5120:	7820      	ldrb	r0, [r4, #0]
    5122:	28ff      	cmp	r0, #255	; 0xff
    5124:	d003      	beq.n	512e <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    5126:	f7ff f823 	bl	4170 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    512a:	20ff      	movs	r0, #255	; 0xff
    512c:	7020      	strb	r0, [r4, #0]
    512e:	bd10      	pop	{r4, pc}
    5130:	20000000 	.word	0x20000000

00005134 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5134:	b510      	push	{r4, lr}
    5136:	4c08      	ldr	r4, [pc, #32]	; (5158 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5138:	7861      	ldrb	r1, [r4, #1]
    513a:	b109      	cbz	r1, 5140 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    513c:	200f      	movs	r0, #15
    513e:	bd10      	pop	{r4, pc}
    5140:	f7fe ffdc 	bl	40fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5144:	7020      	strb	r0, [r4, #0]
    5146:	28ff      	cmp	r0, #255	; 0xff
    5148:	d001      	beq.n	514e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    514a:	2000      	movs	r0, #0
    514c:	bd10      	pop	{r4, pc}
    514e:	2178      	movs	r1, #120	; 0x78
    5150:	201f      	movs	r0, #31
    5152:	f7ff f9fb 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5156:	0000      	.short	0x0000
    5158:	20000000 	.word	0x20000000

0000515c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    515c:	4901      	ldr	r1, [pc, #4]	; (5164 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    515e:	2000      	movs	r0, #0
    5160:	7048      	strb	r0, [r1, #1]
    5162:	4770      	bx	lr
    5164:	20000000 	.word	0x20000000

00005168 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5168:	4806      	ldr	r0, [pc, #24]	; (5184 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    516a:	4a07      	ldr	r2, [pc, #28]	; (5188 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    516c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    516e:	8852      	ldrh	r2, [r2, #2]
    5170:	4291      	cmp	r1, r2
    5172:	d104      	bne.n	517e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5174:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5178:	b108      	cbz	r0, 517e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    517a:	2000      	movs	r0, #0
    517c:	4770      	bx	lr
    517e:	2001      	movs	r0, #1
    5180:	4770      	bx	lr
    5182:	0000      	.short	0x0000
    5184:	20001360 	.word	0x20001360
    5188:	20000344 	.word	0x20000344

0000518c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    518c:	4901      	ldr	r1, [pc, #4]	; (5194 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    518e:	8048      	strh	r0, [r1, #2]
    5190:	4770      	bx	lr
    5192:	0000      	.short	0x0000
    5194:	20000344 	.word	0x20000344

00005198 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5198:	4808      	ldr	r0, [pc, #32]	; (51bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    519a:	4a09      	ldr	r2, [pc, #36]	; (51c0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    519c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    519e:	8852      	ldrh	r2, [r2, #2]
    51a0:	4291      	cmp	r1, r2
    51a2:	d109      	bne.n	51b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    51a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    51a8:	8481      	strh	r1, [r0, #36]	; 0x24
    51aa:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    51ae:	b119      	cbz	r1, 51b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    51b0:	2100      	movs	r1, #0
    51b2:	7001      	strb	r1, [r0, #0]
    51b4:	2001      	movs	r0, #1
    51b6:	4770      	bx	lr
    51b8:	2000      	movs	r0, #0
    51ba:	4770      	bx	lr
    51bc:	20001360 	.word	0x20001360
    51c0:	20000344 	.word	0x20000344

000051c4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    51c4:	4807      	ldr	r0, [pc, #28]	; (51e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    51c6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    51ca:	2901      	cmp	r1, #1
    51cc:	d007      	beq.n	51de <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    51ce:	2101      	movs	r1, #1
    51d0:	7001      	strb	r1, [r0, #0]
    51d2:	4805      	ldr	r0, [pc, #20]	; (51e8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    51d4:	4903      	ldr	r1, [pc, #12]	; (51e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    51d6:	8800      	ldrh	r0, [r0, #0]
    51d8:	8488      	strh	r0, [r1, #36]	; 0x24
    51da:	2001      	movs	r0, #1
    51dc:	4770      	bx	lr
    51de:	2000      	movs	r0, #0
    51e0:	4770      	bx	lr
    51e2:	0000      	.short	0x0000
    51e4:	20001360 	.word	0x20001360
    51e8:	20000344 	.word	0x20000344

000051ec <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    51ec:	4906      	ldr	r1, [pc, #24]	; (5208 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    51ee:	4b07      	ldr	r3, [pc, #28]	; (520c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    51f0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    51f2:	885b      	ldrh	r3, [r3, #2]
    51f4:	429a      	cmp	r2, r3
    51f6:	d105      	bne.n	5204 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    51f8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    51fc:	b112      	cbz	r2, 5204 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    51fe:	6001      	str	r1, [r0, #0]
    5200:	2001      	movs	r0, #1
    5202:	4770      	bx	lr
    5204:	2000      	movs	r0, #0
    5206:	4770      	bx	lr
    5208:	20001360 	.word	0x20001360
    520c:	20000344 	.word	0x20000344

00005210 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5210:	4909      	ldr	r1, [pc, #36]	; (5238 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5212:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5214:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5218:	3bff      	subs	r3, #255	; 0xff
    521a:	d002      	beq.n	5222 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    521c:	2100      	movs	r1, #0
    521e:	6001      	str	r1, [r0, #0]
    5220:	e007      	b.n	5232 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5222:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5226:	4904      	ldr	r1, [pc, #16]	; (5238 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5228:	2a01      	cmp	r2, #1
    522a:	d002      	beq.n	5232 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    522c:	6001      	str	r1, [r0, #0]
    522e:	2001      	movs	r0, #1
    5230:	4770      	bx	lr
    5232:	2000      	movs	r0, #0
    5234:	4770      	bx	lr
    5236:	0000      	.short	0x0000
    5238:	20001360 	.word	0x20001360

0000523c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    523c:	4901      	ldr	r1, [pc, #4]	; (5244 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    523e:	8008      	strh	r0, [r1, #0]
    5240:	4770      	bx	lr
    5242:	0000      	.short	0x0000
    5244:	20000344 	.word	0x20000344

00005248 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5248:	4905      	ldr	r1, [pc, #20]	; (5260 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    524a:	2000      	movs	r0, #0
    524c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5250:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5254:	8488      	strh	r0, [r1, #36]	; 0x24
    5256:	4903      	ldr	r1, [pc, #12]	; (5264 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5258:	8008      	strh	r0, [r1, #0]
    525a:	8048      	strh	r0, [r1, #2]
    525c:	4770      	bx	lr
    525e:	0000      	.short	0x0000
    5260:	20001360 	.word	0x20001360
    5264:	20000344 	.word	0x20000344
    5268:	4905      	ldr	r1, [pc, #20]	; (5280 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    526a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    526c:	4282      	cmp	r2, r0
    526e:	d105      	bne.n	527c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5270:	2000      	movs	r0, #0
    5272:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5276:	f64f 70ff 	movw	r0, #65535	; 0xffff
    527a:	8488      	strh	r0, [r1, #36]	; 0x24
    527c:	4770      	bx	lr
    527e:	0000      	.short	0x0000
    5280:	20001360 	.word	0x20001360

00005284 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5284:	4a0a      	ldr	r2, [pc, #40]	; (52b0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5286:	b110      	cbz	r0, 528e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5288:	2801      	cmp	r0, #1
    528a:	d007      	beq.n	529c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    528c:	e00e      	b.n	52ac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    528e:	7850      	ldrb	r0, [r2, #1]
    5290:	b160      	cbz	r0, 52ac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5292:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5296:	6008      	str	r0, [r1, #0]
    5298:	88d0      	ldrh	r0, [r2, #6]
    529a:	e004      	b.n	52a6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    529c:	7810      	ldrb	r0, [r2, #0]
    529e:	b128      	cbz	r0, 52ac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52a0:	6890      	ldr	r0, [r2, #8]
    52a2:	6008      	str	r0, [r1, #0]
    52a4:	8990      	ldrh	r0, [r2, #12]
    52a6:	8088      	strh	r0, [r1, #4]
    52a8:	2001      	movs	r0, #1
    52aa:	4770      	bx	lr
    52ac:	2000      	movs	r0, #0
    52ae:	4770      	bx	lr
    52b0:	2000035a 	.word	0x2000035a

000052b4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    52b4:	4a08      	ldr	r2, [pc, #32]	; (52d8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    52b6:	2301      	movs	r3, #1
    52b8:	b138      	cbz	r0, 52ca <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    52ba:	2801      	cmp	r0, #1
    52bc:	d104      	bne.n	52c8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    52be:	7013      	strb	r3, [r2, #0]
    52c0:	6808      	ldr	r0, [r1, #0]
    52c2:	6090      	str	r0, [r2, #8]
    52c4:	8888      	ldrh	r0, [r1, #4]
    52c6:	8190      	strh	r0, [r2, #12]
    52c8:	4770      	bx	lr
    52ca:	7053      	strb	r3, [r2, #1]
    52cc:	6808      	ldr	r0, [r1, #0]
    52ce:	f8c2 0002 	str.w	r0, [r2, #2]
    52d2:	8888      	ldrh	r0, [r1, #4]
    52d4:	80d0      	strh	r0, [r2, #6]
    52d6:	4770      	bx	lr
    52d8:	2000035a 	.word	0x2000035a

000052dc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    52dc:	4906      	ldr	r1, [pc, #24]	; (52f8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    52de:	b110      	cbz	r0, 52e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    52e0:	2801      	cmp	r0, #1
    52e2:	d002      	beq.n	52ea <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    52e4:	e005      	b.n	52f2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    52e6:	7848      	ldrb	r0, [r1, #1]
    52e8:	e000      	b.n	52ec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    52ea:	7808      	ldrb	r0, [r1, #0]
    52ec:	b108      	cbz	r0, 52f2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    52ee:	2001      	movs	r0, #1
    52f0:	4770      	bx	lr
    52f2:	2000      	movs	r0, #0
    52f4:	4770      	bx	lr
    52f6:	0000      	.short	0x0000
    52f8:	2000035a 	.word	0x2000035a

000052fc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    52fc:	4901      	ldr	r1, [pc, #4]	; (5304 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    52fe:	7708      	strb	r0, [r1, #28]
    5300:	4770      	bx	lr
    5302:	0000      	.short	0x0000
    5304:	20000bea 	.word	0x20000bea

00005308 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5308:	4801      	ldr	r0, [pc, #4]	; (5310 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    530a:	78c0      	ldrb	r0, [r0, #3]
    530c:	4770      	bx	lr
    530e:	0000      	.short	0x0000
    5310:	200000d4 	.word	0x200000d4

00005314 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5314:	4801      	ldr	r0, [pc, #4]	; (531c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5316:	7900      	ldrb	r0, [r0, #4]
    5318:	4770      	bx	lr
    531a:	0000      	.short	0x0000
    531c:	200000d4 	.word	0x200000d4

00005320 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5320:	b510      	push	{r4, lr}
    5322:	4604      	mov	r4, r0
    5324:	f000 f944 	bl	55b0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5328:	b118      	cbz	r0, 5332 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    532a:	21c5      	movs	r1, #197	; 0xc5
    532c:	2027      	movs	r0, #39	; 0x27
    532e:	f7ff f90d 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5332:	4803      	ldr	r0, [pc, #12]	; (5340 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5334:	2101      	movs	r1, #1
    5336:	f008 fdfc 	bl	df32 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    533a:	4802      	ldr	r0, [pc, #8]	; (5344 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    533c:	62c4      	str	r4, [r0, #44]	; 0x2c
    533e:	bd10      	pop	{r4, pc}
    5340:	20000bc8 	.word	0x20000bc8
    5344:	200000d4 	.word	0x200000d4

00005348 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5348:	4901      	ldr	r1, [pc, #4]	; (5350 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    534a:	2001      	movs	r0, #1
    534c:	7188      	strb	r0, [r1, #6]
    534e:	4770      	bx	lr
    5350:	200000d4 	.word	0x200000d4

00005354 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5358:	4c5d      	ldr	r4, [pc, #372]	; (54d0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    535a:	9d06      	ldr	r5, [sp, #24]
    535c:	7826      	ldrb	r6, [r4, #0]
    535e:	2e00      	cmp	r6, #0
    5360:	d16a      	bne.n	5438 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5362:	2a00      	cmp	r2, #0
    5364:	d068      	beq.n	5438 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5366:	2b00      	cmp	r3, #0
    5368:	d066      	beq.n	5438 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    536a:	2d00      	cmp	r5, #0
    536c:	d064      	beq.n	5438 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    536e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5372:	f104 0614 	add.w	r6, r4, #20
    5376:	2000      	movs	r0, #0
    5378:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    537c:	71a0      	strb	r0, [r4, #6]
    537e:	7160      	strb	r0, [r4, #5]
    5380:	70e0      	strb	r0, [r4, #3]
    5382:	70a0      	strb	r0, [r4, #2]
    5384:	7120      	strb	r0, [r4, #4]
    5386:	81a0      	strh	r0, [r4, #12]
    5388:	81e0      	strh	r0, [r4, #14]
    538a:	f000 f955 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    538e:	4606      	mov	r6, r0
    5390:	f000 f94c 	bl	562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5394:	4605      	mov	r5, r0
    5396:	f005 fd87 	bl	aea8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    539a:	f005 fadf 	bl	a95c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    539e:	f995 006e 	ldrsb.w	r0, [r5, #110]	; 0x6e
    53a2:	f005 fe05 	bl	afb0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    53a6:	69e8      	ldr	r0, [r5, #28]
    53a8:	f005 fed8 	bl	b15c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    53ac:	6968      	ldr	r0, [r5, #20]
    53ae:	f005 fecb 	bl	b148 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    53b2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    53b6:	f005 ff01 	bl	b1bc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    53ba:	f104 0038 	add.w	r0, r4, #56	; 0x38
    53be:	6840      	ldr	r0, [r0, #4]
    53c0:	f890 020c 	ldrb.w	r0, [r0, #524]	; 0x20c
    53c4:	b108      	cbz	r0, 53ca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    53c6:	f005 fcef 	bl	ada8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    53ca:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    53ce:	2001      	movs	r0, #1
    53d0:	f005 fc2e 	bl	ac30 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    53d4:	2800      	cmp	r0, #0
    53d6:	d074      	beq.n	54c2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    53d8:	483e      	ldr	r0, [pc, #248]	; (54d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    53da:	f005 fc95 	bl	ad08 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    53de:	8828      	ldrh	r0, [r5, #0]
    53e0:	f7ff fcc2 	bl	4d68 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    53e4:	6320      	str	r0, [r4, #48]	; 0x30
    53e6:	8828      	ldrh	r0, [r5, #0]
    53e8:	f7ff fca8 	bl	4d3c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    53ec:	6360      	str	r0, [r4, #52]	; 0x34
    53ee:	f106 0080 	add.w	r0, r6, #128	; 0x80
    53f2:	3680      	adds	r6, #128	; 0x80
    53f4:	4938      	ldr	r1, [pc, #224]	; (54d8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    53f6:	e896 108c 	ldmia.w	r6, {r2, r3, r7, ip}
    53fa:	f101 0808 	add.w	r8, r1, #8
    53fe:	3e80      	subs	r6, #128	; 0x80
    5400:	e888 108c 	stmia.w	r8, {r2, r3, r7, ip}
    5404:	6902      	ldr	r2, [r0, #16]
    5406:	f8c1 2021 	str.w	r2, [r1, #33]	; 0x21
    540a:	6940      	ldr	r0, [r0, #20]
    540c:	f8c1 0025 	str.w	r0, [r1, #37]	; 0x25
    5410:	f000 f972 	bl	56f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    5414:	4601      	mov	r1, r0
    5416:	8f28      	ldrh	r0, [r5, #56]	; 0x38
    5418:	f008 faed 	bl	d9f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    541c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
    541e:	4281      	cmp	r1, r0
    5420:	d200      	bcs.n	5424 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    5422:	4608      	mov	r0, r1
    5424:	7220      	strb	r0, [r4, #8]
    5426:	46a0      	mov	r8, r4
    5428:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    542c:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
    542e:	7ef7      	ldrb	r7, [r6, #27]
    5430:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    5432:	2908      	cmp	r1, #8
    5434:	d104      	bne.n	5440 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5436:	e002      	b.n	543e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    5438:	f240 111d 	movw	r1, #285	; 0x11d
    543c:	e045      	b.n	54ca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    543e:	2104      	movs	r1, #4
    5440:	f008 fad9 	bl	d9f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5444:	b90f      	cbnz	r7, 544a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    5446:	1d00      	adds	r0, r0, #4
    5448:	b280      	uxth	r0, r0
    544a:	4284      	cmp	r4, r0
    544c:	d200      	bcs.n	5450 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    544e:	4620      	mov	r0, r4
    5450:	b2c4      	uxtb	r4, r0
    5452:	f888 4009 	strb.w	r4, [r8, #9]
    5456:	7ef1      	ldrb	r1, [r6, #27]
    5458:	2900      	cmp	r1, #0
    545a:	d001      	beq.n	5460 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    545c:	f04f 0104 	mov.w	r1, #4
    5460:	4421      	add	r1, r4
    5462:	f888 1007 	strb.w	r1, [r8, #7]
    5466:	d014      	beq.n	5492 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    5468:	481b      	ldr	r0, [pc, #108]	; (54d8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    546a:	f04f 0701 	mov.w	r7, #1
    546e:	f100 0008 	add.w	r0, r0, #8
    5472:	7607      	strb	r7, [r0, #24]
    5474:	e9d6 121e 	ldrd	r1, r2, [r6, #120]	; 0x78
    5478:	e9c0 1204 	strd	r1, r2, [r0, #16]
    547c:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    5480:	f008 f9be 	bl	d800 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5484:	4914      	ldr	r1, [pc, #80]	; (54d8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5486:	4603      	mov	r3, r0
    5488:	4622      	mov	r2, r4
    548a:	3108      	adds	r1, #8
    548c:	4638      	mov	r0, r7
    548e:	f005 f9d1 	bl	a834 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5492:	2001      	movs	r0, #1
    5494:	f000 fb88 	bl	5ba8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>
    5498:	4810      	ldr	r0, [pc, #64]	; (54dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    549a:	6800      	ldr	r0, [r0, #0]
    549c:	2803      	cmp	r0, #3
    549e:	d012      	beq.n	54c6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    54a0:	280b      	cmp	r0, #11
    54a2:	d010      	beq.n	54c6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    54a4:	480c      	ldr	r0, [pc, #48]	; (54d8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    54a6:	220e      	movs	r2, #14
    54a8:	2100      	movs	r1, #0
    54aa:	3052      	adds	r0, #82	; 0x52
    54ac:	f007 f85f 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    54b0:	4809      	ldr	r0, [pc, #36]	; (54d8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    54b2:	89b1      	ldrh	r1, [r6, #12]
    54b4:	3052      	adds	r0, #82	; 0x52
    54b6:	8041      	strh	r1, [r0, #2]
    54b8:	8829      	ldrh	r1, [r5, #0]
    54ba:	8001      	strh	r1, [r0, #0]
    54bc:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
    54c0:	7101      	strb	r1, [r0, #4]
    54c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54c6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    54ca:	2027      	movs	r0, #39	; 0x27
    54cc:	f7ff f83e 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54d0:	200000d4 	.word	0x200000d4
    54d4:	00005da8 	.word	0x00005da8
    54d8:	20000b98 	.word	0x20000b98
    54dc:	40001550 	.word	0x40001550

000054e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    54e0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    54e4:	468a      	mov	sl, r1
    54e6:	4606      	mov	r6, r0
    54e8:	f000 f8a6 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    54ec:	4d2b      	ldr	r5, [pc, #172]	; (559c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>)
    54ee:	4604      	mov	r4, r0
    54f0:	f04f 0800 	mov.w	r8, #0
    54f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    54f6:	7847      	ldrb	r7, [r0, #1]
    54f8:	b10e      	cbz	r6, 54fe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1e>
    54fa:	2e01      	cmp	r6, #1
    54fc:	d101      	bne.n	5502 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x22>
    54fe:	f885 8001 	strb.w	r8, [r5, #1]
    5502:	7868      	ldrb	r0, [r5, #1]
    5504:	f04f 0901 	mov.w	r9, #1
    5508:	b150      	cbz	r0, 5520 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x40>
    550a:	2801      	cmp	r0, #1
    550c:	d021      	beq.n	5552 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x72>
    550e:	2802      	cmp	r0, #2
    5510:	d02b      	beq.n	556a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    5512:	2803      	cmp	r0, #3
    5514:	d03a      	beq.n	558c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5516:	f240 411d 	movw	r1, #1053	; 0x41d
    551a:	2027      	movs	r0, #39	; 0x27
    551c:	f7ff f816 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5520:	2e01      	cmp	r6, #1
    5522:	d028      	beq.n	5576 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5524:	f000 f8d4 	bl	56d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5528:	4669      	mov	r1, sp
    552a:	aa01      	add	r2, sp, #4
    552c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    552e:	f007 fdb6 	bl	d09e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    5532:	9800      	ldr	r0, [sp, #0]
    5534:	f007 fd69 	bl	d00a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5538:	f8ca 0000 	str.w	r0, [sl]
    553c:	4639      	mov	r1, r7
    553e:	2201      	movs	r2, #1
    5540:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5542:	e00d      	b.n	5560 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x80>
    5544:	f884 8010 	strb.w	r8, [r4, #16]
    5548:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    554c:	f884 9010 	strb.w	r9, [r4, #16]
    5550:	e7fa      	b.n	5548 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    5552:	2e01      	cmp	r6, #1
    5554:	d00f      	beq.n	5576 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5556:	f000 f8bb 	bl	56d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    555a:	4639      	mov	r1, r7
    555c:	2200      	movs	r2, #0
    555e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5560:	f007 fd0a 	bl	cf78 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5564:	2e02      	cmp	r6, #2
    5566:	d106      	bne.n	5576 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5568:	e7ee      	b.n	5548 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    556a:	2e01      	cmp	r6, #1
    556c:	d003      	beq.n	5576 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    556e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5570:	f007 fe9e 	bl	d2b0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5574:	e7f6      	b.n	5564 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x84>
    5576:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    557a:	1c40      	adds	r0, r0, #1
    557c:	f141 0100 	adc.w	r1, r1, #0
    5580:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    5584:	7c20      	ldrb	r0, [r4, #16]
    5586:	2801      	cmp	r0, #1
    5588:	d1e0      	bne.n	554c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6c>
    558a:	e7db      	b.n	5544 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    558c:	2e01      	cmp	r6, #1
    558e:	d0db      	beq.n	5548 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    5590:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5592:	e8bd 47fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5596:	f007 be8b 	b.w	d2b0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    559a:	0000      	.short	0x0000
    559c:	200000d4 	.word	0x200000d4

000055a0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    55a0:	4802      	ldr	r0, [pc, #8]	; (55ac <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    55a2:	89c0      	ldrh	r0, [r0, #14]
    55a4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    55a8:	4770      	bx	lr
    55aa:	0000      	.short	0x0000
    55ac:	200000d4 	.word	0x200000d4

000055b0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    55b0:	4804      	ldr	r0, [pc, #16]	; (55c4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    55b2:	7800      	ldrb	r0, [r0, #0]
    55b4:	b108      	cbz	r0, 55ba <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    55b6:	200c      	movs	r0, #12
    55b8:	4770      	bx	lr
    55ba:	4903      	ldr	r1, [pc, #12]	; (55c8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    55bc:	2000      	movs	r0, #0
    55be:	7708      	strb	r0, [r1, #28]
    55c0:	4770      	bx	lr
    55c2:	0000      	.short	0x0000
    55c4:	200000d4 	.word	0x200000d4
    55c8:	20000bea 	.word	0x20000bea

000055cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    55cc:	480c      	ldr	r0, [pc, #48]	; (5600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    55ce:	b510      	push	{r4, lr}
    55d0:	7801      	ldrb	r1, [r0, #0]
    55d2:	b149      	cbz	r1, 55e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    55d4:	f100 0138 	add.w	r1, r0, #56	; 0x38
    55d8:	7800      	ldrb	r0, [r0, #0]
    55da:	2802      	cmp	r0, #2
    55dc:	d008      	beq.n	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    55de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    55e2:	2027      	movs	r0, #39	; 0x27
    55e4:	f7fe ffb2 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55ec:	f000 b9f8 	b.w	59e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    55f0:	6848      	ldr	r0, [r1, #4]
    55f2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
    55f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55fa:	f005 bb8d 	b.w	ad18 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    55fe:	0000      	.short	0x0000
    5600:	200000d4 	.word	0x200000d4
    5604:	4608      	mov	r0, r1
    5606:	2100      	movs	r1, #0
    5608:	7041      	strb	r1, [r0, #1]
    560a:	211c      	movs	r1, #28
    560c:	f800 1b04 	strb.w	r1, [r0], #4
    5610:	220e      	movs	r2, #14
    5612:	4901      	ldr	r1, [pc, #4]	; (5618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5614:	f006 bf31 	b.w	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5618:	20000bf8 	.word	0x20000bf8
    561c:	4a02      	ldr	r2, [pc, #8]	; (5628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    561e:	8993      	ldrh	r3, [r2, #12]
    5620:	4303      	orrs	r3, r0
    5622:	8193      	strh	r3, [r2, #12]
    5624:	6952      	ldr	r2, [r2, #20]
    5626:	4710      	bx	r2
    5628:	200000d4 	.word	0x200000d4
    562c:	4801      	ldr	r0, [pc, #4]	; (5634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    562e:	6840      	ldr	r0, [r0, #4]
    5630:	4770      	bx	lr
    5632:	0000      	.short	0x0000
    5634:	2000010c 	.word	0x2000010c
    5638:	4801      	ldr	r0, [pc, #4]	; (5640 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    563a:	6840      	ldr	r0, [r0, #4]
    563c:	3080      	adds	r0, #128	; 0x80
    563e:	4770      	bx	lr
    5640:	2000010c 	.word	0x2000010c
    5644:	4a01      	ldr	r2, [pc, #4]	; (564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5646:	2100      	movs	r1, #0
    5648:	6952      	ldr	r2, [r2, #20]
    564a:	4710      	bx	r2
    564c:	200000d4 	.word	0x200000d4
    5650:	b570      	push	{r4, r5, r6, lr}
    5652:	4605      	mov	r5, r0
    5654:	2901      	cmp	r1, #1
    5656:	d818      	bhi.n	568a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5658:	4c12      	ldr	r4, [pc, #72]	; (56a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>)
    565a:	69a1      	ldr	r1, [r4, #24]
    565c:	4788      	blx	r1
    565e:	b1a0      	cbz	r0, 568a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5660:	7960      	ldrb	r0, [r4, #5]
    5662:	b990      	cbnz	r0, 568a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5664:	b9e5      	cbnz	r5, 56a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    5666:	f104 0010 	add.w	r0, r4, #16
    566a:	7801      	ldrb	r1, [r0, #0]
    566c:	06c8      	lsls	r0, r1, #27
    566e:	d405      	bmi.n	567c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5670:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5672:	7800      	ldrb	r0, [r0, #0]
    5674:	06c0      	lsls	r0, r0, #27
    5676:	d401      	bmi.n	567c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5678:	2001      	movs	r0, #1
    567a:	e000      	b.n	567e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    567c:	2000      	movs	r0, #0
    567e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5680:	b92a      	cbnz	r2, 568e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    5682:	8962      	ldrh	r2, [r4, #10]
    5684:	b11a      	cbz	r2, 568e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    5686:	06c9      	lsls	r1, r1, #27
    5688:	d401      	bmi.n	568e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    568a:	2001      	movs	r0, #1
    568c:	bd70      	pop	{r4, r5, r6, pc}
    568e:	89a1      	ldrh	r1, [r4, #12]
    5690:	078a      	lsls	r2, r1, #30
    5692:	d503      	bpl.n	569c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5694:	6a22      	ldr	r2, [r4, #32]
    5696:	78d2      	ldrb	r2, [r2, #3]
    5698:	2a02      	cmp	r2, #2
    569a:	d001      	beq.n	56a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    569c:	4308      	orrs	r0, r1
    569e:	d1f4      	bne.n	568a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    56a0:	2000      	movs	r0, #0
    56a2:	bd70      	pop	{r4, r5, r6, pc}
    56a4:	200000d4 	.word	0x200000d4
    56a8:	b530      	push	{r4, r5, lr}
    56aa:	4b08      	ldr	r3, [pc, #32]	; (56cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>)
    56ac:	88dd      	ldrh	r5, [r3, #6]
    56ae:	891c      	ldrh	r4, [r3, #8]
    56b0:	b12a      	cbz	r2, 56be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    56b2:	b908      	cbnz	r0, 56b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    56b4:	b905      	cbnz	r5, 56b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    56b6:	b114      	cbz	r4, 56be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    56b8:	8958      	ldrh	r0, [r3, #10]
    56ba:	1c40      	adds	r0, r0, #1
    56bc:	8158      	strh	r0, [r3, #10]
    56be:	b111      	cbz	r1, 56c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    56c0:	1c6d      	adds	r5, r5, #1
    56c2:	80dd      	strh	r5, [r3, #6]
    56c4:	bd30      	pop	{r4, r5, pc}
    56c6:	1c64      	adds	r4, r4, #1
    56c8:	811c      	strh	r4, [r3, #8]
    56ca:	bd30      	pop	{r4, r5, pc}
    56cc:	20000bea 	.word	0x20000bea
    56d0:	b510      	push	{r4, lr}
    56d2:	4c08      	ldr	r4, [pc, #32]	; (56f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>)
    56d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    56d6:	b138      	cbz	r0, 56e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    56d8:	8962      	ldrh	r2, [r4, #10]
    56da:	6a61      	ldr	r1, [r4, #36]	; 0x24
    56dc:	1cd2      	adds	r2, r2, #3
    56de:	f006 fecc 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    56e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    56e4:	6260      	str	r0, [r4, #36]	; 0x24
    56e6:	bd10      	pop	{r4, pc}
    56e8:	f240 4163 	movw	r1, #1123	; 0x463
    56ec:	2027      	movs	r0, #39	; 0x27
    56ee:	f7fe ff2d 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56f2:	0000      	.short	0x0000
    56f4:	200000d4 	.word	0x200000d4
    56f8:	b510      	push	{r4, lr}
    56fa:	f7ff ff97 	bl	562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    56fe:	4604      	mov	r4, r0
    5700:	f7ff ff9a 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5704:	4602      	mov	r2, r0
    5706:	7d41      	ldrb	r1, [r0, #21]
    5708:	4816      	ldr	r0, [pc, #88]	; (5764 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>)
    570a:	2926      	cmp	r1, #38	; 0x26
    570c:	d010      	beq.n	5730 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    570e:	2927      	cmp	r1, #39	; 0x27
    5710:	d00e      	beq.n	5730 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5712:	7d92      	ldrb	r2, [r2, #22]
    5714:	2a26      	cmp	r2, #38	; 0x26
    5716:	d00b      	beq.n	5730 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5718:	2921      	cmp	r1, #33	; 0x21
    571a:	d00d      	beq.n	5738 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    571c:	2922      	cmp	r1, #34	; 0x22
    571e:	d00b      	beq.n	5738 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5720:	2a24      	cmp	r2, #36	; 0x24
    5722:	d00f      	beq.n	5744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5724:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5728:	2804      	cmp	r0, #4
    572a:	d100      	bne.n	572e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x162>
    572c:	2008      	movs	r0, #8
    572e:	bd10      	pop	{r4, pc}
    5730:	6840      	ldr	r0, [r0, #4]
    5732:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    5736:	e00e      	b.n	5756 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18a>
    5738:	2a24      	cmp	r2, #36	; 0x24
    573a:	d003      	beq.n	5744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    573c:	6840      	ldr	r0, [r0, #4]
    573e:	f890 0136 	ldrb.w	r0, [r0, #310]	; 0x136
    5742:	e005      	b.n	5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    5744:	6841      	ldr	r1, [r0, #4]
    5746:	f891 0136 	ldrb.w	r0, [r1, #310]	; 0x136
    574a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    574e:	4008      	ands	r0, r1
    5750:	f008 f84c 	bl	d7ec <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5754:	4601      	mov	r1, r0
    5756:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    575a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    575e:	f008 b85d 	b.w	d81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5762:	0000      	.short	0x0000
    5764:	2000010c 	.word	0x2000010c
    5768:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    576c:	468b      	mov	fp, r1
    576e:	4607      	mov	r7, r0
    5770:	f7ff ff62 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5774:	f04f 0900 	mov.w	r9, #0
    5778:	4c69      	ldr	r4, [pc, #420]	; (5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    577a:	4606      	mov	r6, r0
    577c:	f88d 9004 	strb.w	r9, [sp, #4]
    5780:	f8cd 9008 	str.w	r9, [sp, #8]
    5784:	f8cd 9000 	str.w	r9, [sp]
    5788:	7820      	ldrb	r0, [r4, #0]
    578a:	464d      	mov	r5, r9
    578c:	2802      	cmp	r0, #2
    578e:	d004      	beq.n	579a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ce>
    5790:	f240 41ee 	movw	r1, #1262	; 0x4ee
    5794:	2027      	movs	r0, #39	; 0x27
    5796:	f7fe fed9 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    579a:	7ba0      	ldrb	r0, [r4, #14]
    579c:	0640      	lsls	r0, r0, #25
    579e:	d406      	bmi.n	57ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    57a0:	2040      	movs	r0, #64	; 0x40
    57a2:	f7ff ff4f 	bl	5644 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    57a6:	89e0      	ldrh	r0, [r4, #14]
    57a8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    57ac:	81e0      	strh	r0, [r4, #14]
    57ae:	7ef0      	ldrb	r0, [r6, #27]
    57b0:	b3df      	cbz	r7, 582a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25e>
    57b2:	b180      	cbz	r0, 57d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57b4:	f005 f90c 	bl	a9d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    57b8:	f005 f8e6 	bl	a988 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    57bc:	b958      	cbnz	r0, 57d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57be:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57c0:	7841      	ldrb	r1, [r0, #1]
    57c2:	b141      	cbz	r1, 57d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57c4:	7800      	ldrb	r0, [r0, #0]
    57c6:	7c31      	ldrb	r1, [r6, #16]
    57c8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    57cc:	4288      	cmp	r0, r1
    57ce:	d102      	bne.n	57d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57d0:	2001      	movs	r0, #1
    57d2:	70a0      	strb	r0, [r4, #2]
    57d4:	e0a0      	b.n	5918 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    57d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57d8:	7841      	ldrb	r1, [r0, #1]
    57da:	8161      	strh	r1, [r4, #10]
    57dc:	b121      	cbz	r1, 57e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    57de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    57e0:	f007 fd33 	bl	d24a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    57e4:	62a0      	str	r0, [r4, #40]	; 0x28
    57e6:	e000      	b.n	57ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21e>
    57e8:	62a5      	str	r5, [r4, #40]	; 0x28
    57ea:	89e0      	ldrh	r0, [r4, #14]
    57ec:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    57f0:	81e0      	strh	r0, [r4, #14]
    57f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57f4:	7bf1      	ldrb	r1, [r6, #15]
    57f6:	7800      	ldrb	r0, [r0, #0]
    57f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    57fc:	4288      	cmp	r0, r1
    57fe:	d007      	beq.n	5810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    5800:	a802      	add	r0, sp, #8
    5802:	f000 f983 	bl	5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5806:	89e0      	ldrh	r0, [r4, #14]
    5808:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    580c:	81e0      	strh	r0, [r4, #14]
    580e:	e001      	b.n	5814 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x248>
    5810:	f04f 0901 	mov.w	r9, #1
    5814:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5816:	7c31      	ldrb	r1, [r6, #16]
    5818:	7800      	ldrb	r0, [r0, #0]
    581a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    581e:	4288      	cmp	r0, r1
    5820:	d10e      	bne.n	5840 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    5822:	a801      	add	r0, sp, #4
    5824:	f000 f934 	bl	5a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c4>
    5828:	e00a      	b.n	5840 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    582a:	e7ff      	b.n	582c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    582c:	b108      	cbz	r0, 5832 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x266>
    582e:	f005 f8c9 	bl	a9c4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5832:	78e0      	ldrb	r0, [r4, #3]
    5834:	1c40      	adds	r0, r0, #1
    5836:	70e0      	strb	r0, [r4, #3]
    5838:	89e0      	ldrh	r0, [r4, #14]
    583a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    583e:	81e0      	strh	r0, [r4, #14]
    5840:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5844:	7eb0      	ldrb	r0, [r6, #26]
    5846:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    584a:	b188      	cbz	r0, 5870 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a4>
    584c:	f7ff feee 	bl	562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5850:	4934      	ldr	r1, [pc, #208]	; (5924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>)
    5852:	760d      	strb	r5, [r1, #24]
    5854:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
    5858:	e9c1 2304 	strd	r2, r3, [r1, #16]
    585c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5860:	f007 ffce 	bl	d800 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5864:	4603      	mov	r3, r0
    5866:	22fb      	movs	r2, #251	; 0xfb
    5868:	492e      	ldr	r1, [pc, #184]	; (5924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>)
    586a:	4628      	mov	r0, r5
    586c:	f004 ffe2 	bl	a834 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5870:	f04f 0800 	mov.w	r8, #0
    5874:	f1bb 0f00 	cmp.w	fp, #0
    5878:	d104      	bne.n	5884 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    587a:	78e1      	ldrb	r1, [r4, #3]
    587c:	2001      	movs	r0, #1
    587e:	f7ff fee7 	bl	5650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5882:	b1b0      	cbz	r0, 58b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e6>
    5884:	f005 fc4c 	bl	b120 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5888:	f89d 0004 	ldrb.w	r0, [sp, #4]
    588c:	b118      	cbz	r0, 5896 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    588e:	4669      	mov	r1, sp
    5890:	2000      	movs	r0, #0
    5892:	f7ff fe25 	bl	54e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5896:	89b0      	ldrh	r0, [r6, #12]
    5898:	464a      	mov	r2, r9
    589a:	4639      	mov	r1, r7
    589c:	f7ff ff04 	bl	56a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    58a0:	b127      	cbz	r7, 58ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    58a2:	481f      	ldr	r0, [pc, #124]	; (5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    58a4:	70e5      	strb	r5, [r4, #3]
    58a6:	3038      	adds	r0, #56	; 0x38
    58a8:	f008 fdbf 	bl	e42a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    58ac:	f04f 0801 	mov.w	r8, #1
    58b0:	e01b      	b.n	58ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    58b2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    58b6:	b118      	cbz	r0, 58c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    58b8:	4669      	mov	r1, sp
    58ba:	2001      	movs	r0, #1
    58bc:	f7ff fe10 	bl	54e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58c0:	2000      	movs	r0, #0
    58c2:	f000 f9ad 	bl	5c20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    58c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    58ca:	b118      	cbz	r0, 58d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    58cc:	4669      	mov	r1, sp
    58ce:	2002      	movs	r0, #2
    58d0:	f7ff fe06 	bl	54e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58d4:	89b0      	ldrh	r0, [r6, #12]
    58d6:	464a      	mov	r2, r9
    58d8:	4639      	mov	r1, r7
    58da:	f7ff fee5 	bl	56a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    58de:	b127      	cbz	r7, 58ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    58e0:	480f      	ldr	r0, [pc, #60]	; (5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    58e2:	70e5      	strb	r5, [r4, #3]
    58e4:	3038      	adds	r0, #56	; 0x38
    58e6:	f008 fda0 	bl	e42a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    58ea:	9802      	ldr	r0, [sp, #8]
    58ec:	b140      	cbz	r0, 5900 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>
    58ee:	f007 fb8c 	bl	d00a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    58f2:	f8da 1004 	ldr.w	r1, [sl, #4]
    58f6:	1c40      	adds	r0, r0, #1
    58f8:	7205      	strb	r5, [r0, #8]
    58fa:	220d      	movs	r2, #13
    58fc:	f000 fd98 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5900:	9800      	ldr	r0, [sp, #0]
    5902:	b130      	cbz	r0, 5912 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    5904:	f8da 1004 	ldr.w	r1, [sl, #4]
    5908:	7205      	strb	r5, [r0, #8]
    590a:	2227      	movs	r2, #39	; 0x27
    590c:	9800      	ldr	r0, [sp, #0]
    590e:	f000 fd8f 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5912:	f1b8 0f00 	cmp.w	r8, #0
    5916:	d001      	beq.n	591c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    5918:	f000 f862 	bl	59e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    591c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5920:	200000d4 	.word	0x200000d4
    5924:	20000ba0 	.word	0x20000ba0
    5928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    592c:	460f      	mov	r7, r1
    592e:	4680      	mov	r8, r0
    5930:	f7ff fe82 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5934:	4d28      	ldr	r5, [pc, #160]	; (59d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>)
    5936:	4604      	mov	r4, r0
    5938:	7828      	ldrb	r0, [r5, #0]
    593a:	2801      	cmp	r0, #1
    593c:	d004      	beq.n	5948 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x37c>
    593e:	f240 4172 	movw	r1, #1138	; 0x472
    5942:	2027      	movs	r0, #39	; 0x27
    5944:	f7fe fe02 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5948:	7a21      	ldrb	r1, [r4, #8]
    594a:	2000      	movs	r0, #0
    594c:	2601      	movs	r6, #1
    594e:	b129      	cbz	r1, 595c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    5950:	7220      	strb	r0, [r4, #8]
    5952:	2100      	movs	r1, #0
    5954:	2004      	movs	r0, #4
    5956:	f7ff fe61 	bl	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    595a:	72a6      	strb	r6, [r4, #10]
    595c:	6a29      	ldr	r1, [r5, #32]
    595e:	7808      	ldrb	r0, [r1, #0]
    5960:	43c0      	mvns	r0, r0
    5962:	0780      	lsls	r0, r0, #30
    5964:	d109      	bne.n	597a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ae>
    5966:	7ba0      	ldrb	r0, [r4, #14]
    5968:	bb78      	cbnz	r0, 59ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fe>
    596a:	2002      	movs	r0, #2
    596c:	f7ff fe56 	bl	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5970:	6a28      	ldr	r0, [r5, #32]
    5972:	7800      	ldrb	r0, [r0, #0]
    5974:	43c0      	mvns	r0, r0
    5976:	0780      	lsls	r0, r0, #30
    5978:	d027      	beq.n	59ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fe>
    597a:	6a28      	ldr	r0, [r5, #32]
    597c:	7840      	ldrb	r0, [r0, #1]
    597e:	b110      	cbz	r0, 5986 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    5980:	2002      	movs	r0, #2
    5982:	73a0      	strb	r0, [r4, #14]
    5984:	e000      	b.n	5988 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3bc>
    5986:	73a6      	strb	r6, [r4, #14]
    5988:	7ee0      	ldrb	r0, [r4, #27]
    598a:	b190      	cbz	r0, 59b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e6>
    598c:	f7ff fe4e 	bl	562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5990:	4912      	ldr	r1, [pc, #72]	; (59dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>)
    5992:	7a6d      	ldrb	r5, [r5, #9]
    5994:	760e      	strb	r6, [r1, #24]
    5996:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
    599a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    599e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    59a2:	f007 ff2d 	bl	d800 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    59a6:	4603      	mov	r3, r0
    59a8:	462a      	mov	r2, r5
    59aa:	490c      	ldr	r1, [pc, #48]	; (59dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>)
    59ac:	4630      	mov	r0, r6
    59ae:	f004 ff41 	bl	a834 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    59b2:	ea37 0708 	bics.w	r7, r7, r8
    59b6:	d004      	beq.n	59c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f6>
    59b8:	2100      	movs	r1, #0
    59ba:	4608      	mov	r0, r1
    59bc:	f7ff fe48 	bl	5650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    59c0:	b128      	cbz	r0, 59ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    59c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59c6:	f000 b80b 	b.w	59e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    59ca:	2003      	movs	r0, #3
    59cc:	e7d9      	b.n	5982 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    59ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59d2:	2000      	movs	r0, #0
    59d4:	f000 b8e8 	b.w	5ba8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>
    59d8:	200000d4 	.word	0x200000d4
    59dc:	20000ba0 	.word	0x20000ba0
    59e0:	b510      	push	{r4, lr}
    59e2:	f005 f89b 	bl	ab1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    59e6:	f004 ffb9 	bl	a95c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    59ea:	4c0d      	ldr	r4, [pc, #52]	; (5a20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>)
    59ec:	89e0      	ldrh	r0, [r4, #14]
    59ee:	f7ff fe29 	bl	5644 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    59f2:	480c      	ldr	r0, [pc, #48]	; (5a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    59f4:	7f00      	ldrb	r0, [r0, #28]
    59f6:	b158      	cbz	r0, 5a10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    59f8:	490a      	ldr	r1, [pc, #40]	; (5a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    59fa:	220e      	movs	r2, #14
    59fc:	f101 000e 	add.w	r0, r1, #14
    5a00:	f006 fd3b 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a04:	4807      	ldr	r0, [pc, #28]	; (5a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5a06:	2221      	movs	r2, #33	; 0x21
    5a08:	4907      	ldr	r1, [pc, #28]	; (5a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>)
    5a0a:	301d      	adds	r0, #29
    5a0c:	f000 fd10 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5a10:	69e2      	ldr	r2, [r4, #28]
    5a12:	7961      	ldrb	r1, [r4, #5]
    5a14:	78a0      	ldrb	r0, [r4, #2]
    5a16:	4790      	blx	r2
    5a18:	2000      	movs	r0, #0
    5a1a:	7020      	strb	r0, [r4, #0]
    5a1c:	bd10      	pop	{r4, pc}
    5a1e:	0000      	.short	0x0000
    5a20:	200000d4 	.word	0x200000d4
    5a24:	20000bea 	.word	0x20000bea
    5a28:	00005605 	.word	0x00005605
    5a2c:	4808      	ldr	r0, [pc, #32]	; (5a50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x484>)
    5a2e:	b510      	push	{r4, lr}
    5a30:	7800      	ldrb	r0, [r0, #0]
    5a32:	2802      	cmp	r0, #2
    5a34:	d004      	beq.n	5a40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x474>
    5a36:	f240 211e 	movw	r1, #542	; 0x21e
    5a3a:	2027      	movs	r0, #39	; 0x27
    5a3c:	f7fe fd86 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a40:	4904      	ldr	r1, [pc, #16]	; (5a54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x488>)
    5a42:	2001      	movs	r0, #1
    5a44:	7308      	strb	r0, [r1, #12]
    5a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a4a:	f7ff bfc9 	b.w	59e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5a4e:	0000      	.short	0x0000
    5a50:	200000d4 	.word	0x200000d4
    5a54:	20000bea 	.word	0x20000bea
    5a58:	4b0c      	ldr	r3, [pc, #48]	; (5a8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    5a5a:	b430      	push	{r4, r5}
    5a5c:	79db      	ldrb	r3, [r3, #7]
    5a5e:	b93a      	cbnz	r2, 5a70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5a60:	2bff      	cmp	r3, #255	; 0xff
    5a62:	d105      	bne.n	5a70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5a64:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5a68:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5a6c:	42a2      	cmp	r2, r4
    5a6e:	d00a      	beq.n	5a86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ba>
    5a70:	b129      	cbz	r1, 5a7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b2>
    5a72:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5a76:	bc30      	pop	{r4, r5}
    5a78:	4618      	mov	r0, r3
    5a7a:	f005 bb75 	b.w	b168 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    5a7e:	23ff      	movs	r3, #255	; 0xff
    5a80:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5a84:	e7f7      	b.n	5a76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4aa>
    5a86:	bc30      	pop	{r4, r5}
    5a88:	4770      	bx	lr
    5a8a:	0000      	.short	0x0000
    5a8c:	200000d4 	.word	0x200000d4
    5a90:	b570      	push	{r4, r5, r6, lr}
    5a92:	4606      	mov	r6, r0
    5a94:	f7ff fdd0 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5a98:	4a1b      	ldr	r2, [pc, #108]	; (5b08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    5a9a:	4604      	mov	r4, r0
    5a9c:	2501      	movs	r5, #1
    5a9e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5aa0:	7808      	ldrb	r0, [r1, #0]
    5aa2:	f000 0003 	and.w	r0, r0, #3
    5aa6:	2801      	cmp	r0, #1
    5aa8:	d00c      	beq.n	5ac4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>
    5aaa:	2802      	cmp	r0, #2
    5aac:	d00a      	beq.n	5ac4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>
    5aae:	2803      	cmp	r0, #3
    5ab0:	d121      	bne.n	5af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ab2:	7225      	strb	r5, [r4, #8]
    5ab4:	89d0      	ldrh	r0, [r2, #14]
    5ab6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5aba:	81d0      	strh	r0, [r2, #14]
    5abc:	2001      	movs	r0, #1
    5abe:	f7ff fdad 	bl	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5ac2:	e018      	b.n	5af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ac4:	7848      	ldrb	r0, [r1, #1]
    5ac6:	b1b0      	cbz	r0, 5af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ac8:	89d1      	ldrh	r1, [r2, #14]
    5aca:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5ace:	81d1      	strh	r1, [r2, #14]
    5ad0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5ad2:	2900      	cmp	r1, #0
    5ad4:	d009      	beq.n	5aea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51e>
    5ad6:	28fb      	cmp	r0, #251	; 0xfb
    5ad8:	d808      	bhi.n	5aec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x520>
    5ada:	7990      	ldrb	r0, [r2, #6]
    5adc:	b120      	cbz	r0, 5ae8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    5ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ae2:	2020      	movs	r0, #32
    5ae4:	f7ff bdae 	b.w	5644 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5ae8:	7035      	strb	r5, [r6, #0]
    5aea:	bd70      	pop	{r4, r5, r6, pc}
    5aec:	7950      	ldrb	r0, [r2, #5]
    5aee:	f040 0010 	orr.w	r0, r0, #16
    5af2:	7150      	strb	r0, [r2, #5]
    5af4:	bd70      	pop	{r4, r5, r6, pc}
    5af6:	7c20      	ldrb	r0, [r4, #16]
    5af8:	2801      	cmp	r0, #1
    5afa:	d001      	beq.n	5b00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x534>
    5afc:	7425      	strb	r5, [r4, #16]
    5afe:	bd70      	pop	{r4, r5, r6, pc}
    5b00:	2000      	movs	r0, #0
    5b02:	7420      	strb	r0, [r4, #16]
    5b04:	bd70      	pop	{r4, r5, r6, pc}
    5b06:	0000      	.short	0x0000
    5b08:	200000d4 	.word	0x200000d4
    5b0c:	b570      	push	{r4, r5, r6, lr}
    5b0e:	4605      	mov	r5, r0
    5b10:	f7ff fd92 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5b14:	4604      	mov	r4, r0
    5b16:	7b80      	ldrb	r0, [r0, #14]
    5b18:	2800      	cmp	r0, #0
    5b1a:	d02d      	beq.n	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ac>
    5b1c:	2802      	cmp	r0, #2
    5b1e:	d10c      	bne.n	5b3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56e>
    5b20:	481b      	ldr	r0, [pc, #108]	; (5b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>)
    5b22:	4629      	mov	r1, r5
    5b24:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5b26:	f007 f9ff 	bl	cf28 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5b2a:	b330      	cbz	r0, 5b7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    5b2c:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5b30:	1c40      	adds	r0, r0, #1
    5b32:	f141 0100 	adc.w	r1, r1, #0
    5b36:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5b3a:	2500      	movs	r5, #0
    5b3c:	73a5      	strb	r5, [r4, #14]
    5b3e:	7aa0      	ldrb	r0, [r4, #10]
    5b40:	b120      	cbz	r0, 5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>
    5b42:	72a5      	strb	r5, [r4, #10]
    5b44:	2100      	movs	r1, #0
    5b46:	2010      	movs	r0, #16
    5b48:	f7ff fd68 	bl	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5b4c:	7a60      	ldrb	r0, [r4, #9]
    5b4e:	b170      	cbz	r0, 5b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a2>
    5b50:	7265      	strb	r5, [r4, #9]
    5b52:	f7ff fb21 	bl	5198 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5b56:	b198      	cbz	r0, 5b80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5b58:	2100      	movs	r1, #0
    5b5a:	2008      	movs	r0, #8
    5b5c:	f7ff fd5e 	bl	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5b60:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5b64:	1c40      	adds	r0, r0, #1
    5b66:	f141 0100 	adc.w	r1, r1, #0
    5b6a:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5b6e:	7be0      	ldrb	r0, [r4, #15]
    5b70:	2801      	cmp	r0, #1
    5b72:	d00a      	beq.n	5b8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5b74:	2001      	movs	r0, #1
    5b76:	73e0      	strb	r0, [r4, #15]
    5b78:	bd70      	pop	{r4, r5, r6, pc}
    5b7a:	f240 31b9 	movw	r1, #953	; 0x3b9
    5b7e:	e001      	b.n	5b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    5b80:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5b84:	2027      	movs	r0, #39	; 0x27
    5b86:	f7fe fce1 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b8a:	73e5      	strb	r5, [r4, #15]
    5b8c:	bd70      	pop	{r4, r5, r6, pc}
    5b8e:	0000      	.short	0x0000
    5b90:	200000d4 	.word	0x200000d4
    5b94:	4803      	ldr	r0, [pc, #12]	; (5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>)
    5b96:	7800      	ldrb	r0, [r0, #0]
    5b98:	2800      	cmp	r0, #0
    5b9a:	d001      	beq.n	5ba0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    5b9c:	f7ff bf20 	b.w	59e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5ba0:	4770      	bx	lr
    5ba2:	0000      	.short	0x0000
    5ba4:	200000d4 	.word	0x200000d4
    5ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bac:	4606      	mov	r6, r0
    5bae:	f7ff fd3d 	bl	562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5bb2:	4680      	mov	r8, r0
    5bb4:	f7ff fd40 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5bb8:	4c16      	ldr	r4, [pc, #88]	; (5c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x648>)
    5bba:	4605      	mov	r5, r0
    5bbc:	4632      	mov	r2, r6
    5bbe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5bc0:	6260      	str	r0, [r4, #36]	; 0x24
    5bc2:	2101      	movs	r1, #1
    5bc4:	4640      	mov	r0, r8
    5bc6:	f7ff ff47 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48c>
    5bca:	7ee8      	ldrb	r0, [r5, #27]
    5bcc:	2700      	movs	r7, #0
    5bce:	b170      	cbz	r0, 5bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x622>
    5bd0:	4811      	ldr	r0, [pc, #68]	; (5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64c>)
    5bd2:	f005 fa0f 	bl	aff4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5bd6:	4811      	ldr	r0, [pc, #68]	; (5c1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x650>)
    5bd8:	2101      	movs	r1, #1
    5bda:	7601      	strb	r1, [r0, #24]
    5bdc:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    5be0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5be4:	490c      	ldr	r1, [pc, #48]	; (5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64c>)
    5be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5be8:	f004 fe76 	bl	a8d8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5bec:	e004      	b.n	5bf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>
    5bee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5bf0:	f005 fa00 	bl	aff4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5bf4:	f004 feb2 	bl	a95c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5bf8:	b916      	cbnz	r6, 5c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>
    5bfa:	4638      	mov	r0, r7
    5bfc:	f005 f8b0 	bl	ad60 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5c00:	2100      	movs	r1, #0
    5c02:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5c06:	4608      	mov	r0, r1
    5c08:	f005 fa6c 	bl	b0e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5c0c:	2002      	movs	r0, #2
    5c0e:	7020      	strb	r0, [r4, #0]
    5c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c14:	200000d4 	.word	0x200000d4
    5c18:	20000a98 	.word	0x20000a98
    5c1c:	20000ba0 	.word	0x20000ba0
    5c20:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5c24:	4604      	mov	r4, r0
    5c26:	f7ff fd07 	bl	5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c2a:	4605      	mov	r5, r0
    5c2c:	f7ff fcfe 	bl	562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5c30:	2700      	movs	r7, #0
    5c32:	4606      	mov	r6, r0
    5c34:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5d9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    5c38:	f88d 7000 	strb.w	r7, [sp]
    5c3c:	4622      	mov	r2, r4
    5c3e:	4639      	mov	r1, r7
    5c40:	f7ff ff0a 	bl	5a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48c>
    5c44:	7ba8      	ldrb	r0, [r5, #14]
    5c46:	f04f 0801 	mov.w	r8, #1
    5c4a:	f1a9 0420 	sub.w	r4, r9, #32
    5c4e:	b140      	cbz	r0, 5c62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x696>
    5c50:	2801      	cmp	r0, #1
    5c52:	d020      	beq.n	5c96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    5c54:	2802      	cmp	r0, #2
    5c56:	d02f      	beq.n	5cb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    5c58:	2803      	cmp	r0, #3
    5c5a:	d03b      	beq.n	5cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x708>
    5c5c:	f240 21d5 	movw	r1, #725	; 0x2d5
    5c60:	e057      	b.n	5d12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    5c62:	7a20      	ldrb	r0, [r4, #8]
    5c64:	2150      	movs	r1, #80	; 0x50
    5c66:	f8ad 0004 	strh.w	r0, [sp, #4]
    5c6a:	5388      	strh	r0, [r1, r6]
    5c6c:	4648      	mov	r0, r9
    5c6e:	f7ff fabd 	bl	51ec <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5c72:	b130      	cbz	r0, 5c82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b6>
    5c74:	2080      	movs	r0, #128	; 0x80
    5c76:	6a21      	ldr	r1, [r4, #32]
    5c78:	f7ff fcd0 	bl	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5c7c:	f885 8009 	strb.w	r8, [r5, #9]
    5c80:	e02c      	b.n	5cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5c82:	466a      	mov	r2, sp
    5c84:	a901      	add	r1, sp, #4
    5c86:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5c88:	f007 fdd2 	bl	d830 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5c8c:	6220      	str	r0, [r4, #32]
    5c8e:	b110      	cbz	r0, 5c96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    5c90:	f895 1053 	ldrb.w	r1, [r5, #83]	; 0x53
    5c94:	b111      	cbz	r1, 5c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    5c96:	4842      	ldr	r0, [pc, #264]	; (5da0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d4>)
    5c98:	6220      	str	r0, [r4, #32]
    5c9a:	e01f      	b.n	5cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5c9c:	f89d 1000 	ldrb.w	r1, [sp]
    5ca0:	b921      	cbnz	r1, 5cac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e0>
    5ca2:	8007      	strh	r7, [r0, #0]
    5ca4:	7087      	strb	r7, [r0, #2]
    5ca6:	2101      	movs	r1, #1
    5ca8:	f008 f943 	bl	df32 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5cac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5cb0:	6a20      	ldr	r0, [r4, #32]
    5cb2:	f008 f8c6 	bl	de42 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    5cb6:	e011      	b.n	5cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5cb8:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5cbc:	f8ad 0004 	strh.w	r0, [sp, #4]
    5cc0:	466a      	mov	r2, sp
    5cc2:	a901      	add	r1, sp, #4
    5cc4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5cc6:	f007 fdb3 	bl	d830 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5cca:	6220      	str	r0, [r4, #32]
    5ccc:	b930      	cbnz	r0, 5cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5cce:	f240 21bf 	movw	r1, #703	; 0x2bf
    5cd2:	e01e      	b.n	5d12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    5cd4:	4648      	mov	r0, r9
    5cd6:	f7ff fa89 	bl	51ec <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5cda:	b1c0      	cbz	r0, 5d0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5cdc:	6a20      	ldr	r0, [r4, #32]
    5cde:	2308      	movs	r3, #8
    5ce0:	7801      	ldrb	r1, [r0, #0]
    5ce2:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    5ce6:	7001      	strb	r1, [r0, #0]
    5ce8:	7bea      	ldrb	r2, [r5, #15]
    5cea:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5cee:	4311      	orrs	r1, r2
    5cf0:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    5cf4:	7001      	strb	r1, [r0, #0]
    5cf6:	7c2a      	ldrb	r2, [r5, #16]
    5cf8:	2304      	movs	r3, #4
    5cfa:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5cfe:	4311      	orrs	r1, r2
    5d00:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5d04:	7001      	strb	r1, [r0, #0]
    5d06:	43c9      	mvns	r1, r1
    5d08:	0789      	lsls	r1, r1, #30
    5d0a:	d005      	beq.n	5d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74c>
    5d0c:	e007      	b.n	5d1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5d0e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    5d12:	2027      	movs	r0, #39	; 0x27
    5d14:	f7fe fc1a 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d18:	78c0      	ldrb	r0, [r0, #3]
    5d1a:	2802      	cmp	r0, #2
    5d1c:	d00f      	beq.n	5d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x772>
    5d1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5d20:	f007 fa00 	bl	d124 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5d24:	b108      	cbz	r0, 5d2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    5d26:	2101      	movs	r1, #1
    5d28:	e00a      	b.n	5d40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>
    5d2a:	6a20      	ldr	r0, [r4, #32]
    5d2c:	7800      	ldrb	r0, [r0, #0]
    5d2e:	43c0      	mvns	r0, r0
    5d30:	0780      	lsls	r0, r0, #30
    5d32:	d004      	beq.n	5d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x772>
    5d34:	f7ff fa18 	bl	5168 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5d38:	f080 0101 	eor.w	r1, r0, #1
    5d3c:	e000      	b.n	5d40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>
    5d3e:	2100      	movs	r1, #0
    5d40:	6a20      	ldr	r0, [r4, #32]
    5d42:	7802      	ldrb	r2, [r0, #0]
    5d44:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5d48:	7001      	strb	r1, [r0, #0]
    5d4a:	7ea9      	ldrb	r1, [r5, #26]
    5d4c:	b181      	cbz	r1, 5d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    5d4e:	7841      	ldrb	r1, [r0, #1]
    5d50:	b171      	cbz	r1, 5d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    5d52:	4814      	ldr	r0, [pc, #80]	; (5da4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d8>)
    5d54:	f005 f94e 	bl	aff4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5d58:	4811      	ldr	r0, [pc, #68]	; (5da0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d4>)
    5d5a:	3828      	subs	r0, #40	; 0x28
    5d5c:	7607      	strb	r7, [r0, #24]
    5d5e:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    5d62:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5d66:	480f      	ldr	r0, [pc, #60]	; (5da4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d8>)
    5d68:	6a21      	ldr	r1, [r4, #32]
    5d6a:	f004 fdb5 	bl	a8d8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5d6e:	e003      	b.n	5d78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>
    5d70:	f005 f940 	bl	aff4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5d74:	f004 fdf2 	bl	a95c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5d78:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5d7c:	2101      	movs	r1, #1
    5d7e:	2000      	movs	r0, #0
    5d80:	f005 f9b0 	bl	b0e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5d84:	f884 8004 	strb.w	r8, [r4, #4]
    5d88:	6a21      	ldr	r1, [r4, #32]
    5d8a:	880a      	ldrh	r2, [r1, #0]
    5d8c:	8222      	strh	r2, [r4, #16]
    5d8e:	7889      	ldrb	r1, [r1, #2]
    5d90:	74a1      	strb	r1, [r4, #18]
    5d92:	f884 8000 	strb.w	r8, [r4]
    5d96:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5d9a:	0000      	.short	0x0000
    5d9c:	200000f4 	.word	0x200000f4
    5da0:	20000bc8 	.word	0x20000bc8
    5da4:	20000a98 	.word	0x20000a98
    5da8:	00005a2d 	.word	0x00005a2d
    5dac:	00005769 	.word	0x00005769
    5db0:	00005929 	.word	0x00005929
    5db4:	00005b95 	.word	0x00005b95

00005db8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5db8:	4800      	ldr	r0, [pc, #0]	; (5dbc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5dba:	4770      	bx	lr
    5dbc:	20001559 	.word	0x20001559

00005dc0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5dc0:	4904      	ldr	r1, [pc, #16]	; (5dd4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5dc2:	788a      	ldrb	r2, [r1, #2]
    5dc4:	4282      	cmp	r2, r0
    5dc6:	d903      	bls.n	5dd0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5dc8:	4408      	add	r0, r1
    5dca:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5dce:	4770      	bx	lr
    5dd0:	2000      	movs	r0, #0
    5dd2:	4770      	bx	lr
    5dd4:	20001386 	.word	0x20001386

00005dd8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5dd8:	4904      	ldr	r1, [pc, #16]	; (5dec <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5dda:	788a      	ldrb	r2, [r1, #2]
    5ddc:	4282      	cmp	r2, r0
    5dde:	d903      	bls.n	5de8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5de0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5de4:	3083      	adds	r0, #131	; 0x83
    5de6:	4770      	bx	lr
    5de8:	2000      	movs	r0, #0
    5dea:	4770      	bx	lr
    5dec:	20001386 	.word	0x20001386

00005df0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5df0:	4a05      	ldr	r2, [pc, #20]	; (5e08 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5df2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5df6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5dfa:	6802      	ldr	r2, [r0, #0]
    5dfc:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5e00:	8880      	ldrh	r0, [r0, #4]
    5e02:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5e06:	4770      	bx	lr
    5e08:	20001386 	.word	0x20001386

00005e0c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5e0c:	4904      	ldr	r1, [pc, #16]	; (5e20 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5e0e:	788a      	ldrb	r2, [r1, #2]
    5e10:	4282      	cmp	r2, r0
    5e12:	d903      	bls.n	5e1c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5e14:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5e18:	1cc0      	adds	r0, r0, #3
    5e1a:	4770      	bx	lr
    5e1c:	2000      	movs	r0, #0
    5e1e:	4770      	bx	lr
    5e20:	20001386 	.word	0x20001386

00005e24 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5e24:	b510      	push	{r4, lr}
    5e26:	f240 12d3 	movw	r2, #467	; 0x1d3
    5e2a:	2100      	movs	r1, #0
    5e2c:	4808      	ldr	r0, [pc, #32]	; (5e50 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5e2e:	f006 fb9e 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e32:	2208      	movs	r2, #8
    5e34:	21ff      	movs	r1, #255	; 0xff
    5e36:	4807      	ldr	r0, [pc, #28]	; (5e54 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e38:	f006 fb99 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e3c:	4805      	ldr	r0, [pc, #20]	; (5e54 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e3e:	2100      	movs	r1, #0
    5e40:	1f00      	subs	r0, r0, #4
    5e42:	7001      	strb	r1, [r0, #0]
    5e44:	7041      	strb	r1, [r0, #1]
    5e46:	f44f 7161 	mov.w	r1, #900	; 0x384
    5e4a:	8041      	strh	r1, [r0, #2]
    5e4c:	bd10      	pop	{r4, pc}
    5e4e:	0000      	.short	0x0000
    5e50:	20001386 	.word	0x20001386
    5e54:	2000034c 	.word	0x2000034c

00005e58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5e58:	4b0b      	ldr	r3, [pc, #44]	; (5e88 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5e5a:	b510      	push	{r4, lr}
    5e5c:	789c      	ldrb	r4, [r3, #2]
    5e5e:	4284      	cmp	r4, r0
    5e60:	d90f      	bls.n	5e82 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5e62:	4418      	add	r0, r3
    5e64:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e68:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5e6c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5e70:	700b      	strb	r3, [r1, #0]
    5e72:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5e76:	6011      	str	r1, [r2, #0]
    5e78:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5e7c:	8090      	strh	r0, [r2, #4]
    5e7e:	2001      	movs	r0, #1
    5e80:	bd10      	pop	{r4, pc}
    5e82:	2000      	movs	r0, #0
    5e84:	bd10      	pop	{r4, pc}
    5e86:	0000      	.short	0x0000
    5e88:	20001386 	.word	0x20001386

00005e8c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5e8c:	4907      	ldr	r1, [pc, #28]	; (5eac <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5e8e:	788a      	ldrb	r2, [r1, #2]
    5e90:	4282      	cmp	r2, r0
    5e92:	d909      	bls.n	5ea8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5e94:	4408      	add	r0, r1
    5e96:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e9a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5e9e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5ea2:	f000 0001 	and.w	r0, r0, #1
    5ea6:	4770      	bx	lr
    5ea8:	2000      	movs	r0, #0
    5eaa:	4770      	bx	lr
    5eac:	20001386 	.word	0x20001386

00005eb0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5eb0:	4801      	ldr	r0, [pc, #4]	; (5eb8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5eb2:	8840      	ldrh	r0, [r0, #2]
    5eb4:	4770      	bx	lr
    5eb6:	0000      	.short	0x0000
    5eb8:	20000348 	.word	0x20000348

00005ebc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5ebc:	4905      	ldr	r1, [pc, #20]	; (5ed4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    5ebe:	788a      	ldrb	r2, [r1, #2]
    5ec0:	4282      	cmp	r2, r0
    5ec2:	d903      	bls.n	5ecc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5ec4:	4408      	add	r0, r1
    5ec6:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5eca:	b108      	cbz	r0, 5ed0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5ecc:	2000      	movs	r0, #0
    5ece:	4770      	bx	lr
    5ed0:	2001      	movs	r0, #1
    5ed2:	4770      	bx	lr
    5ed4:	20001386 	.word	0x20001386

00005ed8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5ed8:	b570      	push	{r4, r5, r6, lr}
    5eda:	460d      	mov	r5, r1
    5edc:	4606      	mov	r6, r0
    5ede:	f000 f8c1 	bl	6064 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5ee2:	4c10      	ldr	r4, [pc, #64]	; (5f24 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5ee4:	2810      	cmp	r0, #16
    5ee6:	d007      	beq.n	5ef8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5ee8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5eec:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5ef0:	07c9      	lsls	r1, r1, #31
    5ef2:	d001      	beq.n	5ef8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5ef4:	2001      	movs	r0, #1
    5ef6:	bd70      	pop	{r4, r5, r6, pc}
    5ef8:	7861      	ldrb	r1, [r4, #1]
    5efa:	2908      	cmp	r1, #8
    5efc:	d210      	bcs.n	5f20 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5efe:	2810      	cmp	r0, #16
    5f00:	d008      	beq.n	5f14 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5f02:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5f06:	2101      	movs	r1, #1
    5f08:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5f0c:	7860      	ldrb	r0, [r4, #1]
    5f0e:	1c40      	adds	r0, r0, #1
    5f10:	7060      	strb	r0, [r4, #1]
    5f12:	e7ef      	b.n	5ef4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5f14:	2201      	movs	r2, #1
    5f16:	4629      	mov	r1, r5
    5f18:	4630      	mov	r0, r6
    5f1a:	f000 f887 	bl	602c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5f1e:	e7f5      	b.n	5f0c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5f20:	2000      	movs	r0, #0
    5f22:	bd70      	pop	{r4, r5, r6, pc}
    5f24:	20001386 	.word	0x20001386

00005f28 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5f28:	b570      	push	{r4, r5, r6, lr}
    5f2a:	4d0b      	ldr	r5, [pc, #44]	; (5f58 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5f2c:	7828      	ldrb	r0, [r5, #0]
    5f2e:	1e40      	subs	r0, r0, #1
    5f30:	b244      	sxtb	r4, r0
    5f32:	e00a      	b.n	5f4a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5f34:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5f38:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5f3c:	07c0      	lsls	r0, r0, #31
    5f3e:	d002      	beq.n	5f46 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5f40:	b2e0      	uxtb	r0, r4
    5f42:	f000 f8ed 	bl	6120 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    5f46:	1e64      	subs	r4, r4, #1
    5f48:	b264      	sxtb	r4, r4
    5f4a:	2c00      	cmp	r4, #0
    5f4c:	daf2      	bge.n	5f34 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5f4e:	4903      	ldr	r1, [pc, #12]	; (5f5c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5f50:	2000      	movs	r0, #0
    5f52:	7048      	strb	r0, [r1, #1]
    5f54:	bd70      	pop	{r4, r5, r6, pc}
    5f56:	0000      	.short	0x0000
    5f58:	20001386 	.word	0x20001386
    5f5c:	20000348 	.word	0x20000348

00005f60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f64:	2400      	movs	r4, #0
    5f66:	4625      	mov	r5, r4
    5f68:	4e18      	ldr	r6, [pc, #96]	; (5fcc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5f6a:	e029      	b.n	5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5f6c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5f70:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5f74:	07c0      	lsls	r0, r0, #31
    5f76:	d021      	beq.n	5fbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5f78:	4628      	mov	r0, r5
    5f7a:	f000 f843 	bl	6004 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f7e:	4603      	mov	r3, r0
    5f80:	f7ff ff44 	bl	5e0c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5f84:	4601      	mov	r1, r0
    5f86:	2000      	movs	r0, #0
    5f88:	2b10      	cmp	r3, #16
    5f8a:	d009      	beq.n	5fa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5f8c:	18f2      	adds	r2, r6, r3
    5f8e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5f92:	f1bc 0f01 	cmp.w	ip, #1
    5f96:	d002      	beq.n	5f9e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5f98:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5f9c:	b102      	cbz	r2, 5fa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5f9e:	2001      	movs	r0, #1
    5fa0:	1e40      	subs	r0, r0, #1
    5fa2:	4201      	tst	r1, r0
    5fa4:	d10a      	bne.n	5fbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5fa6:	480a      	ldr	r0, [pc, #40]	; (5fd0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5fa8:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5fac:	5503      	strb	r3, [r0, r4]
    5fae:	4620      	mov	r0, r4
    5fb0:	1c64      	adds	r4, r4, #1
    5fb2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5fb6:	b2e4      	uxtb	r4, r4
    5fb8:	f005 f9b8 	bl	b32c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5fbc:	1c6d      	adds	r5, r5, #1
    5fbe:	b2ed      	uxtb	r5, r5
    5fc0:	7830      	ldrb	r0, [r6, #0]
    5fc2:	42a8      	cmp	r0, r5
    5fc4:	d8d2      	bhi.n	5f6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fca:	0000      	.short	0x0000
    5fcc:	20001386 	.word	0x20001386
    5fd0:	2000034c 	.word	0x2000034c
    5fd4:	4602      	mov	r2, r0
    5fd6:	4809      	ldr	r0, [pc, #36]	; (5ffc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5fd8:	b510      	push	{r4, lr}
    5fda:	7800      	ldrb	r0, [r0, #0]
    5fdc:	460b      	mov	r3, r1
    5fde:	b158      	cbz	r0, 5ff8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5fe0:	4807      	ldr	r0, [pc, #28]	; (6000 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5fe2:	7881      	ldrb	r1, [r0, #2]
    5fe4:	b141      	cbz	r1, 5ff8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5fe6:	b10b      	cbz	r3, 5fec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5fe8:	1cc0      	adds	r0, r0, #3
    5fea:	e001      	b.n	5ff0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5fec:	4804      	ldr	r0, [pc, #16]	; (6000 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5fee:	3083      	adds	r0, #131	; 0x83
    5ff0:	f004 fb7a 	bl	a6e8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5ff4:	2001      	movs	r0, #1
    5ff6:	bd10      	pop	{r4, pc}
    5ff8:	2000      	movs	r0, #0
    5ffa:	bd10      	pop	{r4, pc}
    5ffc:	20000348 	.word	0x20000348
    6000:	20001386 	.word	0x20001386
    6004:	4908      	ldr	r1, [pc, #32]	; (6028 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6006:	b510      	push	{r4, lr}
    6008:	4603      	mov	r3, r0
    600a:	2000      	movs	r0, #0
    600c:	788a      	ldrb	r2, [r1, #2]
    600e:	e006      	b.n	601e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6010:	180c      	adds	r4, r1, r0
    6012:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6016:	429c      	cmp	r4, r3
    6018:	d004      	beq.n	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    601a:	1c40      	adds	r0, r0, #1
    601c:	b2c0      	uxtb	r0, r0
    601e:	4282      	cmp	r2, r0
    6020:	d8f6      	bhi.n	6010 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6022:	2010      	movs	r0, #16
    6024:	bd10      	pop	{r4, pc}
    6026:	0000      	.short	0x0000
    6028:	20001386 	.word	0x20001386
    602c:	b570      	push	{r4, r5, r6, lr}
    602e:	4b0c      	ldr	r3, [pc, #48]	; (6060 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6030:	4604      	mov	r4, r0
    6032:	7818      	ldrb	r0, [r3, #0]
    6034:	1c45      	adds	r5, r0, #1
    6036:	701d      	strb	r5, [r3, #0]
    6038:	2810      	cmp	r0, #16
    603a:	d303      	bcc.n	6044 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    603c:	2146      	movs	r1, #70	; 0x46
    603e:	2028      	movs	r0, #40	; 0x28
    6040:	f7fe fa84 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6044:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6048:	680d      	ldr	r5, [r1, #0]
    604a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    604e:	8889      	ldrh	r1, [r1, #4]
    6050:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6054:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6058:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    605c:	bd70      	pop	{r4, r5, r6, pc}
    605e:	0000      	.short	0x0000
    6060:	20001386 	.word	0x20001386
    6064:	b5f0      	push	{r4, r5, r6, r7, lr}
    6066:	4c1a      	ldr	r4, [pc, #104]	; (60d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    6068:	4603      	mov	r3, r0
    606a:	2000      	movs	r0, #0
    606c:	7825      	ldrb	r5, [r4, #0]
    606e:	e02a      	b.n	60c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    6070:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6074:	780f      	ldrb	r7, [r1, #0]
    6076:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    607a:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    607e:	ea87 070c 	eor.w	r7, r7, ip
    6082:	405e      	eors	r6, r3
    6084:	443e      	add	r6, r7
    6086:	784f      	ldrb	r7, [r1, #1]
    6088:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    608c:	ea87 070c 	eor.w	r7, r7, ip
    6090:	443e      	add	r6, r7
    6092:	788f      	ldrb	r7, [r1, #2]
    6094:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    6098:	ea87 070c 	eor.w	r7, r7, ip
    609c:	443e      	add	r6, r7
    609e:	78cf      	ldrb	r7, [r1, #3]
    60a0:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    60a4:	ea87 070c 	eor.w	r7, r7, ip
    60a8:	443e      	add	r6, r7
    60aa:	790f      	ldrb	r7, [r1, #4]
    60ac:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    60b0:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    60b4:	ea87 070c 	eor.w	r7, r7, ip
    60b8:	443e      	add	r6, r7
    60ba:	794f      	ldrb	r7, [r1, #5]
    60bc:	4057      	eors	r7, r2
    60be:	42f7      	cmn	r7, r6
    60c0:	d004      	beq.n	60cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    60c2:	1c40      	adds	r0, r0, #1
    60c4:	b2c0      	uxtb	r0, r0
    60c6:	4285      	cmp	r5, r0
    60c8:	d8d2      	bhi.n	6070 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    60ca:	2010      	movs	r0, #16
    60cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ce:	0000      	.short	0x0000
    60d0:	20001386 	.word	0x20001386
    60d4:	b570      	push	{r4, r5, r6, lr}
    60d6:	4605      	mov	r5, r0
    60d8:	f7ff ff94 	bl	6004 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    60dc:	2810      	cmp	r0, #16
    60de:	d11c      	bne.n	611a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    60e0:	4c0e      	ldr	r4, [pc, #56]	; (611c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    60e2:	7820      	ldrb	r0, [r4, #0]
    60e4:	1e40      	subs	r0, r0, #1
    60e6:	b2c0      	uxtb	r0, r0
    60e8:	7020      	strb	r0, [r4, #0]
    60ea:	42a8      	cmp	r0, r5
    60ec:	d015      	beq.n	611a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    60ee:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    60f2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    60f6:	f502 7080 	add.w	r0, r2, #256	; 0x100
    60fa:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    60fe:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6102:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6106:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    610a:	7820      	ldrb	r0, [r4, #0]
    610c:	f7ff ff7a 	bl	6004 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6110:	2810      	cmp	r0, #16
    6112:	d002      	beq.n	611a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6114:	4420      	add	r0, r4
    6116:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    611a:	bd70      	pop	{r4, r5, r6, pc}
    611c:	20001386 	.word	0x20001386
    6120:	4905      	ldr	r1, [pc, #20]	; (6138 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    6122:	784a      	ldrb	r2, [r1, #1]
    6124:	1e52      	subs	r2, r2, #1
    6126:	704a      	strb	r2, [r1, #1]
    6128:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    612c:	2200      	movs	r2, #0
    612e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6132:	f7ff bfcf 	b.w	60d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6136:	0000      	.short	0x0000
    6138:	20001386 	.word	0x20001386

0000613c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6140:	4604      	mov	r4, r0
    6142:	f100 0580 	add.w	r5, r0, #128	; 0x80
    6146:	f04f 0901 	mov.w	r9, #1
    614a:	b171      	cbz	r1, 616a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    614c:	f104 079e 	add.w	r7, r4, #158	; 0x9e
    6150:	1e7e      	subs	r6, r7, #1
    6152:	2901      	cmp	r1, #1
    6154:	d020      	beq.n	6198 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6156:	2902      	cmp	r1, #2
    6158:	d045      	beq.n	61e6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    615a:	2903      	cmp	r1, #3
    615c:	d11a      	bne.n	6194 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    615e:	4639      	mov	r1, r7
    6160:	4630      	mov	r0, r6
    6162:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6166:	f007 bd68 	b.w	dc3a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    616a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
    616e:	2100      	movs	r1, #0
    6170:	f006 f9fd 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6174:	f885 901d 	strb.w	r9, [r5, #29]
    6178:	4820      	ldr	r0, [pc, #128]	; (61fc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    617a:	6668      	str	r0, [r5, #100]	; 0x64
    617c:	2007      	movs	r0, #7
    617e:	66a8      	str	r0, [r5, #104]	; 0x68
    6180:	f814 0fe4 	ldrb.w	r0, [r4, #228]!
    6184:	f020 0004 	bic.w	r0, r0, #4
    6188:	7020      	strb	r0, [r4, #0]
    618a:	20fe      	movs	r0, #254	; 0xfe
    618c:	f885 009c 	strb.w	r0, [r5, #156]	; 0x9c
    6190:	207f      	movs	r0, #127	; 0x7f
    6192:	7468      	strb	r0, [r5, #17]
    6194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6198:	f04f 0800 	mov.w	r8, #0
    619c:	f8a4 8226 	strh.w	r8, [r4, #550]	; 0x226
    61a0:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
    61a4:	6921      	ldr	r1, [r4, #16]
    61a6:	4816      	ldr	r0, [pc, #88]	; (6200 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>)
    61a8:	460a      	mov	r2, r1
    61aa:	4408      	add	r0, r1
    61ac:	fbb0 f0f1 	udiv	r0, r0, r1
    61b0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    61b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    61b8:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    61bc:	8b63      	ldrh	r3, [r4, #26]
    61be:	4628      	mov	r0, r5
    61c0:	f000 f820 	bl	6204 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    61c4:	4639      	mov	r1, r7
    61c6:	4630      	mov	r0, r6
    61c8:	f007 fd37 	bl	dc3a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    61cc:	f006 f931 	bl	c432 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    61d0:	b118      	cbz	r0, 61da <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    61d2:	6960      	ldr	r0, [r4, #20]
    61d4:	f000 fb82 	bl	68dc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    61d8:	b110      	cbz	r0, 61e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    61da:	f884 820c 	strb.w	r8, [r4, #524]	; 0x20c
    61de:	e7d9      	b.n	6194 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    61e0:	f884 920c 	strb.w	r9, [r4, #524]	; 0x20c
    61e4:	e7d6      	b.n	6194 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    61e6:	6901      	ldr	r1, [r0, #16]
    61e8:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
    61ec:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
    61f0:	4628      	mov	r0, r5
    61f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    61f6:	f000 b805 	b.w	6204 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    61fa:	0000      	.short	0x0000
    61fc:	3004492f 	.word	0x3004492f
    6200:	01c9c37f 	.word	0x01c9c37f
    6204:	b510      	push	{r4, lr}
    6206:	2400      	movs	r4, #0
    6208:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
    620c:	f830 4f48 	ldrh.w	r4, [r0, #72]!
    6210:	434c      	muls	r4, r1
    6212:	fbb4 f4f2 	udiv	r4, r4, r2
    6216:	f820 4910 	strh.w	r4, [r0], #-16
    621a:	f240 2471 	movw	r4, #625	; 0x271
    621e:	4363      	muls	r3, r4
    6220:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6224:	1e5b      	subs	r3, r3, #1
    6226:	fbb3 f3f2 	udiv	r3, r3, r2
    622a:	81c3      	strh	r3, [r0, #14]
    622c:	4b09      	ldr	r3, [pc, #36]	; (6254 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    622e:	fbb3 f3f2 	udiv	r3, r3, r2
    6232:	1c5b      	adds	r3, r3, #1
    6234:	8283      	strh	r3, [r0, #20]
    6236:	8903      	ldrh	r3, [r0, #8]
    6238:	4363      	muls	r3, r4
    623a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    623e:	1e5b      	subs	r3, r3, #1
    6240:	fbb3 f3f2 	udiv	r3, r3, r2
    6244:	6043      	str	r3, [r0, #4]
    6246:	6803      	ldr	r3, [r0, #0]
    6248:	434b      	muls	r3, r1
    624a:	fbb3 f1f2 	udiv	r1, r3, r2
    624e:	6001      	str	r1, [r0, #0]
    6250:	bd10      	pop	{r4, pc}
    6252:	0000      	.short	0x0000
    6254:	02625a00 	.word	0x02625a00

00006258 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6258:	b570      	push	{r4, r5, r6, lr}
    625a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    625e:	b28b      	uxth	r3, r1
    6260:	7ac5      	ldrb	r5, [r0, #11]
    6262:	ea83 0102 	eor.w	r1, r3, r2
    6266:	2200      	movs	r2, #0
    6268:	b2cc      	uxtb	r4, r1
    626a:	0a09      	lsrs	r1, r1, #8
    626c:	fa94 f4a4 	rbit	r4, r4
    6270:	fa91 f1a1 	rbit	r1, r1
    6274:	0e24      	lsrs	r4, r4, #24
    6276:	0e09      	lsrs	r1, r1, #24
    6278:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    627c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6280:	1c52      	adds	r2, r2, #1
    6282:	4419      	add	r1, r3
    6284:	b2d2      	uxtb	r2, r2
    6286:	b289      	uxth	r1, r1
    6288:	2a03      	cmp	r2, #3
    628a:	d3ed      	bcc.n	6268 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    628c:	4059      	eors	r1, r3
    628e:	2225      	movs	r2, #37	; 0x25
    6290:	fbb1 f3f2 	udiv	r3, r1, r2
    6294:	fb02 1213 	mls	r2, r2, r3, r1
    6298:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    629c:	f002 0607 	and.w	r6, r2, #7
    62a0:	785b      	ldrb	r3, [r3, #1]
    62a2:	2401      	movs	r4, #1
    62a4:	fa04 f606 	lsl.w	r6, r4, r6
    62a8:	4233      	tst	r3, r6
    62aa:	d001      	beq.n	62b0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    62ac:	4610      	mov	r0, r2
    62ae:	bd70      	pop	{r4, r5, r6, pc}
    62b0:	434d      	muls	r5, r1
    62b2:	0c29      	lsrs	r1, r5, #16
    62b4:	1c49      	adds	r1, r1, #1
    62b6:	b2c9      	uxtb	r1, r1
    62b8:	2200      	movs	r2, #0
    62ba:	1885      	adds	r5, r0, r2
    62bc:	79ab      	ldrb	r3, [r5, #6]
    62be:	428b      	cmp	r3, r1
    62c0:	d312      	bcc.n	62e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    62c2:	f895 5001 	ldrb.w	r5, [r5, #1]
    62c6:	2300      	movs	r3, #0
    62c8:	fa04 f603 	lsl.w	r6, r4, r3
    62cc:	4235      	tst	r5, r6
    62ce:	d001      	beq.n	62d4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    62d0:	1e49      	subs	r1, r1, #1
    62d2:	b2c9      	uxtb	r1, r1
    62d4:	b121      	cbz	r1, 62e0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    62d6:	1c5b      	adds	r3, r3, #1
    62d8:	b2db      	uxtb	r3, r3
    62da:	2b08      	cmp	r3, #8
    62dc:	d3f4      	bcc.n	62c8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    62de:	e005      	b.n	62ec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    62e0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    62e4:	b2c0      	uxtb	r0, r0
    62e6:	bd70      	pop	{r4, r5, r6, pc}
    62e8:	1ac9      	subs	r1, r1, r3
    62ea:	b2c9      	uxtb	r1, r1
    62ec:	1c52      	adds	r2, r2, #1
    62ee:	b2d2      	uxtb	r2, r2
    62f0:	2a05      	cmp	r2, #5
    62f2:	d3e2      	bcc.n	62ba <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    62f4:	21f9      	movs	r1, #249	; 0xf9
    62f6:	2046      	movs	r0, #70	; 0x46
    62f8:	f7fe f928 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000062fc <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    62fc:	7841      	ldrb	r1, [r0, #1]
    62fe:	b141      	cbz	r1, 6312 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    6300:	78c0      	ldrb	r0, [r0, #3]
    6302:	282b      	cmp	r0, #43	; 0x2b
    6304:	d203      	bcs.n	630e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    6306:	4a04      	ldr	r2, [pc, #16]	; (6318 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    6308:	5c10      	ldrb	r0, [r2, r0]
    630a:	4288      	cmp	r0, r1
    630c:	d101      	bne.n	6312 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    630e:	2001      	movs	r0, #1
    6310:	4770      	bx	lr
    6312:	2000      	movs	r0, #0
    6314:	4770      	bx	lr
    6316:	0000      	.short	0x0000
    6318:	00010772 	.word	0x00010772

0000631c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    631c:	b510      	push	{r4, lr}
    631e:	2201      	movs	r2, #1
    6320:	70c1      	strb	r1, [r0, #3]
    6322:	292b      	cmp	r1, #43	; 0x2b
    6324:	d202      	bcs.n	632c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    6326:	4a06      	ldr	r2, [pc, #24]	; (6340 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    6328:	5c52      	ldrb	r2, [r2, r1]
    632a:	e006      	b.n	633a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    632c:	29ff      	cmp	r1, #255	; 0xff
    632e:	d004      	beq.n	633a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    6330:	f44f 618f 	mov.w	r1, #1144	; 0x478
    6334:	202a      	movs	r0, #42	; 0x2a
    6336:	f7fe f909 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    633a:	7042      	strb	r2, [r0, #1]
    633c:	bd10      	pop	{r4, pc}
    633e:	0000      	.short	0x0000
    6340:	00010772 	.word	0x00010772

00006344 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    6344:	4904      	ldr	r1, [pc, #16]	; (6358 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    6346:	7c89      	ldrb	r1, [r1, #18]
    6348:	0749      	lsls	r1, r1, #29
    634a:	d400      	bmi.n	634e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    634c:	b108      	cbz	r0, 6352 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    634e:	2000      	movs	r0, #0
    6350:	4770      	bx	lr
    6352:	2001      	movs	r0, #1
    6354:	4770      	bx	lr
    6356:	0000      	.short	0x0000
    6358:	200012c4 	.word	0x200012c4

0000635c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    635c:	4803      	ldr	r0, [pc, #12]	; (636c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    635e:	7c80      	ldrb	r0, [r0, #18]
    6360:	0780      	lsls	r0, r0, #30
    6362:	d401      	bmi.n	6368 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    6364:	2001      	movs	r0, #1
    6366:	4770      	bx	lr
    6368:	2000      	movs	r0, #0
    636a:	4770      	bx	lr
    636c:	200012c4 	.word	0x200012c4

00006370 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    6370:	4803      	ldr	r0, [pc, #12]	; (6380 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    6372:	7c80      	ldrb	r0, [r0, #18]
    6374:	07c0      	lsls	r0, r0, #31
    6376:	d001      	beq.n	637c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    6378:	2000      	movs	r0, #0
    637a:	4770      	bx	lr
    637c:	2001      	movs	r0, #1
    637e:	4770      	bx	lr
    6380:	200012c4 	.word	0x200012c4
    6384:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    6388:	4688      	mov	r8, r1
    638a:	4699      	mov	r9, r3
    638c:	4615      	mov	r5, r2
    638e:	4604      	mov	r4, r0
    6390:	4669      	mov	r1, sp
    6392:	f007 fa90 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6396:	bbc8      	cbnz	r0, 640c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    6398:	9e01      	ldr	r6, [sp, #4]
    639a:	2700      	movs	r7, #0
    639c:	3680      	adds	r6, #128	; 0x80
    639e:	b17d      	cbz	r5, 63c0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    63a0:	4620      	mov	r0, r4
    63a2:	f7fe fce1 	bl	4d68 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    63a6:	0004      	movs	r4, r0
    63a8:	d00d      	beq.n	63c6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    63aa:	4629      	mov	r1, r5
    63ac:	f006 fe8c 	bl	d0c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    63b0:	b118      	cbz	r0, 63ba <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    63b2:	4919      	ldr	r1, [pc, #100]	; (6418 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>)
    63b4:	8849      	ldrh	r1, [r1, #2]
    63b6:	42a9      	cmp	r1, r5
    63b8:	d207      	bcs.n	63ca <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    63ba:	2000      	movs	r0, #0
    63bc:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    63c0:	2001      	movs	r0, #1
    63c2:	7730      	strb	r0, [r6, #28]
    63c4:	e022      	b.n	640c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    63c6:	2168      	movs	r1, #104	; 0x68
    63c8:	e023      	b.n	6412 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    63ca:	4601      	mov	r1, r0
    63cc:	aa02      	add	r2, sp, #8
    63ce:	4620      	mov	r0, r4
    63d0:	f006 fe73 	bl	d0ba <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    63d4:	9802      	ldr	r0, [sp, #8]
    63d6:	8007      	strh	r7, [r0, #0]
    63d8:	7087      	strb	r7, [r0, #2]
    63da:	7f31      	ldrb	r1, [r6, #28]
    63dc:	b109      	cbz	r1, 63e2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x72>
    63de:	f04f 0802 	mov.w	r8, #2
    63e2:	4641      	mov	r1, r8
    63e4:	f007 fda5 	bl	df32 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    63e8:	9802      	ldr	r0, [sp, #8]
    63ea:	462a      	mov	r2, r5
    63ec:	4649      	mov	r1, r9
    63ee:	1cc0      	adds	r0, r0, #3
    63f0:	f006 f843 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    63f4:	4620      	mov	r0, r4
    63f6:	4629      	mov	r1, r5
    63f8:	f006 fe1d 	bl	d036 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    63fc:	b140      	cbz	r0, 6410 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa0>
    63fe:	4668      	mov	r0, sp
    6400:	f007 fdf2 	bl	dfe8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6404:	9801      	ldr	r0, [sp, #4]
    6406:	f8a0 7212 	strh.w	r7, [r0, #530]	; 0x212
    640a:	7737      	strb	r7, [r6, #28]
    640c:	2001      	movs	r0, #1
    640e:	e7d5      	b.n	63bc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    6410:	217d      	movs	r1, #125	; 0x7d
    6412:	202b      	movs	r0, #43	; 0x2b
    6414:	f7fe f89a 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6418:	200012c4 	.word	0x200012c4

0000641c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    641c:	2202      	movs	r2, #2
    641e:	4902      	ldr	r1, [pc, #8]	; (6428 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0xc>)
    6420:	4802      	ldr	r0, [pc, #8]	; (642c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x10>)
    6422:	f000 b805 	b.w	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6426:	0000      	.short	0x0000
    6428:	0000e127 	.word	0x0000e127
    642c:	200012dc 	.word	0x200012dc

00006430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    6430:	b538      	push	{r3, r4, r5, lr}
    6432:	b318      	cbz	r0, 647c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>
    6434:	7a03      	ldrb	r3, [r0, #8]
    6436:	f88d 3000 	strb.w	r3, [sp]
    643a:	9b00      	ldr	r3, [sp, #0]
    643c:	9300      	str	r3, [sp, #0]
    643e:	f89d 3000 	ldrb.w	r3, [sp]
    6442:	2b00      	cmp	r3, #0
    6444:	d126      	bne.n	6494 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x64>
    6446:	6041      	str	r1, [r0, #4]
    6448:	f100 0108 	add.w	r1, r0, #8
    644c:	700a      	strb	r2, [r1, #0]
    644e:	f3ef 8210 	mrs	r2, PRIMASK
    6452:	b672      	cpsid	i
    6454:	4b10      	ldr	r3, [pc, #64]	; (6498 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
    6456:	6003      	str	r3, [r0, #0]
    6458:	1f19      	subs	r1, r3, #4
    645a:	684c      	ldr	r4, [r1, #4]
    645c:	7a24      	ldrb	r4, [r4, #8]
    645e:	f88d 4000 	strb.w	r4, [sp]
    6462:	9c00      	ldr	r4, [sp, #0]
    6464:	9400      	str	r4, [sp, #0]
    6466:	f89d 5000 	ldrb.w	r5, [sp]
    646a:	2d01      	cmp	r5, #1
    646c:	d004      	beq.n	6478 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    646e:	680b      	ldr	r3, [r1, #0]
    6470:	6018      	str	r0, [r3, #0]
    6472:	6008      	str	r0, [r1, #0]
    6474:	b13a      	cbz	r2, 6486 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x56>
    6476:	e007      	b.n	6488 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x58>
    6478:	600b      	str	r3, [r1, #0]
    647a:	e7f9      	b.n	6470 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    647c:	f44f 6192 	mov.w	r1, #1168	; 0x490
    6480:	2010      	movs	r0, #16
    6482:	f7fe f863 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6486:	b662      	cpsie	i
    6488:	4804      	ldr	r0, [pc, #16]	; (649c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
    648a:	7800      	ldrb	r0, [r0, #0]
    648c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6490:	f7fd be52 	b.w	4138 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6494:	bd38      	pop	{r3, r4, r5, pc}
    6496:	0000      	.short	0x0000
    6498:	200012f4 	.word	0x200012f4
    649c:	20000368 	.word	0x20000368

000064a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    64a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64a4:	4f47      	ldr	r7, [pc, #284]	; (65c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>)
    64a6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 65c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    64aa:	4682      	mov	sl, r0
    64ac:	2600      	movs	r6, #0
    64ae:	6878      	ldr	r0, [r7, #4]
    64b0:	7a00      	ldrb	r0, [r0, #8]
    64b2:	f88d 0000 	strb.w	r0, [sp]
    64b6:	9800      	ldr	r0, [sp, #0]
    64b8:	9000      	str	r0, [sp, #0]
    64ba:	f89d 1000 	ldrb.w	r1, [sp]
    64be:	2927      	cmp	r1, #39	; 0x27
    64c0:	d106      	bne.n	64d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    64c2:	f899 1013 	ldrb.w	r1, [r9, #19]
    64c6:	b119      	cbz	r1, 64d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    64c8:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    64cc:	2800      	cmp	r0, #0
    64ce:	d06c      	beq.n	65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    64d0:	f88d 6000 	strb.w	r6, [sp]
    64d4:	4668      	mov	r0, sp
    64d6:	f000 f8f3 	bl	66c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    64da:	f89d 1000 	ldrb.w	r1, [sp]
    64de:	2900      	cmp	r1, #0
    64e0:	d1f8      	bne.n	64d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    64e2:	2800      	cmp	r0, #0
    64e4:	d061      	beq.n	65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    64e6:	4604      	mov	r4, r0
    64e8:	7a00      	ldrb	r0, [r0, #8]
    64ea:	f88d 0000 	strb.w	r0, [sp]
    64ee:	9800      	ldr	r0, [sp, #0]
    64f0:	9000      	str	r0, [sp, #0]
    64f2:	f89d 5000 	ldrb.w	r5, [sp]
    64f6:	1ea8      	subs	r0, r5, #2
    64f8:	2826      	cmp	r0, #38	; 0x26
    64fa:	d25d      	bcs.n	65b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    64fc:	e8df f000 	tbb	[pc, r0]
    6500:	1a5c2213 	.word	0x1a5c2213
    6504:	3e22225c 	.word	0x3e22225c
    6508:	22222222 	.word	0x22222222
    650c:	5c1a5c22 	.word	0x5c1a5c22
    6510:	5c1a2222 	.word	0x5c1a2222
    6514:	225c5c5c 	.word	0x225c5c5c
    6518:	1a225c5c 	.word	0x1a225c5c
    651c:	435c2222 	.word	0x435c2222
    6520:	2f5c5c1a 	.word	0x2f5c5c1a
    6524:	4c34      	.short	0x4c34
    6526:	6862      	ldr	r2, [r4, #4]
    6528:	bb7a      	cbnz	r2, 658a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    652a:	f240 318a 	movw	r1, #906	; 0x38a
    652e:	e040      	b.n	65b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6530:	7226      	strb	r6, [r4, #8]
    6532:	e044      	b.n	65be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6534:	4825      	ldr	r0, [pc, #148]	; (65cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    6536:	6803      	ldr	r3, [r0, #0]
    6538:	b11b      	cbz	r3, 6542 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    653a:	6860      	ldr	r0, [r4, #4]
    653c:	462a      	mov	r2, r5
    653e:	4651      	mov	r1, sl
    6540:	4798      	blx	r3
    6542:	e7f5      	b.n	6530 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6544:	462a      	mov	r2, r5
    6546:	4621      	mov	r1, r4
    6548:	4650      	mov	r0, sl
    654a:	f000 f8e1 	bl	6710 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x120>
    654e:	b110      	cbz	r0, 6556 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    6550:	2d0d      	cmp	r5, #13
    6552:	d034      	beq.n	65be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6554:	e7ec      	b.n	6530 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6556:	2d0d      	cmp	r5, #13
    6558:	d031      	beq.n	65be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    655a:	7226      	strb	r6, [r4, #8]
    655c:	e7a7      	b.n	64ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe>
    655e:	6862      	ldr	r2, [r4, #4]
    6560:	b99a      	cbnz	r2, 658a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    6562:	f240 412b 	movw	r1, #1067	; 0x42b
    6566:	e024      	b.n	65b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6568:	f88a 6001 	strb.w	r6, [sl, #1]
    656c:	2115      	movs	r1, #21
    656e:	f88a 1000 	strb.w	r1, [sl]
    6572:	f8d4 1009 	ldr.w	r1, [r4, #9]
    6576:	f8ca 1004 	str.w	r1, [sl, #4]
    657a:	e7d9      	b.n	6530 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    657c:	6862      	ldr	r2, [r4, #4]
    657e:	b922      	cbnz	r2, 658a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    6580:	f240 413d 	movw	r1, #1085	; 0x43d
    6584:	e015      	b.n	65b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6586:	6862      	ldr	r2, [r4, #4]
    6588:	b11a      	cbz	r2, 6592 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf2>
    658a:	4651      	mov	r1, sl
    658c:	4620      	mov	r0, r4
    658e:	4790      	blx	r2
    6590:	e7ce      	b.n	6530 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6592:	f240 4147 	movw	r1, #1095	; 0x447
    6596:	e00c      	b.n	65b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6598:	480d      	ldr	r0, [pc, #52]	; (65d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>)
    659a:	6802      	ldr	r2, [r0, #0]
    659c:	b122      	cbz	r2, 65a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    659e:	6860      	ldr	r0, [r4, #4]
    65a0:	b128      	cbz	r0, 65ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    65a2:	8800      	ldrh	r0, [r0, #0]
    65a4:	4651      	mov	r1, sl
    65a6:	4790      	blx	r2
    65a8:	2002      	movs	r0, #2
    65aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65ae:	f44f 618a 	mov.w	r1, #1104	; 0x450
    65b2:	2010      	movs	r0, #16
    65b4:	f7fd ffca 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65b8:	f240 416b 	movw	r1, #1131	; 0x46b
    65bc:	e7f9      	b.n	65b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    65be:	2004      	movs	r0, #4
    65c0:	e7f3      	b.n	65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    65c2:	0000      	.short	0x0000
    65c4:	200012f0 	.word	0x200012f0
    65c8:	200012c4 	.word	0x200012c4
    65cc:	20000114 	.word	0x20000114
    65d0:	20000118 	.word	0x20000118

000065d4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    65d4:	4901      	ldr	r1, [pc, #4]	; (65dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    65d6:	7008      	strb	r0, [r1, #0]
    65d8:	f000 b96a 	b.w	68b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    65dc:	20000368 	.word	0x20000368

000065e0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    65e0:	4902      	ldr	r1, [pc, #8]	; (65ec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    65e2:	4801      	ldr	r0, [pc, #4]	; (65e8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    65e4:	6008      	str	r0, [r1, #0]
    65e6:	4770      	bx	lr
    65e8:	0000e5fb 	.word	0x0000e5fb
    65ec:	20000114 	.word	0x20000114

000065f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    65f0:	4905      	ldr	r1, [pc, #20]	; (6608 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    65f2:	4804      	ldr	r0, [pc, #16]	; (6604 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    65f4:	6008      	str	r0, [r1, #0]
    65f6:	4906      	ldr	r1, [pc, #24]	; (6610 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    65f8:	4804      	ldr	r0, [pc, #16]	; (660c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    65fa:	6008      	str	r0, [r1, #0]
    65fc:	4906      	ldr	r1, [pc, #24]	; (6618 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    65fe:	4805      	ldr	r0, [pc, #20]	; (6614 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6600:	6008      	str	r0, [r1, #0]
    6602:	4770      	bx	lr
    6604:	0000e5fb 	.word	0x0000e5fb
    6608:	20000114 	.word	0x20000114
    660c:	0000e033 	.word	0x0000e033
    6610:	2000011c 	.word	0x2000011c
    6614:	0000661d 	.word	0x0000661d
    6618:	20000118 	.word	0x20000118
    661c:	b538      	push	{r3, r4, r5, lr}
    661e:	000d      	movs	r5, r1
    6620:	d014      	beq.n	664c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x5c>
    6622:	8028      	strh	r0, [r5, #0]
    6624:	2100      	movs	r1, #0
    6626:	7169      	strb	r1, [r5, #5]
    6628:	f7fe fb88 	bl	4d3c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    662c:	4604      	mov	r4, r0
    662e:	f006 fd26 	bl	d07e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6632:	b170      	cbz	r0, 6652 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x62>
    6634:	4601      	mov	r1, r0
    6636:	466a      	mov	r2, sp
    6638:	4620      	mov	r0, r4
    663a:	f006 fd3e 	bl	d0ba <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    663e:	8068      	strh	r0, [r5, #2]
    6640:	b150      	cbz	r0, 6658 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6642:	28fb      	cmp	r0, #251	; 0xfb
    6644:	d90b      	bls.n	665e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x6e>
    6646:	f240 21c2 	movw	r1, #706	; 0x2c2
    664a:	e033      	b.n	66b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    664c:	f240 21b1 	movw	r1, #689	; 0x2b1
    6650:	e030      	b.n	66b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6652:	f240 21ba 	movw	r1, #698	; 0x2ba
    6656:	e02d      	b.n	66b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6658:	f240 21bf 	movw	r1, #703	; 0x2bf
    665c:	e02a      	b.n	66b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    665e:	9800      	ldr	r0, [sp, #0]
    6660:	f007 fc13 	bl	de8a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    6664:	2801      	cmp	r0, #1
    6666:	d004      	beq.n	6672 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    6668:	2802      	cmp	r0, #2
    666a:	d002      	beq.n	6672 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    666c:	f240 21d3 	movw	r1, #723	; 0x2d3
    6670:	e020      	b.n	66b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6672:	7128      	strb	r0, [r5, #4]
    6674:	68a8      	ldr	r0, [r5, #8]
    6676:	b1a8      	cbz	r0, 66a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    6678:	9900      	ldr	r1, [sp, #0]
    667a:	886a      	ldrh	r2, [r5, #2]
    667c:	1cc9      	adds	r1, r1, #3
    667e:	f005 fefc 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6682:	4620      	mov	r0, r4
    6684:	f006 fcc3 	bl	d00e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    6688:	b178      	cbz	r0, 66aa <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xba>
    668a:	4620      	mov	r0, r4
    668c:	2100      	movs	r1, #0
    668e:	f006 fdb2 	bl	d1f6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6692:	b168      	cbz	r0, 66b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc0>
    6694:	4809      	ldr	r0, [pc, #36]	; (66bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xcc>)
    6696:	7cc1      	ldrb	r1, [r0, #19]
    6698:	2900      	cmp	r1, #0
    669a:	d002      	beq.n	66a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    669c:	8a81      	ldrh	r1, [r0, #20]
    669e:	1e49      	subs	r1, r1, #1
    66a0:	8281      	strh	r1, [r0, #20]
    66a2:	bd38      	pop	{r3, r4, r5, pc}
    66a4:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    66a8:	e004      	b.n	66b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    66aa:	f240 21e1 	movw	r1, #737	; 0x2e1
    66ae:	e001      	b.n	66b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    66b0:	f240 21e6 	movw	r1, #742	; 0x2e6
    66b4:	2010      	movs	r0, #16
    66b6:	f7fd ff49 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66ba:	0000      	.short	0x0000
    66bc:	200012c4 	.word	0x200012c4
    66c0:	b538      	push	{r3, r4, r5, lr}
    66c2:	4602      	mov	r2, r0
    66c4:	4b11      	ldr	r3, [pc, #68]	; (670c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>)
    66c6:	2000      	movs	r0, #0
    66c8:	7010      	strb	r0, [r2, #0]
    66ca:	6858      	ldr	r0, [r3, #4]
    66cc:	7a01      	ldrb	r1, [r0, #8]
    66ce:	f88d 1000 	strb.w	r1, [sp]
    66d2:	9900      	ldr	r1, [sp, #0]
    66d4:	9100      	str	r1, [sp, #0]
    66d6:	f89d 5000 	ldrb.w	r5, [sp]
    66da:	2401      	movs	r4, #1
    66dc:	2d01      	cmp	r5, #1
    66de:	d006      	beq.n	66ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    66e0:	f3ef 8110 	mrs	r1, PRIMASK
    66e4:	b672      	cpsid	i
    66e6:	6805      	ldr	r5, [r0, #0]
    66e8:	605d      	str	r5, [r3, #4]
    66ea:	b111      	cbz	r1, 66f2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x102>
    66ec:	e002      	b.n	66f4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x104>
    66ee:	2000      	movs	r0, #0
    66f0:	bd38      	pop	{r3, r4, r5, pc}
    66f2:	b662      	cpsie	i
    66f4:	7a01      	ldrb	r1, [r0, #8]
    66f6:	f88d 1000 	strb.w	r1, [sp]
    66fa:	9900      	ldr	r1, [sp, #0]
    66fc:	9100      	str	r1, [sp, #0]
    66fe:	f89d 3000 	ldrb.w	r3, [sp]
    6702:	2b00      	cmp	r3, #0
    6704:	d1f4      	bne.n	66f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    6706:	7014      	strb	r4, [r2, #0]
    6708:	bd38      	pop	{r3, r4, r5, pc}
    670a:	0000      	.short	0x0000
    670c:	200012f0 	.word	0x200012f0
    6710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6714:	b086      	sub	sp, #24
    6716:	000f      	movs	r7, r1
    6718:	4604      	mov	r4, r0
    671a:	4691      	mov	r9, r2
    671c:	d013      	beq.n	6746 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    671e:	6878      	ldr	r0, [r7, #4]
    6720:	b188      	cbz	r0, 6746 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    6722:	f100 0580 	add.w	r5, r0, #128	; 0x80
    6726:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    672a:	8806      	ldrh	r6, [r0, #0]
    672c:	4610      	mov	r0, r2
    672e:	f04f 0800 	mov.w	r8, #0
    6732:	2a12      	cmp	r2, #18
    6734:	d078      	beq.n	6828 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x238>
    6736:	dc09      	bgt.n	674c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6738:	f04f 0a01 	mov.w	sl, #1
    673c:	2803      	cmp	r0, #3
    673e:	d00a      	beq.n	6756 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x166>
    6740:	2a0d      	cmp	r2, #13
    6742:	d170      	bne.n	6826 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6744:	e01a      	b.n	677c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18c>
    6746:	f240 210b 	movw	r1, #523	; 0x20b
    674a:	e0ac      	b.n	68a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    674c:	281e      	cmp	r0, #30
    674e:	d04c      	beq.n	67ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1fa>
    6750:	2a1f      	cmp	r2, #31
    6752:	d17f      	bne.n	6854 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    6754:	e026      	b.n	67a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b4>
    6756:	2d00      	cmp	r5, #0
    6758:	d00f      	beq.n	677a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18a>
    675a:	f884 8001 	strb.w	r8, [r4, #1]
    675e:	f884 a000 	strb.w	sl, [r4]
    6762:	f884 8004 	strb.w	r8, [r4, #4]
    6766:	f8a4 6005 	strh.w	r6, [r4, #5]
    676a:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
    676e:	71e0      	strb	r0, [r4, #7]
    6770:	f835 0f60 	ldrh.w	r0, [r5, #96]!
    6774:	8120      	strh	r0, [r4, #8]
    6776:	8868      	ldrh	r0, [r5, #2]
    6778:	8160      	strh	r0, [r4, #10]
    677a:	e075      	b.n	6868 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    677c:	4630      	mov	r0, r6
    677e:	f7fe faf3 	bl	4d68 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6782:	b160      	cbz	r0, 679e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ae>
    6784:	f884 8001 	strb.w	r8, [r4, #1]
    6788:	220d      	movs	r2, #13
    678a:	7022      	strb	r2, [r4, #0]
    678c:	80e6      	strh	r6, [r4, #6]
    678e:	f8a4 a008 	strh.w	sl, [r4, #8]
    6792:	4641      	mov	r1, r8
    6794:	f884 a004 	strb.w	sl, [r4, #4]
    6798:	f006 fd2d 	bl	d1f6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    679c:	e064      	b.n	6868 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    679e:	f240 1153 	movw	r1, #339	; 0x153
    67a2:	e080      	b.n	68a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    67a4:	f7ff fde4 	bl	6370 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    67a8:	b3e8      	cbz	r0, 6826 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    67aa:	f887 8008 	strb.w	r8, [r7, #8]
    67ae:	4630      	mov	r0, r6
    67b0:	f8ad 6000 	strh.w	r6, [sp]
    67b4:	a902      	add	r1, sp, #8
    67b6:	f007 f87e 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    67ba:	b110      	cbz	r0, 67c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    67bc:	f240 1125 	movw	r1, #293	; 0x125
    67c0:	e071      	b.n	68a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    67c2:	9803      	ldr	r0, [sp, #12]
    67c4:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    67c8:	f88d 1002 	strb.w	r1, [sp, #2]
    67cc:	7841      	ldrb	r1, [r0, #1]
    67ce:	f88d 1003 	strb.w	r1, [sp, #3]
    67d2:	8840      	ldrh	r0, [r0, #2]
    67d4:	f8ad 0004 	strh.w	r0, [sp, #4]
    67d8:	2102      	movs	r1, #2
    67da:	4668      	mov	r0, sp
    67dc:	f009 fc8c 	bl	100f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    67e0:	2800      	cmp	r0, #0
    67e2:	d034      	beq.n	684e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    67e4:	f240 113b 	movw	r1, #315	; 0x13b
    67e8:	e05d      	b.n	68a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    67ea:	f7ff fdb7 	bl	635c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    67ee:	b1d0      	cbz	r0, 6826 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    67f0:	f887 8008 	strb.w	r8, [r7, #8]
    67f4:	a903      	add	r1, sp, #12
    67f6:	4630      	mov	r0, r6
    67f8:	f009 fae2 	bl	fdc0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    67fc:	b110      	cbz	r0, 6804 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x214>
    67fe:	f44f 71a1 	mov.w	r1, #322	; 0x142
    6802:	e050      	b.n	68a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6804:	f8ad 6000 	strh.w	r6, [sp]
    6808:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    680c:	f8ad 0002 	strh.w	r0, [sp, #2]
    6810:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6814:	f8ad 0004 	strh.w	r0, [sp, #4]
    6818:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    681c:	f8ad 0006 	strh.w	r0, [sp, #6]
    6820:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6824:	e001      	b.n	682a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23a>
    6826:	e015      	b.n	6854 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    6828:	e009      	b.n	683e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24e>
    682a:	f8ad 0008 	strh.w	r0, [sp, #8]
    682e:	4668      	mov	r0, sp
    6830:	f009 faff 	bl	fe32 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6834:	2800      	cmp	r0, #0
    6836:	d00a      	beq.n	684e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6838:	f240 114b 	movw	r1, #331	; 0x14b
    683c:	e033      	b.n	68a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    683e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    6842:	f000 0001 	and.w	r0, r0, #1
    6846:	f7ff fd7d 	bl	6344 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    684a:	b130      	cbz	r0, 685a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    684c:	2000      	movs	r0, #0
    684e:	b006      	add	sp, #24
    6850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6854:	f1b9 0f0a 	cmp.w	r9, #10
    6858:	d008      	beq.n	686c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    685a:	4814      	ldr	r0, [pc, #80]	; (68ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2bc>)
    685c:	6803      	ldr	r3, [r0, #0]
    685e:	b11b      	cbz	r3, 6868 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6860:	6878      	ldr	r0, [r7, #4]
    6862:	464a      	mov	r2, r9
    6864:	4621      	mov	r1, r4
    6866:	4798      	blx	r3
    6868:	2001      	movs	r0, #1
    686a:	e7f0      	b.n	684e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    686c:	4630      	mov	r0, r6
    686e:	f7fe fa65 	bl	4d3c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6872:	f006 fb51 	bl	cf18 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6876:	b1a0      	cbz	r0, 68a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b2>
    6878:	4630      	mov	r0, r6
    687a:	f006 ff4c 	bl	d716 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    687e:	2100      	movs	r1, #0
    6880:	4630      	mov	r0, r6
    6882:	f7fe f8e5 	bl	4a50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6886:	2d00      	cmp	r5, #0
    6888:	d0ee      	beq.n	6868 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    688a:	f884 8001 	strb.w	r8, [r4, #1]
    688e:	210a      	movs	r1, #10
    6890:	7021      	strb	r1, [r4, #0]
    6892:	f884 8004 	strb.w	r8, [r4, #4]
    6896:	f8a4 6005 	strh.w	r6, [r4, #5]
    689a:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    689e:	71e0      	strb	r0, [r4, #7]
    68a0:	e7e2      	b.n	6868 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    68a2:	f44f 7113 	mov.w	r1, #588	; 0x24c
    68a6:	2010      	movs	r0, #16
    68a8:	f7fd fe50 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68ac:	2000011c 	.word	0x2000011c
    68b0:	4809      	ldr	r0, [pc, #36]	; (68d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    68b2:	b510      	push	{r4, lr}
    68b4:	2100      	movs	r1, #0
    68b6:	6141      	str	r1, [r0, #20]
    68b8:	6181      	str	r1, [r0, #24]
    68ba:	61c1      	str	r1, [r0, #28]
    68bc:	6201      	str	r1, [r0, #32]
    68be:	2212      	movs	r2, #18
    68c0:	f005 fe55 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    68c4:	4804      	ldr	r0, [pc, #16]	; (68d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    68c6:	3018      	adds	r0, #24
    68c8:	1f02      	subs	r2, r0, #4
    68ca:	1f01      	subs	r1, r0, #4
    68cc:	2301      	movs	r3, #1
    68ce:	6050      	str	r0, [r2, #4]
    68d0:	730b      	strb	r3, [r1, #12]
    68d2:	6010      	str	r0, [r2, #0]
    68d4:	bd10      	pop	{r4, pc}
    68d6:	0000      	.short	0x0000
    68d8:	200012dc 	.word	0x200012dc

000068dc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    68dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    68de:	f06f 021f 	mvn.w	r2, #31
    68e2:	0c01      	lsrs	r1, r0, #16
    68e4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    68e8:	251f      	movs	r5, #31
    68ea:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    68ee:	3854      	subs	r0, #84	; 0x54
    68f0:	d00d      	beq.n	690e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    68f2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    68f6:	3855      	subs	r0, #85	; 0x55
    68f8:	d009      	beq.n	690e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    68fa:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    68fe:	38aa      	subs	r0, #170	; 0xaa
    6900:	d005      	beq.n	690e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6902:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6906:	38aa      	subs	r0, #170	; 0xaa
    6908:	d001      	beq.n	690e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    690a:	2001      	movs	r0, #1
    690c:	e000      	b.n	6910 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    690e:	2000      	movs	r0, #0
    6910:	2200      	movs	r2, #0
    6912:	4613      	mov	r3, r2
    6914:	ea4f 0402 	mov.w	r4, r2
    6918:	ea82 0701 	eor.w	r7, r2, r1
    691c:	43ff      	mvns	r7, r7
    691e:	431f      	orrs	r7, r3
    6920:	1c7f      	adds	r7, r7, #1
    6922:	d00f      	beq.n	6944 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6924:	f006 0701 	and.w	r7, r6, #1
    6928:	0852      	lsrs	r2, r2, #1
    692a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    692e:	f005 0701 	and.w	r7, r5, #1
    6932:	085b      	lsrs	r3, r3, #1
    6934:	0876      	lsrs	r6, r6, #1
    6936:	086d      	lsrs	r5, r5, #1
    6938:	1c64      	adds	r4, r4, #1
    693a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    693e:	2c16      	cmp	r4, #22
    6940:	d3ea      	bcc.n	6918 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6944:	2000      	movs	r0, #0
    6946:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006948 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    6948:	b510      	push	{r4, lr}
    694a:	4804      	ldr	r0, [pc, #16]	; (695c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    694c:	f007 fd23 	bl	e396 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    6950:	4802      	ldr	r0, [pc, #8]	; (695c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    6952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6956:	3008      	adds	r0, #8
    6958:	f007 bd1d 	b.w	e396 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    695c:	20000120 	.word	0x20000120

00006960 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    6960:	4801      	ldr	r0, [pc, #4]	; (6968 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    6962:	f000 b809 	b.w	6978 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6966:	0000      	.short	0x0000
    6968:	20000120 	.word	0x20000120

0000696c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    696c:	4801      	ldr	r0, [pc, #4]	; (6974 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    696e:	f000 b803 	b.w	6978 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6972:	0000      	.short	0x0000
    6974:	20000128 	.word	0x20000128
    6978:	b510      	push	{r4, lr}
    697a:	e9d0 2100 	ldrd	r2, r1, [r0]
    697e:	4b09      	ldr	r3, [pc, #36]	; (69a4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    6980:	4c09      	ldr	r4, [pc, #36]	; (69a8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    6982:	4353      	muls	r3, r2
    6984:	4354      	muls	r4, r2
    6986:	4051      	eors	r1, r2
    6988:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    698c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6990:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6994:	e9c0 2100 	strd	r2, r1, [r0]
    6998:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    699c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    69a0:	4618      	mov	r0, r3
    69a2:	bd10      	pop	{r4, pc}
    69a4:	c6ef3760 	.word	0xc6ef3760
    69a8:	9e3779bb 	.word	0x9e3779bb

000069ac <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    69ac:	b510      	push	{r4, lr}
    69ae:	6840      	ldr	r0, [r0, #4]
    69b0:	2200      	movs	r2, #0
    69b2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    69b6:	3080      	adds	r0, #128	; 0x80
    69b8:	1d09      	adds	r1, r1, #4
    69ba:	07db      	lsls	r3, r3, #31
    69bc:	d001      	beq.n	69c2 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    69be:	2001      	movs	r0, #1
    69c0:	bd10      	pop	{r4, pc}
    69c2:	790c      	ldrb	r4, [r1, #4]
    69c4:	680b      	ldr	r3, [r1, #0]
    69c6:	4909      	ldr	r1, [pc, #36]	; (69ec <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    69c8:	400b      	ands	r3, r1
    69ca:	f004 0107 	and.w	r1, r4, #7
    69ce:	6643      	str	r3, [r0, #100]	; 0x64
    69d0:	6681      	str	r1, [r0, #104]	; 0x68
    69d2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    69d6:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
    69da:	1c49      	adds	r1, r1, #1
    69dc:	f880 1052 	strb.w	r1, [r0, #82]	; 0x52
    69e0:	6841      	ldr	r1, [r0, #4]
    69e2:	f041 0101 	orr.w	r1, r1, #1
    69e6:	6041      	str	r1, [r0, #4]
    69e8:	2000      	movs	r0, #0
    69ea:	bd10      	pop	{r4, pc}
    69ec:	3304492f 	.word	0x3304492f

000069f0 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    69f0:	b510      	push	{r4, lr}
    69f2:	1d04      	adds	r4, r0, #4
    69f4:	f003 fe48 	bl	a688 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    69f8:	4a03      	ldr	r2, [pc, #12]	; (6a08 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    69fa:	f001 0107 	and.w	r1, r1, #7
    69fe:	4010      	ands	r0, r2
    6a00:	6020      	str	r0, [r4, #0]
    6a02:	6061      	str	r1, [r4, #4]
    6a04:	bd10      	pop	{r4, pc}
    6a06:	0000      	.short	0x0000
    6a08:	3304492f 	.word	0x3304492f

00006a0c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    6a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a10:	4605      	mov	r5, r0
    6a12:	7803      	ldrb	r3, [r0, #0]
    6a14:	6840      	ldr	r0, [r0, #4]
    6a16:	1d0f      	adds	r7, r1, #4
    6a18:	f100 0680 	add.w	r6, r0, #128	; 0x80
    6a1c:	f500 74a2 	add.w	r4, r0, #324	; 0x144
    6a20:	4680      	mov	r8, r0
    6a22:	f04f 0900 	mov.w	r9, #0
    6a26:	7d72      	ldrb	r2, [r6, #21]
    6a28:	2107      	movs	r1, #7
    6a2a:	4630      	mov	r0, r6
    6a2c:	f006 ff6d 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a30:	b300      	cbz	r0, 6a74 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x68>
    6a32:	6838      	ldr	r0, [r7, #0]
    6a34:	4a10      	ldr	r2, [pc, #64]	; (6a78 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x6c>)
    6a36:	7939      	ldrb	r1, [r7, #4]
    6a38:	4010      	ands	r0, r2
    6a3a:	6670      	str	r0, [r6, #100]	; 0x64
    6a3c:	f001 0107 	and.w	r1, r1, #7
    6a40:	66b1      	str	r1, [r6, #104]	; 0x68
    6a42:	f886 904e 	strb.w	r9, [r6, #78]	; 0x4e
    6a46:	f886 9015 	strb.w	r9, [r6, #21]
    6a4a:	f8b8 1000 	ldrh.w	r1, [r8]
    6a4e:	f8a4 106c 	strh.w	r1, [r4, #108]	; 0x6c
    6a52:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
    6a56:	6839      	ldr	r1, [r7, #0]
    6a58:	f8c4 106e 	str.w	r1, [r4, #110]	; 0x6e
    6a5c:	6879      	ldr	r1, [r7, #4]
    6a5e:	f8c4 1072 	str.w	r1, [r4, #114]	; 0x72
    6a62:	2207      	movs	r2, #7
    6a64:	f104 0060 	add.w	r0, r4, #96	; 0x60
    6a68:	6869      	ldr	r1, [r5, #4]
    6a6a:	f7ff fce1 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6a6e:	2000      	movs	r0, #0
    6a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a74:	2001      	movs	r0, #1
    6a76:	e7fb      	b.n	6a70 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    6a78:	3304492f 	.word	0x3304492f

00006a7c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    6a7c:	b570      	push	{r4, r5, r6, lr}
    6a7e:	1d0d      	adds	r5, r1, #4
    6a80:	6844      	ldr	r4, [r0, #4]
    6a82:	f003 fe01 	bl	a688 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6a86:	4a06      	ldr	r2, [pc, #24]	; (6aa0 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    6a88:	4010      	ands	r0, r2
    6a8a:	f001 0207 	and.w	r2, r1, #7
    6a8e:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    6a92:	4001      	ands	r1, r0
    6a94:	f361 0007 	bfi	r0, r1, #0, #8
    6a98:	6028      	str	r0, [r5, #0]
    6a9a:	606a      	str	r2, [r5, #4]
    6a9c:	bd70      	pop	{r4, r5, r6, pc}
    6a9e:	0000      	.short	0x0000
    6aa0:	3304492f 	.word	0x3304492f

00006aa4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    6aa4:	4a04      	ldr	r2, [pc, #16]	; (6ab8 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    6aa6:	6812      	ldr	r2, [r2, #0]
    6aa8:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    6aac:	434b      	muls	r3, r1
    6aae:	4342      	muls	r2, r0
    6ab0:	eb03 3022 	add.w	r0, r3, r2, asr #12
    6ab4:	4770      	bx	lr
    6ab6:	0000      	.short	0x0000
    6ab8:	20000130 	.word	0x20000130

00006abc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6abc:	b570      	push	{r4, r5, r6, lr}
    6abe:	4604      	mov	r4, r0
    6ac0:	7c00      	ldrb	r0, [r0, #16]
    6ac2:	b300      	cbz	r0, 6b06 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6ac4:	2802      	cmp	r0, #2
    6ac6:	d01e      	beq.n	6b06 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6ac8:	f05f 0001 	movs.w	r0, #1
    6acc:	f104 0151 	add.w	r1, r4, #81	; 0x51
    6ad0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    6ad4:	460d      	mov	r5, r1
    6ad6:	b1c0      	cbz	r0, 6b0a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6ad8:	7de0      	ldrb	r0, [r4, #23]
    6ada:	b1f0      	cbz	r0, 6b1a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6adc:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6ae0:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    6ae4:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6ae8:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    6aec:	7c20      	ldrb	r0, [r4, #16]
    6aee:	f007 fd0c 	bl	e50a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    6af2:	7620      	strb	r0, [r4, #24]
    6af4:	2008      	movs	r0, #8
    6af6:	7660      	strb	r0, [r4, #25]
    6af8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    6afc:	4629      	mov	r1, r5
    6afe:	f007 fcf0 	bl	e4e2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    6b02:	b9a8      	cbnz	r0, 6b30 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6b04:	e00e      	b.n	6b24 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    6b06:	2000      	movs	r0, #0
    6b08:	e7e0      	b.n	6acc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6b0a:	2000      	movs	r0, #0
    6b0c:	f7fe fbba 	bl	5284 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6b10:	2800      	cmp	r0, #0
    6b12:	d1eb      	bne.n	6aec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6b14:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    6b18:	e001      	b.n	6b1e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6b1a:	f240 41bc 	movw	r1, #1212	; 0x4bc
    6b1e:	202d      	movs	r0, #45	; 0x2d
    6b20:	f7fd fd14 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b24:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    6b28:	4629      	mov	r1, r5
    6b2a:	f007 fce3 	bl	e4f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    6b2e:	b100      	cbz	r0, 6b32 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6b30:	2001      	movs	r0, #1
    6b32:	76a0      	strb	r0, [r4, #26]
    6b34:	7e20      	ldrb	r0, [r4, #24]
    6b36:	b130      	cbz	r0, 6b46 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    6b38:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    6b3c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6b40:	f006 fe85 	bl	d84e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6b44:	7660      	strb	r0, [r4, #25]
    6b46:	f7ff f9b3 	bl	5eb0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6b4a:	490c      	ldr	r1, [pc, #48]	; (6b7c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    6b4c:	fba0 2301 	umull	r2, r3, r0, r1
    6b50:	f104 0048 	add.w	r0, r4, #72	; 0x48
    6b54:	f007 fea3 	bl	e89e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    6b58:	2100      	movs	r1, #0
    6b5a:	4620      	mov	r0, r4
    6b5c:	f007 fe4d 	bl	e7fa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    6b60:	2000      	movs	r0, #0
    6b62:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    6b66:	78a0      	ldrb	r0, [r4, #2]
    6b68:	0740      	lsls	r0, r0, #29
    6b6a:	d505      	bpl.n	6b78 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    6b6c:	4620      	mov	r0, r4
    6b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b72:	2100      	movs	r1, #0
    6b74:	f000 bda8 	b.w	76c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
    6b78:	bd70      	pop	{r4, r5, r6, pc}
    6b7a:	0000      	.short	0x0000
    6b7c:	000f4240 	.word	0x000f4240

00006b80 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6b80:	b530      	push	{r4, r5, lr}
    6b82:	460c      	mov	r4, r1
    6b84:	b08d      	sub	sp, #52	; 0x34
    6b86:	4605      	mov	r5, r0
    6b88:	4601      	mov	r1, r0
    6b8a:	2224      	movs	r2, #36	; 0x24
    6b8c:	a802      	add	r0, sp, #8
    6b8e:	f005 fc74 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6b92:	a80b      	add	r0, sp, #44	; 0x2c
    6b94:	f007 fee0 	bl	e958 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6b98:	7aa0      	ldrb	r0, [r4, #10]
    6b9a:	f88d 0018 	strb.w	r0, [sp, #24]
    6b9e:	7820      	ldrb	r0, [r4, #0]
    6ba0:	f88d 0008 	strb.w	r0, [sp, #8]
    6ba4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6ba8:	f8ad 0000 	strh.w	r0, [sp]
    6bac:	f89d 0000 	ldrb.w	r0, [sp]
    6bb0:	f000 0101 	and.w	r1, r0, #1
    6bb4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6bb8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6bbc:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6bc0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6bc4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6bc8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6bcc:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6bd0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6bd4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6bd8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6bdc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6be0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6be4:	f8ad 000a 	strh.w	r0, [sp, #10]
    6be8:	7d20      	ldrb	r0, [r4, #20]
    6bea:	2801      	cmp	r0, #1
    6bec:	d006      	beq.n	6bfc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6bee:	2802      	cmp	r0, #2
    6bf0:	d004      	beq.n	6bfc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6bf2:	f240 21e2 	movw	r1, #738	; 0x2e2
    6bf6:	2006      	movs	r0, #6
    6bf8:	f7fd fca8 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bfc:	f88d 000c 	strb.w	r0, [sp, #12]
    6c00:	7a61      	ldrb	r1, [r4, #9]
    6c02:	a80b      	add	r0, sp, #44	; 0x2c
    6c04:	f007 fe8f 	bl	e926 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6c08:	7d20      	ldrb	r0, [r4, #20]
    6c0a:	2101      	movs	r1, #1
    6c0c:	2802      	cmp	r0, #2
    6c0e:	d102      	bne.n	6c16 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6c10:	7d60      	ldrb	r0, [r4, #21]
    6c12:	1c40      	adds	r0, r0, #1
    6c14:	b2c1      	uxtb	r1, r0
    6c16:	7ea0      	ldrb	r0, [r4, #26]
    6c18:	1c40      	adds	r0, r0, #1
    6c1a:	b2c2      	uxtb	r2, r0
    6c1c:	a80b      	add	r0, sp, #44	; 0x2c
    6c1e:	f007 fe49 	bl	e8b4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6c22:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6c26:	0700      	lsls	r0, r0, #28
    6c28:	d501      	bpl.n	6c2e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6c2a:	2000      	movs	r0, #0
    6c2c:	e020      	b.n	6c70 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6c2e:	a80b      	add	r0, sp, #44	; 0x2c
    6c30:	f007 fe52 	bl	e8d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6c34:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6c38:	2228      	movs	r2, #40	; 0x28
    6c3a:	f000 fde9 	bl	7810 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6c3e:	f240 2171 	movw	r1, #625	; 0x271
    6c42:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    6c46:	fbb0 f0f1 	udiv	r0, r0, r1
    6c4a:	4348      	muls	r0, r1
    6c4c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6c50:	f240 2371 	movw	r3, #625	; 0x271
    6c54:	0a0a      	lsrs	r2, r1, #8
    6c56:	f240 2171 	movw	r1, #625	; 0x271
    6c5a:	434a      	muls	r2, r1
    6c5c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6c60:	0a09      	lsrs	r1, r1, #8
    6c62:	4359      	muls	r1, r3
    6c64:	4290      	cmp	r0, r2
    6c66:	d801      	bhi.n	6c6c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    6c68:	9204      	str	r2, [sp, #16]
    6c6a:	e004      	b.n	6c76 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6c6c:	4288      	cmp	r0, r1
    6c6e:	d801      	bhi.n	6c74 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6c70:	9004      	str	r0, [sp, #16]
    6c72:	e000      	b.n	6c76 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6c74:	9104      	str	r1, [sp, #16]
    6c76:	7ca0      	ldrb	r0, [r4, #18]
    6c78:	f88d 0017 	strb.w	r0, [sp, #23]
    6c7c:	7e20      	ldrb	r0, [r4, #24]
    6c7e:	2801      	cmp	r0, #1
    6c80:	d000      	beq.n	6c84 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6c82:	2000      	movs	r0, #0
    6c84:	f88d 0014 	strb.w	r0, [sp, #20]
    6c88:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6c8a:	f006 fc4c 	bl	d526 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    6c8e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6c90:	f006 fced 	bl	d66e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    6c94:	2224      	movs	r2, #36	; 0x24
    6c96:	a902      	add	r1, sp, #8
    6c98:	4628      	mov	r0, r5
    6c9a:	f005 fbee 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6c9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6ca0:	62a8      	str	r0, [r5, #40]	; 0x28
    6ca2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    6ca6:	85a8      	strh	r0, [r5, #44]	; 0x2c
    6ca8:	7ae0      	ldrb	r0, [r4, #11]
    6caa:	b168      	cbz	r0, 6cc8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6cac:	2802      	cmp	r0, #2
    6cae:	d00b      	beq.n	6cc8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6cb0:	f05f 0001 	movs.w	r0, #1
    6cb4:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    6cb8:	68e0      	ldr	r0, [r4, #12]
    6cba:	65a8      	str	r0, [r5, #88]	; 0x58
    6cbc:	8a20      	ldrh	r0, [r4, #16]
    6cbe:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    6cc2:	b00d      	add	sp, #52	; 0x34
    6cc4:	2000      	movs	r0, #0
    6cc6:	bd30      	pop	{r4, r5, pc}
    6cc8:	2000      	movs	r0, #0
    6cca:	e7f3      	b.n	6cb4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00006ccc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6ccc:	4a0a      	ldr	r2, [pc, #40]	; (6cf8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    6cce:	b510      	push	{r4, lr}
    6cd0:	2100      	movs	r1, #0
    6cd2:	7011      	strb	r1, [r2, #0]
    6cd4:	4c09      	ldr	r4, [pc, #36]	; (6cfc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6cd6:	6060      	str	r0, [r4, #4]
    6cd8:	f000 f822 	bl	6d20 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6cdc:	b110      	cbz	r0, 6ce4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    6cde:	f44f 714b 	mov.w	r1, #812	; 0x32c
    6ce2:	e004      	b.n	6cee <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6ce4:	68a0      	ldr	r0, [r4, #8]
    6ce6:	2800      	cmp	r0, #0
    6ce8:	d104      	bne.n	6cf4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6cea:	f240 312f 	movw	r1, #815	; 0x32f
    6cee:	202d      	movs	r0, #45	; 0x2d
    6cf0:	f7fd fc2c 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cf4:	bd10      	pop	{r4, pc}
    6cf6:	0000      	.short	0x0000
    6cf8:	20001300 	.word	0x20001300
    6cfc:	20000134 	.word	0x20000134

00006d00 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6d00:	4902      	ldr	r1, [pc, #8]	; (6d0c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6d02:	4801      	ldr	r0, [pc, #4]	; (6d08 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6d04:	6088      	str	r0, [r1, #8]
    6d06:	4770      	bx	lr
    6d08:	000077f8 	.word	0x000077f8
    6d0c:	20000134 	.word	0x20000134

00006d10 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6d10:	4902      	ldr	r1, [pc, #8]	; (6d1c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    6d12:	6008      	str	r0, [r1, #0]
    6d14:	6889      	ldr	r1, [r1, #8]
    6d16:	6809      	ldr	r1, [r1, #0]
    6d18:	4708      	bx	r1
    6d1a:	0000      	.short	0x0000
    6d1c:	20000134 	.word	0x20000134

00006d20 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6d20:	4808      	ldr	r0, [pc, #32]	; (6d44 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6d22:	b510      	push	{r4, lr}
    6d24:	7800      	ldrb	r0, [r0, #0]
    6d26:	b110      	cbz	r0, 6d2e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6d28:	240c      	movs	r4, #12
    6d2a:	4620      	mov	r0, r4
    6d2c:	bd10      	pop	{r4, pc}
    6d2e:	2400      	movs	r4, #0
    6d30:	2218      	movs	r2, #24
    6d32:	4621      	mov	r1, r4
    6d34:	4803      	ldr	r0, [pc, #12]	; (6d44 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6d36:	f005 fc1a 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6d3a:	f003 fec7 	bl	aacc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6d3e:	f003 fceb 	bl	a718 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6d42:	e7f2      	b.n	6d2a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    6d44:	20001300 	.word	0x20001300

00006d48 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6d48:	4904      	ldr	r1, [pc, #16]	; (6d5c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6d4a:	b510      	push	{r4, lr}
    6d4c:	7809      	ldrb	r1, [r1, #0]
    6d4e:	2901      	cmp	r1, #1
    6d50:	d101      	bne.n	6d56 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    6d52:	f000 fb85 	bl	7460 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6d56:	2000      	movs	r0, #0
    6d58:	bd10      	pop	{r4, pc}
    6d5a:	0000      	.short	0x0000
    6d5c:	20001300 	.word	0x20001300

00006d60 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6d60:	4902      	ldr	r1, [pc, #8]	; (6d6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6d62:	4801      	ldr	r0, [pc, #4]	; (6d68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6d64:	6008      	str	r0, [r1, #0]
    6d66:	4770      	bx	lr
    6d68:	00007591 	.word	0x00007591
    6d6c:	20000140 	.word	0x20000140
    6d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d74:	000f      	movs	r7, r1
    6d76:	4604      	mov	r4, r0
    6d78:	d023      	beq.n	6dc2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6d7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6d7e:	4605      	mov	r5, r0
    6d80:	f007 fdd3 	bl	e92a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6d84:	b9b0      	cbnz	r0, 6db4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6d86:	78a0      	ldrb	r0, [r4, #2]
    6d88:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6d8c:	b350      	cbz	r0, 6de4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    6d8e:	4628      	mov	r0, r5
    6d90:	f007 fda2 	bl	e8d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6d94:	4606      	mov	r6, r0
    6d96:	4628      	mov	r0, r5
    6d98:	f007 fdc7 	bl	e92a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6d9c:	1a30      	subs	r0, r6, r0
    6d9e:	b2c0      	uxtb	r0, r0
    6da0:	f007 fe18 	bl	e9d4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6da4:	4601      	mov	r1, r0
    6da6:	4835      	ldr	r0, [pc, #212]	; (6e7c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6da8:	6842      	ldr	r2, [r0, #4]
    6daa:	4411      	add	r1, r2
    6dac:	6041      	str	r1, [r0, #4]
    6dae:	4628      	mov	r0, r5
    6db0:	f007 fdd9 	bl	e966 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6db4:	4628      	mov	r0, r5
    6db6:	f007 fd9b 	bl	e8f0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6dba:	4601      	mov	r1, r0
    6dbc:	4620      	mov	r0, r4
    6dbe:	f007 fd58 	bl	e872 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    6dc2:	4d2f      	ldr	r5, [pc, #188]	; (6e80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6dc4:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    6dc8:	2100      	movs	r1, #0
    6dca:	6868      	ldr	r0, [r5, #4]
    6dcc:	8001      	strh	r1, [r0, #0]
    6dce:	f007 fcf2 	bl	e7b6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6dd2:	8860      	ldrh	r0, [r4, #2]
    6dd4:	2813      	cmp	r0, #19
    6dd6:	d013      	beq.n	6e00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6dd8:	dc09      	bgt.n	6dee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6dda:	2810      	cmp	r0, #16
    6ddc:	d036      	beq.n	6e4c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    6dde:	2812      	cmp	r0, #18
    6de0:	d109      	bne.n	6df6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6de2:	e031      	b.n	6e48 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6de4:	4620      	mov	r0, r4
    6de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dea:	f000 bb39 	b.w	7460 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6dee:	2815      	cmp	r0, #21
    6df0:	d00f      	beq.n	6e12 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6df2:	281d      	cmp	r0, #29
    6df4:	d00d      	beq.n	6e12 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6df6:	f240 6172 	movw	r1, #1650	; 0x672
    6dfa:	202d      	movs	r0, #45	; 0x2d
    6dfc:	f7fd fba6 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e00:	2100      	movs	r1, #0
    6e02:	6868      	ldr	r0, [r5, #4]
    6e04:	f006 ff9a 	bl	dd3c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e08:	2101      	movs	r1, #1
    6e0a:	6868      	ldr	r0, [r5, #4]
    6e0c:	f007 fcd3 	bl	e7b6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6e10:	e020      	b.n	6e54 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6e12:	2101      	movs	r1, #1
    6e14:	6868      	ldr	r0, [r5, #4]
    6e16:	f006 ff91 	bl	dd3c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e1a:	2101      	movs	r1, #1
    6e1c:	6868      	ldr	r0, [r5, #4]
    6e1e:	f007 fcca 	bl	e7b6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6e22:	b136      	cbz	r6, 6e32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6e24:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    6e28:	6868      	ldr	r0, [r5, #4]
    6e2a:	f006 ffa2 	bl	dd72 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6e2e:	2101      	movs	r1, #1
    6e30:	e006      	b.n	6e40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    6e32:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6e36:	6868      	ldr	r0, [r5, #4]
    6e38:	f006 ff9b 	bl	dd72 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6e3c:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    6e40:	6868      	ldr	r0, [r5, #4]
    6e42:	f006 ff9c 	bl	dd7e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    6e46:	e005      	b.n	6e54 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6e48:	2106      	movs	r1, #6
    6e4a:	e000      	b.n	6e4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6e4c:	2102      	movs	r1, #2
    6e4e:	6868      	ldr	r0, [r5, #4]
    6e50:	f006 ff74 	bl	dd3c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e54:	4620      	mov	r0, r4
    6e56:	f000 fcad 	bl	77b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>
    6e5a:	8860      	ldrh	r0, [r4, #2]
    6e5c:	281d      	cmp	r0, #29
    6e5e:	d007      	beq.n	6e70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    6e60:	2815      	cmp	r0, #21
    6e62:	d005      	beq.n	6e70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    6e64:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    6e68:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6e6a:	6868      	ldr	r0, [r5, #4]
    6e6c:	f006 ff56 	bl	dd1c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    6e70:	4639      	mov	r1, r7
    6e72:	4620      	mov	r0, r4
    6e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e78:	f000 b9f0 	b.w	725c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    6e7c:	20001300 	.word	0x20001300
    6e80:	20000134 	.word	0x20000134
    6e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e88:	4d2e      	ldr	r5, [pc, #184]	; (6f44 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    6e8a:	4607      	mov	r7, r0
    6e8c:	7828      	ldrb	r0, [r5, #0]
    6e8e:	2802      	cmp	r0, #2
    6e90:	d005      	beq.n	6e9e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6e92:	7828      	ldrb	r0, [r5, #0]
    6e94:	2803      	cmp	r0, #3
    6e96:	d002      	beq.n	6e9e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6e98:	f640 5129 	movw	r1, #3369	; 0xd29
    6e9c:	e028      	b.n	6ef0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    6e9e:	4c2a      	ldr	r4, [pc, #168]	; (6f48 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    6ea0:	6820      	ldr	r0, [r4, #0]
    6ea2:	7b01      	ldrb	r1, [r0, #12]
    6ea4:	b109      	cbz	r1, 6eaa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6ea6:	f007 fcef 	bl	e888 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    6eaa:	f8d4 c004 	ldr.w	ip, [r4, #4]
    6eae:	f04f 0800 	mov.w	r8, #0
    6eb2:	f89c 0000 	ldrb.w	r0, [ip]
    6eb6:	f000 060f 	and.w	r6, r0, #15
    6eba:	b33f      	cbz	r7, 6f0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6ebc:	6821      	ldr	r1, [r4, #0]
    6ebe:	09c0      	lsrs	r0, r0, #7
    6ec0:	f101 0351 	add.w	r3, r1, #81	; 0x51
    6ec4:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    6ec8:	f10c 0109 	add.w	r1, ip, #9
    6ecc:	f006 fc27 	bl	d71e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6ed0:	b1e0      	cbz	r0, 6f0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6ed2:	4641      	mov	r1, r8
    6ed4:	6860      	ldr	r0, [r4, #4]
    6ed6:	f006 ff11 	bl	dcfc <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    6eda:	b1b8      	cbz	r0, 6f0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6edc:	782a      	ldrb	r2, [r5, #0]
    6ede:	6820      	ldr	r0, [r4, #0]
    6ee0:	4631      	mov	r1, r6
    6ee2:	2a02      	cmp	r2, #2
    6ee4:	d007      	beq.n	6ef6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    6ee6:	782a      	ldrb	r2, [r5, #0]
    6ee8:	2a03      	cmp	r2, #3
    6eea:	d004      	beq.n	6ef6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    6eec:	f640 5102 	movw	r1, #3330	; 0xd02
    6ef0:	202d      	movs	r0, #45	; 0x2d
    6ef2:	f7fd fb2b 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ef6:	68a2      	ldr	r2, [r4, #8]
    6ef8:	782b      	ldrb	r3, [r5, #0]
    6efa:	6952      	ldr	r2, [r2, #20]
    6efc:	f06f 0607 	mvn.w	r6, #7
    6f00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6f04:	58d2      	ldr	r2, [r2, r3]
    6f06:	4790      	blx	r2
    6f08:	4606      	mov	r6, r0
    6f0a:	e000      	b.n	6f0e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6f0c:	2601      	movs	r6, #1
    6f0e:	7ba8      	ldrb	r0, [r5, #14]
    6f10:	b118      	cbz	r0, 6f1a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    6f12:	f003 fddb 	bl	aacc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6f16:	f003 fbff 	bl	a718 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6f1a:	2e00      	cmp	r6, #0
    6f1c:	d00f      	beq.n	6f3e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    6f1e:	6820      	ldr	r0, [r4, #0]
    6f20:	f007 fd6e 	bl	ea00 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6f24:	b130      	cbz	r0, 6f34 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    6f26:	f003 fdf9 	bl	ab1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6f2a:	68a0      	ldr	r0, [r4, #8]
    6f2c:	6880      	ldr	r0, [r0, #8]
    6f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f32:	4700      	bx	r0
    6f34:	6820      	ldr	r0, [r4, #0]
    6f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f3a:	f000 ba91 	b.w	7460 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f42:	0000      	.short	0x0000
    6f44:	20001300 	.word	0x20001300
    6f48:	20000134 	.word	0x20000134
    6f4c:	b510      	push	{r4, lr}
    6f4e:	2903      	cmp	r1, #3
    6f50:	d002      	beq.n	6f58 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    6f52:	2905      	cmp	r1, #5
    6f54:	d10a      	bne.n	6f6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6f56:	e002      	b.n	6f5e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    6f58:	f000 fb7a 	bl	7650 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>
    6f5c:	e003      	b.n	6f66 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    6f5e:	4904      	ldr	r1, [pc, #16]	; (6f70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    6f60:	6809      	ldr	r1, [r1, #0]
    6f62:	b109      	cbz	r1, 6f68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6f64:	4788      	blx	r1
    6f66:	b108      	cbz	r0, 6f6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6f68:	2000      	movs	r0, #0
    6f6a:	bd10      	pop	{r4, pc}
    6f6c:	2001      	movs	r0, #1
    6f6e:	bd10      	pop	{r4, pc}
    6f70:	20000140 	.word	0x20000140
    6f74:	4a09      	ldr	r2, [pc, #36]	; (6f9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    6f76:	0003      	movs	r3, r0
    6f78:	6810      	ldr	r0, [r2, #0]
    6f7a:	d001      	beq.n	6f80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6f7c:	f000 ba70 	b.w	7460 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6f80:	2900      	cmp	r1, #0
    6f82:	d009      	beq.n	6f98 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    6f84:	6891      	ldr	r1, [r2, #8]
    6f86:	4a06      	ldr	r2, [pc, #24]	; (6fa0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    6f88:	6909      	ldr	r1, [r1, #16]
    6f8a:	7812      	ldrb	r2, [r2, #0]
    6f8c:	f06f 030f 	mvn.w	r3, #15
    6f90:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6f94:	5889      	ldr	r1, [r1, r2]
    6f96:	4708      	bx	r1
    6f98:	4770      	bx	lr
    6f9a:	0000      	.short	0x0000
    6f9c:	20000134 	.word	0x20000134
    6fa0:	20001300 	.word	0x20001300
    6fa4:	b570      	push	{r4, r5, r6, lr}
    6fa6:	4604      	mov	r4, r0
    6fa8:	8840      	ldrh	r0, [r0, #2]
    6faa:	2810      	cmp	r0, #16
    6fac:	d019      	beq.n	6fe2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    6fae:	4d10      	ldr	r5, [pc, #64]	; (6ff0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6fb0:	7ba8      	ldrb	r0, [r5, #14]
    6fb2:	b120      	cbz	r0, 6fbe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    6fb4:	f003 fbd0 	bl	a758 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6fb8:	2040      	movs	r0, #64	; 0x40
    6fba:	f003 fd95 	bl	aae8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6fbe:	480d      	ldr	r0, [pc, #52]	; (6ff4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    6fc0:	6840      	ldr	r0, [r0, #4]
    6fc2:	f004 f817 	bl	aff4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6fc6:	78a0      	ldrb	r0, [r4, #2]
    6fc8:	0740      	lsls	r0, r0, #29
    6fca:	d404      	bmi.n	6fd6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    6fcc:	2100      	movs	r1, #0
    6fce:	7922      	ldrb	r2, [r4, #4]
    6fd0:	4608      	mov	r0, r1
    6fd2:	f004 f887 	bl	b0e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6fd6:	2000      	movs	r0, #0
    6fd8:	f003 fec2 	bl	ad60 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6fdc:	2002      	movs	r0, #2
    6fde:	7028      	strb	r0, [r5, #0]
    6fe0:	bd70      	pop	{r4, r5, r6, pc}
    6fe2:	4620      	mov	r0, r4
    6fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6fe8:	2101      	movs	r1, #1
    6fea:	f7ff bec1 	b.w	6d70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6fee:	0000      	.short	0x0000
    6ff0:	20001300 	.word	0x20001300
    6ff4:	20000134 	.word	0x20000134
    6ff8:	b510      	push	{r4, lr}
    6ffa:	4c12      	ldr	r4, [pc, #72]	; (7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    6ffc:	6820      	ldr	r0, [r4, #0]
    6ffe:	f000 f825 	bl	704c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>
    7002:	6820      	ldr	r0, [r4, #0]
    7004:	f007 fcfc 	bl	ea00 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7008:	2800      	cmp	r0, #0
    700a:	6820      	ldr	r0, [r4, #0]
    700c:	d00b      	beq.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    700e:	490e      	ldr	r1, [pc, #56]	; (7048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    7010:	780a      	ldrb	r2, [r1, #0]
    7012:	2a02      	cmp	r2, #2
    7014:	d00b      	beq.n	702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    7016:	780a      	ldrb	r2, [r1, #0]
    7018:	2a03      	cmp	r2, #3
    701a:	d008      	beq.n	702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    701c:	f640 4137 	movw	r1, #3127	; 0xc37
    7020:	202d      	movs	r0, #45	; 0x2d
    7022:	f7fd fa93 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    702a:	f000 ba19 	b.w	7460 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    702e:	68a2      	ldr	r2, [r4, #8]
    7030:	7809      	ldrb	r1, [r1, #0]
    7032:	68d2      	ldr	r2, [r2, #12]
    7034:	f06f 0307 	mvn.w	r3, #7
    7038:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    703c:	5851      	ldr	r1, [r2, r1]
    703e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7042:	4708      	bx	r1
    7044:	20000134 	.word	0x20000134
    7048:	20001300 	.word	0x20001300
    704c:	b510      	push	{r4, lr}
    704e:	7b01      	ldrb	r1, [r0, #12]
    7050:	b109      	cbz	r1, 7056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    7052:	f007 fc19 	bl	e888 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    7056:	4805      	ldr	r0, [pc, #20]	; (706c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    7058:	7b80      	ldrb	r0, [r0, #14]
    705a:	2800      	cmp	r0, #0
    705c:	d005      	beq.n	706a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a>
    705e:	f003 fd35 	bl	aacc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7066:	f003 bb57 	b.w	a718 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    706a:	bd10      	pop	{r4, pc}
    706c:	20001300 	.word	0x20001300

00007070 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7074:	4d5d      	ldr	r5, [pc, #372]	; (71ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    7076:	4604      	mov	r4, r0
    7078:	b086      	sub	sp, #24
    707a:	7828      	ldrb	r0, [r5, #0]
    707c:	2800      	cmp	r0, #0
    707e:	d14e      	bne.n	711e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    7080:	7820      	ldrb	r0, [r4, #0]
    7082:	28ff      	cmp	r0, #255	; 0xff
    7084:	d04b      	beq.n	711e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    7086:	f04f 0800 	mov.w	r8, #0
    708a:	f8a5 800c 	strh.w	r8, [r5, #12]
    708e:	f8c5 8004 	str.w	r8, [r5, #4]
    7092:	f885 8001 	strb.w	r8, [r5, #1]
    7096:	f885 8002 	strb.w	r8, [r5, #2]
    709a:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    709e:	4b54      	ldr	r3, [pc, #336]	; (71f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    70a0:	4e54      	ldr	r6, [pc, #336]	; (71f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    70a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    70a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    70a8:	68b0      	ldr	r0, [r6, #8]
    70aa:	6840      	ldr	r0, [r0, #4]
    70ac:	9003      	str	r0, [sp, #12]
    70ae:	4668      	mov	r0, sp
    70b0:	f003 fe2a 	bl	ad08 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    70b4:	f003 fef8 	bl	aea8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    70b8:	f004 f968 	bl	b38c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    70bc:	f003 fd06 	bl	aacc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    70c0:	f003 fb2a 	bl	a718 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    70c4:	484c      	ldr	r0, [pc, #304]	; (71f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    70c6:	f004 f83f 	bl	b148 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    70ca:	484c      	ldr	r0, [pc, #304]	; (71fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    70cc:	f004 f846 	bl	b15c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    70d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    70d4:	4607      	mov	r7, r0
    70d6:	f007 fc46 	bl	e966 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    70da:	4638      	mov	r0, r7
    70dc:	f007 fc08 	bl	e8f0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    70e0:	4601      	mov	r1, r0
    70e2:	4620      	mov	r0, r4
    70e4:	f007 fbc5 	bl	e872 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    70e8:	f994 000e 	ldrsb.w	r0, [r4, #14]
    70ec:	f003 ff60 	bl	afb0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    70f0:	7921      	ldrb	r1, [r4, #4]
    70f2:	2000      	movs	r0, #0
    70f4:	f003 fd9c 	bl	ac30 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    70f8:	2101      	movs	r1, #1
    70fa:	60a8      	str	r0, [r5, #8]
    70fc:	b198      	cbz	r0, 7126 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    70fe:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7102:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7104:	f006 fa82 	bl	d60c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7108:	4607      	mov	r7, r0
    710a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    710e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7110:	f006 fa7f 	bl	d612 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7114:	b14f      	cbz	r7, 712a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    7116:	f894 1020 	ldrb.w	r1, [r4, #32]
    711a:	b951      	cbnz	r1, 7132 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    711c:	e005      	b.n	712a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    711e:	200c      	movs	r0, #12
    7120:	b006      	add	sp, #24
    7122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7126:	7029      	strb	r1, [r5, #0]
    7128:	e05e      	b.n	71e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    712a:	b120      	cbz	r0, 7136 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    712c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    7130:	b108      	cbz	r0, 7136 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    7132:	2701      	movs	r7, #1
    7134:	e000      	b.n	7138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    7136:	2700      	movs	r7, #0
    7138:	7ea0      	ldrb	r0, [r4, #26]
    713a:	b920      	cbnz	r0, 7146 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    713c:	7e20      	ldrb	r0, [r4, #24]
    713e:	b910      	cbnz	r0, 7146 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    7140:	78a0      	ldrb	r0, [r4, #2]
    7142:	0740      	lsls	r0, r0, #29
    7144:	d523      	bpl.n	718e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    7146:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    714a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    714e:	4050      	eors	r0, r2
    7150:	ea70 0101 	orns	r1, r0, r1
    7154:	d006      	beq.n	7164 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    7156:	f7fb fe13 	bl	2d80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    715a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    715e:	1a80      	subs	r0, r0, r2
    7160:	4199      	sbcs	r1, r3
    7162:	d200      	bcs.n	7166 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    7164:	b19f      	cbz	r7, 718e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    7166:	f7fe fea3 	bl	5eb0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    716a:	4925      	ldr	r1, [pc, #148]	; (7200 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    716c:	fba0 2301 	umull	r2, r3, r0, r1
    7170:	f104 0048 	add.w	r0, r4, #72	; 0x48
    7174:	f007 fb93 	bl	e89e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    7178:	2101      	movs	r1, #1
    717a:	4620      	mov	r0, r4
    717c:	f007 fb3d 	bl	e7fa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    7180:	78a0      	ldrb	r0, [r4, #2]
    7182:	0740      	lsls	r0, r0, #29
    7184:	d503      	bpl.n	718e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    7186:	2101      	movs	r1, #1
    7188:	4620      	mov	r0, r4
    718a:	f000 fa9d 	bl	76c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
    718e:	f7fe fee7 	bl	5f60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7192:	6870      	ldr	r0, [r6, #4]
    7194:	1cc0      	adds	r0, r0, #3
    7196:	f006 fb4d 	bl	d834 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    719a:	73a8      	strb	r0, [r5, #14]
    719c:	78a0      	ldrb	r0, [r4, #2]
    719e:	07c0      	lsls	r0, r0, #31
    71a0:	d022      	beq.n	71e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    71a2:	f8cd 8010 	str.w	r8, [sp, #16]
    71a6:	20ff      	movs	r0, #255	; 0xff
    71a8:	f8cd 8014 	str.w	r8, [sp, #20]
    71ac:	73e8      	strb	r0, [r5, #15]
    71ae:	69e6      	ldr	r6, [r4, #28]
    71b0:	f106 070a 	add.w	r7, r6, #10
    71b4:	e013      	b.n	71de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71b6:	9c04      	ldr	r4, [sp, #16]
    71b8:	42b4      	cmp	r4, r6
    71ba:	d010      	beq.n	71de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71bc:	7a72      	ldrb	r2, [r6, #9]
    71be:	7a60      	ldrb	r0, [r4, #9]
    71c0:	463b      	mov	r3, r7
    71c2:	f104 010a 	add.w	r1, r4, #10
    71c6:	f006 faaa 	bl	d71e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    71ca:	b140      	cbz	r0, 71de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71cc:	78a0      	ldrb	r0, [r4, #2]
    71ce:	73e8      	strb	r0, [r5, #15]
    71d0:	f8d4 0003 	ldr.w	r0, [r4, #3]
    71d4:	6128      	str	r0, [r5, #16]
    71d6:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    71da:	82a8      	strh	r0, [r5, #20]
    71dc:	e004      	b.n	71e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    71de:	a804      	add	r0, sp, #16
    71e0:	f7fd fbee 	bl	49c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    71e4:	2800      	cmp	r0, #0
    71e6:	d0e6      	beq.n	71b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    71e8:	2000      	movs	r0, #0
    71ea:	e799      	b.n	7120 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    71ec:	20001300 	.word	0x20001300
    71f0:	000077d8 	.word	0x000077d8
    71f4:	20000134 	.word	0x20000134
    71f8:	8e89bed6 	.word	0x8e89bed6
    71fc:	00555555 	.word	0x00555555
    7200:	000f4240 	.word	0x000f4240
    7204:	b510      	push	{r4, lr}
    7206:	4604      	mov	r4, r0
    7208:	f7ff ff32 	bl	7070 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    720c:	2800      	cmp	r0, #0
    720e:	d108      	bne.n	7222 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    7210:	4804      	ldr	r0, [pc, #16]	; (7224 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    7212:	7800      	ldrb	r0, [r0, #0]
    7214:	2801      	cmp	r0, #1
    7216:	d003      	beq.n	7220 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    7218:	2100      	movs	r1, #0
    721a:	4620      	mov	r0, r4
    721c:	f7ff fda8 	bl	6d70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7220:	2000      	movs	r0, #0
    7222:	bd10      	pop	{r4, pc}
    7224:	20001300 	.word	0x20001300
    7228:	480a      	ldr	r0, [pc, #40]	; (7254 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    722a:	b510      	push	{r4, lr}
    722c:	490a      	ldr	r1, [pc, #40]	; (7258 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    722e:	6804      	ldr	r4, [r0, #0]
    7230:	7808      	ldrb	r0, [r1, #0]
    7232:	2800      	cmp	r0, #0
    7234:	d00d      	beq.n	7252 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    7236:	7808      	ldrb	r0, [r1, #0]
    7238:	2802      	cmp	r0, #2
    723a:	d002      	beq.n	7242 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    723c:	7808      	ldrb	r0, [r1, #0]
    723e:	2803      	cmp	r0, #3
    7240:	d102      	bne.n	7248 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    7242:	4620      	mov	r0, r4
    7244:	f7ff ff02 	bl	704c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>
    7248:	4620      	mov	r0, r4
    724a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    724e:	f000 b907 	b.w	7460 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7252:	bd10      	pop	{r4, pc}
    7254:	20000134 	.word	0x20000134
    7258:	20001300 	.word	0x20001300
    725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7260:	4604      	mov	r4, r0
    7262:	4827      	ldr	r0, [pc, #156]	; (7300 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    7264:	460d      	mov	r5, r1
    7266:	6840      	ldr	r0, [r0, #4]
    7268:	f003 fec4 	bl	aff4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    726c:	4e25      	ldr	r6, [pc, #148]	; (7304 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    726e:	2004      	movs	r0, #4
    7270:	7030      	strb	r0, [r6, #0]
    7272:	b325      	cbz	r5, 72be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7274:	8860      	ldrh	r0, [r4, #2]
    7276:	2810      	cmp	r0, #16
    7278:	d02a      	beq.n	72d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    727a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    727e:	4680      	mov	r8, r0
    7280:	68b5      	ldr	r5, [r6, #8]
    7282:	f007 fb29 	bl	e8d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7286:	4607      	mov	r7, r0
    7288:	4640      	mov	r0, r8
    728a:	f007 fb4e 	bl	e92a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    728e:	1a38      	subs	r0, r7, r0
    7290:	1e40      	subs	r0, r0, #1
    7292:	b2c0      	uxtb	r0, r0
    7294:	8861      	ldrh	r1, [r4, #2]
    7296:	2228      	movs	r2, #40	; 0x28
    7298:	f000 fada 	bl	7850 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    729c:	4405      	add	r5, r0
    729e:	78a0      	ldrb	r0, [r4, #2]
    72a0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    72a4:	b130      	cbz	r0, 72b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    72a6:	6870      	ldr	r0, [r6, #4]
    72a8:	4405      	add	r5, r0
    72aa:	f007 fb97 	bl	e9dc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    72ae:	4428      	add	r0, r5
    72b0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    72b4:	7922      	ldrb	r2, [r4, #4]
    72b6:	4629      	mov	r1, r5
    72b8:	2000      	movs	r0, #0
    72ba:	f003 feb1 	bl	b020 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    72be:	8860      	ldrh	r0, [r4, #2]
    72c0:	2813      	cmp	r0, #19
    72c2:	d013      	beq.n	72ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72c4:	dc09      	bgt.n	72da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    72c6:	2810      	cmp	r0, #16
    72c8:	d017      	beq.n	72fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    72ca:	2812      	cmp	r0, #18
    72cc:	d109      	bne.n	72e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    72ce:	e00d      	b.n	72ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72d0:	7921      	ldrb	r1, [r4, #4]
    72d2:	2000      	movs	r0, #0
    72d4:	f003 fc72 	bl	abbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    72d8:	e7f1      	b.n	72be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    72da:	2815      	cmp	r0, #21
    72dc:	d006      	beq.n	72ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72de:	281d      	cmp	r0, #29
    72e0:	d004      	beq.n	72ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72e2:	f640 51b8 	movw	r1, #3512	; 0xdb8
    72e6:	202d      	movs	r0, #45	; 0x2d
    72e8:	f7fd f930 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72ec:	7922      	ldrb	r2, [r4, #4]
    72ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72f2:	2101      	movs	r1, #1
    72f4:	2000      	movs	r0, #0
    72f6:	f003 bef5 	b.w	b0e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    72fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72fe:	0000      	.short	0x0000
    7300:	20000134 	.word	0x20000134
    7304:	20001300 	.word	0x20001300
    7308:	b510      	push	{r4, lr}
    730a:	4604      	mov	r4, r0
    730c:	7800      	ldrb	r0, [r0, #0]
    730e:	460b      	mov	r3, r1
    7310:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    7314:	29ff      	cmp	r1, #255	; 0xff
    7316:	d010      	beq.n	733a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    7318:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    731c:	1e51      	subs	r1, r2, #1
    731e:	4618      	mov	r0, r3
    7320:	f7fe fd9a 	bl	5e58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7324:	b130      	cbz	r0, 7334 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    7326:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    732a:	f040 0002 	orr.w	r0, r0, #2
    732e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    7332:	e011      	b.n	7358 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7334:	f241 0102 	movw	r1, #4098	; 0x1002
    7338:	e021      	b.n	737e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    733a:	4812      	ldr	r0, [pc, #72]	; (7384 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    733c:	6840      	ldr	r0, [r0, #4]
    733e:	7801      	ldrb	r1, [r0, #0]
    7340:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7344:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    7348:	f8d0 1003 	ldr.w	r1, [r0, #3]
    734c:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    7350:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7354:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    7358:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    735c:	287f      	cmp	r0, #127	; 0x7f
    735e:	d00c      	beq.n	737a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30a>
    7360:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    7364:	207f      	movs	r0, #127	; 0x7f
    7366:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    736a:	4621      	mov	r1, r4
    736c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7374:	221d      	movs	r2, #29
    7376:	f7ff b85b 	b.w	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    737a:	f640 616b 	movw	r1, #3691	; 0xe6b
    737e:	202d      	movs	r0, #45	; 0x2d
    7380:	f7fd f8e4 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7384:	20000134 	.word	0x20000134
    7388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    738c:	4690      	mov	r8, r2
    738e:	460e      	mov	r6, r1
    7390:	4604      	mov	r4, r0
    7392:	2903      	cmp	r1, #3
    7394:	d004      	beq.n	73a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7396:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    739a:	b108      	cbz	r0, 73a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    739c:	2001      	movs	r0, #1
    739e:	e000      	b.n	73a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    73a0:	2000      	movs	r0, #0
    73a2:	4681      	mov	r9, r0
    73a4:	f003 fbac 	bl	ab00 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    73a8:	4605      	mov	r5, r0
    73aa:	2e03      	cmp	r6, #3
    73ac:	d003      	beq.n	73b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    73ae:	2701      	movs	r7, #1
    73b0:	2e05      	cmp	r6, #5
    73b2:	d005      	beq.n	73c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    73b4:	e008      	b.n	73c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    73b6:	78a0      	ldrb	r0, [r4, #2]
    73b8:	2702      	movs	r7, #2
    73ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
    73be:	e001      	b.n	73c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    73c0:	78a0      	ldrb	r0, [r4, #2]
    73c2:	07c0      	lsls	r0, r0, #31
    73c4:	2800      	cmp	r0, #0
    73c6:	d042      	beq.n	744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    73c8:	f1b9 0f00 	cmp.w	r9, #0
    73cc:	d13e      	bne.n	744c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    73ce:	4822      	ldr	r0, [pc, #136]	; (7458 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    73d0:	7b80      	ldrb	r0, [r0, #14]
    73d2:	b140      	cbz	r0, 73e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    73d4:	f006 fa31 	bl	d83a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    73d8:	f888 0000 	strb.w	r0, [r8]
    73dc:	28ff      	cmp	r0, #255	; 0xff
    73de:	d002      	beq.n	73e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    73e0:	f7fe fd54 	bl	5e8c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    73e4:	4305      	orrs	r5, r0
    73e6:	4e1d      	ldr	r6, [pc, #116]	; (745c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>)
    73e8:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    73ec:	f104 0358 	add.w	r3, r4, #88	; 0x58
    73f0:	6871      	ldr	r1, [r6, #4]
    73f2:	f811 0b03 	ldrb.w	r0, [r1], #3
    73f6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    73fa:	f006 f990 	bl	d71e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    73fe:	f898 1000 	ldrb.w	r1, [r8]
    7402:	29ff      	cmp	r1, #255	; 0xff
    7404:	d004      	beq.n	7410 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7406:	b990      	cbnz	r0, 742e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7408:	7e60      	ldrb	r0, [r4, #25]
    740a:	4288      	cmp	r0, r1
    740c:	d00f      	beq.n	742e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    740e:	e008      	b.n	7422 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7410:	b138      	cbz	r0, 7422 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7412:	6871      	ldr	r1, [r6, #4]
    7414:	f811 0b03 	ldrb.w	r0, [r1], #3
    7418:	f3c0 1080 	ubfx	r0, r0, #6, #1
    741c:	f007 f9d4 	bl	e7c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    7420:	b128      	cbz	r0, 742e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7422:	2000      	movs	r0, #0
    7424:	78a1      	ldrb	r1, [r4, #2]
    7426:	0749      	lsls	r1, r1, #29
    7428:	d503      	bpl.n	7432 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    742a:	b990      	cbnz	r0, 7452 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    742c:	e00e      	b.n	744c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    742e:	2001      	movs	r0, #1
    7430:	e7f8      	b.n	7424 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    7432:	b975      	cbnz	r5, 7452 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7434:	7be0      	ldrb	r0, [r4, #15]
    7436:	b108      	cbz	r0, 743c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    7438:	42b8      	cmp	r0, r7
    743a:	d107      	bne.n	744c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    743c:	6871      	ldr	r1, [r6, #4]
    743e:	f811 0b03 	ldrb.w	r0, [r1], #3
    7442:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7446:	f007 f9bf 	bl	e7c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    744a:	b110      	cbz	r0, 7452 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    744c:	2000      	movs	r0, #0
    744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7452:	2001      	movs	r0, #1
    7454:	e7fb      	b.n	744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7456:	0000      	.short	0x0000
    7458:	20001300 	.word	0x20001300
    745c:	20000134 	.word	0x20000134
    7460:	b570      	push	{r4, r5, r6, lr}
    7462:	4604      	mov	r4, r0
    7464:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    7466:	4d10      	ldr	r5, [pc, #64]	; (74a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>)
    7468:	1c40      	adds	r0, r0, #1
    746a:	8620      	strh	r0, [r4, #48]	; 0x30
    746c:	7ba8      	ldrb	r0, [r5, #14]
    746e:	2600      	movs	r6, #0
    7470:	b120      	cbz	r0, 747c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>
    7472:	f003 fb2b 	bl	aacc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7476:	f003 f94f 	bl	a718 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    747a:	73ae      	strb	r6, [r5, #14]
    747c:	702e      	strb	r6, [r5, #0]
    747e:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    7482:	b108      	cbz	r0, 7488 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x418>
    7484:	2101      	movs	r1, #1
    7486:	e00a      	b.n	749e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    7488:	7b60      	ldrb	r0, [r4, #13]
    748a:	b138      	cbz	r0, 749c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    748c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    748e:	4288      	cmp	r0, r1
    7490:	d804      	bhi.n	749c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    7492:	2101      	movs	r1, #1
    7494:	4620      	mov	r0, r4
    7496:	f007 fac5 	bl	ea24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    749a:	bd70      	pop	{r4, r5, r6, pc}
    749c:	2100      	movs	r1, #0
    749e:	4620      	mov	r0, r4
    74a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74a4:	f007 babe 	b.w	ea24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    74a8:	20001300 	.word	0x20001300
    74ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ae:	4604      	mov	r4, r0
    74b0:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    74b4:	4616      	mov	r6, r2
    74b6:	460d      	mov	r5, r1
    74b8:	f88d 0000 	strb.w	r0, [sp]
    74bc:	9800      	ldr	r0, [sp, #0]
    74be:	9000      	str	r0, [sp, #0]
    74c0:	f89d 0000 	ldrb.w	r0, [sp]
    74c4:	b110      	cbz	r0, 74cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    74c6:	f640 416b 	movw	r1, #3179	; 0xc6b
    74ca:	e055      	b.n	7578 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    74cc:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    74d0:	2700      	movs	r7, #0
    74d2:	8828      	ldrh	r0, [r5, #0]
    74d4:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    74d8:	2b00      	cmp	r3, #0
    74da:	d14a      	bne.n	7572 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x502>
    74dc:	6928      	ldr	r0, [r5, #16]
    74de:	f006 f9fb 	bl	d8d8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    74e2:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    74e6:	8b28      	ldrh	r0, [r5, #24]
    74e8:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    74ec:	8b68      	ldrh	r0, [r5, #26]
    74ee:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    74f2:	f895 020d 	ldrb.w	r0, [r5, #525]	; 0x20d
    74f6:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    74fa:	7e20      	ldrb	r0, [r4, #24]
    74fc:	f104 0151 	add.w	r1, r4, #81	; 0x51
    7500:	460d      	mov	r5, r1
    7502:	b120      	cbz	r0, 750e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    7504:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7508:	f006 fff4 	bl	e4f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    750c:	b940      	cbnz	r0, 7520 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    750e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    7512:	b170      	cbz	r0, 7532 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7514:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7518:	4629      	mov	r1, r5
    751a:	f006 ffe2 	bl	e4e2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    751e:	b140      	cbz	r0, 7532 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7520:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    7524:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
    7528:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    752c:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    7530:	e003      	b.n	753a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ca>
    7532:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
    7536:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    753a:	4814      	ldr	r0, [pc, #80]	; (758c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>)
    753c:	2eff      	cmp	r6, #255	; 0xff
    753e:	6840      	ldr	r0, [r0, #4]
    7540:	7801      	ldrb	r1, [r0, #0]
    7542:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7546:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
    754a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    754e:	d016      	beq.n	757e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    7550:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    7554:	8880      	ldrh	r0, [r0, #4]
    7556:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    755a:	f104 027c 	add.w	r2, r4, #124	; 0x7c
    755e:	1e51      	subs	r1, r2, #1
    7560:	4630      	mov	r0, r6
    7562:	f7fe fc79 	bl	5e58 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7566:	b128      	cbz	r0, 7574 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x504>
    7568:	f814 0f7b 	ldrb.w	r0, [r4, #123]!
    756c:	f040 0002 	orr.w	r0, r0, #2
    7570:	7020      	strb	r0, [r4, #0]
    7572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7574:	f640 418c 	movw	r1, #3212	; 0xc8c
    7578:	202d      	movs	r0, #45	; 0x2d
    757a:	f7fc ffe7 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    757e:	f844 1f7c 	str.w	r1, [r4, #124]!
    7582:	8880      	ldrh	r0, [r0, #4]
    7584:	80a0      	strh	r0, [r4, #4]
    7586:	60e7      	str	r7, [r4, #12]
    7588:	8227      	strh	r7, [r4, #16]
    758a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    758c:	20000134 	.word	0x20000134
    7590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7592:	4604      	mov	r4, r0
    7594:	20ff      	movs	r0, #255	; 0xff
    7596:	f88d 0000 	strb.w	r0, [sp]
    759a:	2601      	movs	r6, #1
    759c:	466a      	mov	r2, sp
    759e:	2105      	movs	r1, #5
    75a0:	4620      	mov	r0, r4
    75a2:	f7ff fef1 	bl	7388 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    75a6:	b160      	cbz	r0, 75c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x552>
    75a8:	4d28      	ldr	r5, [pc, #160]	; (764c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>)
    75aa:	4f27      	ldr	r7, [pc, #156]	; (7648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>)
    75ac:	6869      	ldr	r1, [r5, #4]
    75ae:	7bfa      	ldrb	r2, [r7, #15]
    75b0:	f107 0310 	add.w	r3, r7, #16
    75b4:	f811 0b03 	ldrb.w	r0, [r1], #3
    75b8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    75bc:	f006 f8af 	bl	d71e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    75c0:	b110      	cbz	r0, 75c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x558>
    75c2:	2600      	movs	r6, #0
    75c4:	4630      	mov	r0, r6
    75c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75c8:	686a      	ldr	r2, [r5, #4]
    75ca:	69e0      	ldr	r0, [r4, #28]
    75cc:	7812      	ldrb	r2, [r2, #0]
    75ce:	f810 1f9d 	ldrb.w	r1, [r0, #157]!
    75d2:	f3c2 1240 	ubfx	r2, r2, #5, #1
    75d6:	4011      	ands	r1, r2
    75d8:	7001      	strb	r1, [r0, #0]
    75da:	2201      	movs	r2, #1
    75dc:	4620      	mov	r0, r4
    75de:	69e1      	ldr	r1, [r4, #28]
    75e0:	f000 f8a0 	bl	7724 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>
    75e4:	2300      	movs	r3, #0
    75e6:	f89d 2000 	ldrb.w	r2, [sp]
    75ea:	4620      	mov	r0, r4
    75ec:	69e1      	ldr	r1, [r4, #28]
    75ee:	f7ff ff5d 	bl	74ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    75f2:	2210      	movs	r2, #16
    75f4:	4621      	mov	r1, r4
    75f6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    75fa:	f7fe ff19 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    75fe:	69e0      	ldr	r0, [r4, #28]
    7600:	2205      	movs	r2, #5
    7602:	8801      	ldrh	r1, [r0, #0]
    7604:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    7608:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    760c:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    7610:	4621      	mov	r1, r4
    7612:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    7616:	f7fe ff0b 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    761a:	2100      	movs	r1, #0
    761c:	69e0      	ldr	r0, [r4, #28]
    761e:	7039      	strb	r1, [r7, #0]
    7620:	460a      	mov	r2, r1
    7622:	4621      	mov	r1, r4
    7624:	f000 fa8c 	bl	7b40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7628:	6868      	ldr	r0, [r5, #4]
    762a:	69e1      	ldr	r1, [r4, #28]
    762c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7630:	f841 2f03 	str.w	r2, [r1, #3]!
    7634:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7638:	808a      	strh	r2, [r1, #4]
    763a:	7800      	ldrb	r0, [r0, #0]
    763c:	69e1      	ldr	r1, [r4, #28]
    763e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7642:	7088      	strb	r0, [r1, #2]
    7644:	e7be      	b.n	75c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x554>
    7646:	0000      	.short	0x0000
    7648:	20001300 	.word	0x20001300
    764c:	20000134 	.word	0x20000134
    7650:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7654:	4604      	mov	r4, r0
    7656:	20ff      	movs	r0, #255	; 0xff
    7658:	f88d 0000 	strb.w	r0, [sp]
    765c:	2501      	movs	r5, #1
    765e:	466a      	mov	r2, sp
    7660:	2103      	movs	r1, #3
    7662:	4620      	mov	r0, r4
    7664:	f7ff fe90 	bl	7388 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7668:	b330      	cbz	r0, 76b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>
    766a:	7b20      	ldrb	r0, [r4, #12]
    766c:	2700      	movs	r7, #0
    766e:	b168      	cbz	r0, 768c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
    7670:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    7674:	f88d 0004 	strb.w	r0, [sp, #4]
    7678:	9801      	ldr	r0, [sp, #4]
    767a:	9001      	str	r0, [sp, #4]
    767c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7680:	b920      	cbnz	r0, 768c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
    7682:	f89d 1000 	ldrb.w	r1, [sp]
    7686:	4620      	mov	r0, r4
    7688:	f7ff fe3e 	bl	7308 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    768c:	4e0c      	ldr	r6, [pc, #48]	; (76c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>)
    768e:	2104      	movs	r1, #4
    7690:	6870      	ldr	r0, [r6, #4]
    7692:	8007      	strh	r7, [r0, #0]
    7694:	f006 fb52 	bl	dd3c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    7698:	4620      	mov	r0, r4
    769a:	f000 f88b 	bl	77b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>
    769e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    76a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    76a4:	6870      	ldr	r0, [r6, #4]
    76a6:	f006 fb80 	bl	ddaa <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    76aa:	4906      	ldr	r1, [pc, #24]	; (76c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    76ac:	2005      	movs	r0, #5
    76ae:	7008      	strb	r0, [r1, #0]
    76b0:	6870      	ldr	r0, [r6, #4]
    76b2:	f003 fc9f 	bl	aff4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    76b6:	e000      	b.n	76ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64a>
    76b8:	2500      	movs	r5, #0
    76ba:	4628      	mov	r0, r5
    76bc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    76c0:	20000134 	.word	0x20000134
    76c4:	20001300 	.word	0x20001300
    76c8:	b570      	push	{r4, r5, r6, lr}
    76ca:	4604      	mov	r4, r0
    76cc:	460e      	mov	r6, r1
    76ce:	7e40      	ldrb	r0, [r0, #25]
    76d0:	f7fe fb9c 	bl	5e0c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    76d4:	0005      	movs	r5, r0
    76d6:	d019      	beq.n	770c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    76d8:	2110      	movs	r1, #16
    76da:	f006 fa7e 	bl	dbda <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    76de:	2800      	cmp	r0, #0
    76e0:	d114      	bne.n	770c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    76e2:	2001      	movs	r0, #1
    76e4:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    76e8:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    76ec:	4632      	mov	r2, r6
    76ee:	460c      	mov	r4, r1
    76f0:	4628      	mov	r0, r5
    76f2:	f006 f844 	bl	d77e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    76f6:	4621      	mov	r1, r4
    76f8:	4c05      	ldr	r4, [pc, #20]	; (7710 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>)
    76fa:	6860      	ldr	r0, [r4, #4]
    76fc:	f006 fb39 	bl	dd72 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    7700:	6860      	ldr	r0, [r4, #4]
    7702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7706:	2101      	movs	r1, #1
    7708:	f006 bb39 	b.w	dd7e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    770c:	bd70      	pop	{r4, r5, r6, pc}
    770e:	0000      	.short	0x0000
    7710:	20000134 	.word	0x20000134
    7714:	4802      	ldr	r0, [pc, #8]	; (7720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>)
    7716:	2101      	movs	r1, #1
    7718:	6800      	ldr	r0, [r0, #0]
    771a:	f7ff bb29 	b.w	6d70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    771e:	0000      	.short	0x0000
    7720:	20000134 	.word	0x20000134
    7724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7728:	4e21      	ldr	r6, [pc, #132]	; (77b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x740>)
    772a:	4680      	mov	r8, r0
    772c:	460c      	mov	r4, r1
    772e:	6870      	ldr	r0, [r6, #4]
    7730:	4615      	mov	r5, r2
    7732:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7736:	6161      	str	r1, [r4, #20]
    7738:	6841      	ldr	r1, [r0, #4]
    773a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    773e:	61e1      	str	r1, [r4, #28]
    7740:	8940      	ldrh	r0, [r0, #10]
    7742:	f006 f8c5 	bl	d8d0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7746:	4607      	mov	r7, r0
    7748:	6120      	str	r0, [r4, #16]
    774a:	6870      	ldr	r0, [r6, #4]
    774c:	4639      	mov	r1, r7
    774e:	7d80      	ldrb	r0, [r0, #22]
    7750:	f006 fa3a 	bl	dbc8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7754:	84a0      	strh	r0, [r4, #36]	; 0x24
    7756:	6870      	ldr	r0, [r6, #4]
    7758:	4639      	mov	r1, r7
    775a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    775e:	f006 fa2f 	bl	dbc0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7762:	6220      	str	r0, [r4, #32]
    7764:	6870      	ldr	r0, [r6, #4]
    7766:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    776a:	8321      	strh	r1, [r4, #24]
    776c:	8841      	ldrh	r1, [r0, #2]
    776e:	8361      	strh	r1, [r4, #26]
    7770:	6841      	ldr	r1, [r0, #4]
    7772:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
    7776:	7a01      	ldrb	r1, [r0, #8]
    7778:	f884 10a2 	strb.w	r1, [r4, #162]	; 0xa2
    777c:	7a41      	ldrb	r1, [r0, #9]
    777e:	f001 011f 	and.w	r1, r1, #31
    7782:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
    7786:	7a40      	ldrb	r0, [r0, #9]
    7788:	0940      	lsrs	r0, r0, #5
    778a:	f884 020d 	strb.w	r0, [r4, #525]	; 0x20d
    778e:	f104 0062 	add.w	r0, r4, #98	; 0x62
    7792:	7205      	strb	r5, [r0, #8]
    7794:	7245      	strb	r5, [r0, #9]
    7796:	21ff      	movs	r1, #255	; 0xff
    7798:	7281      	strb	r1, [r0, #10]
    779a:	2100      	movs	r1, #0
    779c:	3836      	subs	r0, #54	; 0x36
    779e:	f006 fd76 	bl	e28e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    77a2:	f898 000e 	ldrb.w	r0, [r8, #14]
    77a6:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    77aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77ae:	0000      	.short	0x0000
    77b0:	20000134 	.word	0x20000134
    77b4:	b570      	push	{r4, r5, r6, lr}
    77b6:	4d07      	ldr	r5, [pc, #28]	; (77d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x764>)
    77b8:	4604      	mov	r4, r0
    77ba:	f100 0151 	add.w	r1, r0, #81	; 0x51
    77be:	6868      	ldr	r0, [r5, #4]
    77c0:	f006 fae4 	bl	dd8c <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    77c4:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    77c8:	6868      	ldr	r0, [r5, #4]
    77ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77ce:	f006 bae3 	b.w	dd98 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    77d2:	0000      	.short	0x0000
    77d4:	20000134 	.word	0x20000134
    77d8:	00006ff9 	.word	0x00006ff9
    77dc:	00006e85 	.word	0x00006e85
    77e0:	00006f75 	.word	0x00006f75
    77e4:	00000000 	.word	0x00000000
    77e8:	00006f4d 	.word	0x00006f4d
    77ec:	00006fa5 	.word	0x00006fa5
    77f0:	0000e7ef 	.word	0x0000e7ef
    77f4:	0000e7f5 	.word	0x0000e7f5
    77f8:	00007205 	.word	0x00007205
    77fc:	00007229 	.word	0x00007229
    7800:	00007715 	.word	0x00007715
    7804:	000077f4 	.word	0x000077f4
    7808:	000077ec 	.word	0x000077ec
    780c:	000077e8 	.word	0x000077e8

00007810 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7810:	b510      	push	{r4, lr}
    7812:	1e42      	subs	r2, r0, #1
    7814:	2a02      	cmp	r2, #2
    7816:	d901      	bls.n	781c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7818:	21ca      	movs	r1, #202	; 0xca
    781a:	e009      	b.n	7830 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    781c:	1e40      	subs	r0, r0, #1
    781e:	2910      	cmp	r1, #16
    7820:	d009      	beq.n	7836 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7822:	2912      	cmp	r1, #18
    7824:	d00c      	beq.n	7840 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7826:	2913      	cmp	r1, #19
    7828:	d00a      	beq.n	7840 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    782a:	2915      	cmp	r1, #21
    782c:	d005      	beq.n	783a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    782e:	21d8      	movs	r1, #216	; 0xd8
    7830:	202f      	movs	r0, #47	; 0x2f
    7832:	f7fc fe8b 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7836:	4905      	ldr	r1, [pc, #20]	; (784c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7838:	e004      	b.n	7844 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    783a:	4904      	ldr	r1, [pc, #16]	; (784c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    783c:	1d89      	adds	r1, r1, #6
    783e:	e001      	b.n	7844 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7840:	4902      	ldr	r1, [pc, #8]	; (784c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7842:	1f89      	subs	r1, r1, #6
    7844:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7848:	bd10      	pop	{r4, pc}
    784a:	0000      	.short	0x0000
    784c:	0000e9f4 	.word	0x0000e9f4

00007850 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7850:	1e42      	subs	r2, r0, #1
    7852:	b510      	push	{r4, lr}
    7854:	b2d2      	uxtb	r2, r2
    7856:	2a01      	cmp	r2, #1
    7858:	d903      	bls.n	7862 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    785a:	291d      	cmp	r1, #29
    785c:	d001      	beq.n	7862 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    785e:	21ee      	movs	r1, #238	; 0xee
    7860:	e00d      	b.n	787e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7862:	2913      	cmp	r1, #19
    7864:	d013      	beq.n	788e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7866:	dc04      	bgt.n	7872 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7868:	2910      	cmp	r1, #16
    786a:	d00b      	beq.n	7884 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    786c:	2912      	cmp	r1, #18
    786e:	d104      	bne.n	787a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7870:	e00d      	b.n	788e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7872:	2915      	cmp	r1, #21
    7874:	d008      	beq.n	7888 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7876:	291d      	cmp	r1, #29
    7878:	d00e      	beq.n	7898 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    787a:	f44f 7181 	mov.w	r1, #258	; 0x102
    787e:	202f      	movs	r0, #47	; 0x2f
    7880:	f7fc fe64 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7884:	4807      	ldr	r0, [pc, #28]	; (78a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7886:	e004      	b.n	7892 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7888:	4806      	ldr	r0, [pc, #24]	; (78a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    788a:	3008      	adds	r0, #8
    788c:	e001      	b.n	7892 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    788e:	4805      	ldr	r0, [pc, #20]	; (78a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7890:	1d00      	adds	r0, r0, #4
    7892:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7896:	bd10      	pop	{r4, pc}
    7898:	f240 315a 	movw	r1, #858	; 0x35a
    789c:	fb10 f001 	smulbb	r0, r0, r1
    78a0:	bd10      	pop	{r4, pc}
    78a2:	0000      	.short	0x0000
    78a4:	0000e9e2 	.word	0x0000e9e2

000078a8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    78a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78ac:	4604      	mov	r4, r0
    78ae:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    78b2:	4616      	mov	r6, r2
    78b4:	460d      	mov	r5, r1
    78b6:	2800      	cmp	r0, #0
    78b8:	d15e      	bne.n	7978 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    78ba:	4621      	mov	r1, r4
    78bc:	484c      	ldr	r0, [pc, #304]	; (79f0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x148>)
    78be:	f7fb f84f 	bl	2960 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    78c2:	4607      	mov	r7, r0
    78c4:	2820      	cmp	r0, #32
    78c6:	d057      	beq.n	7978 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    78c8:	2250      	movs	r2, #80	; 0x50
    78ca:	2100      	movs	r1, #0
    78cc:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    78d0:	f004 fe4d 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    78d4:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    78d8:	2701      	movs	r7, #1
    78da:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    78de:	f884 70e0 	strb.w	r7, [r4, #224]	; 0xe0
    78e2:	b135      	cbz	r5, 78f2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    78e4:	f7ff f842 	bl	696c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    78e8:	f000 0007 	and.w	r0, r0, #7
    78ec:	1c40      	adds	r0, r0, #1
    78ee:	f885 023c 	strb.w	r0, [r5, #572]	; 0x23c
    78f2:	4620      	mov	r0, r4
    78f4:	f007 fa33 	bl	ed5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    78f8:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    78fc:	2002      	movs	r0, #2
    78fe:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    7902:	f884 70f3 	strb.w	r7, [r4, #243]	; 0xf3
    7906:	2500      	movs	r5, #0
    7908:	46b8      	mov	r8, r7
    790a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    790e:	f7fc f995 	bl	3c3c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    7912:	4607      	mov	r7, r0
    7914:	f004 fc4e 	bl	c1b4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7918:	8921      	ldrh	r1, [r4, #8]
    791a:	3ce8      	subs	r4, #232	; 0xe8
    791c:	4288      	cmp	r0, r1
    791e:	d800      	bhi.n	7922 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    7920:	4608      	mov	r0, r1
    7922:	4438      	add	r0, r7
    7924:	30cc      	adds	r0, #204	; 0xcc
    7926:	b287      	uxth	r7, r0
    7928:	4620      	mov	r0, r4
    792a:	f006 fef6 	bl	e71a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    792e:	b330      	cbz	r0, 797e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    7930:	f008 fe60 	bl	105f4 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7934:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7938:	b281      	uxth	r1, r0
    793a:	4630      	mov	r0, r6
    793c:	f004 fc6e 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7940:	4430      	add	r0, r6
    7942:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    7946:	3490      	adds	r4, #144	; 0x90
    7948:	f7fb fa1a 	bl	2d80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    794c:	19c0      	adds	r0, r0, r7
    794e:	4169      	adcs	r1, r5
    7950:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    7954:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    7958:	f824 5c6e 	strh.w	r5, [r4, #-110]
    795c:	2001      	movs	r0, #1
    795e:	f007 f839 	bl	e9d4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7962:	f500 7088 	add.w	r0, r0, #272	; 0x110
    7966:	1a30      	subs	r0, r6, r0
    7968:	6460      	str	r0, [r4, #68]	; 0x44
    796a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    796e:	0841      	lsrs	r1, r0, #1
    7970:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    7974:	3c90      	subs	r4, #144	; 0x90
    7976:	e023      	b.n	79c0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    7978:	200c      	movs	r0, #12
    797a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    797e:	2100      	movs	r1, #0
    7980:	4620      	mov	r0, r4
    7982:	f007 f93e 	bl	ec02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    7986:	f8df 806c 	ldr.w	r8, [pc, #108]	; 79f4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>
    798a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    798e:	2000      	movs	r0, #0
    7990:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7994:	b139      	cbz	r1, 79a6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xfe>
    7996:	f7fe ffe9 	bl	696c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    799a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    799e:	fbb0 f2f1 	udiv	r2, r0, r1
    79a2:	fb01 0012 	mls	r0, r1, r2, r0
    79a6:	4407      	add	r7, r0
    79a8:	f7fb f9ea 	bl	2d80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    79ac:	19c0      	adds	r0, r0, r7
    79ae:	4169      	adcs	r1, r5
    79b0:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    79b4:	b19e      	cbz	r6, 79de <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x136>
    79b6:	1980      	adds	r0, r0, r6
    79b8:	eb51 0105 	adcs.w	r1, r1, r5
    79bc:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    79c0:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    79c4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    79c8:	f007 f9c7 	bl	ed5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    79cc:	b158      	cbz	r0, 79e6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13e>
    79ce:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    79d2:	2100      	movs	r1, #0
    79d4:	4620      	mov	r0, r4
    79d6:	f006 fed0 	bl	e77a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    79da:	2000      	movs	r0, #0
    79dc:	e7cd      	b.n	797a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    79de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    79e2:	0841      	lsrs	r1, r0, #1
    79e4:	e7ea      	b.n	79bc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x114>
    79e6:	f240 11e7 	movw	r1, #487	; 0x1e7
    79ea:	2030      	movs	r0, #48	; 0x30
    79ec:	f7fc fdae 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79f0:	0000eed7 	.word	0x0000eed7
    79f4:	20000144 	.word	0x20000144

000079f8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    79f8:	4901      	ldr	r1, [pc, #4]	; (7a00 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    79fa:	8088      	strh	r0, [r1, #4]
    79fc:	4770      	bx	lr
    79fe:	0000      	.short	0x0000
    7a00:	20000144 	.word	0x20000144

00007a04 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7a04:	4805      	ldr	r0, [pc, #20]	; (7a1c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    7a06:	2100      	movs	r1, #0
    7a08:	7001      	strb	r1, [r0, #0]
    7a0a:	2201      	movs	r2, #1
    7a0c:	7082      	strb	r2, [r0, #2]
    7a0e:	7041      	strb	r1, [r0, #1]
    7a10:	f242 7110 	movw	r1, #10000	; 0x2710
    7a14:	8081      	strh	r1, [r0, #4]
    7a16:	f000 b803 	b.w	7a20 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    7a1a:	0000      	.short	0x0000
    7a1c:	20000144 	.word	0x20000144

00007a20 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    7a20:	b51c      	push	{r2, r3, r4, lr}
    7a22:	4909      	ldr	r1, [pc, #36]	; (7a48 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    7a24:	e9d1 0100 	ldrd	r0, r1, [r1]
    7a28:	e9cd 0100 	strd	r0, r1, [sp]
    7a2c:	e002      	b.n	7a34 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    7a2e:	9800      	ldr	r0, [sp, #0]
    7a30:	f007 f80c 	bl	ea4c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    7a34:	4668      	mov	r0, sp
    7a36:	f7fc ffc3 	bl	49c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7a3a:	2800      	cmp	r0, #0
    7a3c:	d0f7      	beq.n	7a2e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    7a3e:	f000 f8ab 	bl	7b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    7a42:	2000      	movs	r0, #0
    7a44:	bd1c      	pop	{r2, r3, r4, pc}
    7a46:	0000      	.short	0x0000
    7a48:	000081b8 	.word	0x000081b8

00007a4c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    7a4c:	4901      	ldr	r1, [pc, #4]	; (7a54 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    7a4e:	7008      	strb	r0, [r1, #0]
    7a50:	4770      	bx	lr
    7a52:	0000      	.short	0x0000
    7a54:	20000144 	.word	0x20000144

00007a58 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    7a58:	4908      	ldr	r1, [pc, #32]	; (7a7c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    7a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a5e:	fbb1 f1f2 	udiv	r1, r1, r2
    7a62:	b510      	push	{r4, lr}
    7a64:	f501 7125 	add.w	r1, r1, #660	; 0x294
    7a68:	f006 fc2a 	bl	e2c0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7a6c:	f640 0148 	movw	r1, #2120	; 0x848
    7a70:	4288      	cmp	r0, r1
    7a72:	d300      	bcc.n	7a76 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    7a74:	4608      	mov	r0, r1
    7a76:	b280      	uxth	r0, r0
    7a78:	bd10      	pop	{r4, pc}
    7a7a:	0000      	.short	0x0000
    7a7c:	0001527d 	.word	0x0001527d

00007a80 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a84:	4c10      	ldr	r4, [pc, #64]	; (7ac8 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7a86:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
    7a8a:	f003 f9cd 	bl	ae28 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7a8e:	4606      	mov	r6, r0
    7a90:	7820      	ldrb	r0, [r4, #0]
    7a92:	b128      	cbz	r0, 7aa0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7a94:	4632      	mov	r2, r6
    7a96:	4639      	mov	r1, r7
    7a98:	4628      	mov	r0, r5
    7a9a:	f005 ff23 	bl	d8e4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7a9e:	4605      	mov	r5, r0
    7aa0:	68a0      	ldr	r0, [r4, #8]
    7aa2:	4285      	cmp	r5, r0
    7aa4:	d005      	beq.n	7ab2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7aa6:	6921      	ldr	r1, [r4, #16]
    7aa8:	1a28      	subs	r0, r5, r0
    7aaa:	4408      	add	r0, r1
    7aac:	6120      	str	r0, [r4, #16]
    7aae:	f7fb f899 	bl	2be4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7ab2:	60a5      	str	r5, [r4, #8]
    7ab4:	42ae      	cmp	r6, r5
    7ab6:	d801      	bhi.n	7abc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7ab8:	7860      	ldrb	r0, [r4, #1]
    7aba:	b110      	cbz	r0, 7ac2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7abc:	2000      	movs	r0, #0
    7abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ac2:	2001      	movs	r0, #1
    7ac4:	e7fb      	b.n	7abe <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7ac6:	0000      	.short	0x0000
    7ac8:	20000144 	.word	0x20000144

00007acc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7acc:	b510      	push	{r4, lr}
    7ace:	4604      	mov	r4, r0
    7ad0:	2906      	cmp	r1, #6
    7ad2:	d22e      	bcs.n	7b32 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    7ad4:	e8df f001 	tbb	[pc, r1]
    7ad8:	14031105 	.word	0x14031105
    7adc:	2815      	.short	0x2815
    7ade:	2100      	movs	r1, #0
    7ae0:	e006      	b.n	7af0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    7ae2:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    7ae6:	b110      	cbz	r0, 7aee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    7ae8:	4620      	mov	r0, r4
    7aea:	f007 f8c9 	bl	ec80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    7aee:	2101      	movs	r1, #1
    7af0:	4620      	mov	r0, r4
    7af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7af6:	f000 b8f7 	b.w	7ce8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    7afa:	2003      	movs	r0, #3
    7afc:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7b00:	bd10      	pop	{r4, pc}
    7b02:	f003 f997 	bl	ae34 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7b06:	f8c4 029c 	str.w	r0, [r4, #668]	; 0x29c
    7b0a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7b0e:	f003 fa55 	bl	afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7b12:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    7b16:	1a09      	subs	r1, r1, r0
    7b18:	4808      	ldr	r0, [pc, #32]	; (7b3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    7b1a:	6882      	ldr	r2, [r0, #8]
    7b1c:	440a      	add	r2, r1
    7b1e:	6082      	str	r2, [r0, #8]
    7b20:	68c2      	ldr	r2, [r0, #12]
    7b22:	4411      	add	r1, r2
    7b24:	60c1      	str	r1, [r0, #12]
    7b26:	bd10      	pop	{r4, pc}
    7b28:	4620      	mov	r0, r4
    7b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b2e:	f007 b892 	b.w	ec56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7b32:	f240 7143 	movw	r1, #1859	; 0x743
    7b36:	2030      	movs	r0, #48	; 0x30
    7b38:	f7fc fd08 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b3c:	20000144 	.word	0x20000144

00007b40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    7b40:	b570      	push	{r4, r5, r6, lr}
    7b42:	460c      	mov	r4, r1
    7b44:	4605      	mov	r5, r0
    7b46:	b112      	cbz	r2, 7b4e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    7b48:	f240 716d 	movw	r1, #1901	; 0x76d
    7b4c:	e010      	b.n	7b70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    7b4e:	f003 f96b 	bl	ae28 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7b52:	4601      	mov	r1, r0
    7b54:	2200      	movs	r2, #0
    7b56:	4620      	mov	r0, r4
    7b58:	f007 f971 	bl	ee3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    7b5c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    7b60:	462a      	mov	r2, r5
    7b62:	4905      	ldr	r1, [pc, #20]	; (7b78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    7b64:	f7fa fdb2 	bl	26cc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7b68:	2800      	cmp	r0, #0
    7b6a:	d104      	bne.n	7b76 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    7b6c:	f240 7156 	movw	r1, #1878	; 0x756
    7b70:	2030      	movs	r0, #48	; 0x30
    7b72:	f7fc fceb 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b76:	bd70      	pop	{r4, r5, r6, pc}
    7b78:	0000ef79 	.word	0x0000ef79
    7b7c:	b510      	push	{r4, lr}
    7b7e:	280c      	cmp	r0, #12
    7b80:	d304      	bcc.n	7b8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    7b82:	f240 3183 	movw	r1, #899	; 0x383
    7b86:	2006      	movs	r0, #6
    7b88:	f7fc fce0 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b8c:	4901      	ldr	r1, [pc, #4]	; (7b94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    7b8e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7b92:	bd10      	pop	{r4, pc}
    7b94:	000081d4 	.word	0x000081d4
    7b98:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7b9c:	4d15      	ldr	r5, [pc, #84]	; (7bf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    7b9e:	2001      	movs	r0, #1
    7ba0:	7068      	strb	r0, [r5, #1]
    7ba2:	2400      	movs	r4, #0
    7ba4:	f64f 76ff 	movw	r6, #65535	; 0xffff
    7ba8:	e00b      	b.n	7bc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    7baa:	2100      	movs	r1, #0
    7bac:	f005 fc0c 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7bb0:	0007      	movs	r7, r0
    7bb2:	d009      	beq.n	7bc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    7bb4:	f897 0294 	ldrb.w	r0, [r7, #660]	; 0x294
    7bb8:	f7fa fdba 	bl	2730 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7bbc:	4638      	mov	r0, r7
    7bbe:	f007 f931 	bl	ee24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    7bc2:	9400      	str	r4, [sp, #0]
    7bc4:	9401      	str	r4, [sp, #4]
    7bc6:	e00d      	b.n	7be4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7bc8:	f240 111f 	movw	r1, #287	; 0x11f
    7bcc:	2030      	movs	r0, #48	; 0x30
    7bce:	f7fc fcbd 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bd2:	9800      	ldr	r0, [sp, #0]
    7bd4:	b130      	cbz	r0, 7be4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7bd6:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    7bda:	b119      	cbz	r1, 7be4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7bdc:	8800      	ldrh	r0, [r0, #0]
    7bde:	42b0      	cmp	r0, r6
    7be0:	d1e3      	bne.n	7baa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    7be2:	e004      	b.n	7bee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    7be4:	4668      	mov	r0, sp
    7be6:	f7fc feeb 	bl	49c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7bea:	2800      	cmp	r0, #0
    7bec:	d0f1      	beq.n	7bd2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    7bee:	706c      	strb	r4, [r5, #1]
    7bf0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7bf4:	20000144 	.word	0x20000144
    7bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7bfc:	4604      	mov	r4, r0
    7bfe:	4839      	ldr	r0, [pc, #228]	; (7ce4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    7c00:	461e      	mov	r6, r3
    7c02:	4690      	mov	r8, r2
    7c04:	7880      	ldrb	r0, [r0, #2]
    7c06:	4689      	mov	r9, r1
    7c08:	2500      	movs	r5, #0
    7c0a:	2800      	cmp	r0, #0
    7c0c:	d063      	beq.n	7cd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c0e:	f7fc f8eb 	bl	3de8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7c12:	b3e0      	cbz	r0, 7c8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    7c14:	f8b4 0238 	ldrh.w	r0, [r4, #568]	; 0x238
    7c18:	2802      	cmp	r0, #2
    7c1a:	d35c      	bcc.n	7cd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c1c:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7c20:	2802      	cmp	r0, #2
    7c22:	d058      	beq.n	7cd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c24:	f894 0262 	ldrb.w	r0, [r4, #610]	; 0x262
    7c28:	bb88      	cbnz	r0, 7c8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    7c2a:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    7c2e:	f7ff ffa5 	bl	7b7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7c32:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7c36:	b281      	uxth	r1, r0
    7c38:	8031      	strh	r1, [r6, #0]
    7c3a:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7c3e:	2700      	movs	r7, #0
    7c40:	2801      	cmp	r0, #1
    7c42:	d00d      	beq.n	7c60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    7c44:	6920      	ldr	r0, [r4, #16]
    7c46:	f004 fae9 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c4a:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    7c4e:	4442      	add	r2, r8
    7c50:	eba2 0109 	sub.w	r1, r2, r9
    7c54:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7c58:	1a82      	subs	r2, r0, r2
    7c5a:	fb01 7502 	mla	r5, r1, r2, r7
    7c5e:	e035      	b.n	7ccc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    7c60:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    7c64:	2803      	cmp	r0, #3
    7c66:	d039      	beq.n	7cdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    7c68:	2101      	movs	r1, #1
    7c6a:	2000      	movs	r0, #0
    7c6c:	f005 ff05 	bl	da7a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7c70:	6a21      	ldr	r1, [r4, #32]
    7c72:	1847      	adds	r7, r0, r1
    7c74:	8831      	ldrh	r1, [r6, #0]
    7c76:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7c7a:	f004 facf 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c7e:	f8d4 2240 	ldr.w	r2, [r4, #576]	; 0x240
    7c82:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    7c86:	1a82      	subs	r2, r0, r2
    7c88:	fb01 5502 	mla	r5, r1, r2, r5
    7c8c:	e000      	b.n	7c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    7c8e:	e022      	b.n	7cd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c90:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    7c94:	8831      	ldrh	r1, [r6, #0]
    7c96:	4638      	mov	r0, r7
    7c98:	f004 fac0 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c9c:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7ca0:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7ca4:	1a41      	subs	r1, r0, r1
    7ca6:	440d      	add	r5, r1
    7ca8:	8831      	ldrh	r1, [r6, #0]
    7caa:	6920      	ldr	r0, [r4, #16]
    7cac:	f004 fab6 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cb0:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    7cb4:	4442      	add	r2, r8
    7cb6:	eba2 0109 	sub.w	r1, r2, r9
    7cba:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    7cbe:	1a89      	subs	r1, r1, r2
    7cc0:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7cc4:	1a82      	subs	r2, r0, r2
    7cc6:	1e49      	subs	r1, r1, #1
    7cc8:	fb01 5502 	mla	r5, r1, r2, r5
    7ccc:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7cd0:	2001      	movs	r0, #1
    7cd2:	f884 0262 	strb.w	r0, [r4, #610]	; 0x262
    7cd6:	4628      	mov	r0, r5
    7cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7cdc:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7ce0:	e7c6      	b.n	7c70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7ce2:	0000      	.short	0x0000
    7ce4:	20000144 	.word	0x20000144
    7ce8:	b538      	push	{r3, r4, r5, lr}
    7cea:	2500      	movs	r5, #0
    7cec:	4604      	mov	r4, r0
    7cee:	2901      	cmp	r1, #1
    7cf0:	d102      	bne.n	7cf8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    7cf2:	4810      	ldr	r0, [pc, #64]	; (7d34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    7cf4:	7840      	ldrb	r0, [r0, #1]
    7cf6:	b170      	cbz	r0, 7d16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    7cf8:	2004      	movs	r0, #4
    7cfa:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7cfe:	bf00      	nop
    7d00:	f006 ffb7 	bl	ec72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    7d04:	f8a4 5292 	strh.w	r5, [r4, #658]	; 0x292
    7d08:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    7d0c:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    7d10:	f884 5261 	strb.w	r5, [r4, #609]	; 0x261
    7d14:	bd38      	pop	{r3, r4, r5, pc}
    7d16:	9500      	str	r5, [sp, #0]
    7d18:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    7d1c:	2301      	movs	r3, #1
    7d1e:	2200      	movs	r2, #0
    7d20:	4620      	mov	r0, r4
    7d22:	f000 f809 	bl	7d38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    7d26:	2800      	cmp	r0, #0
    7d28:	d0ea      	beq.n	7d00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    7d2a:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    7d2e:	2030      	movs	r0, #48	; 0x30
    7d30:	f7fc fc0c 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d34:	20000144 	.word	0x20000144
    7d38:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d3c:	b08b      	sub	sp, #44	; 0x2c
    7d3e:	4604      	mov	r4, r0
    7d40:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    7d44:	4699      	mov	r9, r3
    7d46:	460f      	mov	r7, r1
    7d48:	9307      	str	r3, [sp, #28]
    7d4a:	9005      	str	r0, [sp, #20]
    7d4c:	f008 fc52 	bl	105f4 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7d50:	4605      	mov	r5, r0
    7d52:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    7d56:	f7ff ff11 	bl	7b7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7d5a:	4428      	add	r0, r5
    7d5c:	f8ad 0004 	strh.w	r0, [sp, #4]
    7d60:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7d64:	280e      	cmp	r0, #14
    7d66:	d004      	beq.n	7d72 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    7d68:	2000      	movs	r0, #0
    7d6a:	9008      	str	r0, [sp, #32]
    7d6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    7d6e:	b110      	cbz	r0, 7d76 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    7d70:	e02e      	b.n	7dd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7d72:	2001      	movs	r0, #1
    7d74:	e7f9      	b.n	7d6a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    7d76:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7d7a:	2803      	cmp	r0, #3
    7d7c:	d128      	bne.n	7dd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7d7e:	9808      	ldr	r0, [sp, #32]
    7d80:	b330      	cbz	r0, 7dd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7d82:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    7d86:	42b8      	cmp	r0, r7
    7d88:	d122      	bne.n	7dd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7d8a:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    7d8e:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    7d92:	6920      	ldr	r0, [r4, #16]
    7d94:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
    7d98:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    7d9c:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7da0:	4408      	add	r0, r1
    7da2:	f8c4 0248 	str.w	r0, [r4, #584]	; 0x248
    7da6:	4620      	mov	r0, r4
    7da8:	f007 f9fe 	bl	f1a8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7dac:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
    7db0:	6220      	str	r0, [r4, #32]
    7db2:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    7db6:	84a0      	strh	r0, [r4, #36]	; 0x24
    7db8:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
    7dbc:	6120      	str	r0, [r4, #16]
    7dbe:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    7dc2:	8320      	strh	r0, [r4, #24]
    7dc4:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    7dc8:	8360      	strh	r0, [r4, #26]
    7dca:	2002      	movs	r0, #2
    7dcc:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7dd0:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    7dd4:	f504 751a 	add.w	r5, r4, #616	; 0x268
    7dd8:	1a38      	subs	r0, r7, r0
    7dda:	fa0f fa80 	sxth.w	sl, r0
    7dde:	f8b4 0290 	ldrh.w	r0, [r4, #656]	; 0x290
    7de2:	1a38      	subs	r0, r7, r0
    7de4:	fa0f f880 	sxth.w	r8, r0
    7de8:	f1b8 0f00 	cmp.w	r8, #0
    7dec:	da08      	bge.n	7e00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    7dee:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    7df2:	f8d4 1284 	ldr.w	r1, [r4, #644]	; 0x284
    7df6:	46d0      	mov	r8, sl
    7df8:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    7dfc:	2001      	movs	r0, #1
    7dfe:	9007      	str	r0, [sp, #28]
    7e00:	ab01      	add	r3, sp, #4
    7e02:	4652      	mov	r2, sl
    7e04:	4641      	mov	r1, r8
    7e06:	4620      	mov	r0, r4
    7e08:	f7ff fef6 	bl	7bf8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    7e0c:	9004      	str	r0, [sp, #16]
    7e0e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7e12:	f8df b334 	ldr.w	fp, [pc, #820]	; 8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
    7e16:	b140      	cbz	r0, 7e2a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    7e18:	2801      	cmp	r0, #1
    7e1a:	d07d      	beq.n	7f18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    7e1c:	2802      	cmp	r0, #2
    7e1e:	d051      	beq.n	7ec4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    7e20:	2803      	cmp	r0, #3
    7e22:	d07a      	beq.n	7f1a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    7e24:	f240 5146 	movw	r1, #1350	; 0x546
    7e28:	e18a      	b.n	8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
    7e2a:	2101      	movs	r1, #1
    7e2c:	2000      	movs	r0, #0
    7e2e:	f005 fe24 	bl	da7a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7e32:	4606      	mov	r6, r0
    7e34:	6a20      	ldr	r0, [r4, #32]
    7e36:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7e3a:	4430      	add	r0, r6
    7e3c:	f004 f9ee 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7e40:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7e44:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7e48:	6920      	ldr	r0, [r4, #16]
    7e4a:	f004 f9e7 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7e4e:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7e52:	a907      	add	r1, sp, #28
    7e54:	a806      	add	r0, sp, #24
    7e56:	f002 ff4f 	bl	acf8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7e5a:	e9d4 01a2 	ldrd	r0, r1, [r4, #648]	; 0x288
    7e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7e62:	f7fa ff9f 	bl	2da4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7e66:	4682      	mov	sl, r0
    7e68:	4620      	mov	r0, r4
    7e6a:	f006 fef4 	bl	ec56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7e6e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7e72:	f8d4 8298 	ldr.w	r8, [r4, #664]	; 0x298
    7e76:	f003 f8cd 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7e7a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7e7e:	4401      	add	r1, r0
    7e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7e84:	fbb1 f0f0 	udiv	r0, r1, r0
    7e88:	6a21      	ldr	r1, [r4, #32]
    7e8a:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    7e8e:	4431      	add	r1, r6
    7e90:	1a08      	subs	r0, r1, r0
    7e92:	1a81      	subs	r1, r0, r2
    7e94:	4441      	add	r1, r8
    7e96:	3920      	subs	r1, #32
    7e98:	eba1 060a 	sub.w	r6, r1, sl
    7e9c:	0050      	lsls	r0, r2, #1
    7e9e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7ea0:	3060      	adds	r0, #96	; 0x60
    7ea2:	4401      	add	r1, r0
    7ea4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7ea8:	f006 ff45 	bl	ed36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7eac:	3022      	adds	r0, #34	; 0x22
    7eae:	f8cb 0014 	str.w	r0, [fp, #20]
    7eb2:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    7eb6:	1a30      	subs	r0, r6, r0
    7eb8:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    7ebc:	d258      	bcs.n	7f70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    7ebe:	f240 41df 	movw	r1, #1247	; 0x4df
    7ec2:	e13d      	b.n	8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
    7ec4:	6a21      	ldr	r1, [r4, #32]
    7ec6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7eca:	4408      	add	r0, r1
    7ecc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7ed0:	f004 f9a4 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7ed4:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7ed8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7edc:	6920      	ldr	r0, [r4, #16]
    7ede:	f004 f99d 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7ee2:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7ee6:	4620      	mov	r0, r4
    7ee8:	f006 feb5 	bl	ec56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7eec:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    7ef0:	bb10      	cbnz	r0, 7f38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    7ef2:	f1b9 0f00 	cmp.w	r9, #0
    7ef6:	d01f      	beq.n	7f38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    7ef8:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    7efc:	4640      	mov	r0, r8
    7efe:	f003 f889 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7f02:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7f06:	4401      	add	r1, r0
    7f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7f0c:	fbb1 f0f0 	udiv	r0, r1, r0
    7f10:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7f14:	4408      	add	r0, r1
    7f16:	e001      	b.n	7f1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    7f18:	e02b      	b.n	7f72 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    7f1a:	e047      	b.n	7fac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    7f1c:	6a22      	ldr	r2, [r4, #32]
    7f1e:	f8d4 1244 	ldr.w	r1, [r4, #580]	; 0x244
    7f22:	4411      	add	r1, r2
    7f24:	1a0e      	subs	r6, r1, r0
    7f26:	4640      	mov	r0, r8
    7f28:	f003 f848 	bl	afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7f2c:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    7f30:	1a08      	subs	r0, r1, r0
    7f32:	4406      	add	r6, r0
    7f34:	3e20      	subs	r6, #32
    7f36:	e006      	b.n	7f46 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    7f38:	6a21      	ldr	r1, [r4, #32]
    7f3a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7f3e:	4408      	add	r0, r1
    7f40:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7f44:	1a46      	subs	r6, r0, r1
    7f46:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    7f4a:	f8d4 1240 	ldr.w	r1, [r4, #576]	; 0x240
    7f4e:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    7f52:	fb01 0002 	mla	r0, r1, r2, r0
    7f56:	0040      	lsls	r0, r0, #1
    7f58:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7f5a:	3060      	adds	r0, #96	; 0x60
    7f5c:	4401      	add	r1, r0
    7f5e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7f62:	f006 fee8 	bl	ed36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7f66:	f8cb 0014 	str.w	r0, [fp, #20]
    7f6a:	2001      	movs	r0, #1
    7f6c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7f70:	e061      	b.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
    7f72:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7f76:	6920      	ldr	r0, [r4, #16]
    7f78:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7f7c:	1a86      	subs	r6, r0, r2
    7f7e:	eb01 000a 	add.w	r0, r1, sl
    7f82:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    7f86:	f8d4 c240 	ldr.w	ip, [r4, #576]	; 0x240
    7f8a:	1a40      	subs	r0, r0, r1
    7f8c:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
    7f90:	1e40      	subs	r0, r0, #1
    7f92:	fb0c 3101 	mla	r1, ip, r1, r3
    7f96:	fb00 1002 	mla	r0, r0, r2, r1
    7f9a:	0040      	lsls	r0, r0, #1
    7f9c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7f9e:	3060      	adds	r0, #96	; 0x60
    7fa0:	4401      	add	r1, r0
    7fa2:	fb06 f608 	mul.w	r6, r6, r8
    7fa6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7faa:	e040      	b.n	802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
    7fac:	6920      	ldr	r0, [r4, #16]
    7fae:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    7fb2:	fb00 f008 	mul.w	r0, r0, r8
    7fb6:	fb08 0611 	mls	r6, r8, r1, r0
    7fba:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
    7fbe:	2826      	cmp	r0, #38	; 0x26
    7fc0:	d003      	beq.n	7fca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    7fc2:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7fc6:	2826      	cmp	r0, #38	; 0x26
    7fc8:	d109      	bne.n	7fde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7fca:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    7fce:	1a38      	subs	r0, r7, r0
    7fd0:	b200      	sxth	r0, r0
    7fd2:	2800      	cmp	r0, #0
    7fd4:	db03      	blt.n	7fde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7fd6:	f894 02bf 	ldrb.w	r0, [r4, #703]	; 0x2bf
    7fda:	b100      	cbz	r0, 7fde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7fdc:	9005      	str	r0, [sp, #20]
    7fde:	9807      	ldr	r0, [sp, #28]
    7fe0:	b1d8      	cbz	r0, 801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
    7fe2:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    7fe6:	b9c0      	cbnz	r0, 801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
    7fe8:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    7fec:	2800      	cmp	r0, #0
    7fee:	d07d      	beq.n	80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>
    7ff0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7ff4:	f003 f80e 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7ff8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7ffc:	4401      	add	r1, r0
    7ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8002:	fbb1 f0f0 	udiv	r0, r1, r0
    8006:	1a36      	subs	r6, r6, r0
    8008:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    800c:	f002 ffd6 	bl	afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8010:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    8014:	1a08      	subs	r0, r1, r0
    8016:	4406      	add	r6, r0
    8018:	3e20      	subs	r6, #32
    801a:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    801e:	eb01 000a 	add.w	r0, r1, sl
    8022:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8026:	4348      	muls	r0, r1
    8028:	0041      	lsls	r1, r0, #1
    802a:	3160      	adds	r1, #96	; 0x60
    802c:	9805      	ldr	r0, [sp, #20]
    802e:	f006 fe82 	bl	ed36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    8032:	f8cb 0014 	str.w	r0, [fp, #20]
    8036:	9804      	ldr	r0, [sp, #16]
    8038:	f8db 2014 	ldr.w	r2, [fp, #20]
    803c:	1a31      	subs	r1, r6, r0
    803e:	f8d4 6254 	ldr.w	r6, [r4, #596]	; 0x254
    8042:	6920      	ldr	r0, [r4, #16]
    8044:	1b80      	subs	r0, r0, r6
    8046:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    804a:	f8cb 0018 	str.w	r0, [fp, #24]
    804e:	4282      	cmp	r2, r0
    8050:	d800      	bhi.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
    8052:	4610      	mov	r0, r2
    8054:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
    8058:	2600      	movs	r6, #0
    805a:	702e      	strb	r6, [r5, #0]
    805c:	2064      	movs	r0, #100	; 0x64
    805e:	8128      	strh	r0, [r5, #8]
    8060:	e9d4 20a2 	ldrd	r2, r0, [r4, #648]	; 0x288
    8064:	1851      	adds	r1, r2, r1
    8066:	4170      	adcs	r0, r6
    8068:	e9c5 1004 	strd	r1, r0, [r5, #16]
    806c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8070:	f006 f8f7 	bl	e262 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8074:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    8078:	4408      	add	r0, r1
    807a:	6068      	str	r0, [r5, #4]
    807c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    8080:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    8084:	f8a4 7290 	strh.w	r7, [r4, #656]	; 0x290
    8088:	72ae      	strb	r6, [r5, #10]
    808a:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
    808e:	1bc0      	subs	r0, r0, r7
    8090:	b200      	sxth	r0, r0
    8092:	2800      	cmp	r0, #0
    8094:	dd01      	ble.n	809a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a>
    8096:	2002      	movs	r0, #2
    8098:	72a8      	strb	r0, [r5, #10]
    809a:	9808      	ldr	r0, [sp, #32]
    809c:	b338      	cbz	r0, 80ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xee>
    809e:	f1b9 0f00 	cmp.w	r9, #0
    80a2:	d01c      	beq.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
    80a4:	f8b4 1238 	ldrh.w	r1, [r4, #568]	; 0x238
    80a8:	b3f1      	cbz	r1, 8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
    80aa:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    80ae:	bf00      	nop
    80b0:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    80b4:	f894 223c 	ldrb.w	r2, [r4, #572]	; 0x23c
    80b8:	1c40      	adds	r0, r0, #1
    80ba:	4342      	muls	r2, r0
    80bc:	428a      	cmp	r2, r1
    80be:	d20e      	bcs.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
    80c0:	7aa8      	ldrb	r0, [r5, #10]
    80c2:	b160      	cbz	r0, 80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
    80c4:	72ae      	strb	r6, [r5, #10]
    80c6:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    80ca:	1c40      	adds	r0, r0, #1
    80cc:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    80d0:	f7fe fc46 	bl	6960 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    80d4:	f000 0007 	and.w	r0, r0, #7
    80d8:	1c40      	adds	r0, r0, #1
    80da:	f884 023c 	strb.w	r0, [r4, #572]	; 0x23c
    80de:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    80e2:	4629      	mov	r1, r5
    80e4:	f006 fe39 	bl	ed5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    80e8:	b340      	cbz	r0, 813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
    80ea:	e001      	b.n	80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
    80ec:	e009      	b.n	8102 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102>
    80ee:	e00b      	b.n	8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>
    80f0:	980d      	ldr	r0, [sp, #52]	; 0x34
    80f2:	f080 0001 	eor.w	r0, r0, #1
    80f6:	f884 0260 	strb.w	r0, [r4, #608]	; 0x260
    80fa:	2000      	movs	r0, #0
    80fc:	b00f      	add	sp, #60	; 0x3c
    80fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8102:	f240 5131 	movw	r1, #1329	; 0x531
    8106:	e01b      	b.n	8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
    8108:	f1b9 0f00 	cmp.w	r9, #0
    810c:	d1ca      	bne.n	80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    810e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    8112:	2800      	cmp	r0, #0
    8114:	d0e3      	beq.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
    8116:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    811a:	6920      	ldr	r0, [r4, #16]
    811c:	1a41      	subs	r1, r0, r1
    811e:	4628      	mov	r0, r5
    8120:	f005 fcbd 	bl	da9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8124:	0400      	lsls	r0, r0, #16
    8126:	e000      	b.n	812a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a>
    8128:	e006      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    812a:	0c00      	lsrs	r0, r0, #16
    812c:	d0d7      	beq.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
    812e:	9918      	ldr	r1, [sp, #96]	; 0x60
    8130:	b101      	cbz	r1, 8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>
    8132:	8008      	strh	r0, [r1, #0]
    8134:	2001      	movs	r0, #1
    8136:	e7e1      	b.n	80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>
    8138:	2000      	movs	r0, #0
    813a:	e7b9      	b.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    813c:	f240 518f 	movw	r1, #1423	; 0x58f
    8140:	2030      	movs	r0, #48	; 0x30
    8142:	f7fc fa03 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8146:	0000      	.short	0x0000
    8148:	20000144 	.word	0x20000144
    814c:	b570      	push	{r4, r5, r6, lr}
    814e:	4604      	mov	r4, r0
    8150:	f004 f830 	bl	c1b4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8154:	2864      	cmp	r0, #100	; 0x64
    8156:	d901      	bls.n	815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>
    8158:	4605      	mov	r5, r0
    815a:	e000      	b.n	815e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15e>
    815c:	2564      	movs	r5, #100	; 0x64
    815e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8162:	2128      	movs	r1, #40	; 0x28
    8164:	f006 fd05 	bl	eb72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    8168:	4428      	add	r0, r5
    816a:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    816e:	f500 7010 	add.w	r0, r0, #576	; 0x240
    8172:	180e      	adds	r6, r1, r0
    8174:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8178:	2128      	movs	r1, #40	; 0x28
    817a:	f006 fcfa 	bl	eb72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    817e:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    8182:	4620      	mov	r0, r4
    8184:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8186:	f006 f80b 	bl	e1a0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    818a:	4605      	mov	r5, r0
    818c:	4632      	mov	r2, r6
    818e:	4620      	mov	r0, r4
    8190:	6921      	ldr	r1, [r4, #16]
    8192:	f006 f805 	bl	e1a0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8196:	4907      	ldr	r1, [pc, #28]	; (81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>)
    8198:	4285      	cmp	r5, r0
    819a:	60c8      	str	r0, [r1, #12]
    819c:	d200      	bcs.n	81a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0>
    819e:	4628      	mov	r0, r5
    81a0:	6088      	str	r0, [r1, #8]
    81a2:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    81a6:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    81aa:	6108      	str	r0, [r1, #16]
    81ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81b0:	f7fa bd18 	b.w	2be4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    81b4:	20000144 	.word	0x20000144
    81b8:	00000000 	.word	0x00000000
    81bc:	00010000 	.word	0x00010000
    81c0:	00000000 	.word	0x00000000
    81c4:	00010000 	.word	0x00010000
    81c8:	00000000 	.word	0x00000000
    81cc:	00001e14 	.word	0x00001e14
    81d0:	00001130 	.word	0x00001130
    81d4:	00fa01f4 	.word	0x00fa01f4
    81d8:	00640096 	.word	0x00640096
    81dc:	0032004b 	.word	0x0032004b
    81e0:	0014001e 	.word	0x0014001e
    81e4:	0005000a 	.word	0x0005000a
    81e8:	00010002 	.word	0x00010002

000081ec <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    81ec:	4806      	ldr	r0, [pc, #24]	; (8208 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    81ee:	4905      	ldr	r1, [pc, #20]	; (8204 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    81f0:	6501      	str	r1, [r0, #80]	; 0x50
    81f2:	4906      	ldr	r1, [pc, #24]	; (820c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    81f4:	6541      	str	r1, [r0, #84]	; 0x54
    81f6:	4807      	ldr	r0, [pc, #28]	; (8214 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    81f8:	4905      	ldr	r1, [pc, #20]	; (8210 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    81fa:	6501      	str	r1, [r0, #80]	; 0x50
    81fc:	4906      	ldr	r1, [pc, #24]	; (8218 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    81fe:	6541      	str	r1, [r0, #84]	; 0x54
    8200:	4770      	bx	lr
    8202:	0000      	.short	0x0000
    8204:	00009581 	.word	0x00009581
    8208:	20000178 	.word	0x20000178
    820c:	00009665 	.word	0x00009665
    8210:	0000f457 	.word	0x0000f457
    8214:	20000224 	.word	0x20000224
    8218:	0000f481 	.word	0x0000f481

0000821c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    821c:	481e      	ldr	r0, [pc, #120]	; (8298 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    821e:	491d      	ldr	r1, [pc, #116]	; (8294 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8220:	6081      	str	r1, [r0, #8]
    8222:	491e      	ldr	r1, [pc, #120]	; (829c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8224:	6041      	str	r1, [r0, #4]
    8226:	491e      	ldr	r1, [pc, #120]	; (82a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8228:	6001      	str	r1, [r0, #0]
    822a:	491e      	ldr	r1, [pc, #120]	; (82a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    822c:	6281      	str	r1, [r0, #40]	; 0x28
    822e:	491e      	ldr	r1, [pc, #120]	; (82a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8230:	62c1      	str	r1, [r0, #44]	; 0x2c
    8232:	491e      	ldr	r1, [pc, #120]	; (82ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8234:	60c1      	str	r1, [r0, #12]
    8236:	491e      	ldr	r1, [pc, #120]	; (82b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8238:	6181      	str	r1, [r0, #24]
    823a:	491e      	ldr	r1, [pc, #120]	; (82b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    823c:	6301      	str	r1, [r0, #48]	; 0x30
    823e:	491e      	ldr	r1, [pc, #120]	; (82b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8240:	6201      	str	r1, [r0, #32]
    8242:	491e      	ldr	r1, [pc, #120]	; (82bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8244:	64c1      	str	r1, [r0, #76]	; 0x4c
    8246:	491e      	ldr	r1, [pc, #120]	; (82c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8248:	6481      	str	r1, [r0, #72]	; 0x48
    824a:	491e      	ldr	r1, [pc, #120]	; (82c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    824c:	6441      	str	r1, [r0, #68]	; 0x44
    824e:	491e      	ldr	r1, [pc, #120]	; (82c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8250:	6341      	str	r1, [r0, #52]	; 0x34
    8252:	491e      	ldr	r1, [pc, #120]	; (82cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8254:	61c1      	str	r1, [r0, #28]
    8256:	491e      	ldr	r1, [pc, #120]	; (82d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8258:	6241      	str	r1, [r0, #36]	; 0x24
    825a:	481f      	ldr	r0, [pc, #124]	; (82d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    825c:	491d      	ldr	r1, [pc, #116]	; (82d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    825e:	6081      	str	r1, [r0, #8]
    8260:	491e      	ldr	r1, [pc, #120]	; (82dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8262:	61c1      	str	r1, [r0, #28]
    8264:	491e      	ldr	r1, [pc, #120]	; (82e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8266:	6241      	str	r1, [r0, #36]	; 0x24
    8268:	491e      	ldr	r1, [pc, #120]	; (82e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    826a:	62c1      	str	r1, [r0, #44]	; 0x2c
    826c:	491e      	ldr	r1, [pc, #120]	; (82e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    826e:	6101      	str	r1, [r0, #16]
    8270:	491e      	ldr	r1, [pc, #120]	; (82ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8272:	6141      	str	r1, [r0, #20]
    8274:	491e      	ldr	r1, [pc, #120]	; (82f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8276:	6441      	str	r1, [r0, #68]	; 0x44
    8278:	491e      	ldr	r1, [pc, #120]	; (82f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    827a:	6341      	str	r1, [r0, #52]	; 0x34
    827c:	491e      	ldr	r1, [pc, #120]	; (82f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    827e:	6181      	str	r1, [r0, #24]
    8280:	491e      	ldr	r1, [pc, #120]	; (82fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    8282:	6301      	str	r1, [r0, #48]	; 0x30
    8284:	491e      	ldr	r1, [pc, #120]	; (8300 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    8286:	6481      	str	r1, [r0, #72]	; 0x48
    8288:	491e      	ldr	r1, [pc, #120]	; (8304 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    828a:	64c1      	str	r1, [r0, #76]	; 0x4c
    828c:	491e      	ldr	r1, [pc, #120]	; (8308 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    828e:	6381      	str	r1, [r0, #56]	; 0x38
    8290:	4770      	bx	lr
    8292:	0000      	.short	0x0000
    8294:	00009969 	.word	0x00009969
    8298:	20000178 	.word	0x20000178
    829c:	0000935d 	.word	0x0000935d
    82a0:	000093c5 	.word	0x000093c5
    82a4:	0000f319 	.word	0x0000f319
    82a8:	0000f363 	.word	0x0000f363
    82ac:	00009481 	.word	0x00009481
    82b0:	0000f37b 	.word	0x0000f37b
    82b4:	00009a99 	.word	0x00009a99
    82b8:	00009539 	.word	0x00009539
    82bc:	0000f2eb 	.word	0x0000f2eb
    82c0:	0000f2c5 	.word	0x0000f2c5
    82c4:	00009909 	.word	0x00009909
    82c8:	00009939 	.word	0x00009939
    82cc:	000099a1 	.word	0x000099a1
    82d0:	00009545 	.word	0x00009545
    82d4:	0000f64d 	.word	0x0000f64d
    82d8:	20000224 	.word	0x20000224
    82dc:	00009ba9 	.word	0x00009ba9
    82e0:	0000f453 	.word	0x0000f453
    82e4:	0000f4eb 	.word	0x0000f4eb
    82e8:	0000f42d 	.word	0x0000f42d
    82ec:	0000f5ad 	.word	0x0000f5ad
    82f0:	0000f55b 	.word	0x0000f55b
    82f4:	0000f58b 	.word	0x0000f58b
    82f8:	0000f5cb 	.word	0x0000f5cb
    82fc:	0000f66f 	.word	0x0000f66f
    8300:	0000f4b1 	.word	0x0000f4b1
    8304:	0000f4db 	.word	0x0000f4db
    8308:	0000f5a9 	.word	0x0000f5a9

0000830c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    830c:	4806      	ldr	r0, [pc, #24]	; (8328 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    830e:	4905      	ldr	r1, [pc, #20]	; (8324 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8310:	6581      	str	r1, [r0, #88]	; 0x58
    8312:	4906      	ldr	r1, [pc, #24]	; (832c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8314:	6601      	str	r1, [r0, #96]	; 0x60
    8316:	4807      	ldr	r0, [pc, #28]	; (8334 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8318:	4905      	ldr	r1, [pc, #20]	; (8330 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    831a:	6581      	str	r1, [r0, #88]	; 0x58
    831c:	4906      	ldr	r1, [pc, #24]	; (8338 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    831e:	65c1      	str	r1, [r0, #92]	; 0x5c
    8320:	4770      	bx	lr
    8322:	0000      	.short	0x0000
    8324:	000096dd 	.word	0x000096dd
    8328:	20000178 	.word	0x20000178
    832c:	000097b9 	.word	0x000097b9
    8330:	0000f511 	.word	0x0000f511
    8334:	20000224 	.word	0x20000224
    8338:	0000f53b 	.word	0x0000f53b

0000833c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    833e:	4c7c      	ldr	r4, [pc, #496]	; (8530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    8340:	2101      	movs	r1, #1
    8342:	f1a4 0610 	sub.w	r6, r4, #16
    8346:	7021      	strb	r1, [r4, #0]
    8348:	2500      	movs	r5, #0
    834a:	6060      	str	r0, [r4, #4]
    834c:	8075      	strh	r5, [r6, #2]
    834e:	7075      	strb	r5, [r6, #1]
    8350:	7035      	strb	r5, [r6, #0]
    8352:	f880 121b 	strb.w	r1, [r0, #539]	; 0x21b
    8356:	8800      	ldrh	r0, [r0, #0]
    8358:	f7fc fd06 	bl	4d68 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    835c:	b180      	cbz	r0, 8380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    835e:	6860      	ldr	r0, [r4, #4]
    8360:	8800      	ldrh	r0, [r0, #0]
    8362:	f7fc ff6b 	bl	523c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8366:	6860      	ldr	r0, [r4, #4]
    8368:	8800      	ldrh	r0, [r0, #0]
    836a:	f7fc ff0f 	bl	518c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    836e:	6860      	ldr	r0, [r4, #4]
    8370:	f8b0 1212 	ldrh.w	r1, [r0, #530]	; 0x212
    8374:	b1c9      	cbz	r1, 83aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8376:	3080      	adds	r0, #128	; 0x80
    8378:	f006 ff5b 	bl	f232 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    837c:	b118      	cbz	r0, 8386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    837e:	e014      	b.n	83aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8380:	f640 41dc 	movw	r1, #3292	; 0xcdc
    8384:	e06c      	b.n	8460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    8386:	6860      	ldr	r0, [r4, #4]
    8388:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    838c:	f88d 1000 	strb.w	r1, [sp]
    8390:	9900      	ldr	r1, [sp, #0]
    8392:	9100      	str	r1, [sp, #0]
    8394:	f89d 1000 	ldrb.w	r1, [sp]
    8398:	b139      	cbz	r1, 83aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    839a:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    839e:	2301      	movs	r3, #1
    83a0:	4619      	mov	r1, r3
    83a2:	3080      	adds	r0, #128	; 0x80
    83a4:	f005 fab1 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83a8:	b180      	cbz	r0, 83cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    83aa:	6860      	ldr	r0, [r4, #4]
    83ac:	3080      	adds	r0, #128	; 0x80
    83ae:	f006 ff40 	bl	f232 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    83b2:	b128      	cbz	r0, 83c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    83b4:	6860      	ldr	r0, [r4, #4]
    83b6:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    83ba:	bf00      	nop
    83bc:	f000 fbbc 	bl	8b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fc>
    83c0:	6860      	ldr	r0, [r4, #4]
    83c2:	f890 121d 	ldrb.w	r1, [r0, #541]	; 0x21d
    83c6:	b189      	cbz	r1, 83ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    83c8:	80b5      	strh	r5, [r6, #4]
    83ca:	e01e      	b.n	840a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    83cc:	6860      	ldr	r0, [r4, #4]
    83ce:	f8a0 50c8 	strh.w	r5, [r0, #200]	; 0xc8
    83d2:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    83d6:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    83da:	2100      	movs	r1, #0
    83dc:	2002      	movs	r0, #2
    83de:	f000 fe69 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    83e2:	6860      	ldr	r0, [r4, #4]
    83e4:	f880 521a 	strb.w	r5, [r0, #538]	; 0x21a
    83e8:	2002      	movs	r0, #2
    83ea:	e7e7      	b.n	83bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    83ec:	f890 11c2 	ldrb.w	r1, [r0, #450]	; 0x1c2
    83f0:	f88d 1000 	strb.w	r1, [sp]
    83f4:	9900      	ldr	r1, [sp, #0]
    83f6:	9100      	str	r1, [sp, #0]
    83f8:	f89d 1000 	ldrb.w	r1, [sp]
    83fc:	b919      	cbnz	r1, 8406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    83fe:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    8400:	8b02      	ldrh	r2, [r0, #24]
    8402:	4291      	cmp	r1, r2
    8404:	d800      	bhi.n	8408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    8406:	8b01      	ldrh	r1, [r0, #24]
    8408:	80b1      	strh	r1, [r6, #4]
    840a:	f8b0 1216 	ldrh.w	r1, [r0, #534]	; 0x216
    840e:	1e49      	subs	r1, r1, #1
    8410:	b28f      	uxth	r7, r1
    8412:	f8b0 1218 	ldrh.w	r1, [r0, #536]	; 0x218
    8416:	4439      	add	r1, r7
    8418:	f8a0 1218 	strh.w	r1, [r0, #536]	; 0x218
    841c:	f830 1fc4 	ldrh.w	r1, [r0, #196]!
    8420:	4439      	add	r1, r7
    8422:	8001      	strh	r1, [r0, #0]
    8424:	f001 fbee 	bl	9c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    8428:	b120      	cbz	r0, 8434 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    842a:	6860      	ldr	r0, [r4, #4]
    842c:	f850 1fb8 	ldr.w	r1, [r0, #184]!
    8430:	4439      	add	r1, r7
    8432:	6001      	str	r1, [r0, #0]
    8434:	6861      	ldr	r1, [r4, #4]
    8436:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    843a:	2801      	cmp	r0, #1
    843c:	d802      	bhi.n	8444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    843e:	1c40      	adds	r0, r0, #1
    8440:	f8a1 0212 	strh.w	r0, [r1, #530]	; 0x212
    8444:	b10f      	cbz	r7, 844a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    8446:	f881 5224 	strb.w	r5, [r1, #548]	; 0x224
    844a:	f881 521a 	strb.w	r5, [r1, #538]	; 0x21a
    844e:	f8b1 2216 	ldrh.w	r2, [r1, #534]	; 0x216
    8452:	f101 0080 	add.w	r0, r1, #128	; 0x80
    8456:	f005 fbcf 	bl	dbf8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    845a:	b120      	cbz	r0, 8466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    845c:	f640 5123 	movw	r1, #3363	; 0xd23
    8460:	2031      	movs	r0, #49	; 0x31
    8462:	f7fc f873 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8466:	6860      	ldr	r0, [r4, #4]
    8468:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    846c:	290b      	cmp	r1, #11
    846e:	d001      	beq.n	8474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    8470:	290c      	cmp	r1, #12
    8472:	d119      	bne.n	84a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8474:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    8478:	f8b0 32bc 	ldrh.w	r3, [r0, #700]	; 0x2bc
    847c:	1ad2      	subs	r2, r2, r3
    847e:	b212      	sxth	r2, r2
    8480:	2a00      	cmp	r2, #0
    8482:	db11      	blt.n	84a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8484:	f8d0 12be 	ldr.w	r1, [r0, #702]	; 0x2be
    8488:	f8c0 109e 	str.w	r1, [r0, #158]	; 0x9e
    848c:	f890 12c2 	ldrb.w	r1, [r0, #706]	; 0x2c2
    8490:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    8494:	2103      	movs	r1, #3
    8496:	f7fd fe51 	bl	613c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    849a:	6860      	ldr	r0, [r4, #4]
    849c:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    84a0:	21ff      	movs	r1, #255	; 0xff
    84a2:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    84a6:	e026      	b.n	84f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84a8:	2926      	cmp	r1, #38	; 0x26
    84aa:	d111      	bne.n	84d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    84ac:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    84b0:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    84b4:	1a89      	subs	r1, r1, r2
    84b6:	b209      	sxth	r1, r1
    84b8:	2900      	cmp	r1, #0
    84ba:	db09      	blt.n	84d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    84bc:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    84c0:	f000 feb2 	bl	9228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    84c4:	2800      	cmp	r0, #0
    84c6:	6860      	ldr	r0, [r4, #4]
    84c8:	f880 5134 	strb.w	r5, [r0, #308]	; 0x134
    84cc:	d029      	beq.n	8522 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    84ce:	e012      	b.n	84f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84d0:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    84d4:	2926      	cmp	r1, #38	; 0x26
    84d6:	d001      	beq.n	84dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    84d8:	2928      	cmp	r1, #40	; 0x28
    84da:	d10c      	bne.n	84f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84dc:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    84e0:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    84e4:	1a89      	subs	r1, r1, r2
    84e6:	b209      	sxth	r1, r1
    84e8:	2900      	cmp	r1, #0
    84ea:	db04      	blt.n	84f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84ec:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    84f0:	f000 fe9a 	bl	9228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    84f4:	b1a8      	cbz	r0, 8522 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    84f6:	480f      	ldr	r0, [pc, #60]	; (8534 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    84f8:	9000      	str	r0, [sp, #0]
    84fa:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    84fe:	4b0e      	ldr	r3, [pc, #56]	; (8538 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8500:	4a0e      	ldr	r2, [pc, #56]	; (853c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8502:	f7fc ff27 	bl	5354 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8506:	6860      	ldr	r0, [r4, #4]
    8508:	2301      	movs	r3, #1
    850a:	2105      	movs	r1, #5
    850c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8510:	3080      	adds	r0, #128	; 0x80
    8512:	f005 f9fa 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8516:	2800      	cmp	r0, #0
    8518:	d009      	beq.n	852e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    851a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    851e:	f7fc bf13 	b.w	5348 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8526:	2100      	movs	r1, #0
    8528:	4608      	mov	r0, r1
    852a:	f000 bbd1 	b.w	8cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8530:	20000170 	.word	0x20000170
    8534:	00008cd1 	.word	0x00008cd1
    8538:	000087f5 	.word	0x000087f5
    853c:	00009175 	.word	0x00009175
    8540:	4804      	ldr	r0, [pc, #16]	; (8554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    8542:	2100      	movs	r1, #0
    8544:	6840      	ldr	r0, [r0, #4]
    8546:	f820 1fd0 	strh.w	r1, [r0, #208]!
    854a:	7881      	ldrb	r1, [r0, #2]
    854c:	1c49      	adds	r1, r1, #1
    854e:	7081      	strb	r1, [r0, #2]
    8550:	4770      	bx	lr
    8552:	0000      	.short	0x0000
    8554:	20000170 	.word	0x20000170
    8558:	4807      	ldr	r0, [pc, #28]	; (8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    855a:	b510      	push	{r4, lr}
    855c:	6841      	ldr	r1, [r0, #4]
    855e:	f811 0fd2 	ldrb.w	r0, [r1, #210]!
    8562:	1e40      	subs	r0, r0, #1
    8564:	b240      	sxtb	r0, r0
    8566:	7008      	strb	r0, [r1, #0]
    8568:	2800      	cmp	r0, #0
    856a:	da04      	bge.n	8576 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    856c:	f240 11f3 	movw	r1, #499	; 0x1f3
    8570:	2031      	movs	r0, #49	; 0x31
    8572:	f7fb ffeb 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8576:	bd10      	pop	{r4, pc}
    8578:	20000170 	.word	0x20000170
    857c:	491d      	ldr	r1, [pc, #116]	; (85f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    857e:	b508      	push	{r3, lr}
    8580:	6849      	ldr	r1, [r1, #4]
    8582:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    8586:	b1c0      	cbz	r0, 85ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    8588:	2a12      	cmp	r2, #18
    858a:	d006      	beq.n	859a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    858c:	2a16      	cmp	r2, #22
    858e:	d007      	beq.n	85a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    8590:	2a17      	cmp	r2, #23
    8592:	d009      	beq.n	85a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    8594:	2a1d      	cmp	r2, #29
    8596:	d128      	bne.n	85ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8598:	e009      	b.n	85ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    859a:	2101      	movs	r1, #1
    859c:	200b      	movs	r0, #11
    859e:	e008      	b.n	85b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    85a0:	4814      	ldr	r0, [pc, #80]	; (85f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    85a2:	f006 fefb 	bl	f39c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    85a6:	e006      	b.n	85b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    85a8:	f000 fda2 	bl	90f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb4>
    85ac:	e003      	b.n	85b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    85ae:	2101      	movs	r1, #1
    85b0:	2006      	movs	r0, #6
    85b2:	f000 fd7f 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    85b6:	2001      	movs	r0, #1
    85b8:	bd08      	pop	{r3, pc}
    85ba:	2a23      	cmp	r2, #35	; 0x23
    85bc:	d004      	beq.n	85c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    85be:	2a2f      	cmp	r2, #47	; 0x2f
    85c0:	d113      	bne.n	85ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    85c2:	2101      	movs	r1, #1
    85c4:	2011      	movs	r0, #17
    85c6:	e7f4      	b.n	85b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    85c8:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    85cc:	2802      	cmp	r0, #2
    85ce:	d00e      	beq.n	85ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    85d0:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    85d4:	2801      	cmp	r0, #1
    85d6:	d108      	bne.n	85ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    85d8:	f891 0135 	ldrb.w	r0, [r1, #309]	; 0x135
    85dc:	f88d 0000 	strb.w	r0, [sp]
    85e0:	9800      	ldr	r0, [sp, #0]
    85e2:	9000      	str	r0, [sp, #0]
    85e4:	f89d 0000 	ldrb.w	r0, [sp]
    85e8:	b108      	cbz	r0, 85ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    85ea:	2000      	movs	r0, #0
    85ec:	bd08      	pop	{r3, pc}
    85ee:	2101      	movs	r1, #1
    85f0:	2017      	movs	r0, #23
    85f2:	e7de      	b.n	85b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    85f4:	20000170 	.word	0x20000170
    85f8:	b538      	push	{r3, r4, r5, lr}
    85fa:	2800      	cmp	r0, #0
    85fc:	d172      	bne.n	86e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    85fe:	4c3a      	ldr	r4, [pc, #232]	; (86e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>)
    8600:	6860      	ldr	r0, [r4, #4]
    8602:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    8606:	07ca      	lsls	r2, r1, #31
    8608:	d002      	beq.n	8610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    860a:	2101      	movs	r1, #1
    860c:	2009      	movs	r0, #9
    860e:	e065      	b.n	86dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8610:	078a      	lsls	r2, r1, #30
    8612:	d50a      	bpl.n	862a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8614:	2101      	movs	r1, #1
    8616:	200c      	movs	r0, #12
    8618:	f000 fd4c 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    861c:	6860      	ldr	r0, [r4, #4]
    861e:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    8622:	f041 0101 	orr.w	r1, r1, #1
    8626:	7001      	strb	r1, [r0, #0]
    8628:	e05a      	b.n	86e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>
    862a:	074a      	lsls	r2, r1, #29
    862c:	d502      	bpl.n	8634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    862e:	2101      	movs	r1, #1
    8630:	2013      	movs	r0, #19
    8632:	e053      	b.n	86dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8634:	070a      	lsls	r2, r1, #28
    8636:	d506      	bpl.n	8646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    8638:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    863c:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8640:	2101      	movs	r1, #1
    8642:	2007      	movs	r0, #7
    8644:	e04a      	b.n	86dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8646:	f011 0f30 	tst.w	r1, #48	; 0x30
    864a:	d043      	beq.n	86d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    864c:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    8650:	f88d 1000 	strb.w	r1, [sp]
    8654:	9900      	ldr	r1, [sp, #0]
    8656:	9100      	str	r1, [sp, #0]
    8658:	f89d 1000 	ldrb.w	r1, [sp]
    865c:	bbb9      	cbnz	r1, 86ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x392>
    865e:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    8662:	2500      	movs	r5, #0
    8664:	f88d 1000 	strb.w	r1, [sp]
    8668:	9900      	ldr	r1, [sp, #0]
    866a:	9100      	str	r1, [sp, #0]
    866c:	f89d 1000 	ldrb.w	r1, [sp]
    8670:	b1c1      	cbz	r1, 86a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    8672:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8676:	2926      	cmp	r1, #38	; 0x26
    8678:	d02a      	beq.n	86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    867a:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    867e:	2926      	cmp	r1, #38	; 0x26
    8680:	d026      	beq.n	86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    8682:	2300      	movs	r3, #0
    8684:	f200 22be 	addw	r2, r0, #702	; 0x2be
    8688:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    868c:	f005 fd7a 	bl	e184 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8690:	6860      	ldr	r0, [r4, #4]
    8692:	f850 1f84 	ldr.w	r1, [r0, #132]!
    8696:	f021 0120 	bic.w	r1, r1, #32
    869a:	f041 0110 	orr.w	r1, r1, #16
    869e:	6001      	str	r1, [r0, #0]
    86a0:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    86a4:	6860      	ldr	r0, [r4, #4]
    86a6:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    86aa:	06c9      	lsls	r1, r1, #27
    86ac:	d51a      	bpl.n	86e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86ae:	f005 fd84 	bl	e1ba <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    86b2:	f000 f925 	bl	8900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    86b6:	6861      	ldr	r1, [r4, #4]
    86b8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    86bc:	8bc2      	ldrh	r2, [r0, #30]
    86be:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    86c2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    86c4:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    86c8:	2101      	movs	r1, #1
    86ca:	2015      	movs	r0, #21
    86cc:	e006      	b.n	86dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    86ce:	e009      	b.n	86e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86d0:	2301      	movs	r3, #1
    86d2:	e7d7      	b.n	8684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    86d4:	0648      	lsls	r0, r1, #25
    86d6:	d505      	bpl.n	86e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86d8:	2101      	movs	r1, #1
    86da:	2024      	movs	r0, #36	; 0x24
    86dc:	f000 fcea 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    86e0:	2001      	movs	r0, #1
    86e2:	bd38      	pop	{r3, r4, r5, pc}
    86e4:	2000      	movs	r0, #0
    86e6:	bd38      	pop	{r3, r4, r5, pc}
    86e8:	20000170 	.word	0x20000170
    86ec:	b570      	push	{r4, r5, r6, lr}
    86ee:	460d      	mov	r5, r1
    86f0:	4606      	mov	r6, r0
    86f2:	f005 fc04 	bl	defe <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    86f6:	4604      	mov	r4, r0
    86f8:	4630      	mov	r0, r6
    86fa:	f005 fc02 	bl	df02 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    86fe:	4629      	mov	r1, r5
    8700:	f000 f81e 	bl	8740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x404>
    8704:	b1b8      	cbz	r0, 8736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    8706:	4620      	mov	r0, r4
    8708:	f005 f9a9 	bl	da5e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    870c:	0001      	movs	r1, r0
    870e:	d00d      	beq.n	872c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    8710:	480a      	ldr	r0, [pc, #40]	; (873c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x400>)
    8712:	6840      	ldr	r0, [r0, #4]
    8714:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8718:	428a      	cmp	r2, r1
    871a:	d007      	beq.n	872c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    871c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8720:	2901      	cmp	r1, #1
    8722:	d005      	beq.n	8730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    8724:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8728:	4220      	tst	r0, r4
    872a:	d004      	beq.n	8736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    872c:	2001      	movs	r0, #1
    872e:	bd70      	pop	{r4, r5, r6, pc}
    8730:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
    8734:	e7f8      	b.n	8728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8736:	2000      	movs	r0, #0
    8738:	bd70      	pop	{r4, r5, r6, pc}
    873a:	0000      	.short	0x0000
    873c:	20000170 	.word	0x20000170
    8740:	b570      	push	{r4, r5, r6, lr}
    8742:	460d      	mov	r5, r1
    8744:	4604      	mov	r4, r0
    8746:	f005 f98a 	bl	da5e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    874a:	b350      	cbz	r0, 87a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    874c:	4916      	ldr	r1, [pc, #88]	; (87a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46c>)
    874e:	6849      	ldr	r1, [r1, #4]
    8750:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    8754:	4282      	cmp	r2, r0
    8756:	d024      	beq.n	87a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8758:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
    875c:	2b01      	cmp	r3, #1
    875e:	d005      	beq.n	876c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    8760:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    8764:	4223      	tst	r3, r4
    8766:	d013      	beq.n	8790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    8768:	b11d      	cbz	r5, 8772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x436>
    876a:	e01a      	b.n	87a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    876c:	f891 3136 	ldrb.w	r3, [r1, #310]	; 0x136
    8770:	e7f8      	b.n	8764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    8772:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    8776:	4221      	tst	r1, r4
    8778:	d113      	bne.n	87a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    877a:	b15a      	cbz	r2, 8794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    877c:	2a04      	cmp	r2, #4
    877e:	d00e      	beq.n	879e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8780:	2804      	cmp	r0, #4
    8782:	d00c      	beq.n	879e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8784:	2a08      	cmp	r2, #8
    8786:	d00a      	beq.n	879e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8788:	2808      	cmp	r0, #8
    878a:	d008      	beq.n	879e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    878c:	4282      	cmp	r2, r0
    878e:	d908      	bls.n	87a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8790:	2000      	movs	r0, #0
    8792:	bd70      	pop	{r4, r5, r6, pc}
    8794:	f240 1193 	movw	r1, #403	; 0x193
    8798:	2006      	movs	r0, #6
    879a:	f7fb fed7 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    879e:	4282      	cmp	r2, r0
    87a0:	d3f6      	bcc.n	8790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    87a2:	2001      	movs	r0, #1
    87a4:	bd70      	pop	{r4, r5, r6, pc}
    87a6:	0000      	.short	0x0000
    87a8:	20000170 	.word	0x20000170
    87ac:	b510      	push	{r4, lr}
    87ae:	4c10      	ldr	r4, [pc, #64]	; (87f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b4>)
    87b0:	2301      	movs	r3, #1
    87b2:	2100      	movs	r1, #0
    87b4:	6860      	ldr	r0, [r4, #4]
    87b6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    87ba:	3080      	adds	r0, #128	; 0x80
    87bc:	f005 f8a5 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87c0:	b140      	cbz	r0, 87d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x498>
    87c2:	6860      	ldr	r0, [r4, #4]
    87c4:	2301      	movs	r3, #1
    87c6:	2104      	movs	r1, #4
    87c8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    87cc:	3080      	adds	r0, #128	; 0x80
    87ce:	f005 f89c 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87d2:	b108      	cbz	r0, 87d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>
    87d4:	2000      	movs	r0, #0
    87d6:	bd10      	pop	{r4, pc}
    87d8:	6860      	ldr	r0, [r4, #4]
    87da:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    87de:	2800      	cmp	r0, #0
    87e0:	d0f9      	beq.n	87d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    87e2:	2100      	movs	r1, #0
    87e4:	2012      	movs	r0, #18
    87e6:	f000 fc65 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    87ea:	2001      	movs	r0, #1
    87ec:	bd10      	pop	{r4, pc}
    87ee:	0000      	.short	0x0000
    87f0:	20000170 	.word	0x20000170
    87f4:	490d      	ldr	r1, [pc, #52]	; (882c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f0>)
    87f6:	4602      	mov	r2, r0
    87f8:	7848      	ldrb	r0, [r1, #1]
    87fa:	b9a0      	cbnz	r0, 8826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    87fc:	f101 0010 	add.w	r0, r1, #16
    8800:	6840      	ldr	r0, [r0, #4]
    8802:	b142      	cbz	r2, 8816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4da>
    8804:	7889      	ldrb	r1, [r1, #2]
    8806:	0709      	lsls	r1, r1, #28
    8808:	d503      	bpl.n	8812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d6>
    880a:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    880e:	2808      	cmp	r0, #8
    8810:	d009      	beq.n	8826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8812:	2001      	movs	r0, #1
    8814:	4770      	bx	lr
    8816:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    881a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    881c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    881e:	428a      	cmp	r2, r1
    8820:	d801      	bhi.n	8826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8822:	f7ff b92d 	b.w	7a80 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8826:	2000      	movs	r0, #0
    8828:	4770      	bx	lr
    882a:	0000      	.short	0x0000
    882c:	20000160 	.word	0x20000160
    8830:	b538      	push	{r3, r4, r5, lr}
    8832:	4c32      	ldr	r4, [pc, #200]	; (88fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c0>)
    8834:	4605      	mov	r5, r0
    8836:	6860      	ldr	r0, [r4, #4]
    8838:	3080      	adds	r0, #128	; 0x80
    883a:	f006 fcfa 	bl	f232 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    883e:	2800      	cmp	r0, #0
    8840:	d15b      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8842:	2d00      	cmp	r5, #0
    8844:	d159      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8846:	6860      	ldr	r0, [r4, #4]
    8848:	2301      	movs	r3, #1
    884a:	4619      	mov	r1, r3
    884c:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8850:	3080      	adds	r0, #128	; 0x80
    8852:	f005 f85a 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8856:	2800      	cmp	r0, #0
    8858:	d14f      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    885a:	6860      	ldr	r0, [r4, #4]
    885c:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    8860:	f88d 1000 	strb.w	r1, [sp]
    8864:	9900      	ldr	r1, [sp, #0]
    8866:	9100      	str	r1, [sp, #0]
    8868:	f89d 2000 	ldrb.w	r2, [sp]
    886c:	2100      	movs	r1, #0
    886e:	b142      	cbz	r2, 8882 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x546>
    8870:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
    8874:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    8878:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    887c:	2100      	movs	r1, #0
    887e:	2002      	movs	r0, #2
    8880:	e030      	b.n	88e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    8882:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8886:	2301      	movs	r3, #1
    8888:	2104      	movs	r1, #4
    888a:	3080      	adds	r0, #128	; 0x80
    888c:	f005 f83d 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8890:	4605      	mov	r5, r0
    8892:	f7ff feb1 	bl	85f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8896:	2800      	cmp	r0, #0
    8898:	d12f      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    889a:	4628      	mov	r0, r5
    889c:	f7ff fe6e 	bl	857c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    88a0:	2800      	cmp	r0, #0
    88a2:	d12a      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88a4:	f7ff ff82 	bl	87ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    88a8:	2800      	cmp	r0, #0
    88aa:	d126      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88ac:	6860      	ldr	r0, [r4, #4]
    88ae:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    88b2:	290a      	cmp	r1, #10
    88b4:	d01a      	beq.n	88ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    88b6:	2d00      	cmp	r5, #0
    88b8:	d11f      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88ba:	f000 fb27 	bl	8f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd0>
    88be:	2800      	cmp	r0, #0
    88c0:	d11b      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88c2:	6860      	ldr	r0, [r4, #4]
    88c4:	2301      	movs	r3, #1
    88c6:	2100      	movs	r1, #0
    88c8:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    88cc:	3080      	adds	r0, #128	; 0x80
    88ce:	f005 f81c 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88d2:	2800      	cmp	r0, #0
    88d4:	d011      	beq.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88d6:	6860      	ldr	r0, [r4, #4]
    88d8:	f890 02b4 	ldrb.w	r0, [r0, #692]	; 0x2b4
    88dc:	2800      	cmp	r0, #0
    88de:	d00c      	beq.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88e0:	2100      	movs	r1, #0
    88e2:	20ff      	movs	r0, #255	; 0xff
    88e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    88e8:	f000 bbe4 	b.w	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    88ec:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    88f0:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    88f4:	2100      	movs	r1, #0
    88f6:	2007      	movs	r0, #7
    88f8:	e7f4      	b.n	88e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    88fa:	bd38      	pop	{r3, r4, r5, pc}
    88fc:	20000170 	.word	0x20000170
    8900:	4808      	ldr	r0, [pc, #32]	; (8924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>)
    8902:	6843      	ldr	r3, [r0, #4]
    8904:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    8908:	2801      	cmp	r0, #1
    890a:	d006      	beq.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5de>
    890c:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    8910:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    8914:	8818      	ldrh	r0, [r3, #0]
    8916:	f005 bc0d 	b.w	e134 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    891a:	2002      	movs	r0, #2
    891c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    8920:	4770      	bx	lr
    8922:	0000      	.short	0x0000
    8924:	20000170 	.word	0x20000170
    8928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    892a:	4d2b      	ldr	r5, [pc, #172]	; (89d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    892c:	0006      	movs	r6, r0
    892e:	f105 0410 	add.w	r4, r5, #16
    8932:	d133      	bne.n	899c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8934:	f000 f8b6 	bl	8aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x768>
    8938:	f000 f852 	bl	89e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    893c:	0006      	movs	r6, r0
    893e:	d12d      	bne.n	899c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8940:	8869      	ldrh	r1, [r5, #2]
    8942:	0748      	lsls	r0, r1, #29
    8944:	d506      	bpl.n	8954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    8946:	6860      	ldr	r0, [r4, #4]
    8948:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    894c:	2807      	cmp	r0, #7
    894e:	d101      	bne.n	8954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    8950:	2001      	movs	r0, #1
    8952:	7028      	strb	r0, [r5, #0]
    8954:	0788      	lsls	r0, r1, #30
    8956:	d516      	bpl.n	8986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8958:	68a8      	ldr	r0, [r5, #8]
    895a:	78c0      	ldrb	r0, [r0, #3]
    895c:	282b      	cmp	r0, #43	; 0x2b
    895e:	d207      	bcs.n	8970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8960:	491e      	ldr	r1, [pc, #120]	; (89dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    8962:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8966:	b119      	cbz	r1, 8970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8968:	481b      	ldr	r0, [pc, #108]	; (89d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    896a:	3010      	adds	r0, #16
    896c:	4788      	blx	r1
    896e:	e00a      	b.n	8986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8970:	28ff      	cmp	r0, #255	; 0xff
    8972:	d004      	beq.n	897e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x642>
    8974:	f640 01c1 	movw	r1, #2241	; 0x8c1
    8978:	2031      	movs	r0, #49	; 0x31
    897a:	f7fb fde7 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    897e:	4816      	ldr	r0, [pc, #88]	; (89d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    8980:	3010      	adds	r0, #16
    8982:	f006 fd4a 	bl	f41a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    8986:	78a8      	ldrb	r0, [r5, #2]
    8988:	06c0      	lsls	r0, r0, #27
    898a:	d507      	bpl.n	899c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    898c:	6860      	ldr	r0, [r4, #4]
    898e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8992:	290b      	cmp	r1, #11
    8994:	d102      	bne.n	899c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8996:	210c      	movs	r1, #12
    8998:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    899c:	7868      	ldrb	r0, [r5, #1]
    899e:	0700      	lsls	r0, r0, #28
    89a0:	d518      	bpl.n	89d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89a2:	6860      	ldr	r0, [r4, #4]
    89a4:	2301      	movs	r3, #1
    89a6:	2105      	movs	r1, #5
    89a8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    89ac:	3080      	adds	r0, #128	; 0x80
    89ae:	f004 ffac 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89b2:	b108      	cbz	r0, 89b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67c>
    89b4:	2608      	movs	r6, #8
    89b6:	e00d      	b.n	89d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89b8:	2500      	movs	r5, #0
    89ba:	4669      	mov	r1, sp
    89bc:	4628      	mov	r0, r5
    89be:	9500      	str	r5, [sp, #0]
    89c0:	f7fc fd8e 	bl	54e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    89c4:	9800      	ldr	r0, [sp, #0]
    89c6:	b128      	cbz	r0, 89d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89c8:	7205      	strb	r5, [r0, #8]
    89ca:	2227      	movs	r2, #39	; 0x27
    89cc:	6861      	ldr	r1, [r4, #4]
    89ce:	9800      	ldr	r0, [sp, #0]
    89d0:	f7fd fd2e 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    89d4:	4630      	mov	r0, r6
    89d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89d8:	20000160 	.word	0x20000160
    89dc:	20000224 	.word	0x20000224
    89e0:	b570      	push	{r4, r5, r6, lr}
    89e2:	4d2e      	ldr	r5, [pc, #184]	; (8a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    89e4:	2000      	movs	r0, #0
    89e6:	78a9      	ldrb	r1, [r5, #2]
    89e8:	07c9      	lsls	r1, r1, #31
    89ea:	d017      	beq.n	8a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e0>
    89ec:	68e8      	ldr	r0, [r5, #12]
    89ee:	f105 0410 	add.w	r4, r5, #16
    89f2:	2301      	movs	r3, #1
    89f4:	78c6      	ldrb	r6, [r0, #3]
    89f6:	6860      	ldr	r0, [r4, #4]
    89f8:	2105      	movs	r1, #5
    89fa:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    89fe:	3080      	adds	r0, #128	; 0x80
    8a00:	f004 ff83 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a04:	b158      	cbz	r0, 8a1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    8a06:	1eb6      	subs	r6, r6, #2
    8a08:	2e0a      	cmp	r6, #10
    8a0a:	d206      	bcs.n	8a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    8a0c:	e8df f006 	tbb	[pc, r6]
    8a10:	05050707 	.word	0x05050707
    8a14:	05050707 	.word	0x05050707
    8a18:	0707      	.short	0x0707
    8a1a:	2008      	movs	r0, #8
    8a1c:	bd70      	pop	{r4, r5, r6, pc}
    8a1e:	68e8      	ldr	r0, [r5, #12]
    8a20:	f7fd fc6c 	bl	62fc <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    8a24:	b138      	cbz	r0, 8a36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    8a26:	68e8      	ldr	r0, [r5, #12]
    8a28:	78c5      	ldrb	r5, [r0, #3]
    8a2a:	b155      	cbz	r5, 8a42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a2c:	2d01      	cmp	r5, #1
    8a2e:	d008      	beq.n	8a42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a30:	2d16      	cmp	r5, #22
    8a32:	d11a      	bne.n	8a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a34:	e005      	b.n	8a42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a3a:	4818      	ldr	r0, [pc, #96]	; (8a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a3c:	3010      	adds	r0, #16
    8a3e:	f000 bd87 	b.w	9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    8a42:	6860      	ldr	r0, [r4, #4]
    8a44:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    8a48:	f004 ffb7 	bl	d9ba <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8a4c:	b168      	cbz	r0, 8a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a4e:	6860      	ldr	r0, [r4, #4]
    8a50:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8a54:	2921      	cmp	r1, #33	; 0x21
    8a56:	d008      	beq.n	8a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a58:	2922      	cmp	r1, #34	; 0x22
    8a5a:	d003      	beq.n	8a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    8a5c:	2d16      	cmp	r5, #22
    8a5e:	d00e      	beq.n	8a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    8a60:	2002      	movs	r0, #2
    8a62:	bd70      	pop	{r4, r5, r6, pc}
    8a64:	212e      	movs	r1, #46	; 0x2e
    8a66:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8a6a:	2d2b      	cmp	r5, #43	; 0x2b
    8a6c:	d209      	bcs.n	8a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8a6e:	480c      	ldr	r0, [pc, #48]	; (8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>)
    8a70:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    8a74:	b129      	cbz	r1, 8a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8a76:	4809      	ldr	r0, [pc, #36]	; (8a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a78:	3010      	adds	r0, #16
    8a7a:	4788      	blx	r1
    8a7c:	e005      	b.n	8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74e>
    8a7e:	2020      	movs	r0, #32
    8a80:	bd70      	pop	{r4, r5, r6, pc}
    8a82:	4806      	ldr	r0, [pc, #24]	; (8a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a84:	3010      	adds	r0, #16
    8a86:	f000 fd63 	bl	9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    8a8a:	6862      	ldr	r2, [r4, #4]
    8a8c:	e9f2 133e 	ldrd	r1, r3, [r2, #248]!	; 0xf8
    8a90:	1c49      	adds	r1, r1, #1
    8a92:	f143 0300 	adc.w	r3, r3, #0
    8a96:	e9c2 1300 	strd	r1, r3, [r2]
    8a9a:	bd70      	pop	{r4, r5, r6, pc}
    8a9c:	20000160 	.word	0x20000160
    8aa0:	20000178 	.word	0x20000178
    8aa4:	b570      	push	{r4, r5, r6, lr}
    8aa6:	4e23      	ldr	r6, [pc, #140]	; (8b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f8>)
    8aa8:	78b0      	ldrb	r0, [r6, #2]
    8aaa:	0700      	lsls	r0, r0, #28
    8aac:	d540      	bpl.n	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    8aae:	f106 0410 	add.w	r4, r6, #16
    8ab2:	6860      	ldr	r0, [r4, #4]
    8ab4:	3080      	adds	r0, #128	; 0x80
    8ab6:	f006 fbbc 	bl	f232 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8aba:	b148      	cbz	r0, 8ad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x794>
    8abc:	6860      	ldr	r0, [r4, #4]
    8abe:	21fe      	movs	r1, #254	; 0xfe
    8ac0:	2500      	movs	r5, #0
    8ac2:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    8ac6:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8aca:	291b      	cmp	r1, #27
    8acc:	d10c      	bne.n	8ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    8ace:	e004      	b.n	8ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79e>
    8ad0:	f640 01cd 	movw	r1, #2253	; 0x8cd
    8ad4:	2031      	movs	r0, #49	; 0x31
    8ad6:	f7fb fd39 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ada:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    8ade:	f7ff fd3b 	bl	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8ae2:	6860      	ldr	r0, [r4, #4]
    8ae4:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    8ae8:	6860      	ldr	r0, [r4, #4]
    8aea:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8aee:	2921      	cmp	r1, #33	; 0x21
    8af0:	d002      	beq.n	8af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    8af2:	2930      	cmp	r1, #48	; 0x30
    8af4:	d113      	bne.n	8b1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    8af6:	e00b      	b.n	8b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d4>
    8af8:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    8afc:	f004 ff5d 	bl	d9ba <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8b00:	b108      	cbz	r0, 8b06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ca>
    8b02:	202e      	movs	r0, #46	; 0x2e
    8b04:	e000      	b.n	8b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7cc>
    8b06:	2022      	movs	r0, #34	; 0x22
    8b08:	6861      	ldr	r1, [r4, #4]
    8b0a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    8b0e:	e006      	b.n	8b1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    8b10:	2101      	movs	r1, #1
    8b12:	f880 12b5 	strb.w	r1, [r0, #693]	; 0x2b5
    8b16:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    8b1a:	f880 50ce 	strb.w	r5, [r0, #206]	; 0xce
    8b1e:	6860      	ldr	r0, [r4, #4]
    8b20:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    8b24:	2908      	cmp	r1, #8
    8b26:	d103      	bne.n	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    8b28:	2102      	movs	r1, #2
    8b2a:	7031      	strb	r1, [r6, #0]
    8b2c:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    8b30:	bd70      	pop	{r4, r5, r6, pc}
    8b32:	0000      	.short	0x0000
    8b34:	20000160 	.word	0x20000160
    8b38:	b538      	push	{r3, r4, r5, lr}
    8b3a:	4605      	mov	r5, r0
    8b3c:	4668      	mov	r0, sp
    8b3e:	f7fc fb67 	bl	5210 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8b42:	b308      	cbz	r0, 8b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84c>
    8b44:	2222      	movs	r2, #34	; 0x22
    8b46:	2100      	movs	r1, #0
    8b48:	9800      	ldr	r0, [sp, #0]
    8b4a:	f003 fd10 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8b4e:	2103      	movs	r1, #3
    8b50:	9800      	ldr	r0, [sp, #0]
    8b52:	f005 f9ee 	bl	df32 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    8b56:	9800      	ldr	r0, [sp, #0]
    8b58:	7801      	ldrb	r1, [r0, #0]
    8b5a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    8b5e:	7001      	strb	r1, [r0, #0]
    8b60:	4629      	mov	r1, r5
    8b62:	f7fd fbdb 	bl	631c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    8b66:	4c59      	ldr	r4, [pc, #356]	; (8ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8b68:	2d11      	cmp	r5, #17
    8b6a:	d02d      	beq.n	8bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88c>
    8b6c:	dc0f      	bgt.n	8b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x852>
    8b6e:	f1a5 0502 	sub.w	r5, r5, #2
    8b72:	2d0d      	cmp	r5, #13
    8b74:	d21f      	bcs.n	8bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    8b76:	e8df f005 	tbb	[pc, r5]
    8b7a:	1e21      	.short	0x1e21
    8b7c:	219e9e51 	.word	0x219e9e51
    8b80:	9e1e5e1e 	.word	0x9e1e5e1e
    8b84:	008c343a 	.word	0x008c343a
    8b88:	f640 314c 	movw	r1, #2892	; 0xb4c
    8b8c:	e099      	b.n	8cc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    8b8e:	2d17      	cmp	r5, #23
    8b90:	d070      	beq.n	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    8b92:	dc08      	bgt.n	8ba6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    8b94:	f1a5 0512 	sub.w	r5, r5, #18
    8b98:	2d05      	cmp	r5, #5
    8b9a:	d20c      	bcs.n	8bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    8b9c:	e8df f005 	tbb	[pc, r5]
    8ba0:	50508b8b 	.word	0x50508b8b
    8ba4:	0033      	.short	0x0033
    8ba6:	2d23      	cmp	r5, #35	; 0x23
    8ba8:	d077      	beq.n	8c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8baa:	2d24      	cmp	r5, #36	; 0x24
    8bac:	d075      	beq.n	8c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8bae:	2d25      	cmp	r5, #37	; 0x25
    8bb0:	d073      	beq.n	8c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8bb2:	2dff      	cmp	r5, #255	; 0xff
    8bb4:	d077      	beq.n	8ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    8bb6:	f640 31e3 	movw	r1, #3043	; 0xbe3
    8bba:	e082      	b.n	8cc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    8bbc:	6860      	ldr	r0, [r4, #4]
    8bbe:	9900      	ldr	r1, [sp, #0]
    8bc0:	f890 011e 	ldrb.w	r0, [r0, #286]	; 0x11e
    8bc4:	7108      	strb	r0, [r1, #4]
    8bc6:	e076      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8bc8:	6860      	ldr	r0, [r4, #4]
    8bca:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    8bce:	9800      	ldr	r0, [sp, #0]
    8bd0:	f005 f99b 	bl	df0a <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    8bd4:	6860      	ldr	r0, [r4, #4]
    8bd6:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    8bda:	9800      	ldr	r0, [sp, #0]
    8bdc:	f005 f999 	bl	df12 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    8be0:	e069      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8be2:	6861      	ldr	r1, [r4, #4]
    8be4:	9800      	ldr	r0, [sp, #0]
    8be6:	f891 111a 	ldrb.w	r1, [r1, #282]	; 0x11a
    8bea:	7101      	strb	r1, [r0, #4]
    8bec:	e063      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8bee:	9800      	ldr	r0, [sp, #0]
    8bf0:	210c      	movs	r1, #12
    8bf2:	7101      	strb	r1, [r0, #4]
    8bf4:	2159      	movs	r1, #89	; 0x59
    8bf6:	7141      	strb	r1, [r0, #5]
    8bf8:	2100      	movs	r1, #0
    8bfa:	7181      	strb	r1, [r0, #6]
    8bfc:	21fa      	movs	r1, #250	; 0xfa
    8bfe:	71c1      	strb	r1, [r0, #7]
    8c00:	2111      	movs	r1, #17
    8c02:	7201      	strb	r1, [r0, #8]
    8c04:	e057      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c06:	9800      	ldr	r0, [sp, #0]
    8c08:	f8d4 1004 	ldr.w	r1, [r4, #4]
    8c0c:	f891 1136 	ldrb.w	r1, [r1, #310]	; 0x136
    8c10:	7101      	strb	r1, [r0, #4]
    8c12:	6861      	ldr	r1, [r4, #4]
    8c14:	f891 1137 	ldrb.w	r1, [r1, #311]	; 0x137
    8c18:	7141      	strb	r1, [r0, #5]
    8c1a:	e04c      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c1c:	6861      	ldr	r1, [r4, #4]
    8c1e:	9800      	ldr	r0, [sp, #0]
    8c20:	f501 710c 	add.w	r1, r1, #560	; 0x230
    8c24:	f005 f92c 	bl	de80 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    8c28:	6861      	ldr	r1, [r4, #4]
    8c2a:	9800      	ldr	r0, [sp, #0]
    8c2c:	f501 718a 	add.w	r1, r1, #276	; 0x114
    8c30:	f005 f923 	bl	de7a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    8c34:	e03f      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c36:	4825      	ldr	r0, [pc, #148]	; (8ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8c38:	9900      	ldr	r1, [sp, #0]
    8c3a:	f7fd ff1f 	bl	6a7c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    8c3e:	e03a      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c40:	6860      	ldr	r0, [r4, #4]
    8c42:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    8c46:	9800      	ldr	r0, [sp, #0]
    8c48:	f005 f97b 	bl	df42 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    8c4c:	6860      	ldr	r0, [r4, #4]
    8c4e:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    8c52:	9800      	ldr	r0, [sp, #0]
    8c54:	f005 f979 	bl	df4a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    8c58:	6860      	ldr	r0, [r4, #4]
    8c5a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8c5e:	9800      	ldr	r0, [sp, #0]
    8c60:	f005 f977 	bl	df52 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    8c64:	6860      	ldr	r0, [r4, #4]
    8c66:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    8c6a:	9800      	ldr	r0, [sp, #0]
    8c6c:	f005 f975 	bl	df5a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    8c70:	e021      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c72:	e7ff      	b.n	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    8c74:	6861      	ldr	r1, [r4, #4]
    8c76:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    8c7a:	2801      	cmp	r0, #1
    8c7c:	9800      	ldr	r0, [sp, #0]
    8c7e:	d0c5      	beq.n	8c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d0>
    8c80:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    8c84:	7101      	strb	r1, [r0, #4]
    8c86:	6861      	ldr	r1, [r4, #4]
    8c88:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    8c8c:	e7c4      	b.n	8c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8dc>
    8c8e:	e004      	b.n	8c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8c90:	e009      	b.n	8ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    8c92:	9800      	ldr	r0, [sp, #0]
    8c94:	f7fd feac 	bl	69f0 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    8c98:	e00d      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c9a:	4a0c      	ldr	r2, [pc, #48]	; (8ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8c9c:	4628      	mov	r0, r5
    8c9e:	9900      	ldr	r1, [sp, #0]
    8ca0:	f006 fd12 	bl	f6c8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    8ca4:	e007      	b.n	8cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8ca6:	6860      	ldr	r0, [r4, #4]
    8ca8:	f890 22b7 	ldrb.w	r2, [r0, #695]	; 0x2b7
    8cac:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
    8cb0:	9800      	ldr	r0, [sp, #0]
    8cb2:	f005 f930 	bl	df16 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    8cb6:	f7fc fa85 	bl	51c4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8cba:	2800      	cmp	r0, #0
    8cbc:	d104      	bne.n	8cc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98c>
    8cbe:	f640 31e7 	movw	r1, #3047	; 0xbe7
    8cc2:	2031      	movs	r0, #49	; 0x31
    8cc4:	f7fb fc42 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cc8:	bd38      	pop	{r3, r4, r5, pc}
    8cca:	0000      	.short	0x0000
    8ccc:	20000170 	.word	0x20000170
    8cd0:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8cd4:	4e8c      	ldr	r6, [pc, #560]	; (8f08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbcc>)
    8cd6:	468a      	mov	sl, r1
    8cd8:	6870      	ldr	r0, [r6, #4]
    8cda:	8800      	ldrh	r0, [r0, #0]
    8cdc:	f7fc f844 	bl	4d68 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8ce0:	0007      	movs	r7, r0
    8ce2:	d00c      	beq.n	8cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c2>
    8ce4:	f1a6 0510 	sub.w	r5, r6, #16
    8ce8:	f04f 0400 	mov.w	r4, #0
    8cec:	8868      	ldrh	r0, [r5, #2]
    8cee:	05c0      	lsls	r0, r0, #23
    8cf0:	d50a      	bpl.n	8d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9cc>
    8cf2:	6870      	ldr	r0, [r6, #4]
    8cf4:	f8a0 40c4 	strh.w	r4, [r0, #196]	; 0xc4
    8cf8:	f880 4224 	strb.w	r4, [r0, #548]	; 0x224
    8cfc:	e009      	b.n	8d12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d6>
    8cfe:	f640 61d2 	movw	r1, #3794	; 0xed2
    8d02:	2031      	movs	r0, #49	; 0x31
    8d04:	f7fb fc22 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d08:	6871      	ldr	r1, [r6, #4]
    8d0a:	f831 0fc4 	ldrh.w	r0, [r1, #196]!
    8d0e:	1c40      	adds	r0, r0, #1
    8d10:	8008      	strh	r0, [r1, #0]
    8d12:	f000 ff77 	bl	9c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    8d16:	f04f 0901 	mov.w	r9, #1
    8d1a:	b338      	cbz	r0, 8d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d1c:	8868      	ldrh	r0, [r5, #2]
    8d1e:	0500      	lsls	r0, r0, #20
    8d20:	d506      	bpl.n	8d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8d22:	6870      	ldr	r0, [r6, #4]
    8d24:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    8d28:	b111      	cbz	r1, 8d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8d2a:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
    8d2e:	e01d      	b.n	8d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d30:	6871      	ldr	r1, [r6, #4]
    8d32:	f8d1 00b8 	ldr.w	r0, [r1, #184]	; 0xb8
    8d36:	1c40      	adds	r0, r0, #1
    8d38:	f8c1 00b8 	str.w	r0, [r1, #184]	; 0xb8
    8d3c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    8d40:	4282      	cmp	r2, r0
    8d42:	d301      	bcc.n	8d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0c>
    8d44:	1a13      	subs	r3, r2, r0
    8d46:	e000      	b.n	8d4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8d48:	2300      	movs	r3, #0
    8d4a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    8d4e:	f10c 0c05 	add.w	ip, ip, #5
    8d52:	4563      	cmp	r3, ip
    8d54:	d801      	bhi.n	8d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    8d56:	f881 90c2 	strb.w	r9, [r1, #194]	; 0xc2
    8d5a:	4290      	cmp	r0, r2
    8d5c:	d306      	bcc.n	8d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d5e:	f501 70a9 	add.w	r0, r1, #338	; 0x152
    8d62:	220e      	movs	r2, #14
    8d64:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
    8d68:	f7fd fb62 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8d6c:	8868      	ldrh	r0, [r5, #2]
    8d6e:	f04f 0b02 	mov.w	fp, #2
    8d72:	f410 7f40 	tst.w	r0, #768	; 0x300
    8d76:	d00e      	beq.n	8d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    8d78:	6870      	ldr	r0, [r6, #4]
    8d7a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8d7e:	b111      	cbz	r1, 8d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    8d80:	2903      	cmp	r1, #3
    8d82:	d108      	bne.n	8d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    8d84:	e002      	b.n	8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    8d86:	f880 9099 	strb.w	r9, [r0, #153]	; 0x99
    8d8a:	e001      	b.n	8d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    8d8c:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    8d90:	2101      	movs	r1, #1
    8d92:	f7fe fe9b 	bl	7acc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8d96:	6870      	ldr	r0, [r6, #4]
    8d98:	46b0      	mov	r8, r6
    8d9a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8d9e:	2901      	cmp	r1, #1
    8da0:	d104      	bne.n	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    8da2:	8869      	ldrh	r1, [r5, #2]
    8da4:	0549      	lsls	r1, r1, #21
    8da6:	d501      	bpl.n	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    8da8:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    8dac:	9900      	ldr	r1, [sp, #0]
    8dae:	2900      	cmp	r1, #0
    8db0:	d179      	bne.n	8ea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    8db2:	78a9      	ldrb	r1, [r5, #2]
    8db4:	0649      	lsls	r1, r1, #25
    8db6:	d502      	bpl.n	8dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    8db8:	f8a0 4238 	strh.w	r4, [r0, #568]	; 0x238
    8dbc:	e004      	b.n	8dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8c>
    8dbe:	f8b0 1238 	ldrh.w	r1, [r0, #568]	; 0x238
    8dc2:	1c49      	adds	r1, r1, #1
    8dc4:	f8a0 1238 	strh.w	r1, [r0, #568]	; 0x238
    8dc8:	4650      	mov	r0, sl
    8dca:	f7ff fdad 	bl	8928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    8dce:	ea40 000a 	orr.w	r0, r0, sl
    8dd2:	4682      	mov	sl, r0
    8dd4:	f7ff fd2c 	bl	8830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f4>
    8dd8:	f8d8 6004 	ldr.w	r6, [r8, #4]
    8ddc:	f8b6 0218 	ldrh.w	r0, [r6, #536]	; 0x218
    8de0:	1c40      	adds	r0, r0, #1
    8de2:	f8a6 0218 	strh.w	r0, [r6, #536]	; 0x218
    8de6:	f896 021c 	ldrb.w	r0, [r6, #540]	; 0x21c
    8dea:	b128      	cbz	r0, 8df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xabc>
    8dec:	f7fc fbd8 	bl	55a0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8df0:	b1b0      	cbz	r0, 8e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8df2:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8df6:	e013      	b.n	8e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8df8:	f7fc fa8c 	bl	5314 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8dfc:	b108      	cbz	r0, 8e02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac6>
    8dfe:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8e02:	f7fc fa81 	bl	5308 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8e06:	b158      	cbz	r0, 8e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e08:	f896 0224 	ldrb.w	r0, [r6, #548]	; 0x224
    8e0c:	1c40      	adds	r0, r0, #1
    8e0e:	b2c0      	uxtb	r0, r0
    8e10:	f886 0224 	strb.w	r0, [r6, #548]	; 0x224
    8e14:	2802      	cmp	r0, #2
    8e16:	d903      	bls.n	8e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e18:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8e1c:	f886 4224 	strb.w	r4, [r6, #548]	; 0x224
    8e20:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8e24:	4646      	mov	r6, r8
    8e26:	2301      	movs	r3, #1
    8e28:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8e2c:	2100      	movs	r1, #0
    8e2e:	3080      	adds	r0, #128	; 0x80
    8e30:	f004 fd6b 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e34:	b920      	cbnz	r0, 8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    8e36:	6870      	ldr	r0, [r6, #4]
    8e38:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    8e3c:	280c      	cmp	r0, #12
    8e3e:	d160      	bne.n	8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8e40:	6870      	ldr	r0, [r6, #4]
    8e42:	2301      	movs	r3, #1
    8e44:	2100      	movs	r1, #0
    8e46:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8e4a:	3080      	adds	r0, #128	; 0x80
    8e4c:	f004 fd5d 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e50:	b350      	cbz	r0, 8ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e52:	6870      	ldr	r0, [r6, #4]
    8e54:	2301      	movs	r3, #1
    8e56:	2100      	movs	r1, #0
    8e58:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8e5c:	3080      	adds	r0, #128	; 0x80
    8e5e:	f004 fd54 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e62:	b308      	cbz	r0, 8ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e64:	6870      	ldr	r0, [r6, #4]
    8e66:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8e6a:	2902      	cmp	r1, #2
    8e6c:	d149      	bne.n	8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8e6e:	f890 0224 	ldrb.w	r0, [r0, #548]	; 0x224
    8e72:	b9c8      	cbnz	r0, 8ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e74:	4638      	mov	r0, r7
    8e76:	f004 f84f 	bl	cf18 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8e7a:	b1a8      	cbz	r0, 8ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e7c:	6870      	ldr	r0, [r6, #4]
    8e7e:	3080      	adds	r0, #128	; 0x80
    8e80:	f006 f9d7 	bl	f232 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8e84:	b980      	cbnz	r0, 8ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e86:	6871      	ldr	r1, [r6, #4]
    8e88:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    8e8c:	2801      	cmp	r0, #1
    8e8e:	d938      	bls.n	8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8e90:	f881 921a 	strb.w	r9, [r1, #538]	; 0x21a
    8e94:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    8e98:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    8e9c:	1e83      	subs	r3, r0, #2
    8e9e:	429a      	cmp	r2, r3
    8ea0:	db03      	blt.n	8eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6e>
    8ea2:	2001      	movs	r0, #1
    8ea4:	e004      	b.n	8eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    8ea6:	e01d      	b.n	8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    8ea8:	e02b      	b.n	8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8eaa:	1a80      	subs	r0, r0, r2
    8eac:	1e40      	subs	r0, r0, #1
    8eae:	b280      	uxth	r0, r0
    8eb0:	f8b1 2218 	ldrh.w	r2, [r1, #536]	; 0x218
    8eb4:	88ab      	ldrh	r3, [r5, #4]
    8eb6:	429a      	cmp	r2, r3
    8eb8:	d301      	bcc.n	8ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    8eba:	2201      	movs	r2, #1
    8ebc:	e002      	b.n	8ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    8ebe:	1a9a      	subs	r2, r3, r2
    8ec0:	1c52      	adds	r2, r2, #1
    8ec2:	b292      	uxth	r2, r2
    8ec4:	4290      	cmp	r0, r2
    8ec6:	d900      	bls.n	8eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8e>
    8ec8:	4610      	mov	r0, r2
    8eca:	2801      	cmp	r0, #1
    8ecc:	d102      	bne.n	8ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    8ece:	bf00      	nop
    8ed0:	f881 421a 	strb.w	r4, [r1, #538]	; 0x21a
    8ed4:	6871      	ldr	r1, [r6, #4]
    8ed6:	f8b1 208c 	ldrh.w	r2, [r1, #140]	; 0x8c
    8eda:	4410      	add	r0, r2
    8edc:	f8a1 0214 	strh.w	r0, [r1, #532]	; 0x214
    8ee0:	f000 ff64 	bl	9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>
    8ee4:	78a8      	ldrb	r0, [r5, #2]
    8ee6:	4652      	mov	r2, sl
    8ee8:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8eec:	9800      	ldr	r0, [sp, #0]
    8eee:	f000 fe9d 	bl	9c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    8ef2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8ef6:	f880 421b 	strb.w	r4, [r0, #539]	; 0x21b
    8efa:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8efe:	f7fc b94b 	b.w	5198 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8f02:	2001      	movs	r0, #1
    8f04:	6871      	ldr	r1, [r6, #4]
    8f06:	e7e3      	b.n	8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb94>
    8f08:	20000170 	.word	0x20000170
    8f0c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8f0e:	4c68      	ldr	r4, [pc, #416]	; (90b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd74>)
    8f10:	2301      	movs	r3, #1
    8f12:	2100      	movs	r1, #0
    8f14:	6860      	ldr	r0, [r4, #4]
    8f16:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8f1a:	3080      	adds	r0, #128	; 0x80
    8f1c:	f004 fcf5 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f20:	2800      	cmp	r0, #0
    8f22:	d07a      	beq.n	901a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    8f24:	6860      	ldr	r0, [r4, #4]
    8f26:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    8f2a:	2500      	movs	r5, #0
    8f2c:	b139      	cbz	r1, 8f3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc02>
    8f2e:	2100      	movs	r1, #0
    8f30:	200e      	movs	r0, #14
    8f32:	f000 f8bf 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8f36:	6860      	ldr	r0, [r4, #4]
    8f38:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    8f3c:	e0b5      	b.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8f3e:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    8f42:	b119      	cbz	r1, 8f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc10>
    8f44:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    8f48:	0789      	lsls	r1, r1, #30
    8f4a:	d016      	beq.n	8f7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    8f4c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    8f50:	f88d 1004 	strb.w	r1, [sp, #4]
    8f54:	9901      	ldr	r1, [sp, #4]
    8f56:	9101      	str	r1, [sp, #4]
    8f58:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8f5c:	b141      	cbz	r1, 8f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc34>
    8f5e:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    8f62:	f88d 1000 	strb.w	r1, [sp]
    8f66:	9900      	ldr	r1, [sp, #0]
    8f68:	9100      	str	r1, [sp, #0]
    8f6a:	f89d 1000 	ldrb.w	r1, [sp]
    8f6e:	b189      	cbz	r1, 8f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc58>
    8f70:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8f74:	2901      	cmp	r1, #1
    8f76:	d030      	beq.n	8fda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9e>
    8f78:	e040      	b.n	8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    8f7a:	2100      	movs	r1, #0
    8f7c:	200c      	movs	r0, #12
    8f7e:	f000 f899 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8f82:	6860      	ldr	r0, [r4, #4]
    8f84:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    8f88:	f041 0101 	orr.w	r1, r1, #1
    8f8c:	7001      	strb	r1, [r0, #0]
    8f8e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    8f92:	e08a      	b.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8f94:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8f98:	2926      	cmp	r1, #38	; 0x26
    8f9a:	d01c      	beq.n	8fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    8f9c:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8fa0:	2926      	cmp	r1, #38	; 0x26
    8fa2:	d018      	beq.n	8fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    8fa4:	f05f 0300 	movs.w	r3, #0
    8fa8:	f200 22be 	addw	r2, r0, #702	; 0x2be
    8fac:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    8fb0:	f005 f8e8 	bl	e184 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8fb4:	6860      	ldr	r0, [r4, #4]
    8fb6:	f880 512a 	strb.w	r5, [r0, #298]	; 0x12a
    8fba:	2100      	movs	r1, #0
    8fbc:	2014      	movs	r0, #20
    8fbe:	f000 f879 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8fc2:	6861      	ldr	r1, [r4, #4]
    8fc4:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8fc8:	8bc2      	ldrh	r2, [r0, #30]
    8fca:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    8fce:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8fd0:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    8fd4:	e069      	b.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8fd6:	2301      	movs	r3, #1
    8fd8:	e7e6      	b.n	8fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8fda:	f890 1135 	ldrb.w	r1, [r0, #309]	; 0x135
    8fde:	f88d 1000 	strb.w	r1, [sp]
    8fe2:	9900      	ldr	r1, [sp, #0]
    8fe4:	9100      	str	r1, [sp, #0]
    8fe6:	f89d 1000 	ldrb.w	r1, [sp]
    8fea:	b939      	cbnz	r1, 8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    8fec:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8ff0:	2301      	movs	r3, #1
    8ff2:	210b      	movs	r1, #11
    8ff4:	3080      	adds	r0, #128	; 0x80
    8ff6:	f004 fc88 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ffa:	b178      	cbz	r0, 901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    8ffc:	6860      	ldr	r0, [r4, #4]
    8ffe:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    9002:	f88d 1000 	strb.w	r1, [sp]
    9006:	9900      	ldr	r1, [sp, #0]
    9008:	9100      	str	r1, [sp, #0]
    900a:	f89d 1000 	ldrb.w	r1, [sp]
    900e:	b3b9      	cbz	r1, 9080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9010:	2100      	movs	r1, #0
    9012:	2023      	movs	r0, #35	; 0x23
    9014:	f000 f84e 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9018:	e047      	b.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    901a:	e030      	b.n	907e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    901c:	6860      	ldr	r0, [r4, #4]
    901e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9022:	f006 f90e 	bl	f242 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9026:	4605      	mov	r5, r0
    9028:	6860      	ldr	r0, [r4, #4]
    902a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    902e:	f006 f908 	bl	f242 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9032:	4606      	mov	r6, r0
    9034:	6860      	ldr	r0, [r4, #4]
    9036:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
    903a:	4628      	mov	r0, r5
    903c:	f006 f90c 	bl	f258 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9040:	b150      	cbz	r0, 9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9042:	6860      	ldr	r0, [r4, #4]
    9044:	f890 1137 	ldrb.w	r1, [r0, #311]	; 0x137
    9048:	4630      	mov	r0, r6
    904a:	f006 f905 	bl	f258 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    904e:	b118      	cbz	r0, 9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9050:	2000      	movs	r0, #0
    9052:	f000 f93f 	bl	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9056:	e011      	b.n	907c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    9058:	6860      	ldr	r0, [r4, #4]
    905a:	2301      	movs	r3, #1
    905c:	2103      	movs	r1, #3
    905e:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9062:	3080      	adds	r0, #128	; 0x80
    9064:	f004 fc51 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9068:	b940      	cbnz	r0, 907c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    906a:	6860      	ldr	r0, [r4, #4]
    906c:	2301      	movs	r3, #1
    906e:	2102      	movs	r1, #2
    9070:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9074:	3080      	adds	r0, #128	; 0x80
    9076:	f004 fc48 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    907a:	b110      	cbz	r0, 9082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd46>
    907c:	2000      	movs	r0, #0
    907e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9080:	e002      	b.n	9088 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9082:	2100      	movs	r1, #0
    9084:	2016      	movs	r0, #22
    9086:	e7c5      	b.n	9014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    9088:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    908c:	f88d 0000 	strb.w	r0, [sp]
    9090:	9800      	ldr	r0, [sp, #0]
    9092:	9000      	str	r0, [sp, #0]
    9094:	f89d 0000 	ldrb.w	r0, [sp]
    9098:	2800      	cmp	r0, #0
    909a:	d0f0      	beq.n	907e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    909c:	2100      	movs	r1, #0
    909e:	2025      	movs	r0, #37	; 0x25
    90a0:	f000 f808 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    90a4:	6860      	ldr	r0, [r4, #4]
    90a6:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    90aa:	2001      	movs	r0, #1
    90ac:	e7e7      	b.n	907e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    90ae:	0000      	.short	0x0000
    90b0:	20000170 	.word	0x20000170
    90b4:	b570      	push	{r4, r5, r6, lr}
    90b6:	4c0d      	ldr	r4, [pc, #52]	; (90ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb0>)
    90b8:	4606      	mov	r6, r0
    90ba:	460d      	mov	r5, r1
    90bc:	6860      	ldr	r0, [r4, #4]
    90be:	3080      	adds	r0, #128	; 0x80
    90c0:	f006 f8b7 	bl	f232 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    90c4:	b120      	cbz	r0, 90d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd94>
    90c6:	f640 31ec 	movw	r1, #3052	; 0xbec
    90ca:	2031      	movs	r0, #49	; 0x31
    90cc:	f7fb fa3e 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90d0:	6862      	ldr	r2, [r4, #4]
    90d2:	2000      	movs	r0, #0
    90d4:	2d01      	cmp	r5, #1
    90d6:	f882 611c 	strb.w	r6, [r2, #284]	; 0x11c
    90da:	d004      	beq.n	90e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdaa>
    90dc:	f822 0fca 	strh.w	r0, [r2, #202]!
    90e0:	2001      	movs	r0, #1
    90e2:	7110      	strb	r0, [r2, #4]
    90e4:	bd70      	pop	{r4, r5, r6, pc}
    90e6:	f8a2 00d0 	strh.w	r0, [r2, #208]	; 0xd0
    90ea:	bd70      	pop	{r4, r5, r6, pc}
    90ec:	20000170 	.word	0x20000170
    90f0:	b538      	push	{r3, r4, r5, lr}
    90f2:	4c1f      	ldr	r4, [pc, #124]	; (9170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe34>)
    90f4:	2500      	movs	r5, #0
    90f6:	6860      	ldr	r0, [r4, #4]
    90f8:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    90fc:	2901      	cmp	r1, #1
    90fe:	d00c      	beq.n	911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdde>
    9100:	2902      	cmp	r1, #2
    9102:	d133      	bne.n	916c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    9104:	f890 10d4 	ldrb.w	r1, [r0, #212]	; 0xd4
    9108:	2900      	cmp	r1, #0
    910a:	f04f 0106 	mov.w	r1, #6
    910e:	d01a      	beq.n	9146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    9110:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    9114:	2101      	movs	r1, #1
    9116:	2002      	movs	r0, #2
    9118:	e023      	b.n	9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    911a:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    911e:	f88d 1000 	strb.w	r1, [sp]
    9122:	9900      	ldr	r1, [sp, #0]
    9124:	9100      	str	r1, [sp, #0]
    9126:	f89d 1000 	ldrb.w	r1, [sp]
    912a:	2900      	cmp	r1, #0
    912c:	d11e      	bne.n	916c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    912e:	f500 7380 	add.w	r3, r0, #256	; 0x100
    9132:	f500 710a 	add.w	r1, r0, #552	; 0x228
    9136:	2200      	movs	r2, #0
    9138:	f200 20a1 	addw	r0, r0, #673	; 0x2a1
    913c:	f004 fb9d 	bl	d87a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9140:	2101      	movs	r1, #1
    9142:	2005      	movs	r0, #5
    9144:	e00d      	b.n	9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    9146:	2003      	movs	r0, #3
    9148:	f000 fd24 	bl	9b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1858>
    914c:	6860      	ldr	r0, [r4, #4]
    914e:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    9152:	0880      	lsrs	r0, r0, #2
    9154:	f010 0f01 	tst.w	r0, #1
    9158:	d001      	beq.n	915e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe22>
    915a:	2011      	movs	r0, #17
    915c:	e000      	b.n	9160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    915e:	200d      	movs	r0, #13
    9160:	2101      	movs	r1, #1
    9162:	f7ff ffa7 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9166:	6860      	ldr	r0, [r4, #4]
    9168:	f880 52a0 	strb.w	r5, [r0, #672]	; 0x2a0
    916c:	bd38      	pop	{r3, r4, r5, pc}
    916e:	0000      	.short	0x0000
    9170:	20000170 	.word	0x20000170
    9174:	b570      	push	{r4, r5, r6, lr}
    9176:	4b2b      	ldr	r3, [pc, #172]	; (9224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>)
    9178:	4602      	mov	r2, r0
    917a:	8858      	ldrh	r0, [r3, #2]
    917c:	4310      	orrs	r0, r2
    917e:	8058      	strh	r0, [r3, #2]
    9180:	f103 0010 	add.w	r0, r3, #16
    9184:	2a40      	cmp	r2, #64	; 0x40
    9186:	6840      	ldr	r0, [r0, #4]
    9188:	d00d      	beq.n	91a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6a>
    918a:	0796      	lsls	r6, r2, #30
    918c:	f04f 0500 	mov.w	r5, #0
    9190:	f04f 0401 	mov.w	r4, #1
    9194:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    9198:	d50c      	bpl.n	91b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    919a:	b14e      	cbz	r6, 91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe74>
    919c:	f640 613f 	movw	r1, #3647	; 0xe3f
    91a0:	2031      	movs	r0, #49	; 0x31
    91a2:	f7fb f9d3 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    91aa:	2104      	movs	r1, #4
    91ac:	f7fe bc8e 	b.w	7acc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    91b0:	6099      	str	r1, [r3, #8]
    91b2:	e01c      	b.n	91ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    91b4:	b1c6      	cbz	r6, 91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91b6:	60d9      	str	r1, [r3, #12]
    91b8:	78c9      	ldrb	r1, [r1, #3]
    91ba:	2906      	cmp	r1, #6
    91bc:	d002      	beq.n	91c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>
    91be:	290b      	cmp	r1, #11
    91c0:	d112      	bne.n	91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91c2:	e009      	b.n	91d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe9c>
    91c4:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    91c8:	2919      	cmp	r1, #25
    91ca:	d10d      	bne.n	91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91cc:	2100      	movs	r1, #0
    91ce:	e9c0 113c 	strd	r1, r1, [r0, #240]	; 0xf0
    91d2:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
    91d6:	e007      	b.n	91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91d8:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    91dc:	2913      	cmp	r1, #19
    91de:	d103      	bne.n	91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91e0:	f880 509a 	strb.w	r5, [r0, #154]	; 0x9a
    91e4:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
    91e8:	0791      	lsls	r1, r2, #30
    91ea:	d516      	bpl.n	921a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    91ec:	6899      	ldr	r1, [r3, #8]
    91ee:	78c9      	ldrb	r1, [r1, #3]
    91f0:	2905      	cmp	r1, #5
    91f2:	d002      	beq.n	91fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebe>
    91f4:	290b      	cmp	r1, #11
    91f6:	d110      	bne.n	921a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    91f8:	e009      	b.n	920e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    91fa:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    91fe:	2917      	cmp	r1, #23
    9200:	d10b      	bne.n	921a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9202:	2100      	movs	r1, #0
    9204:	e9e0 113e 	strd	r1, r1, [r0, #248]!	; 0xf8
    9208:	f800 4c5d 	strb.w	r4, [r0, #-93]
    920c:	e005      	b.n	921a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    920e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9212:	2912      	cmp	r1, #18
    9214:	d101      	bne.n	921a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9216:	f880 509b 	strb.w	r5, [r0, #155]	; 0x9b
    921a:	0690      	lsls	r0, r2, #26
    921c:	d501      	bpl.n	9222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee6>
    921e:	2008      	movs	r0, #8
    9220:	7058      	strb	r0, [r3, #1]
    9222:	bd70      	pop	{r4, r5, r6, pc}
    9224:	20000160 	.word	0x20000160
    9228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    922c:	4c28      	ldr	r4, [pc, #160]	; (92d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf94>)
    922e:	2701      	movs	r7, #1
    9230:	6860      	ldr	r0, [r4, #4]
    9232:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    9236:	b109      	cbz	r1, 923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    9238:	2601      	movs	r6, #1
    923a:	e000      	b.n	923e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    923c:	2600      	movs	r6, #0
    923e:	f890 22bf 	ldrb.w	r2, [r0, #703]	; 0x2bf
    9242:	b10a      	cbz	r2, 9248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    9244:	2501      	movs	r5, #1
    9246:	e000      	b.n	924a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    9248:	2500      	movs	r5, #0
    924a:	b90e      	cbnz	r6, 9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    924c:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    9250:	b90d      	cbnz	r5, 9256 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1a>
    9252:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    9256:	f100 0362 	add.w	r3, r0, #98	; 0x62
    925a:	7219      	strb	r1, [r3, #8]
    925c:	725a      	strb	r2, [r3, #9]
    925e:	22ff      	movs	r2, #255	; 0xff
    9260:	729a      	strb	r2, [r3, #10]
    9262:	f006 fae1 	bl	f828 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    9266:	6860      	ldr	r0, [r4, #4]
    9268:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    926c:	2801      	cmp	r0, #1
    926e:	d001      	beq.n	9274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9270:	b906      	cbnz	r6, 9274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9272:	b115      	cbz	r5, 927a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3e>
    9274:	2000      	movs	r0, #0
    9276:	f000 f82d 	bl	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    927a:	6860      	ldr	r0, [r4, #4]
    927c:	302c      	adds	r0, #44	; 0x2c
    927e:	f004 fff0 	bl	e262 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9282:	4606      	mov	r6, r0
    9284:	2105      	movs	r1, #5
    9286:	6860      	ldr	r0, [r4, #4]
    9288:	f7fe fc20 	bl	7acc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    928c:	6860      	ldr	r0, [r4, #4]
    928e:	302c      	adds	r0, #44	; 0x2c
    9290:	f004 ffe7 	bl	e262 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9294:	4605      	mov	r5, r0
    9296:	42ae      	cmp	r6, r5
    9298:	d20a      	bcs.n	92b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    929a:	f7f8 fcbb 	bl	1c14 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    929e:	4601      	mov	r1, r0
    92a0:	1ba8      	subs	r0, r5, r6
    92a2:	2865      	cmp	r0, #101	; 0x65
    92a4:	d200      	bcs.n	92a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>
    92a6:	2065      	movs	r0, #101	; 0x65
    92a8:	f7f8 fbd6 	bl	1a58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    92ac:	b100      	cbz	r0, 92b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    92ae:	2700      	movs	r7, #0
    92b0:	6860      	ldr	r0, [r4, #4]
    92b2:	f004 ff82 	bl	e1ba <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    92b6:	b138      	cbz	r0, 92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>
    92b8:	6863      	ldr	r3, [r4, #4]
    92ba:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    92be:	8818      	ldrh	r0, [r3, #0]
    92c0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    92c4:	f004 ff36 	bl	e134 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    92c8:	4638      	mov	r0, r7
    92ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92ce:	0000      	.short	0x0000
    92d0:	20000170 	.word	0x20000170
    92d4:	b510      	push	{r4, lr}
    92d6:	4c0f      	ldr	r4, [pc, #60]	; (9314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    92d8:	6861      	ldr	r1, [r4, #4]
    92da:	880a      	ldrh	r2, [r1, #0]
    92dc:	f8a1 21a0 	strh.w	r2, [r1, #416]	; 0x1a0
    92e0:	f881 019e 	strb.w	r0, [r1, #414]	; 0x19e
    92e4:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    92e8:	f005 ffab 	bl	f242 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    92ec:	6861      	ldr	r1, [r4, #4]
    92ee:	f881 01a2 	strb.w	r0, [r1, #418]	; 0x1a2
    92f2:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    92f6:	f005 ffa4 	bl	f242 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    92fa:	6861      	ldr	r1, [r4, #4]
    92fc:	2213      	movs	r2, #19
    92fe:	f881 01a3 	strb.w	r0, [r1, #419]	; 0x1a3
    9302:	f501 70ca 	add.w	r0, r1, #404	; 0x194
    9306:	f7fd f893 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    930a:	6861      	ldr	r1, [r4, #4]
    930c:	2000      	movs	r0, #0
    930e:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    9312:	bd10      	pop	{r4, pc}
    9314:	20000170 	.word	0x20000170
    9318:	b570      	push	{r4, r5, r6, lr}
    931a:	4d0f      	ldr	r5, [pc, #60]	; (9358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    931c:	686c      	ldr	r4, [r5, #4]
    931e:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
    9322:	2922      	cmp	r1, #34	; 0x22
    9324:	d002      	beq.n	932c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9326:	292e      	cmp	r1, #46	; 0x2e
    9328:	d003      	beq.n	9332 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    932a:	e011      	b.n	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    932c:	f7ff ffd2 	bl	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9330:	e008      	b.n	9344 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    9332:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
    9336:	f104 0080 	add.w	r0, r4, #128	; 0x80
    933a:	2301      	movs	r3, #1
    933c:	210b      	movs	r1, #11
    933e:	f004 fae4 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9342:	b138      	cbz	r0, 9354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    9344:	6869      	ldr	r1, [r5, #4]
    9346:	2000      	movs	r0, #0
    9348:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    934c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9350:	2000      	movs	r0, #0
    9352:	bd70      	pop	{r4, r5, r6, pc}
    9354:	202a      	movs	r0, #42	; 0x2a
    9356:	e7e9      	b.n	932c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9358:	20000170 	.word	0x20000170
    935c:	b570      	push	{r4, r5, r6, lr}
    935e:	4604      	mov	r4, r0
    9360:	6840      	ldr	r0, [r0, #4]
    9362:	2301      	movs	r3, #1
    9364:	2100      	movs	r1, #0
    9366:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    936a:	3080      	adds	r0, #128	; 0x80
    936c:	f004 facd 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9370:	b1b8      	cbz	r0, 93a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    9372:	4d13      	ldr	r5, [pc, #76]	; (93c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    9374:	68e8      	ldr	r0, [r5, #12]
    9376:	f004 fd2e 	bl	ddd6 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    937a:	6861      	ldr	r1, [r4, #4]
    937c:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9380:	6861      	ldr	r1, [r4, #4]
    9382:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    9386:	f005 ff75 	bl	f274 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    938a:	b160      	cbz	r0, 93a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    938c:	6861      	ldr	r1, [r4, #4]
    938e:	2028      	movs	r0, #40	; 0x28
    9390:	220a      	movs	r2, #10
    9392:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9396:	6861      	ldr	r1, [r4, #4]
    9398:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    939c:	f7fd f848 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    93a0:	e00b      	b.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    93a2:	2001      	movs	r0, #1
    93a4:	bd70      	pop	{r4, r5, r6, pc}
    93a6:	6861      	ldr	r1, [r4, #4]
    93a8:	68e8      	ldr	r0, [r5, #12]
    93aa:	f201 21be 	addw	r1, r1, #702	; 0x2be
    93ae:	f004 fd0d 	bl	ddcc <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    93b2:	6861      	ldr	r1, [r4, #4]
    93b4:	200b      	movs	r0, #11
    93b6:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    93ba:	2000      	movs	r0, #0
    93bc:	bd70      	pop	{r4, r5, r6, pc}
    93be:	0000      	.short	0x0000
    93c0:	20000160 	.word	0x20000160
    93c4:	b570      	push	{r4, r5, r6, lr}
    93c6:	4604      	mov	r4, r0
    93c8:	6840      	ldr	r0, [r0, #4]
    93ca:	2301      	movs	r3, #1
    93cc:	2100      	movs	r1, #0
    93ce:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    93d2:	3080      	adds	r0, #128	; 0x80
    93d4:	f004 fa99 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93d8:	b1e0      	cbz	r0, 9414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d8>
    93da:	4d28      	ldr	r5, [pc, #160]	; (947c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>)
    93dc:	2100      	movs	r1, #0
    93de:	68e8      	ldr	r0, [r5, #12]
    93e0:	f004 fcfc 	bl	dddc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    93e4:	b1c0      	cbz	r0, 9418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    93e6:	68e8      	ldr	r0, [r5, #12]
    93e8:	6861      	ldr	r1, [r4, #4]
    93ea:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    93ee:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    93f2:	6861      	ldr	r1, [r4, #4]
    93f4:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    93f8:	f005 ff3c 	bl	f274 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    93fc:	b188      	cbz	r0, 9422 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e6>
    93fe:	6861      	ldr	r1, [r4, #4]
    9400:	2028      	movs	r0, #40	; 0x28
    9402:	220a      	movs	r2, #10
    9404:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9408:	6861      	ldr	r1, [r4, #4]
    940a:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    940e:	f7fd f80f 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9412:	e030      	b.n	9476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113a>
    9414:	2001      	movs	r0, #1
    9416:	bd70      	pop	{r4, r5, r6, pc}
    9418:	4620      	mov	r0, r4
    941a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    941e:	f000 b897 	b.w	9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    9422:	68e8      	ldr	r0, [r5, #12]
    9424:	f004 fd04 	bl	de30 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    9428:	f004 fa52 	bl	d8d0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    942c:	4606      	mov	r6, r0
    942e:	6860      	ldr	r0, [r4, #4]
    9430:	4631      	mov	r1, r6
    9432:	f8c0 62c4 	str.w	r6, [r0, #708]	; 0x2c4
    9436:	68e8      	ldr	r0, [r5, #12]
    9438:	7900      	ldrb	r0, [r0, #4]
    943a:	f004 fbc5 	bl	dbc8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    943e:	6861      	ldr	r1, [r4, #4]
    9440:	f8a1 02be 	strh.w	r0, [r1, #702]	; 0x2be
    9444:	68e8      	ldr	r0, [r5, #12]
    9446:	4631      	mov	r1, r6
    9448:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    944c:	f004 fbb8 	bl	dbc0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9450:	6861      	ldr	r1, [r4, #4]
    9452:	f8c1 02c0 	str.w	r0, [r1, #704]	; 0x2c0
    9456:	68e8      	ldr	r0, [r5, #12]
    9458:	f004 fced 	bl	de36 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    945c:	6861      	ldr	r1, [r4, #4]
    945e:	f8a1 02c8 	strh.w	r0, [r1, #712]	; 0x2c8
    9462:	68e8      	ldr	r0, [r5, #12]
    9464:	f004 fcea 	bl	de3c <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    9468:	6861      	ldr	r1, [r4, #4]
    946a:	f8a1 02ca 	strh.w	r0, [r1, #714]	; 0x2ca
    946e:	6861      	ldr	r1, [r4, #4]
    9470:	200e      	movs	r0, #14
    9472:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    9476:	2000      	movs	r0, #0
    9478:	bd70      	pop	{r4, r5, r6, pc}
    947a:	0000      	.short	0x0000
    947c:	20000160 	.word	0x20000160
    9480:	b538      	push	{r3, r4, r5, lr}
    9482:	4604      	mov	r4, r0
    9484:	6840      	ldr	r0, [r0, #4]
    9486:	2301      	movs	r3, #1
    9488:	2100      	movs	r1, #0
    948a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    948e:	3080      	adds	r0, #128	; 0x80
    9490:	f004 fa3b 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9494:	b970      	cbnz	r0, 94b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9496:	6860      	ldr	r0, [r4, #4]
    9498:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    949c:	2a14      	cmp	r2, #20
    949e:	d009      	beq.n	94b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    94a0:	2301      	movs	r3, #1
    94a2:	2105      	movs	r1, #5
    94a4:	3080      	adds	r0, #128	; 0x80
    94a6:	f004 fa30 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94aa:	b108      	cbz	r0, 94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    94ac:	2008      	movs	r0, #8
    94ae:	bd38      	pop	{r3, r4, r5, pc}
    94b0:	2001      	movs	r0, #1
    94b2:	bd38      	pop	{r3, r4, r5, pc}
    94b4:	6860      	ldr	r0, [r4, #4]
    94b6:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    94ba:	b908      	cbnz	r0, 94c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    94bc:	f7ff f840 	bl	8540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    94c0:	4d1b      	ldr	r5, [pc, #108]	; (9530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f4>)
    94c2:	6861      	ldr	r1, [r4, #4]
    94c4:	f501 710a 	add.w	r1, r1, #552	; 0x228
    94c8:	68e8      	ldr	r0, [r5, #12]
    94ca:	f004 fcd0 	bl	de6e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    94ce:	6861      	ldr	r1, [r4, #4]
    94d0:	68e8      	ldr	r0, [r5, #12]
    94d2:	f501 7188 	add.w	r1, r1, #272	; 0x110
    94d6:	f004 fcc1 	bl	de5c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    94da:	6860      	ldr	r0, [r4, #4]
    94dc:	f890 12d4 	ldrb.w	r1, [r0, #724]	; 0x2d4
    94e0:	f88d 1000 	strb.w	r1, [sp]
    94e4:	9900      	ldr	r1, [sp, #0]
    94e6:	9100      	str	r1, [sp, #0]
    94e8:	f89d 1000 	ldrb.w	r1, [sp]
    94ec:	b121      	cbz	r1, 94f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    94ee:	f240 3117 	movw	r1, #791	; 0x317
    94f2:	2031      	movs	r0, #49	; 0x31
    94f4:	f7fb f82a 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94f8:	8801      	ldrh	r1, [r0, #0]
    94fa:	f8a0 12d6 	strh.w	r1, [r0, #726]	; 0x2d6
    94fe:	6861      	ldr	r1, [r4, #4]
    9500:	68e8      	ldr	r0, [r5, #12]
    9502:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
    9506:	f004 fcad 	bl	de64 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    950a:	6861      	ldr	r1, [r4, #4]
    950c:	68e8      	ldr	r0, [r5, #12]
    950e:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
    9512:	f004 fca0 	bl	de56 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    9516:	6860      	ldr	r0, [r4, #4]
    9518:	2209      	movs	r2, #9
    951a:	4906      	ldr	r1, [pc, #24]	; (9534 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f8>)
    951c:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
    9520:	f7fc ff86 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9524:	6861      	ldr	r1, [r4, #4]
    9526:	2016      	movs	r0, #22
    9528:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    952c:	2000      	movs	r0, #0
    952e:	bd38      	pop	{r3, r4, r5, pc}
    9530:	20000160 	.word	0x20000160
    9534:	0000f28d 	.word	0x0000f28d
    9538:	4901      	ldr	r1, [pc, #4]	; (9540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>)
    953a:	68c9      	ldr	r1, [r1, #12]
    953c:	f7fd ba36 	b.w	69ac <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    9540:	20000160 	.word	0x20000160
    9544:	4901      	ldr	r1, [pc, #4]	; (954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>)
    9546:	68c9      	ldr	r1, [r1, #12]
    9548:	f7fd ba60 	b.w	6a0c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    954c:	20000160 	.word	0x20000160
    9550:	b510      	push	{r4, lr}
    9552:	6842      	ldr	r2, [r0, #4]
    9554:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
    9558:	070b      	lsls	r3, r1, #28
    955a:	d501      	bpl.n	9560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1224>
    955c:	2001      	movs	r0, #1
    955e:	bd10      	pop	{r4, pc}
    9560:	f041 0108 	orr.w	r1, r1, #8
    9564:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    9568:	4904      	ldr	r1, [pc, #16]	; (957c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1240>)
    956a:	6840      	ldr	r0, [r0, #4]
    956c:	68c9      	ldr	r1, [r1, #12]
    956e:	78c9      	ldrb	r1, [r1, #3]
    9570:	f880 1118 	strb.w	r1, [r0, #280]	; 0x118
    9574:	f7fe ffe4 	bl	8540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9578:	2000      	movs	r0, #0
    957a:	bd10      	pop	{r4, pc}
    957c:	20000160 	.word	0x20000160
    9580:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9584:	4605      	mov	r5, r0
    9586:	6840      	ldr	r0, [r0, #4]
    9588:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    958c:	f010 0f30 	tst.w	r0, #48	; 0x30
    9590:	d002      	beq.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125c>
    9592:	2001      	movs	r0, #1
    9594:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9598:	4c31      	ldr	r4, [pc, #196]	; (9660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    959a:	68e0      	ldr	r0, [r4, #12]
    959c:	f004 fc81 	bl	dea2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    95a0:	b330      	cbz	r0, 95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b4>
    95a2:	68e0      	ldr	r0, [r4, #12]
    95a4:	f004 fc77 	bl	de96 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    95a8:	4680      	mov	r8, r0
    95aa:	68e0      	ldr	r0, [r4, #12]
    95ac:	f004 fc77 	bl	de9e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    95b0:	4607      	mov	r7, r0
    95b2:	68e0      	ldr	r0, [r4, #12]
    95b4:	f004 fc6d 	bl	de92 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    95b8:	4606      	mov	r6, r0
    95ba:	68e0      	ldr	r0, [r4, #12]
    95bc:	f004 fc6d 	bl	de9a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    95c0:	4601      	mov	r1, r0
    95c2:	f8cd 8000 	str.w	r8, [sp]
    95c6:	6868      	ldr	r0, [r5, #4]
    95c8:	463b      	mov	r3, r7
    95ca:	4632      	mov	r2, r6
    95cc:	302c      	adds	r0, #44	; 0x2c
    95ce:	f004 fe82 	bl	e2d6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    95d2:	78a0      	ldrb	r0, [r4, #2]
    95d4:	0781      	lsls	r1, r0, #30
    95d6:	f04f 0001 	mov.w	r0, #1
    95da:	d503      	bpl.n	95e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a8>
    95dc:	68a1      	ldr	r1, [r4, #8]
    95de:	78c9      	ldrb	r1, [r1, #3]
    95e0:	2914      	cmp	r1, #20
    95e2:	d00a      	beq.n	95fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    95e4:	6869      	ldr	r1, [r5, #4]
    95e6:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
    95ea:	291e      	cmp	r1, #30
    95ec:	d005      	beq.n	95fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    95ee:	e007      	b.n	9600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    95f0:	4628      	mov	r0, r5
    95f2:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    95f6:	f7ff bfab 	b.w	9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    95fa:	6869      	ldr	r1, [r5, #4]
    95fc:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9600:	6868      	ldr	r0, [r5, #4]
    9602:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    9606:	2901      	cmp	r1, #1
    9608:	d011      	beq.n	962e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    960a:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    960e:	f88d 1004 	strb.w	r1, [sp, #4]
    9612:	9901      	ldr	r1, [sp, #4]
    9614:	9101      	str	r1, [sp, #4]
    9616:	f89d 1004 	ldrb.w	r1, [sp, #4]
    961a:	b941      	cbnz	r1, 962e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    961c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    9620:	f88d 1000 	strb.w	r1, [sp]
    9624:	9900      	ldr	r1, [sp, #0]
    9626:	9100      	str	r1, [sp, #0]
    9628:	f89d 1000 	ldrb.w	r1, [sp]
    962c:	b141      	cbz	r1, 9640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1304>
    962e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    9632:	f041 0110 	orr.w	r1, r1, #16
    9636:	6001      	str	r1, [r0, #0]
    9638:	f7fe ff82 	bl	8540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    963c:	2000      	movs	r0, #0
    963e:	e7a9      	b.n	9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1258>
    9640:	f850 1f84 	ldr.w	r1, [r0, #132]!
    9644:	f041 0120 	orr.w	r1, r1, #32
    9648:	6001      	str	r1, [r0, #0]
    964a:	4805      	ldr	r0, [pc, #20]	; (9660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    964c:	3010      	adds	r0, #16
    964e:	6843      	ldr	r3, [r0, #4]
    9650:	f503 72b9 	add.w	r2, r3, #370	; 0x172
    9654:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    9658:	8818      	ldrh	r0, [r3, #0]
    965a:	f004 fe43 	bl	e2e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    965e:	e7eb      	b.n	9638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12fc>
    9660:	20000160 	.word	0x20000160
    9664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9668:	4604      	mov	r4, r0
    966a:	6840      	ldr	r0, [r0, #4]
    966c:	2301      	movs	r3, #1
    966e:	210a      	movs	r1, #10
    9670:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9674:	3080      	adds	r0, #128	; 0x80
    9676:	f004 f948 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    967a:	b350      	cbz	r0, 96d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    967c:	4d16      	ldr	r5, [pc, #88]	; (96d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x139c>)
    967e:	68e8      	ldr	r0, [r5, #12]
    9680:	f004 fc0f 	bl	dea2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    9684:	b1c8      	cbz	r0, 96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    9686:	68e8      	ldr	r0, [r5, #12]
    9688:	f004 fc05 	bl	de96 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    968c:	4607      	mov	r7, r0
    968e:	68e8      	ldr	r0, [r5, #12]
    9690:	f004 fc05 	bl	de9e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    9694:	4680      	mov	r8, r0
    9696:	68e8      	ldr	r0, [r5, #12]
    9698:	f004 fbfb 	bl	de92 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    969c:	4606      	mov	r6, r0
    969e:	68e8      	ldr	r0, [r5, #12]
    96a0:	f004 fbfb 	bl	de9a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    96a4:	4601      	mov	r1, r0
    96a6:	9700      	str	r7, [sp, #0]
    96a8:	6860      	ldr	r0, [r4, #4]
    96aa:	4643      	mov	r3, r8
    96ac:	4632      	mov	r2, r6
    96ae:	302c      	adds	r0, #44	; 0x2c
    96b0:	f004 fe11 	bl	e2d6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    96b4:	6860      	ldr	r0, [r4, #4]
    96b6:	f004 fd80 	bl	e1ba <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    96ba:	6861      	ldr	r1, [r4, #4]
    96bc:	2000      	movs	r0, #0
    96be:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    96c2:	6861      	ldr	r1, [r4, #4]
    96c4:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    96c8:	f7ff f91a 	bl	8900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    96cc:	2000      	movs	r0, #0
    96ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    96d2:	2001      	movs	r0, #1
    96d4:	e7fb      	b.n	96ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1392>
    96d6:	0000      	.short	0x0000
    96d8:	20000160 	.word	0x20000160
    96dc:	b538      	push	{r3, r4, r5, lr}
    96de:	4604      	mov	r4, r0
    96e0:	6840      	ldr	r0, [r0, #4]
    96e2:	2301      	movs	r3, #1
    96e4:	210b      	movs	r1, #11
    96e6:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    96ea:	3080      	adds	r0, #128	; 0x80
    96ec:	f004 f90d 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96f0:	bb60      	cbnz	r0, 974c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    96f2:	6860      	ldr	r0, [r4, #4]
    96f4:	2301      	movs	r3, #1
    96f6:	2100      	movs	r1, #0
    96f8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    96fc:	3080      	adds	r0, #128	; 0x80
    96fe:	f004 f904 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9702:	b308      	cbz	r0, 9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140c>
    9704:	6860      	ldr	r0, [r4, #4]
    9706:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    970a:	2826      	cmp	r0, #38	; 0x26
    970c:	d01e      	beq.n	974c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    970e:	4d29      	ldr	r5, [pc, #164]	; (97b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    9710:	68e8      	ldr	r0, [r5, #12]
    9712:	f004 fbd8 	bl	dec6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    9716:	b1d8      	cbz	r0, 9750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1414>
    9718:	68e8      	ldr	r0, [r5, #12]
    971a:	6862      	ldr	r2, [r4, #4]
    971c:	7941      	ldrb	r1, [r0, #5]
    971e:	f001 0107 	and.w	r1, r1, #7
    9722:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    9726:	7900      	ldrb	r0, [r0, #4]
    9728:	f000 0107 	and.w	r1, r0, #7
    972c:	6860      	ldr	r0, [r4, #4]
    972e:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    9732:	6860      	ldr	r0, [r4, #4]
    9734:	f890 2135 	ldrb.w	r2, [r0, #309]	; 0x135
    9738:	f88d 2000 	strb.w	r2, [sp]
    973c:	9a00      	ldr	r2, [sp, #0]
    973e:	9200      	str	r2, [sp, #0]
    9740:	f89d 2000 	ldrb.w	r2, [sp]
    9744:	bb72      	cbnz	r2, 97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9746:	e008      	b.n	975a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x141e>
    9748:	2001      	movs	r0, #1
    974a:	bd38      	pop	{r3, r4, r5, pc}
    974c:	2020      	movs	r0, #32
    974e:	bd38      	pop	{r3, r4, r5, pc}
    9750:	4620      	mov	r0, r4
    9752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9756:	f7ff befb 	b.w	9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    975a:	f890 2134 	ldrb.w	r2, [r0, #308]	; 0x134
    975e:	2a01      	cmp	r2, #1
    9760:	d020      	beq.n	97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9762:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    9766:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    976a:	7855      	ldrb	r5, [r2, #1]
    976c:	428d      	cmp	r5, r1
    976e:	d106      	bne.n	977e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9770:	7811      	ldrb	r1, [r2, #0]
    9772:	4299      	cmp	r1, r3
    9774:	d103      	bne.n	977e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9776:	2102      	movs	r1, #2
    9778:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    977c:	e012      	b.n	97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    977e:	480d      	ldr	r0, [pc, #52]	; (97b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    9780:	3010      	adds	r0, #16
    9782:	6841      	ldr	r1, [r0, #4]
    9784:	f501 70c8 	add.w	r0, r1, #400	; 0x190
    9788:	880a      	ldrh	r2, [r1, #0]
    978a:	f820 2b02 	strh.w	r2, [r0], #2
    978e:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    9792:	f800 2b01 	strb.w	r2, [r0], #1
    9796:	f891 2063 	ldrb.w	r2, [r1, #99]	; 0x63
    979a:	f800 290d 	strb.w	r2, [r0], #-13
    979e:	221f      	movs	r2, #31
    97a0:	f7fc fe46 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    97a4:	6861      	ldr	r1, [r4, #4]
    97a6:	2023      	movs	r0, #35	; 0x23
    97a8:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    97ac:	f7fe fec8 	bl	8540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    97b0:	2000      	movs	r0, #0
    97b2:	bd38      	pop	{r3, r4, r5, pc}
    97b4:	20000160 	.word	0x20000160
    97b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97bc:	6845      	ldr	r5, [r0, #4]
    97be:	4604      	mov	r4, r0
    97c0:	f895 0095 	ldrb.w	r0, [r5, #149]	; 0x95
    97c4:	2822      	cmp	r0, #34	; 0x22
    97c6:	d008      	beq.n	97da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    97c8:	f05f 0600 	movs.w	r6, #0
    97cc:	f895 0096 	ldrb.w	r0, [r5, #150]	; 0x96
    97d0:	2824      	cmp	r0, #36	; 0x24
    97d2:	d004      	beq.n	97de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    97d4:	b38e      	cbz	r6, 983a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    97d6:	3595      	adds	r5, #149	; 0x95
    97d8:	e002      	b.n	97e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    97da:	2601      	movs	r6, #1
    97dc:	e7f6      	b.n	97cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1490>
    97de:	3596      	adds	r5, #150	; 0x96
    97e0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>
    97e4:	f8d8 000c 	ldr.w	r0, [r8, #12]
    97e8:	f004 fb79 	bl	dede <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    97ec:	2700      	movs	r7, #0
    97ee:	b340      	cbz	r0, 9842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    97f0:	4631      	mov	r1, r6
    97f2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    97f6:	f7fe ff79 	bl	86ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    97fa:	b310      	cbz	r0, 9842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    97fc:	466a      	mov	r2, sp
    97fe:	4646      	mov	r6, r8
    9800:	6860      	ldr	r0, [r4, #4]
    9802:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9806:	f004 f995 	bl	db34 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    980a:	b3c0      	cbz	r0, 987e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    980c:	68f0      	ldr	r0, [r6, #12]
    980e:	f004 fb64 	bl	deda <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    9812:	6861      	ldr	r1, [r4, #4]
    9814:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9818:	6861      	ldr	r1, [r4, #4]
    981a:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    981e:	f005 fd29 	bl	f274 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9822:	b368      	cbz	r0, 9880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1544>
    9824:	6861      	ldr	r1, [r4, #4]
    9826:	2028      	movs	r0, #40	; 0x28
    9828:	220a      	movs	r2, #10
    982a:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    982e:	6861      	ldr	r1, [r4, #4]
    9830:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9834:	f7fc fdfc 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9838:	e058      	b.n	98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    983a:	e7ff      	b.n	983c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1500>
    983c:	2002      	movs	r0, #2
    983e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9842:	6860      	ldr	r0, [r4, #4]
    9844:	f04f 0900 	mov.w	r9, #0
    9848:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    984c:	2901      	cmp	r1, #1
    984e:	d018      	beq.n	9882 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    9850:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    9854:	b30e      	cbz	r6, 989a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155e>
    9856:	f8d8 000c 	ldr.w	r0, [r8, #12]
    985a:	6861      	ldr	r1, [r4, #4]
    985c:	2201      	movs	r2, #1
    985e:	78c0      	ldrb	r0, [r0, #3]
    9860:	f881 0119 	strb.w	r0, [r1, #281]	; 0x119
    9864:	4082      	lsls	r2, r0
    9866:	6861      	ldr	r1, [r4, #4]
    9868:	f3c2 6000 	ubfx	r0, r2, #24, #1
    986c:	b168      	cbz	r0, 988a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154e>
    986e:	200a      	movs	r0, #10
    9870:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9874:	6860      	ldr	r0, [r4, #4]
    9876:	f890 00ce 	ldrb.w	r0, [r0, #206]	; 0xce
    987a:	b9a8      	cbnz	r0, 98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    987c:	e008      	b.n	9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    987e:	e015      	b.n	98ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1570>
    9880:	e028      	b.n	98d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1598>
    9882:	201e      	movs	r0, #30
    9884:	f7ff fd26 	bl	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9888:	e7e4      	b.n	9854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1518>
    988a:	f240 4163 	movw	r1, #1123	; 0x463
    988e:	e001      	b.n	9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    9890:	f240 416b 	movw	r1, #1131	; 0x46b
    9894:	2031      	movs	r0, #49	; 0x31
    9896:	f7fa fe59 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    989a:	702f      	strb	r7, [r5, #0]
    989c:	f7fe fe5c 	bl	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    98a0:	4620      	mov	r0, r4
    98a2:	f7ff fe55 	bl	9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    98a6:	4681      	mov	r9, r0
    98a8:	4648      	mov	r0, r9
    98aa:	e7c8      	b.n	983e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    98ac:	6860      	ldr	r0, [r4, #4]
    98ae:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    98b2:	2901      	cmp	r1, #1
    98b4:	d009      	beq.n	98ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    98b6:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    98ba:	6860      	ldr	r0, [r4, #4]
    98bc:	f100 0196 	add.w	r1, r0, #150	; 0x96
    98c0:	42a9      	cmp	r1, r5
    98c2:	d113      	bne.n	98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    98c4:	f880 7096 	strb.w	r7, [r0, #150]	; 0x96
    98c8:	e010      	b.n	98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    98ca:	2000      	movs	r0, #0
    98cc:	f7ff fd02 	bl	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    98d0:	702f      	strb	r7, [r5, #0]
    98d2:	e7f2      	b.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157e>
    98d4:	6861      	ldr	r1, [r4, #4]
    98d6:	f89d 0000 	ldrb.w	r0, [sp]
    98da:	f881 02be 	strb.w	r0, [r1, #702]	; 0x2be
    98de:	6861      	ldr	r1, [r4, #4]
    98e0:	f89d 0001 	ldrb.w	r0, [sp, #1]
    98e4:	f881 02bf 	strb.w	r0, [r1, #703]	; 0x2bf
    98e8:	2026      	movs	r0, #38	; 0x26
    98ea:	7028      	strb	r0, [r5, #0]
    98ec:	6860      	ldr	r0, [r4, #4]
    98ee:	f100 0196 	add.w	r1, r0, #150	; 0x96
    98f2:	42a9      	cmp	r1, r5
    98f4:	d102      	bne.n	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    98f6:	f7fe fe2f 	bl	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    98fa:	e001      	b.n	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    98fc:	f880 70ce 	strb.w	r7, [r0, #206]	; 0xce
    9900:	2000      	movs	r0, #0
    9902:	e79c      	b.n	983e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    9904:	20000160 	.word	0x20000160
    9908:	b570      	push	{r4, r5, r6, lr}
    990a:	6840      	ldr	r0, [r0, #4]
    990c:	4d09      	ldr	r5, [pc, #36]	; (9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    990e:	f810 1fe4 	ldrb.w	r1, [r0, #228]!
    9912:	f041 0104 	orr.w	r1, r1, #4
    9916:	7001      	strb	r1, [r0, #0]
    9918:	68e8      	ldr	r0, [r5, #12]
    991a:	f004 faf4 	bl	df06 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    991e:	4604      	mov	r4, r0
    9920:	68e8      	ldr	r0, [r5, #12]
    9922:	f004 faf4 	bl	df0e <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    9926:	4601      	mov	r1, r0
    9928:	4620      	mov	r0, r4
    992a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    992e:	f000 b91b 	b.w	9b68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    9932:	0000      	.short	0x0000
    9934:	20000160 	.word	0x20000160
    9938:	480a      	ldr	r0, [pc, #40]	; (9964 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    993a:	68c0      	ldr	r0, [r0, #12]
    993c:	7901      	ldrb	r1, [r0, #4]
    993e:	4809      	ldr	r0, [pc, #36]	; (9964 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    9940:	3010      	adds	r0, #16
    9942:	6840      	ldr	r0, [r0, #4]
    9944:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    9948:	2822      	cmp	r0, #34	; 0x22
    994a:	d007      	beq.n	995c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    994c:	282e      	cmp	r0, #46	; 0x2e
    994e:	d005      	beq.n	995c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    9950:	2829      	cmp	r0, #41	; 0x29
    9952:	d005      	beq.n	9960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1624>
    9954:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    9958:	f000 b906 	b.w	9b68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    995c:	2016      	movs	r0, #22
    995e:	e7fb      	b.n	9958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9960:	2023      	movs	r0, #35	; 0x23
    9962:	e7f9      	b.n	9958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9964:	20000160 	.word	0x20000160
    9968:	b510      	push	{r4, lr}
    996a:	4604      	mov	r4, r0
    996c:	6840      	ldr	r0, [r0, #4]
    996e:	2301      	movs	r3, #1
    9970:	4619      	mov	r1, r3
    9972:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9976:	3080      	adds	r0, #128	; 0x80
    9978:	f003 ffc7 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    997c:	b108      	cbz	r0, 9982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    997e:	2000      	movs	r0, #0
    9980:	bd10      	pop	{r4, pc}
    9982:	4806      	ldr	r0, [pc, #24]	; (999c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1660>)
    9984:	68c0      	ldr	r0, [r0, #12]
    9986:	f004 faec 	bl	df62 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    998a:	6861      	ldr	r1, [r4, #4]
    998c:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    9990:	6861      	ldr	r1, [r4, #4]
    9992:	2007      	movs	r0, #7
    9994:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    9998:	e7f1      	b.n	997e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1642>
    999a:	0000      	.short	0x0000
    999c:	20000160 	.word	0x20000160
    99a0:	b570      	push	{r4, r5, r6, lr}
    99a2:	4604      	mov	r4, r0
    99a4:	483a      	ldr	r0, [pc, #232]	; (9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    99a6:	6861      	ldr	r1, [r4, #4]
    99a8:	2500      	movs	r5, #0
    99aa:	68c0      	ldr	r0, [r0, #12]
    99ac:	7902      	ldrb	r2, [r0, #4]
    99ae:	f891 0095 	ldrb.w	r0, [r1, #149]	; 0x95
    99b2:	2a16      	cmp	r2, #22
    99b4:	d034      	beq.n	9a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    99b6:	dc06      	bgt.n	99c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    99b8:	2a0e      	cmp	r2, #14
    99ba:	d009      	beq.n	99d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    99bc:	2a12      	cmp	r2, #18
    99be:	d01b      	beq.n	99f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    99c0:	2a14      	cmp	r2, #20
    99c2:	d162      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99c4:	e01f      	b.n	9a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    99c6:	2a17      	cmp	r2, #23
    99c8:	d043      	beq.n	9a52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1716>
    99ca:	2a23      	cmp	r2, #35	; 0x23
    99cc:	d15d      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99ce:	e055      	b.n	9a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1740>
    99d0:	2804      	cmp	r0, #4
    99d2:	d15a      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99d4:	4620      	mov	r0, r4
    99d6:	f005 fc6a 	bl	f2ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    99da:	482d      	ldr	r0, [pc, #180]	; (9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    99dc:	2207      	movs	r2, #7
    99de:	3010      	adds	r0, #16
    99e0:	6841      	ldr	r1, [r0, #4]
    99e2:	8808      	ldrh	r0, [r1, #0]
    99e4:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    99e8:	201a      	movs	r0, #26
    99ea:	f881 01ae 	strb.w	r0, [r1, #430]	; 0x1ae
    99ee:	f501 70d2 	add.w	r0, r1, #420	; 0x1a4
    99f2:	f7fc fd1d 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    99f6:	e048      	b.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99f8:	2810      	cmp	r0, #16
    99fa:	d146      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99fc:	4620      	mov	r0, r4
    99fe:	f005 fc74 	bl	f2ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xd6>
    9a02:	4605      	mov	r5, r0
    9a04:	e041      	b.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a06:	281e      	cmp	r0, #30
    9a08:	d13f      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a0a:	4620      	mov	r0, r4
    9a0c:	f005 fc4f 	bl	f2ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9a10:	6860      	ldr	r0, [r4, #4]
    9a12:	2105      	movs	r1, #5
    9a14:	30e4      	adds	r0, #228	; 0xe4
    9a16:	f005 fbbd 	bl	f194 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a1a:	f7fe ff71 	bl	8900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    9a1e:	e034      	b.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a20:	2822      	cmp	r0, #34	; 0x22
    9a22:	d001      	beq.n	9a28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ec>
    9a24:	282e      	cmp	r0, #46	; 0x2e
    9a26:	d130      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a28:	4620      	mov	r0, r4
    9a2a:	f005 fc40 	bl	f2ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9a2e:	6860      	ldr	r0, [r4, #4]
    9a30:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9a34:	2923      	cmp	r1, #35	; 0x23
    9a36:	d028      	beq.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a38:	2108      	movs	r1, #8
    9a3a:	30e4      	adds	r0, #228	; 0xe4
    9a3c:	f005 fbaa 	bl	f194 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a40:	6860      	ldr	r0, [r4, #4]
    9a42:	210b      	movs	r1, #11
    9a44:	30e4      	adds	r0, #228	; 0xe4
    9a46:	f005 fba5 	bl	f194 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a4a:	201a      	movs	r0, #26
    9a4c:	f7ff fc42 	bl	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9a50:	e01b      	b.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a52:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    9a56:	2824      	cmp	r0, #36	; 0x24
    9a58:	d117      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a5a:	2600      	movs	r6, #0
    9a5c:	f881 6096 	strb.w	r6, [r1, #150]	; 0x96
    9a60:	f7fe fd7a 	bl	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9a64:	6860      	ldr	r0, [r4, #4]
    9a66:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    9a6a:	2801      	cmp	r0, #1
    9a6c:	d102      	bne.n	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1738>
    9a6e:	2000      	movs	r0, #0
    9a70:	f7ff fc30 	bl	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9a74:	6860      	ldr	r0, [r4, #4]
    9a76:	f880 6134 	strb.w	r6, [r0, #308]	; 0x134
    9a7a:	e006      	b.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a7c:	2829      	cmp	r0, #41	; 0x29
    9a7e:	d104      	bne.n	9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a80:	4804      	ldr	r0, [pc, #16]	; (9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1758>)
    9a82:	6801      	ldr	r1, [r0, #0]
    9a84:	b109      	cbz	r1, 9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a86:	4620      	mov	r0, r4
    9a88:	4788      	blx	r1
    9a8a:	4628      	mov	r0, r5
    9a8c:	bd70      	pop	{r4, r5, r6, pc}
    9a8e:	0000      	.short	0x0000
    9a90:	20000160 	.word	0x20000160
    9a94:	200002d4 	.word	0x200002d4
    9a98:	b570      	push	{r4, r5, r6, lr}
    9a9a:	4604      	mov	r4, r0
    9a9c:	6840      	ldr	r0, [r0, #4]
    9a9e:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    9aa2:	0789      	lsls	r1, r1, #30
    9aa4:	d507      	bpl.n	9ab6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177a>
    9aa6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9aaa:	2301      	movs	r3, #1
    9aac:	2108      	movs	r1, #8
    9aae:	3080      	adds	r0, #128	; 0x80
    9ab0:	f003 ff2b 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ab4:	b308      	cbz	r0, 9afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17be>
    9ab6:	6860      	ldr	r0, [r4, #4]
    9ab8:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    9abc:	0780      	lsls	r0, r0, #30
    9abe:	d416      	bmi.n	9aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    9ac0:	4d28      	ldr	r5, [pc, #160]	; (9b64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    9ac2:	68e8      	ldr	r0, [r5, #12]
    9ac4:	f004 fa4f 	bl	df66 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    9ac8:	6861      	ldr	r1, [r4, #4]
    9aca:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
    9ace:	68e8      	ldr	r0, [r5, #12]
    9ad0:	6862      	ldr	r2, [r4, #4]
    9ad2:	f830 1f05 	ldrh.w	r1, [r0, #5]!
    9ad6:	f8a2 10e0 	strh.w	r1, [r2, #224]	; 0xe0
    9ada:	6861      	ldr	r1, [r4, #4]
    9adc:	8840      	ldrh	r0, [r0, #2]
    9ade:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    9ae2:	6860      	ldr	r0, [r4, #4]
    9ae4:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    9ae8:	f041 0102 	orr.w	r1, r1, #2
    9aec:	7001      	strb	r1, [r0, #0]
    9aee:	6860      	ldr	r0, [r4, #4]
    9af0:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    9af4:	07c9      	lsls	r1, r1, #31
    9af6:	d002      	beq.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c2>
    9af8:	e015      	b.n	9b26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ea>
    9afa:	2001      	movs	r0, #1
    9afc:	bd70      	pop	{r4, r5, r6, pc}
    9afe:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    9b02:	078a      	lsls	r2, r1, #30
    9b04:	d504      	bpl.n	9b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>
    9b06:	f240 3155 	movw	r1, #853	; 0x355
    9b0a:	2031      	movs	r0, #49	; 0x31
    9b0c:	f7fa fd1e 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b10:	f041 0102 	orr.w	r1, r1, #2
    9b14:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    9b18:	f7fe fd12 	bl	8540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9b1c:	6860      	ldr	r0, [r4, #4]
    9b1e:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    9b22:	07c0      	lsls	r0, r0, #31
    9b24:	d005      	beq.n	9b32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f6>
    9b26:	6861      	ldr	r1, [r4, #4]
    9b28:	2203      	movs	r2, #3
    9b2a:	f101 00d6 	add.w	r0, r1, #214	; 0xd6
    9b2e:	f7fc fc7f 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9b32:	6861      	ldr	r1, [r4, #4]
    9b34:	2000      	movs	r0, #0
    9b36:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    9b3a:	2a06      	cmp	r2, #6
    9b3c:	d104      	bne.n	9b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x180c>
    9b3e:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9b42:	6861      	ldr	r1, [r4, #4]
    9b44:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9b48:	6861      	ldr	r1, [r4, #4]
    9b4a:	f891 213a 	ldrb.w	r2, [r1, #314]	; 0x13a
    9b4e:	b13a      	cbz	r2, 9b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    9b50:	f881 013a 	strb.w	r0, [r1, #314]	; 0x13a
    9b54:	6861      	ldr	r1, [r4, #4]
    9b56:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    9b5a:	b90a      	cbnz	r2, 9b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    9b5c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9b60:	2000      	movs	r0, #0
    9b62:	bd70      	pop	{r4, r5, r6, pc}
    9b64:	20000160 	.word	0x20000160
    9b68:	4603      	mov	r3, r0
    9b6a:	2000      	movs	r0, #0
    9b6c:	2b16      	cmp	r3, #22
    9b6e:	d00b      	beq.n	9b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    9b70:	2b23      	cmp	r3, #35	; 0x23
    9b72:	d003      	beq.n	9b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    9b74:	2b24      	cmp	r3, #36	; 0x24
    9b76:	d001      	beq.n	9b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    9b78:	2b25      	cmp	r3, #37	; 0x25
    9b7a:	d108      	bne.n	9b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    9b7c:	4a04      	ldr	r2, [pc, #16]	; (9b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>)
    9b7e:	6812      	ldr	r2, [r2, #0]
    9b80:	2a00      	cmp	r2, #0
    9b82:	d004      	beq.n	9b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    9b84:	4618      	mov	r0, r3
    9b86:	4710      	bx	r2
    9b88:	4608      	mov	r0, r1
    9b8a:	f7ff bbc5 	b.w	9318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    9b8e:	4770      	bx	lr
    9b90:	200002d0 	.word	0x200002d0
    9b94:	4a03      	ldr	r2, [pc, #12]	; (9ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>)
    9b96:	6852      	ldr	r2, [r2, #4]
    9b98:	f882 011b 	strb.w	r0, [r2, #283]	; 0x11b
    9b9c:	f882 111a 	strb.w	r1, [r2, #282]	; 0x11a
    9ba0:	4770      	bx	lr
    9ba2:	0000      	.short	0x0000
    9ba4:	20000170 	.word	0x20000170
    9ba8:	4915      	ldr	r1, [pc, #84]	; (9c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c4>)
    9baa:	b510      	push	{r4, lr}
    9bac:	6889      	ldr	r1, [r1, #8]
    9bae:	790a      	ldrb	r2, [r1, #4]
    9bb0:	6841      	ldr	r1, [r0, #4]
    9bb2:	f891 3095 	ldrb.w	r3, [r1, #149]	; 0x95
    9bb6:	2b0a      	cmp	r3, #10
    9bb8:	d10a      	bne.n	9bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    9bba:	f891 3119 	ldrb.w	r3, [r1, #281]	; 0x119
    9bbe:	4293      	cmp	r3, r2
    9bc0:	d106      	bne.n	9bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    9bc2:	2200      	movs	r2, #0
    9bc4:	f881 2095 	strb.w	r2, [r1, #149]	; 0x95
    9bc8:	6840      	ldr	r0, [r0, #4]
    9bca:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce
    9bce:	bd10      	pop	{r4, pc}
    9bd0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    9bd4:	071c      	lsls	r4, r3, #28
    9bd6:	d507      	bpl.n	9be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>
    9bd8:	f023 0008 	bic.w	r0, r3, #8
    9bdc:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    9be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9be4:	f7fe bcb8 	b.w	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9be8:	2aff      	cmp	r2, #255	; 0xff
    9bea:	d004      	beq.n	9bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ba>
    9bec:	f240 719c 	movw	r1, #1948	; 0x79c
    9bf0:	2031      	movs	r0, #49	; 0x31
    9bf2:	f7fa fcab 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9bfa:	f005 bc0e 	b.w	f41a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    9bfe:	0000      	.short	0x0000
    9c00:	20000160 	.word	0x20000160
    9c04:	4808      	ldr	r0, [pc, #32]	; (9c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ec>)
    9c06:	b510      	push	{r4, lr}
    9c08:	6840      	ldr	r0, [r0, #4]
    9c0a:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    9c0e:	b941      	cbnz	r1, 9c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e6>
    9c10:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9c14:	2301      	movs	r3, #1
    9c16:	2106      	movs	r1, #6
    9c18:	3080      	adds	r0, #128	; 0x80
    9c1a:	f003 fe76 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c1e:	2800      	cmp	r0, #0
    9c20:	d000      	beq.n	9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e8>
    9c22:	2001      	movs	r0, #1
    9c24:	bd10      	pop	{r4, pc}
    9c26:	0000      	.short	0x0000
    9c28:	20000170 	.word	0x20000170
    9c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c2e:	4c5e      	ldr	r4, [pc, #376]	; (9da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9c30:	4607      	mov	r7, r0
    9c32:	4615      	mov	r5, r2
    9c34:	6860      	ldr	r0, [r4, #4]
    9c36:	2200      	movs	r2, #0
    9c38:	b111      	cbz	r1, 9c40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1904>
    9c3a:	f8a0 2226 	strh.w	r2, [r0, #550]	; 0x226
    9c3e:	e006      	b.n	9c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1912>
    9c40:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    9c44:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
    9c48:	4411      	add	r1, r2
    9c4a:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    9c4e:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    9c52:	f88d 1000 	strb.w	r1, [sp]
    9c56:	9900      	ldr	r1, [sp, #0]
    9c58:	9100      	str	r1, [sp, #0]
    9c5a:	f89d 1000 	ldrb.w	r1, [sp]
    9c5e:	b939      	cbnz	r1, 9c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1934>
    9c60:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9c64:	2301      	movs	r3, #1
    9c66:	4619      	mov	r1, r3
    9c68:	3080      	adds	r0, #128	; 0x80
    9c6a:	f003 fe4e 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c6e:	b130      	cbz	r0, 9c7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    9c70:	6860      	ldr	r0, [r4, #4]
    9c72:	f830 1fc8 	ldrh.w	r1, [r0, #200]!
    9c76:	f8b0 214e 	ldrh.w	r2, [r0, #334]	; 0x14e
    9c7a:	4411      	add	r1, r2
    9c7c:	8001      	strh	r1, [r0, #0]
    9c7e:	6861      	ldr	r1, [r4, #4]
    9c80:	f891 00ce 	ldrb.w	r0, [r1, #206]	; 0xce
    9c84:	b130      	cbz	r0, 9c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1958>
    9c86:	f8b1 20ca 	ldrh.w	r2, [r1, #202]	; 0xca
    9c8a:	f8b1 3216 	ldrh.w	r3, [r1, #534]	; 0x216
    9c8e:	441a      	add	r2, r3
    9c90:	f8a1 20ca 	strh.w	r2, [r1, #202]	; 0xca
    9c94:	f991 20d2 	ldrsb.w	r2, [r1, #210]	; 0xd2
    9c98:	2a00      	cmp	r2, #0
    9c9a:	dd06      	ble.n	9caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    9c9c:	f8b1 30d0 	ldrh.w	r3, [r1, #208]	; 0xd0
    9ca0:	f8b1 6216 	ldrh.w	r6, [r1, #534]	; 0x216
    9ca4:	4433      	add	r3, r6
    9ca6:	f8a1 30d0 	strh.w	r3, [r1, #208]	; 0xd0
    9caa:	263d      	movs	r6, #61	; 0x3d
    9cac:	b117      	cbz	r7, 9cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    9cae:	f881 60b5 	strb.w	r6, [r1, #181]	; 0xb5
    9cb2:	e016      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9cb4:	4b3c      	ldr	r3, [pc, #240]	; (9da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9cb6:	3b10      	subs	r3, #16
    9cb8:	781b      	ldrb	r3, [r3, #0]
    9cba:	2b02      	cmp	r3, #2
    9cbc:	d00b      	beq.n	9cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199a>
    9cbe:	2b01      	cmp	r3, #1
    9cc0:	d015      	beq.n	9cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b2>
    9cc2:	b36d      	cbz	r5, 9d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>
    9cc4:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9cc8:	220a      	movs	r2, #10
    9cca:	f7fc fbb1 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9cce:	06e8      	lsls	r0, r5, #27
    9cd0:	d510      	bpl.n	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    9cd2:	201e      	movs	r0, #30
    9cd4:	e01b      	b.n	9d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    9cd6:	f891 011e 	ldrb.w	r0, [r1, #286]	; 0x11e
    9cda:	2806      	cmp	r0, #6
    9cdc:	d048      	beq.n	9d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9cde:	2016      	movs	r0, #22
    9ce0:	e046      	b.n	9d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9ce2:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9ce6:	220a      	movs	r2, #10
    9ce8:	f7fc fba2 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9cec:	e049      	b.n	9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9cee:	f891 0098 	ldrb.w	r0, [r1, #152]	; 0x98
    9cf2:	e03d      	b.n	9d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9cf4:	0728      	lsls	r0, r5, #28
    9cf6:	d503      	bpl.n	9d00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    9cf8:	6860      	ldr	r0, [r4, #4]
    9cfa:	f880 60b5 	strb.w	r6, [r0, #181]	; 0xb5
    9cfe:	e040      	b.n	9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d00:	06a8      	lsls	r0, r5, #26
    9d02:	d501      	bpl.n	9d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19cc>
    9d04:	2023      	movs	r0, #35	; 0x23
    9d06:	e002      	b.n	9d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    9d08:	07a8      	lsls	r0, r5, #30
    9d0a:	d004      	beq.n	9d16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19da>
    9d0c:	202a      	movs	r0, #42	; 0x2a
    9d0e:	6861      	ldr	r1, [r4, #4]
    9d10:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9d14:	e035      	b.n	9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d16:	f640 51e9 	movw	r1, #3561	; 0xde9
    9d1a:	2031      	movs	r0, #49	; 0x31
    9d1c:	f7fa fc16 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d20:	b128      	cbz	r0, 9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f2>
    9d22:	f8b1 00ca 	ldrh.w	r0, [r1, #202]	; 0xca
    9d26:	f8b1 30cc 	ldrh.w	r3, [r1, #204]	; 0xcc
    9d2a:	4298      	cmp	r0, r3
    9d2c:	d216      	bcs.n	9d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    9d2e:	2a00      	cmp	r2, #0
    9d30:	dd05      	ble.n	9d3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a02>
    9d32:	f8b1 00d0 	ldrh.w	r0, [r1, #208]	; 0xd0
    9d36:	f8b1 20cc 	ldrh.w	r2, [r1, #204]	; 0xcc
    9d3a:	4290      	cmp	r0, r2
    9d3c:	d20e      	bcs.n	9d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    9d3e:	f8b1 20c8 	ldrh.w	r2, [r1, #200]	; 0xc8
    9d42:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    9d46:	4282      	cmp	r2, r0
    9d48:	d30a      	bcc.n	9d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    9d4a:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    9d4e:	f88d 2000 	strb.w	r2, [sp]
    9d52:	9a00      	ldr	r2, [sp, #0]
    9d54:	9200      	str	r2, [sp, #0]
    9d56:	f89d 2000 	ldrb.w	r2, [sp]
    9d5a:	b10a      	cbz	r2, 9d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    9d5c:	2022      	movs	r0, #34	; 0x22
    9d5e:	e007      	b.n	9d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9d60:	f891 2099 	ldrb.w	r2, [r1, #153]	; 0x99
    9d64:	b13a      	cbz	r2, 9d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3a>
    9d66:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    9d6a:	4282      	cmp	r2, r0
    9d6c:	d309      	bcc.n	9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d6e:	2008      	movs	r0, #8
    9d70:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9d74:	e7b5      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9d76:	f8b1 00c4 	ldrh.w	r0, [r1, #196]	; 0xc4
    9d7a:	2806      	cmp	r0, #6
    9d7c:	d301      	bcc.n	9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d7e:	203e      	movs	r0, #62	; 0x3e
    9d80:	e7f6      	b.n	9d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9d82:	6860      	ldr	r0, [r4, #4]
    9d84:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9d88:	f88d 1000 	strb.w	r1, [sp]
    9d8c:	9900      	ldr	r1, [sp, #0]
    9d8e:	9100      	str	r1, [sp, #0]
    9d90:	f89d 1000 	ldrb.w	r1, [sp]
    9d94:	b119      	cbz	r1, 9d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a62>
    9d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9d9a:	f005 ba3b 	b.w	f214 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9d9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9da2:	2100      	movs	r1, #0
    9da4:	f7fd be92 	b.w	7acc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9da8:	20000170 	.word	0x20000170
    9dac:	b570      	push	{r4, r5, r6, lr}
    9dae:	4d2e      	ldr	r5, [pc, #184]	; (9e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b2c>)
    9db0:	6868      	ldr	r0, [r5, #4]
    9db2:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    9db6:	b151      	cbz	r1, 9dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9db8:	2901      	cmp	r1, #1
    9dba:	d008      	beq.n	9dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9dbc:	2902      	cmp	r1, #2
    9dbe:	d009      	beq.n	9dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9dc0:	2903      	cmp	r1, #3
    9dc2:	d007      	beq.n	9dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9dc4:	f640 4159 	movw	r1, #3161	; 0xc59
    9dc8:	2031      	movs	r0, #49	; 0x31
    9dca:	f7fa fbbf 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9dce:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    9dd2:	e037      	b.n	9e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    9dd4:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    9dd8:	2908      	cmp	r1, #8
    9dda:	d036      	beq.n	9e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    9ddc:	f8b0 20c4 	ldrh.w	r2, [r0, #196]	; 0xc4
    9de0:	f8b0 10c6 	ldrh.w	r1, [r0, #198]	; 0xc6
    9de4:	2400      	movs	r4, #0
    9de6:	1c93      	adds	r3, r2, #2
    9de8:	4299      	cmp	r1, r3
    9dea:	d306      	bcc.n	9dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    9dec:	1a89      	subs	r1, r1, r2
    9dee:	1e89      	subs	r1, r1, #2
    9df0:	040c      	lsls	r4, r1, #16
    9df2:	0c24      	lsrs	r4, r4, #16
    9df4:	d001      	beq.n	9dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    9df6:	1e64      	subs	r4, r4, #1
    9df8:	b2a4      	uxth	r4, r4
    9dfa:	f890 10c2 	ldrb.w	r1, [r0, #194]	; 0xc2
    9dfe:	b139      	cbz	r1, 9e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ad4>
    9e00:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9e04:	2301      	movs	r3, #1
    9e06:	2109      	movs	r1, #9
    9e08:	3080      	adds	r0, #128	; 0x80
    9e0a:	f003 fd7e 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e0e:	b340      	cbz	r0, 9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b26>
    9e10:	f7ff fef8 	bl	9c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    9e14:	b178      	cbz	r0, 9e36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    9e16:	686a      	ldr	r2, [r5, #4]
    9e18:	2000      	movs	r0, #0
    9e1a:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
    9e1e:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    9e22:	1c93      	adds	r3, r2, #2
    9e24:	4299      	cmp	r1, r3
    9e26:	d303      	bcc.n	9e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9e28:	1a88      	subs	r0, r1, r2
    9e2a:	1e80      	subs	r0, r0, #2
    9e2c:	d000      	beq.n	9e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9e2e:	1e40      	subs	r0, r0, #1
    9e30:	42a0      	cmp	r0, r4
    9e32:	d200      	bcs.n	9e36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    9e34:	b284      	uxth	r4, r0
    9e36:	b10c      	cbz	r4, 9e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    9e38:	1e64      	subs	r4, r4, #1
    9e3a:	b2a4      	uxth	r4, r4
    9e3c:	6868      	ldr	r0, [r5, #4]
    9e3e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    9e42:	4421      	add	r1, r4
    9e44:	f8a0 1210 	strh.w	r1, [r0, #528]	; 0x210
    9e48:	bd70      	pop	{r4, r5, r6, pc}
    9e4a:	f8b0 10c4 	ldrh.w	r1, [r0, #196]	; 0xc4
    9e4e:	2903      	cmp	r1, #3
    9e50:	d3bd      	bcc.n	9dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9e52:	f830 1f8c 	ldrh.w	r1, [r0, #140]!
    9e56:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    9e58:	4411      	add	r1, r2
    9e5a:	1c49      	adds	r1, r1, #1
    9e5c:	f8a0 1184 	strh.w	r1, [r0, #388]	; 0x184
    9e60:	bd70      	pop	{r4, r5, r6, pc}
    9e62:	2400      	movs	r4, #0
    9e64:	e7ea      	b.n	9e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    9e66:	0000      	.short	0x0000
    9e68:	20000170 	.word	0x20000170

00009e6c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9e6c:	4903      	ldr	r1, [pc, #12]	; (9e7c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9e6e:	884a      	ldrh	r2, [r1, #2]
    9e70:	8002      	strh	r2, [r0, #0]
    9e72:	7809      	ldrb	r1, [r1, #0]
    9e74:	7081      	strb	r1, [r0, #2]
    9e76:	2000      	movs	r0, #0
    9e78:	4770      	bx	lr
    9e7a:	0000      	.short	0x0000
    9e7c:	200012c4 	.word	0x200012c4

00009e80 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9e80:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9e82:	460c      	mov	r4, r1
    9e84:	4605      	mov	r5, r0
    9e86:	8800      	ldrh	r0, [r0, #0]
    9e88:	4669      	mov	r1, sp
    9e8a:	f003 fd14 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9e8e:	2200      	movs	r2, #0
    9e90:	b128      	cbz	r0, 9e9e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    9e92:	f8c4 2002 	str.w	r2, [r4, #2]
    9e96:	71a2      	strb	r2, [r4, #6]
    9e98:	8022      	strh	r2, [r4, #0]
    9e9a:	2002      	movs	r0, #2
    9e9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9e9e:	9901      	ldr	r1, [sp, #4]
    9ea0:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    9ea4:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    9ea8:	f8d1 001e 	ldr.w	r0, [r1, #30]
    9eac:	f8c4 0002 	str.w	r0, [r4, #2]
    9eb0:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
    9eb4:	71a0      	strb	r0, [r4, #6]
    9eb6:	8828      	ldrh	r0, [r5, #0]
    9eb8:	8020      	strh	r0, [r4, #0]
    9eba:	f891 006c 	ldrb.w	r0, [r1, #108]	; 0x6c
    9ebe:	f88d 0008 	strb.w	r0, [sp, #8]
    9ec2:	9802      	ldr	r0, [sp, #8]
    9ec4:	9002      	str	r0, [sp, #8]
    9ec6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9eca:	2800      	cmp	r0, #0
    9ecc:	d1ea      	bne.n	9ea4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    9ece:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009ed0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9ed0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9ed2:	460d      	mov	r5, r1
    9ed4:	4606      	mov	r6, r0
    9ed6:	8800      	ldrh	r0, [r0, #0]
    9ed8:	4669      	mov	r1, sp
    9eda:	f003 fcec 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9ede:	2800      	cmp	r0, #0
    9ee0:	d11a      	bne.n	9f18 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9ee2:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9ee6:	2700      	movs	r7, #0
    9ee8:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    9eec:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    9ef0:	f006 f989 	bl	10206 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    9ef4:	70a8      	strb	r0, [r5, #2]
    9ef6:	7860      	ldrb	r0, [r4, #1]
    9ef8:	f006 f985 	bl	10206 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    9efc:	70e8      	strb	r0, [r5, #3]
    9efe:	78a0      	ldrb	r0, [r4, #2]
    9f00:	f88d 0008 	strb.w	r0, [sp, #8]
    9f04:	9802      	ldr	r0, [sp, #8]
    9f06:	9002      	str	r0, [sp, #8]
    9f08:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9f0c:	3c6a      	subs	r4, #106	; 0x6a
    9f0e:	2800      	cmp	r0, #0
    9f10:	d1ea      	bne.n	9ee8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    9f12:	8830      	ldrh	r0, [r6, #0]
    9f14:	8028      	strh	r0, [r5, #0]
    9f16:	2000      	movs	r0, #0
    9f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009f1c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9f1c:	4903      	ldr	r1, [pc, #12]	; (9f2c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    9f1e:	888a      	ldrh	r2, [r1, #4]
    9f20:	8002      	strh	r2, [r0, #0]
    9f22:	88c9      	ldrh	r1, [r1, #6]
    9f24:	8041      	strh	r1, [r0, #2]
    9f26:	2000      	movs	r0, #0
    9f28:	4770      	bx	lr
    9f2a:	0000      	.short	0x0000
    9f2c:	200002e0 	.word	0x200002e0

00009f30 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9f30:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9f32:	2400      	movs	r4, #0
    9f34:	a902      	add	r1, sp, #8
    9f36:	f88d 4004 	strb.w	r4, [sp, #4]
    9f3a:	f88d 4008 	strb.w	r4, [sp, #8]
    9f3e:	9100      	str	r1, [sp, #0]
    9f40:	7882      	ldrb	r2, [r0, #2]
    9f42:	7841      	ldrb	r1, [r0, #1]
    9f44:	7800      	ldrb	r0, [r0, #0]
    9f46:	ab01      	add	r3, sp, #4
    9f48:	f006 fad0 	bl	104ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    9f4c:	2800      	cmp	r0, #0
    9f4e:	d112      	bne.n	9f76 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    9f50:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9f54:	f006 fa0b 	bl	1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    9f58:	b170      	cbz	r0, 9f78 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    9f5a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9f5e:	f006 fa06 	bl	1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    9f62:	b148      	cbz	r0, 9f78 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    9f64:	4805      	ldr	r0, [pc, #20]	; (9f7c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    9f66:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9f6a:	7381      	strb	r1, [r0, #14]
    9f6c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9f70:	73c1      	strb	r1, [r0, #15]
    9f72:	8204      	strh	r4, [r0, #16]
    9f74:	2000      	movs	r0, #0
    9f76:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f78:	2011      	movs	r0, #17
    9f7a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f7c:	200012c4 	.word	0x200012c4

00009f80 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    9f80:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9f84:	460f      	mov	r7, r1
    9f86:	4605      	mov	r5, r0
    9f88:	7806      	ldrb	r6, [r0, #0]
    9f8a:	f006 f9a3 	bl	102d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    9f8e:	2800      	cmp	r0, #0
    9f90:	d10a      	bne.n	9fa8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9f92:	4628      	mov	r0, r5
    9f94:	f006 f978 	bl	10288 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    9f98:	2800      	cmp	r0, #0
    9f9a:	d105      	bne.n	9fa8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9f9c:	2001      	movs	r0, #1
    9f9e:	f7fa fcc5 	bl	492c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    9fa2:	4286      	cmp	r6, r0
    9fa4:	d302      	bcc.n	9fac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    9fa6:	2007      	movs	r0, #7
    9fa8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9fac:	2101      	movs	r1, #1
    9fae:	4630      	mov	r0, r6
    9fb0:	f003 fa0a 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9fb4:	0004      	movs	r4, r0
    9fb6:	d004      	beq.n	9fc2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    9fb8:	f004 fd71 	bl	ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9fbc:	b168      	cbz	r0, 9fda <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    9fbe:	200c      	movs	r0, #12
    9fc0:	e7f2      	b.n	9fa8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9fc2:	2101      	movs	r1, #1
    9fc4:	4630      	mov	r0, r6
    9fc6:	f003 f9f5 	bl	d3b4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    9fca:	0004      	movs	r4, r0
    9fcc:	d013      	beq.n	9ff6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    9fce:	4817      	ldr	r0, [pc, #92]	; (a02c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    9fd0:	f990 1000 	ldrsb.w	r1, [r0]
    9fd4:	4620      	mov	r0, r4
    9fd6:	f004 fad6 	bl	e586 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    9fda:	4620      	mov	r0, r4
    9fdc:	f004 fba7 	bl	e72e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    9fe0:	7038      	strb	r0, [r7, #0]
    9fe2:	74e8      	strb	r0, [r5, #19]
    9fe4:	4629      	mov	r1, r5
    9fe6:	4620      	mov	r0, r4
    9fe8:	f7fc fdca 	bl	6b80 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    9fec:	4606      	mov	r6, r0
    9fee:	7e68      	ldrb	r0, [r5, #25]
    9ff0:	b1d0      	cbz	r0, a028 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    9ff2:	b12e      	cbz	r6, a000 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    9ff4:	e018      	b.n	a028 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    9ff6:	f241 3162 	movw	r1, #4962	; 0x1362
    9ffa:	2039      	movs	r0, #57	; 0x39
    9ffc:	f7fa faa6 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a000:	2200      	movs	r2, #0
    a002:	4668      	mov	r0, sp
    a004:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a006:	f003 fa91 	bl	d52c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a00a:	2200      	movs	r2, #0
    a00c:	2101      	movs	r1, #1
    a00e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a010:	f003 fb02 	bl	d618 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a014:	2204      	movs	r2, #4
    a016:	4668      	mov	r0, sp
    a018:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a01a:	f003 fa87 	bl	d52c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a01e:	2200      	movs	r2, #0
    a020:	4611      	mov	r1, r2
    a022:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a024:	f003 faf8 	bl	d618 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a028:	4630      	mov	r0, r6
    a02a:	e7bd      	b.n	9fa8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a02c:	200002d8 	.word	0x200002d8

0000a030 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a030:	7801      	ldrb	r1, [r0, #0]
    a032:	b171      	cbz	r1, a052 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a034:	7841      	ldrb	r1, [r0, #1]
    a036:	b161      	cbz	r1, a052 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a038:	8841      	ldrh	r1, [r0, #2]
    a03a:	291b      	cmp	r1, #27
    a03c:	d309      	bcc.n	a052 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a03e:	8881      	ldrh	r1, [r0, #4]
    a040:	291b      	cmp	r1, #27
    a042:	d306      	bcc.n	a052 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a044:	4904      	ldr	r1, [pc, #16]	; (a058 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a046:	6802      	ldr	r2, [r0, #0]
    a048:	600a      	str	r2, [r1, #0]
    a04a:	8880      	ldrh	r0, [r0, #4]
    a04c:	8088      	strh	r0, [r1, #4]
    a04e:	2000      	movs	r0, #0
    a050:	4770      	bx	lr
    a052:	2012      	movs	r0, #18
    a054:	4770      	bx	lr
    a056:	0000      	.short	0x0000
    a058:	200012c4 	.word	0x200012c4

0000a05c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a05c:	6800      	ldr	r0, [r0, #0]
    a05e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a062:	4288      	cmp	r0, r1
    a064:	d303      	bcc.n	a06e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a066:	4903      	ldr	r1, [pc, #12]	; (a074 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a068:	6088      	str	r0, [r1, #8]
    a06a:	2000      	movs	r0, #0
    a06c:	4770      	bx	lr
    a06e:	2012      	movs	r0, #18
    a070:	4770      	bx	lr
    a072:	0000      	.short	0x0000
    a074:	200012c4 	.word	0x200012c4

0000a078 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a078:	4a03      	ldr	r2, [pc, #12]	; (a088 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a07a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    a07e:	6001      	str	r1, [r0, #0]
    a080:	6042      	str	r2, [r0, #4]
    a082:	2000      	movs	r0, #0
    a084:	4770      	bx	lr
    a086:	0000      	.short	0x0000
    a088:	0000a55c 	.word	0x0000a55c

0000a08c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    a08c:	b510      	push	{r4, lr}
    a08e:	2005      	movs	r0, #5
    a090:	f000 faee 	bl	a670 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a094:	f7fe f8aa 	bl	81ec <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a098:	4902      	ldr	r1, [pc, #8]	; (a0a4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    a09a:	4801      	ldr	r0, [pc, #4]	; (a0a0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    a09c:	6048      	str	r0, [r1, #4]
    a09e:	bd10      	pop	{r4, pc}
    a0a0:	0000a0d5 	.word	0x0000a0d5
    a0a4:	200002d8 	.word	0x200002d8
    a0a8:	b51c      	push	{r2, r3, r4, lr}
    a0aa:	4909      	ldr	r1, [pc, #36]	; (a0d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    a0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
    a0b0:	e9cd 0100 	strd	r0, r1, [sp]
    a0b4:	e005      	b.n	a0c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    a0b6:	9800      	ldr	r0, [sp, #0]
    a0b8:	f004 fcf1 	bl	ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a0bc:	b108      	cbz	r0, a0c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    a0be:	2001      	movs	r0, #1
    a0c0:	bd1c      	pop	{r2, r3, r4, pc}
    a0c2:	4668      	mov	r0, sp
    a0c4:	f7fa fc7c 	bl	49c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a0c8:	2800      	cmp	r0, #0
    a0ca:	d0f4      	beq.n	a0b6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    a0cc:	2000      	movs	r0, #0
    a0ce:	bd1c      	pop	{r2, r3, r4, pc}
    a0d0:	0000a55c 	.word	0x0000a55c
    a0d4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    a0d8:	4613      	mov	r3, r2
    a0da:	4a33      	ldr	r2, [pc, #204]	; (a1a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    a0dc:	460f      	mov	r7, r1
    a0de:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    a0e2:	8814      	ldrh	r4, [r2, #0]
    a0e4:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    a0e8:	428c      	cmp	r4, r1
    a0ea:	d200      	bcs.n	a0ee <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    a0ec:	4621      	mov	r1, r4
    a0ee:	4688      	mov	r8, r1
    a0f0:	8891      	ldrh	r1, [r2, #4]
    a0f2:	42b1      	cmp	r1, r6
    a0f4:	d200      	bcs.n	a0f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    a0f6:	460e      	mov	r6, r1
    a0f8:	8851      	ldrh	r1, [r2, #2]
    a0fa:	f640 0448 	movw	r4, #2120	; 0x848
    a0fe:	42a1      	cmp	r1, r4
    a100:	d300      	bcc.n	a104 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    a102:	4621      	mov	r1, r4
    a104:	88d5      	ldrh	r5, [r2, #6]
    a106:	42a5      	cmp	r5, r4
    a108:	d300      	bcc.n	a10c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    a10a:	4625      	mov	r5, r4
    a10c:	42a1      	cmp	r1, r4
    a10e:	d200      	bcs.n	a112 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    a110:	460c      	mov	r4, r1
    a112:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a116:	2e1b      	cmp	r6, #27
    a118:	d001      	beq.n	a11e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    a11a:	4295      	cmp	r5, r2
    a11c:	d104      	bne.n	a128 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    a11e:	f1b8 0f1b 	cmp.w	r8, #27
    a122:	d03e      	beq.n	a1a2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a124:	4294      	cmp	r4, r2
    a126:	d03c      	beq.n	a1a2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a128:	466a      	mov	r2, sp
    a12a:	4619      	mov	r1, r3
    a12c:	f006 f942 	bl	103b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a130:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a134:	4641      	mov	r1, r8
    a136:	4540      	cmp	r0, r8
    a138:	d900      	bls.n	a13c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    a13a:	4608      	mov	r0, r1
    a13c:	80f8      	strh	r0, [r7, #6]
    a13e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a142:	42a1      	cmp	r1, r4
    a144:	d800      	bhi.n	a148 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    a146:	460c      	mov	r4, r1
    a148:	813c      	strh	r4, [r7, #8]
    a14a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a14e:	42b1      	cmp	r1, r6
    a150:	d800      	bhi.n	a154 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    a152:	460e      	mov	r6, r1
    a154:	807e      	strh	r6, [r7, #2]
    a156:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a15a:	42a9      	cmp	r1, r5
    a15c:	d800      	bhi.n	a160 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    a15e:	460d      	mov	r5, r1
    a160:	80bd      	strh	r5, [r7, #4]
    a162:	21ff      	movs	r1, #255	; 0xff
    a164:	7039      	strb	r1, [r7, #0]
    a166:	381b      	subs	r0, #27
    a168:	28e0      	cmp	r0, #224	; 0xe0
    a16a:	d902      	bls.n	a172 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    a16c:	f640 51a2 	movw	r1, #3490	; 0xda2
    a170:	e014      	b.n	a19c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a172:	3e1b      	subs	r6, #27
    a174:	2ee0      	cmp	r6, #224	; 0xe0
    a176:	d902      	bls.n	a17e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    a178:	f640 51a4 	movw	r1, #3492	; 0xda4
    a17c:	e00e      	b.n	a19c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a17e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a182:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a186:	4284      	cmp	r4, r0
    a188:	d902      	bls.n	a190 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    a18a:	f640 51a6 	movw	r1, #3494	; 0xda6
    a18e:	e005      	b.n	a19c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a190:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    a194:	4285      	cmp	r5, r0
    a196:	d904      	bls.n	a1a2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a198:	f640 51a8 	movw	r1, #3496	; 0xda8
    a19c:	2039      	movs	r0, #57	; 0x39
    a19e:	f7fa f9d5 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1a2:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    a1a6:	0000      	.short	0x0000
    a1a8:	200002e0 	.word	0x200002e0
    a1ac:	b510      	push	{r4, lr}
    a1ae:	480d      	ldr	r0, [pc, #52]	; (a1e4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    a1b0:	2100      	movs	r1, #0
    a1b2:	4b0d      	ldr	r3, [pc, #52]	; (a1e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    a1b4:	74c1      	strb	r1, [r0, #19]
    a1b6:	8281      	strh	r1, [r0, #20]
    a1b8:	221b      	movs	r2, #27
    a1ba:	801a      	strh	r2, [r3, #0]
    a1bc:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a1c0:	805c      	strh	r4, [r3, #2]
    a1c2:	809a      	strh	r2, [r3, #4]
    a1c4:	80dc      	strh	r4, [r3, #6]
    a1c6:	7381      	strb	r1, [r0, #14]
    a1c8:	73c1      	strb	r1, [r0, #15]
    a1ca:	2303      	movs	r3, #3
    a1cc:	7003      	strb	r3, [r0, #0]
    a1ce:	2302      	movs	r3, #2
    a1d0:	7043      	strb	r3, [r0, #1]
    a1d2:	8042      	strh	r2, [r0, #2]
    a1d4:	8082      	strh	r2, [r0, #4]
    a1d6:	f640 62a6 	movw	r2, #3750	; 0xea6
    a1da:	6082      	str	r2, [r0, #8]
    a1dc:	7481      	strb	r1, [r0, #18]
    a1de:	7301      	strb	r1, [r0, #12]
    a1e0:	bd10      	pop	{r4, pc}
    a1e2:	0000      	.short	0x0000
    a1e4:	200012c4 	.word	0x200012c4
    a1e8:	200002e0 	.word	0x200002e0
    a1ec:	b510      	push	{r4, lr}
    a1ee:	2101      	movs	r1, #1
    a1f0:	2000      	movs	r0, #0
    a1f2:	f003 f8e9 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a1f6:	0004      	movs	r4, r0
    a1f8:	d10a      	bne.n	a210 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    a1fa:	2101      	movs	r1, #1
    a1fc:	f003 f8da 	bl	d3b4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a200:	0004      	movs	r4, r0
    a202:	d007      	beq.n	a214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    a204:	4806      	ldr	r0, [pc, #24]	; (a220 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    a206:	f990 1000 	ldrsb.w	r1, [r0]
    a20a:	4620      	mov	r0, r4
    a20c:	f004 f9bb 	bl	e586 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a210:	4620      	mov	r0, r4
    a212:	bd10      	pop	{r4, pc}
    a214:	f240 2167 	movw	r1, #615	; 0x267
    a218:	2039      	movs	r0, #57	; 0x39
    a21a:	f7fa f997 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a21e:	0000      	.short	0x0000
    a220:	200002d8 	.word	0x200002d8

0000a224 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a228:	b087      	sub	sp, #28
    a22a:	460c      	mov	r4, r1
    a22c:	4680      	mov	r8, r0
    a22e:	4605      	mov	r5, r0
    a230:	f004 fa80 	bl	e734 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a234:	b198      	cbz	r0, a25e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a236:	4628      	mov	r0, r5
    a238:	f004 fa6f 	bl	e71a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a23c:	b130      	cbz	r0, a24c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    a23e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a242:	2012      	movs	r0, #18
    a244:	2900      	cmp	r1, #0
    a246:	d00b      	beq.n	a260 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a248:	2980      	cmp	r1, #128	; 0x80
    a24a:	d809      	bhi.n	a260 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a24c:	4628      	mov	r0, r5
    a24e:	f004 fa53 	bl	e6f8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a252:	b140      	cbz	r0, a266 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a254:	4640      	mov	r0, r8
    a256:	f004 f960 	bl	e51a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a25a:	b130      	cbz	r0, a26a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    a25c:	e009      	b.n	a272 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    a25e:	2042      	movs	r0, #66	; 0x42
    a260:	b007      	add	sp, #28
    a262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a266:	200c      	movs	r0, #12
    a268:	e7fa      	b.n	a260 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a26a:	4640      	mov	r0, r8
    a26c:	f004 fa4f 	bl	e70e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a270:	b3c8      	cbz	r0, a2e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    a272:	4640      	mov	r0, r8
    a274:	f004 fc13 	bl	ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a278:	2800      	cmp	r0, #0
    a27a:	d1f4      	bne.n	a266 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a27c:	4640      	mov	r0, r8
    a27e:	f004 f967 	bl	e550 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a282:	2800      	cmp	r0, #0
    a284:	d1ef      	bne.n	a266 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a286:	4640      	mov	r0, r8
    a288:	f7fc fc18 	bl	6abc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a28c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a290:	f242 7110 	movw	r1, #10000	; 0x2710
    a294:	fb00 f901 	mul.w	r9, r0, r1
    a298:	78e1      	ldrb	r1, [r4, #3]
    a29a:	4640      	mov	r0, r8
    a29c:	f004 fa23 	bl	e6e6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a2a0:	4640      	mov	r0, r8
    a2a2:	f004 fa36 	bl	e712 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a2a6:	b308      	cbz	r0, a2ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    a2a8:	2100      	movs	r1, #0
    a2aa:	a801      	add	r0, sp, #4
    a2ac:	f7fa fba8 	bl	4a00 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a2b0:	0004      	movs	r4, r0
    a2b2:	d07b      	beq.n	a3ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a2b4:	2100      	movs	r1, #0
    a2b6:	f7fb ff41 	bl	613c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a2ba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a2be:	8020      	strh	r0, [r4, #0]
    a2c0:	4621      	mov	r1, r4
    a2c2:	4640      	mov	r0, r8
    a2c4:	f004 fa4d 	bl	e762 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a2c8:	f000 f9de 	bl	a688 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a2cc:	0940      	lsrs	r0, r0, #5
    a2ce:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    a2d2:	07c0      	lsls	r0, r0, #31
    a2d4:	4d41      	ldr	r5, [pc, #260]	; (a3dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    a2d6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a2da:	d011      	beq.n	a300 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    a2dc:	8869      	ldrh	r1, [r5, #2]
    a2de:	88aa      	ldrh	r2, [r5, #4]
    a2e0:	84c1      	strh	r1, [r0, #38]	; 0x26
    a2e2:	8502      	strh	r2, [r0, #40]	; 0x28
    a2e4:	e00f      	b.n	a306 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    a2e6:	e7ff      	b.n	a2e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    a2e8:	2012      	movs	r0, #18
    a2ea:	e7b9      	b.n	a260 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a2ec:	464a      	mov	r2, r9
    a2ee:	2100      	movs	r1, #0
    a2f0:	4640      	mov	r0, r8
    a2f2:	f7fd fad9 	bl	78a8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a2f6:	2800      	cmp	r0, #0
    a2f8:	d0b2      	beq.n	a260 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a2fa:	f241 51b5 	movw	r1, #5557	; 0x15b5
    a2fe:	e05f      	b.n	a3c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a300:	221b      	movs	r2, #27
    a302:	84c2      	strh	r2, [r0, #38]	; 0x26
    a304:	8502      	strh	r2, [r0, #40]	; 0x28
    a306:	f000 f9bf 	bl	a688 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a30a:	0788      	lsls	r0, r1, #30
    a30c:	f04f 0601 	mov.w	r6, #1
    a310:	d505      	bpl.n	a31e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    a312:	f88d 6008 	strb.w	r6, [sp, #8]
    a316:	a802      	add	r0, sp, #8
    a318:	9403      	str	r4, [sp, #12]
    a31a:	f005 fa2c 	bl	f776 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    a31e:	68a8      	ldr	r0, [r5, #8]
    a320:	62e0      	str	r0, [r4, #44]	; 0x2c
    a322:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a326:	4640      	mov	r0, r8
    a328:	f004 f9fb 	bl	e722 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a32c:	b910      	cbnz	r0, a334 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    a32e:	4640      	mov	r0, r8
    a330:	f004 fa15 	bl	e75e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a334:	6127      	str	r7, [r4, #16]
    a336:	8821      	ldrh	r1, [r4, #0]
    a338:	f8ad 1008 	strh.w	r1, [sp, #8]
    a33c:	7ba9      	ldrb	r1, [r5, #14]
    a33e:	f88d 100a 	strb.w	r1, [sp, #10]
    a342:	7be9      	ldrb	r1, [r5, #15]
    a344:	f88d 100b 	strb.w	r1, [sp, #11]
    a348:	8a29      	ldrh	r1, [r5, #16]
    a34a:	f8ad 100c 	strh.w	r1, [sp, #12]
    a34e:	a905      	add	r1, sp, #20
    a350:	9100      	str	r1, [sp, #0]
    a352:	4630      	mov	r0, r6
    a354:	ab04      	add	r3, sp, #16
    a356:	aa02      	add	r2, sp, #8
    a358:	4621      	mov	r1, r4
    a35a:	f006 f861 	bl	10420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    a35e:	b140      	cbz	r0, a372 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    a360:	2100      	movs	r1, #0
    a362:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a366:	f7fa fb73 	bl	4a50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a36a:	b1f0      	cbz	r0, a3aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    a36c:	f241 6117 	movw	r1, #5655	; 0x1617
    a370:	e026      	b.n	a3c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a372:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a376:	f88d 0018 	strb.w	r0, [sp, #24]
    a37a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a37e:	f88d 0019 	strb.w	r0, [sp, #25]
    a382:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a386:	f8ad 001a 	strh.w	r0, [sp, #26]
    a38a:	a906      	add	r1, sp, #24
    a38c:	4620      	mov	r0, r4
    a38e:	f003 fb62 	bl	da56 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a392:	7868      	ldrb	r0, [r5, #1]
    a394:	9000      	str	r0, [sp, #0]
    a396:	782b      	ldrb	r3, [r5, #0]
    a398:	88aa      	ldrh	r2, [r5, #4]
    a39a:	8869      	ldrh	r1, [r5, #2]
    a39c:	8820      	ldrh	r0, [r4, #0]
    a39e:	f7fa fc0d 	bl	4bbc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a3a2:	b128      	cbz	r0, a3b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    a3a4:	f241 6122 	movw	r1, #5666	; 0x1622
    a3a8:	e00a      	b.n	a3c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a3aa:	e7ff      	b.n	a3ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a3ac:	2009      	movs	r0, #9
    a3ae:	e757      	b.n	a260 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a3b0:	464a      	mov	r2, r9
    a3b2:	4621      	mov	r1, r4
    a3b4:	4640      	mov	r0, r8
    a3b6:	f7fd fa77 	bl	78a8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a3ba:	b120      	cbz	r0, a3c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    a3bc:	f241 6124 	movw	r1, #5668	; 0x1624
    a3c0:	2039      	movs	r0, #57	; 0x39
    a3c2:	f7fa f8c3 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3c6:	4806      	ldr	r0, [pc, #24]	; (a3e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    a3c8:	6843      	ldr	r3, [r0, #4]
    a3ca:	b123      	cbz	r3, a3d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    a3cc:	2200      	movs	r2, #0
    a3ce:	f504 7195 	add.w	r1, r4, #298	; 0x12a
    a3d2:	4620      	mov	r0, r4
    a3d4:	4798      	blx	r3
    a3d6:	2000      	movs	r0, #0
    a3d8:	e742      	b.n	a260 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a3da:	0000      	.short	0x0000
    a3dc:	200012c4 	.word	0x200012c4
    a3e0:	200002d8 	.word	0x200002d8
    a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3e8:	b088      	sub	sp, #32
    a3ea:	4604      	mov	r4, r0
    a3ec:	8800      	ldrh	r0, [r0, #0]
    a3ee:	a906      	add	r1, sp, #24
    a3f0:	f003 fa61 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a3f4:	2800      	cmp	r0, #0
    a3f6:	d147      	bne.n	a488 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a3f8:	9807      	ldr	r0, [sp, #28]
    a3fa:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    a3fe:	f88d 1008 	strb.w	r1, [sp, #8]
    a402:	9902      	ldr	r1, [sp, #8]
    a404:	9102      	str	r1, [sp, #8]
    a406:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a40a:	3080      	adds	r0, #128	; 0x80
    a40c:	b101      	cbz	r1, a410 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a40e:	2101      	movs	r1, #1
    a410:	f88d 100c 	strb.w	r1, [sp, #12]
    a414:	7901      	ldrb	r1, [r0, #4]
    a416:	f04f 0800 	mov.w	r8, #0
    a41a:	0689      	lsls	r1, r1, #26
    a41c:	d502      	bpl.n	a424 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    a41e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a422:	b149      	cbz	r1, a438 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    a424:	f05f 0100 	movs.w	r1, #0
    a428:	f88d 1004 	strb.w	r1, [sp, #4]
    a42c:	2105      	movs	r1, #5
    a42e:	3064      	adds	r0, #100	; 0x64
    a430:	f005 fa2d 	bl	f88e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
    a434:	b110      	cbz	r0, a43c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    a436:	e004      	b.n	a442 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    a438:	2101      	movs	r1, #1
    a43a:	e7f5      	b.n	a428 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    a43c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a440:	b308      	cbz	r0, a486 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    a442:	8921      	ldrh	r1, [r4, #8]
    a444:	88e0      	ldrh	r0, [r4, #6]
    a446:	f005 ffa7 	bl	10398 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a44a:	2800      	cmp	r0, #0
    a44c:	d11c      	bne.n	a488 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a44e:	88a1      	ldrh	r1, [r4, #4]
    a450:	8860      	ldrh	r0, [r4, #2]
    a452:	f005 ffa1 	bl	10398 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a456:	2800      	cmp	r0, #0
    a458:	d116      	bne.n	a488 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a45a:	8921      	ldrh	r1, [r4, #8]
    a45c:	88e0      	ldrh	r0, [r4, #6]
    a45e:	f005 ff91 	bl	10384 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a462:	2800      	cmp	r0, #0
    a464:	d110      	bne.n	a488 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a466:	88a1      	ldrh	r1, [r4, #4]
    a468:	8860      	ldrh	r0, [r4, #2]
    a46a:	f005 ff8b 	bl	10384 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a46e:	0006      	movs	r6, r0
    a470:	d10a      	bne.n	a488 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a472:	9807      	ldr	r0, [sp, #28]
    a474:	f500 7595 	add.w	r5, r0, #298	; 0x12a
    a478:	27ff      	movs	r7, #255	; 0xff
    a47a:	706f      	strb	r7, [r5, #1]
    a47c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a480:	b129      	cbz	r1, a48e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    a482:	263a      	movs	r6, #58	; 0x3a
    a484:	e02e      	b.n	a4e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    a486:	201a      	movs	r0, #26
    a488:	b008      	add	sp, #32
    a48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a48e:	4641      	mov	r1, r8
    a490:	aa03      	add	r2, sp, #12
    a492:	f005 ff8f 	bl	103b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a496:	8861      	ldrh	r1, [r4, #2]
    a498:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a49c:	4281      	cmp	r1, r0
    a49e:	d200      	bcs.n	a4a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    a4a0:	4608      	mov	r0, r1
    a4a2:	80e8      	strh	r0, [r5, #6]
    a4a4:	88a1      	ldrh	r1, [r4, #4]
    a4a6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a4aa:	4281      	cmp	r1, r0
    a4ac:	d200      	bcs.n	a4b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    a4ae:	4608      	mov	r0, r1
    a4b0:	8128      	strh	r0, [r5, #8]
    a4b2:	88e2      	ldrh	r2, [r4, #6]
    a4b4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a4b8:	428a      	cmp	r2, r1
    a4ba:	d200      	bcs.n	a4be <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    a4bc:	4611      	mov	r1, r2
    a4be:	8069      	strh	r1, [r5, #2]
    a4c0:	8922      	ldrh	r2, [r4, #8]
    a4c2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a4c6:	428a      	cmp	r2, r1
    a4c8:	d200      	bcs.n	a4cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    a4ca:	4611      	mov	r1, r2
    a4cc:	f640 0248 	movw	r2, #2120	; 0x848
    a4d0:	80a9      	strh	r1, [r5, #4]
    a4d2:	4291      	cmp	r1, r2
    a4d4:	d300      	bcc.n	a4d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    a4d6:	4611      	mov	r1, r2
    a4d8:	80a9      	strh	r1, [r5, #4]
    a4da:	4290      	cmp	r0, r2
    a4dc:	d200      	bcs.n	a4e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    a4de:	4602      	mov	r2, r0
    a4e0:	812a      	strh	r2, [r5, #8]
    a4e2:	702f      	strb	r7, [r5, #0]
    a4e4:	f885 8001 	strb.w	r8, [r5, #1]
    a4e8:	4630      	mov	r0, r6
    a4ea:	e7cd      	b.n	a488 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a4ec:	b51c      	push	{r2, r3, r4, lr}
    a4ee:	490c      	ldr	r1, [pc, #48]	; (a520 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    a4f0:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    a4f4:	e9cd 0100 	strd	r0, r1, [sp]
    a4f8:	e00a      	b.n	a510 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a4fa:	9c00      	ldr	r4, [sp, #0]
    a4fc:	4620      	mov	r0, r4
    a4fe:	f004 face 	bl	ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a502:	b128      	cbz	r0, a510 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a504:	4620      	mov	r0, r4
    a506:	f004 f951 	bl	e7ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    a50a:	b108      	cbz	r0, a510 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a50c:	2001      	movs	r0, #1
    a50e:	bd1c      	pop	{r2, r3, r4, pc}
    a510:	4668      	mov	r0, sp
    a512:	f7fa fa55 	bl	49c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a516:	2800      	cmp	r0, #0
    a518:	d0ef      	beq.n	a4fa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    a51a:	2000      	movs	r0, #0
    a51c:	bd1c      	pop	{r2, r3, r4, pc}
    a51e:	0000      	.short	0x0000
    a520:	0000a55c 	.word	0x0000a55c
    a524:	b510      	push	{r4, lr}
    a526:	4604      	mov	r4, r0
    a528:	88c1      	ldrh	r1, [r0, #6]
    a52a:	8880      	ldrh	r0, [r0, #4]
    a52c:	f005 ff34 	bl	10398 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a530:	2800      	cmp	r0, #0
    a532:	d10f      	bne.n	a554 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    a534:	8861      	ldrh	r1, [r4, #2]
    a536:	8820      	ldrh	r0, [r4, #0]
    a538:	f005 ff2e 	bl	10398 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a53c:	2800      	cmp	r0, #0
    a53e:	d109      	bne.n	a554 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    a540:	4805      	ldr	r0, [pc, #20]	; (a558 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    a542:	88a1      	ldrh	r1, [r4, #4]
    a544:	8081      	strh	r1, [r0, #4]
    a546:	8821      	ldrh	r1, [r4, #0]
    a548:	8001      	strh	r1, [r0, #0]
    a54a:	88e1      	ldrh	r1, [r4, #6]
    a54c:	80c1      	strh	r1, [r0, #6]
    a54e:	8861      	ldrh	r1, [r4, #2]
    a550:	8041      	strh	r1, [r0, #2]
    a552:	2000      	movs	r0, #0
    a554:	bd10      	pop	{r4, pc}
    a556:	0000      	.short	0x0000
    a558:	200002e0 	.word	0x200002e0
    a55c:	00000000 	.word	0x00000000
    a560:	00010000 	.word	0x00010000
    a564:	00000000 	.word	0x00000000
    a568:	00010000 	.word	0x00010000
    a56c:	0c11fa0c 	.word	0x0c11fa0c
    a570:	11fa0059 	.word	0x11fa0059
    a574:	00000000 	.word	0x00000000
    a578:	00010000 	.word	0x00010000
    a57c:	00000000 	.word	0x00000000
    a580:	00010000 	.word	0x00010000

0000a584 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a584:	b510      	push	{r4, lr}
    a586:	f7fc f825 	bl	65d4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a58a:	4805      	ldr	r0, [pc, #20]	; (a5a0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    a58c:	6840      	ldr	r0, [r0, #4]
    a58e:	f006 f80a 	bl	105a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a592:	f005 fdaf 	bl	100f4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a59a:	f7fc b9d5 	b.w	6948 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    a59e:	0000      	.short	0x0000
    a5a0:	200002e8 	.word	0x200002e8

0000a5a4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a5a4:	b510      	push	{r4, lr}
    a5a6:	4c05      	ldr	r4, [pc, #20]	; (a5bc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    a5a8:	68a0      	ldr	r0, [r4, #8]
    a5aa:	f005 fffc 	bl	105a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a5ae:	68e0      	ldr	r0, [r4, #12]
    a5b0:	f005 fff9 	bl	105a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5b8:	f005 be01 	b.w	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a5bc:	200002e8 	.word	0x200002e8

0000a5c0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a5c0:	b510      	push	{r4, lr}
    a5c2:	4905      	ldr	r1, [pc, #20]	; (a5d8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a5c4:	4805      	ldr	r0, [pc, #20]	; (a5dc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a5c6:	f005 ffe1 	bl	1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a5ca:	4804      	ldr	r0, [pc, #16]	; (a5dc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5d0:	4903      	ldr	r1, [pc, #12]	; (a5e0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a5d2:	1d00      	adds	r0, r0, #4
    a5d4:	f005 bfda 	b.w	1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a5d8:	200002f8 	.word	0x200002f8
    a5dc:	200002ec 	.word	0x200002ec
    a5e0:	20000300 	.word	0x20000300

0000a5e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a5e4:	b510      	push	{r4, lr}
    a5e6:	4908      	ldr	r1, [pc, #32]	; (a608 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a5e8:	4808      	ldr	r0, [pc, #32]	; (a60c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a5ea:	f005 ffcf 	bl	1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a5ee:	4807      	ldr	r0, [pc, #28]	; (a60c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a5f0:	4907      	ldr	r1, [pc, #28]	; (a610 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a5f2:	1d00      	adds	r0, r0, #4
    a5f4:	f005 ffca 	bl	1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a5f8:	4804      	ldr	r0, [pc, #16]	; (a60c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a5fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5fe:	4905      	ldr	r1, [pc, #20]	; (a614 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a600:	3008      	adds	r0, #8
    a602:	f005 bfc3 	b.w	1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a606:	0000      	.short	0x0000
    a608:	20000310 	.word	0x20000310
    a60c:	200002ec 	.word	0x200002ec
    a610:	20000318 	.word	0x20000318
    a614:	20000308 	.word	0x20000308

0000a618 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a618:	4801      	ldr	r0, [pc, #4]	; (a620 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a61a:	7800      	ldrb	r0, [r0, #0]
    a61c:	4770      	bx	lr
    a61e:	0000      	.short	0x0000
    a620:	200002e8 	.word	0x200002e8
    a624:	b510      	push	{r4, lr}
    a626:	f7fc fb6b 	bl	6d00 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a62a:	f7fd f9eb 	bl	7a04 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    a62e:	4803      	ldr	r0, [pc, #12]	; (a63c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    a630:	f7fc fb4c 	bl	6ccc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a638:	f7fb bfd2 	b.w	65e0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    a63c:	20001569 	.word	0x20001569
    a640:	4909      	ldr	r1, [pc, #36]	; (a668 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a642:	b510      	push	{r4, lr}
    a644:	2001      	movs	r0, #1
    a646:	7008      	strb	r0, [r1, #0]
    a648:	f7fc fb8a 	bl	6d60 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a64c:	f7fd fde6 	bl	821c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a650:	f003 f863 	bl	d71a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a654:	4805      	ldr	r0, [pc, #20]	; (a66c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a656:	f7fa fe63 	bl	5320 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a65a:	2000      	movs	r0, #0
    a65c:	f002 fe91 	bl	d382 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a664:	f7fb bfc4 	b.w	65f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    a668:	200002e8 	.word	0x200002e8
    a66c:	20001569 	.word	0x20001569

0000a670 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a670:	4a04      	ldr	r2, [pc, #16]	; (a684 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    a672:	08c1      	lsrs	r1, r0, #3
    a674:	f000 0307 	and.w	r3, r0, #7
    a678:	2001      	movs	r0, #1
    a67a:	4098      	lsls	r0, r3
    a67c:	5c53      	ldrb	r3, [r2, r1]
    a67e:	4303      	orrs	r3, r0
    a680:	5453      	strb	r3, [r2, r1]
    a682:	4770      	bx	lr
    a684:	20000020 	.word	0x20000020

0000a688 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a688:	4901      	ldr	r1, [pc, #4]	; (a690 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a68a:	e9d1 0100 	ldrd	r0, r1, [r1]
    a68e:	4770      	bx	lr
    a690:	20000020 	.word	0x20000020

0000a694 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a694:	4806      	ldr	r0, [pc, #24]	; (a6b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    a696:	8801      	ldrh	r1, [r0, #0]
    a698:	7900      	ldrb	r0, [r0, #4]
    a69a:	0602      	lsls	r2, r0, #24
    a69c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    a6a0:	f000 0001 	and.w	r0, r0, #1
    a6a4:	1800      	adds	r0, r0, r0
    a6a6:	b2c0      	uxtb	r0, r0
    a6a8:	f040 0001 	orr.w	r0, r0, #1
    a6ac:	4770      	bx	lr
    a6ae:	0000      	.short	0x0000
    a6b0:	20000020 	.word	0x20000020

0000a6b4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a6b4:	b510      	push	{r4, lr}
    a6b6:	f7f9 fb73 	bl	3da0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a6ba:	2200      	movs	r2, #0
    a6bc:	4b08      	ldr	r3, [pc, #32]	; (a6e0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a6be:	4611      	mov	r1, r2
    a6c0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a6c4:	4284      	cmp	r4, r0
    a6c6:	d303      	bcc.n	a6d0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a6c8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a6cc:	7882      	ldrb	r2, [r0, #2]
    a6ce:	e003      	b.n	a6d8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a6d0:	1c49      	adds	r1, r1, #1
    a6d2:	b2c9      	uxtb	r1, r1
    a6d4:	290c      	cmp	r1, #12
    a6d6:	d3f3      	bcc.n	a6c0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a6d8:	4802      	ldr	r0, [pc, #8]	; (a6e4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a6da:	7002      	strb	r2, [r0, #0]
    a6dc:	bd10      	pop	{r4, pc}
    a6de:	0000      	.short	0x0000
    a6e0:	000105f8 	.word	0x000105f8
    a6e4:	20000369 	.word	0x20000369

0000a6e8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a6e8:	b570      	push	{r4, r5, r6, lr}
    a6ea:	4605      	mov	r5, r0
    a6ec:	4616      	mov	r6, r2
    a6ee:	460c      	mov	r4, r1
    a6f0:	2002      	movs	r0, #2
    a6f2:	f000 f9b7 	bl	aa64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a6f6:	4906      	ldr	r1, [pc, #24]	; (a710 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a6f8:	2001      	movs	r0, #1
    a6fa:	1ef6      	subs	r6, r6, #3
    a6fc:	7008      	strb	r0, [r1, #0]
    a6fe:	4805      	ldr	r0, [pc, #20]	; (a714 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a700:	6006      	str	r6, [r0, #0]
    a702:	4804      	ldr	r0, [pc, #16]	; (a714 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a704:	3808      	subs	r0, #8
    a706:	6005      	str	r5, [r0, #0]
    a708:	1f00      	subs	r0, r0, #4
    a70a:	6004      	str	r4, [r0, #0]
    a70c:	bd70      	pop	{r4, r5, r6, pc}
    a70e:	0000      	.short	0x0000
    a710:	2000036a 	.word	0x2000036a
    a714:	4000f510 	.word	0x4000f510

0000a718 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a718:	b510      	push	{r4, lr}
    a71a:	4c0c      	ldr	r4, [pc, #48]	; (a74c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a71c:	7820      	ldrb	r0, [r4, #0]
    a71e:	b180      	cbz	r0, a742 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a720:	490b      	ldr	r1, [pc, #44]	; (a750 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a722:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a726:	6008      	str	r0, [r1, #0]
    a728:	f000 f86a 	bl	a800 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a72c:	2100      	movs	r1, #0
    a72e:	b120      	cbz	r0, a73a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a730:	2001      	movs	r0, #1
    a732:	7060      	strb	r0, [r4, #1]
    a734:	4807      	ldr	r0, [pc, #28]	; (a754 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a736:	6800      	ldr	r0, [r0, #0]
    a738:	e001      	b.n	a73e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a73a:	7061      	strb	r1, [r4, #1]
    a73c:	2010      	movs	r0, #16
    a73e:	70a0      	strb	r0, [r4, #2]
    a740:	7021      	strb	r1, [r4, #0]
    a742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a746:	2000      	movs	r0, #0
    a748:	f000 b98c 	b.w	aa64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a74c:	2000036a 	.word	0x2000036a
    a750:	4001f508 	.word	0x4001f508
    a754:	4000f400 	.word	0x4000f400

0000a758 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a758:	b510      	push	{r4, lr}
    a75a:	2002      	movs	r0, #2
    a75c:	f000 f982 	bl	aa64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a760:	4904      	ldr	r1, [pc, #16]	; (a774 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a762:	2001      	movs	r0, #1
    a764:	7008      	strb	r0, [r1, #0]
    a766:	f000 f859 	bl	a81c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a76a:	4903      	ldr	r1, [pc, #12]	; (a778 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a76c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a770:	6008      	str	r0, [r1, #0]
    a772:	bd10      	pop	{r4, pc}
    a774:	2000036a 	.word	0x2000036a
    a778:	4001f504 	.word	0x4001f504

0000a77c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a77c:	4803      	ldr	r0, [pc, #12]	; (a78c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a77e:	2100      	movs	r1, #0
    a780:	7001      	strb	r1, [r0, #0]
    a782:	7041      	strb	r1, [r0, #1]
    a784:	2110      	movs	r1, #16
    a786:	7081      	strb	r1, [r0, #2]
    a788:	4770      	bx	lr
    a78a:	0000      	.short	0x0000
    a78c:	2000036a 	.word	0x2000036a

0000a790 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a790:	4807      	ldr	r0, [pc, #28]	; (a7b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a792:	b510      	push	{r4, lr}
    a794:	7801      	ldrb	r1, [r0, #0]
    a796:	b141      	cbz	r1, a7aa <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a798:	f000 f832 	bl	a800 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a79c:	b118      	cbz	r0, a7a6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a79e:	4805      	ldr	r0, [pc, #20]	; (a7b4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a7a0:	6800      	ldr	r0, [r0, #0]
    a7a2:	b2c0      	uxtb	r0, r0
    a7a4:	bd10      	pop	{r4, pc}
    a7a6:	2010      	movs	r0, #16
    a7a8:	bd10      	pop	{r4, pc}
    a7aa:	7880      	ldrb	r0, [r0, #2]
    a7ac:	bd10      	pop	{r4, pc}
    a7ae:	0000      	.short	0x0000
    a7b0:	2000036a 	.word	0x2000036a
    a7b4:	4000f400 	.word	0x4000f400

0000a7b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a7b8:	4808      	ldr	r0, [pc, #32]	; (a7dc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a7ba:	b510      	push	{r4, lr}
    a7bc:	7801      	ldrb	r1, [r0, #0]
    a7be:	b159      	cbz	r1, a7d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a7c0:	4807      	ldr	r0, [pc, #28]	; (a7e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a7c2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a7c6:	b128      	cbz	r0, a7d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a7c8:	f000 f80c 	bl	a7e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a7cc:	2800      	cmp	r0, #0
    a7ce:	d000      	beq.n	a7d2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a7d0:	2001      	movs	r0, #1
    a7d2:	bd10      	pop	{r4, pc}
    a7d4:	2002      	movs	r0, #2
    a7d6:	bd10      	pop	{r4, pc}
    a7d8:	7840      	ldrb	r0, [r0, #1]
    a7da:	bd10      	pop	{r4, pc}
    a7dc:	2000036a 	.word	0x2000036a
    a7e0:	4000f000 	.word	0x4000f000
    a7e4:	4805      	ldr	r0, [pc, #20]	; (a7fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a7e6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a7ea:	b111      	cbz	r1, a7f2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a7ec:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a7f0:	b108      	cbz	r0, a7f6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a7f2:	2000      	movs	r0, #0
    a7f4:	4770      	bx	lr
    a7f6:	2001      	movs	r0, #1
    a7f8:	4770      	bx	lr
    a7fa:	0000      	.short	0x0000
    a7fc:	4000f000 	.word	0x4000f000
    a800:	4805      	ldr	r0, [pc, #20]	; (a818 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a802:	b510      	push	{r4, lr}
    a804:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a808:	b120      	cbz	r0, a814 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a80a:	f7ff ffeb 	bl	a7e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a80e:	b108      	cbz	r0, a814 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a810:	2001      	movs	r0, #1
    a812:	bd10      	pop	{r4, pc}
    a814:	2000      	movs	r0, #0
    a816:	bd10      	pop	{r4, pc}
    a818:	4000f000 	.word	0x4000f000
    a81c:	4804      	ldr	r0, [pc, #16]	; (a830 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a81e:	2100      	movs	r1, #0
    a820:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a824:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a828:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a82c:	4770      	bx	lr
    a82e:	0000      	.short	0x0000
    a830:	4000f000 	.word	0x4000f000

0000a834 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a838:	4604      	mov	r4, r0
    a83a:	461e      	mov	r6, r3
    a83c:	4690      	mov	r8, r2
    a83e:	460f      	mov	r7, r1
    a840:	2001      	movs	r0, #1
    a842:	f000 f90f 	bl	aa64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a846:	4d1e      	ldr	r5, [pc, #120]	; (a8c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    a848:	481e      	ldr	r0, [pc, #120]	; (a8c4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    a84a:	f004 0103 	and.w	r1, r4, #3
    a84e:	712e      	strb	r6, [r5, #4]
    a850:	6800      	ldr	r0, [r0, #0]
    a852:	0432      	lsls	r2, r6, #16
    a854:	f361 0007 	bfi	r0, r1, #0, #8
    a858:	f366 200f 	bfi	r0, r6, #8, #8
    a85c:	0c00      	lsrs	r0, r0, #16
    a85e:	4e1a      	ldr	r6, [pc, #104]	; (a8c8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    a860:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    a864:	4308      	orrs	r0, r1
    a866:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    a86a:	4818      	ldr	r0, [pc, #96]	; (a8cc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    a86c:	6007      	str	r7, [r0, #0]
    a86e:	f001 fdc4 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a872:	b938      	cbnz	r0, a884 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    a874:	4815      	ldr	r0, [pc, #84]	; (a8cc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    a876:	3010      	adds	r0, #16
    a878:	6801      	ldr	r1, [r0, #0]
    a87a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a87e:	ea41 0108 	orr.w	r1, r1, r8
    a882:	6001      	str	r1, [r0, #0]
    a884:	f000 f8e4 	bl	aa50 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    a888:	b10c      	cbz	r4, a88e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    a88a:	2c04      	cmp	r4, #4
    a88c:	d107      	bne.n	a89e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    a88e:	4811      	ldr	r0, [pc, #68]	; (a8d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    a890:	490d      	ldr	r1, [pc, #52]	; (a8c8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    a892:	4a0f      	ldr	r2, [pc, #60]	; (a8d0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    a894:	1d09      	adds	r1, r1, #4
    a896:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    a89a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    a89e:	2001      	movs	r0, #1
    a8a0:	7068      	strb	r0, [r5, #1]
    a8a2:	70ec      	strb	r4, [r5, #3]
    a8a4:	b11c      	cbz	r4, a8ae <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    a8a6:	2c01      	cmp	r4, #1
    a8a8:	d001      	beq.n	a8ae <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    a8aa:	2c02      	cmp	r4, #2
    a8ac:	d106      	bne.n	a8bc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    a8ae:	7028      	strb	r0, [r5, #0]
    a8b0:	2100      	movs	r1, #0
    a8b2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    a8b6:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    a8ba:	6030      	str	r0, [r6, #0]
    a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8c0:	2000036d 	.word	0x2000036d
    a8c4:	0000aa60 	.word	0x0000aa60
    a8c8:	4000f000 	.word	0x4000f000
    a8cc:	4000f508 	.word	0x4000f508
    a8d0:	4000f100 	.word	0x4000f100
    a8d4:	4001f088 	.word	0x4001f088

0000a8d8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    a8d8:	b570      	push	{r4, r5, r6, lr}
    a8da:	4a1c      	ldr	r2, [pc, #112]	; (a94c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    a8dc:	7853      	ldrb	r3, [r2, #1]
    a8de:	b1a3      	cbz	r3, a90a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    a8e0:	4b1b      	ldr	r3, [pc, #108]	; (a950 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    a8e2:	6019      	str	r1, [r3, #0]
    a8e4:	1d19      	adds	r1, r3, #4
    a8e6:	6008      	str	r0, [r1, #0]
    a8e8:	2501      	movs	r5, #1
    a8ea:	7095      	strb	r5, [r2, #2]
    a8ec:	4610      	mov	r0, r2
    a8ee:	78d6      	ldrb	r6, [r2, #3]
    a8f0:	4b18      	ldr	r3, [pc, #96]	; (a954 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    a8f2:	7800      	ldrb	r0, [r0, #0]
    a8f4:	4c18      	ldr	r4, [pc, #96]	; (a958 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    a8f6:	2100      	movs	r1, #0
    a8f8:	b156      	cbz	r6, a910 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    a8fa:	2e04      	cmp	r6, #4
    a8fc:	d01b      	beq.n	a936 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    a8fe:	b308      	cbz	r0, a944 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    a900:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a904:	0668      	lsls	r0, r5, #25
    a906:	6018      	str	r0, [r3, #0]
    a908:	bd70      	pop	{r4, r5, r6, pc}
    a90a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    a90e:	e01a      	b.n	a946 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    a910:	b178      	cbz	r0, a932 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    a912:	4620      	mov	r0, r4
    a914:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a918:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    a91c:	601e      	str	r6, [r3, #0]
    a91e:	1271      	asrs	r1, r6, #9
    a920:	f005 fe9f 	bl	10662 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a924:	2800      	cmp	r0, #0
    a926:	d0ef      	beq.n	a908 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    a928:	6065      	str	r5, [r4, #4]
    a92a:	480a      	ldr	r0, [pc, #40]	; (a954 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    a92c:	1d00      	adds	r0, r0, #4
    a92e:	6006      	str	r6, [r0, #0]
    a930:	bd70      	pop	{r4, r5, r6, pc}
    a932:	21b3      	movs	r1, #179	; 0xb3
    a934:	e007      	b.n	a946 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    a936:	7015      	strb	r5, [r2, #0]
    a938:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a93c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    a940:	6025      	str	r5, [r4, #0]
    a942:	bd70      	pop	{r4, r5, r6, pc}
    a944:	21c6      	movs	r1, #198	; 0xc6
    a946:	203c      	movs	r0, #60	; 0x3c
    a948:	f7f9 fe00 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a94c:	2000036d 	.word	0x2000036d
    a950:	4000f50c 	.word	0x4000f50c
    a954:	4001f504 	.word	0x4001f504
    a958:	4000f000 	.word	0x4000f000

0000a95c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a95c:	b570      	push	{r4, r5, r6, lr}
    a95e:	4d05      	ldr	r5, [pc, #20]	; (a974 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    a960:	2400      	movs	r4, #0
    a962:	7828      	ldrb	r0, [r5, #0]
    a964:	b110      	cbz	r0, a96c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    a966:	f000 f873 	bl	aa50 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    a96a:	702c      	strb	r4, [r5, #0]
    a96c:	706c      	strb	r4, [r5, #1]
    a96e:	70ac      	strb	r4, [r5, #2]
    a970:	bd70      	pop	{r4, r5, r6, pc}
    a972:	0000      	.short	0x0000
    a974:	2000036d 	.word	0x2000036d

0000a978 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a978:	4802      	ldr	r0, [pc, #8]	; (a984 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a97a:	2100      	movs	r1, #0
    a97c:	7001      	strb	r1, [r0, #0]
    a97e:	7041      	strb	r1, [r0, #1]
    a980:	7081      	strb	r1, [r0, #2]
    a982:	4770      	bx	lr
    a984:	2000036d 	.word	0x2000036d

0000a988 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a988:	480b      	ldr	r0, [pc, #44]	; (a9b8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    a98a:	b510      	push	{r4, lr}
    a98c:	7800      	ldrb	r0, [r0, #0]
    a98e:	b158      	cbz	r0, a9a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    a990:	f44f 7182 	mov.w	r1, #260	; 0x104
    a994:	4809      	ldr	r0, [pc, #36]	; (a9bc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    a996:	f005 fe64 	bl	10662 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a99a:	b140      	cbz	r0, a9ae <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    a99c:	4808      	ldr	r0, [pc, #32]	; (a9c0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    a99e:	6800      	ldr	r0, [r0, #0]
    a9a0:	2800      	cmp	r0, #0
    a9a2:	d000      	beq.n	a9a6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    a9a4:	2001      	movs	r0, #1
    a9a6:	bd10      	pop	{r4, pc}
    a9a8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    a9ac:	e001      	b.n	a9b2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    a9ae:	f240 11eb 	movw	r1, #491	; 0x1eb
    a9b2:	203c      	movs	r0, #60	; 0x3c
    a9b4:	f7f9 fdca 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9b8:	2000036d 	.word	0x2000036d
    a9bc:	4000f000 	.word	0x4000f000
    a9c0:	4000f400 	.word	0x4000f400

0000a9c4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a9c4:	4801      	ldr	r0, [pc, #4]	; (a9cc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a9c6:	2101      	movs	r1, #1
    a9c8:	6081      	str	r1, [r0, #8]
    a9ca:	4770      	bx	lr
    a9cc:	4000f000 	.word	0x4000f000

0000a9d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9d4:	481b      	ldr	r0, [pc, #108]	; (aa44 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a9d6:	7800      	ldrb	r0, [r0, #0]
    a9d8:	b1d8      	cbz	r0, aa12 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    a9da:	f8df 806c 	ldr.w	r8, [pc, #108]	; aa48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a9de:	f44f 7682 	mov.w	r6, #260	; 0x104
    a9e2:	4631      	mov	r1, r6
    a9e4:	4640      	mov	r0, r8
    a9e6:	f005 fe3c 	bl	10662 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a9ea:	2800      	cmp	r0, #0
    a9ec:	d128      	bne.n	aa40 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    a9ee:	2002      	movs	r0, #2
    a9f0:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    a9f4:	4c15      	ldr	r4, [pc, #84]	; (aa4c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    a9f6:	6820      	ldr	r0, [r4, #0]
    a9f8:	43c0      	mvns	r0, r0
    a9fa:	f340 1500 	sbfx	r5, r0, #4, #1
    a9fe:	6820      	ldr	r0, [r4, #0]
    aa00:	f040 0010 	orr.w	r0, r0, #16
    aa04:	6020      	str	r0, [r4, #0]
    aa06:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    aa0a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    aa0e:	1c6d      	adds	r5, r5, #1
    aa10:	e008      	b.n	aa24 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    aa12:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    aa16:	203c      	movs	r0, #60	; 0x3c
    aa18:	f7f9 fd98 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa1c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    aa20:	f7f9 fbf0 	bl	4204 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    aa24:	4631      	mov	r1, r6
    aa26:	4640      	mov	r0, r8
    aa28:	f005 fe1b 	bl	10662 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    aa2c:	2800      	cmp	r0, #0
    aa2e:	d0f5      	beq.n	aa1c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    aa30:	b91d      	cbnz	r5, aa3a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    aa32:	6820      	ldr	r0, [r4, #0]
    aa34:	f020 0010 	bic.w	r0, r0, #16
    aa38:	6020      	str	r0, [r4, #0]
    aa3a:	2002      	movs	r0, #2
    aa3c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    aa40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa44:	2000036d 	.word	0x2000036d
    aa48:	4000f000 	.word	0x4000f000
    aa4c:	e000ed10 	.word	0xe000ed10
    aa50:	4902      	ldr	r1, [pc, #8]	; (aa5c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    aa52:	4801      	ldr	r0, [pc, #4]	; (aa58 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    aa54:	6008      	str	r0, [r1, #0]
    aa56:	4770      	bx	lr
    aa58:	02020000 	.word	0x02020000
    aa5c:	4001f508 	.word	0x4001f508
    aa60:	00010000 	.word	0x00010000

0000aa64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    aa64:	b510      	push	{r4, lr}
    aa66:	4604      	mov	r4, r0
    aa68:	f000 f820 	bl	aaac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    aa6c:	2c00      	cmp	r4, #0
    aa6e:	d00e      	beq.n	aa8e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    aa70:	4a0b      	ldr	r2, [pc, #44]	; (aaa0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    aa72:	480b      	ldr	r0, [pc, #44]	; (aaa0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    aa74:	490b      	ldr	r1, [pc, #44]	; (aaa4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    aa76:	3214      	adds	r2, #20
    aa78:	2c01      	cmp	r4, #1
    aa7a:	d005      	beq.n	aa88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    aa7c:	2c02      	cmp	r4, #2
    aa7e:	d007      	beq.n	aa90 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    aa80:	2182      	movs	r1, #130	; 0x82
    aa82:	203d      	movs	r0, #61	; 0x3d
    aa84:	f7f9 fd62 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa88:	2302      	movs	r3, #2
    aa8a:	6003      	str	r3, [r0, #0]
    aa8c:	6011      	str	r1, [r2, #0]
    aa8e:	bd10      	pop	{r4, pc}
    aa90:	2303      	movs	r3, #3
    aa92:	6003      	str	r3, [r0, #0]
    aa94:	6011      	str	r1, [r2, #0]
    aa96:	4904      	ldr	r1, [pc, #16]	; (aaa8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    aa98:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    aa9c:	6008      	str	r0, [r1, #0]
    aa9e:	bd10      	pop	{r4, pc}
    aaa0:	4000f500 	.word	0x4000f500
    aaa4:	2000166b 	.word	0x2000166b
    aaa8:	4001f504 	.word	0x4001f504
    aaac:	4805      	ldr	r0, [pc, #20]	; (aac4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    aaae:	b510      	push	{r4, lr}
    aab0:	2100      	movs	r1, #0
    aab2:	6001      	str	r1, [r0, #0]
    aab4:	6001      	str	r1, [r0, #0]
    aab6:	f7ff ff51 	bl	a95c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    aaba:	4903      	ldr	r1, [pc, #12]	; (aac8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    aabc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    aac0:	6008      	str	r0, [r1, #0]
    aac2:	bd10      	pop	{r4, pc}
    aac4:	4000f500 	.word	0x4000f500
    aac8:	4001f508 	.word	0x4001f508

0000aacc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    aacc:	4805      	ldr	r0, [pc, #20]	; (aae4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    aace:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    aad2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    aad6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    aada:	2100      	movs	r1, #0
    aadc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    aae0:	4770      	bx	lr
    aae2:	0000      	.short	0x0000
    aae4:	40001000 	.word	0x40001000

0000aae8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    aae8:	4904      	ldr	r1, [pc, #16]	; (aafc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    aaea:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    aaee:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    aaf2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    aaf6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    aafa:	4770      	bx	lr
    aafc:	40001000 	.word	0x40001000

0000ab00 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    ab00:	4801      	ldr	r0, [pc, #4]	; (ab08 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    ab02:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    ab06:	4770      	bx	lr
    ab08:	20001328 	.word	0x20001328

0000ab0c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    ab0c:	4902      	ldr	r1, [pc, #8]	; (ab18 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    ab0e:	5c08      	ldrb	r0, [r1, r0]
    ab10:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    ab14:	4770      	bx	lr
    ab16:	0000      	.short	0x0000
    ab18:	0000b832 	.word	0x0000b832

0000ab1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab1e:	4c24      	ldr	r4, [pc, #144]	; (abb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    ab20:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    ab24:	f010 0f10 	tst.w	r0, #16
    ab28:	d001      	beq.n	ab2e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    ab2a:	2701      	movs	r7, #1
    ab2c:	e000      	b.n	ab30 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    ab2e:	2700      	movs	r7, #0
    ab30:	2010      	movs	r0, #16
    ab32:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    ab36:	2002      	movs	r0, #2
    ab38:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ab3c:	481d      	ldr	r0, [pc, #116]	; (abb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    ab3e:	2500      	movs	r5, #0
    ab40:	491d      	ldr	r1, [pc, #116]	; (abb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    ab42:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    ab46:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    ab4a:	6008      	str	r0, [r1, #0]
    ab4c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    ab50:	f44f 7688 	mov.w	r6, #272	; 0x110
    ab54:	f010 0fff 	tst.w	r0, #255	; 0xff
    ab58:	d019      	beq.n	ab8e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    ab5a:	20ff      	movs	r0, #255	; 0xff
    ab5c:	f88d 0000 	strb.w	r0, [sp]
    ab60:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    ab64:	2001      	movs	r0, #1
    ab66:	6120      	str	r0, [r4, #16]
    ab68:	e005      	b.n	ab76 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    ab6a:	bf00      	nop
    ab6c:	f89d 0000 	ldrb.w	r0, [sp]
    ab70:	1e40      	subs	r0, r0, #1
    ab72:	f88d 0000 	strb.w	r0, [sp]
    ab76:	f89d 0000 	ldrb.w	r0, [sp]
    ab7a:	b128      	cbz	r0, ab88 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    ab7c:	4631      	mov	r1, r6
    ab7e:	4620      	mov	r0, r4
    ab80:	f005 fd9e 	bl	106c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    ab84:	2800      	cmp	r0, #0
    ab86:	d0f1      	beq.n	ab6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    ab88:	f89d 0000 	ldrb.w	r0, [sp]
    ab8c:	b158      	cbz	r0, aba6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    ab8e:	f000 fc45 	bl	b41c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    ab92:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    ab96:	f000 fdcd 	bl	b734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    ab9a:	2f00      	cmp	r7, #0
    ab9c:	d002      	beq.n	aba4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    ab9e:	2010      	movs	r0, #16
    aba0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    aba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aba6:	f640 018f 	movw	r1, #2191	; 0x88f
    abaa:	203e      	movs	r0, #62	; 0x3e
    abac:	f7f9 fcce 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abb0:	40001000 	.word	0x40001000
    abb4:	20001328 	.word	0x20001328
    abb8:	4001f508 	.word	0x4001f508

0000abbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    abbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abc0:	4d18      	ldr	r5, [pc, #96]	; (ac24 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    abc2:	4607      	mov	r7, r0
    abc4:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    abc8:	07c2      	lsls	r2, r0, #31
    abca:	d00f      	beq.n	abec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    abcc:	4c16      	ldr	r4, [pc, #88]	; (ac28 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    abce:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    abd2:	f042 0201 	orr.w	r2, r2, #1
    abd6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    abda:	f040 0002 	orr.w	r0, r0, #2
    abde:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    abe2:	2601      	movs	r6, #1
    abe4:	b13f      	cbz	r7, abf6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    abe6:	2f01      	cmp	r7, #1
    abe8:	d00b      	beq.n	ac02 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    abea:	e010      	b.n	ac0e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    abec:	f240 717c 	movw	r1, #1916	; 0x77c
    abf0:	203e      	movs	r0, #62	; 0x3e
    abf2:	f7f9 fcab 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abf6:	4608      	mov	r0, r1
    abf8:	f000 fdf6 	bl	b7e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    abfc:	726e      	strb	r6, [r5, #9]
    abfe:	6026      	str	r6, [r4, #0]
    ac00:	e005      	b.n	ac0e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    ac02:	4608      	mov	r0, r1
    ac04:	f000 fdd6 	bl	b7b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    ac08:	2002      	movs	r0, #2
    ac0a:	7268      	strb	r0, [r5, #9]
    ac0c:	6066      	str	r6, [r4, #4]
    ac0e:	4807      	ldr	r0, [pc, #28]	; (ac2c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    ac10:	64c6      	str	r6, [r0, #76]	; 0x4c
    ac12:	4806      	ldr	r0, [pc, #24]	; (ac2c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    ac14:	300c      	adds	r0, #12
    ac16:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    ac1a:	4638      	mov	r0, r7
    ac1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ac20:	f000 bd5a 	b.w	b6d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    ac24:	20001328 	.word	0x20001328
    ac28:	40001000 	.word	0x40001000
    ac2c:	40008000 	.word	0x40008000

0000ac30 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac34:	4c2c      	ldr	r4, [pc, #176]	; (ace8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    ac36:	0006      	movs	r6, r0
    ac38:	4d2c      	ldr	r5, [pc, #176]	; (acec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    ac3a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    ac3e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; acf0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    ac42:	f040 0002 	orr.w	r0, r0, #2
    ac46:	4689      	mov	r9, r1
    ac48:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    ac4c:	f04f 0700 	mov.w	r7, #0
    ac50:	d002      	beq.n	ac58 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    ac52:	2e01      	cmp	r6, #1
    ac54:	d020      	beq.n	ac98 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    ac56:	e036      	b.n	acc6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    ac58:	4608      	mov	r0, r1
    ac5a:	f000 fdc5 	bl	b7e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    ac5e:	2001      	movs	r0, #1
    ac60:	7260      	strb	r0, [r4, #9]
    ac62:	79e0      	ldrb	r0, [r4, #7]
    ac64:	2801      	cmp	r0, #1
    ac66:	d105      	bne.n	ac74 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    ac68:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    ac6c:	f040 0008 	orr.w	r0, r0, #8
    ac70:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    ac74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ac76:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ac7a:	62a0      	str	r0, [r4, #40]	; 0x28
    ac7c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ac80:	f8c8 0000 	str.w	r0, [r8]
    ac84:	491b      	ldr	r1, [pc, #108]	; (acf4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    ac86:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    ac8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ac8e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    ac92:	fbb0 f7f1 	udiv	r7, r0, r1
    ac96:	e016      	b.n	acc6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    ac98:	4608      	mov	r0, r1
    ac9a:	f000 fd8b 	bl	b7b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    ac9e:	2002      	movs	r0, #2
    aca0:	7260      	strb	r0, [r4, #9]
    aca2:	79e0      	ldrb	r0, [r4, #7]
    aca4:	2801      	cmp	r0, #1
    aca6:	d105      	bne.n	acb4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    aca8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    acac:	f040 0004 	orr.w	r0, r0, #4
    acb0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    acb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    acb6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    acba:	62a0      	str	r0, [r4, #40]	; 0x28
    acbc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    acc0:	f8c8 0000 	str.w	r0, [r8]
    acc4:	2729      	movs	r7, #41	; 0x29
    acc6:	f000 fc15 	bl	b4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    acca:	f001 fa6a 	bl	c1a2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    acce:	b120      	cbz	r0, acda <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    acd0:	f7ff ff24 	bl	ab1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    acd4:	2000      	movs	r0, #0
    acd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    acda:	2100      	movs	r1, #0
    acdc:	4630      	mov	r0, r6
    acde:	f000 fcfb 	bl	b6d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    ace2:	4638      	mov	r0, r7
    ace4:	e7f7      	b.n	acd6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    ace6:	0000      	.short	0x0000
    ace8:	20001328 	.word	0x20001328
    acec:	40001000 	.word	0x40001000
    acf0:	4001f504 	.word	0x4001f504
    acf4:	0000b82c 	.word	0x0000b82c

0000acf8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    acf8:	4a02      	ldr	r2, [pc, #8]	; (ad04 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    acfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    acfc:	6003      	str	r3, [r0, #0]
    acfe:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ad00:	6008      	str	r0, [r1, #0]
    ad02:	4770      	bx	lr
    ad04:	20001328 	.word	0x20001328

0000ad08 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    ad08:	b510      	push	{r4, lr}
    ad0a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    ad0c:	4901      	ldr	r1, [pc, #4]	; (ad14 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    ad0e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    ad12:	bd10      	pop	{r4, pc}
    ad14:	20001318 	.word	0x20001318

0000ad18 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ad18:	490f      	ldr	r1, [pc, #60]	; (ad58 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    ad1a:	b510      	push	{r4, lr}
    ad1c:	69ca      	ldr	r2, [r1, #28]
    ad1e:	4282      	cmp	r2, r0
    ad20:	d302      	bcc.n	ad28 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ad22:	f640 111f 	movw	r1, #2335	; 0x91f
    ad26:	e00b      	b.n	ad40 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    ad28:	2201      	movs	r2, #1
    ad2a:	730a      	strb	r2, [r1, #12]
    ad2c:	6108      	str	r0, [r1, #16]
    ad2e:	490b      	ldr	r1, [pc, #44]	; (ad5c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ad30:	644a      	str	r2, [r1, #68]	; 0x44
    ad32:	1d0a      	adds	r2, r1, #4
    ad34:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    ad38:	4283      	cmp	r3, r0
    ad3a:	d304      	bcc.n	ad46 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    ad3c:	f640 1128 	movw	r1, #2344	; 0x928
    ad40:	203e      	movs	r0, #62	; 0x3e
    ad42:	f7f9 fc03 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad46:	2300      	movs	r3, #0
    ad48:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ad4c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad54:	f000 bc94 	b.w	b680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    ad58:	20001328 	.word	0x20001328
    ad5c:	40008000 	.word	0x40008000

0000ad60 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ad60:	b570      	push	{r4, r5, r6, lr}
    ad62:	4c0f      	ldr	r4, [pc, #60]	; (ada0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    ad64:	4603      	mov	r3, r0
    ad66:	2002      	movs	r0, #2
    ad68:	7320      	strb	r0, [r4, #12]
    ad6a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    ad6e:	2096      	movs	r0, #150	; 0x96
    ad70:	f894 1020 	ldrb.w	r1, [r4, #32]
    ad74:	7d22      	ldrb	r2, [r4, #20]
    ad76:	2d01      	cmp	r5, #1
    ad78:	d00e      	beq.n	ad98 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    ad7a:	f000 fd93 	bl	b8a4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ad7e:	6120      	str	r0, [r4, #16]
    ad80:	4808      	ldr	r0, [pc, #32]	; (ada4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ad82:	2100      	movs	r1, #0
    ad84:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ad88:	6921      	ldr	r1, [r4, #16]
    ad8a:	69e0      	ldr	r0, [r4, #28]
    ad8c:	4408      	add	r0, r1
    ad8e:	4905      	ldr	r1, [pc, #20]	; (ada4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ad90:	1d09      	adds	r1, r1, #4
    ad92:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ad96:	bd70      	pop	{r4, r5, r6, pc}
    ad98:	f000 fda2 	bl	b8e0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ad9c:	e7ef      	b.n	ad7e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    ad9e:	0000      	.short	0x0000
    ada0:	20001328 	.word	0x20001328
    ada4:	40008000 	.word	0x40008000

0000ada8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ada8:	b510      	push	{r4, lr}
    adaa:	f001 fb42 	bl	c432 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    adae:	2800      	cmp	r0, #0
    adb0:	d006      	beq.n	adc0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    adb2:	4804      	ldr	r0, [pc, #16]	; (adc4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    adb4:	6801      	ldr	r1, [r0, #0]
    adb6:	f021 0101 	bic.w	r1, r1, #1
    adba:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    adbe:	6001      	str	r1, [r0, #0]
    adc0:	bd10      	pop	{r4, pc}
    adc2:	0000      	.short	0x0000
    adc4:	40001774 	.word	0x40001774

0000adc8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    adc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adcc:	2238      	movs	r2, #56	; 0x38
    adce:	2100      	movs	r1, #0
    add0:	4813      	ldr	r0, [pc, #76]	; (ae20 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    add2:	f001 fbcc 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    add6:	f000 fcad 	bl	b734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    adda:	f001 fae3 	bl	c3a4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    adde:	4d11      	ldr	r5, [pc, #68]	; (ae24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ade0:	4e10      	ldr	r6, [pc, #64]	; (ae24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ade2:	2400      	movs	r4, #0
    ade4:	4f0f      	ldr	r7, [pc, #60]	; (ae24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ade6:	3508      	adds	r5, #8
    ade8:	3610      	adds	r6, #16
    adea:	b928      	cbnz	r0, adf8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    adec:	f001 faf1 	bl	c3d2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    adf0:	b910      	cbnz	r0, adf8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    adf2:	f001 faf8 	bl	c3e6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    adf6:	b108      	cbz	r0, adfc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    adf8:	2224      	movs	r2, #36	; 0x24
    adfa:	e006      	b.n	ae0a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    adfc:	f001 fb33 	bl	c466 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ae00:	b910      	cbnz	r0, ae08 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    ae02:	f001 fb26 	bl	c452 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ae06:	b140      	cbz	r0, ae1a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    ae08:	2240      	movs	r2, #64	; 0x40
    ae0a:	21ff      	movs	r1, #255	; 0xff
    ae0c:	4638      	mov	r0, r7
    ae0e:	f001 fbae 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ae12:	602c      	str	r4, [r5, #0]
    ae14:	6034      	str	r4, [r6, #0]
    ae16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae1a:	2238      	movs	r2, #56	; 0x38
    ae1c:	e7f5      	b.n	ae0a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ae1e:	0000      	.short	0x0000
    ae20:	20001328 	.word	0x20001328
    ae24:	40000e00 	.word	0x40000e00

0000ae28 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    ae28:	4801      	ldr	r0, [pc, #4]	; (ae30 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    ae2a:	69c0      	ldr	r0, [r0, #28]
    ae2c:	4770      	bx	lr
    ae2e:	0000      	.short	0x0000
    ae30:	20001328 	.word	0x20001328

0000ae34 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ae34:	4801      	ldr	r0, [pc, #4]	; (ae3c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ae36:	6980      	ldr	r0, [r0, #24]
    ae38:	4770      	bx	lr
    ae3a:	0000      	.short	0x0000
    ae3c:	20001328 	.word	0x20001328

0000ae40 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ae40:	b510      	push	{r4, lr}
    ae42:	f000 fc2b 	bl	b69c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ae46:	f7ff fe69 	bl	ab1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ae4a:	f7f9 fa31 	bl	42b0 <mpsl_fem_disable>
    ae4e:	b130      	cbz	r0, ae5e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ae50:	1c40      	adds	r0, r0, #1
    ae52:	d004      	beq.n	ae5e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ae54:	f240 516d 	movw	r1, #1389	; 0x56d
    ae58:	203e      	movs	r0, #62	; 0x3e
    ae5a:	f7f9 fb77 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae5e:	480f      	ldr	r0, [pc, #60]	; (ae9c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    ae60:	4a0f      	ldr	r2, [pc, #60]	; (aea0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    ae62:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ae64:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    ae68:	6011      	str	r1, [r2, #0]
    ae6a:	2400      	movs	r4, #0
    ae6c:	6284      	str	r4, [r0, #40]	; 0x28
    ae6e:	7304      	strb	r4, [r0, #12]
    ae70:	61c4      	str	r4, [r0, #28]
    ae72:	6184      	str	r4, [r0, #24]
    ae74:	f000 fc12 	bl	b69c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ae78:	480a      	ldr	r0, [pc, #40]	; (aea4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    ae7a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ae7e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    ae82:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    ae86:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    ae8a:	2001      	movs	r0, #1
    ae8c:	f005 fc07 	bl	1069e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ae90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae94:	2001      	movs	r0, #1
    ae96:	f005 bbf5 	b.w	10684 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ae9a:	0000      	.short	0x0000
    ae9c:	20001328 	.word	0x20001328
    aea0:	4001f508 	.word	0x4001f508
    aea4:	40008000 	.word	0x40008000

0000aea8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    aea8:	b570      	push	{r4, r5, r6, lr}
    aeaa:	2001      	movs	r0, #1
    aeac:	f005 fbf7 	bl	1069e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aeb0:	4c37      	ldr	r4, [pc, #220]	; (af90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    aeb2:	2000      	movs	r0, #0
    aeb4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    aeb8:	2001      	movs	r0, #1
    aeba:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    aebe:	f001 faa8 	bl	c412 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    aec2:	4d34      	ldr	r5, [pc, #208]	; (af94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aec4:	b118      	cbz	r0, aece <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    aec6:	6828      	ldr	r0, [r5, #0]
    aec8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    aecc:	6028      	str	r0, [r5, #0]
    aece:	f001 fa94 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    aed2:	b128      	cbz	r0, aee0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    aed4:	6828      	ldr	r0, [r5, #0]
    aed6:	4930      	ldr	r1, [pc, #192]	; (af98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    aed8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    aedc:	4308      	orrs	r0, r1
    aede:	6028      	str	r0, [r5, #0]
    aee0:	f001 faa7 	bl	c432 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    aee4:	b138      	cbz	r0, aef6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    aee6:	482b      	ldr	r0, [pc, #172]	; (af94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aee8:	1d00      	adds	r0, r0, #4
    aeea:	6801      	ldr	r1, [r0, #0]
    aeec:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    aef0:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    aef4:	6001      	str	r1, [r0, #0]
    aef6:	4927      	ldr	r1, [pc, #156]	; (af94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aef8:	4828      	ldr	r0, [pc, #160]	; (af9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    aefa:	313c      	adds	r1, #60	; 0x3c
    aefc:	6008      	str	r0, [r1, #0]
    aefe:	f7f9 fa0d 	bl	431c <mpsl_fem_device_config_254_apply_get>
    af02:	b140      	cbz	r0, af16 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    af04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    af08:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    af0c:	1c41      	adds	r1, r0, #1
    af0e:	d002      	beq.n	af16 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    af10:	4920      	ldr	r1, [pc, #128]	; (af94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    af12:	3110      	adds	r1, #16
    af14:	6008      	str	r0, [r1, #0]
    af16:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    af1a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    af1c:	1c41      	adds	r1, r0, #1
    af1e:	d004      	beq.n	af2a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    af20:	491f      	ldr	r1, [pc, #124]	; (afa0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    af22:	680a      	ldr	r2, [r1, #0]
    af24:	f360 4217 	bfi	r2, r0, #16, #8
    af28:	600a      	str	r2, [r1, #0]
    af2a:	f240 1103 	movw	r1, #259	; 0x103
    af2e:	f240 605b 	movw	r0, #1627	; 0x65b
    af32:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    af36:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    af3a:	2001      	movs	r0, #1
    af3c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    af40:	f000 f842 	bl	afc8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    af44:	f240 2001 	movw	r0, #513	; 0x201
    af48:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    af4c:	2002      	movs	r0, #2
    af4e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    af52:	4914      	ldr	r1, [pc, #80]	; (afa4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    af54:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    af58:	6008      	str	r0, [r1, #0]
    af5a:	4913      	ldr	r1, [pc, #76]	; (afa8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    af5c:	2000      	movs	r0, #0
    af5e:	4d13      	ldr	r5, [pc, #76]	; (afac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    af60:	8608      	strh	r0, [r1, #48]	; 0x30
    af62:	3110      	adds	r1, #16
    af64:	61c8      	str	r0, [r1, #28]
    af66:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    af6a:	7028      	strb	r0, [r5, #0]
    af6c:	2001      	movs	r0, #1
    af6e:	f005 fb89 	bl	10684 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    af72:	2010      	movs	r0, #16
    af74:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    af78:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    af7c:	2002      	movs	r0, #2
    af7e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    af82:	6868      	ldr	r0, [r5, #4]
    af84:	2800      	cmp	r0, #0
    af86:	d002      	beq.n	af8e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    af88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    af8c:	4700      	bx	r0
    af8e:	bd70      	pop	{r4, r5, r6, pc}
    af90:	40001000 	.word	0x40001000
    af94:	4000173c 	.word	0x4000173c
    af98:	80000096 	.word	0x80000096
    af9c:	8900002c 	.word	0x8900002c
    afa0:	4000158c 	.word	0x4000158c
    afa4:	4001f504 	.word	0x4001f504
    afa8:	20001318 	.word	0x20001318
    afac:	20000320 	.word	0x20000320

0000afb0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    afb0:	4901      	ldr	r1, [pc, #4]	; (afb8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    afb2:	7548      	strb	r0, [r1, #21]
    afb4:	4770      	bx	lr
    afb6:	0000      	.short	0x0000
    afb8:	20001328 	.word	0x20001328

0000afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    afbc:	4901      	ldr	r1, [pc, #4]	; (afc4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    afbe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    afc2:	4770      	bx	lr
    afc4:	0000b880 	.word	0x0000b880

0000afc8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    afc8:	4908      	ldr	r1, [pc, #32]	; (afec <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    afca:	b510      	push	{r4, lr}
    afcc:	7508      	strb	r0, [r1, #20]
    afce:	4908      	ldr	r1, [pc, #32]	; (aff0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    afd0:	2801      	cmp	r0, #1
    afd2:	d006      	beq.n	afe2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    afd4:	2802      	cmp	r0, #2
    afd6:	d006      	beq.n	afe6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    afd8:	f640 5169 	movw	r1, #3433	; 0xd69
    afdc:	203e      	movs	r0, #62	; 0x3e
    afde:	f7f9 fab5 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afe2:	2003      	movs	r0, #3
    afe4:	e000      	b.n	afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    afe6:	2004      	movs	r0, #4
    afe8:	6008      	str	r0, [r1, #0]
    afea:	bd10      	pop	{r4, pc}
    afec:	20001328 	.word	0x20001328
    aff0:	40001510 	.word	0x40001510

0000aff4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    aff4:	4905      	ldr	r1, [pc, #20]	; (b00c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    aff6:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    affa:	4805      	ldr	r0, [pc, #20]	; (b010 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    affc:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b000:	f041 0101 	orr.w	r1, r1, #1
    b004:	7001      	strb	r1, [r0, #0]
    b006:	f000 ba3b 	b.w	b480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b00a:	0000      	.short	0x0000
    b00c:	40001000 	.word	0x40001000
    b010:	20001328 	.word	0x20001328

0000b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    b014:	4901      	ldr	r1, [pc, #4]	; (b01c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    b016:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b01a:	4770      	bx	lr
    b01c:	0000b88c 	.word	0x0000b88c

0000b020 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b024:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b0c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    b028:	4d28      	ldr	r5, [pc, #160]	; (b0cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    b02a:	460f      	mov	r7, r1
    b02c:	0006      	movs	r6, r0
    b02e:	4614      	mov	r4, r2
    b030:	f04f 0801 	mov.w	r8, #1
    b034:	d004      	beq.n	b040 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    b036:	2e01      	cmp	r6, #1
    b038:	d010      	beq.n	b05c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    b03a:	f640 0124 	movw	r1, #2084	; 0x824
    b03e:	e039      	b.n	b0b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    b040:	4610      	mov	r0, r2
    b042:	f000 fbd1 	bl	b7e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b046:	4822      	ldr	r0, [pc, #136]	; (b0d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    b048:	f885 8009 	strb.w	r8, [r5, #9]
    b04c:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    b050:	4638      	mov	r0, r7
    b052:	f000 fb77 	bl	b744 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    b056:	4604      	mov	r4, r0
    b058:	4648      	mov	r0, r9
    b05a:	e00c      	b.n	b076 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    b05c:	4610      	mov	r0, r2
    b05e:	f000 fba9 	bl	b7b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b062:	2002      	movs	r0, #2
    b064:	7268      	strb	r0, [r5, #9]
    b066:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b06a:	4638      	mov	r0, r7
    b06c:	f000 fb6a 	bl	b744 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    b070:	4604      	mov	r4, r0
    b072:	4815      	ldr	r0, [pc, #84]	; (b0c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    b074:	1d00      	adds	r0, r0, #4
    b076:	f000 fb23 	bl	b6c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    b07a:	4f16      	ldr	r7, [pc, #88]	; (b0d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    b07c:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    b080:	4916      	ldr	r1, [pc, #88]	; (b0dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    b082:	4815      	ldr	r0, [pc, #84]	; (b0d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    b084:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b088:	2010      	movs	r0, #16
    b08a:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    b08e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b090:	4913      	ldr	r1, [pc, #76]	; (b0e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    b092:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b096:	62a8      	str	r0, [r5, #40]	; 0x28
    b098:	0138      	lsls	r0, r7, #4
    b09a:	6008      	str	r0, [r1, #0]
    b09c:	f000 fa2a 	bl	b4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    b0a0:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    b0a4:	480b      	ldr	r0, [pc, #44]	; (b0d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    b0a6:	300c      	adds	r0, #12
    b0a8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b0ac:	42a0      	cmp	r0, r4
    b0ae:	d304      	bcc.n	b0ba <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    b0b0:	f640 013a 	movw	r1, #2106	; 0x83a
    b0b4:	203e      	movs	r0, #62	; 0x3e
    b0b6:	f7f9 fa49 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0ba:	4621      	mov	r1, r4
    b0bc:	4630      	mov	r0, r6
    b0be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0c2:	f000 bb09 	b.w	b6d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b0c6:	0000      	.short	0x0000
    b0c8:	40001000 	.word	0x40001000
    b0cc:	20001328 	.word	0x20001328
    b0d0:	0000b82c 	.word	0x0000b82c
    b0d4:	40008000 	.word	0x40008000
    b0d8:	40008140 	.word	0x40008140
    b0dc:	4001f098 	.word	0x4001f098
    b0e0:	4001f504 	.word	0x4001f504

0000b0e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b0e4:	4b0d      	ldr	r3, [pc, #52]	; (b11c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    b0e6:	b510      	push	{r4, lr}
    b0e8:	71d8      	strb	r0, [r3, #7]
    b0ea:	729a      	strb	r2, [r3, #10]
    b0ec:	b151      	cbz	r1, b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    b0ee:	2002      	movs	r0, #2
    b0f0:	7218      	strb	r0, [r3, #8]
    b0f2:	2801      	cmp	r0, #1
    b0f4:	d008      	beq.n	b108 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    b0f6:	2802      	cmp	r0, #2
    b0f8:	d00f      	beq.n	b11a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b0fa:	f640 2145 	movw	r1, #2629	; 0xa45
    b0fe:	203e      	movs	r0, #62	; 0x3e
    b100:	f7f9 fa24 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b104:	2001      	movs	r0, #1
    b106:	e7f3      	b.n	b0f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    b108:	7a58      	ldrb	r0, [r3, #9]
    b10a:	2802      	cmp	r0, #2
    b10c:	d105      	bne.n	b11a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b10e:	f000 f97b 	bl	b408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    b112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b116:	f000 baa9 	b.w	b66c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    b11a:	bd10      	pop	{r4, pc}
    b11c:	20001328 	.word	0x20001328

0000b120 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    b120:	4902      	ldr	r1, [pc, #8]	; (b12c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    b122:	2000      	movs	r0, #0
    b124:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b128:	4770      	bx	lr
    b12a:	0000      	.short	0x0000
    b12c:	40008000 	.word	0x40008000

0000b130 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b130:	4904      	ldr	r1, [pc, #16]	; (b144 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    b132:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    b136:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    b13a:	4249      	negs	r1, r1
    b13c:	7001      	strb	r1, [r0, #0]
    b13e:	2001      	movs	r0, #1
    b140:	4770      	bx	lr
    b142:	0000      	.short	0x0000
    b144:	40001000 	.word	0x40001000

0000b148 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b148:	4903      	ldr	r1, [pc, #12]	; (b158 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b14a:	0e02      	lsrs	r2, r0, #24
    b14c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    b150:	0200      	lsls	r0, r0, #8
    b152:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    b156:	4770      	bx	lr
    b158:	40001000 	.word	0x40001000

0000b15c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b15c:	4901      	ldr	r1, [pc, #4]	; (b164 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    b15e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b162:	4770      	bx	lr
    b164:	40001000 	.word	0x40001000

0000b168 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    b168:	b510      	push	{r4, lr}
    b16a:	2200      	movs	r2, #0
    b16c:	2901      	cmp	r1, #1
    b16e:	d006      	beq.n	b17e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    b170:	2902      	cmp	r1, #2
    b172:	d002      	beq.n	b17a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    b174:	f240 21d9 	movw	r1, #729	; 0x2d9
    b178:	e014      	b.n	b1a4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    b17a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b17e:	490b      	ldr	r1, [pc, #44]	; (b1ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    b180:	430a      	orrs	r2, r1
    b182:	490b      	ldr	r1, [pc, #44]	; (b1b0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b184:	600a      	str	r2, [r1, #0]
    b186:	490b      	ldr	r1, [pc, #44]	; (b1b4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    b188:	4308      	orrs	r0, r1
    b18a:	4909      	ldr	r1, [pc, #36]	; (b1b0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b18c:	1d09      	adds	r1, r1, #4
    b18e:	6008      	str	r0, [r1, #0]
    b190:	4809      	ldr	r0, [pc, #36]	; (b1b8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    b192:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b196:	b2c0      	uxtb	r0, r0
    b198:	2803      	cmp	r0, #3
    b19a:	d001      	beq.n	b1a0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    b19c:	280b      	cmp	r0, #11
    b19e:	d104      	bne.n	b1aa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    b1a0:	f240 21f1 	movw	r1, #753	; 0x2f1
    b1a4:	203e      	movs	r0, #62	; 0x3e
    b1a6:	f7f9 f9d1 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1aa:	bd10      	pop	{r4, pc}
    b1ac:	00100108 	.word	0x00100108
    b1b0:	40001514 	.word	0x40001514
    b1b4:	02030000 	.word	0x02030000
    b1b8:	40001000 	.word	0x40001000

0000b1bc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b1bc:	4901      	ldr	r1, [pc, #4]	; (b1c4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b1be:	7588      	strb	r0, [r1, #22]
    b1c0:	4770      	bx	lr
    b1c2:	0000      	.short	0x0000
    b1c4:	20001328 	.word	0x20001328

0000b1c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1cc:	4852      	ldr	r0, [pc, #328]	; (b318 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b1ce:	f04f 0a01 	mov.w	sl, #1
    b1d2:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    b1d6:	4850      	ldr	r0, [pc, #320]	; (b318 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b1d8:	300c      	adds	r0, #12
    b1da:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    b1de:	f000 ffde 	bl	c19e <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    b1e2:	4c4e      	ldr	r4, [pc, #312]	; (b31c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b1e4:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    b1e8:	f000 f918 	bl	b41c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b1ec:	494c      	ldr	r1, [pc, #304]	; (b320 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b1ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b1f0:	6008      	str	r0, [r1, #0]
    b1f2:	f8df 9130 	ldr.w	r9, [pc, #304]	; b324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b1f6:	2000      	movs	r0, #0
    b1f8:	62a0      	str	r0, [r4, #40]	; 0x28
    b1fa:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    b1fe:	f240 131d 	movw	r3, #285	; 0x11d
    b202:	439a      	bics	r2, r3
    b204:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    b208:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b20c:	f000 f986 	bl	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    b210:	4605      	mov	r5, r0
    b212:	4841      	ldr	r0, [pc, #260]	; (b318 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b214:	3008      	adds	r0, #8
    b216:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b21a:	4e3f      	ldr	r6, [pc, #252]	; (b318 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b21c:	61e0      	str	r0, [r4, #28]
    b21e:	1d36      	adds	r6, r6, #4
    b220:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b224:	61a0      	str	r0, [r4, #24]
    b226:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b22a:	7d21      	ldrb	r1, [r4, #20]
    b22c:	f884 1020 	strb.w	r1, [r4, #32]
    b230:	7a61      	ldrb	r1, [r4, #9]
    b232:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b236:	46a0      	mov	r8, r4
    b238:	2400      	movs	r4, #0
    b23a:	4639      	mov	r1, r7
    b23c:	4628      	mov	r0, r5
    b23e:	f000 f9e1 	bl	b604 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    b242:	b910      	cbnz	r0, b24a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    b244:	f8c9 a010 	str.w	sl, [r9, #16]
    b248:	2401      	movs	r4, #1
    b24a:	4f34      	ldr	r7, [pc, #208]	; (b31c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b24c:	07e8      	lsls	r0, r5, #31
    b24e:	f1a7 0710 	sub.w	r7, r7, #16
    b252:	d002      	beq.n	b25a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b254:	6838      	ldr	r0, [r7, #0]
    b256:	4780      	blx	r0
    b258:	e032      	b.n	b2c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b25a:	07a8      	lsls	r0, r5, #30
    b25c:	d527      	bpl.n	b2ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    b25e:	0768      	lsls	r0, r5, #29
    b260:	d41f      	bmi.n	b2a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b262:	f001 f8e6 	bl	c432 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b266:	b9e0      	cbnz	r0, b2a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b268:	f001 f8d3 	bl	c412 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b26c:	b9c8      	cbnz	r0, b2a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b26e:	482e      	ldr	r0, [pc, #184]	; (b328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b270:	6800      	ldr	r0, [r0, #0]
    b272:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    b276:	f3c0 5142 	ubfx	r1, r0, #21, #3
    b27a:	f000 030f 	and.w	r3, r0, #15
    b27e:	f3c0 1203 	ubfx	r2, r0, #4, #4
    b282:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b286:	f1bc 0f00 	cmp.w	ip, #0
    b28a:	d00a      	beq.n	b2a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b28c:	b10b      	cbz	r3, b292 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b28e:	b102      	cbz	r2, b292 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b290:	b938      	cbnz	r0, b2a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b292:	4825      	ldr	r0, [pc, #148]	; (b328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b294:	1d00      	adds	r0, r0, #4
    b296:	6800      	ldr	r0, [r0, #0]
    b298:	b118      	cbz	r0, b2a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b29a:	2903      	cmp	r1, #3
    b29c:	d201      	bcs.n	b2a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b29e:	f045 0504 	orr.w	r5, r5, #4
    b2a2:	f345 0080 	sbfx	r0, r5, #2, #1
    b2a6:	4621      	mov	r1, r4
    b2a8:	1c40      	adds	r0, r0, #1
    b2aa:	687a      	ldr	r2, [r7, #4]
    b2ac:	e007      	b.n	b2be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b2ae:	f015 0f28 	tst.w	r5, #40	; 0x28
    b2b2:	d005      	beq.n	b2c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b2b4:	f345 1140 	sbfx	r1, r5, #5, #1
    b2b8:	68ba      	ldr	r2, [r7, #8]
    b2ba:	4620      	mov	r0, r4
    b2bc:	1c49      	adds	r1, r1, #1
    b2be:	4790      	blx	r2
    b2c0:	06e8      	lsls	r0, r5, #27
    b2c2:	d501      	bpl.n	b2c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b2c4:	68f8      	ldr	r0, [r7, #12]
    b2c6:	4780      	blx	r0
    b2c8:	f898 1009 	ldrb.w	r1, [r8, #9]
    b2cc:	4640      	mov	r0, r8
    b2ce:	2902      	cmp	r1, #2
    b2d0:	d120      	bne.n	b314 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b2d2:	7b01      	ldrb	r1, [r0, #12]
    b2d4:	2900      	cmp	r1, #0
    b2d6:	d01d      	beq.n	b314 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b2d8:	2902      	cmp	r1, #2
    b2da:	d004      	beq.n	b2e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    b2dc:	2901      	cmp	r1, #1
    b2de:	d009      	beq.n	b2f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    b2e0:	f640 4148 	movw	r1, #3144	; 0xc48
    b2e4:	e00d      	b.n	b302 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    b2e6:	69c1      	ldr	r1, [r0, #28]
    b2e8:	f8d8 0010 	ldr.w	r0, [r8, #16]
    b2ec:	4408      	add	r0, r1
    b2ee:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b2f2:	e00b      	b.n	b30c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    b2f4:	6901      	ldr	r1, [r0, #16]
    b2f6:	f8d8 001c 	ldr.w	r0, [r8, #28]
    b2fa:	4281      	cmp	r1, r0
    b2fc:	d804      	bhi.n	b308 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    b2fe:	f640 4149 	movw	r1, #3145	; 0xc49
    b302:	203e      	movs	r0, #62	; 0x3e
    b304:	f7f9 f922 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b308:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    b30c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b310:	f000 b9b6 	b.w	b680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b318:	40008000 	.word	0x40008000
    b31c:	20001328 	.word	0x20001328
    b320:	4001f508 	.word	0x4001f508
    b324:	40001000 	.word	0x40001000
    b328:	40001450 	.word	0x40001450

0000b32c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b32c:	b570      	push	{r4, r5, r6, lr}
    b32e:	4b16      	ldr	r3, [pc, #88]	; (b388 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    b330:	888c      	ldrh	r4, [r1, #4]
    b332:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    b336:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    b33a:	780c      	ldrb	r4, [r1, #0]
    b33c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b340:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b344:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    b348:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    b34c:	2401      	movs	r4, #1
    b34e:	4084      	lsls	r4, r0
    b350:	b2c9      	uxtb	r1, r1
    b352:	b2e5      	uxtb	r5, r4
    b354:	4329      	orrs	r1, r5
    b356:	b132      	cbz	r2, b366 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b358:	2a01      	cmp	r2, #1
    b35a:	d00a      	beq.n	b372 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    b35c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    b360:	203e      	movs	r0, #62	; 0x3e
    b362:	f7f9 f8f3 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b366:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b36a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b36e:	43a0      	bics	r0, r4
    b370:	e004      	b.n	b37c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b372:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b376:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b37a:	4328      	orrs	r0, r5
    b37c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b380:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b384:	bd70      	pop	{r4, r5, r6, pc}
    b386:	0000      	.short	0x0000
    b388:	40001000 	.word	0x40001000

0000b38c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b38c:	4901      	ldr	r1, [pc, #4]	; (b394 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b38e:	2001      	movs	r0, #1
    b390:	7008      	strb	r0, [r1, #0]
    b392:	4770      	bx	lr
    b394:	20000320 	.word	0x20000320
    b398:	480b      	ldr	r0, [pc, #44]	; (b3c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    b39a:	7d81      	ldrb	r1, [r0, #22]
    b39c:	480b      	ldr	r0, [pc, #44]	; (b3cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b39e:	5c40      	ldrb	r0, [r0, r1]
    b3a0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b3a4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    b3a8:	d204      	bcs.n	b3b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    b3aa:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    b3ae:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b3b2:	e001      	b.n	b3b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b3b4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    b3b8:	4a05      	ldr	r2, [pc, #20]	; (b3d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    b3ba:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    b3be:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    b3c2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    b3c6:	4770      	bx	lr
    b3c8:	20001328 	.word	0x20001328
    b3cc:	0000b832 	.word	0x0000b832
    b3d0:	40001000 	.word	0x40001000
    b3d4:	b508      	push	{r3, lr}
    b3d6:	490b      	ldr	r1, [pc, #44]	; (b404 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    b3d8:	466b      	mov	r3, sp
    b3da:	f991 2015 	ldrsb.w	r2, [r1, #21]
    b3de:	7d89      	ldrb	r1, [r1, #22]
    b3e0:	f000 faca 	bl	b978 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    b3e4:	f99d 0000 	ldrsb.w	r0, [sp]
    b3e8:	f000 fa9a 	bl	b920 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b3ec:	f10d 0001 	add.w	r0, sp, #1
    b3f0:	f7f8 ff82 	bl	42f8 <mpsl_fem_pa_gain_set>
    b3f4:	2800      	cmp	r0, #0
    b3f6:	d004      	beq.n	b402 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    b3f8:	f240 6115 	movw	r1, #1557	; 0x615
    b3fc:	203e      	movs	r0, #62	; 0x3e
    b3fe:	f7f9 f8a5 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b402:	bd08      	pop	{r3, pc}
    b404:	20001328 	.word	0x20001328
    b408:	4803      	ldr	r0, [pc, #12]	; (b418 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    b40a:	7a01      	ldrb	r1, [r0, #8]
    b40c:	2901      	cmp	r1, #1
    b40e:	d102      	bne.n	b416 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    b410:	7a80      	ldrb	r0, [r0, #10]
    b412:	f7ff bfdf 	b.w	b3d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b416:	4770      	bx	lr
    b418:	20001328 	.word	0x20001328
    b41c:	480d      	ldr	r0, [pc, #52]	; (b454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    b41e:	b510      	push	{r4, lr}
    b420:	7a40      	ldrb	r0, [r0, #9]
    b422:	2801      	cmp	r0, #1
    b424:	d00c      	beq.n	b440 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    b426:	2802      	cmp	r0, #2
    b428:	d113      	bne.n	b452 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b42a:	f7f8 ff47 	bl	42bc <mpsl_fem_lna_configuration_clear>
    b42e:	2800      	cmp	r0, #0
    b430:	d00f      	beq.n	b452 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b432:	1c40      	adds	r0, r0, #1
    b434:	d00d      	beq.n	b452 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b436:	f640 01a6 	movw	r1, #2214	; 0x8a6
    b43a:	203e      	movs	r0, #62	; 0x3e
    b43c:	f7f9 f886 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b440:	f7f8 ff4e 	bl	42e0 <mpsl_fem_pa_configuration_clear>
    b444:	2800      	cmp	r0, #0
    b446:	d004      	beq.n	b452 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b448:	1c40      	adds	r0, r0, #1
    b44a:	d002      	beq.n	b452 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b44c:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    b450:	e7f3      	b.n	b43a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    b452:	bd10      	pop	{r4, pc}
    b454:	20001328 	.word	0x20001328
    b458:	4808      	ldr	r0, [pc, #32]	; (b47c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    b45a:	2100      	movs	r1, #0
    b45c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b460:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b464:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b468:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b46c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b470:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b474:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b478:	4770      	bx	lr
    b47a:	0000      	.short	0x0000
    b47c:	40001000 	.word	0x40001000
    b480:	4818      	ldr	r0, [pc, #96]	; (b4e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    b482:	b510      	push	{r4, lr}
    b484:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b488:	07c1      	lsls	r1, r0, #31
    b48a:	d029      	beq.n	b4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b48c:	0781      	lsls	r1, r0, #30
    b48e:	d514      	bpl.n	b4ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    b490:	4815      	ldr	r0, [pc, #84]	; (b4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b492:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b496:	f041 0101 	orr.w	r1, r1, #1
    b49a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b49e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b4a2:	b2c0      	uxtb	r0, r0
    b4a4:	280b      	cmp	r0, #11
    b4a6:	d005      	beq.n	b4b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4a8:	280a      	cmp	r0, #10
    b4aa:	d003      	beq.n	b4b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4ac:	2803      	cmp	r0, #3
    b4ae:	d001      	beq.n	b4b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4b0:	2802      	cmp	r0, #2
    b4b2:	d115      	bne.n	b4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4b4:	f240 613e 	movw	r1, #1598	; 0x63e
    b4b8:	e00f      	b.n	b4da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    b4ba:	0740      	lsls	r0, r0, #29
    b4bc:	d510      	bpl.n	b4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4be:	480a      	ldr	r0, [pc, #40]	; (b4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b4c0:	490a      	ldr	r1, [pc, #40]	; (b4ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    b4c2:	3008      	adds	r0, #8
    b4c4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b4c8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    b4cc:	4808      	ldr	r0, [pc, #32]	; (b4f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    b4ce:	f005 f8fc 	bl	106ca <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    b4d2:	2800      	cmp	r0, #0
    b4d4:	d004      	beq.n	b4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4d6:	f240 6146 	movw	r1, #1606	; 0x646
    b4da:	203e      	movs	r0, #62	; 0x3e
    b4dc:	f7f9 f836 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4e0:	bd10      	pop	{r4, pc}
    b4e2:	0000      	.short	0x0000
    b4e4:	20001328 	.word	0x20001328
    b4e8:	40001000 	.word	0x40001000
    b4ec:	4001f098 	.word	0x4001f098
    b4f0:	40008000 	.word	0x40008000
    b4f4:	4808      	ldr	r0, [pc, #32]	; (b518 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    b4f6:	4601      	mov	r1, r0
    b4f8:	79c2      	ldrb	r2, [r0, #7]
    b4fa:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b4fe:	b112      	cbz	r2, b506 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    b500:	2a01      	cmp	r2, #1
    b502:	d003      	beq.n	b50c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    b504:	e006      	b.n	b514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    b506:	f041 0102 	orr.w	r1, r1, #2
    b50a:	e001      	b.n	b510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    b50c:	f041 0104 	orr.w	r1, r1, #4
    b510:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b514:	f7ff bfb4 	b.w	b480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b518:	20001328 	.word	0x20001328
    b51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b520:	4d34      	ldr	r5, [pc, #208]	; (b5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    b522:	2400      	movs	r4, #0
    b524:	7b28      	ldrb	r0, [r5, #12]
    b526:	b138      	cbz	r0, b538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    b528:	f44f 71a2 	mov.w	r1, #324	; 0x144
    b52c:	4832      	ldr	r0, [pc, #200]	; (b5f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    b52e:	f005 f8cc 	bl	106ca <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    b532:	b108      	cbz	r0, b538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    b534:	2601      	movs	r6, #1
    b536:	e000      	b.n	b53a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    b538:	2600      	movs	r6, #0
    b53a:	7a68      	ldrb	r0, [r5, #9]
    b53c:	4f2f      	ldr	r7, [pc, #188]	; (b5fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    b53e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b542:	2801      	cmp	r0, #1
    b544:	d002      	beq.n	b54c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    b546:	2802      	cmp	r0, #2
    b548:	d006      	beq.n	b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b54a:	e016      	b.n	b57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b54c:	4638      	mov	r0, r7
    b54e:	f005 f8b7 	bl	106c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b552:	b190      	cbz	r0, b57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b554:	2408      	movs	r4, #8
    b556:	e010      	b.n	b57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b558:	4638      	mov	r0, r7
    b55a:	f005 f8b1 	bl	106c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b55e:	b100      	cbz	r0, b562 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    b560:	2402      	movs	r4, #2
    b562:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    b566:	43c0      	mvns	r0, r0
    b568:	f340 0000 	sbfx	r0, r0, #0, #1
    b56c:	1c40      	adds	r0, r0, #1
    b56e:	d101      	bne.n	b574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    b570:	f044 0404 	orr.w	r4, r4, #4
    b574:	b10e      	cbz	r6, b57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b576:	f044 0401 	orr.w	r4, r4, #1
    b57a:	f014 0f0b 	tst.w	r4, #11
    b57e:	d107      	bne.n	b590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b580:	f44f 7188 	mov.w	r1, #272	; 0x110
    b584:	4638      	mov	r0, r7
    b586:	f005 f89b 	bl	106c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b58a:	b108      	cbz	r0, b590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b58c:	f044 0410 	orr.w	r4, r4, #16
    b590:	481b      	ldr	r0, [pc, #108]	; (b600 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    b592:	7800      	ldrb	r0, [r0, #0]
    b594:	b1f8      	cbz	r0, b5d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    b596:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    b59a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    b59e:	d007      	beq.n	b5b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b5a0:	f44f 718a 	mov.w	r1, #276	; 0x114
    b5a4:	4638      	mov	r0, r7
    b5a6:	f005 f88b 	bl	106c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5aa:	b108      	cbz	r0, b5b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b5ac:	2001      	movs	r0, #1
    b5ae:	e000      	b.n	b5b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    b5b0:	2000      	movs	r0, #0
    b5b2:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    b5b6:	b13e      	cbz	r6, b5c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    b5b8:	f44f 718c 	mov.w	r1, #280	; 0x118
    b5bc:	4638      	mov	r0, r7
    b5be:	f005 f87f 	bl	106c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5c2:	b108      	cbz	r0, b5c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    b5c4:	2001      	movs	r0, #1
    b5c6:	e000      	b.n	b5ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    b5c8:	2000      	movs	r0, #0
    b5ca:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b5ce:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    b5d2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b5d6:	f7ff ff3f 	bl	b458 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    b5da:	06e0      	lsls	r0, r4, #27
    b5dc:	d506      	bpl.n	b5ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b5de:	0720      	lsls	r0, r4, #28
    b5e0:	d404      	bmi.n	b5ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b5e2:	7a68      	ldrb	r0, [r5, #9]
    b5e4:	2801      	cmp	r0, #1
    b5e6:	d101      	bne.n	b5ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b5e8:	f044 0420 	orr.w	r4, r4, #32
    b5ec:	4620      	mov	r0, r4
    b5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5f2:	0000      	.short	0x0000
    b5f4:	20001328 	.word	0x20001328
    b5f8:	40008000 	.word	0x40008000
    b5fc:	40001000 	.word	0x40001000
    b600:	20000320 	.word	0x20000320
    b604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b608:	4c17      	ldr	r4, [pc, #92]	; (b668 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    b60a:	460d      	mov	r5, r1
    b60c:	7a21      	ldrb	r1, [r4, #8]
    b60e:	b129      	cbz	r1, b61c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    b610:	f010 0f11 	tst.w	r0, #17
    b614:	d007      	beq.n	b626 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    b616:	f7ff fa81 	bl	ab1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b61a:	e023      	b.n	b664 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b61c:	f000 f88a 	bl	b734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b620:	2000      	movs	r0, #0
    b622:	7320      	strb	r0, [r4, #12]
    b624:	e01e      	b.n	b664 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b626:	2901      	cmp	r1, #1
    b628:	d001      	beq.n	b62e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    b62a:	2601      	movs	r6, #1
    b62c:	e000      	b.n	b630 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    b62e:	2600      	movs	r6, #0
    b630:	79e0      	ldrb	r0, [r4, #7]
    b632:	2801      	cmp	r0, #1
    b634:	d00e      	beq.n	b654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    b636:	2700      	movs	r7, #0
    b638:	f000 f87c 	bl	b734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b63c:	2196      	movs	r1, #150	; 0x96
    b63e:	4630      	mov	r0, r6
    b640:	f000 f88e 	bl	b760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    b644:	4601      	mov	r1, r0
    b646:	b14f      	cbz	r7, b65c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    b648:	353b      	adds	r5, #59	; 0x3b
    b64a:	428d      	cmp	r5, r1
    b64c:	d904      	bls.n	b658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    b64e:	2000      	movs	r0, #0
    b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b654:	2701      	movs	r7, #1
    b656:	e7ef      	b.n	b638 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    b658:	2001      	movs	r0, #1
    b65a:	71e0      	strb	r0, [r4, #7]
    b65c:	7aa2      	ldrb	r2, [r4, #10]
    b65e:	4630      	mov	r0, r6
    b660:	f7ff fcde 	bl	b020 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b664:	2001      	movs	r0, #1
    b666:	e7f3      	b.n	b650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    b668:	20001328 	.word	0x20001328
    b66c:	4803      	ldr	r0, [pc, #12]	; (b67c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    b66e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b672:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b676:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b67a:	4770      	bx	lr
    b67c:	40001000 	.word	0x40001000
    b680:	4804      	ldr	r0, [pc, #16]	; (b694 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    b682:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b684:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b688:	6281      	str	r1, [r0, #40]	; 0x28
    b68a:	4903      	ldr	r1, [pc, #12]	; (b698 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    b68c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b690:	6008      	str	r0, [r1, #0]
    b692:	4770      	bx	lr
    b694:	20001328 	.word	0x20001328
    b698:	4001f504 	.word	0x4001f504
    b69c:	4a07      	ldr	r2, [pc, #28]	; (b6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b69e:	2000      	movs	r0, #0
    b6a0:	3208      	adds	r2, #8
    b6a2:	4906      	ldr	r1, [pc, #24]	; (b6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b6a4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b6a8:	1d0a      	adds	r2, r1, #4
    b6aa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b6ae:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6b2:	4902      	ldr	r1, [pc, #8]	; (b6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b6b4:	310c      	adds	r1, #12
    b6b6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6ba:	4770      	bx	lr
    b6bc:	40008000 	.word	0x40008000
    b6c0:	4903      	ldr	r1, [pc, #12]	; (b6d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    b6c2:	79c9      	ldrb	r1, [r1, #7]
    b6c4:	2900      	cmp	r1, #0
    b6c6:	d102      	bne.n	b6ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    b6c8:	4902      	ldr	r1, [pc, #8]	; (b6d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    b6ca:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b6ce:	4770      	bx	lr
    b6d0:	20001328 	.word	0x20001328
    b6d4:	4001f098 	.word	0x4001f098
    b6d8:	b510      	push	{r4, lr}
    b6da:	4a14      	ldr	r2, [pc, #80]	; (b72c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b6dc:	b120      	cbz	r0, b6e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b6de:	2801      	cmp	r0, #1
    b6e0:	d011      	beq.n	b706 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    b6e2:	f44f 61ec 	mov.w	r1, #1888	; 0x760
    b6e6:	e01c      	b.n	b722 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    b6e8:	f101 0028 	add.w	r0, r1, #40	; 0x28
    b6ec:	e9c2 1002 	strd	r1, r0, [r2, #8]
    b6f0:	490f      	ldr	r1, [pc, #60]	; (b730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b6f2:	480e      	ldr	r0, [pc, #56]	; (b72c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b6f4:	f7f8 fdfa 	bl	42ec <mpsl_fem_pa_configuration_set>
    b6f8:	2800      	cmp	r0, #0
    b6fa:	d015      	beq.n	b728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b6fc:	1c40      	adds	r0, r0, #1
    b6fe:	d013      	beq.n	b728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b700:	f240 714f 	movw	r1, #1871	; 0x74f
    b704:	e00d      	b.n	b722 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    b706:	f101 0029 	add.w	r0, r1, #41	; 0x29
    b70a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    b70e:	4908      	ldr	r1, [pc, #32]	; (b730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b710:	4806      	ldr	r0, [pc, #24]	; (b72c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b712:	f7f8 fdd9 	bl	42c8 <mpsl_fem_lna_configuration_set>
    b716:	2800      	cmp	r0, #0
    b718:	d006      	beq.n	b728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b71a:	1c40      	adds	r0, r0, #1
    b71c:	d004      	beq.n	b728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b71e:	f240 715c 	movw	r1, #1884	; 0x75c
    b722:	203e      	movs	r0, #62	; 0x3e
    b724:	f7f8 ff12 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b728:	bd10      	pop	{r4, pc}
    b72a:	0000      	.short	0x0000
    b72c:	20000328 	.word	0x20000328
    b730:	0000b85c 	.word	0x0000b85c
    b734:	4802      	ldr	r0, [pc, #8]	; (b740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    b736:	2100      	movs	r1, #0
    b738:	71c1      	strb	r1, [r0, #7]
    b73a:	7201      	strb	r1, [r0, #8]
    b73c:	7241      	strb	r1, [r0, #9]
    b73e:	4770      	bx	lr
    b740:	20001328 	.word	0x20001328
    b744:	4a05      	ldr	r2, [pc, #20]	; (b75c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    b746:	79d2      	ldrb	r2, [r2, #7]
    b748:	2a01      	cmp	r2, #1
    b74a:	d006      	beq.n	b75a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    b74c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b750:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b754:	fbb1 f1f2 	udiv	r1, r1, r2
    b758:	1a40      	subs	r0, r0, r1
    b75a:	4770      	bx	lr
    b75c:	20001328 	.word	0x20001328
    b760:	b570      	push	{r4, r5, r6, lr}
    b762:	4c13      	ldr	r4, [pc, #76]	; (b7b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    b764:	4603      	mov	r3, r0
    b766:	460d      	mov	r5, r1
    b768:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b76c:	2000      	movs	r0, #0
    b76e:	b15a      	cbz	r2, b788 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    b770:	4621      	mov	r1, r4
    b772:	f891 1020 	ldrb.w	r1, [r1, #32]
    b776:	b163      	cbz	r3, b792 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    b778:	2b01      	cmp	r3, #1
    b77a:	d111      	bne.n	b7a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    b77c:	2a01      	cmp	r2, #1
    b77e:	4628      	mov	r0, r5
    b780:	d012      	beq.n	b7a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    b782:	f004 ffa7 	bl	106d4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b786:	e009      	b.n	b79c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b788:	f640 0153 	movw	r1, #2131	; 0x853
    b78c:	203e      	movs	r0, #62	; 0x3e
    b78e:	f7f8 fedd 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b792:	2a01      	cmp	r2, #1
    b794:	4628      	mov	r0, r5
    b796:	d004      	beq.n	b7a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    b798:	f004 ffaa 	bl	106f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b79c:	69e1      	ldr	r1, [r4, #28]
    b79e:	4408      	add	r0, r1
    b7a0:	bd70      	pop	{r4, r5, r6, pc}
    b7a2:	f000 f8d1 	bl	b948 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b7a6:	e7f9      	b.n	b79c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b7a8:	f000 f8c0 	bl	b92c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b7ac:	e7f6      	b.n	b79c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b7ae:	0000      	.short	0x0000
    b7b0:	20001328 	.word	0x20001328
    b7b4:	b510      	push	{r4, lr}
    b7b6:	f7ff fc07 	bl	afc8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b7ba:	f7ff fded 	bl	b398 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b7be:	f7ff fe23 	bl	b408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    b7c2:	f7ff ff53 	bl	b66c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    b7c6:	f000 fe34 	bl	c432 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b7ca:	2800      	cmp	r0, #0
    b7cc:	d108      	bne.n	b7e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b7ce:	f000 fe20 	bl	c412 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b7d2:	2800      	cmp	r0, #0
    b7d4:	d104      	bne.n	b7e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b7d6:	4803      	ldr	r0, [pc, #12]	; (b7e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    b7d8:	6801      	ldr	r1, [r0, #0]
    b7da:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b7de:	6001      	str	r1, [r0, #0]
    b7e0:	bd10      	pop	{r4, pc}
    b7e2:	0000      	.short	0x0000
    b7e4:	40001568 	.word	0x40001568
    b7e8:	b510      	push	{r4, lr}
    b7ea:	4604      	mov	r4, r0
    b7ec:	f7ff fbec 	bl	afc8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b7f0:	f7ff fdd2 	bl	b398 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b7f4:	4620      	mov	r0, r4
    b7f6:	f7ff fded 	bl	b3d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b7fa:	f000 fe1a 	bl	c432 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b7fe:	2800      	cmp	r0, #0
    b800:	d00d      	beq.n	b81e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    b802:	4a09      	ldr	r2, [pc, #36]	; (b828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    b804:	6811      	ldr	r1, [r2, #0]
    b806:	0650      	lsls	r0, r2, #25
    b808:	2c02      	cmp	r4, #2
    b80a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b80e:	d007      	beq.n	b820 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    b810:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b814:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b818:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b81c:	6010      	str	r0, [r2, #0]
    b81e:	bd10      	pop	{r4, pc}
    b820:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b824:	e7f6      	b.n	b814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    b826:	0000      	.short	0x0000
    b828:	40001588 	.word	0x40001588
    b82c:	a62c0000 	.word	0xa62c0000
    b830:	0604a1e0 	.word	0x0604a1e0
    b834:	0e0c0a08 	.word	0x0e0c0a08
    b838:	16141210 	.word	0x16141210
    b83c:	201e1c18 	.word	0x201e1c18
    b840:	28262422 	.word	0x28262422
    b844:	302e2c2a 	.word	0x302e2c2a
    b848:	38363432 	.word	0x38363432
    b84c:	403e3c3a 	.word	0x403e3c3a
    b850:	48464442 	.word	0x48464442
    b854:	024e4c4a 	.word	0x024e4c4a
    b858:	0000501a 	.word	0x0000501a
    b85c:	00000001 	.word	0x00000001
    b860:	40001110 	.word	0x40001110
	...
    b878:	00001e14 	.word	0x00001e14
    b87c:	00001130 	.word	0x00001130
    b880:	00000000 	.word	0x00000000
    b884:	00000028 	.word	0x00000028
    b888:	00000018 	.word	0x00000018
    b88c:	00000000 	.word	0x00000000
    b890:	00001e14 	.word	0x00001e14
    b894:	00001130 	.word	0x00001130
    b898:	00000000 	.word	0x00000000
    b89c:	00001770 	.word	0x00001770
    b8a0:	00000fa0 	.word	0x00000fa0

0000b8a4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    b8a4:	b570      	push	{r4, r5, r6, lr}
    b8a6:	4605      	mov	r5, r0
    b8a8:	4614      	mov	r4, r2
    b8aa:	4608      	mov	r0, r1
    b8ac:	f7ff fbb2 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b8b0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    b8b4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    b8b8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    b8bc:	4807      	ldr	r0, [pc, #28]	; (b8dc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    b8be:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b8c2:	4408      	add	r0, r1
    b8c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b8c8:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    b8cc:	fbb0 f5f1 	udiv	r5, r0, r1
    b8d0:	4620      	mov	r0, r4
    b8d2:	f7ff fb73 	bl	afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b8d6:	4428      	add	r0, r5
    b8d8:	1d40      	adds	r0, r0, #5
    b8da:	bd70      	pop	{r4, r5, r6, pc}
    b8dc:	0000b96c 	.word	0x0000b96c

0000b8e0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    b8e0:	b570      	push	{r4, r5, r6, lr}
    b8e2:	4d0e      	ldr	r5, [pc, #56]	; (b91c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    b8e4:	461c      	mov	r4, r3
    b8e6:	3d08      	subs	r5, #8
    b8e8:	4b0c      	ldr	r3, [pc, #48]	; (b91c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    b8ea:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    b8ee:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    b8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b8f6:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    b8fa:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    b8fe:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    b902:	4418      	add	r0, r3
    b904:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b908:	fbb0 f5f1 	udiv	r5, r0, r1
    b90c:	4610      	mov	r0, r2
    b90e:	f7ff fb55 	bl	afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b912:	4428      	add	r0, r5
    b914:	4420      	add	r0, r4
    b916:	1d40      	adds	r0, r0, #5
    b918:	bd70      	pop	{r4, r5, r6, pc}
    b91a:	0000      	.short	0x0000
    b91c:	0000b96c 	.word	0x0000b96c

0000b920 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b920:	4901      	ldr	r1, [pc, #4]	; (b928 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b922:	b2c0      	uxtb	r0, r0
    b924:	6008      	str	r0, [r1, #0]
    b926:	4770      	bx	lr
    b928:	4000150c 	.word	0x4000150c

0000b92c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    b92c:	4a05      	ldr	r2, [pc, #20]	; (b944 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    b92e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    b932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b936:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    b93a:	fbb1 f1f2 	udiv	r1, r1, r2
    b93e:	4408      	add	r0, r1
    b940:	1e80      	subs	r0, r0, #2
    b942:	4770      	bx	lr
    b944:	0000b964 	.word	0x0000b964

0000b948 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    b948:	4a05      	ldr	r2, [pc, #20]	; (b960 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    b94a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    b94e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b952:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    b956:	fbb1 f1f2 	udiv	r1, r1, r2
    b95a:	4408      	add	r0, r1
    b95c:	4770      	bx	lr
    b95e:	0000      	.short	0x0000
    b960:	0000b964 	.word	0x0000b964
    b964:	05dc0000 	.word	0x05dc0000
    b968:	000003e8 	.word	0x000003e8
    b96c:	00000000 	.word	0x00000000
    b970:	00001e14 	.word	0x00001e14
    b974:	00001130 	.word	0x00001130

0000b978 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    b978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b97c:	461e      	mov	r6, r3
    b97e:	4617      	mov	r7, r2
    b980:	460c      	mov	r4, r1
    b982:	4605      	mov	r5, r0
    b984:	f7f4 ff08 	bl	798 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    b988:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba30 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    b98c:	4680      	mov	r8, r0
    b98e:	f899 0000 	ldrb.w	r0, [r9]
    b992:	42a8      	cmp	r0, r5
    b994:	d110      	bne.n	b9b8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b996:	f899 1001 	ldrb.w	r1, [r9, #1]
    b99a:	4648      	mov	r0, r9
    b99c:	42a1      	cmp	r1, r4
    b99e:	d10b      	bne.n	b9b8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9a0:	f990 1002 	ldrsb.w	r1, [r0, #2]
    b9a4:	42b9      	cmp	r1, r7
    b9a6:	d107      	bne.n	b9b8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9a8:	78c2      	ldrb	r2, [r0, #3]
    b9aa:	4542      	cmp	r2, r8
    b9ac:	d104      	bne.n	b9b8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9ae:	8881      	ldrh	r1, [r0, #4]
    b9b0:	8031      	strh	r1, [r6, #0]
    b9b2:	7980      	ldrb	r0, [r0, #6]
    b9b4:	70b0      	strb	r0, [r6, #2]
    b9b6:	e036      	b.n	ba26 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    b9b8:	463a      	mov	r2, r7
    b9ba:	4621      	mov	r1, r4
    b9bc:	2d01      	cmp	r5, #1
    b9be:	d009      	beq.n	b9d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    b9c0:	2d02      	cmp	r5, #2
    b9c2:	d009      	beq.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    b9c4:	2d04      	cmp	r5, #4
    b9c6:	d009      	beq.n	b9dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    b9c8:	2d08      	cmp	r5, #8
    b9ca:	d009      	beq.n	b9e0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    b9cc:	f240 415a 	movw	r1, #1114	; 0x45a
    b9d0:	2006      	movs	r0, #6
    b9d2:	e00c      	b.n	b9ee <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    b9d4:	2000      	movs	r0, #0
    b9d6:	e004      	b.n	b9e2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b9d8:	2001      	movs	r0, #1
    b9da:	e002      	b.n	b9e2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b9dc:	2003      	movs	r0, #3
    b9de:	e000      	b.n	b9e2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b9e0:	2002      	movs	r0, #2
    b9e2:	466b      	mov	r3, sp
    b9e4:	f7f4 ff28 	bl	838 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    b9e8:	b118      	cbz	r0, b9f2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    b9ea:	213d      	movs	r1, #61	; 0x3d
    b9ec:	2075      	movs	r0, #117	; 0x75
    b9ee:	f7f8 fdad 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9f2:	4620      	mov	r0, r4
    b9f4:	f7ff f88a 	bl	ab0c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    b9f8:	4602      	mov	r2, r0
    b9fa:	4631      	mov	r1, r6
    b9fc:	f99d 0000 	ldrsb.w	r0, [sp]
    ba00:	f7f8 fc86 	bl	4310 <mpsl_fem_tx_power_split>
    ba04:	4601      	mov	r1, r0
    ba06:	f889 1007 	strb.w	r1, [r9, #7]
    ba0a:	8831      	ldrh	r1, [r6, #0]
    ba0c:	f8a9 1004 	strh.w	r1, [r9, #4]
    ba10:	78b1      	ldrb	r1, [r6, #2]
    ba12:	f889 1006 	strb.w	r1, [r9, #6]
    ba16:	f889 5000 	strb.w	r5, [r9]
    ba1a:	f889 4001 	strb.w	r4, [r9, #1]
    ba1e:	f889 7002 	strb.w	r7, [r9, #2]
    ba22:	f889 8003 	strb.w	r8, [r9, #3]
    ba26:	f999 0007 	ldrsb.w	r0, [r9, #7]
    ba2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba2e:	0000      	.short	0x0000
    ba30:	20000372 	.word	0x20000372

0000ba34 <__udivmoddi4>:
    ba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba38:	4686      	mov	lr, r0
    ba3a:	468c      	mov	ip, r1
    ba3c:	4608      	mov	r0, r1
    ba3e:	9e08      	ldr	r6, [sp, #32]
    ba40:	4615      	mov	r5, r2
    ba42:	4674      	mov	r4, lr
    ba44:	4619      	mov	r1, r3
    ba46:	2b00      	cmp	r3, #0
    ba48:	f040 80c2 	bne.w	bbd0 <__udivmoddi4+0x19c>
    ba4c:	4285      	cmp	r5, r0
    ba4e:	fab2 f282 	clz	r2, r2
    ba52:	d945      	bls.n	bae0 <__udivmoddi4+0xac>
    ba54:	b14a      	cbz	r2, ba6a <__udivmoddi4+0x36>
    ba56:	f1c2 0320 	rsb	r3, r2, #32
    ba5a:	fa00 fc02 	lsl.w	ip, r0, r2
    ba5e:	fa2e f303 	lsr.w	r3, lr, r3
    ba62:	4095      	lsls	r5, r2
    ba64:	ea43 0c0c 	orr.w	ip, r3, ip
    ba68:	4094      	lsls	r4, r2
    ba6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ba6e:	b2a8      	uxth	r0, r5
    ba70:	fbbc f8fe 	udiv	r8, ip, lr
    ba74:	0c23      	lsrs	r3, r4, #16
    ba76:	fb0e cc18 	mls	ip, lr, r8, ip
    ba7a:	fb08 f900 	mul.w	r9, r8, r0
    ba7e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ba82:	4599      	cmp	r9, r3
    ba84:	d928      	bls.n	bad8 <__udivmoddi4+0xa4>
    ba86:	18eb      	adds	r3, r5, r3
    ba88:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    ba8c:	d204      	bcs.n	ba98 <__udivmoddi4+0x64>
    ba8e:	4599      	cmp	r9, r3
    ba90:	d902      	bls.n	ba98 <__udivmoddi4+0x64>
    ba92:	f1a8 0702 	sub.w	r7, r8, #2
    ba96:	442b      	add	r3, r5
    ba98:	eba3 0309 	sub.w	r3, r3, r9
    ba9c:	b2a4      	uxth	r4, r4
    ba9e:	fbb3 fcfe 	udiv	ip, r3, lr
    baa2:	fb0e 331c 	mls	r3, lr, ip, r3
    baa6:	fb0c f000 	mul.w	r0, ip, r0
    baaa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    baae:	42a0      	cmp	r0, r4
    bab0:	d914      	bls.n	badc <__udivmoddi4+0xa8>
    bab2:	192c      	adds	r4, r5, r4
    bab4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    bab8:	d204      	bcs.n	bac4 <__udivmoddi4+0x90>
    baba:	42a0      	cmp	r0, r4
    babc:	d902      	bls.n	bac4 <__udivmoddi4+0x90>
    babe:	f1ac 0302 	sub.w	r3, ip, #2
    bac2:	442c      	add	r4, r5
    bac4:	1a24      	subs	r4, r4, r0
    bac6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    baca:	b11e      	cbz	r6, bad4 <__udivmoddi4+0xa0>
    bacc:	40d4      	lsrs	r4, r2
    bace:	2300      	movs	r3, #0
    bad0:	6034      	str	r4, [r6, #0]
    bad2:	6073      	str	r3, [r6, #4]
    bad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bad8:	4647      	mov	r7, r8
    bada:	e7dd      	b.n	ba98 <__udivmoddi4+0x64>
    badc:	4663      	mov	r3, ip
    bade:	e7f1      	b.n	bac4 <__udivmoddi4+0x90>
    bae0:	bb92      	cbnz	r2, bb48 <__udivmoddi4+0x114>
    bae2:	1b43      	subs	r3, r0, r5
    bae4:	2101      	movs	r1, #1
    bae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    baea:	b2af      	uxth	r7, r5
    baec:	fbb3 fcfe 	udiv	ip, r3, lr
    baf0:	0c20      	lsrs	r0, r4, #16
    baf2:	fb0e 331c 	mls	r3, lr, ip, r3
    baf6:	fb0c f807 	mul.w	r8, ip, r7
    bafa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    bafe:	4598      	cmp	r8, r3
    bb00:	d962      	bls.n	bbc8 <__udivmoddi4+0x194>
    bb02:	18eb      	adds	r3, r5, r3
    bb04:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    bb08:	d204      	bcs.n	bb14 <__udivmoddi4+0xe0>
    bb0a:	4598      	cmp	r8, r3
    bb0c:	d902      	bls.n	bb14 <__udivmoddi4+0xe0>
    bb0e:	f1ac 0002 	sub.w	r0, ip, #2
    bb12:	442b      	add	r3, r5
    bb14:	eba3 0308 	sub.w	r3, r3, r8
    bb18:	b2a4      	uxth	r4, r4
    bb1a:	fbb3 fcfe 	udiv	ip, r3, lr
    bb1e:	fb0e 331c 	mls	r3, lr, ip, r3
    bb22:	fb0c f707 	mul.w	r7, ip, r7
    bb26:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    bb2a:	42a7      	cmp	r7, r4
    bb2c:	d94e      	bls.n	bbcc <__udivmoddi4+0x198>
    bb2e:	192c      	adds	r4, r5, r4
    bb30:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    bb34:	d204      	bcs.n	bb40 <__udivmoddi4+0x10c>
    bb36:	42a7      	cmp	r7, r4
    bb38:	d902      	bls.n	bb40 <__udivmoddi4+0x10c>
    bb3a:	f1ac 0302 	sub.w	r3, ip, #2
    bb3e:	442c      	add	r4, r5
    bb40:	1be4      	subs	r4, r4, r7
    bb42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    bb46:	e7c0      	b.n	baca <__udivmoddi4+0x96>
    bb48:	f1c2 0320 	rsb	r3, r2, #32
    bb4c:	fa20 f103 	lsr.w	r1, r0, r3
    bb50:	4095      	lsls	r5, r2
    bb52:	4090      	lsls	r0, r2
    bb54:	fa2e f303 	lsr.w	r3, lr, r3
    bb58:	4303      	orrs	r3, r0
    bb5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    bb5e:	b2af      	uxth	r7, r5
    bb60:	fbb1 fcfe 	udiv	ip, r1, lr
    bb64:	fb0e 101c 	mls	r0, lr, ip, r1
    bb68:	0c19      	lsrs	r1, r3, #16
    bb6a:	fb0c f807 	mul.w	r8, ip, r7
    bb6e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bb72:	4588      	cmp	r8, r1
    bb74:	fa04 f402 	lsl.w	r4, r4, r2
    bb78:	d922      	bls.n	bbc0 <__udivmoddi4+0x18c>
    bb7a:	1869      	adds	r1, r5, r1
    bb7c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    bb80:	d204      	bcs.n	bb8c <__udivmoddi4+0x158>
    bb82:	4588      	cmp	r8, r1
    bb84:	d902      	bls.n	bb8c <__udivmoddi4+0x158>
    bb86:	f1ac 0002 	sub.w	r0, ip, #2
    bb8a:	4429      	add	r1, r5
    bb8c:	eba1 0108 	sub.w	r1, r1, r8
    bb90:	b29b      	uxth	r3, r3
    bb92:	fbb1 fcfe 	udiv	ip, r1, lr
    bb96:	fb0e 111c 	mls	r1, lr, ip, r1
    bb9a:	fb0c f707 	mul.w	r7, ip, r7
    bb9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    bba2:	429f      	cmp	r7, r3
    bba4:	d90e      	bls.n	bbc4 <__udivmoddi4+0x190>
    bba6:	18eb      	adds	r3, r5, r3
    bba8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    bbac:	d204      	bcs.n	bbb8 <__udivmoddi4+0x184>
    bbae:	429f      	cmp	r7, r3
    bbb0:	d902      	bls.n	bbb8 <__udivmoddi4+0x184>
    bbb2:	f1ac 0102 	sub.w	r1, ip, #2
    bbb6:	442b      	add	r3, r5
    bbb8:	1bdb      	subs	r3, r3, r7
    bbba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bbbe:	e792      	b.n	bae6 <__udivmoddi4+0xb2>
    bbc0:	4660      	mov	r0, ip
    bbc2:	e7e3      	b.n	bb8c <__udivmoddi4+0x158>
    bbc4:	4661      	mov	r1, ip
    bbc6:	e7f7      	b.n	bbb8 <__udivmoddi4+0x184>
    bbc8:	4660      	mov	r0, ip
    bbca:	e7a3      	b.n	bb14 <__udivmoddi4+0xe0>
    bbcc:	4663      	mov	r3, ip
    bbce:	e7b7      	b.n	bb40 <__udivmoddi4+0x10c>
    bbd0:	4283      	cmp	r3, r0
    bbd2:	d906      	bls.n	bbe2 <__udivmoddi4+0x1ae>
    bbd4:	b916      	cbnz	r6, bbdc <__udivmoddi4+0x1a8>
    bbd6:	2100      	movs	r1, #0
    bbd8:	4608      	mov	r0, r1
    bbda:	e77b      	b.n	bad4 <__udivmoddi4+0xa0>
    bbdc:	e9c6 e000 	strd	lr, r0, [r6]
    bbe0:	e7f9      	b.n	bbd6 <__udivmoddi4+0x1a2>
    bbe2:	fab3 f783 	clz	r7, r3
    bbe6:	b98f      	cbnz	r7, bc0c <__udivmoddi4+0x1d8>
    bbe8:	4283      	cmp	r3, r0
    bbea:	d301      	bcc.n	bbf0 <__udivmoddi4+0x1bc>
    bbec:	4572      	cmp	r2, lr
    bbee:	d808      	bhi.n	bc02 <__udivmoddi4+0x1ce>
    bbf0:	ebbe 0402 	subs.w	r4, lr, r2
    bbf4:	eb60 0303 	sbc.w	r3, r0, r3
    bbf8:	2001      	movs	r0, #1
    bbfa:	469c      	mov	ip, r3
    bbfc:	b91e      	cbnz	r6, bc06 <__udivmoddi4+0x1d2>
    bbfe:	2100      	movs	r1, #0
    bc00:	e768      	b.n	bad4 <__udivmoddi4+0xa0>
    bc02:	4638      	mov	r0, r7
    bc04:	e7fa      	b.n	bbfc <__udivmoddi4+0x1c8>
    bc06:	e9c6 4c00 	strd	r4, ip, [r6]
    bc0a:	e7f8      	b.n	bbfe <__udivmoddi4+0x1ca>
    bc0c:	f1c7 0c20 	rsb	ip, r7, #32
    bc10:	40bb      	lsls	r3, r7
    bc12:	fa22 f40c 	lsr.w	r4, r2, ip
    bc16:	431c      	orrs	r4, r3
    bc18:	fa2e f10c 	lsr.w	r1, lr, ip
    bc1c:	fa20 f30c 	lsr.w	r3, r0, ip
    bc20:	40b8      	lsls	r0, r7
    bc22:	4301      	orrs	r1, r0
    bc24:	ea4f 4914 	mov.w	r9, r4, lsr #16
    bc28:	fa0e f507 	lsl.w	r5, lr, r7
    bc2c:	fbb3 f8f9 	udiv	r8, r3, r9
    bc30:	fa1f fe84 	uxth.w	lr, r4
    bc34:	fb09 3018 	mls	r0, r9, r8, r3
    bc38:	0c0b      	lsrs	r3, r1, #16
    bc3a:	fb08 fa0e 	mul.w	sl, r8, lr
    bc3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    bc42:	459a      	cmp	sl, r3
    bc44:	fa02 f207 	lsl.w	r2, r2, r7
    bc48:	d940      	bls.n	bccc <__udivmoddi4+0x298>
    bc4a:	18e3      	adds	r3, r4, r3
    bc4c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    bc50:	d204      	bcs.n	bc5c <__udivmoddi4+0x228>
    bc52:	459a      	cmp	sl, r3
    bc54:	d902      	bls.n	bc5c <__udivmoddi4+0x228>
    bc56:	f1a8 0002 	sub.w	r0, r8, #2
    bc5a:	4423      	add	r3, r4
    bc5c:	eba3 030a 	sub.w	r3, r3, sl
    bc60:	b289      	uxth	r1, r1
    bc62:	fbb3 f8f9 	udiv	r8, r3, r9
    bc66:	fb09 3318 	mls	r3, r9, r8, r3
    bc6a:	fb08 fe0e 	mul.w	lr, r8, lr
    bc6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    bc72:	458e      	cmp	lr, r1
    bc74:	d92c      	bls.n	bcd0 <__udivmoddi4+0x29c>
    bc76:	1861      	adds	r1, r4, r1
    bc78:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    bc7c:	d204      	bcs.n	bc88 <__udivmoddi4+0x254>
    bc7e:	458e      	cmp	lr, r1
    bc80:	d902      	bls.n	bc88 <__udivmoddi4+0x254>
    bc82:	f1a8 0302 	sub.w	r3, r8, #2
    bc86:	4421      	add	r1, r4
    bc88:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    bc8c:	fba0 9802 	umull	r9, r8, r0, r2
    bc90:	eba1 010e 	sub.w	r1, r1, lr
    bc94:	4541      	cmp	r1, r8
    bc96:	46ce      	mov	lr, r9
    bc98:	4643      	mov	r3, r8
    bc9a:	d302      	bcc.n	bca2 <__udivmoddi4+0x26e>
    bc9c:	d106      	bne.n	bcac <__udivmoddi4+0x278>
    bc9e:	454d      	cmp	r5, r9
    bca0:	d204      	bcs.n	bcac <__udivmoddi4+0x278>
    bca2:	ebb9 0e02 	subs.w	lr, r9, r2
    bca6:	eb68 0304 	sbc.w	r3, r8, r4
    bcaa:	3801      	subs	r0, #1
    bcac:	2e00      	cmp	r6, #0
    bcae:	d0a6      	beq.n	bbfe <__udivmoddi4+0x1ca>
    bcb0:	ebb5 020e 	subs.w	r2, r5, lr
    bcb4:	eb61 0103 	sbc.w	r1, r1, r3
    bcb8:	fa01 fc0c 	lsl.w	ip, r1, ip
    bcbc:	fa22 f307 	lsr.w	r3, r2, r7
    bcc0:	ea4c 0303 	orr.w	r3, ip, r3
    bcc4:	40f9      	lsrs	r1, r7
    bcc6:	e9c6 3100 	strd	r3, r1, [r6]
    bcca:	e798      	b.n	bbfe <__udivmoddi4+0x1ca>
    bccc:	4640      	mov	r0, r8
    bcce:	e7c5      	b.n	bc5c <__udivmoddi4+0x228>
    bcd0:	4643      	mov	r3, r8
    bcd2:	e7d9      	b.n	bc88 <__udivmoddi4+0x254>
    bcd4:	2804      	cmp	r0, #4
    bcd6:	d202      	bcs.n	bcde <__udivmoddi4+0x2aa>
    bcd8:	f04f 0028 	mov.w	r0, #40	; 0x28
    bcdc:	4770      	bx	lr
    bcde:	d102      	bne.n	bce6 <__udivmoddi4+0x2b2>
    bce0:	f04f 0010 	mov.w	r0, #16
    bce4:	4770      	bx	lr
    bce6:	f04f 0000 	mov.w	r0, #0
    bcea:	4770      	bx	lr
    bcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bcf0:	000d      	movs	r5, r1
    bcf2:	4604      	mov	r4, r0
    bcf4:	f04f 0602 	mov.w	r6, #2
    bcf8:	f04f 0701 	mov.w	r7, #1
    bcfc:	d008      	beq.n	bd10 <__udivmoddi4+0x2dc>
    bcfe:	7828      	ldrb	r0, [r5, #0]
    bd00:	b1d0      	cbz	r0, bd38 <__udivmoddi4+0x304>
    bd02:	2801      	cmp	r0, #1
    bd04:	d007      	beq.n	bd16 <__udivmoddi4+0x2e2>
    bd06:	2802      	cmp	r0, #2
    bd08:	d014      	beq.n	bd34 <__udivmoddi4+0x300>
    bd0a:	2803      	cmp	r0, #3
    bd0c:	d13e      	bne.n	bd8c <__udivmoddi4+0x358>
    bd0e:	e016      	b.n	bd3e <__udivmoddi4+0x30a>
    bd10:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    bd14:	e00e      	b.n	bd34 <__udivmoddi4+0x300>
    bd16:	6868      	ldr	r0, [r5, #4]
    bd18:	28c8      	cmp	r0, #200	; 0xc8
    bd1a:	d303      	bcc.n	bd24 <__udivmoddi4+0x2f0>
    bd1c:	2103      	movs	r1, #3
    bd1e:	f7f5 fe9b 	bl	1a58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    bd22:	b108      	cbz	r0, bd28 <__udivmoddi4+0x2f4>
    bd24:	2600      	movs	r6, #0
    bd26:	e007      	b.n	bd38 <__udivmoddi4+0x304>
    bd28:	4620      	mov	r0, r4
    bd2a:	6869      	ldr	r1, [r5, #4]
    bd2c:	f000 f943 	bl	bfb6 <__udivmoddi4+0x582>
    bd30:	2601      	movs	r6, #1
    bd32:	e001      	b.n	bd38 <__udivmoddi4+0x304>
    bd34:	f7f4 fdce 	bl	8d4 <CONFIG_BT_RX_STACK_SIZE+0x3c>
    bd38:	4630      	mov	r0, r6
    bd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd3e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    bd42:	2800      	cmp	r0, #0
    bd44:	d1f6      	bne.n	bd34 <__udivmoddi4+0x300>
    bd46:	6868      	ldr	r0, [r5, #4]
    bd48:	f7f4 fd96 	bl	878 <__data_size>
    bd4c:	b1f0      	cbz	r0, bd8c <__udivmoddi4+0x358>
    bd4e:	6869      	ldr	r1, [r5, #4]
    bd50:	7808      	ldrb	r0, [r1, #0]
    bd52:	b130      	cbz	r0, bd62 <__udivmoddi4+0x32e>
    bd54:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bd58:	2805      	cmp	r0, #5
    bd5a:	d008      	beq.n	bd6e <__udivmoddi4+0x33a>
    bd5c:	f44f 71be 	mov.w	r1, #380	; 0x17c
    bd60:	e011      	b.n	bd86 <__udivmoddi4+0x352>
    bd62:	4620      	mov	r0, r4
    bd64:	f000 f92f 	bl	bfc6 <__udivmoddi4+0x592>
    bd68:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    bd6c:	e7e2      	b.n	bd34 <__udivmoddi4+0x300>
    bd6e:	4620      	mov	r0, r4
    bd70:	f000 f942 	bl	bff8 <__udivmoddi4+0x5c4>
    bd74:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    bd78:	4621      	mov	r1, r4
    bd7a:	f000 f80a 	bl	bd92 <__udivmoddi4+0x35e>
    bd7e:	2800      	cmp	r0, #0
    bd80:	d1d8      	bne.n	bd34 <__udivmoddi4+0x300>
    bd82:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    bd86:	206a      	movs	r0, #106	; 0x6a
    bd88:	f7f8 f902 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd8c:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    bd90:	e7d0      	b.n	bd34 <__udivmoddi4+0x300>
    bd92:	f7f6 b847 	b.w	1e24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    bd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd9a:	460d      	mov	r5, r1
    bd9c:	0004      	movs	r4, r0
    bd9e:	d00c      	beq.n	bdba <__udivmoddi4+0x386>
    bda0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    bda4:	2700      	movs	r7, #0
    bda6:	2002      	movs	r0, #2
    bda8:	2d09      	cmp	r5, #9
    bdaa:	d270      	bcs.n	be8e <__udivmoddi4+0x45a>
    bdac:	e8df f005 	tbb	[pc, r5]
    bdb0:	35351108 	.word	0x35351108
    bdb4:	a5887065 	.word	0xa5887065
    bdb8:	0093      	.short	0x0093
    bdba:	f44f 71cb 	mov.w	r1, #406	; 0x196
    bdbe:	e0f7      	b.n	bfb0 <__udivmoddi4+0x57c>
    bdc0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bdc4:	2804      	cmp	r0, #4
    bdc6:	d07a      	beq.n	bebe <__udivmoddi4+0x48a>
    bdc8:	2803      	cmp	r0, #3
    bdca:	d0fc      	beq.n	bdc6 <__udivmoddi4+0x392>
    bdcc:	f240 11a1 	movw	r1, #417	; 0x1a1
    bdd0:	e0ee      	b.n	bfb0 <__udivmoddi4+0x57c>
    bdd2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bdd6:	2804      	cmp	r0, #4
    bdd8:	d004      	beq.n	bde4 <__udivmoddi4+0x3b0>
    bdda:	2803      	cmp	r0, #3
    bddc:	d002      	beq.n	bde4 <__udivmoddi4+0x3b0>
    bdde:	f240 11a5 	movw	r1, #421	; 0x1a5
    bde2:	e0e5      	b.n	bfb0 <__udivmoddi4+0x57c>
    bde4:	2005      	movs	r0, #5
    bde6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    bdea:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    bdee:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    bdf2:	bbb0      	cbnz	r0, be62 <__udivmoddi4+0x42e>
    bdf4:	2100      	movs	r1, #0
    bdf6:	4620      	mov	r0, r4
    bdf8:	f000 f8dd 	bl	bfb6 <__udivmoddi4+0x582>
    bdfc:	7820      	ldrb	r0, [r4, #0]
    bdfe:	2801      	cmp	r0, #1
    be00:	d006      	beq.n	be10 <__udivmoddi4+0x3dc>
    be02:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    be06:	e9c4 0106 	strd	r0, r1, [r4, #24]
    be0a:	2100      	movs	r1, #0
    be0c:	6a22      	ldr	r2, [r4, #32]
    be0e:	e048      	b.n	bea2 <__udivmoddi4+0x46e>
    be10:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    be14:	f7f5 ff0e 	bl	1c34 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    be18:	e7f5      	b.n	be06 <__udivmoddi4+0x3d2>
    be1a:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    be1e:	2904      	cmp	r1, #4
    be20:	d004      	beq.n	be2c <__udivmoddi4+0x3f8>
    be22:	2903      	cmp	r1, #3
    be24:	d002      	beq.n	be2c <__udivmoddi4+0x3f8>
    be26:	f240 11c3 	movw	r1, #451	; 0x1c3
    be2a:	e0c1      	b.n	bfb0 <__udivmoddi4+0x57c>
    be2c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    be30:	b122      	cbz	r2, be3c <__udivmoddi4+0x408>
    be32:	4621      	mov	r1, r4
    be34:	4630      	mov	r0, r6
    be36:	f000 f8fe 	bl	c036 <__udivmoddi4+0x602>
    be3a:	e0b1      	b.n	bfa0 <__udivmoddi4+0x56c>
    be3c:	2904      	cmp	r1, #4
    be3e:	d000      	beq.n	be42 <__udivmoddi4+0x40e>
    be40:	2001      	movs	r0, #1
    be42:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    be46:	6a22      	ldr	r2, [r4, #32]
    be48:	2d02      	cmp	r5, #2
    be4a:	d00b      	beq.n	be64 <__udivmoddi4+0x430>
    be4c:	2106      	movs	r1, #6
    be4e:	4630      	mov	r0, r6
    be50:	4790      	blx	r2
    be52:	2800      	cmp	r0, #0
    be54:	d06d      	beq.n	bf32 <__udivmoddi4+0x4fe>
    be56:	7800      	ldrb	r0, [r0, #0]
    be58:	2800      	cmp	r0, #0
    be5a:	d06a      	beq.n	bf32 <__udivmoddi4+0x4fe>
    be5c:	f240 11dd 	movw	r1, #477	; 0x1dd
    be60:	e0a6      	b.n	bfb0 <__udivmoddi4+0x57c>
    be62:	e034      	b.n	bece <__udivmoddi4+0x49a>
    be64:	2105      	movs	r1, #5
    be66:	4630      	mov	r0, r6
    be68:	4790      	blx	r2
    be6a:	2800      	cmp	r0, #0
    be6c:	d07c      	beq.n	bf68 <__udivmoddi4+0x534>
    be6e:	7800      	ldrb	r0, [r0, #0]
    be70:	2800      	cmp	r0, #0
    be72:	d079      	beq.n	bf68 <__udivmoddi4+0x534>
    be74:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    be78:	e09a      	b.n	bfb0 <__udivmoddi4+0x57c>
    be7a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    be7e:	2805      	cmp	r0, #5
    be80:	d002      	beq.n	be88 <__udivmoddi4+0x454>
    be82:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    be86:	e093      	b.n	bfb0 <__udivmoddi4+0x57c>
    be88:	2102      	movs	r1, #2
    be8a:	6a22      	ldr	r2, [r4, #32]
    be8c:	e009      	b.n	bea2 <__udivmoddi4+0x46e>
    be8e:	e07e      	b.n	bf8e <__udivmoddi4+0x55a>
    be90:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    be94:	2805      	cmp	r0, #5
    be96:	d002      	beq.n	be9e <__udivmoddi4+0x46a>
    be98:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    be9c:	e088      	b.n	bfb0 <__udivmoddi4+0x57c>
    be9e:	6a22      	ldr	r2, [r4, #32]
    bea0:	2101      	movs	r1, #1
    bea2:	4630      	mov	r0, r6
    bea4:	4790      	blx	r2
    bea6:	4601      	mov	r1, r0
    bea8:	4620      	mov	r0, r4
    beaa:	f7ff ff1f 	bl	bcec <__udivmoddi4+0x2b8>
    beae:	2802      	cmp	r0, #2
    beb0:	d076      	beq.n	bfa0 <__udivmoddi4+0x56c>
    beb2:	b3e8      	cbz	r0, bf30 <__udivmoddi4+0x4fc>
    beb4:	2801      	cmp	r0, #1
    beb6:	d06d      	beq.n	bf94 <__udivmoddi4+0x560>
    beb8:	f240 212a 	movw	r1, #554	; 0x22a
    bebc:	e078      	b.n	bfb0 <__udivmoddi4+0x57c>
    bebe:	e071      	b.n	bfa4 <__udivmoddi4+0x570>
    bec0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bec4:	2805      	cmp	r0, #5
    bec6:	d002      	beq.n	bece <__udivmoddi4+0x49a>
    bec8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    becc:	e070      	b.n	bfb0 <__udivmoddi4+0x57c>
    bece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bed2:	f7f4 bcff 	b.w	8d4 <CONFIG_BT_RX_STACK_SIZE+0x3c>
    bed6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    beda:	2805      	cmp	r0, #5
    bedc:	d002      	beq.n	bee4 <__udivmoddi4+0x4b0>
    bede:	f240 11f5 	movw	r1, #501	; 0x1f5
    bee2:	e065      	b.n	bfb0 <__udivmoddi4+0x57c>
    bee4:	6a22      	ldr	r2, [r4, #32]
    bee6:	210a      	movs	r1, #10
    bee8:	4630      	mov	r0, r6
    beea:	4790      	blx	r2
    beec:	4601      	mov	r1, r0
    beee:	4620      	mov	r0, r4
    bef0:	f7ff fefc 	bl	bcec <__udivmoddi4+0x2b8>
    bef4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    bef8:	e05a      	b.n	bfb0 <__udivmoddi4+0x57c>
    befa:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    befe:	2905      	cmp	r1, #5
    bf00:	d007      	beq.n	bf12 <__udivmoddi4+0x4de>
    bf02:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    bf06:	b10a      	cbz	r2, bf0c <__udivmoddi4+0x4d8>
    bf08:	2903      	cmp	r1, #3
    bf0a:	d002      	beq.n	bf12 <__udivmoddi4+0x4de>
    bf0c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    bf10:	e04e      	b.n	bfb0 <__udivmoddi4+0x57c>
    bf12:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    bf16:	b129      	cbz	r1, bf24 <__udivmoddi4+0x4f0>
    bf18:	4621      	mov	r1, r4
    bf1a:	4630      	mov	r0, r6
    bf1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf20:	f000 b889 	b.w	c036 <__udivmoddi4+0x602>
    bf24:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    bf28:	b199      	cbz	r1, bf52 <__udivmoddi4+0x51e>
    bf2a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    bf2e:	e001      	b.n	bf34 <__udivmoddi4+0x500>
    bf30:	e033      	b.n	bf9a <__udivmoddi4+0x566>
    bf32:	e035      	b.n	bfa0 <__udivmoddi4+0x56c>
    bf34:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    bf38:	6a22      	ldr	r2, [r4, #32]
    bf3a:	2108      	movs	r1, #8
    bf3c:	4630      	mov	r0, r6
    bf3e:	4790      	blx	r2
    bf40:	2800      	cmp	r0, #0
    bf42:	d011      	beq.n	bf68 <__udivmoddi4+0x534>
    bf44:	7800      	ldrb	r0, [r0, #0]
    bf46:	2800      	cmp	r0, #0
    bf48:	d00e      	beq.n	bf68 <__udivmoddi4+0x534>
    bf4a:	f44f 7102 	mov.w	r1, #520	; 0x208
    bf4e:	e02f      	b.n	bfb0 <__udivmoddi4+0x57c>
    bf50:	e00a      	b.n	bf68 <__udivmoddi4+0x534>
    bf52:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    bf56:	b161      	cbz	r1, bf72 <__udivmoddi4+0x53e>
    bf58:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    bf5c:	4621      	mov	r1, r4
    bf5e:	f7ff ff18 	bl	bd92 <__udivmoddi4+0x35e>
    bf62:	b118      	cbz	r0, bf6c <__udivmoddi4+0x538>
    bf64:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf6c:	f44f 7103 	mov.w	r1, #524	; 0x20c
    bf70:	e01e      	b.n	bfb0 <__udivmoddi4+0x57c>
    bf72:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    bf76:	6a22      	ldr	r2, [r4, #32]
    bf78:	2107      	movs	r1, #7
    bf7a:	4630      	mov	r0, r6
    bf7c:	4790      	blx	r2
    bf7e:	2800      	cmp	r0, #0
    bf80:	d0f2      	beq.n	bf68 <__udivmoddi4+0x534>
    bf82:	7800      	ldrb	r0, [r0, #0]
    bf84:	2800      	cmp	r0, #0
    bf86:	d0ef      	beq.n	bf68 <__udivmoddi4+0x534>
    bf88:	f44f 7105 	mov.w	r1, #532	; 0x214
    bf8c:	e010      	b.n	bfb0 <__udivmoddi4+0x57c>
    bf8e:	f240 2119 	movw	r1, #537	; 0x219
    bf92:	e00d      	b.n	bfb0 <__udivmoddi4+0x57c>
    bf94:	2104      	movs	r1, #4
    bf96:	6a22      	ldr	r2, [r4, #32]
    bf98:	e783      	b.n	bea2 <__udivmoddi4+0x46e>
    bf9a:	2103      	movs	r1, #3
    bf9c:	6a22      	ldr	r2, [r4, #32]
    bf9e:	e780      	b.n	bea2 <__udivmoddi4+0x46e>
    bfa0:	2d00      	cmp	r5, #0
    bfa2:	d1e1      	bne.n	bf68 <__udivmoddi4+0x534>
    bfa4:	f000 f8fd 	bl	c1a2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    bfa8:	2800      	cmp	r0, #0
    bfaa:	d0dd      	beq.n	bf68 <__udivmoddi4+0x534>
    bfac:	f240 2133 	movw	r1, #563	; 0x233
    bfb0:	206a      	movs	r0, #106	; 0x6a
    bfb2:	f7f7 ffed 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfb6:	4602      	mov	r2, r0
    bfb8:	7803      	ldrb	r3, [r0, #0]
    bfba:	6840      	ldr	r0, [r0, #4]
    bfbc:	4408      	add	r0, r1
    bfbe:	6050      	str	r0, [r2, #4]
    bfc0:	3859      	subs	r0, #89	; 0x59
    bfc2:	f7f6 be0f 	b.w	2be4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    bfc6:	2201      	movs	r2, #1
    bfc8:	7002      	strb	r2, [r0, #0]
    bfca:	2200      	movs	r2, #0
    bfcc:	72c2      	strb	r2, [r0, #11]
    bfce:	790a      	ldrb	r2, [r1, #4]
    bfd0:	b172      	cbz	r2, bff0 <__udivmoddi4+0x5bc>
    bfd2:	2200      	movs	r2, #0
    bfd4:	8102      	strh	r2, [r0, #8]
    bfd6:	794a      	ldrb	r2, [r1, #5]
    bfd8:	b162      	cbz	r2, bff4 <__udivmoddi4+0x5c0>
    bfda:	2203      	movs	r2, #3
    bfdc:	7282      	strb	r2, [r0, #10]
    bfde:	688a      	ldr	r2, [r1, #8]
    bfe0:	326a      	adds	r2, #106	; 0x6a
    bfe2:	6042      	str	r2, [r0, #4]
    bfe4:	68c9      	ldr	r1, [r1, #12]
    bfe6:	6101      	str	r1, [r0, #16]
    bfe8:	2103      	movs	r1, #3
    bfea:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    bfee:	4770      	bx	lr
    bff0:	222b      	movs	r2, #43	; 0x2b
    bff2:	e7ef      	b.n	bfd4 <__udivmoddi4+0x5a0>
    bff4:	2202      	movs	r2, #2
    bff6:	e7f1      	b.n	bfdc <__udivmoddi4+0x5a8>
    bff8:	b510      	push	{r4, lr}
    bffa:	2200      	movs	r2, #0
    bffc:	7002      	strb	r2, [r0, #0]
    bffe:	72c2      	strb	r2, [r0, #11]
    c000:	790a      	ldrb	r2, [r1, #4]
    c002:	b1a2      	cbz	r2, c02e <__udivmoddi4+0x5fa>
    c004:	2200      	movs	r2, #0
    c006:	8102      	strh	r2, [r0, #8]
    c008:	794a      	ldrb	r2, [r1, #5]
    c00a:	b192      	cbz	r2, c032 <__udivmoddi4+0x5fe>
    c00c:	2203      	movs	r2, #3
    c00e:	7282      	strb	r2, [r0, #10]
    c010:	68ca      	ldr	r2, [r1, #12]
    c012:	326a      	adds	r2, #106	; 0x6a
    c014:	6042      	str	r2, [r0, #4]
    c016:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    c01a:	6889      	ldr	r1, [r1, #8]
    c01c:	17cb      	asrs	r3, r1, #31
    c01e:	1861      	adds	r1, r4, r1
    c020:	415a      	adcs	r2, r3
    c022:	e9c0 1204 	strd	r1, r2, [r0, #16]
    c026:	2104      	movs	r1, #4
    c028:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c02c:	bd10      	pop	{r4, pc}
    c02e:	222b      	movs	r2, #43	; 0x2b
    c030:	e7e9      	b.n	c006 <__udivmoddi4+0x5d2>
    c032:	2202      	movs	r2, #2
    c034:	e7eb      	b.n	c00e <__udivmoddi4+0x5da>
    c036:	b570      	push	{r4, r5, r6, lr}
    c038:	4605      	mov	r5, r0
    c03a:	460c      	mov	r4, r1
    c03c:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    c040:	f7f6 fb54 	bl	26ec <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    c044:	b178      	cbz	r0, c066 <__udivmoddi4+0x632>
    c046:	4620      	mov	r0, r4
    c048:	f000 f810 	bl	c06c <__udivmoddi4+0x638>
    c04c:	6a22      	ldr	r2, [r4, #32]
    c04e:	2109      	movs	r1, #9
    c050:	4628      	mov	r0, r5
    c052:	4790      	blx	r2
    c054:	2800      	cmp	r0, #0
    c056:	d008      	beq.n	c06a <__udivmoddi4+0x636>
    c058:	7800      	ldrb	r0, [r0, #0]
    c05a:	2800      	cmp	r0, #0
    c05c:	d005      	beq.n	c06a <__udivmoddi4+0x636>
    c05e:	21dc      	movs	r1, #220	; 0xdc
    c060:	206a      	movs	r0, #106	; 0x6a
    c062:	f7f7 ff95 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c066:	21d8      	movs	r1, #216	; 0xd8
    c068:	e7fa      	b.n	c060 <__udivmoddi4+0x62c>
    c06a:	bd70      	pop	{r4, r5, r6, pc}
    c06c:	2100      	movs	r1, #0
    c06e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c072:	f800 1f24 	strb.w	r1, [r0, #36]!
    c076:	7041      	strb	r1, [r0, #1]
    c078:	4770      	bx	lr

0000c07a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c07a:	b570      	push	{r4, r5, r6, lr}
    c07c:	f7f4 fc86 	bl	98c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c080:	4605      	mov	r5, r0
    c082:	2400      	movs	r4, #0
    c084:	e006      	b.n	c094 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c086:	4620      	mov	r0, r4
    c088:	f7f4 fc86 	bl	998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c08c:	f7ff ffee 	bl	c06c <__udivmoddi4+0x638>
    c090:	1c64      	adds	r4, r4, #1
    c092:	b2e4      	uxtb	r4, r4
    c094:	42ac      	cmp	r4, r5
    c096:	d3f6      	bcc.n	c086 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c098:	bd70      	pop	{r4, r5, r6, pc}

0000c09a <mpsl_timeslot_request>:
    c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c09e:	460d      	mov	r5, r1
    c0a0:	f7f4 fc7a 	bl	998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c0a4:	0004      	movs	r4, r0
    c0a6:	d008      	beq.n	c0ba <mpsl_timeslot_request+0x20>
    c0a8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c0ac:	f06f 0622 	mvn.w	r6, #34	; 0x22
    c0b0:	2801      	cmp	r0, #1
    c0b2:	d006      	beq.n	c0c2 <mpsl_timeslot_request+0x28>
    c0b4:	2802      	cmp	r0, #2
    c0b6:	d111      	bne.n	c0dc <mpsl_timeslot_request+0x42>
    c0b8:	e003      	b.n	c0c2 <mpsl_timeslot_request+0x28>
    c0ba:	f06f 0001 	mvn.w	r0, #1
    c0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0c2:	f06f 0715 	mvn.w	r7, #21
    c0c6:	b15d      	cbz	r5, c0e0 <mpsl_timeslot_request+0x46>
    c0c8:	4628      	mov	r0, r5
    c0ca:	f7f4 fbd5 	bl	878 <__data_size>
    c0ce:	b138      	cbz	r0, c0e0 <mpsl_timeslot_request+0x46>
    c0d0:	7828      	ldrb	r0, [r5, #0]
    c0d2:	b138      	cbz	r0, c0e4 <mpsl_timeslot_request+0x4a>
    c0d4:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c0d8:	2802      	cmp	r0, #2
    c0da:	d008      	beq.n	c0ee <mpsl_timeslot_request+0x54>
    c0dc:	4630      	mov	r0, r6
    c0de:	e7ee      	b.n	c0be <mpsl_timeslot_request+0x24>
    c0e0:	4638      	mov	r0, r7
    c0e2:	e7ec      	b.n	c0be <mpsl_timeslot_request+0x24>
    c0e4:	4629      	mov	r1, r5
    c0e6:	4620      	mov	r0, r4
    c0e8:	f7ff ff6d 	bl	bfc6 <__udivmoddi4+0x592>
    c0ec:	e003      	b.n	c0f6 <mpsl_timeslot_request+0x5c>
    c0ee:	4629      	mov	r1, r5
    c0f0:	4620      	mov	r0, r4
    c0f2:	f7ff ff81 	bl	bff8 <__udivmoddi4+0x5c4>
    c0f6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c0fa:	4621      	mov	r1, r4
    c0fc:	f7ff fe49 	bl	bd92 <__udivmoddi4+0x35e>
    c100:	b108      	cbz	r0, c106 <mpsl_timeslot_request+0x6c>
    c102:	2000      	movs	r0, #0
    c104:	e7db      	b.n	c0be <mpsl_timeslot_request+0x24>
    c106:	f240 21b1 	movw	r1, #689	; 0x2b1
    c10a:	206a      	movs	r0, #106	; 0x6a
    c10c:	f7f7 ff40 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000c110 <mpsl_timeslot_session_close>:
    c110:	b510      	push	{r4, lr}
    c112:	4604      	mov	r4, r0
    c114:	f7f4 fc40 	bl	998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c118:	0001      	movs	r1, r0
    c11a:	d005      	beq.n	c128 <mpsl_timeslot_session_close+0x18>
    c11c:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    c120:	f06f 0222 	mvn.w	r2, #34	; 0x22
    c124:	b978      	cbnz	r0, c146 <mpsl_timeslot_session_close+0x36>
    c126:	e002      	b.n	c12e <mpsl_timeslot_session_close+0x1e>
    c128:	f06f 0001 	mvn.w	r0, #1
    c12c:	bd10      	pop	{r4, pc}
    c12e:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    c132:	b140      	cbz	r0, c146 <mpsl_timeslot_session_close+0x36>
    c134:	2802      	cmp	r0, #2
    c136:	d008      	beq.n	c14a <mpsl_timeslot_session_close+0x3a>
    c138:	2801      	cmp	r0, #1
    c13a:	d006      	beq.n	c14a <mpsl_timeslot_session_close+0x3a>
    c13c:	2001      	movs	r0, #1
    c13e:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    c142:	2000      	movs	r0, #0
    c144:	bd10      	pop	{r4, pc}
    c146:	4610      	mov	r0, r2
    c148:	bd10      	pop	{r4, pc}
    c14a:	4620      	mov	r0, r4
    c14c:	f7ff ff73 	bl	c036 <__udivmoddi4+0x602>
    c150:	e7f7      	b.n	c142 <mpsl_timeslot_session_close+0x32>

0000c152 <mpsl_timeslot_session_count_set>:
    c152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c156:	460e      	mov	r6, r1
    c158:	4607      	mov	r7, r0
    c15a:	f7f4 fc17 	bl	98c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c15e:	4605      	mov	r5, r0
    c160:	2400      	movs	r4, #0
    c162:	e00b      	b.n	c17c <mpsl_timeslot_session_count_set+0x2a>
    c164:	4620      	mov	r0, r4
    c166:	f7f4 fc17 	bl	998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c16a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    c16e:	b118      	cbz	r0, c178 <mpsl_timeslot_session_count_set+0x26>
    c170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c178:	1c64      	adds	r4, r4, #1
    c17a:	b2e4      	uxtb	r4, r4
    c17c:	42ac      	cmp	r4, r5
    c17e:	d3f1      	bcc.n	c164 <mpsl_timeslot_session_count_set+0x12>
    c180:	2e08      	cmp	r6, #8
    c182:	d902      	bls.n	c18a <mpsl_timeslot_session_count_set+0x38>
    c184:	f06f 0015 	mvn.w	r0, #21
    c188:	e7f4      	b.n	c174 <mpsl_timeslot_session_count_set+0x22>
    c18a:	b117      	cbz	r7, c192 <mpsl_timeslot_session_count_set+0x40>
    c18c:	4631      	mov	r1, r6
    c18e:	4638      	mov	r0, r7
    c190:	e001      	b.n	c196 <mpsl_timeslot_session_count_set+0x44>
    c192:	2100      	movs	r1, #0
    c194:	4608      	mov	r0, r1
    c196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c19a:	f7f4 bbe3 	b.w	964 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000c19e <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    c19e:	f7f6 bfd9 	b.w	3154 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000c1a2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    c1a2:	b510      	push	{r4, lr}
    c1a4:	2000      	movs	r0, #0
    c1a6:	f7f7 fafb 	bl	37a0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    c1aa:	6800      	ldr	r0, [r0, #0]
    c1ac:	2800      	cmp	r0, #0
    c1ae:	bf18      	it	ne
    c1b0:	2001      	movne	r0, #1
    c1b2:	bd10      	pop	{r4, pc}

0000c1b4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    c1b4:	b510      	push	{r4, lr}
    c1b6:	f7f7 fb73 	bl	38a0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    c1ba:	f7f6 fe45 	bl	2e48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    c1be:	f000 f802 	bl	c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c1c2:	b280      	uxth	r0, r0
    c1c4:	bd10      	pop	{r4, pc}

0000c1c6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c1c6:	0a41      	lsrs	r1, r0, #9
    c1c8:	f643 5209 	movw	r2, #15625	; 0x3d09
    c1cc:	4351      	muls	r1, r2
    c1ce:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c1d2:	fb10 f002 	smulbb	r0, r0, r2
    c1d6:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c1da:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c1de:	4770      	bx	lr
    c1e0:	2800      	cmp	r0, #0
    c1e2:	db09      	blt.n	c1f8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    c1e4:	f000 021f 	and.w	r2, r0, #31
    c1e8:	2101      	movs	r1, #1
    c1ea:	4091      	lsls	r1, r2
    c1ec:	0940      	lsrs	r0, r0, #5
    c1ee:	0080      	lsls	r0, r0, #2
    c1f0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c1f4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c1f8:	4770      	bx	lr
    c1fa:	2800      	cmp	r0, #0
    c1fc:	db0d      	blt.n	c21a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    c1fe:	f000 021f 	and.w	r2, r0, #31
    c202:	2101      	movs	r1, #1
    c204:	4091      	lsls	r1, r2
    c206:	0940      	lsrs	r0, r0, #5
    c208:	0080      	lsls	r0, r0, #2
    c20a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c20e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c212:	f3bf 8f4f 	dsb	sy
    c216:	f3bf 8f6f 	isb	sy
    c21a:	4770      	bx	lr

0000c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c21c:	b570      	push	{r4, r5, r6, lr}
    c21e:	4602      	mov	r2, r0
    c220:	2000      	movs	r0, #0
    c222:	2900      	cmp	r1, #0
    c224:	d01d      	beq.n	c262 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c226:	fba2 0101 	umull	r0, r1, r2, r1
    c22a:	0a40      	lsrs	r0, r0, #9
    c22c:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c230:	0a49      	lsrs	r1, r1, #9
    c232:	1c40      	adds	r0, r0, #1
    c234:	f141 0100 	adc.w	r1, r1, #0
    c238:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c23c:	1883      	adds	r3, r0, r2
    c23e:	f141 0100 	adc.w	r1, r1, #0
    c242:	1c5b      	adds	r3, r3, #1
    c244:	f141 0400 	adc.w	r4, r1, #0
    c248:	2100      	movs	r1, #0
    c24a:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    c24e:	41a1      	sbcs	r1, r4
    c250:	d203      	bcs.n	c25a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c252:	2172      	movs	r1, #114	; 0x72
    c254:	206d      	movs	r0, #109	; 0x6d
    c256:	f7f7 fe9b 	bl	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c25a:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c25e:	fbb0 f0f2 	udiv	r0, r0, r2
    c262:	bd70      	pop	{r4, r5, r6, pc}
    c264:	5840      	ldr	r0, [r0, r1]
    c266:	2800      	cmp	r0, #0
    c268:	d000      	beq.n	c26c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c26a:	2001      	movs	r0, #1
    c26c:	4770      	bx	lr
    c26e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c272:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c276:	f002 0201 	and.w	r2, r2, #1
    c27a:	03c0      	lsls	r0, r0, #15
    c27c:	d503      	bpl.n	c286 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c27e:	428a      	cmp	r2, r1
    c280:	d101      	bne.n	c286 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c282:	2001      	movs	r0, #1
    c284:	4770      	bx	lr
    c286:	2000      	movs	r0, #0
    c288:	4770      	bx	lr

0000c28a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c28a:	b510      	push	{r4, lr}
    c28c:	2101      	movs	r1, #1
    c28e:	0788      	lsls	r0, r1, #30
    c290:	f7f7 fe28 	bl	3ee4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c294:	2800      	cmp	r0, #0
    c296:	d000      	beq.n	c29a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c298:	2001      	movs	r0, #1
    c29a:	bd10      	pop	{r4, pc}

0000c29c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c29c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2a0:	2101      	movs	r1, #1
    c2a2:	6001      	str	r1, [r0, #0]
    c2a4:	4770      	bx	lr

0000c2a6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c2a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c2aa:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c2ae:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c2b2:	f002 0203 	and.w	r2, r2, #3
    c2b6:	03c9      	lsls	r1, r1, #15
    c2b8:	d503      	bpl.n	c2c2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c2ba:	4282      	cmp	r2, r0
    c2bc:	d101      	bne.n	c2c2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c2be:	2001      	movs	r0, #1
    c2c0:	4770      	bx	lr
    c2c2:	2000      	movs	r0, #0
    c2c4:	4770      	bx	lr

0000c2c6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c2c6:	b510      	push	{r4, lr}
    c2c8:	2100      	movs	r1, #0
    c2ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2ce:	f7f7 fe09 	bl	3ee4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c2d2:	2800      	cmp	r0, #0
    c2d4:	d000      	beq.n	c2d8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c2d6:	2001      	movs	r0, #1
    c2d8:	bd10      	pop	{r4, pc}
    c2da:	2800      	cmp	r0, #0
    c2dc:	db09      	blt.n	c2f2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c2de:	f000 021f 	and.w	r2, r0, #31
    c2e2:	2101      	movs	r1, #1
    c2e4:	4091      	lsls	r1, r2
    c2e6:	0940      	lsrs	r0, r0, #5
    c2e8:	0080      	lsls	r0, r0, #2
    c2ea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c2ee:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c2f2:	4770      	bx	lr
    c2f4:	2800      	cmp	r0, #0
    c2f6:	db0d      	blt.n	c314 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c2f8:	f000 021f 	and.w	r2, r0, #31
    c2fc:	2101      	movs	r1, #1
    c2fe:	4091      	lsls	r1, r2
    c300:	0940      	lsrs	r0, r0, #5
    c302:	0080      	lsls	r0, r0, #2
    c304:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c308:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c30c:	f3bf 8f4f 	dsb	sy
    c310:	f3bf 8f6f 	isb	sy
    c314:	4770      	bx	lr
    c316:	1000      	.short	0x1000
    c318:	00fa0002 	.word	0x00fa0002
    c31c:	edb80000 	.word	0xedb80000
    c320:	0ef2aa4d 	.word	0x0ef2aa4d
    c324:	b5ea3202 	.word	0xb5ea3202
    c328:	d1502fde 	.word	0xd1502fde
    c32c:	d2b55ab7 	.word	0xd2b55ab7
    c330:	41c7      	.short	0x41c7
    c332:	2800      	cmp	r0, #0
    c334:	db09      	blt.n	c34a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c336:	f000 021f 	and.w	r2, r0, #31
    c33a:	2101      	movs	r1, #1
    c33c:	4091      	lsls	r1, r2
    c33e:	0940      	lsrs	r0, r0, #5
    c340:	0080      	lsls	r0, r0, #2
    c342:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c346:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c34a:	4770      	bx	lr

0000c34c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c34c:	f3ef 8110 	mrs	r1, PRIMASK
    c350:	b672      	cpsid	i
    c352:	7802      	ldrb	r2, [r0, #0]
    c354:	2a01      	cmp	r2, #1
    c356:	d001      	beq.n	c35c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c358:	2201      	movs	r2, #1
    c35a:	e000      	b.n	c35e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c35c:	2200      	movs	r2, #0
    c35e:	2301      	movs	r3, #1
    c360:	7003      	strb	r3, [r0, #0]
    c362:	b901      	cbnz	r1, c366 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c364:	b662      	cpsie	i
    c366:	b10a      	cbz	r2, c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c368:	2000      	movs	r0, #0
    c36a:	4770      	bx	lr
    c36c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c370:	4770      	bx	lr

0000c372 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c372:	2100      	movs	r1, #0
    c374:	7001      	strb	r1, [r0, #0]
    c376:	4608      	mov	r0, r1
    c378:	4770      	bx	lr

0000c37a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c37a:	f3ef 8110 	mrs	r1, PRIMASK
    c37e:	b672      	cpsid	i
    c380:	2200      	movs	r2, #0
    c382:	7002      	strb	r2, [r0, #0]
    c384:	b901      	cbnz	r1, c388 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c386:	b662      	cpsie	i
    c388:	2000      	movs	r0, #0
    c38a:	4770      	bx	lr

0000c38c <mpsl_low_priority_process>:
    c38c:	f7f7 bf00 	b.w	4190 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c390 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c390:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c394:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c398:	280f      	cmp	r0, #15
    c39a:	d001      	beq.n	c3a0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c39c:	2000      	movs	r0, #0
    c39e:	4770      	bx	lr
    c3a0:	2001      	movs	r0, #1
    c3a2:	4770      	bx	lr

0000c3a4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c3a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3a8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3ac:	280a      	cmp	r0, #10
    c3ae:	d001      	beq.n	c3b4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c3b0:	2000      	movs	r0, #0
    c3b2:	4770      	bx	lr
    c3b4:	2001      	movs	r0, #1
    c3b6:	4770      	bx	lr

0000c3b8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c3b8:	b500      	push	{lr}
    c3ba:	f7ff fff3 	bl	c3a4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c3be:	b120      	cbz	r0, c3ca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c3c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3c4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c3c8:	b108      	cbz	r0, c3ce <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c3ca:	2000      	movs	r0, #0
    c3cc:	bd00      	pop	{pc}
    c3ce:	2001      	movs	r0, #1
    c3d0:	bd00      	pop	{pc}

0000c3d2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c3d2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3d6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3da:	280e      	cmp	r0, #14
    c3dc:	d001      	beq.n	c3e2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c3de:	2000      	movs	r0, #0
    c3e0:	4770      	bx	lr
    c3e2:	2001      	movs	r0, #1
    c3e4:	4770      	bx	lr

0000c3e6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c3e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3ea:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3ee:	2810      	cmp	r0, #16
    c3f0:	d001      	beq.n	c3f6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c3f2:	2000      	movs	r0, #0
    c3f4:	4770      	bx	lr
    c3f6:	2001      	movs	r0, #1
    c3f8:	4770      	bx	lr

0000c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c3fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3fe:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c402:	2806      	cmp	r0, #6
    c404:	d003      	beq.n	c40e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c406:	1c40      	adds	r0, r0, #1
    c408:	d001      	beq.n	c40e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c40a:	2000      	movs	r0, #0
    c40c:	4770      	bx	lr
    c40e:	2001      	movs	r0, #1
    c410:	4770      	bx	lr

0000c412 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c412:	b500      	push	{lr}
    c414:	f7ff fff1 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c418:	b148      	cbz	r0, c42e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c41a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c41e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c422:	2806      	cmp	r0, #6
    c424:	d303      	bcc.n	c42e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c426:	1c40      	adds	r0, r0, #1
    c428:	d001      	beq.n	c42e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c42a:	2001      	movs	r0, #1
    c42c:	bd00      	pop	{pc}
    c42e:	2000      	movs	r0, #0
    c430:	bd00      	pop	{pc}

0000c432 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c432:	b500      	push	{lr}
    c434:	f7ff ffe1 	bl	c3fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c438:	b138      	cbz	r0, c44a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c43a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c43e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c442:	2806      	cmp	r0, #6
    c444:	d303      	bcc.n	c44e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c446:	1c40      	adds	r0, r0, #1
    c448:	d001      	beq.n	c44e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c44a:	2000      	movs	r0, #0
    c44c:	bd00      	pop	{pc}
    c44e:	2001      	movs	r0, #1
    c450:	bd00      	pop	{pc}

0000c452 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c452:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c456:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c45a:	280d      	cmp	r0, #13
    c45c:	d001      	beq.n	c462 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c45e:	2000      	movs	r0, #0
    c460:	4770      	bx	lr
    c462:	2001      	movs	r0, #1
    c464:	4770      	bx	lr

0000c466 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c466:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c46a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c46e:	2808      	cmp	r0, #8
    c470:	d001      	beq.n	c476 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c472:	2000      	movs	r0, #0
    c474:	4770      	bx	lr
    c476:	2001      	movs	r0, #1
    c478:	4770      	bx	lr

0000c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c47a:	b4f0      	push	{r4, r5, r6, r7}
    c47c:	ea80 0c01 	eor.w	ip, r0, r1
    c480:	4603      	mov	r3, r0
    c482:	f01c 0f03 	tst.w	ip, #3
    c486:	d13c      	bne.n	c502 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c488:	f013 0f03 	tst.w	r3, #3
    c48c:	d00b      	beq.n	c4a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c48e:	2a00      	cmp	r2, #0
    c490:	bf04      	itt	eq
    c492:	bcf0      	popeq	{r4, r5, r6, r7}
    c494:	4770      	bxeq	lr
    c496:	f811 cb01 	ldrb.w	ip, [r1], #1
    c49a:	f803 cb01 	strb.w	ip, [r3], #1
    c49e:	1e52      	subs	r2, r2, #1
    c4a0:	f013 0f03 	tst.w	r3, #3
    c4a4:	d1f3      	bne.n	c48e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c4a6:	2a03      	cmp	r2, #3
    c4a8:	d94f      	bls.n	c54a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c4aa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c4ae:	d24c      	bcs.n	c54a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c4b0:	f1c2 0c00 	rsb	ip, r2, #0
    c4b4:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c4b8:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c4bc:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c4c0:	f1cc 0c00 	rsb	ip, ip, #0
    c4c4:	f1bc 0f00 	cmp.w	ip, #0
    c4c8:	dd1b      	ble.n	c502 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c4ca:	1f0d      	subs	r5, r1, #4
    c4cc:	1f1c      	subs	r4, r3, #4
    c4ce:	f01c 0f01 	tst.w	ip, #1
    c4d2:	d003      	beq.n	c4dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c4d4:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c4d8:	f844 6f04 	str.w	r6, [r4, #4]!
    c4dc:	ea5f 066c 	movs.w	r6, ip, asr #1
    c4e0:	d007      	beq.n	c4f2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c4e2:	686f      	ldr	r7, [r5, #4]
    c4e4:	6067      	str	r7, [r4, #4]
    c4e6:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c4ea:	f844 7f08 	str.w	r7, [r4, #8]!
    c4ee:	1e76      	subs	r6, r6, #1
    c4f0:	d1f7      	bne.n	c4e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c4f2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c4f6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c4fa:	f1cc 0c00 	rsb	ip, ip, #0
    c4fe:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c502:	2a00      	cmp	r2, #0
    c504:	bf04      	itt	eq
    c506:	bcf0      	popeq	{r4, r5, r6, r7}
    c508:	4770      	bxeq	lr
    c50a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c50e:	d226      	bcs.n	c55e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c510:	2a00      	cmp	r2, #0
    c512:	bfdc      	itt	le
    c514:	bcf0      	pople	{r4, r5, r6, r7}
    c516:	4770      	bxle	lr
    c518:	1e49      	subs	r1, r1, #1
    c51a:	1e5b      	subs	r3, r3, #1
    c51c:	f012 0f01 	tst.w	r2, #1
    c520:	d003      	beq.n	c52a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c522:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c526:	f803 cf01 	strb.w	ip, [r3, #1]!
    c52a:	1052      	asrs	r2, r2, #1
    c52c:	bf04      	itt	eq
    c52e:	bcf0      	popeq	{r4, r5, r6, r7}
    c530:	4770      	bxeq	lr
    c532:	f891 c001 	ldrb.w	ip, [r1, #1]
    c536:	f883 c001 	strb.w	ip, [r3, #1]
    c53a:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c53e:	f803 cf02 	strb.w	ip, [r3, #2]!
    c542:	1e52      	subs	r2, r2, #1
    c544:	d1f5      	bne.n	c532 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c546:	bcf0      	pop	{r4, r5, r6, r7}
    c548:	4770      	bx	lr
    c54a:	2a04      	cmp	r2, #4
    c54c:	d3d9      	bcc.n	c502 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c54e:	f851 cb04 	ldr.w	ip, [r1], #4
    c552:	1f12      	subs	r2, r2, #4
    c554:	f843 cb04 	str.w	ip, [r3], #4
    c558:	2a04      	cmp	r2, #4
    c55a:	d2f8      	bcs.n	c54e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c55c:	e7d1      	b.n	c502 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c55e:	f811 cb01 	ldrb.w	ip, [r1], #1
    c562:	f803 cb01 	strb.w	ip, [r3], #1
    c566:	1e52      	subs	r2, r2, #1
    c568:	d1f9      	bne.n	c55e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c56a:	bcf0      	pop	{r4, r5, r6, r7}
    c56c:	4770      	bx	lr

0000c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c56e:	b470      	push	{r4, r5, r6}
    c570:	4603      	mov	r3, r0
    c572:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c576:	f010 0f03 	tst.w	r0, #3
    c57a:	d009      	beq.n	c590 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c57c:	2a00      	cmp	r2, #0
    c57e:	bf04      	itt	eq
    c580:	bc70      	popeq	{r4, r5, r6}
    c582:	4770      	bxeq	lr
    c584:	f803 cb01 	strb.w	ip, [r3], #1
    c588:	1e52      	subs	r2, r2, #1
    c58a:	f013 0f03 	tst.w	r3, #3
    c58e:	d1f5      	bne.n	c57c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c590:	b2c9      	uxtb	r1, r1
    c592:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c596:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c59a:	2a03      	cmp	r2, #3
    c59c:	d939      	bls.n	c612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c59e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5a2:	d236      	bcs.n	c612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c5a4:	4251      	negs	r1, r2
    c5a6:	17cc      	asrs	r4, r1, #31
    c5a8:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c5ac:	1089      	asrs	r1, r1, #2
    c5ae:	424e      	negs	r6, r1
    c5b0:	2e00      	cmp	r6, #0
    c5b2:	dd11      	ble.n	c5d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c5b4:	1f19      	subs	r1, r3, #4
    c5b6:	f016 0f01 	tst.w	r6, #1
    c5ba:	bf18      	it	ne
    c5bc:	f841 5f04 	strne.w	r5, [r1, #4]!
    c5c0:	1074      	asrs	r4, r6, #1
    c5c2:	d004      	beq.n	c5ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c5c4:	604d      	str	r5, [r1, #4]
    c5c6:	f841 5f08 	str.w	r5, [r1, #8]!
    c5ca:	1e64      	subs	r4, r4, #1
    c5cc:	d1fa      	bne.n	c5c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c5ce:	4271      	negs	r1, r6
    c5d0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c5d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c5d8:	2a00      	cmp	r2, #0
    c5da:	bf04      	itt	eq
    c5dc:	bc70      	popeq	{r4, r5, r6}
    c5de:	4770      	bxeq	lr
    c5e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5e4:	d21d      	bcs.n	c622 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c5e6:	2a00      	cmp	r2, #0
    c5e8:	bfdc      	itt	le
    c5ea:	bc70      	pople	{r4, r5, r6}
    c5ec:	4770      	bxle	lr
    c5ee:	1e59      	subs	r1, r3, #1
    c5f0:	f012 0f01 	tst.w	r2, #1
    c5f4:	bf18      	it	ne
    c5f6:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c5fa:	1052      	asrs	r2, r2, #1
    c5fc:	bf04      	itt	eq
    c5fe:	bc70      	popeq	{r4, r5, r6}
    c600:	4770      	bxeq	lr
    c602:	f881 c001 	strb.w	ip, [r1, #1]
    c606:	f801 cf02 	strb.w	ip, [r1, #2]!
    c60a:	1e52      	subs	r2, r2, #1
    c60c:	d1f9      	bne.n	c602 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c60e:	bc70      	pop	{r4, r5, r6}
    c610:	4770      	bx	lr
    c612:	2a04      	cmp	r2, #4
    c614:	d3e0      	bcc.n	c5d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c616:	1f12      	subs	r2, r2, #4
    c618:	f843 5b04 	str.w	r5, [r3], #4
    c61c:	2a04      	cmp	r2, #4
    c61e:	d2fa      	bcs.n	c616 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c620:	e7da      	b.n	c5d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c622:	f803 cb01 	strb.w	ip, [r3], #1
    c626:	1e52      	subs	r2, r2, #1
    c628:	d1fb      	bne.n	c622 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c62a:	bc70      	pop	{r4, r5, r6}
    c62c:	4770      	bx	lr
    c62e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c632:	4770      	bx	lr
    c634:	2000      	movs	r0, #0
    c636:	4770      	bx	lr
    c638:	2000      	movs	r0, #0
    c63a:	4770      	bx	lr
    c63c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c640:	4770      	bx	lr
    c642:	4770      	bx	lr
    c644:	4770      	bx	lr
    c646:	2000      	movs	r0, #0
    c648:	4770      	bx	lr
    c64a:	2100      	movs	r1, #0
    c64c:	7001      	strb	r1, [r0, #0]
    c64e:	4770      	bx	lr
    c650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c654:	4770      	bx	lr
    c656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c65a:	4770      	bx	lr
    c65c:	2100      	movs	r1, #0
    c65e:	7001      	strb	r1, [r0, #0]
    c660:	4770      	bx	lr
    c662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c666:	4770      	bx	lr
    c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c66c:	4770      	bx	lr
    c66e:	7800      	ldrb	r0, [r0, #0]
    c670:	2800      	cmp	r0, #0
    c672:	d001      	beq.n	c678 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    c674:	f06f 0015 	mvn.w	r0, #21
    c678:	4770      	bx	lr
    c67a:	2000      	movs	r0, #0
    c67c:	4770      	bx	lr
    c67e:	2200      	movs	r2, #0
    c680:	f000 b802 	b.w	c688 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000c684 <mpsl_fem_init>:
    c684:	f7f4 b88e 	b.w	7a4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000c688 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    c688:	b570      	push	{r4, r5, r6, lr}
    c68a:	4614      	mov	r4, r2
    c68c:	460d      	mov	r5, r1
    c68e:	1b00      	subs	r0, r0, r4
    c690:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    c694:	4288      	cmp	r0, r1
    c696:	da01      	bge.n	c69c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    c698:	4608      	mov	r0, r1
    c69a:	e002      	b.n	c6a2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c69c:	287f      	cmp	r0, #127	; 0x7f
    c69e:	dd00      	ble.n	c6a2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c6a0:	207f      	movs	r0, #127	; 0x7f
    c6a2:	b240      	sxtb	r0, r0
    c6a4:	f7f4 f8b2 	bl	80c <mpsl_tx_power_radio_supported_power_adjust>
    c6a8:	7028      	strb	r0, [r5, #0]
    c6aa:	706c      	strb	r4, [r5, #1]
    c6ac:	2100      	movs	r1, #0
    c6ae:	4420      	add	r0, r4
    c6b0:	70a9      	strb	r1, [r5, #2]
    c6b2:	b240      	sxtb	r0, r0
    c6b4:	bd70      	pop	{r4, r5, r6, pc}
    c6b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6ba:	460c      	mov	r4, r1
    c6bc:	4681      	mov	r9, r0
    c6be:	7849      	ldrb	r1, [r1, #1]
    c6c0:	f100 0003 	add.w	r0, r0, #3
    c6c4:	f88d 1000 	strb.w	r1, [sp]
    c6c8:	f020 0003 	bic.w	r0, r0, #3
    c6cc:	78a1      	ldrb	r1, [r4, #2]
    c6ce:	0016      	movs	r6, r2
    c6d0:	4605      	mov	r5, r0
    c6d2:	f88d 1001 	strb.w	r1, [sp, #1]
    c6d6:	d000      	beq.n	c6da <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    c6d8:	2000      	movs	r0, #0
    c6da:	4669      	mov	r1, sp
    c6dc:	f7f8 f934 	bl	4948 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c6e0:	4428      	add	r0, r5
    c6e2:	78a1      	ldrb	r1, [r4, #2]
    c6e4:	4605      	mov	r5, r0
    c6e6:	b131      	cbz	r1, c6f6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    c6e8:	8a63      	ldrh	r3, [r4, #18]
    c6ea:	78e2      	ldrb	r2, [r4, #3]
    c6ec:	b106      	cbz	r6, c6f0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    c6ee:	2000      	movs	r0, #0
    c6f0:	f7f8 fb92 	bl	4e18 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c6f4:	4405      	add	r5, r0
    c6f6:	7820      	ldrb	r0, [r4, #0]
    c6f8:	7861      	ldrb	r1, [r4, #1]
    c6fa:	46b2      	mov	sl, r6
    c6fc:	2600      	movs	r6, #0
    c6fe:	4408      	add	r0, r1
    c700:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c704:	4637      	mov	r7, r6
    c706:	e008      	b.n	c71a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    c708:	7a23      	ldrb	r3, [r4, #8]
    c70a:	79e2      	ldrb	r2, [r4, #7]
    c70c:	79a1      	ldrb	r1, [r4, #6]
    c70e:	7960      	ldrb	r0, [r4, #5]
    c710:	f000 fe6e 	bl	d3f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c714:	1c7f      	adds	r7, r7, #1
    c716:	4406      	add	r6, r0
    c718:	b2ff      	uxtb	r7, r7
    c71a:	4547      	cmp	r7, r8
    c71c:	d3f4      	bcc.n	c708 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    c71e:	1ced      	adds	r5, r5, #3
    c720:	f025 0003 	bic.w	r0, r5, #3
    c724:	4604      	mov	r4, r0
    c726:	f1ba 0f00 	cmp.w	sl, #0
    c72a:	d000      	beq.n	c72e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    c72c:	2000      	movs	r0, #0
    c72e:	4632      	mov	r2, r6
    c730:	4641      	mov	r1, r8
    c732:	f7f8 fabd 	bl	4cb0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c736:	4420      	add	r0, r4
    c738:	1dc0      	adds	r0, r0, #7
    c73a:	f020 0007 	bic.w	r0, r0, #7
    c73e:	eba0 0009 	sub.w	r0, r0, r9
    c742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c746 <sdc_soc_ecb_block_encrypt>:
    c746:	b530      	push	{r4, r5, lr}
    c748:	460d      	mov	r5, r1
    c74a:	b08d      	sub	sp, #52	; 0x34
    c74c:	4614      	mov	r4, r2
    c74e:	4601      	mov	r1, r0
    c750:	2210      	movs	r2, #16
    c752:	4668      	mov	r0, sp
    c754:	f7ff fe91 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c758:	2210      	movs	r2, #16
    c75a:	4629      	mov	r1, r5
    c75c:	a804      	add	r0, sp, #16
    c75e:	f7ff fe8c 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c762:	4668      	mov	r0, sp
    c764:	f000 ffc5 	bl	d6f2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c768:	b118      	cbz	r0, c772 <sdc_soc_ecb_block_encrypt+0x2c>
    c76a:	f06f 0015 	mvn.w	r0, #21
    c76e:	b00d      	add	sp, #52	; 0x34
    c770:	bd30      	pop	{r4, r5, pc}
    c772:	2210      	movs	r2, #16
    c774:	4620      	mov	r0, r4
    c776:	a908      	add	r1, sp, #32
    c778:	f7ff fe7f 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c77c:	2000      	movs	r0, #0
    c77e:	e7f6      	b.n	c76e <sdc_soc_ecb_block_encrypt+0x28>

0000c780 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c780:	b50e      	push	{r1, r2, r3, lr}
    c782:	4601      	mov	r1, r0
    c784:	4668      	mov	r0, sp
    c786:	f000 f818 	bl	c7ba <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c78a:	4668      	mov	r0, sp
    c78c:	f001 fc38 	bl	e000 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c790:	bd0e      	pop	{r1, r2, r3, pc}
    c792:	b570      	push	{r4, r5, r6, lr}
    c794:	460c      	mov	r4, r1
    c796:	4605      	mov	r5, r0
    c798:	f7f8 f858 	bl	484c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c79c:	2800      	cmp	r0, #0
    c79e:	d002      	beq.n	c7a6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c7a0:	2d3e      	cmp	r5, #62	; 0x3e
    c7a2:	d001      	beq.n	c7a8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c7a4:	2001      	movs	r0, #1
    c7a6:	bd70      	pop	{r4, r5, r6, pc}
    c7a8:	2c12      	cmp	r4, #18
    c7aa:	d004      	beq.n	c7b6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c7ac:	4620      	mov	r0, r4
    c7ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7b2:	f7f8 b85d 	b.w	4870 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c7b6:	2000      	movs	r0, #0
    c7b8:	bd70      	pop	{r4, r5, r6, pc}

0000c7ba <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c7ba:	880a      	ldrh	r2, [r1, #0]
    c7bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c7c0:	8002      	strh	r2, [r0, #0]
    c7c2:	884a      	ldrh	r2, [r1, #2]
    c7c4:	8042      	strh	r2, [r0, #2]
    c7c6:	784a      	ldrb	r2, [r1, #1]
    c7c8:	0993      	lsrs	r3, r2, #6
    c7ca:	2200      	movs	r2, #0
    c7cc:	7142      	strb	r2, [r0, #5]
    c7ce:	784b      	ldrb	r3, [r1, #1]
    c7d0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c7d4:	b11b      	cbz	r3, c7de <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c7d6:	2b01      	cmp	r3, #1
    c7d8:	d005      	beq.n	c7e6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c7da:	2b02      	cmp	r3, #2
    c7dc:	d005      	beq.n	c7ea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c7de:	7102      	strb	r2, [r0, #4]
    c7e0:	1d09      	adds	r1, r1, #4
    c7e2:	6081      	str	r1, [r0, #8]
    c7e4:	4770      	bx	lr
    c7e6:	2201      	movs	r2, #1
    c7e8:	e7f9      	b.n	c7de <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c7ea:	2202      	movs	r2, #2
    c7ec:	e7f7      	b.n	c7de <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c7ee <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c7ee:	b510      	push	{r4, lr}
    c7f0:	460c      	mov	r4, r1
    c7f2:	7809      	ldrb	r1, [r1, #0]
    c7f4:	7001      	strb	r1, [r0, #0]
    c7f6:	7841      	ldrb	r1, [r0, #1]
    c7f8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c7fc:	7041      	strb	r1, [r0, #1]
    c7fe:	8822      	ldrh	r2, [r4, #0]
    c800:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c804:	4311      	orrs	r1, r2
    c806:	7041      	strb	r1, [r0, #1]
    c808:	78a2      	ldrb	r2, [r4, #2]
    c80a:	7082      	strb	r2, [r0, #2]
    c80c:	8862      	ldrh	r2, [r4, #2]
    c80e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c812:	0a12      	lsrs	r2, r2, #8
    c814:	70c2      	strb	r2, [r0, #3]
    c816:	7041      	strb	r1, [r0, #1]
    c818:	7922      	ldrb	r2, [r4, #4]
    c81a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c81e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c822:	7041      	strb	r1, [r0, #1]
    c824:	7962      	ldrb	r2, [r4, #5]
    c826:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c82a:	7041      	strb	r1, [r0, #1]
    c82c:	68a1      	ldr	r1, [r4, #8]
    c82e:	1d02      	adds	r2, r0, #4
    c830:	4291      	cmp	r1, r2
    c832:	d006      	beq.n	c842 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c834:	8862      	ldrh	r2, [r4, #2]
    c836:	2afb      	cmp	r2, #251	; 0xfb
    c838:	d300      	bcc.n	c83c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c83a:	22fb      	movs	r2, #251	; 0xfb
    c83c:	1d00      	adds	r0, r0, #4
    c83e:	f7ff fe1c 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c842:	78a0      	ldrb	r0, [r4, #2]
    c844:	1d00      	adds	r0, r0, #4
    c846:	b2c0      	uxtb	r0, r0
    c848:	bd10      	pop	{r4, pc}

0000c84a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c84e:	4604      	mov	r4, r0
    c850:	f891 c000 	ldrb.w	ip, [r1]
    c854:	2000      	movs	r0, #0
    c856:	2513      	movs	r5, #19
    c858:	260c      	movs	r6, #12
    c85a:	2705      	movs	r7, #5
    c85c:	223e      	movs	r2, #62	; 0x3e
    c85e:	23ff      	movs	r3, #255	; 0xff
    c860:	f1bc 0f1d 	cmp.w	ip, #29
    c864:	d27d      	bcs.n	c962 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    c866:	e8df f00c 	tbb	[pc, ip]
    c86a:	0f7c      	.short	0x0f7c
    c86c:	882e2826 	.word	0x882e2826
    c870:	d1bea492 	.word	0xd1bea492
    c874:	f5f7ded3 	.word	0xf5f7ded3
    c878:	547c7cf4 	.word	0x547c7cf4
    c87c:	f0f1f2f3 	.word	0xf0f1f2f3
    c880:	ecedeeef 	.word	0xecedeeef
    c884:	00e9eaeb 	.word	0x00e9eaeb
    c888:	7026      	strb	r6, [r4, #0]
    c88a:	7908      	ldrb	r0, [r1, #4]
    c88c:	70a0      	strb	r0, [r4, #2]
    c88e:	7948      	ldrb	r0, [r1, #5]
    c890:	70e0      	strb	r0, [r4, #3]
    c892:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c896:	0a00      	lsrs	r0, r0, #8
    c898:	7120      	strb	r0, [r4, #4]
    c89a:	79c8      	ldrb	r0, [r1, #7]
    c89c:	7160      	strb	r0, [r4, #5]
    c89e:	7a08      	ldrb	r0, [r1, #8]
    c8a0:	71a0      	strb	r0, [r4, #6]
    c8a2:	8908      	ldrh	r0, [r1, #8]
    c8a4:	0a00      	lsrs	r0, r0, #8
    c8a6:	71e0      	strb	r0, [r4, #7]
    c8a8:	7a88      	ldrb	r0, [r1, #10]
    c8aa:	7220      	strb	r0, [r4, #8]
    c8ac:	8948      	ldrh	r0, [r1, #10]
    c8ae:	0a00      	lsrs	r0, r0, #8
    c8b0:	7260      	strb	r0, [r4, #9]
    c8b2:	2008      	movs	r0, #8
    c8b4:	e190      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c8b6:	2010      	movs	r0, #16
    c8b8:	e000      	b.n	c8bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x72>
    c8ba:	201a      	movs	r0, #26
    c8bc:	7020      	strb	r0, [r4, #0]
    c8be:	7908      	ldrb	r0, [r1, #4]
    c8c0:	70a0      	strb	r0, [r4, #2]
    c8c2:	2001      	movs	r0, #1
    c8c4:	e188      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c8c6:	7022      	strb	r2, [r4, #0]
    c8c8:	2001      	movs	r0, #1
    c8ca:	70a0      	strb	r0, [r4, #2]
    c8cc:	7908      	ldrb	r0, [r1, #4]
    c8ce:	70e0      	strb	r0, [r4, #3]
    c8d0:	7988      	ldrb	r0, [r1, #6]
    c8d2:	7120      	strb	r0, [r4, #4]
    c8d4:	88c8      	ldrh	r0, [r1, #6]
    c8d6:	0a00      	lsrs	r0, r0, #8
    c8d8:	7160      	strb	r0, [r4, #5]
    c8da:	7a08      	ldrb	r0, [r1, #8]
    c8dc:	71a0      	strb	r0, [r4, #6]
    c8de:	7a48      	ldrb	r0, [r1, #9]
    c8e0:	71e0      	strb	r0, [r4, #7]
    c8e2:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c8e6:	60a0      	str	r0, [r4, #8]
    c8e8:	89c8      	ldrh	r0, [r1, #14]
    c8ea:	81a0      	strh	r0, [r4, #12]
    c8ec:	7c08      	ldrb	r0, [r1, #16]
    c8ee:	73a0      	strb	r0, [r4, #14]
    c8f0:	8a08      	ldrh	r0, [r1, #16]
    c8f2:	0a00      	lsrs	r0, r0, #8
    c8f4:	73e0      	strb	r0, [r4, #15]
    c8f6:	7c88      	ldrb	r0, [r1, #18]
    c8f8:	7420      	strb	r0, [r4, #16]
    c8fa:	8a48      	ldrh	r0, [r1, #18]
    c8fc:	0a00      	lsrs	r0, r0, #8
    c8fe:	7460      	strb	r0, [r4, #17]
    c900:	7d08      	ldrb	r0, [r1, #20]
    c902:	74a0      	strb	r0, [r4, #18]
    c904:	8a88      	ldrh	r0, [r1, #20]
    c906:	0a00      	lsrs	r0, r0, #8
    c908:	74e0      	strb	r0, [r4, #19]
    c90a:	7d88      	ldrb	r0, [r1, #22]
    c90c:	7520      	strb	r0, [r4, #20]
    c90e:	4628      	mov	r0, r5
    c910:	e162      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c912:	7022      	strb	r2, [r4, #0]
    c914:	200a      	movs	r0, #10
    c916:	70a0      	strb	r0, [r4, #2]
    c918:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c91c:	70e0      	strb	r0, [r4, #3]
    c91e:	7888      	ldrb	r0, [r1, #2]
    c920:	7120      	strb	r0, [r4, #4]
    c922:	8848      	ldrh	r0, [r1, #2]
    c924:	0a00      	lsrs	r0, r0, #8
    c926:	7160      	strb	r0, [r4, #5]
    c928:	7908      	ldrb	r0, [r1, #4]
    c92a:	71a0      	strb	r0, [r4, #6]
    c92c:	7948      	ldrb	r0, [r1, #5]
    c92e:	71e0      	strb	r0, [r4, #7]
    c930:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c934:	60a0      	str	r0, [r4, #8]
    c936:	8948      	ldrh	r0, [r1, #10]
    c938:	81a0      	strh	r0, [r4, #12]
    c93a:	68c8      	ldr	r0, [r1, #12]
    c93c:	f8c4 000e 	str.w	r0, [r4, #14]
    c940:	8a08      	ldrh	r0, [r1, #16]
    c942:	8260      	strh	r0, [r4, #18]
    c944:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c948:	6160      	str	r0, [r4, #20]
    c94a:	8ac8      	ldrh	r0, [r1, #22]
    c94c:	8320      	strh	r0, [r4, #24]
    c94e:	7e08      	ldrb	r0, [r1, #24]
    c950:	76a0      	strb	r0, [r4, #26]
    c952:	8b08      	ldrh	r0, [r1, #24]
    c954:	0a00      	lsrs	r0, r0, #8
    c956:	76e0      	strb	r0, [r4, #27]
    c958:	7e88      	ldrb	r0, [r1, #26]
    c95a:	7720      	strb	r0, [r4, #28]
    c95c:	8b48      	ldrh	r0, [r1, #26]
    c95e:	0a00      	lsrs	r0, r0, #8
    c960:	e000      	b.n	c964 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    c962:	e09a      	b.n	ca9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c964:	7760      	strb	r0, [r4, #29]
    c966:	7f08      	ldrb	r0, [r1, #28]
    c968:	77a0      	strb	r0, [r4, #30]
    c96a:	8b88      	ldrh	r0, [r1, #28]
    c96c:	0a00      	lsrs	r0, r0, #8
    c96e:	77e0      	strb	r0, [r4, #31]
    c970:	7f88      	ldrb	r0, [r1, #30]
    c972:	f884 0020 	strb.w	r0, [r4, #32]
    c976:	201f      	movs	r0, #31
    c978:	e12e      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c97a:	7022      	strb	r2, [r4, #0]
    c97c:	2014      	movs	r0, #20
    c97e:	70a0      	strb	r0, [r4, #2]
    c980:	7908      	ldrb	r0, [r1, #4]
    c982:	70e0      	strb	r0, [r4, #3]
    c984:	8888      	ldrh	r0, [r1, #4]
    c986:	0a00      	lsrs	r0, r0, #8
    c988:	7120      	strb	r0, [r4, #4]
    c98a:	7988      	ldrb	r0, [r1, #6]
    c98c:	e0c2      	b.n	cb14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    c98e:	7022      	strb	r2, [r4, #0]
    c990:	2004      	movs	r0, #4
    c992:	70a0      	strb	r0, [r4, #2]
    c994:	7908      	ldrb	r0, [r1, #4]
    c996:	70e0      	strb	r0, [r4, #3]
    c998:	7988      	ldrb	r0, [r1, #6]
    c99a:	7120      	strb	r0, [r4, #4]
    c99c:	88c8      	ldrh	r0, [r1, #6]
    c99e:	0a00      	lsrs	r0, r0, #8
    c9a0:	7160      	strb	r0, [r4, #5]
    c9a2:	6888      	ldr	r0, [r1, #8]
    c9a4:	f8c4 0006 	str.w	r0, [r4, #6]
    c9a8:	68c8      	ldr	r0, [r1, #12]
    c9aa:	f8c4 000a 	str.w	r0, [r4, #10]
    c9ae:	200c      	movs	r0, #12
    c9b0:	e112      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c9b2:	7022      	strb	r2, [r4, #0]
    c9b4:	2003      	movs	r0, #3
    c9b6:	70a0      	strb	r0, [r4, #2]
    c9b8:	7908      	ldrb	r0, [r1, #4]
    c9ba:	70e0      	strb	r0, [r4, #3]
    c9bc:	7988      	ldrb	r0, [r1, #6]
    c9be:	7120      	strb	r0, [r4, #4]
    c9c0:	88c8      	ldrh	r0, [r1, #6]
    c9c2:	0a00      	lsrs	r0, r0, #8
    c9c4:	7160      	strb	r0, [r4, #5]
    c9c6:	7a08      	ldrb	r0, [r1, #8]
    c9c8:	71a0      	strb	r0, [r4, #6]
    c9ca:	8908      	ldrh	r0, [r1, #8]
    c9cc:	0a00      	lsrs	r0, r0, #8
    c9ce:	71e0      	strb	r0, [r4, #7]
    c9d0:	7a88      	ldrb	r0, [r1, #10]
    c9d2:	7220      	strb	r0, [r4, #8]
    c9d4:	8948      	ldrh	r0, [r1, #10]
    c9d6:	0a00      	lsrs	r0, r0, #8
    c9d8:	7260      	strb	r0, [r4, #9]
    c9da:	7b08      	ldrb	r0, [r1, #12]
    c9dc:	72a0      	strb	r0, [r4, #10]
    c9de:	8988      	ldrh	r0, [r1, #12]
    c9e0:	0a00      	lsrs	r0, r0, #8
    c9e2:	72e0      	strb	r0, [r4, #11]
    c9e4:	e0d2      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    c9e6:	7022      	strb	r2, [r4, #0]
    c9e8:	70a7      	strb	r7, [r4, #2]
    c9ea:	7908      	ldrb	r0, [r1, #4]
    c9ec:	70e0      	strb	r0, [r4, #3]
    c9ee:	8888      	ldrh	r0, [r1, #4]
    c9f0:	0a00      	lsrs	r0, r0, #8
    c9f2:	7120      	strb	r0, [r4, #4]
    c9f4:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c9f8:	f8c4 0005 	str.w	r0, [r4, #5]
    c9fc:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ca00:	f8c4 0009 	str.w	r0, [r4, #9]
    ca04:	89c8      	ldrh	r0, [r1, #14]
    ca06:	f8a4 000d 	strh.w	r0, [r4, #13]
    ca0a:	e0e4      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    ca0c:	2011      	movs	r0, #17
    ca0e:	e047      	b.n	caa0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x256>
    ca10:	7027      	strb	r7, [r4, #0]
    ca12:	7908      	ldrb	r0, [r1, #4]
    ca14:	70a0      	strb	r0, [r4, #2]
    ca16:	7948      	ldrb	r0, [r1, #5]
    ca18:	70e0      	strb	r0, [r4, #3]
    ca1a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ca1e:	0a00      	lsrs	r0, r0, #8
    ca20:	7120      	strb	r0, [r4, #4]
    ca22:	79c8      	ldrb	r0, [r1, #7]
    ca24:	e076      	b.n	cb14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    ca26:	2008      	movs	r0, #8
    ca28:	7020      	strb	r0, [r4, #0]
    ca2a:	7908      	ldrb	r0, [r1, #4]
    ca2c:	70a0      	strb	r0, [r4, #2]
    ca2e:	7988      	ldrb	r0, [r1, #6]
    ca30:	70e0      	strb	r0, [r4, #3]
    ca32:	88c8      	ldrh	r0, [r1, #6]
    ca34:	0a00      	lsrs	r0, r0, #8
    ca36:	7120      	strb	r0, [r4, #4]
    ca38:	7a08      	ldrb	r0, [r1, #8]
    ca3a:	e06b      	b.n	cb14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    ca3c:	e0b6      	b.n	cbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    ca3e:	e08a      	b.n	cb56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    ca40:	e06b      	b.n	cb1a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    ca42:	e096      	b.n	cb72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ca44:	e0a4      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x346>
    ca46:	e05d      	b.n	cb04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    ca48:	e045      	b.n	cad6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
    ca4a:	e041      	b.n	cad0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    ca4c:	e030      	b.n	cab0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x266>
    ca4e:	e011      	b.n	ca74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
    ca50:	e00d      	b.n	ca6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    ca52:	e024      	b.n	ca9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    ca54:	e01b      	b.n	ca8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    ca56:	e7ff      	b.n	ca58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20e>
    ca58:	2030      	movs	r0, #48	; 0x30
    ca5a:	7020      	strb	r0, [r4, #0]
    ca5c:	7908      	ldrb	r0, [r1, #4]
    ca5e:	70a0      	strb	r0, [r4, #2]
    ca60:	7988      	ldrb	r0, [r1, #6]
    ca62:	70e0      	strb	r0, [r4, #3]
    ca64:	88c8      	ldrh	r0, [r1, #6]
    ca66:	0a00      	lsrs	r0, r0, #8
    ca68:	7120      	strb	r0, [r4, #4]
    ca6a:	2003      	movs	r0, #3
    ca6c:	e0b4      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    ca6e:	7022      	strb	r2, [r4, #0]
    ca70:	2007      	movs	r0, #7
    ca72:	e054      	b.n	cb1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d4>
    ca74:	7022      	strb	r2, [r4, #0]
    ca76:	70a6      	strb	r6, [r4, #2]
    ca78:	7908      	ldrb	r0, [r1, #4]
    ca7a:	70e0      	strb	r0, [r4, #3]
    ca7c:	7988      	ldrb	r0, [r1, #6]
    ca7e:	7120      	strb	r0, [r4, #4]
    ca80:	88c8      	ldrh	r0, [r1, #6]
    ca82:	0a00      	lsrs	r0, r0, #8
    ca84:	7160      	strb	r0, [r4, #5]
    ca86:	7a08      	ldrb	r0, [r1, #8]
    ca88:	71a0      	strb	r0, [r4, #6]
    ca8a:	7a48      	ldrb	r0, [r1, #9]
    ca8c:	e01d      	b.n	caca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    ca8e:	4620      	mov	r0, r4
    ca90:	1d09      	adds	r1, r1, #4
    ca92:	f7f7 fead 	bl	47f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
    ca96:	2800      	cmp	r0, #0
    ca98:	d109      	bne.n	caae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    ca9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca9e:	2057      	movs	r0, #87	; 0x57
    caa0:	7020      	strb	r0, [r4, #0]
    caa2:	7908      	ldrb	r0, [r1, #4]
    caa4:	70a0      	strb	r0, [r4, #2]
    caa6:	8888      	ldrh	r0, [r1, #4]
    caa8:	0a00      	lsrs	r0, r0, #8
    caaa:	70e0      	strb	r0, [r4, #3]
    caac:	2002      	movs	r0, #2
    caae:	e093      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cab0:	7022      	strb	r2, [r4, #0]
    cab2:	2012      	movs	r0, #18
    cab4:	70a0      	strb	r0, [r4, #2]
    cab6:	7908      	ldrb	r0, [r1, #4]
    cab8:	70e0      	strb	r0, [r4, #3]
    caba:	7948      	ldrb	r0, [r1, #5]
    cabc:	7120      	strb	r0, [r4, #4]
    cabe:	7988      	ldrb	r0, [r1, #6]
    cac0:	7160      	strb	r0, [r4, #5]
    cac2:	88c8      	ldrh	r0, [r1, #6]
    cac4:	0a00      	lsrs	r0, r0, #8
    cac6:	71a0      	strb	r0, [r4, #6]
    cac8:	7a08      	ldrb	r0, [r1, #8]
    caca:	71e0      	strb	r0, [r4, #7]
    cacc:	2006      	movs	r0, #6
    cace:	e083      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cad0:	7022      	strb	r2, [r4, #0]
    cad2:	2020      	movs	r0, #32
    cad4:	e041      	b.n	cb5a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    cad6:	7022      	strb	r2, [r4, #0]
    cad8:	2021      	movs	r0, #33	; 0x21
    cada:	70a0      	strb	r0, [r4, #2]
    cadc:	7908      	ldrb	r0, [r1, #4]
    cade:	70e0      	strb	r0, [r4, #3]
    cae0:	7948      	ldrb	r0, [r1, #5]
    cae2:	7120      	strb	r0, [r4, #4]
    cae4:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cae8:	0a00      	lsrs	r0, r0, #8
    caea:	7160      	strb	r0, [r4, #5]
    caec:	79c8      	ldrb	r0, [r1, #7]
    caee:	71a0      	strb	r0, [r4, #6]
    caf0:	7a08      	ldrb	r0, [r1, #8]
    caf2:	71e0      	strb	r0, [r4, #7]
    caf4:	7a48      	ldrb	r0, [r1, #9]
    caf6:	7220      	strb	r0, [r4, #8]
    caf8:	7a88      	ldrb	r0, [r1, #10]
    cafa:	7260      	strb	r0, [r4, #9]
    cafc:	7ac8      	ldrb	r0, [r1, #11]
    cafe:	72a0      	strb	r0, [r4, #10]
    cb00:	2009      	movs	r0, #9
    cb02:	e069      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb04:	7023      	strb	r3, [r4, #0]
    cb06:	20a1      	movs	r0, #161	; 0xa1
    cb08:	70a0      	strb	r0, [r4, #2]
    cb0a:	7908      	ldrb	r0, [r1, #4]
    cb0c:	70e0      	strb	r0, [r4, #3]
    cb0e:	7948      	ldrb	r0, [r1, #5]
    cb10:	7120      	strb	r0, [r4, #4]
    cb12:	2000      	movs	r0, #0
    cb14:	7160      	strb	r0, [r4, #5]
    cb16:	2004      	movs	r0, #4
    cb18:	e05e      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb1a:	7023      	strb	r3, [r4, #0]
    cb1c:	20a2      	movs	r0, #162	; 0xa2
    cb1e:	70a0      	strb	r0, [r4, #2]
    cb20:	7908      	ldrb	r0, [r1, #4]
    cb22:	70e0      	strb	r0, [r4, #3]
    cb24:	8888      	ldrh	r0, [r1, #4]
    cb26:	0a00      	lsrs	r0, r0, #8
    cb28:	7120      	strb	r0, [r4, #4]
    cb2a:	7988      	ldrb	r0, [r1, #6]
    cb2c:	7160      	strb	r0, [r4, #5]
    cb2e:	88c8      	ldrh	r0, [r1, #6]
    cb30:	0a00      	lsrs	r0, r0, #8
    cb32:	71a0      	strb	r0, [r4, #6]
    cb34:	7a08      	ldrb	r0, [r1, #8]
    cb36:	71e0      	strb	r0, [r4, #7]
    cb38:	8908      	ldrh	r0, [r1, #8]
    cb3a:	0a00      	lsrs	r0, r0, #8
    cb3c:	7220      	strb	r0, [r4, #8]
    cb3e:	7a88      	ldrb	r0, [r1, #10]
    cb40:	7260      	strb	r0, [r4, #9]
    cb42:	8948      	ldrh	r0, [r1, #10]
    cb44:	0a00      	lsrs	r0, r0, #8
    cb46:	72a0      	strb	r0, [r4, #10]
    cb48:	7b08      	ldrb	r0, [r1, #12]
    cb4a:	72e0      	strb	r0, [r4, #11]
    cb4c:	8988      	ldrh	r0, [r1, #12]
    cb4e:	0a00      	lsrs	r0, r0, #8
    cb50:	7320      	strb	r0, [r4, #12]
    cb52:	200b      	movs	r0, #11
    cb54:	e040      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb56:	7023      	strb	r3, [r4, #0]
    cb58:	20a3      	movs	r0, #163	; 0xa3
    cb5a:	70a0      	strb	r0, [r4, #2]
    cb5c:	7908      	ldrb	r0, [r1, #4]
    cb5e:	70e0      	strb	r0, [r4, #3]
    cb60:	8888      	ldrh	r0, [r1, #4]
    cb62:	0a00      	lsrs	r0, r0, #8
    cb64:	7120      	strb	r0, [r4, #4]
    cb66:	7988      	ldrb	r0, [r1, #6]
    cb68:	7160      	strb	r0, [r4, #5]
    cb6a:	79c8      	ldrb	r0, [r1, #7]
    cb6c:	71a0      	strb	r0, [r4, #6]
    cb6e:	2005      	movs	r0, #5
    cb70:	e032      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb72:	7022      	strb	r2, [r4, #0]
    cb74:	70a5      	strb	r5, [r4, #2]
    cb76:	7908      	ldrb	r0, [r1, #4]
    cb78:	70e0      	strb	r0, [r4, #3]
    cb7a:	7948      	ldrb	r0, [r1, #5]
    cb7c:	7120      	strb	r0, [r4, #4]
    cb7e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cb82:	f8c4 0005 	str.w	r0, [r4, #5]
    cb86:	8948      	ldrh	r0, [r1, #10]
    cb88:	f8a4 0009 	strh.w	r0, [r4, #9]
    cb8c:	200a      	movs	r0, #10
    cb8e:	e023      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb90:	7023      	strb	r3, [r4, #0]
    cb92:	20a4      	movs	r0, #164	; 0xa4
    cb94:	70a0      	strb	r0, [r4, #2]
    cb96:	7908      	ldrb	r0, [r1, #4]
    cb98:	70e0      	strb	r0, [r4, #3]
    cb9a:	8888      	ldrh	r0, [r1, #4]
    cb9c:	0a00      	lsrs	r0, r0, #8
    cb9e:	7120      	strb	r0, [r4, #4]
    cba0:	7988      	ldrb	r0, [r1, #6]
    cba2:	7160      	strb	r0, [r4, #5]
    cba4:	79c8      	ldrb	r0, [r1, #7]
    cba6:	71a0      	strb	r0, [r4, #6]
    cba8:	2007      	movs	r0, #7
    cbaa:	e015      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cbac:	7023      	strb	r3, [r4, #0]
    cbae:	2080      	movs	r0, #128	; 0x80
    cbb0:	70a0      	strb	r0, [r4, #2]
    cbb2:	888a      	ldrh	r2, [r1, #4]
    cbb4:	f8a4 2003 	strh.w	r2, [r4, #3]
    cbb8:	88ca      	ldrh	r2, [r1, #6]
    cbba:	f8a4 2005 	strh.w	r2, [r4, #5]
    cbbe:	7a0a      	ldrb	r2, [r1, #8]
    cbc0:	71e2      	strb	r2, [r4, #7]
    cbc2:	894a      	ldrh	r2, [r1, #10]
    cbc4:	8122      	strh	r2, [r4, #8]
    cbc6:	898a      	ldrh	r2, [r1, #12]
    cbc8:	8162      	strh	r2, [r4, #10]
    cbca:	89ca      	ldrh	r2, [r1, #14]
    cbcc:	81a2      	strh	r2, [r4, #12]
    cbce:	7c09      	ldrb	r1, [r1, #16]
    cbd0:	f001 0101 	and.w	r1, r1, #1
    cbd4:	73a1      	strb	r1, [r4, #14]
    cbd6:	200d      	movs	r0, #13
    cbd8:	7060      	strb	r0, [r4, #1]
    cbda:	1c80      	adds	r0, r0, #2
    cbdc:	e75d      	b.n	ca9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>

0000cbde <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cbde:	223e      	movs	r2, #62	; 0x3e
    cbe0:	7002      	strb	r2, [r0, #0]
    cbe2:	2201      	movs	r2, #1
    cbe4:	7082      	strb	r2, [r0, #2]
    cbe6:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cbea:	70c2      	strb	r2, [r0, #3]
    cbec:	788a      	ldrb	r2, [r1, #2]
    cbee:	7102      	strb	r2, [r0, #4]
    cbf0:	884a      	ldrh	r2, [r1, #2]
    cbf2:	0a12      	lsrs	r2, r2, #8
    cbf4:	7142      	strb	r2, [r0, #5]
    cbf6:	790a      	ldrb	r2, [r1, #4]
    cbf8:	7182      	strb	r2, [r0, #6]
    cbfa:	794a      	ldrb	r2, [r1, #5]
    cbfc:	71c2      	strb	r2, [r0, #7]
    cbfe:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cc02:	6082      	str	r2, [r0, #8]
    cc04:	894a      	ldrh	r2, [r1, #10]
    cc06:	8182      	strh	r2, [r0, #12]
    cc08:	7e0a      	ldrb	r2, [r1, #24]
    cc0a:	7382      	strb	r2, [r0, #14]
    cc0c:	8b0a      	ldrh	r2, [r1, #24]
    cc0e:	0a12      	lsrs	r2, r2, #8
    cc10:	73c2      	strb	r2, [r0, #15]
    cc12:	7e8a      	ldrb	r2, [r1, #26]
    cc14:	7402      	strb	r2, [r0, #16]
    cc16:	8b4a      	ldrh	r2, [r1, #26]
    cc18:	0a12      	lsrs	r2, r2, #8
    cc1a:	7442      	strb	r2, [r0, #17]
    cc1c:	7f0a      	ldrb	r2, [r1, #28]
    cc1e:	7482      	strb	r2, [r0, #18]
    cc20:	8b8a      	ldrh	r2, [r1, #28]
    cc22:	0a12      	lsrs	r2, r2, #8
    cc24:	74c2      	strb	r2, [r0, #19]
    cc26:	7f89      	ldrb	r1, [r1, #30]
    cc28:	7501      	strb	r1, [r0, #20]
    cc2a:	2113      	movs	r1, #19
    cc2c:	7041      	strb	r1, [r0, #1]
    cc2e:	4608      	mov	r0, r1
    cc30:	4770      	bx	lr
    cc32:	094a      	lsrs	r2, r1, #5
    cc34:	f001 011f 	and.w	r1, r1, #31
    cc38:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cc3c:	40c8      	lsrs	r0, r1
    cc3e:	f000 0001 	and.w	r0, r0, #1
    cc42:	4770      	bx	lr

0000cc44 <sdc_hci_data_put>:
    cc44:	b510      	push	{r4, lr}
    cc46:	f06f 0415 	mvn.w	r4, #21
    cc4a:	b120      	cbz	r0, cc56 <sdc_hci_data_put+0x12>
    cc4c:	f7ff fd98 	bl	c780 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cc50:	b108      	cbz	r0, cc56 <sdc_hci_data_put+0x12>
    cc52:	2000      	movs	r0, #0
    cc54:	bd10      	pop	{r4, pc}
    cc56:	4620      	mov	r0, r4
    cc58:	bd10      	pop	{r4, pc}

0000cc5a <sdc_hci_get>:
    cc5a:	b510      	push	{r4, lr}
    cc5c:	460c      	mov	r4, r1
    cc5e:	b130      	cbz	r0, cc6e <sdc_hci_get+0x14>
    cc60:	b12c      	cbz	r4, cc6e <sdc_hci_get+0x14>
    cc62:	f7f7 fd6d 	bl	4740 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cc66:	b128      	cbz	r0, cc74 <sdc_hci_get+0x1a>
    cc68:	7020      	strb	r0, [r4, #0]
    cc6a:	2000      	movs	r0, #0
    cc6c:	bd10      	pop	{r4, pc}
    cc6e:	f06f 0015 	mvn.w	r0, #21
    cc72:	bd10      	pop	{r4, pc}
    cc74:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cc78:	bd10      	pop	{r4, pc}

0000cc7a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cc7a:	f003 b9b1 	b.w	ffe0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cc7e <sdc_hci_cmd_cb_read_transmit_power_level>:
    cc7e:	f003 b9fd 	b.w	1007c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cc82 <sdc_hci_cmd_cb_set_event_mask>:
    cc82:	b510      	push	{r4, lr}
    cc84:	f7f7 fe04 	bl	4890 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cc88:	2000      	movs	r0, #0
    cc8a:	bd10      	pop	{r4, pc}

0000cc8c <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cc8c:	b510      	push	{r4, lr}
    cc8e:	f7f7 fe0f 	bl	48b0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cc92:	2000      	movs	r0, #0
    cc94:	bd10      	pop	{r4, pc}

0000cc96 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cc96:	f003 ba0d 	b.w	100b4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cc9a <sdc_hci_cmd_vs_conn_event_extend>:
    cc9a:	b508      	push	{r3, lr}
    cc9c:	7800      	ldrb	r0, [r0, #0]
    cc9e:	f88d 0000 	strb.w	r0, [sp]
    cca2:	4668      	mov	r0, sp
    cca4:	f003 f8bd 	bl	fe22 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cca8:	bd08      	pop	{r3, pc}

0000ccaa <sdc_hci_cmd_vs_conn_update>:
    ccaa:	2001      	movs	r0, #1
    ccac:	4770      	bx	lr

0000ccae <sdc_hci_cmd_vs_event_length_set>:
    ccae:	f7fd b9d5 	b.w	a05c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ccb2 <sdc_hci_cmd_vs_llpm_mode_set>:
    ccb2:	2001      	movs	r0, #1
    ccb4:	4770      	bx	lr

0000ccb6 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    ccb6:	7881      	ldrb	r1, [r0, #2]
    ccb8:	8800      	ldrh	r0, [r0, #0]
    ccba:	f003 b865 	b.w	fd88 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000ccbe <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ccbe:	7800      	ldrb	r0, [r0, #0]
    ccc0:	b100      	cbz	r0, ccc4 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ccc2:	2001      	movs	r0, #1
    ccc4:	f003 b85b 	b.w	fd7e <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ccc8 <sdc_hci_cmd_vs_set_adv_randomness>:
    ccc8:	f003 b888 	b.w	fddc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000cccc <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    cccc:	b510      	push	{r4, lr}
    ccce:	4604      	mov	r4, r0
    ccd0:	f7f7 f9d2 	bl	4078 <mpsl_temperature_get>
    ccd4:	17c1      	asrs	r1, r0, #31
    ccd6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ccda:	1080      	asrs	r0, r0, #2
    ccdc:	287f      	cmp	r0, #127	; 0x7f
    ccde:	dd01      	ble.n	cce4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    cce0:	207f      	movs	r0, #127	; 0x7f
    cce2:	e004      	b.n	ccee <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cce4:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    cce8:	4288      	cmp	r0, r1
    ccea:	da00      	bge.n	ccee <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    ccec:	4608      	mov	r0, r1
    ccee:	7020      	strb	r0, [r4, #0]
    ccf0:	2000      	movs	r0, #0
    ccf2:	bd10      	pop	{r4, pc}

0000ccf4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ccf4:	b570      	push	{r4, r5, r6, lr}
    ccf6:	4605      	mov	r5, r0
    ccf8:	2210      	movs	r2, #16
    ccfa:	2100      	movs	r1, #0
    ccfc:	f7ff fc37 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd00:	2210      	movs	r2, #16
    cd02:	2100      	movs	r1, #0
    cd04:	f105 0010 	add.w	r0, r5, #16
    cd08:	f7ff fc31 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd0c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cd10:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cd14:	1c40      	adds	r0, r0, #1
    cd16:	d10b      	bne.n	cd30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd18:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cd1c:	1c40      	adds	r0, r0, #1
    cd1e:	d107      	bne.n	cd30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd20:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cd24:	1c40      	adds	r0, r0, #1
    cd26:	d103      	bne.n	cd30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd28:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cd2c:	1c40      	adds	r0, r0, #1
    cd2e:	d00b      	beq.n	cd48 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cd30:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cd34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cd38:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    cd3c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cd40:	612a      	str	r2, [r5, #16]
    cd42:	6168      	str	r0, [r5, #20]
    cd44:	61a9      	str	r1, [r5, #24]
    cd46:	61eb      	str	r3, [r5, #28]
    cd48:	2000      	movs	r0, #0
    cd4a:	f7f8 fac7 	bl	52dc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cd4e:	b918      	cbnz	r0, cd58 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cd50:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cd54:	07c0      	lsls	r0, r0, #31
    cd56:	d118      	bne.n	cd8a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cd58:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cd5c:	1c40      	adds	r0, r0, #1
    cd5e:	d10b      	bne.n	cd78 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd60:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cd64:	1c40      	adds	r0, r0, #1
    cd66:	d107      	bne.n	cd78 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd68:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cd6c:	1c40      	adds	r0, r0, #1
    cd6e:	d103      	bne.n	cd78 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd70:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cd74:	1c40      	adds	r0, r0, #1
    cd76:	d008      	beq.n	cd8a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cd78:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cd7c:	6861      	ldr	r1, [r4, #4]
    cd7e:	68a2      	ldr	r2, [r4, #8]
    cd80:	68e3      	ldr	r3, [r4, #12]
    cd82:	6028      	str	r0, [r5, #0]
    cd84:	6069      	str	r1, [r5, #4]
    cd86:	60aa      	str	r2, [r5, #8]
    cd88:	60eb      	str	r3, [r5, #12]
    cd8a:	2000      	movs	r0, #0
    cd8c:	bd70      	pop	{r4, r5, r6, pc}

0000cd8e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cd8e:	b538      	push	{r3, r4, r5, lr}
    cd90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cd94:	4604      	mov	r4, r0
    cd96:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cd9a:	1c40      	adds	r0, r0, #1
    cd9c:	d105      	bne.n	cdaa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cd9e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cda2:	43c0      	mvns	r0, r0
    cda4:	0400      	lsls	r0, r0, #16
    cda6:	0c00      	lsrs	r0, r0, #16
    cda8:	d03e      	beq.n	ce28 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cdaa:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cdae:	07c0      	lsls	r0, r0, #31
    cdb0:	d03a      	beq.n	ce28 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cdb2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cdb6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    cdba:	f8ad 1000 	strh.w	r1, [sp]
    cdbe:	f8c4 0001 	str.w	r0, [r4, #1]
    cdc2:	f8bd 0000 	ldrh.w	r0, [sp]
    cdc6:	f8a4 0005 	strh.w	r0, [r4, #5]
    cdca:	79a0      	ldrb	r0, [r4, #6]
    cdcc:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cdd0:	71a0      	strb	r0, [r4, #6]
    cdd2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cdd6:	1c40      	adds	r0, r0, #1
    cdd8:	d00f      	beq.n	cdfa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cdda:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cdde:	1c40      	adds	r0, r0, #1
    cde0:	d00b      	beq.n	cdfa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cde2:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cde6:	1c40      	adds	r0, r0, #1
    cde8:	d007      	beq.n	cdfa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cdea:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cdee:	1c40      	adds	r0, r0, #1
    cdf0:	d003      	beq.n	cdfa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cdf2:	2000      	movs	r0, #0
    cdf4:	f7f8 fa72 	bl	52dc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cdf8:	b140      	cbz	r0, ce0c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    cdfa:	2210      	movs	r2, #16
    cdfc:	2100      	movs	r1, #0
    cdfe:	1de0      	adds	r0, r4, #7
    ce00:	f7ff fbb5 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce04:	2001      	movs	r0, #1
    ce06:	7020      	strb	r0, [r4, #0]
    ce08:	2000      	movs	r0, #0
    ce0a:	bd38      	pop	{r3, r4, r5, pc}
    ce0c:	f855 2f90 	ldr.w	r2, [r5, #144]!
    ce10:	6869      	ldr	r1, [r5, #4]
    ce12:	68a8      	ldr	r0, [r5, #8]
    ce14:	68eb      	ldr	r3, [r5, #12]
    ce16:	f8c4 2007 	str.w	r2, [r4, #7]
    ce1a:	f8c4 100b 	str.w	r1, [r4, #11]
    ce1e:	f8c4 000f 	str.w	r0, [r4, #15]
    ce22:	f8c4 3013 	str.w	r3, [r4, #19]
    ce26:	e7ed      	b.n	ce04 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    ce28:	2000      	movs	r0, #0
    ce2a:	e7ec      	b.n	ce06 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000ce2c <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    ce2c:	f002 bfeb 	b.w	fe06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000ce30 <sdc_hci_cmd_ip_read_bd_addr>:
    ce30:	f003 b8e7 	b.w	10002 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000ce34 <sdc_hci_cmd_ip_read_local_version_information>:
    ce34:	f7fd b920 	b.w	a078 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000ce38 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    ce38:	f002 bd87 	b.w	f94a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000ce3c <sdc_hci_cmd_le_clear_filter_accept_list>:
    ce3c:	f002 bd9c 	b.w	f978 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000ce40 <sdc_hci_cmd_le_encrypt>:
    ce40:	f002 bda4 	b.w	f98c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000ce44 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    ce44:	8802      	ldrh	r2, [r0, #0]
    ce46:	800a      	strh	r2, [r1, #0]
    ce48:	f002 bda9 	b.w	f99e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000ce4c <sdc_hci_cmd_le_long_term_key_request_reply>:
    ce4c:	8802      	ldrh	r2, [r0, #0]
    ce4e:	800a      	strh	r2, [r1, #0]
    ce50:	f002 bdbe 	b.w	f9d0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000ce54 <sdc_hci_cmd_le_rand>:
    ce54:	f002 bde6 	b.w	fa24 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000ce58 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    ce58:	f002 bdea 	b.w	fa30 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000ce5c <sdc_hci_cmd_le_read_buffer_size>:
    ce5c:	f7fd b806 	b.w	9e6c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000ce60 <sdc_hci_cmd_le_read_channel_map>:
    ce60:	f7fd b80e 	b.w	9e80 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000ce64 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    ce64:	f002 be1b 	b.w	fa9e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000ce68 <sdc_hci_cmd_le_read_max_data_length>:
    ce68:	f002 bdeb 	b.w	fa42 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000ce6c <sdc_hci_cmd_le_read_phy>:
    ce6c:	f7fd b830 	b.w	9ed0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000ce70 <sdc_hci_cmd_le_read_remote_features>:
    ce70:	f002 bdf0 	b.w	fa54 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000ce74 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    ce74:	f7fd b852 	b.w	9f1c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000ce78 <sdc_hci_cmd_le_read_transmit_power>:
    ce78:	f002 be08 	b.w	fa8c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000ce7c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    ce7c:	f002 be13 	b.w	faa6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000ce80 <sdc_hci_cmd_le_set_adv_data>:
    ce80:	f002 be26 	b.w	fad0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000ce84 <sdc_hci_cmd_le_set_adv_enable>:
    ce84:	f002 be39 	b.w	fafa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000ce88 <sdc_hci_cmd_le_set_adv_params>:
    ce88:	f002 be6a 	b.w	fb60 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000ce8c <sdc_hci_cmd_le_set_data_length>:
    ce8c:	f002 befd 	b.w	fc8a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000ce90 <sdc_hci_cmd_le_set_data_related_address_changes>:
    ce90:	f002 bf1b 	b.w	fcca <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000ce94 <sdc_hci_cmd_le_set_default_phy>:
    ce94:	f7fd b84c 	b.w	9f30 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000ce98 <sdc_hci_cmd_le_set_event_mask>:
    ce98:	b510      	push	{r4, lr}
    ce9a:	f7f7 fcf1 	bl	4880 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    ce9e:	2000      	movs	r0, #0
    cea0:	bd10      	pop	{r4, pc}

0000cea2 <sdc_hci_cmd_le_set_phy>:
    cea2:	f002 bf1f 	b.w	fce4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cea6 <sdc_hci_cmd_le_set_random_address>:
    cea6:	f002 bf36 	b.w	fd16 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000ceaa <sdc_hci_cmd_le_set_scan_response_data>:
    ceaa:	f002 bf42 	b.w	fd32 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000ceae <sdc_hci_cmd_le_write_suggested_default_data_length>:
    ceae:	f002 bf55 	b.w	fd5c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000ceb2 <sdc_hci_cmd_lc_disconnect>:
    ceb2:	f002 bcfc 	b.w	f8ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000ceb6 <sdc_hci_cmd_lc_read_remote_version_information>:
    ceb6:	f003 b8b0 	b.w	1001a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    ceba:	b570      	push	{r4, r5, r6, lr}
    cebc:	880b      	ldrh	r3, [r1, #0]
    cebe:	7cc4      	ldrb	r4, [r0, #19]
    cec0:	f100 0518 	add.w	r5, r0, #24
    cec4:	f3c3 060e 	ubfx	r6, r3, #0, #15
    cec8:	8802      	ldrh	r2, [r0, #0]
    ceca:	4435      	add	r5, r6
    cecc:	1d64      	adds	r4, r4, #5
    cece:	882d      	ldrh	r5, [r5, #0]
    ced0:	4422      	add	r2, r4
    ced2:	b292      	uxth	r2, r2
    ced4:	4425      	add	r5, r4
    ced6:	1e54      	subs	r4, r2, #1
    ced8:	442c      	add	r4, r5
    ceda:	fb94 f4f2 	sdiv	r4, r4, r2
    cede:	fb02 6204 	mla	r2, r2, r4, r6
    cee2:	8840      	ldrh	r0, [r0, #2]
    cee4:	b292      	uxth	r2, r2
    cee6:	4290      	cmp	r0, r2
    cee8:	d903      	bls.n	cef2 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    ceea:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    ceee:	4310      	orrs	r0, r2
    cef0:	e002      	b.n	cef8 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cef2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cef6:	4398      	bics	r0, r3
    cef8:	8008      	strh	r0, [r1, #0]
    cefa:	bd70      	pop	{r4, r5, r6, pc}
    cefc:	0442      	lsls	r2, r0, #17
    cefe:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    cf02:	d107      	bne.n	cf14 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cf04:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    cf08:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cf0c:	4288      	cmp	r0, r1
    cf0e:	d001      	beq.n	cf14 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cf10:	2001      	movs	r0, #1
    cf12:	4770      	bx	lr
    cf14:	2000      	movs	r0, #0
    cf16:	4770      	bx	lr

0000cf18 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cf18:	8881      	ldrh	r1, [r0, #4]
    cf1a:	88c0      	ldrh	r0, [r0, #6]
    cf1c:	4288      	cmp	r0, r1
    cf1e:	d101      	bne.n	cf24 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cf20:	2001      	movs	r0, #1
    cf22:	4770      	bx	lr
    cf24:	2000      	movs	r0, #0
    cf26:	4770      	bx	lr

0000cf28 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf2c:	460f      	mov	r7, r1
    cf2e:	4604      	mov	r4, r0
    cf30:	f100 0118 	add.w	r1, r0, #24
    cf34:	8880      	ldrh	r0, [r0, #4]
    cf36:	2600      	movs	r6, #0
    cf38:	f3c0 000e 	ubfx	r0, r0, #0, #15
    cf3c:	1845      	adds	r5, r0, r1
    cf3e:	603e      	str	r6, [r7, #0]
    cf40:	89e0      	ldrh	r0, [r4, #14]
    cf42:	2800      	cmp	r0, #0
    cf44:	d016      	beq.n	cf74 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cf46:	8961      	ldrh	r1, [r4, #10]
    cf48:	4408      	add	r0, r1
    cf4a:	b280      	uxth	r0, r0
    cf4c:	8160      	strh	r0, [r4, #10]
    cf4e:	8829      	ldrh	r1, [r5, #0]
    cf50:	4288      	cmp	r0, r1
    cf52:	d905      	bls.n	cf60 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    cf54:	f44f 71a9 	mov.w	r1, #338	; 0x152
    cf58:	f04f 0014 	mov.w	r0, #20
    cf5c:	f7f7 faf6 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf60:	d106      	bne.n	cf70 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cf62:	f104 0104 	add.w	r1, r4, #4
    cf66:	4620      	mov	r0, r4
    cf68:	f7ff ffa7 	bl	ceba <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cf6c:	8166      	strh	r6, [r4, #10]
    cf6e:	603d      	str	r5, [r7, #0]
    cf70:	81e6      	strh	r6, [r4, #14]
    cf72:	2001      	movs	r0, #1
    cf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cf78 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf7c:	4604      	mov	r4, r0
    cf7e:	f100 0318 	add.w	r3, r0, #24
    cf82:	88c0      	ldrh	r0, [r0, #6]
    cf84:	460e      	mov	r6, r1
    cf86:	f3c0 070e 	ubfx	r7, r0, #0, #15
    cf8a:	8a20      	ldrh	r0, [r4, #16]
    cf8c:	19d9      	adds	r1, r3, r7
    cf8e:	b108      	cbz	r0, cf94 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cf90:	42b0      	cmp	r0, r6
    cf92:	d202      	bcs.n	cf9a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cf94:	2000      	movs	r0, #0
    cf96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf9a:	89a0      	ldrh	r0, [r4, #12]
    cf9c:	2500      	movs	r5, #0
    cf9e:	b140      	cbz	r0, cfb2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    cfa0:	f8b1 c000 	ldrh.w	ip, [r1]
    cfa4:	4560      	cmp	r0, ip
    cfa6:	d006      	beq.n	cfb6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    cfa8:	f240 2105 	movw	r1, #517	; 0x205
    cfac:	2014      	movs	r0, #20
    cfae:	f7f7 facd 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfb2:	800d      	strh	r5, [r1, #0]
    cfb4:	e00e      	b.n	cfd4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    cfb6:	f894 c013 	ldrb.w	ip, [r4, #19]
    cfba:	4418      	add	r0, r3
    cfbc:	f10c 0c05 	add.w	ip, ip, #5
    cfc0:	44bc      	add	ip, r7
    cfc2:	4460      	add	r0, ip
    cfc4:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    cfc8:	f820 cc03 	strh.w	ip, [r0, #-3]
    cfcc:	f894 c016 	ldrb.w	ip, [r4, #22]
    cfd0:	f800 cc01 	strb.w	ip, [r0, #-1]
    cfd4:	89a0      	ldrh	r0, [r4, #12]
    cfd6:	4430      	add	r0, r6
    cfd8:	81a0      	strh	r0, [r4, #12]
    cfda:	8808      	ldrh	r0, [r1, #0]
    cfdc:	4430      	add	r0, r6
    cfde:	8008      	strh	r0, [r1, #0]
    cfe0:	b12a      	cbz	r2, cfee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    cfe2:	1da1      	adds	r1, r4, #6
    cfe4:	4620      	mov	r0, r4
    cfe6:	f7ff ff68 	bl	ceba <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cfea:	81a5      	strh	r5, [r4, #12]
    cfec:	e00a      	b.n	d004 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    cfee:	7ce0      	ldrb	r0, [r4, #19]
    cff0:	89a1      	ldrh	r1, [r4, #12]
    cff2:	1d40      	adds	r0, r0, #5
    cff4:	4438      	add	r0, r7
    cff6:	4419      	add	r1, r3
    cff8:	4408      	add	r0, r1
    cffa:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cffe:	82a1      	strh	r1, [r4, #20]
    d000:	7880      	ldrb	r0, [r0, #2]
    d002:	75a0      	strb	r0, [r4, #22]
    d004:	8225      	strh	r5, [r4, #16]
    d006:	2001      	movs	r0, #1
    d008:	e7c5      	b.n	cf96 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d00a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d00a:	1c80      	adds	r0, r0, #2
    d00c:	4770      	bx	lr

0000d00e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d00e:	b510      	push	{r4, lr}
    d010:	4604      	mov	r4, r0
    d012:	88c0      	ldrh	r0, [r0, #6]
    d014:	88a1      	ldrh	r1, [r4, #4]
    d016:	4281      	cmp	r1, r0
    d018:	d003      	beq.n	d022 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d01a:	8960      	ldrh	r0, [r4, #10]
    d01c:	b908      	cbnz	r0, d022 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d01e:	89e0      	ldrh	r0, [r4, #14]
    d020:	b108      	cbz	r0, d026 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d022:	2000      	movs	r0, #0
    d024:	bd10      	pop	{r4, pc}
    d026:	1d21      	adds	r1, r4, #4
    d028:	4620      	mov	r0, r4
    d02a:	f7ff ff46 	bl	ceba <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d02e:	2000      	movs	r0, #0
    d030:	81e0      	strh	r0, [r4, #14]
    d032:	2001      	movs	r0, #1
    d034:	bd10      	pop	{r4, pc}

0000d036 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d036:	b510      	push	{r4, lr}
    d038:	4604      	mov	r4, r0
    d03a:	f100 0218 	add.w	r2, r0, #24
    d03e:	88c0      	ldrh	r0, [r0, #6]
    d040:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d044:	4402      	add	r2, r0
    d046:	8820      	ldrh	r0, [r4, #0]
    d048:	2845      	cmp	r0, #69	; 0x45
    d04a:	d200      	bcs.n	d04e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d04c:	2045      	movs	r0, #69	; 0x45
    d04e:	4288      	cmp	r0, r1
    d050:	d204      	bcs.n	d05c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d052:	f240 1105 	movw	r1, #261	; 0x105
    d056:	2014      	movs	r0, #20
    d058:	f7f7 fa78 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d05c:	7ca0      	ldrb	r0, [r4, #18]
    d05e:	2800      	cmp	r0, #0
    d060:	d003      	beq.n	d06a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d062:	8810      	ldrh	r0, [r2, #0]
    d064:	4288      	cmp	r0, r1
    d066:	d201      	bcs.n	d06c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d068:	2000      	movs	r0, #0
    d06a:	bd10      	pop	{r4, pc}
    d06c:	8011      	strh	r1, [r2, #0]
    d06e:	1da1      	adds	r1, r4, #6
    d070:	4620      	mov	r0, r4
    d072:	f7ff ff22 	bl	ceba <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d076:	2000      	movs	r0, #0
    d078:	74a0      	strb	r0, [r4, #18]
    d07a:	2001      	movs	r0, #1
    d07c:	bd10      	pop	{r4, pc}

0000d07e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d07e:	b510      	push	{r4, lr}
    d080:	88c4      	ldrh	r4, [r0, #6]
    d082:	8883      	ldrh	r3, [r0, #4]
    d084:	4601      	mov	r1, r0
    d086:	f100 0218 	add.w	r2, r0, #24
    d08a:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d08e:	4410      	add	r0, r2
    d090:	42a3      	cmp	r3, r4
    d092:	d002      	beq.n	d09a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d094:	8949      	ldrh	r1, [r1, #10]
    d096:	2900      	cmp	r1, #0
    d098:	d000      	beq.n	d09c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d09a:	2000      	movs	r0, #0
    d09c:	bd10      	pop	{r4, pc}

0000d09e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d09e:	8803      	ldrh	r3, [r0, #0]
    d0a0:	2b45      	cmp	r3, #69	; 0x45
    d0a2:	d200      	bcs.n	d0a6 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d0a4:	2345      	movs	r3, #69	; 0x45
    d0a6:	8013      	strh	r3, [r2, #0]
    d0a8:	88c2      	ldrh	r2, [r0, #6]
    d0aa:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d0ae:	f100 0218 	add.w	r2, r0, #24
    d0b2:	441a      	add	r2, r3
    d0b4:	600a      	str	r2, [r1, #0]
    d0b6:	8980      	ldrh	r0, [r0, #12]
    d0b8:	4770      	bx	lr

0000d0ba <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d0ba:	7cc0      	ldrb	r0, [r0, #19]
    d0bc:	1d40      	adds	r0, r0, #5
    d0be:	4408      	add	r0, r1
    d0c0:	1ec0      	subs	r0, r0, #3
    d0c2:	6010      	str	r0, [r2, #0]
    d0c4:	8808      	ldrh	r0, [r1, #0]
    d0c6:	4770      	bx	lr

0000d0c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0cc:	460e      	mov	r6, r1
    d0ce:	88c1      	ldrh	r1, [r0, #6]
    d0d0:	8902      	ldrh	r2, [r0, #8]
    d0d2:	4604      	mov	r4, r0
    d0d4:	f100 0818 	add.w	r8, r0, #24
    d0d8:	8800      	ldrh	r0, [r0, #0]
    d0da:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d0de:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d0e2:	2845      	cmp	r0, #69	; 0x45
    d0e4:	d200      	bcs.n	d0e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d0e6:	2045      	movs	r0, #69	; 0x45
    d0e8:	42b0      	cmp	r0, r6
    d0ea:	d203      	bcs.n	d0f4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d0ec:	21c7      	movs	r1, #199	; 0xc7
    d0ee:	2014      	movs	r0, #20
    d0f0:	f7f7 fa2c 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0f4:	4610      	mov	r0, r2
    d0f6:	f7ff ff01 	bl	cefc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d0fa:	b110      	cbz	r0, d102 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d0fc:	2000      	movs	r0, #0
    d0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d102:	42af      	cmp	r7, r5
    d104:	d908      	bls.n	d118 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d106:	7ce1      	ldrb	r1, [r4, #19]
    d108:	1b78      	subs	r0, r7, r5
    d10a:	1a40      	subs	r0, r0, r1
    d10c:	1f40      	subs	r0, r0, #5
    d10e:	4286      	cmp	r6, r0
    d110:	dd02      	ble.n	d118 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d112:	2000      	movs	r0, #0
    d114:	74a0      	strb	r0, [r4, #18]
    d116:	e7f1      	b.n	d0fc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d118:	eb08 0005 	add.w	r0, r8, r5
    d11c:	2101      	movs	r1, #1
    d11e:	8006      	strh	r6, [r0, #0]
    d120:	74a1      	strb	r1, [r4, #18]
    d122:	e7ec      	b.n	d0fe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d124 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d124:	b538      	push	{r3, r4, r5, lr}
    d126:	88c4      	ldrh	r4, [r0, #6]
    d128:	8881      	ldrh	r1, [r0, #4]
    d12a:	f100 0218 	add.w	r2, r0, #24
    d12e:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d132:	441a      	add	r2, r3
    d134:	42a1      	cmp	r1, r4
    d136:	d010      	beq.n	d15a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d138:	8943      	ldrh	r3, [r0, #10]
    d13a:	89c5      	ldrh	r5, [r0, #14]
    d13c:	8812      	ldrh	r2, [r2, #0]
    d13e:	442b      	add	r3, r5
    d140:	4293      	cmp	r3, r2
    d142:	d308      	bcc.n	d156 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d144:	f8ad 1000 	strh.w	r1, [sp]
    d148:	4669      	mov	r1, sp
    d14a:	f7ff feb6 	bl	ceba <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d14e:	f8bd 0000 	ldrh.w	r0, [sp]
    d152:	42a0      	cmp	r0, r4
    d154:	d001      	beq.n	d15a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d156:	2001      	movs	r0, #1
    d158:	bd38      	pop	{r3, r4, r5, pc}
    d15a:	2000      	movs	r0, #0
    d15c:	bd38      	pop	{r3, r4, r5, pc}

0000d15e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d15e:	b570      	push	{r4, r5, r6, lr}
    d160:	88c6      	ldrh	r6, [r0, #6]
    d162:	8885      	ldrh	r5, [r0, #4]
    d164:	4603      	mov	r3, r0
    d166:	f100 0418 	add.w	r4, r0, #24
    d16a:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d16e:	4420      	add	r0, r4
    d170:	42b5      	cmp	r5, r6
    d172:	d102      	bne.n	d17a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d174:	2000      	movs	r0, #0
    d176:	81d8      	strh	r0, [r3, #14]
    d178:	bd70      	pop	{r4, r5, r6, pc}
    d17a:	8804      	ldrh	r4, [r0, #0]
    d17c:	895d      	ldrh	r5, [r3, #10]
    d17e:	7cde      	ldrb	r6, [r3, #19]
    d180:	1b64      	subs	r4, r4, r5
    d182:	4435      	add	r5, r6
    d184:	4428      	add	r0, r5
    d186:	880d      	ldrh	r5, [r1, #0]
    d188:	b2a4      	uxth	r4, r4
    d18a:	1c80      	adds	r0, r0, #2
    d18c:	42a5      	cmp	r5, r4
    d18e:	d900      	bls.n	d192 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d190:	800c      	strh	r4, [r1, #0]
    d192:	895c      	ldrh	r4, [r3, #10]
    d194:	b124      	cbz	r4, d1a0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d196:	2400      	movs	r4, #0
    d198:	7014      	strb	r4, [r2, #0]
    d19a:	8809      	ldrh	r1, [r1, #0]
    d19c:	81d9      	strh	r1, [r3, #14]
    d19e:	bd70      	pop	{r4, r5, r6, pc}
    d1a0:	2401      	movs	r4, #1
    d1a2:	e7f9      	b.n	d198 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d1a4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1a8:	461d      	mov	r5, r3
    d1aa:	4616      	mov	r6, r2
    d1ac:	9f06      	ldr	r7, [sp, #24]
    d1ae:	460b      	mov	r3, r1
    d1b0:	4604      	mov	r4, r0
    d1b2:	463a      	mov	r2, r7
    d1b4:	4629      	mov	r1, r5
    d1b6:	4630      	mov	r0, r6
    d1b8:	f000 f839 	bl	d22e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d1bc:	4283      	cmp	r3, r0
    d1be:	d201      	bcs.n	d1c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d1c0:	219f      	movs	r1, #159	; 0x9f
    d1c2:	e012      	b.n	d1ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d1c4:	07a0      	lsls	r0, r4, #30
    d1c6:	d001      	beq.n	d1cc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d1c8:	21a0      	movs	r1, #160	; 0xa0
    d1ca:	e00e      	b.n	d1ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d1cc:	2218      	movs	r2, #24
    d1ce:	2100      	movs	r1, #0
    d1d0:	4620      	mov	r0, r4
    d1d2:	f7ff f9cc 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1d6:	19a8      	adds	r0, r5, r6
    d1d8:	1d40      	adds	r0, r0, #5
    d1da:	4378      	muls	r0, r7
    d1dc:	b280      	uxth	r0, r0
    d1de:	74e5      	strb	r5, [r4, #19]
    d1e0:	8060      	strh	r0, [r4, #2]
    d1e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d1e6:	d903      	bls.n	d1f0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d1e8:	21a5      	movs	r1, #165	; 0xa5
    d1ea:	2014      	movs	r0, #20
    d1ec:	f7f7 f9ae 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1f0:	8026      	strh	r6, [r4, #0]
    d1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d1f6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d1f6:	b570      	push	{r4, r5, r6, lr}
    d1f8:	460b      	mov	r3, r1
    d1fa:	4604      	mov	r4, r0
    d1fc:	f100 0118 	add.w	r1, r0, #24
    d200:	8902      	ldrh	r2, [r0, #8]
    d202:	8880      	ldrh	r0, [r0, #4]
    d204:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d208:	440d      	add	r5, r1
    d20a:	4282      	cmp	r2, r0
    d20c:	d101      	bne.n	d212 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d20e:	2000      	movs	r0, #0
    d210:	bd70      	pop	{r4, r5, r6, pc}
    d212:	b123      	cbz	r3, d21e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d214:	7ce2      	ldrb	r2, [r4, #19]
    d216:	1ca9      	adds	r1, r5, #2
    d218:	4618      	mov	r0, r3
    d21a:	f7ff f92e 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d21e:	882d      	ldrh	r5, [r5, #0]
    d220:	f104 0108 	add.w	r1, r4, #8
    d224:	4620      	mov	r0, r4
    d226:	f7ff fe48 	bl	ceba <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d22a:	4628      	mov	r0, r5
    d22c:	bd70      	pop	{r4, r5, r6, pc}

0000d22e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d22e:	4401      	add	r1, r0
    d230:	1d49      	adds	r1, r1, #5
    d232:	4351      	muls	r1, r2
    d234:	b28a      	uxth	r2, r1
    d236:	2100      	movs	r1, #0
    d238:	2845      	cmp	r0, #69	; 0x45
    d23a:	d202      	bcs.n	d242 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d23c:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d240:	b281      	uxth	r1, r0
    d242:	3218      	adds	r2, #24
    d244:	1850      	adds	r0, r2, r1
    d246:	b280      	uxth	r0, r0
    d248:	4770      	bx	lr

0000d24a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d24a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d24e:	4688      	mov	r8, r1
    d250:	88c1      	ldrh	r1, [r0, #6]
    d252:	4604      	mov	r4, r0
    d254:	8900      	ldrh	r0, [r0, #8]
    d256:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d25a:	f104 0518 	add.w	r5, r4, #24
    d25e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d262:	eb05 0906 	add.w	r9, r5, r6
    d266:	f7ff fe49 	bl	cefc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d26a:	2200      	movs	r2, #0
    d26c:	b998      	cbnz	r0, d296 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d26e:	8820      	ldrh	r0, [r4, #0]
    d270:	2845      	cmp	r0, #69	; 0x45
    d272:	d200      	bcs.n	d276 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d274:	2045      	movs	r0, #69	; 0x45
    d276:	42b7      	cmp	r7, r6
    d278:	d906      	bls.n	d288 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d27a:	7ce3      	ldrb	r3, [r4, #19]
    d27c:	1bb9      	subs	r1, r7, r6
    d27e:	1ac9      	subs	r1, r1, r3
    d280:	1f49      	subs	r1, r1, #5
    d282:	4281      	cmp	r1, r0
    d284:	da00      	bge.n	d288 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d286:	4608      	mov	r0, r1
    d288:	89a1      	ldrh	r1, [r4, #12]
    d28a:	b111      	cbz	r1, d292 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d28c:	f8b9 3000 	ldrh.w	r3, [r9]
    d290:	1ac0      	subs	r0, r0, r3
    d292:	4540      	cmp	r0, r8
    d294:	da03      	bge.n	d29e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d296:	8222      	strh	r2, [r4, #16]
    d298:	2000      	movs	r0, #0
    d29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d29e:	7ce0      	ldrb	r0, [r4, #19]
    d2a0:	4429      	add	r1, r5
    d2a2:	1d40      	adds	r0, r0, #5
    d2a4:	4430      	add	r0, r6
    d2a6:	4408      	add	r0, r1
    d2a8:	f8a4 8010 	strh.w	r8, [r4, #16]
    d2ac:	1ec0      	subs	r0, r0, #3
    d2ae:	e7f4      	b.n	d29a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d2b0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d2b0:	2100      	movs	r1, #0
    d2b2:	8181      	strh	r1, [r0, #12]
    d2b4:	8201      	strh	r1, [r0, #16]
    d2b6:	4770      	bx	lr

0000d2b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d2b8:	b570      	push	{r4, r5, r6, lr}
    d2ba:	2300      	movs	r3, #0
    d2bc:	f1a1 0208 	sub.w	r2, r1, #8
    d2c0:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d2c4:	42a2      	cmp	r2, r4
    d2c6:	d304      	bcc.n	d2d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d2c8:	f240 11cd 	movw	r1, #461	; 0x1cd
    d2cc:	2015      	movs	r0, #21
    d2ce:	f7f7 f93d 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2d2:	6802      	ldr	r2, [r0, #0]
    d2d4:	b90a      	cbnz	r2, d2da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d2d6:	e01e      	b.n	d316 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d2d8:	4610      	mov	r0, r2
    d2da:	6802      	ldr	r2, [r0, #0]
    d2dc:	8893      	ldrh	r3, [r2, #4]
    d2de:	428b      	cmp	r3, r1
    d2e0:	d002      	beq.n	d2e8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d2e2:	6813      	ldr	r3, [r2, #0]
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d1f7      	bne.n	d2d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d2e8:	8894      	ldrh	r4, [r2, #4]
    d2ea:	4613      	mov	r3, r2
    d2ec:	428c      	cmp	r4, r1
    d2ee:	d101      	bne.n	d2f4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d2f0:	6811      	ldr	r1, [r2, #0]
    d2f2:	e00d      	b.n	d310 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d2f4:	f101 0508 	add.w	r5, r1, #8
    d2f8:	b2ae      	uxth	r6, r5
    d2fa:	2500      	movs	r5, #0
    d2fc:	42b4      	cmp	r4, r6
    d2fe:	d309      	bcc.n	d314 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d300:	1a64      	subs	r4, r4, r1
    d302:	4411      	add	r1, r2
    d304:	600d      	str	r5, [r1, #0]
    d306:	808c      	strh	r4, [r1, #4]
    d308:	6802      	ldr	r2, [r0, #0]
    d30a:	6812      	ldr	r2, [r2, #0]
    d30c:	6002      	str	r2, [r0, #0]
    d30e:	600a      	str	r2, [r1, #0]
    d310:	6001      	str	r1, [r0, #0]
    d312:	e000      	b.n	d316 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d314:	2300      	movs	r3, #0
    d316:	4618      	mov	r0, r3
    d318:	bd70      	pop	{r4, r5, r6, pc}

0000d31a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d31a:	b510      	push	{r4, lr}
    d31c:	000c      	movs	r4, r1
    d31e:	d004      	beq.n	d32a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d320:	2c08      	cmp	r4, #8
    d322:	d207      	bcs.n	d334 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d324:	f240 1195 	movw	r1, #405	; 0x195
    d328:	e00a      	b.n	d340 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d32a:	b108      	cbz	r0, d330 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d32c:	2100      	movs	r1, #0
    d32e:	6001      	str	r1, [r0, #0]
    d330:	2000      	movs	r0, #0
    d332:	bd10      	pop	{r4, pc}
    d334:	b158      	cbz	r0, d34e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d336:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d33a:	d304      	bcc.n	d346 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d33c:	f240 11a7 	movw	r1, #423	; 0x1a7
    d340:	2015      	movs	r0, #21
    d342:	f7f7 f903 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d346:	b2a1      	uxth	r1, r4
    d348:	6800      	ldr	r0, [r0, #0]
    d34a:	f000 f814 	bl	d376 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d34e:	1d20      	adds	r0, r4, #4
    d350:	bd10      	pop	{r4, pc}

0000d352 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d352:	2100      	movs	r1, #0
    d354:	6802      	ldr	r2, [r0, #0]
    d356:	e003      	b.n	d360 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d358:	8893      	ldrh	r3, [r2, #4]
    d35a:	6812      	ldr	r2, [r2, #0]
    d35c:	4419      	add	r1, r3
    d35e:	b289      	uxth	r1, r1
    d360:	2a00      	cmp	r2, #0
    d362:	d1f9      	bne.n	d358 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d364:	f000 b807 	b.w	d376 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d368 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d368:	2300      	movs	r3, #0
    d36a:	600b      	str	r3, [r1, #0]
    d36c:	808a      	strh	r2, [r1, #4]
    d36e:	6802      	ldr	r2, [r0, #0]
    d370:	600a      	str	r2, [r1, #0]
    d372:	6001      	str	r1, [r0, #0]
    d374:	4770      	bx	lr
    d376:	2300      	movs	r3, #0
    d378:	6043      	str	r3, [r0, #4]
    d37a:	1d02      	adds	r2, r0, #4
    d37c:	8101      	strh	r1, [r0, #8]
    d37e:	6002      	str	r2, [r0, #0]
    d380:	4770      	bx	lr

0000d382 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d382:	b51c      	push	{r2, r3, r4, lr}
    d384:	4604      	mov	r4, r0
    d386:	2000      	movs	r0, #0
    d388:	9001      	str	r0, [sp, #4]
    d38a:	9000      	str	r0, [sp, #0]
    d38c:	f88d 4006 	strb.w	r4, [sp, #6]
    d390:	e00a      	b.n	d3a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d392:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d396:	4621      	mov	r1, r4
    d398:	f7f7 fb5a 	bl	4a50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d39c:	b120      	cbz	r0, d3a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d39e:	f240 21a5 	movw	r1, #677	; 0x2a5
    d3a2:	2017      	movs	r0, #23
    d3a4:	f7f7 f8d2 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3a8:	4668      	mov	r0, sp
    d3aa:	f7f7 fb09 	bl	49c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d3ae:	2800      	cmp	r0, #0
    d3b0:	d0ef      	beq.n	d392 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d3b2:	bd1c      	pop	{r2, r3, r4, pc}

0000d3b4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d3b4:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d3b8:	3aff      	subs	r2, #255	; 0xff
    d3ba:	d001      	beq.n	d3c0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d3bc:	2902      	cmp	r1, #2
    d3be:	d301      	bcc.n	d3c4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d3c0:	2000      	movs	r0, #0
    d3c2:	4770      	bx	lr
    d3c4:	f7f7 bb76 	b.w	4ab4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d3c8:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d3cc:	3aff      	subs	r2, #255	; 0xff
    d3ce:	d001      	beq.n	d3d4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d3d0:	2902      	cmp	r1, #2
    d3d2:	d301      	bcc.n	d3d8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d3d4:	2000      	movs	r0, #0
    d3d6:	4770      	bx	lr
    d3d8:	f7f7 bb94 	b.w	4b04 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d3dc:	b510      	push	{r4, lr}
    d3de:	4604      	mov	r4, r0
    d3e0:	f7f7 fbdc 	bl	4b9c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d3e4:	42a0      	cmp	r0, r4
    d3e6:	d901      	bls.n	d3ec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    d3e8:	2001      	movs	r0, #1
    d3ea:	bd10      	pop	{r4, pc}
    d3ec:	2000      	movs	r0, #0
    d3ee:	bd10      	pop	{r4, pc}

0000d3f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d3f0:	b570      	push	{r4, r5, r6, lr}
    d3f2:	460e      	mov	r6, r1
    d3f4:	461d      	mov	r5, r3
    d3f6:	4611      	mov	r1, r2
    d3f8:	f000 f813 	bl	d422 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d3fc:	4604      	mov	r4, r0
    d3fe:	4629      	mov	r1, r5
    d400:	4630      	mov	r0, r6
    d402:	f000 f804 	bl	d40e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d406:	4420      	add	r0, r4
    d408:	1d00      	adds	r0, r0, #4
    d40a:	b280      	uxth	r0, r0
    d40c:	bd70      	pop	{r4, r5, r6, pc}
    d40e:	b510      	push	{r4, lr}
    d410:	460a      	mov	r2, r1
    d412:	2109      	movs	r1, #9
    d414:	f7ff ff0b 	bl	d22e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d418:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d41c:	1cc0      	adds	r0, r0, #3
    d41e:	4008      	ands	r0, r1
    d420:	bd10      	pop	{r4, pc}
    d422:	b510      	push	{r4, lr}
    d424:	460a      	mov	r2, r1
    d426:	210a      	movs	r1, #10
    d428:	f7ff ff01 	bl	d22e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d42c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d430:	1cc0      	adds	r0, r0, #3
    d432:	4008      	ands	r0, r1
    d434:	bd10      	pop	{r4, pc}
    d436:	b109      	cbz	r1, d43c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d438:	2100      	movs	r1, #0
    d43a:	e000      	b.n	d43e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d43c:	2102      	movs	r1, #2
    d43e:	1843      	adds	r3, r0, r1
    d440:	7d1a      	ldrb	r2, [r3, #20]
    d442:	2a02      	cmp	r2, #2
    d444:	d008      	beq.n	d458 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d446:	7d5b      	ldrb	r3, [r3, #21]
    d448:	2b02      	cmp	r3, #2
    d44a:	d009      	beq.n	d460 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d44c:	2a03      	cmp	r2, #3
    d44e:	d003      	beq.n	d458 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d450:	2b03      	cmp	r3, #3
    d452:	d005      	beq.n	d460 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d454:	2000      	movs	r0, #0
    d456:	4770      	bx	lr
    d458:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d45c:	8b00      	ldrh	r0, [r0, #24]
    d45e:	4770      	bx	lr
    d460:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d464:	8b40      	ldrh	r0, [r0, #26]
    d466:	4770      	bx	lr
    d468:	b109      	cbz	r1, d46e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d46a:	2100      	movs	r1, #0
    d46c:	e000      	b.n	d470 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d46e:	2102      	movs	r1, #2
    d470:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d474:	8b01      	ldrh	r1, [r0, #24]
    d476:	b911      	cbnz	r1, d47e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d478:	8b40      	ldrh	r0, [r0, #26]
    d47a:	2800      	cmp	r0, #0
    d47c:	d000      	beq.n	d480 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d47e:	2001      	movs	r0, #1
    d480:	4770      	bx	lr
    d482:	b538      	push	{r3, r4, r5, lr}
    d484:	7883      	ldrb	r3, [r0, #2]
    d486:	f88d 3000 	strb.w	r3, [sp]
    d48a:	9b00      	ldr	r3, [sp, #0]
    d48c:	9300      	str	r3, [sp, #0]
    d48e:	f89d 3000 	ldrb.w	r3, [sp]
    d492:	b95b      	cbnz	r3, d4ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d494:	2400      	movs	r4, #0
    d496:	b10a      	cbz	r2, d49c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d498:	2300      	movs	r3, #0
    d49a:	e000      	b.n	d49e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d49c:	2302      	movs	r3, #2
    d49e:	18c2      	adds	r2, r0, r3
    d4a0:	7d15      	ldrb	r5, [r2, #20]
    d4a2:	2d02      	cmp	r5, #2
    d4a4:	d004      	beq.n	d4b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d4a6:	7d52      	ldrb	r2, [r2, #21]
    d4a8:	2a02      	cmp	r2, #2
    d4aa:	d004      	beq.n	d4b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d4ac:	2000      	movs	r0, #0
    d4ae:	bd38      	pop	{r3, r4, r5, pc}
    d4b0:	461a      	mov	r2, r3
    d4b2:	1c5b      	adds	r3, r3, #1
    d4b4:	e000      	b.n	d4b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d4b6:	1c5a      	adds	r2, r3, #1
    d4b8:	b179      	cbz	r1, d4da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d4ba:	18c5      	adds	r5, r0, r3
    d4bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d4c0:	752c      	strb	r4, [r5, #20]
    d4c2:	831c      	strh	r4, [r3, #24]
    d4c4:	2303      	movs	r3, #3
    d4c6:	1884      	adds	r4, r0, r2
    d4c8:	7523      	strb	r3, [r4, #20]
    d4ca:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d4ce:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d4d2:	685b      	ldr	r3, [r3, #4]
    d4d4:	600b      	str	r3, [r1, #0]
    d4d6:	8b00      	ldrh	r0, [r0, #24]
    d4d8:	8088      	strh	r0, [r1, #4]
    d4da:	2001      	movs	r0, #1
    d4dc:	bd38      	pop	{r3, r4, r5, pc}
    d4de:	b510      	push	{r4, lr}
    d4e0:	b109      	cbz	r1, d4e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d4e2:	2100      	movs	r1, #0
    d4e4:	e000      	b.n	d4e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d4e6:	2102      	movs	r1, #2
    d4e8:	1843      	adds	r3, r0, r1
    d4ea:	7d1c      	ldrb	r4, [r3, #20]
    d4ec:	4294      	cmp	r4, r2
    d4ee:	d103      	bne.n	d4f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d4f0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d4f4:	8b00      	ldrh	r0, [r0, #24]
    d4f6:	bd10      	pop	{r4, pc}
    d4f8:	7d5b      	ldrb	r3, [r3, #21]
    d4fa:	4293      	cmp	r3, r2
    d4fc:	d103      	bne.n	d506 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d4fe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d502:	8b40      	ldrh	r0, [r0, #26]
    d504:	bd10      	pop	{r4, pc}
    d506:	2000      	movs	r0, #0
    d508:	bd10      	pop	{r4, pc}
    d50a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d50e:	d201      	bcs.n	d514 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d510:	0841      	lsrs	r1, r0, #1
    d512:	e000      	b.n	d516 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d514:	21ff      	movs	r1, #255	; 0xff
    d516:	1a40      	subs	r0, r0, r1
    d518:	f240 6172 	movw	r1, #1650	; 0x672
    d51c:	4288      	cmp	r0, r1
    d51e:	db00      	blt.n	d522 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d520:	4608      	mov	r0, r1
    d522:	b280      	uxth	r0, r0
    d524:	4770      	bx	lr

0000d526 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d526:	2101      	movs	r1, #1
    d528:	f7ff bf85 	b.w	d436 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d52c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d530:	4606      	mov	r6, r0
    d532:	f342 0780 	sbfx	r7, r2, #2, #1
    d536:	7848      	ldrb	r0, [r1, #1]
    d538:	460c      	mov	r4, r1
    d53a:	f022 0504 	bic.w	r5, r2, #4
    d53e:	1c7f      	adds	r7, r7, #1
    d540:	b100      	cbz	r0, d544 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d542:	b90d      	cbnz	r5, d548 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d544:	4328      	orrs	r0, r5
    d546:	d104      	bne.n	d552 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d548:	b145      	cbz	r5, d55c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d54a:	2100      	movs	r1, #0
    d54c:	4620      	mov	r0, r4
    d54e:	f7f7 fc23 	bl	4d98 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d552:	20ff      	movs	r0, #255	; 0xff
    d554:	70a0      	strb	r0, [r4, #2]
    d556:	b11f      	cbz	r7, d560 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d558:	2000      	movs	r0, #0
    d55a:	e002      	b.n	d562 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d55c:	2101      	movs	r1, #1
    d55e:	e7f5      	b.n	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d560:	2002      	movs	r0, #2
    d562:	1821      	adds	r1, r4, r0
    d564:	7d09      	ldrb	r1, [r1, #20]
    d566:	2903      	cmp	r1, #3
    d568:	d102      	bne.n	d570 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d56a:	2d02      	cmp	r5, #2
    d56c:	d000      	beq.n	d570 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d56e:	1c40      	adds	r0, r0, #1
    d570:	1822      	adds	r2, r4, r0
    d572:	2101      	movs	r1, #1
    d574:	7511      	strb	r1, [r2, #20]
    d576:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d57a:	2200      	movs	r2, #0
    d57c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d580:	830a      	strh	r2, [r1, #24]
    d582:	6840      	ldr	r0, [r0, #4]
    d584:	70a2      	strb	r2, [r4, #2]
    d586:	4631      	mov	r1, r6
    d588:	f362 010f 	bfi	r1, r2, #0, #16
    d58c:	e9c6 0100 	strd	r0, r1, [r6]
    d590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d594 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d598:	461e      	mov	r6, r3
    d59a:	4613      	mov	r3, r2
    d59c:	4604      	mov	r4, r0
    d59e:	b109      	cbz	r1, d5a4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d5a0:	2000      	movs	r0, #0
    d5a2:	e000      	b.n	d5a6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d5a4:	2002      	movs	r0, #2
    d5a6:	21ff      	movs	r1, #255	; 0xff
    d5a8:	70a1      	strb	r1, [r4, #2]
    d5aa:	1821      	adds	r1, r4, r0
    d5ac:	7d0a      	ldrb	r2, [r1, #20]
    d5ae:	2a01      	cmp	r2, #1
    d5b0:	d003      	beq.n	d5ba <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d5b2:	7d49      	ldrb	r1, [r1, #21]
    d5b4:	2901      	cmp	r1, #1
    d5b6:	d10c      	bne.n	d5d2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d5b8:	1c40      	adds	r0, r0, #1
    d5ba:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d5be:	2700      	movs	r7, #0
    d5c0:	8b29      	ldrh	r1, [r5, #24]
    d5c2:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d5c6:	198a      	adds	r2, r1, r6
    d5c8:	4562      	cmp	r2, ip
    d5ca:	d905      	bls.n	d5d8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d5cc:	4420      	add	r0, r4
    d5ce:	832f      	strh	r7, [r5, #24]
    d5d0:	7507      	strb	r7, [r0, #20]
    d5d2:	2000      	movs	r0, #0
    d5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5d8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d5dc:	4632      	mov	r2, r6
    d5de:	6840      	ldr	r0, [r0, #4]
    d5e0:	4408      	add	r0, r1
    d5e2:	4619      	mov	r1, r3
    d5e4:	f7fe ff49 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d5e8:	8b28      	ldrh	r0, [r5, #24]
    d5ea:	4430      	add	r0, r6
    d5ec:	8328      	strh	r0, [r5, #24]
    d5ee:	70a7      	strb	r7, [r4, #2]
    d5f0:	2001      	movs	r0, #1
    d5f2:	e7ef      	b.n	d5d4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d5f4 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d5f4:	2202      	movs	r2, #2
    d5f6:	2100      	movs	r1, #0
    d5f8:	f7ff bf71 	b.w	d4de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d5fc <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d5fc:	b510      	push	{r4, lr}
    d5fe:	2101      	movs	r1, #1
    d600:	f7ff ff32 	bl	d468 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d604:	2800      	cmp	r0, #0
    d606:	d000      	beq.n	d60a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d608:	2001      	movs	r0, #1
    d60a:	bd10      	pop	{r4, pc}

0000d60c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d60c:	2201      	movs	r2, #1
    d60e:	f7ff bf38 	b.w	d482 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d612 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d612:	2200      	movs	r2, #0
    d614:	f7ff bf35 	b.w	d482 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d618 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d618:	b570      	push	{r4, r5, r6, lr}
    d61a:	b109      	cbz	r1, d620 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d61c:	2300      	movs	r3, #0
    d61e:	e000      	b.n	d622 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d620:	2302      	movs	r3, #2
    d622:	21ff      	movs	r1, #255	; 0xff
    d624:	7081      	strb	r1, [r0, #2]
    d626:	18c1      	adds	r1, r0, r3
    d628:	2402      	movs	r4, #2
    d62a:	7d0d      	ldrb	r5, [r1, #20]
    d62c:	2d01      	cmp	r5, #1
    d62e:	d007      	beq.n	d640 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d630:	7d4d      	ldrb	r5, [r1, #21]
    d632:	2d01      	cmp	r5, #1
    d634:	d009      	beq.n	d64a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d636:	f44f 718b 	mov.w	r1, #278	; 0x116
    d63a:	2009      	movs	r0, #9
    d63c:	f7f6 ff86 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d640:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d644:	831a      	strh	r2, [r3, #24]
    d646:	750c      	strb	r4, [r1, #20]
    d648:	e003      	b.n	d652 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d64a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d64e:	835a      	strh	r2, [r3, #26]
    d650:	754c      	strb	r4, [r1, #21]
    d652:	2100      	movs	r1, #0
    d654:	7081      	strb	r1, [r0, #2]
    d656:	bd70      	pop	{r4, r5, r6, pc}

0000d658 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d658:	2101      	movs	r1, #1
    d65a:	7001      	strb	r1, [r0, #0]
    d65c:	4770      	bx	lr

0000d65e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d65e:	2201      	movs	r2, #1
    d660:	4611      	mov	r1, r2
    d662:	f7ff bf3c 	b.w	d4de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d666 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d666:	2201      	movs	r2, #1
    d668:	2100      	movs	r1, #0
    d66a:	f7ff bf38 	b.w	d4de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d66e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d66e:	2100      	movs	r1, #0
    d670:	f7ff bee1 	b.w	d436 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d674:	2800      	cmp	r0, #0
    d676:	db09      	blt.n	d68c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d678:	f000 021f 	and.w	r2, r0, #31
    d67c:	2101      	movs	r1, #1
    d67e:	4091      	lsls	r1, r2
    d680:	0940      	lsrs	r0, r0, #5
    d682:	0080      	lsls	r0, r0, #2
    d684:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d688:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d68c:	4770      	bx	lr
    d68e:	2800      	cmp	r0, #0
    d690:	db0d      	blt.n	d6ae <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d692:	f000 021f 	and.w	r2, r0, #31
    d696:	2101      	movs	r1, #1
    d698:	4091      	lsls	r1, r2
    d69a:	0940      	lsrs	r0, r0, #5
    d69c:	0080      	lsls	r0, r0, #2
    d69e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6a2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d6a6:	f3bf 8f4f 	dsb	sy
    d6aa:	f3bf 8f6f 	isb	sy
    d6ae:	4770      	bx	lr
    d6b0:	b510      	push	{r4, lr}
    d6b2:	200e      	movs	r0, #14
    d6b4:	f7ff ffeb 	bl	d68e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d6b8:	200e      	movs	r0, #14
    d6ba:	f7ff ffdb 	bl	d674 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d6be:	200f      	movs	r0, #15
    d6c0:	f7ff ffe5 	bl	d68e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d6c8:	200f      	movs	r0, #15
    d6ca:	f7ff bfd3 	b.w	d674 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d6ce:	2800      	cmp	r0, #0
    d6d0:	db09      	blt.n	d6e6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d6d2:	f000 021f 	and.w	r2, r0, #31
    d6d6:	2101      	movs	r1, #1
    d6d8:	4091      	lsls	r1, r2
    d6da:	0940      	lsrs	r0, r0, #5
    d6dc:	0080      	lsls	r0, r0, #2
    d6de:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6e2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6e6:	4770      	bx	lr
    d6e8:	5840      	ldr	r0, [r0, r1]
    d6ea:	2800      	cmp	r0, #0
    d6ec:	d000      	beq.n	d6f0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d6ee:	2001      	movs	r0, #1
    d6f0:	4770      	bx	lr

0000d6f2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d6f2:	b510      	push	{r4, lr}
    d6f4:	4604      	mov	r4, r0
    d6f6:	4620      	mov	r0, r4
    d6f8:	f7f7 fc58 	bl	4fac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    d6fc:	2811      	cmp	r0, #17
    d6fe:	d0fa      	beq.n	d6f6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d700:	bd10      	pop	{r4, pc}

0000d702 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d702:	b510      	push	{r4, lr}
    d704:	f7ff fff5 	bl	d6f2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d708:	2800      	cmp	r0, #0
    d70a:	d003      	beq.n	d714 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d70c:	21a0      	movs	r1, #160	; 0xa0
    d70e:	201d      	movs	r0, #29
    d710:	f7f6 ff1c 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d714:	bd10      	pop	{r4, pc}

0000d716 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d716:	f7f7 bda7 	b.w	5268 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d71a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d71a:	f7f7 bd95 	b.w	5248 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d71e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d71e:	b510      	push	{r4, lr}
    d720:	4050      	eors	r0, r2
    d722:	780a      	ldrb	r2, [r1, #0]
    d724:	781c      	ldrb	r4, [r3, #0]
    d726:	4062      	eors	r2, r4
    d728:	4410      	add	r0, r2
    d72a:	784a      	ldrb	r2, [r1, #1]
    d72c:	785c      	ldrb	r4, [r3, #1]
    d72e:	4062      	eors	r2, r4
    d730:	4410      	add	r0, r2
    d732:	788a      	ldrb	r2, [r1, #2]
    d734:	789c      	ldrb	r4, [r3, #2]
    d736:	4062      	eors	r2, r4
    d738:	4410      	add	r0, r2
    d73a:	78ca      	ldrb	r2, [r1, #3]
    d73c:	78dc      	ldrb	r4, [r3, #3]
    d73e:	4062      	eors	r2, r4
    d740:	4410      	add	r0, r2
    d742:	790a      	ldrb	r2, [r1, #4]
    d744:	791c      	ldrb	r4, [r3, #4]
    d746:	7949      	ldrb	r1, [r1, #5]
    d748:	4062      	eors	r2, r4
    d74a:	4410      	add	r0, r2
    d74c:	795a      	ldrb	r2, [r3, #5]
    d74e:	4051      	eors	r1, r2
    d750:	42c1      	cmn	r1, r0
    d752:	d101      	bne.n	d758 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d754:	2001      	movs	r0, #1
    d756:	bd10      	pop	{r4, pc}
    d758:	2000      	movs	r0, #0
    d75a:	bd10      	pop	{r4, pc}

0000d75c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d75c:	b510      	push	{r4, lr}
    d75e:	2900      	cmp	r1, #0
    d760:	4604      	mov	r4, r0
    d762:	f04f 0106 	mov.w	r1, #6
    d766:	d002      	beq.n	d76e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d768:	f7f6 ff90 	bl	468c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d76c:	e001      	b.n	d772 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d76e:	f7f6 ff9b 	bl	46a8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d772:	7960      	ldrb	r0, [r4, #5]
    d774:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d778:	7160      	strb	r0, [r4, #5]
    d77a:	bd10      	pop	{r4, pc}

0000d77c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d77c:	4770      	bx	lr

0000d77e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d77e:	b530      	push	{r4, r5, lr}
    d780:	460c      	mov	r4, r1
    d782:	4605      	mov	r5, r0
    d784:	b08d      	sub	sp, #52	; 0x34
    d786:	f04f 0103 	mov.w	r1, #3
    d78a:	f104 0003 	add.w	r0, r4, #3
    d78e:	b112      	cbz	r2, d796 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d790:	f7f6 ff7c 	bl	468c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d794:	e001      	b.n	d79a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d796:	f7f6 ff87 	bl	46a8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d79a:	7960      	ldrb	r0, [r4, #5]
    d79c:	220d      	movs	r2, #13
    d79e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d7a2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d7a6:	7160      	strb	r0, [r4, #5]
    d7a8:	2100      	movs	r1, #0
    d7aa:	a804      	add	r0, sp, #16
    d7ac:	f7fe fedf 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7b0:	78e0      	ldrb	r0, [r4, #3]
    d7b2:	f88d 001f 	strb.w	r0, [sp, #31]
    d7b6:	7920      	ldrb	r0, [r4, #4]
    d7b8:	f88d 001e 	strb.w	r0, [sp, #30]
    d7bc:	7960      	ldrb	r0, [r4, #5]
    d7be:	f88d 001d 	strb.w	r0, [sp, #29]
    d7c2:	2210      	movs	r2, #16
    d7c4:	4629      	mov	r1, r5
    d7c6:	4668      	mov	r0, sp
    d7c8:	f7fe fe57 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7cc:	4668      	mov	r0, sp
    d7ce:	f7ff ff98 	bl	d702 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d7d2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d7d6:	7020      	strb	r0, [r4, #0]
    d7d8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d7dc:	7060      	strb	r0, [r4, #1]
    d7de:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d7e2:	70a0      	strb	r0, [r4, #2]
    d7e4:	b00d      	add	sp, #52	; 0x34
    d7e6:	bd30      	pop	{r4, r5, pc}

0000d7e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d7e8:	f7f8 b8fa 	b.w	59e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    d7ec:	07c1      	lsls	r1, r0, #31
    d7ee:	d001      	beq.n	d7f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d7f0:	2001      	movs	r0, #1
    d7f2:	4770      	bx	lr
    d7f4:	0780      	lsls	r0, r0, #30
    d7f6:	d501      	bpl.n	d7fc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d7f8:	2002      	movs	r0, #2
    d7fa:	4770      	bx	lr
    d7fc:	2000      	movs	r0, #0
    d7fe:	4770      	bx	lr
    d800:	b510      	push	{r4, lr}
    d802:	2801      	cmp	r0, #1
    d804:	d008      	beq.n	d818 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d806:	2802      	cmp	r0, #2
    d808:	d004      	beq.n	d814 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d80a:	f240 411a 	movw	r1, #1050	; 0x41a
    d80e:	2006      	movs	r0, #6
    d810:	f7f6 fe9c 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d814:	2001      	movs	r0, #1
    d816:	bd10      	pop	{r4, pc}
    d818:	2000      	movs	r0, #0
    d81a:	bd10      	pop	{r4, pc}
    d81c:	2900      	cmp	r1, #0
    d81e:	d004      	beq.n	d82a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d820:	2801      	cmp	r0, #1
    d822:	d003      	beq.n	d82c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d824:	2901      	cmp	r1, #1
    d826:	d001      	beq.n	d82c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d828:	2002      	movs	r0, #2
    d82a:	4770      	bx	lr
    d82c:	2001      	movs	r0, #1
    d82e:	4770      	bx	lr
    d830:	f7ff bc95 	b.w	d15e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d834 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d834:	2101      	movs	r1, #1
    d836:	f7f8 bbcd 	b.w	5fd4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d83a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d83a:	b510      	push	{r4, lr}
    d83c:	f002 feff 	bl	1063e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d840:	b118      	cbz	r0, d84a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d846:	f7fc bfa3 	b.w	a790 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d84a:	20ff      	movs	r0, #255	; 0xff
    d84c:	bd10      	pop	{r4, pc}

0000d84e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d84e:	b510      	push	{r4, lr}
    d850:	f7f8 fc08 	bl	6064 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d854:	2810      	cmp	r0, #16
    d856:	d003      	beq.n	d860 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d858:	f7f8 fbd4 	bl	6004 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d85c:	2810      	cmp	r0, #16
    d85e:	d100      	bne.n	d862 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d860:	2008      	movs	r0, #8
    d862:	bd10      	pop	{r4, pc}

0000d864 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d864:	b510      	push	{r4, lr}
    d866:	f7f8 fbfd 	bl	6064 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d86a:	2810      	cmp	r0, #16
    d86c:	d003      	beq.n	d876 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d86e:	f7f8 fc57 	bl	6120 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    d872:	2001      	movs	r0, #1
    d874:	bd10      	pop	{r4, pc}
    d876:	2000      	movs	r0, #0
    d878:	bd10      	pop	{r4, pc}

0000d87a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d87a:	b570      	push	{r4, r5, r6, lr}
    d87c:	460e      	mov	r6, r1
    d87e:	b08c      	sub	sp, #48	; 0x30
    d880:	4614      	mov	r4, r2
    d882:	4601      	mov	r1, r0
    d884:	461d      	mov	r5, r3
    d886:	2210      	movs	r2, #16
    d888:	4668      	mov	r0, sp
    d88a:	f000 f938 	bl	dafe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d88e:	2210      	movs	r2, #16
    d890:	4631      	mov	r1, r6
    d892:	a804      	add	r0, sp, #16
    d894:	f000 f933 	bl	dafe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d898:	4668      	mov	r0, sp
    d89a:	f7ff ff32 	bl	d702 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d89e:	a908      	add	r1, sp, #32
    d8a0:	f04f 0210 	mov.w	r2, #16
    d8a4:	4628      	mov	r0, r5
    d8a6:	b11c      	cbz	r4, d8b0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d8a8:	f000 f929 	bl	dafe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8ac:	b00c      	add	sp, #48	; 0x30
    d8ae:	bd70      	pop	{r4, r5, r6, pc}
    d8b0:	f7fe fde3 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d8b4:	e7fa      	b.n	d8ac <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d8b6:	b510      	push	{r4, lr}
    d8b8:	460c      	mov	r4, r1
    d8ba:	2100      	movs	r1, #0
    d8bc:	f7ff fd84 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d8c0:	6060      	str	r0, [r4, #4]
    d8c2:	b118      	cbz	r0, d8cc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d8c4:	2001      	movs	r0, #1
    d8c6:	7020      	strb	r0, [r4, #0]
    d8c8:	2000      	movs	r0, #0
    d8ca:	bd10      	pop	{r4, pc}
    d8cc:	2002      	movs	r0, #2
    d8ce:	bd10      	pop	{r4, pc}

0000d8d0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d8d0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8d4:	4348      	muls	r0, r1
    d8d6:	4770      	bx	lr

0000d8d8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d8d8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8dc:	fbb0 f0f1 	udiv	r0, r0, r1
    d8e0:	b280      	uxth	r0, r0
    d8e2:	4770      	bx	lr

0000d8e4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d8e4:	b570      	push	{r4, r5, r6, lr}
    d8e6:	4604      	mov	r4, r0
    d8e8:	4290      	cmp	r0, r2
    d8ea:	d20b      	bcs.n	d904 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d8ec:	1b10      	subs	r0, r2, r4
    d8ee:	2865      	cmp	r0, #101	; 0x65
    d8f0:	d200      	bcs.n	d8f4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d8f2:	2065      	movs	r0, #101	; 0x65
    d8f4:	1825      	adds	r5, r4, r0
    d8f6:	428d      	cmp	r5, r1
    d8f8:	d803      	bhi.n	d902 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d8fa:	2103      	movs	r1, #3
    d8fc:	f7f4 f8ac 	bl	1a58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d900:	b108      	cbz	r0, d906 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d902:	4620      	mov	r0, r4
    d904:	bd70      	pop	{r4, r5, r6, pc}
    d906:	4628      	mov	r0, r5
    d908:	bd70      	pop	{r4, r5, r6, pc}

0000d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d90a:	b510      	push	{r4, lr}
    d90c:	f1a2 0311 	sub.w	r3, r2, #17
    d910:	290d      	cmp	r1, #13
    d912:	d24d      	bcs.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d914:	e8df f001 	tbb	[pc, r1]
    d918:	150e0907 	.word	0x150e0907
    d91c:	29211d1a 	.word	0x29211d1a
    d920:	362f4e2c 	.word	0x362f4e2c
    d924:	0048      	.short	0x0048
    d926:	b3f2      	cbz	r2, d9a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d928:	e042      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d92a:	2a07      	cmp	r2, #7
    d92c:	d03e      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d92e:	2a08      	cmp	r2, #8
    d930:	d03c      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d932:	e03d      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d934:	2a0c      	cmp	r2, #12
    d936:	d039      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d938:	2a0d      	cmp	r2, #13
    d93a:	d037      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d93c:	2a0b      	cmp	r2, #11
    d93e:	d035      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d940:	e036      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d942:	2a0e      	cmp	r2, #14
    d944:	d032      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d946:	2a0f      	cmp	r2, #15
    d948:	d030      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d94a:	e031      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d94c:	2b0c      	cmp	r3, #12
    d94e:	d92d      	bls.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d950:	e02e      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d952:	3a12      	subs	r2, #18
    d954:	2a0b      	cmp	r2, #11
    d956:	d929      	bls.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d958:	e02a      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d95a:	2b03      	cmp	r3, #3
    d95c:	d926      	bls.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d95e:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
    d962:	b1f8      	cbz	r0, d9a4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    d964:	2a1d      	cmp	r2, #29
    d966:	d921      	bls.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d968:	e022      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d96a:	2a04      	cmp	r2, #4
    d96c:	d01e      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d96e:	e01f      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d970:	2a06      	cmp	r2, #6
    d972:	d01b      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d974:	e01c      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d976:	2a1e      	cmp	r2, #30
    d978:	d018      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d97a:	2a1f      	cmp	r2, #31
    d97c:	d016      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d97e:	2a20      	cmp	r2, #32
    d980:	d014      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d982:	e015      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d984:	2a21      	cmp	r2, #33	; 0x21
    d986:	d011      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d988:	2a22      	cmp	r2, #34	; 0x22
    d98a:	d00f      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d98c:	2a23      	cmp	r2, #35	; 0x23
    d98e:	d00d      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d990:	2a24      	cmp	r2, #36	; 0x24
    d992:	d00b      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d994:	2a25      	cmp	r2, #37	; 0x25
    d996:	d009      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d998:	2a26      	cmp	r2, #38	; 0x26
    d99a:	d007      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d99c:	2a27      	cmp	r2, #39	; 0x27
    d99e:	d005      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9a0:	2a2e      	cmp	r2, #46	; 0x2e
    d9a2:	d003      	beq.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9a4:	e004      	b.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9a6:	e001      	b.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9a8:	2a29      	cmp	r2, #41	; 0x29
    d9aa:	d101      	bne.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9ac:	2001      	movs	r0, #1
    d9ae:	bd10      	pop	{r4, pc}
    d9b0:	2000      	movs	r0, #0
    d9b2:	bd10      	pop	{r4, pc}
    d9b4:	2a10      	cmp	r2, #16
    d9b6:	d1fb      	bne.n	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9b8:	e7f8      	b.n	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000d9ba <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d9ba:	280c      	cmp	r0, #12
    d9bc:	d019      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9be:	280d      	cmp	r0, #13
    d9c0:	d017      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9c2:	280b      	cmp	r0, #11
    d9c4:	d015      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9c6:	280e      	cmp	r0, #14
    d9c8:	d013      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9ca:	280f      	cmp	r0, #15
    d9cc:	d011      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9ce:	2821      	cmp	r0, #33	; 0x21
    d9d0:	d00f      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9d2:	2822      	cmp	r0, #34	; 0x22
    d9d4:	d00d      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9d6:	2823      	cmp	r0, #35	; 0x23
    d9d8:	d00b      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9da:	2824      	cmp	r0, #36	; 0x24
    d9dc:	d009      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9de:	2825      	cmp	r0, #37	; 0x25
    d9e0:	d007      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9e2:	2826      	cmp	r0, #38	; 0x26
    d9e4:	d005      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9e6:	2827      	cmp	r0, #39	; 0x27
    d9e8:	d003      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9ea:	282e      	cmp	r0, #46	; 0x2e
    d9ec:	d001      	beq.n	d9f2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9ee:	2000      	movs	r0, #0
    d9f0:	4770      	bx	lr
    d9f2:	2001      	movs	r0, #1
    d9f4:	4770      	bx	lr

0000d9f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d9f6:	f011 0f0c 	tst.w	r1, #12
    d9fa:	d018      	beq.n	da2e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    d9fc:	074a      	lsls	r2, r1, #29
    d9fe:	f44f 7116 	mov.w	r1, #600	; 0x258
    da02:	2a00      	cmp	r2, #0
    da04:	da02      	bge.n	da0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    da06:	f04f 0210 	mov.w	r2, #16
    da0a:	e001      	b.n	da10 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    da0c:	f04f 0240 	mov.w	r2, #64	; 0x40
    da10:	da01      	bge.n	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    da12:	f04f 0196 	mov.w	r1, #150	; 0x96
    da16:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    da1a:	eba0 0301 	sub.w	r3, r0, r1
    da1e:	4288      	cmp	r0, r1
    da20:	d903      	bls.n	da2a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da22:	fb93 f0f2 	sdiv	r0, r3, r2
    da26:	b280      	uxth	r0, r0
    da28:	4770      	bx	lr
    da2a:	2000      	movs	r0, #0
    da2c:	4770      	bx	lr
    da2e:	2902      	cmp	r1, #2
    da30:	d008      	beq.n	da44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    da32:	2870      	cmp	r0, #112	; 0x70
    da34:	d9f9      	bls.n	da2a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da36:	3870      	subs	r0, #112	; 0x70
    da38:	17c1      	asrs	r1, r0, #31
    da3a:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    da3e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    da42:	4770      	bx	lr
    da44:	283c      	cmp	r0, #60	; 0x3c
    da46:	d9f0      	bls.n	da2a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da48:	383c      	subs	r0, #60	; 0x3c
    da4a:	17c1      	asrs	r1, r0, #31
    da4c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    da50:	f3c0 008f 	ubfx	r0, r0, #2, #16
    da54:	4770      	bx	lr

0000da56 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    da56:	6809      	ldr	r1, [r1, #0]
    da58:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    da5c:	4770      	bx	lr

0000da5e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    da5e:	07c1      	lsls	r1, r0, #31
    da60:	d001      	beq.n	da66 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    da62:	2001      	movs	r0, #1
    da64:	4770      	bx	lr
    da66:	0781      	lsls	r1, r0, #30
    da68:	d501      	bpl.n	da6e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    da6a:	2002      	movs	r0, #2
    da6c:	4770      	bx	lr
    da6e:	0740      	lsls	r0, r0, #29
    da70:	d501      	bpl.n	da76 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    da72:	2008      	movs	r0, #8
    da74:	4770      	bx	lr
    da76:	2000      	movs	r0, #0
    da78:	4770      	bx	lr

0000da7a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    da7a:	b510      	push	{r4, lr}
    da7c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    da80:	2901      	cmp	r1, #1
    da82:	d006      	beq.n	da92 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    da84:	2902      	cmp	r1, #2
    da86:	d005      	beq.n	da94 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    da88:	f240 31af 	movw	r1, #943	; 0x3af
    da8c:	2029      	movs	r0, #41	; 0x29
    da8e:	f7f6 fd5d 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da92:	b108      	cbz	r0, da98 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    da94:	4610      	mov	r0, r2
    da96:	bd10      	pop	{r4, pc}
    da98:	f240 40e2 	movw	r0, #1250	; 0x4e2
    da9c:	bd10      	pop	{r4, pc}

0000da9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    da9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daa2:	4607      	mov	r7, r0
    daa4:	460e      	mov	r6, r1
    daa6:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    daaa:	f7f4 fbad 	bl	2208 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    daae:	b198      	cbz	r0, dad8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dab0:	b31e      	cbz	r6, dafa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dab2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dab6:	1b40      	subs	r0, r0, r5
    dab8:	2300      	movs	r3, #0
    daba:	eb61 0104 	sbc.w	r1, r1, r4
    dabe:	461a      	mov	r2, r3
    dac0:	1a1b      	subs	r3, r3, r0
    dac2:	418a      	sbcs	r2, r1
    dac4:	da19      	bge.n	dafa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dac6:	1c42      	adds	r2, r0, #1
    dac8:	f171 0100 	sbcs.w	r1, r1, #0
    dacc:	db07      	blt.n	dade <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    dace:	f240 2129 	movw	r1, #553	; 0x229
    dad2:	2029      	movs	r0, #41	; 0x29
    dad4:	f7f6 fd3a 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dad8:	f240 211f 	movw	r1, #543	; 0x21f
    dadc:	e7f9      	b.n	dad2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dade:	4430      	add	r0, r6
    dae0:	1e40      	subs	r0, r0, #1
    dae2:	fbb0 f1f6 	udiv	r1, r0, r6
    dae6:	fb01 f006 	mul.w	r0, r1, r6
    daea:	1828      	adds	r0, r5, r0
    daec:	f144 0400 	adc.w	r4, r4, #0
    daf0:	e9c7 0404 	strd	r0, r4, [r7, #16]
    daf4:	4608      	mov	r0, r1
    daf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dafa:	2000      	movs	r0, #0
    dafc:	e7fb      	b.n	daf6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dafe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dafe:	b530      	push	{r4, r5, lr}
    db00:	4613      	mov	r3, r2
    db02:	e006      	b.n	db12 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    db04:	18cc      	adds	r4, r1, r3
    db06:	1ad5      	subs	r5, r2, r3
    db08:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    db0c:	1e5b      	subs	r3, r3, #1
    db0e:	5544      	strb	r4, [r0, r5]
    db10:	b2db      	uxtb	r3, r3
    db12:	2b00      	cmp	r3, #0
    db14:	d1f6      	bne.n	db04 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    db16:	bd30      	pop	{r4, r5, pc}

0000db18 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    db18:	2300      	movs	r3, #0
    db1a:	6383      	str	r3, [r0, #56]	; 0x38
    db1c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    db20:	f240 2371 	movw	r3, #625	; 0x271
    db24:	435a      	muls	r2, r3
    db26:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    db2a:	1e52      	subs	r2, r2, #1
    db2c:	fbb2 f1f1 	udiv	r1, r2, r1
    db30:	63c1      	str	r1, [r0, #60]	; 0x3c
    db32:	4770      	bx	lr

0000db34 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    db34:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db38:	4607      	mov	r7, r0
    db3a:	4690      	mov	r8, r2
    db3c:	468b      	mov	fp, r1
    db3e:	2601      	movs	r6, #1
    db40:	4608      	mov	r0, r1
    db42:	f000 f9dc 	bl	defe <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    db46:	4682      	mov	sl, r0
    db48:	4658      	mov	r0, fp
    db4a:	f000 f9da 	bl	df02 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    db4e:	4681      	mov	r9, r0
    db50:	f7ff ff85 	bl	da5e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db54:	4604      	mov	r4, r0
    db56:	4650      	mov	r0, sl
    db58:	f7ff ff81 	bl	da5e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db5c:	4605      	mov	r5, r0
    db5e:	ea54 0005 	orrs.w	r0, r4, r5
    db62:	d100      	bne.n	db66 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    db64:	2600      	movs	r6, #0
    db66:	f7fc fd95 	bl	a694 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db6a:	ea10 0f09 	tst.w	r0, r9
    db6e:	d100      	bne.n	db72 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    db70:	2400      	movs	r4, #0
    db72:	f7fc fd8f 	bl	a694 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db76:	ea10 0f0a 	tst.w	r0, sl
    db7a:	d100      	bne.n	db7e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    db7c:	2500      	movs	r5, #0
    db7e:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    db82:	42a0      	cmp	r0, r4
    db84:	d100      	bne.n	db88 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    db86:	2400      	movs	r4, #0
    db88:	f888 4000 	strb.w	r4, [r8]
    db8c:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    db90:	42a8      	cmp	r0, r5
    db92:	d100      	bne.n	db96 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    db94:	2500      	movs	r5, #0
    db96:	f888 5001 	strb.w	r5, [r8, #1]
    db9a:	b974      	cbnz	r4, dbba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    db9c:	b96d      	cbnz	r5, dbba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    db9e:	4658      	mov	r0, fp
    dba0:	f000 f99b 	bl	deda <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    dba4:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
    dba8:	1a40      	subs	r0, r0, r1
    dbaa:	b200      	sxth	r0, r0
    dbac:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dbb0:	4288      	cmp	r0, r1
    dbb2:	dc01      	bgt.n	dbb8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    dbb4:	2800      	cmp	r0, #0
    dbb6:	dc00      	bgt.n	dbba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbb8:	2600      	movs	r6, #0
    dbba:	4630      	mov	r0, r6
    dbbc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000dbc0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dbc0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbc4:	4348      	muls	r0, r1
    dbc6:	4770      	bx	lr

0000dbc8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dbc8:	f240 2171 	movw	r1, #625	; 0x271
    dbcc:	fb10 f001 	smulbb	r0, r0, r1
    dbd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dbd4:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    dbd8:	4770      	bx	lr

0000dbda <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dbda:	b510      	push	{r4, lr}
    dbdc:	2300      	movs	r3, #0
    dbde:	461a      	mov	r2, r3
    dbe0:	e003      	b.n	dbea <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dbe2:	5c84      	ldrb	r4, [r0, r2]
    dbe4:	4323      	orrs	r3, r4
    dbe6:	1c52      	adds	r2, r2, #1
    dbe8:	b2d2      	uxtb	r2, r2
    dbea:	428a      	cmp	r2, r1
    dbec:	d3f9      	bcc.n	dbe2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dbee:	b10b      	cbz	r3, dbf4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dbf0:	2000      	movs	r0, #0
    dbf2:	bd10      	pop	{r4, pc}
    dbf4:	2001      	movs	r0, #1
    dbf6:	bd10      	pop	{r4, pc}

0000dbf8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dbf8:	b510      	push	{r4, lr}
    dbfa:	4604      	mov	r4, r0
    dbfc:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    dc00:	b108      	cbz	r0, dc06 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dc02:	2825      	cmp	r0, #37	; 0x25
    dc04:	d901      	bls.n	dc0a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dc06:	2012      	movs	r0, #18
    dc08:	bd10      	pop	{r4, pc}
    dc0a:	b12a      	cbz	r2, dc18 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    dc0c:	7f60      	ldrb	r0, [r4, #29]
    dc0e:	b128      	cbz	r0, dc1c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    dc10:	2801      	cmp	r0, #1
    dc12:	d009      	beq.n	dc28 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    dc14:	201f      	movs	r0, #31
    dc16:	bd10      	pop	{r4, pc}
    dc18:	2000      	movs	r0, #0
    dc1a:	bd10      	pop	{r4, pc}
    dc1c:	4620      	mov	r0, r4
    dc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc22:	4611      	mov	r1, r2
    dc24:	f000 b827 	b.w	dc76 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    dc28:	89a2      	ldrh	r2, [r4, #12]
    dc2a:	6949      	ldr	r1, [r1, #20]
    dc2c:	f104 001d 	add.w	r0, r4, #29
    dc30:	f7f8 fb12 	bl	6258 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dc34:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    dc38:	e7ee      	b.n	dc18 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dc3a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dc3a:	b570      	push	{r4, r5, r6, lr}
    dc3c:	4604      	mov	r4, r0
    dc3e:	1c40      	adds	r0, r0, #1
    dc40:	4288      	cmp	r0, r1
    dc42:	d004      	beq.n	dc4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dc44:	6808      	ldr	r0, [r1, #0]
    dc46:	f8c4 0001 	str.w	r0, [r4, #1]
    dc4a:	7908      	ldrb	r0, [r1, #4]
    dc4c:	7160      	strb	r0, [r4, #5]
    dc4e:	7960      	ldrb	r0, [r4, #5]
    dc50:	f000 001f 	and.w	r0, r0, #31
    dc54:	7160      	strb	r0, [r4, #5]
    dc56:	2000      	movs	r0, #0
    dc58:	72e0      	strb	r0, [r4, #11]
    dc5a:	4605      	mov	r5, r0
    dc5c:	1966      	adds	r6, r4, r5
    dc5e:	7870      	ldrb	r0, [r6, #1]
    dc60:	f000 fba6 	bl	e3b0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dc64:	71b0      	strb	r0, [r6, #6]
    dc66:	7ae1      	ldrb	r1, [r4, #11]
    dc68:	1c6d      	adds	r5, r5, #1
    dc6a:	4408      	add	r0, r1
    dc6c:	b2ed      	uxtb	r5, r5
    dc6e:	72e0      	strb	r0, [r4, #11]
    dc70:	2d05      	cmp	r5, #5
    dc72:	d3f3      	bcc.n	dc5c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    dc74:	bd70      	pop	{r4, r5, r6, pc}
    dc76:	b570      	push	{r4, r5, r6, lr}
    dc78:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
    dc7c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    dc80:	2401      	movs	r4, #1
    dc82:	fb03 2101 	mla	r1, r3, r1, r2
    dc86:	2225      	movs	r2, #37	; 0x25
    dc88:	fbb1 f3f2 	udiv	r3, r1, r2
    dc8c:	fb02 1113 	mls	r1, r2, r3, r1
    dc90:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    dc94:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    dc98:	f001 0307 	and.w	r3, r1, #7
    dc9c:	7f92      	ldrb	r2, [r2, #30]
    dc9e:	fa04 f303 	lsl.w	r3, r4, r3
    dca2:	421a      	tst	r2, r3
    dca4:	d003      	beq.n	dcae <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x74>
    dca6:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    dcaa:	2000      	movs	r0, #0
    dcac:	bd70      	pop	{r4, r5, r6, pc}
    dcae:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    dcb2:	fbb1 f3f2 	udiv	r3, r1, r2
    dcb6:	fb02 1113 	mls	r1, r2, r3, r1
    dcba:	1c49      	adds	r1, r1, #1
    dcbc:	b2c9      	uxtb	r1, r1
    dcbe:	2300      	movs	r3, #0
    dcc0:	18c5      	adds	r5, r0, r3
    dcc2:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    dcc6:	428a      	cmp	r2, r1
    dcc8:	d310      	bcc.n	dcec <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb2>
    dcca:	7fad      	ldrb	r5, [r5, #30]
    dccc:	2200      	movs	r2, #0
    dcce:	fa04 f602 	lsl.w	r6, r4, r2
    dcd2:	4235      	tst	r5, r6
    dcd4:	d001      	beq.n	dcda <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xa0>
    dcd6:	1e49      	subs	r1, r1, #1
    dcd8:	b2c9      	uxtb	r1, r1
    dcda:	b121      	cbz	r1, dce6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xac>
    dcdc:	1c52      	adds	r2, r2, #1
    dcde:	b2d2      	uxtb	r2, r2
    dce0:	2a08      	cmp	r2, #8
    dce2:	d3f4      	bcc.n	dcce <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x94>
    dce4:	e004      	b.n	dcf0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    dce6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    dcea:	e7dc      	b.n	dca6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    dcec:	1a89      	subs	r1, r1, r2
    dcee:	b2c9      	uxtb	r1, r1
    dcf0:	1c5b      	adds	r3, r3, #1
    dcf2:	b2db      	uxtb	r3, r3
    dcf4:	2b05      	cmp	r3, #5
    dcf6:	d3e3      	bcc.n	dcc0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x86>
    dcf8:	201f      	movs	r0, #31
    dcfa:	bd70      	pop	{r4, r5, r6, pc}

0000dcfc <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    dcfc:	7802      	ldrb	r2, [r0, #0]
    dcfe:	f002 020f 	and.w	r2, r2, #15
    dd02:	2a03      	cmp	r2, #3
    dd04:	d003      	beq.n	dd0e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    dd06:	2a05      	cmp	r2, #5
    dd08:	d104      	bne.n	dd14 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    dd0a:	f000 b92e 	b.w	df6a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    dd0e:	7840      	ldrb	r0, [r0, #1]
    dd10:	280c      	cmp	r0, #12
    dd12:	d001      	beq.n	dd18 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    dd14:	2000      	movs	r0, #0
    dd16:	4770      	bx	lr
    dd18:	2001      	movs	r0, #1
    dd1a:	4770      	bx	lr

0000dd1c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    dd1c:	b570      	push	{r4, r5, r6, lr}
    dd1e:	4614      	mov	r4, r2
    dd20:	4605      	mov	r5, r0
    dd22:	2a1f      	cmp	r2, #31
    dd24:	d903      	bls.n	dd2e <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    dd26:	21f1      	movs	r1, #241	; 0xf1
    dd28:	202a      	movs	r0, #42	; 0x2a
    dd2a:	f7f6 fc0f 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd2e:	f105 0009 	add.w	r0, r5, #9
    dd32:	f7fe fba2 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd36:	1da4      	adds	r4, r4, #6
    dd38:	706c      	strb	r4, [r5, #1]
    dd3a:	bd70      	pop	{r4, r5, r6, pc}

0000dd3c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    dd3c:	b510      	push	{r4, lr}
    dd3e:	7802      	ldrb	r2, [r0, #0]
    dd40:	f001 030f 	and.w	r3, r1, #15
    dd44:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    dd48:	431a      	orrs	r2, r3
    dd4a:	7002      	strb	r2, [r0, #0]
    dd4c:	2907      	cmp	r1, #7
    dd4e:	d20c      	bcs.n	dd6a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    dd50:	e8df f001 	tbb	[pc, r1]
    dd54:	06040604 	.word	0x06040604
    dd58:	00040804 	.word	0x00040804
    dd5c:	2106      	movs	r1, #6
    dd5e:	e002      	b.n	dd66 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    dd60:	210c      	movs	r1, #12
    dd62:	e000      	b.n	dd66 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    dd64:	2122      	movs	r1, #34	; 0x22
    dd66:	7041      	strb	r1, [r0, #1]
    dd68:	bd10      	pop	{r4, pc}
    dd6a:	21ab      	movs	r1, #171	; 0xab
    dd6c:	202a      	movs	r0, #42	; 0x2a
    dd6e:	f7f6 fbed 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dd72 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    dd72:	680a      	ldr	r2, [r1, #0]
    dd74:	f840 2f09 	str.w	r2, [r0, #9]!
    dd78:	8889      	ldrh	r1, [r1, #4]
    dd7a:	8081      	strh	r1, [r0, #4]
    dd7c:	4770      	bx	lr

0000dd7e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    dd7e:	7802      	ldrb	r2, [r0, #0]
    dd80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dd84:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dd88:	7002      	strb	r2, [r0, #0]
    dd8a:	4770      	bx	lr

0000dd8c <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    dd8c:	680a      	ldr	r2, [r1, #0]
    dd8e:	f840 2f03 	str.w	r2, [r0, #3]!
    dd92:	8889      	ldrh	r1, [r1, #4]
    dd94:	8081      	strh	r1, [r0, #4]
    dd96:	4770      	bx	lr

0000dd98 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    dd98:	7802      	ldrb	r2, [r0, #0]
    dd9a:	2340      	movs	r3, #64	; 0x40
    dd9c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    dda0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    dda4:	430a      	orrs	r2, r1
    dda6:	7002      	strb	r2, [r0, #0]
    dda8:	4770      	bx	lr

0000ddaa <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    ddaa:	b570      	push	{r4, r5, r6, lr}
    ddac:	4614      	mov	r4, r2
    ddae:	4605      	mov	r5, r0
    ddb0:	2a1f      	cmp	r2, #31
    ddb2:	d904      	bls.n	ddbe <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    ddb4:	f240 1113 	movw	r1, #275	; 0x113
    ddb8:	202a      	movs	r0, #42	; 0x2a
    ddba:	f7f6 fbc7 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddbe:	f105 0009 	add.w	r0, r5, #9
    ddc2:	f7fe fb5a 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ddc6:	1da4      	adds	r4, r4, #6
    ddc8:	706c      	strb	r4, [r5, #1]
    ddca:	bd70      	pop	{r4, r5, r6, pc}

0000ddcc <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    ddcc:	6842      	ldr	r2, [r0, #4]
    ddce:	600a      	str	r2, [r1, #0]
    ddd0:	7a00      	ldrb	r0, [r0, #8]
    ddd2:	7108      	strb	r0, [r1, #4]
    ddd4:	4770      	bx	lr

0000ddd6 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    ddd6:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    ddda:	4770      	bx	lr

0000dddc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    dddc:	b570      	push	{r4, r5, r6, lr}
    ddde:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    dde2:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    dde6:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    ddea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    ddee:	88c0      	ldrh	r0, [r0, #6]
    ddf0:	b131      	cbz	r1, de00 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    ddf2:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    ddf6:	d903      	bls.n	de00 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    ddf8:	f640 5107 	movw	r1, #3335	; 0xd07
    ddfc:	428a      	cmp	r2, r1
    ddfe:	d90b      	bls.n	de18 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    de00:	1f91      	subs	r1, r2, #6
    de02:	f640 467a 	movw	r6, #3194	; 0xc7a
    de06:	42b1      	cmp	r1, r6
    de08:	d810      	bhi.n	de2c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de0a:	b17b      	cbz	r3, de2c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de0c:	2b08      	cmp	r3, #8
    de0e:	d80d      	bhi.n	de2c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de10:	4293      	cmp	r3, r2
    de12:	d20b      	bcs.n	de2c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de14:	4295      	cmp	r5, r2
    de16:	d809      	bhi.n	de2c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de18:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    de1c:	d206      	bcs.n	de2c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de1e:	f640 4176 	movw	r1, #3190	; 0xc76
    de22:	380a      	subs	r0, #10
    de24:	4288      	cmp	r0, r1
    de26:	d801      	bhi.n	de2c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de28:	2001      	movs	r0, #1
    de2a:	bd70      	pop	{r4, r5, r6, pc}
    de2c:	2000      	movs	r0, #0
    de2e:	bd70      	pop	{r4, r5, r6, pc}

0000de30 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    de30:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    de34:	4770      	bx	lr

0000de36 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    de36:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    de3a:	4770      	bx	lr

0000de3c <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    de3c:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    de40:	4770      	bx	lr

0000de42 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    de42:	b510      	push	{r4, lr}
    de44:	29fb      	cmp	r1, #251	; 0xfb
    de46:	d904      	bls.n	de52 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    de48:	f240 61ac 	movw	r1, #1708	; 0x6ac
    de4c:	202a      	movs	r0, #42	; 0x2a
    de4e:	f7f6 fb7d 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de52:	7041      	strb	r1, [r0, #1]
    de54:	bd10      	pop	{r4, pc}

0000de56 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    de56:	8980      	ldrh	r0, [r0, #12]
    de58:	8008      	strh	r0, [r1, #0]
    de5a:	4770      	bx	lr

0000de5c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    de5c:	f8d0 0016 	ldr.w	r0, [r0, #22]
    de60:	6008      	str	r0, [r1, #0]
    de62:	4770      	bx	lr

0000de64 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    de64:	6842      	ldr	r2, [r0, #4]
    de66:	600a      	str	r2, [r1, #0]
    de68:	6880      	ldr	r0, [r0, #8]
    de6a:	6048      	str	r0, [r1, #4]
    de6c:	4770      	bx	lr

0000de6e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    de6e:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    de72:	600a      	str	r2, [r1, #0]
    de74:	6840      	ldr	r0, [r0, #4]
    de76:	6048      	str	r0, [r1, #4]
    de78:	4770      	bx	lr

0000de7a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    de7a:	6809      	ldr	r1, [r1, #0]
    de7c:	60c1      	str	r1, [r0, #12]
    de7e:	4770      	bx	lr

0000de80 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    de80:	680a      	ldr	r2, [r1, #0]
    de82:	6042      	str	r2, [r0, #4]
    de84:	6849      	ldr	r1, [r1, #4]
    de86:	6081      	str	r1, [r0, #8]
    de88:	4770      	bx	lr

0000de8a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    de8a:	7800      	ldrb	r0, [r0, #0]
    de8c:	f000 0003 	and.w	r0, r0, #3
    de90:	4770      	bx	lr

0000de92 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    de92:	8880      	ldrh	r0, [r0, #4]
    de94:	4770      	bx	lr

0000de96 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    de96:	88c0      	ldrh	r0, [r0, #6]
    de98:	4770      	bx	lr

0000de9a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    de9a:	8900      	ldrh	r0, [r0, #8]
    de9c:	4770      	bx	lr

0000de9e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    de9e:	8940      	ldrh	r0, [r0, #10]
    dea0:	4770      	bx	lr

0000dea2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    dea2:	8901      	ldrh	r1, [r0, #8]
    dea4:	291b      	cmp	r1, #27
    dea6:	d30c      	bcc.n	dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dea8:	8941      	ldrh	r1, [r0, #10]
    deaa:	f44f 72a4 	mov.w	r2, #328	; 0x148
    deae:	4291      	cmp	r1, r2
    deb0:	d307      	bcc.n	dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    deb2:	8881      	ldrh	r1, [r0, #4]
    deb4:	291b      	cmp	r1, #27
    deb6:	d304      	bcc.n	dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    deb8:	88c0      	ldrh	r0, [r0, #6]
    deba:	4290      	cmp	r0, r2
    debc:	d301      	bcc.n	dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    debe:	2001      	movs	r0, #1
    dec0:	4770      	bx	lr
    dec2:	2000      	movs	r0, #0
    dec4:	4770      	bx	lr

0000dec6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    dec6:	7901      	ldrb	r1, [r0, #4]
    dec8:	0749      	lsls	r1, r1, #29
    deca:	d004      	beq.n	ded6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    decc:	7940      	ldrb	r0, [r0, #5]
    dece:	0740      	lsls	r0, r0, #29
    ded0:	d001      	beq.n	ded6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    ded2:	2001      	movs	r0, #1
    ded4:	4770      	bx	lr
    ded6:	2000      	movs	r0, #0
    ded8:	4770      	bx	lr

0000deda <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    deda:	88c0      	ldrh	r0, [r0, #6]
    dedc:	4770      	bx	lr

0000dede <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    dede:	7901      	ldrb	r1, [r0, #4]
    dee0:	7940      	ldrb	r0, [r0, #5]
    dee2:	f001 0107 	and.w	r1, r1, #7
    dee6:	1e4a      	subs	r2, r1, #1
    dee8:	f000 0007 	and.w	r0, r0, #7
    deec:	4011      	ands	r1, r2
    deee:	1e42      	subs	r2, r0, #1
    def0:	4010      	ands	r0, r2
    def2:	4301      	orrs	r1, r0
    def4:	d001      	beq.n	defa <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    def6:	2000      	movs	r0, #0
    def8:	4770      	bx	lr
    defa:	2001      	movs	r0, #1
    defc:	4770      	bx	lr

0000defe <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    defe:	7900      	ldrb	r0, [r0, #4]
    df00:	4770      	bx	lr

0000df02 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    df02:	7940      	ldrb	r0, [r0, #5]
    df04:	4770      	bx	lr

0000df06 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    df06:	7900      	ldrb	r0, [r0, #4]
    df08:	4770      	bx	lr

0000df0a <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    df0a:	7101      	strb	r1, [r0, #4]
    df0c:	4770      	bx	lr

0000df0e <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    df0e:	7940      	ldrb	r0, [r0, #5]
    df10:	4770      	bx	lr

0000df12 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    df12:	7141      	strb	r1, [r0, #5]
    df14:	4770      	bx	lr

0000df16 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    df16:	b510      	push	{r4, lr}
    df18:	2a1b      	cmp	r2, #27
    df1a:	d904      	bls.n	df26 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    df1c:	f240 4182 	movw	r1, #1154	; 0x482
    df20:	202a      	movs	r0, #42	; 0x2a
    df22:	f7f6 fb13 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df26:	7042      	strb	r2, [r0, #1]
    df28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df2c:	1cc0      	adds	r0, r0, #3
    df2e:	f7fe baa4 	b.w	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000df32 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    df32:	7802      	ldrb	r2, [r0, #0]
    df34:	f001 0103 	and.w	r1, r1, #3
    df38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    df3c:	430a      	orrs	r2, r1
    df3e:	7002      	strb	r2, [r0, #0]
    df40:	4770      	bx	lr

0000df42 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    df42:	7101      	strb	r1, [r0, #4]
    df44:	0a09      	lsrs	r1, r1, #8
    df46:	7141      	strb	r1, [r0, #5]
    df48:	4770      	bx	lr

0000df4a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    df4a:	7181      	strb	r1, [r0, #6]
    df4c:	0a09      	lsrs	r1, r1, #8
    df4e:	71c1      	strb	r1, [r0, #7]
    df50:	4770      	bx	lr

0000df52 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    df52:	7201      	strb	r1, [r0, #8]
    df54:	0a09      	lsrs	r1, r1, #8
    df56:	7241      	strb	r1, [r0, #9]
    df58:	4770      	bx	lr

0000df5a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    df5a:	7281      	strb	r1, [r0, #10]
    df5c:	0a09      	lsrs	r1, r1, #8
    df5e:	72c1      	strb	r1, [r0, #11]
    df60:	4770      	bx	lr

0000df62 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    df62:	7900      	ldrb	r0, [r0, #4]
    df64:	4770      	bx	lr

0000df66 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    df66:	7900      	ldrb	r0, [r0, #4]
    df68:	4770      	bx	lr
    df6a:	b570      	push	{r4, r5, r6, lr}
    df6c:	f8d0 201f 	ldr.w	r2, [r0, #31]
    df70:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    df74:	f012 0fff 	tst.w	r2, #255	; 0xff
    df78:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    df7c:	d108      	bne.n	df90 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    df7e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    df82:	b92c      	cbnz	r4, df90 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    df84:	f3c2 4407 	ubfx	r4, r2, #16, #8
    df88:	b914      	cbnz	r4, df90 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    df8a:	0e12      	lsrs	r2, r2, #24
    df8c:	d100      	bne.n	df90 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    df8e:	b34b      	cbz	r3, dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    df90:	7846      	ldrb	r6, [r0, #1]
    df92:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    df96:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    df9a:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    df9e:	7d83      	ldrb	r3, [r0, #22]
    dfa0:	2e22      	cmp	r6, #34	; 0x22
    dfa2:	d11f      	bne.n	dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfa4:	b131      	cbz	r1, dfb4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dfa6:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dfaa:	d903      	bls.n	dfb4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dfac:	f640 5107 	movw	r1, #3335	; 0xd07
    dfb0:	428a      	cmp	r2, r1
    dfb2:	d90b      	bls.n	dfcc <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    dfb4:	1f91      	subs	r1, r2, #6
    dfb6:	f640 467a 	movw	r6, #3194	; 0xc7a
    dfba:	42b1      	cmp	r1, r6
    dfbc:	d812      	bhi.n	dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfbe:	b18b      	cbz	r3, dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfc0:	2b08      	cmp	r3, #8
    dfc2:	d80f      	bhi.n	dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfc4:	4293      	cmp	r3, r2
    dfc6:	d20d      	bcs.n	dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfc8:	4295      	cmp	r5, r2
    dfca:	d80b      	bhi.n	dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfcc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    dfd0:	d208      	bcs.n	dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfd2:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    dfd6:	f640 4176 	movw	r1, #3190	; 0xc76
    dfda:	380a      	subs	r0, #10
    dfdc:	4288      	cmp	r0, r1
    dfde:	d801      	bhi.n	dfe4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfe0:	2001      	movs	r0, #1
    dfe2:	bd70      	pop	{r4, r5, r6, pc}
    dfe4:	2000      	movs	r0, #0
    dfe6:	bd70      	pop	{r4, r5, r6, pc}

0000dfe8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    dfe8:	6841      	ldr	r1, [r0, #4]
    dfea:	2200      	movs	r2, #0
    dfec:	f891 321a 	ldrb.w	r3, [r1, #538]	; 0x21a
    dff0:	2b00      	cmp	r3, #0
    dff2:	d004      	beq.n	dffe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    dff4:	f881 221a 	strb.w	r2, [r1, #538]	; 0x21a
    dff8:	6840      	ldr	r0, [r0, #4]
    dffa:	f000 bd53 	b.w	eaa4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    dffe:	4770      	bx	lr

0000e000 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e000:	b510      	push	{r4, lr}
    e002:	7901      	ldrb	r1, [r0, #4]
    e004:	b119      	cbz	r1, e00e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e006:	2901      	cmp	r1, #1
    e008:	d006      	beq.n	e018 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e00a:	2000      	movs	r0, #0
    e00c:	bd10      	pop	{r4, pc}
    e00e:	8842      	ldrh	r2, [r0, #2]
    e010:	6883      	ldr	r3, [r0, #8]
    e012:	8800      	ldrh	r0, [r0, #0]
    e014:	2102      	movs	r1, #2
    e016:	e003      	b.n	e020 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e018:	8842      	ldrh	r2, [r0, #2]
    e01a:	6883      	ldr	r3, [r0, #8]
    e01c:	8800      	ldrh	r0, [r0, #0]
    e01e:	2101      	movs	r1, #1
    e020:	f7f8 f9b0 	bl	6384 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e024:	b908      	cbnz	r0, e02a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e026:	f7f8 f9f9 	bl	641c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e02a:	2001      	movs	r0, #1
    e02c:	bd10      	pop	{r4, pc}

0000e02e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e02e:	f7f8 bc3f 	b.w	68b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    e032:	b570      	push	{r4, r5, r6, lr}
    e034:	b180      	cbz	r0, e058 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2a>
    e036:	4604      	mov	r4, r0
    e038:	2300      	movs	r3, #0
    e03a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    e03e:	2a12      	cmp	r2, #18
    e040:	d047      	beq.n	e0d2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    e042:	dc0c      	bgt.n	e05e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x30>
    e044:	f1a2 0207 	sub.w	r2, r2, #7
    e048:	2a08      	cmp	r2, #8
    e04a:	d210      	bcs.n	e06e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    e04c:	e8df f002 	tbb	[pc, r2]
    e050:	0f0f1435 	.word	0x0f0f1435
    e054:	3b0f212a 	.word	0x3b0f212a
    e058:	f240 11d1 	movw	r1, #465	; 0x1d1
    e05c:	e009      	b.n	e072 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e05e:	2a13      	cmp	r2, #19
    e060:	d058      	beq.n	e114 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe6>
    e062:	2a1c      	cmp	r2, #28
    e064:	d04f      	beq.n	e106 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd8>
    e066:	2a1e      	cmp	r2, #30
    e068:	d03e      	beq.n	e0e8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xba>
    e06a:	2a1f      	cmp	r2, #31
    e06c:	d047      	beq.n	e0fe <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd0>
    e06e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    e072:	2010      	movs	r0, #16
    e074:	f7f6 fa6a 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e078:	704b      	strb	r3, [r1, #1]
    e07a:	2207      	movs	r2, #7
    e07c:	700a      	strb	r2, [r1, #0]
    e07e:	84e3      	strh	r3, [r4, #38]	; 0x26
    e080:	f850 2f80 	ldr.w	r2, [r0, #128]!
    e084:	604a      	str	r2, [r1, #4]
    e086:	6842      	ldr	r2, [r0, #4]
    e088:	608a      	str	r2, [r1, #8]
    e08a:	8900      	ldrh	r0, [r0, #8]
    e08c:	8188      	strh	r0, [r1, #12]
    e08e:	710b      	strb	r3, [r1, #4]
    e090:	bd70      	pop	{r4, r5, r6, pc}
    e092:	704b      	strb	r3, [r1, #1]
    e094:	220c      	movs	r2, #12
    e096:	700a      	strb	r2, [r1, #0]
    e098:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    e09c:	7108      	strb	r0, [r1, #4]
    e09e:	8820      	ldrh	r0, [r4, #0]
    e0a0:	80c8      	strh	r0, [r1, #6]
    e0a2:	bd70      	pop	{r4, r5, r6, pc}
    e0a4:	704b      	strb	r3, [r1, #1]
    e0a6:	220b      	movs	r2, #11
    e0a8:	700a      	strb	r2, [r1, #0]
    e0aa:	f810 2fc2 	ldrb.w	r2, [r0, #194]!
    e0ae:	710a      	strb	r2, [r1, #4]
    e0b0:	8822      	ldrh	r2, [r4, #0]
    e0b2:	80ca      	strh	r2, [r1, #6]
    e0b4:	7900      	ldrb	r0, [r0, #4]
    e0b6:	7208      	strb	r0, [r1, #8]
    e0b8:	bd70      	pop	{r4, r5, r6, pc}
    e0ba:	704b      	strb	r3, [r1, #1]
    e0bc:	2206      	movs	r2, #6
    e0be:	700a      	strb	r2, [r1, #0]
    e0c0:	f850 2f6a 	ldr.w	r2, [r0, #106]!
    e0c4:	e00a      	b.n	e0dc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xae>
    e0c6:	704b      	strb	r3, [r1, #1]
    e0c8:	200e      	movs	r0, #14
    e0ca:	7008      	strb	r0, [r1, #0]
    e0cc:	8820      	ldrh	r0, [r4, #0]
    e0ce:	8088      	strh	r0, [r1, #4]
    e0d0:	bd70      	pop	{r4, r5, r6, pc}
    e0d2:	704b      	strb	r3, [r1, #1]
    e0d4:	2212      	movs	r2, #18
    e0d6:	700a      	strb	r2, [r1, #0]
    e0d8:	f850 2f22 	ldr.w	r2, [r0, #34]!
    e0dc:	604a      	str	r2, [r1, #4]
    e0de:	6842      	ldr	r2, [r0, #4]
    e0e0:	608a      	str	r2, [r1, #8]
    e0e2:	6880      	ldr	r0, [r0, #8]
    e0e4:	60c8      	str	r0, [r1, #12]
    e0e6:	bd70      	pop	{r4, r5, r6, pc}
    e0e8:	704b      	strb	r3, [r1, #1]
    e0ea:	221a      	movs	r2, #26
    e0ec:	700a      	strb	r2, [r1, #0]
    e0ee:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e0f0:	604a      	str	r2, [r1, #4]
    e0f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    e0f4:	608a      	str	r2, [r1, #8]
    e0f6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e0fa:	8188      	strh	r0, [r1, #12]
    e0fc:	bd70      	pop	{r4, r5, r6, pc}
    e0fe:	221b      	movs	r2, #27
    e100:	700a      	strb	r2, [r1, #0]
    e102:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    e104:	e004      	b.n	e110 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe2>
    e106:	704b      	strb	r3, [r1, #1]
    e108:	2218      	movs	r2, #24
    e10a:	700a      	strb	r2, [r1, #0]
    e10c:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e110:	6048      	str	r0, [r1, #4]
    e112:	bd70      	pop	{r4, r5, r6, pc}
    e114:	704b      	strb	r3, [r1, #1]
    e116:	2213      	movs	r2, #19
    e118:	700a      	strb	r2, [r1, #0]
    e11a:	f850 2f5a 	ldr.w	r2, [r0, #90]!
    e11e:	604a      	str	r2, [r1, #4]
    e120:	8880      	ldrh	r0, [r0, #4]
    e122:	8108      	strh	r0, [r1, #8]
    e124:	bd70      	pop	{r4, r5, r6, pc}
    e126:	2000      	movs	r0, #0
    e128:	7048      	strb	r0, [r1, #1]
    e12a:	2003      	movs	r0, #3
    e12c:	7008      	strb	r0, [r1, #0]
    e12e:	2001      	movs	r0, #1
    e130:	7108      	strb	r0, [r1, #4]
    e132:	4770      	bx	lr

0000e134 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e134:	b4f0      	push	{r4, r5, r6, r7}
    e136:	8150      	strh	r0, [r2, #10]
    e138:	890d      	ldrh	r5, [r1, #8]
    e13a:	4614      	mov	r4, r2
    e13c:	8195      	strh	r5, [r2, #12]
    e13e:	898a      	ldrh	r2, [r1, #12]
    e140:	81e2      	strh	r2, [r4, #14]
    e142:	8948      	ldrh	r0, [r1, #10]
    e144:	8220      	strh	r0, [r4, #16]
    e146:	89ce      	ldrh	r6, [r1, #14]
    e148:	8266      	strh	r6, [r4, #18]
    e14a:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    e14c:	42b7      	cmp	r7, r6
    e14e:	d108      	bne.n	e162 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e150:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    e152:	4286      	cmp	r6, r0
    e154:	d105      	bne.n	e162 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e156:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    e158:	4296      	cmp	r6, r2
    e15a:	d102      	bne.n	e162 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e15c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    e15e:	42aa      	cmp	r2, r5
    e160:	d001      	beq.n	e166 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e162:	2201      	movs	r2, #1
    e164:	e000      	b.n	e168 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    e166:	2200      	movs	r2, #0
    e168:	7522      	strb	r2, [r4, #20]
    e16a:	8548      	strh	r0, [r1, #42]	; 0x2a
    e16c:	8a60      	ldrh	r0, [r4, #18]
    e16e:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e170:	89a0      	ldrh	r0, [r4, #12]
    e172:	8588      	strh	r0, [r1, #44]	; 0x2c
    e174:	89e0      	ldrh	r0, [r4, #14]
    e176:	8608      	strh	r0, [r1, #48]	; 0x30
    e178:	4620      	mov	r0, r4
    e17a:	bcf0      	pop	{r4, r5, r6, r7}
    e17c:	2212      	movs	r2, #18
    e17e:	4619      	mov	r1, r3
    e180:	f7f8 b956 	b.w	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000e184 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e184:	b510      	push	{r4, lr}
    e186:	888c      	ldrh	r4, [r1, #4]
    e188:	890a      	ldrh	r2, [r1, #8]
    e18a:	884b      	ldrh	r3, [r1, #2]
    e18c:	88c9      	ldrh	r1, [r1, #6]
    e18e:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e192:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e196:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e19a:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e19e:	bd10      	pop	{r4, pc}

0000e1a0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e1a0:	b570      	push	{r4, r5, r6, lr}
    e1a2:	4615      	mov	r5, r2
    e1a4:	460c      	mov	r4, r1
    e1a6:	f000 f8cc 	bl	e342 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e1aa:	3096      	adds	r0, #150	; 0x96
    e1ac:	4428      	add	r0, r5
    e1ae:	42a0      	cmp	r0, r4
    e1b0:	d801      	bhi.n	e1b6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1b2:	1a20      	subs	r0, r4, r0
    e1b4:	bd70      	pop	{r4, r5, r6, pc}
    e1b6:	2000      	movs	r0, #0
    e1b8:	bd70      	pop	{r4, r5, r6, pc}

0000e1ba <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1be:	4604      	mov	r4, r0
    e1c0:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1c2:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1c4:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1c8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1cc:	4285      	cmp	r5, r0
    e1ce:	d300      	bcc.n	e1d2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1d0:	4605      	mov	r5, r0
    e1d2:	4620      	mov	r0, r4
    e1d4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e1d8:	f000 f8a3 	bl	e322 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    e1dc:	4601      	mov	r1, r0
    e1de:	86e5      	strh	r5, [r4, #54]	; 0x36
    e1e0:	8761      	strh	r1, [r4, #58]	; 0x3a
    e1e2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e1e4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e1e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e1ea:	4680      	mov	r8, r0
    e1ec:	42aa      	cmp	r2, r5
    e1ee:	d200      	bcs.n	e1f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e1f0:	462a      	mov	r2, r5
    e1f2:	428b      	cmp	r3, r1
    e1f4:	d200      	bcs.n	e1f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e1f6:	460b      	mov	r3, r1
    e1f8:	8202      	strh	r2, [r0, #16]
    e1fa:	f8a8 3012 	strh.w	r3, [r8, #18]
    e1fe:	42bd      	cmp	r5, r7
    e200:	d101      	bne.n	e206 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e202:	42b1      	cmp	r1, r6
    e204:	d001      	beq.n	e20a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e206:	2001      	movs	r0, #1
    e208:	e000      	b.n	e20c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e20a:	2000      	movs	r0, #0
    e20c:	4681      	mov	r9, r0
    e20e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e212:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e216:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e218:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e21a:	4285      	cmp	r5, r0
    e21c:	d300      	bcc.n	e220 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e21e:	4605      	mov	r5, r0
    e220:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e224:	4620      	mov	r0, r4
    e226:	f000 f884 	bl	e332 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e22a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e22e:	2902      	cmp	r1, #2
    e230:	d108      	bne.n	e244 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e232:	42af      	cmp	r7, r5
    e234:	d200      	bcs.n	e238 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e236:	463d      	mov	r5, r7
    e238:	4286      	cmp	r6, r0
    e23a:	d200      	bcs.n	e23e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e23c:	4630      	mov	r0, r6
    e23e:	2100      	movs	r1, #0
    e240:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e244:	f8a8 5008 	strh.w	r5, [r8, #8]
    e248:	f8a8 000c 	strh.w	r0, [r8, #12]
    e24c:	42bd      	cmp	r5, r7
    e24e:	d101      	bne.n	e254 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e250:	42b0      	cmp	r0, r6
    e252:	d001      	beq.n	e258 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e254:	2001      	movs	r0, #1
    e256:	e000      	b.n	e25a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e258:	2000      	movs	r0, #0
    e25a:	ea40 0009 	orr.w	r0, r0, r9
    e25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e262 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e262:	6840      	ldr	r0, [r0, #4]
    e264:	4770      	bx	lr

0000e266 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e26a:	4616      	mov	r6, r2
    e26c:	460f      	mov	r7, r1
    e26e:	4604      	mov	r4, r0
    e270:	f000 f867 	bl	e342 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e274:	4605      	mov	r5, r0
    e276:	463a      	mov	r2, r7
    e278:	6921      	ldr	r1, [r4, #16]
    e27a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e27c:	f000 f84c 	bl	e318 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e280:	19a9      	adds	r1, r5, r6
    e282:	4281      	cmp	r1, r0
    e284:	d300      	bcc.n	e288 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e286:	4608      	mov	r0, r1
    e288:	6320      	str	r0, [r4, #48]	; 0x30
    e28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e28e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e28e:	221b      	movs	r2, #27
    e290:	8402      	strh	r2, [r0, #32]
    e292:	8382      	strh	r2, [r0, #28]
    e294:	82c2      	strh	r2, [r0, #22]
    e296:	8282      	strh	r2, [r0, #20]
    e298:	8142      	strh	r2, [r0, #10]
    e29a:	8202      	strh	r2, [r0, #16]
    e29c:	8102      	strh	r2, [r0, #8]
    e29e:	8542      	strh	r2, [r0, #42]	; 0x2a
    e2a0:	8582      	strh	r2, [r0, #44]	; 0x2c
    e2a2:	8482      	strh	r2, [r0, #36]	; 0x24
    e2a4:	2900      	cmp	r1, #0
    e2a6:	d10a      	bne.n	e2be <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e2a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e2ac:	8441      	strh	r1, [r0, #34]	; 0x22
    e2ae:	83c1      	strh	r1, [r0, #30]
    e2b0:	8341      	strh	r1, [r0, #26]
    e2b2:	8301      	strh	r1, [r0, #24]
    e2b4:	81c1      	strh	r1, [r0, #14]
    e2b6:	8241      	strh	r1, [r0, #18]
    e2b8:	8181      	strh	r1, [r0, #12]
    e2ba:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2bc:	8601      	strh	r1, [r0, #48]	; 0x30
    e2be:	4770      	bx	lr

0000e2c0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2c0:	6800      	ldr	r0, [r0, #0]
    e2c2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2c6:	4290      	cmp	r0, r2
    e2c8:	d903      	bls.n	e2d2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2ca:	1a40      	subs	r0, r0, r1
    e2cc:	389c      	subs	r0, #156	; 0x9c
    e2ce:	0840      	lsrs	r0, r0, #1
    e2d0:	4770      	bx	lr
    e2d2:	2000      	movs	r0, #0
    e2d4:	4770      	bx	lr

0000e2d6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2d6:	b510      	push	{r4, lr}
    e2d8:	9c02      	ldr	r4, [sp, #8]
    e2da:	8281      	strh	r1, [r0, #20]
    e2dc:	82c2      	strh	r2, [r0, #22]
    e2de:	8303      	strh	r3, [r0, #24]
    e2e0:	8344      	strh	r4, [r0, #26]
    e2e2:	bd10      	pop	{r4, pc}

0000e2e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e2e4:	b430      	push	{r4, r5}
    e2e6:	8150      	strh	r0, [r2, #10]
    e2e8:	8a88      	ldrh	r0, [r1, #20]
    e2ea:	8190      	strh	r0, [r2, #12]
    e2ec:	8ac8      	ldrh	r0, [r1, #22]
    e2ee:	81d0      	strh	r0, [r2, #14]
    e2f0:	8b08      	ldrh	r0, [r1, #24]
    e2f2:	8210      	strh	r0, [r2, #16]
    e2f4:	8b48      	ldrh	r0, [r1, #26]
    e2f6:	4614      	mov	r4, r2
    e2f8:	8250      	strh	r0, [r2, #18]
    e2fa:	4620      	mov	r0, r4
    e2fc:	bc30      	pop	{r4, r5}
    e2fe:	221e      	movs	r2, #30
    e300:	4619      	mov	r1, r3
    e302:	f7f8 b895 	b.w	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e306:	2902      	cmp	r1, #2
    e308:	d003      	beq.n	e312 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    e30a:	00c0      	lsls	r0, r0, #3
    e30c:	3070      	adds	r0, #112	; 0x70
    e30e:	b280      	uxth	r0, r0
    e310:	4770      	bx	lr
    e312:	0080      	lsls	r0, r0, #2
    e314:	303c      	adds	r0, #60	; 0x3c
    e316:	e7fa      	b.n	e30e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e318:	4288      	cmp	r0, r1
    e31a:	d300      	bcc.n	e31e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    e31c:	4608      	mov	r0, r1
    e31e:	1a80      	subs	r0, r0, r2
    e320:	4770      	bx	lr
    e322:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e326:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e32a:	4281      	cmp	r1, r0
    e32c:	d200      	bcs.n	e330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    e32e:	4608      	mov	r0, r1
    e330:	4770      	bx	lr
    e332:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e336:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e33a:	4281      	cmp	r1, r0
    e33c:	d200      	bcs.n	e340 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    e33e:	4608      	mov	r0, r1
    e340:	4770      	bx	lr
    e342:	2196      	movs	r1, #150	; 0x96
    e344:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e348:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e34c:	f000 b800 	b.w	e350 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e354:	460d      	mov	r5, r1
    e356:	4606      	mov	r6, r0
    e358:	4698      	mov	r8, r3
    e35a:	4617      	mov	r7, r2
    e35c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e35e:	4611      	mov	r1, r2
    e360:	f7ff ffd1 	bl	e306 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    e364:	4604      	mov	r4, r0
    e366:	4639      	mov	r1, r7
    e368:	4630      	mov	r0, r6
    e36a:	f7ff ffe2 	bl	e332 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e36e:	42a0      	cmp	r0, r4
    e370:	d200      	bcs.n	e374 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    e372:	4604      	mov	r4, r0
    e374:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e376:	4641      	mov	r1, r8
    e378:	f7ff ffc5 	bl	e306 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    e37c:	4607      	mov	r7, r0
    e37e:	4641      	mov	r1, r8
    e380:	4630      	mov	r0, r6
    e382:	f7ff ffce 	bl	e322 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    e386:	42b8      	cmp	r0, r7
    e388:	d300      	bcc.n	e38c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    e38a:	4638      	mov	r0, r7
    e38c:	4420      	add	r0, r4
    e38e:	4428      	add	r0, r5
    e390:	1d80      	adds	r0, r0, #6
    e392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e396:	b510      	push	{r4, lr}
    e398:	4604      	mov	r4, r0
    e39a:	2108      	movs	r1, #8
    e39c:	4620      	mov	r0, r4
    e39e:	f7f6 f983 	bl	46a8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e3a2:	6820      	ldr	r0, [r4, #0]
    e3a4:	2800      	cmp	r0, #0
    e3a6:	d102      	bne.n	e3ae <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xca>
    e3a8:	6860      	ldr	r0, [r4, #4]
    e3aa:	2800      	cmp	r0, #0
    e3ac:	d0f5      	beq.n	e39a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e3ae:	bd10      	pop	{r4, pc}

0000e3b0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e3b0:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e3b4:	2255      	movs	r2, #85	; 0x55
    e3b6:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e3ba:	4408      	add	r0, r1
    e3bc:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e3c0:	2233      	movs	r2, #51	; 0x33
    e3c2:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e3c6:	4408      	add	r0, r1
    e3c8:	f000 010f 	and.w	r1, r0, #15
    e3cc:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e3d0:	4770      	bx	lr

0000e3d2 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e3d2:	b510      	push	{r4, lr}
    e3d4:	6844      	ldr	r4, [r0, #4]
    e3d6:	7803      	ldrb	r3, [r0, #0]
    e3d8:	2100      	movs	r1, #0
    e3da:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
    e3de:	3480      	adds	r4, #128	; 0x80
    e3e0:	4620      	mov	r0, r4
    e3e2:	f7ff fa92 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e3e6:	b110      	cbz	r0, e3ee <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e3e8:	2004      	movs	r0, #4
    e3ea:	7560      	strb	r0, [r4, #21]
    e3ec:	bd10      	pop	{r4, pc}
    e3ee:	2188      	movs	r1, #136	; 0x88
    e3f0:	201c      	movs	r0, #28
    e3f2:	f7f6 f8ab 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e3f6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e3f6:	b510      	push	{r4, lr}
    e3f8:	6841      	ldr	r1, [r0, #4]
    e3fa:	f891 2084 	ldrb.w	r2, [r1, #132]	; 0x84
    e3fe:	07d2      	lsls	r2, r2, #31
    e400:	d00b      	beq.n	e41a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e402:	f811 2fd2 	ldrb.w	r2, [r1, #210]!
    e406:	1e52      	subs	r2, r2, #1
    e408:	b252      	sxtb	r2, r2
    e40a:	700a      	strb	r2, [r1, #0]
    e40c:	6840      	ldr	r0, [r0, #4]
    e40e:	2a00      	cmp	r2, #0
    e410:	da05      	bge.n	e41e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e412:	2197      	movs	r1, #151	; 0x97
    e414:	201c      	movs	r0, #28
    e416:	f7f6 f899 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e41a:	2195      	movs	r1, #149	; 0x95
    e41c:	e7fa      	b.n	e414 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e41e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    e422:	f021 0101 	bic.w	r1, r1, #1
    e426:	6001      	str	r1, [r0, #0]
    e428:	bd10      	pop	{r4, pc}

0000e42a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    e42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e42c:	6841      	ldr	r1, [r0, #4]
    e42e:	4606      	mov	r6, r0
    e430:	460c      	mov	r4, r1
    e432:	3180      	adds	r1, #128	; 0x80
    e434:	460d      	mov	r5, r1
    e436:	4620      	mov	r0, r4
    e438:	f000 f820 	bl	e47c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x52>
    e43c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    e440:	2901      	cmp	r1, #1
    e442:	d11a      	bne.n	e47a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e444:	2800      	cmp	r0, #0
    e446:	d018      	beq.n	e47a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e448:	6870      	ldr	r0, [r6, #4]
    e44a:	4601      	mov	r1, r0
    e44c:	f890 214c 	ldrb.w	r2, [r0, #332]	; 0x14c
    e450:	f88d 2000 	strb.w	r2, [sp]
    e454:	9a00      	ldr	r2, [sp, #0]
    e456:	9200      	str	r2, [sp, #0]
    e458:	f89d 2000 	ldrb.w	r2, [sp]
    e45c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    e460:	2a00      	cmp	r2, #0
    e462:	d10a      	bne.n	e47a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e464:	8822      	ldrh	r2, [r4, #0]
    e466:	8142      	strh	r2, [r0, #10]
    e468:	7c6a      	ldrb	r2, [r5, #17]
    e46a:	7302      	strb	r2, [r0, #12]
    e46c:	7caa      	ldrb	r2, [r5, #18]
    e46e:	7342      	strb	r2, [r0, #13]
    e470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e474:	221c      	movs	r2, #28
    e476:	f7f7 bfdb 	b.w	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e47c:	b538      	push	{r3, r4, r5, lr}
    e47e:	4605      	mov	r5, r0
    e480:	460c      	mov	r4, r1
    e482:	4668      	mov	r0, sp
    e484:	f7fc fe54 	bl	b130 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e488:	b338      	cbz	r0, e4da <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb0>
    e48a:	f99d 1000 	ldrsb.w	r1, [sp]
    e48e:	7461      	strb	r1, [r4, #17]
    e490:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    e494:	74a0      	strb	r0, [r4, #18]
    e496:	6820      	ldr	r0, [r4, #0]
    e498:	f7f8 fb04 	bl	6aa4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    e49c:	6020      	str	r0, [r4, #0]
    e49e:	f99d 2000 	ldrsb.w	r2, [sp]
    e4a2:	f994 1013 	ldrsb.w	r1, [r4, #19]
    e4a6:	2000      	movs	r0, #0
    e4a8:	1a51      	subs	r1, r2, r1
    e4aa:	d500      	bpl.n	e4ae <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x84>
    e4ac:	4249      	negs	r1, r1
    e4ae:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    e4b2:	428b      	cmp	r3, r1
    e4b4:	dc10      	bgt.n	e4d8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4b6:	2bff      	cmp	r3, #255	; 0xff
    e4b8:	d00e      	beq.n	e4d8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4ba:	7d21      	ldrb	r1, [r4, #20]
    e4bc:	1c49      	adds	r1, r1, #1
    e4be:	b2c9      	uxtb	r1, r1
    e4c0:	7521      	strb	r1, [r4, #20]
    e4c2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    e4c6:	4299      	cmp	r1, r3
    e4c8:	d802      	bhi.n	e4d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xa6>
    e4ca:	7ce1      	ldrb	r1, [r4, #19]
    e4cc:	297f      	cmp	r1, #127	; 0x7f
    e4ce:	d103      	bne.n	e4d8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4d0:	74e2      	strb	r2, [r4, #19]
    e4d2:	2000      	movs	r0, #0
    e4d4:	7520      	strb	r0, [r4, #20]
    e4d6:	2001      	movs	r0, #1
    e4d8:	bd38      	pop	{r3, r4, r5, pc}
    e4da:	207f      	movs	r0, #127	; 0x7f
    e4dc:	7460      	strb	r0, [r4, #17]
    e4de:	2000      	movs	r0, #0
    e4e0:	bd38      	pop	{r3, r4, r5, pc}
    e4e2:	2801      	cmp	r0, #1
    e4e4:	d102      	bne.n	e4ec <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc2>
    e4e6:	7948      	ldrb	r0, [r1, #5]
    e4e8:	0980      	lsrs	r0, r0, #6
    e4ea:	d001      	beq.n	e4f0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc6>
    e4ec:	2000      	movs	r0, #0
    e4ee:	4770      	bx	lr
    e4f0:	2001      	movs	r0, #1
    e4f2:	4770      	bx	lr
    e4f4:	2801      	cmp	r0, #1
    e4f6:	d106      	bne.n	e506 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    e4f8:	7948      	ldrb	r0, [r1, #5]
    e4fa:	2101      	movs	r1, #1
    e4fc:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e500:	d101      	bne.n	e506 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    e502:	2001      	movs	r0, #1
    e504:	4770      	bx	lr
    e506:	2000      	movs	r0, #0
    e508:	4770      	bx	lr
    e50a:	2802      	cmp	r0, #2
    e50c:	d003      	beq.n	e516 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    e50e:	2803      	cmp	r0, #3
    e510:	d001      	beq.n	e516 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    e512:	2000      	movs	r0, #0
    e514:	4770      	bx	lr
    e516:	2001      	movs	r0, #1
    e518:	4770      	bx	lr

0000e51a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e51a:	b510      	push	{r4, lr}
    e51c:	4604      	mov	r4, r0
    e51e:	7c00      	ldrb	r0, [r0, #16]
    e520:	f7ff fff3 	bl	e50a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    e524:	b148      	cbz	r0, e53a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e526:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e52a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e52e:	f7ff f98e 	bl	d84e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e532:	2808      	cmp	r0, #8
    e534:	d001      	beq.n	e53a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e536:	2001      	movs	r0, #1
    e538:	bd10      	pop	{r4, pc}
    e53a:	7c20      	ldrb	r0, [r4, #16]
    e53c:	b118      	cbz	r0, e546 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e53e:	2802      	cmp	r0, #2
    e540:	d001      	beq.n	e546 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e542:	7de0      	ldrb	r0, [r4, #23]
    e544:	bd10      	pop	{r4, pc}
    e546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e54a:	2000      	movs	r0, #0
    e54c:	f7f6 bec6 	b.w	52dc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e550 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e550:	b508      	push	{r3, lr}
    e552:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e556:	f88d 1000 	strb.w	r1, [sp]
    e55a:	9900      	ldr	r1, [sp, #0]
    e55c:	9100      	str	r1, [sp, #0]
    e55e:	f89d 1000 	ldrb.w	r1, [sp]
    e562:	b109      	cbz	r1, e568 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e564:	2001      	movs	r0, #1
    e566:	bd08      	pop	{r3, pc}
    e568:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e56c:	f88d 0000 	strb.w	r0, [sp]
    e570:	9800      	ldr	r0, [sp, #0]
    e572:	9000      	str	r0, [sp, #0]
    e574:	f89d 0000 	ldrb.w	r0, [sp]
    e578:	2000      	movs	r0, #0
    e57a:	bd08      	pop	{r3, pc}

0000e57c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e57c:	20ff      	movs	r0, #255	; 0xff
    e57e:	7008      	strb	r0, [r1, #0]
    e580:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e582:	f7ff b869 	b.w	d658 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e586 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e586:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e588:	460d      	mov	r5, r1
    e58a:	4604      	mov	r4, r0
    e58c:	f44f 728c 	mov.w	r2, #280	; 0x118
    e590:	2100      	movs	r1, #0
    e592:	f7fd ffec 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e596:	20ff      	movs	r0, #255	; 0xff
    e598:	7020      	strb	r0, [r4, #0]
    e59a:	207f      	movs	r0, #127	; 0x7f
    e59c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e5a0:	2013      	movs	r0, #19
    e5a2:	8060      	strh	r0, [r4, #2]
    e5a4:	f242 7010 	movw	r0, #10000	; 0x2710
    e5a8:	8460      	strh	r0, [r4, #34]	; 0x22
    e5aa:	f7f6 fc85 	bl	4eb8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e5ae:	4601      	mov	r1, r0
    e5b0:	6360      	str	r0, [r4, #52]	; 0x34
    e5b2:	2200      	movs	r2, #0
    e5b4:	4668      	mov	r0, sp
    e5b6:	f7fe ffb9 	bl	d52c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e5ba:	2200      	movs	r2, #0
    e5bc:	2101      	movs	r1, #1
    e5be:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e5c0:	f7ff f82a 	bl	d618 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e5c4:	2204      	movs	r2, #4
    e5c6:	4668      	mov	r0, sp
    e5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e5ca:	f7fe ffaf 	bl	d52c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e5ce:	2200      	movs	r2, #0
    e5d0:	4611      	mov	r1, r2
    e5d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e5d4:	f7ff f820 	bl	d618 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e5d8:	73a5      	strb	r5, [r4, #14]
    e5da:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e5de:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e5e2:	f000 b9b9 	b.w	e958 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e5e6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e5e6:	7880      	ldrb	r0, [r0, #2]
    e5e8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e5ec:	b108      	cbz	r0, e5f2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e5ee:	2000      	movs	r0, #0
    e5f0:	4770      	bx	lr
    e5f2:	201f      	movs	r0, #31
    e5f4:	4770      	bx	lr

0000e5f6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e5f6:	f7f8 bf33 	b.w	7460 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>

0000e5fa <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    e5fa:	b510      	push	{r4, lr}
    e5fc:	2300      	movs	r3, #0
    e5fe:	2a05      	cmp	r2, #5
    e600:	d013      	beq.n	e62a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x30>
    e602:	2a10      	cmp	r2, #16
    e604:	d018      	beq.n	e638 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3e>
    e606:	2a14      	cmp	r2, #20
    e608:	d038      	beq.n	e67c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x82>
    e60a:	2a1d      	cmp	r2, #29
    e60c:	d002      	beq.n	e614 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1a>
    e60e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    e612:	e056      	b.n	e6c2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e614:	704b      	strb	r3, [r1, #1]
    e616:	2219      	movs	r2, #25
    e618:	700a      	strb	r2, [r1, #0]
    e61a:	f850 2fbd 	ldr.w	r2, [r0, #189]!
    e61e:	604a      	str	r2, [r1, #4]
    e620:	6842      	ldr	r2, [r0, #4]
    e622:	608a      	str	r2, [r1, #8]
    e624:	7a00      	ldrb	r0, [r0, #8]
    e626:	7308      	strb	r0, [r1, #12]
    e628:	bd10      	pop	{r4, pc}
    e62a:	704b      	strb	r3, [r1, #1]
    e62c:	2205      	movs	r2, #5
    e62e:	700a      	strb	r2, [r1, #0]
    e630:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
    e634:	6048      	str	r0, [r1, #4]
    e636:	bd10      	pop	{r4, pc}
    e638:	460c      	mov	r4, r1
    e63a:	704b      	strb	r3, [r1, #1]
    e63c:	2111      	movs	r1, #17
    e63e:	7021      	strb	r1, [r4, #0]
    e640:	f100 0176 	add.w	r1, r0, #118	; 0x76
    e644:	2220      	movs	r2, #32
    e646:	1d20      	adds	r0, r4, #4
    e648:	f7fd ff17 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e64c:	2001      	movs	r0, #1
    e64e:	7220      	strb	r0, [r4, #8]
    e650:	7920      	ldrb	r0, [r4, #4]
    e652:	2800      	cmp	r0, #0
    e654:	d0ef      	beq.n	e636 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e656:	88e4      	ldrh	r4, [r4, #6]
    e658:	2100      	movs	r1, #0
    e65a:	4620      	mov	r0, r4
    e65c:	f7fe feb4 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e660:	2800      	cmp	r0, #0
    e662:	d0e8      	beq.n	e636 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e664:	8800      	ldrh	r0, [r0, #0]
    e666:	f7ff f856 	bl	d716 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e66a:	2100      	movs	r1, #0
    e66c:	4620      	mov	r0, r4
    e66e:	f7f6 f9ef 	bl	4a50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e672:	2800      	cmp	r0, #0
    e674:	d0df      	beq.n	e636 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e676:	f240 216a 	movw	r1, #618	; 0x26a
    e67a:	e022      	b.n	e6c2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e67c:	704b      	strb	r3, [r1, #1]
    e67e:	2214      	movs	r2, #20
    e680:	700a      	strb	r2, [r1, #0]
    e682:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    e686:	604a      	str	r2, [r1, #4]
    e688:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    e68c:	810a      	strh	r2, [r1, #8]
    e68e:	790a      	ldrb	r2, [r1, #4]
    e690:	2a00      	cmp	r2, #0
    e692:	d0d0      	beq.n	e636 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e694:	7880      	ldrb	r0, [r0, #2]
    e696:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e69a:	2800      	cmp	r0, #0
    e69c:	d1cb      	bne.n	e636 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e69e:	88cc      	ldrh	r4, [r1, #6]
    e6a0:	2100      	movs	r1, #0
    e6a2:	4620      	mov	r0, r4
    e6a4:	f7fe fe90 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e6a8:	2800      	cmp	r0, #0
    e6aa:	d0c4      	beq.n	e636 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6ac:	8800      	ldrh	r0, [r0, #0]
    e6ae:	f7ff f832 	bl	d716 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e6b2:	2100      	movs	r1, #0
    e6b4:	4620      	mov	r0, r4
    e6b6:	f7f6 f9cb 	bl	4a50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e6ba:	2800      	cmp	r0, #0
    e6bc:	d0bb      	beq.n	e636 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6be:	f240 219a 	movw	r1, #666	; 0x29a
    e6c2:	202d      	movs	r0, #45	; 0x2d
    e6c4:	f7f5 ff42 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e6c8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e6c8:	6880      	ldr	r0, [r0, #8]
    e6ca:	4770      	bx	lr

0000e6cc <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e6cc:	2001      	movs	r0, #1
    e6ce:	4770      	bx	lr

0000e6d0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e6d0:	b510      	push	{r4, lr}
    e6d2:	4604      	mov	r4, r0
    e6d4:	3028      	adds	r0, #40	; 0x28
    e6d6:	f000 f8ff 	bl	e8d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e6da:	8861      	ldrh	r1, [r4, #2]
    e6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6e0:	2228      	movs	r2, #40	; 0x28
    e6e2:	f7f9 b895 	b.w	7810 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e6e6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e6e6:	2200      	movs	r2, #0
    e6e8:	8602      	strh	r2, [r0, #48]	; 0x30
    e6ea:	8843      	ldrh	r3, [r0, #2]
    e6ec:	2b1d      	cmp	r3, #29
    e6ee:	d001      	beq.n	e6f4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e6f0:	7341      	strb	r1, [r0, #13]
    e6f2:	4770      	bx	lr
    e6f4:	7342      	strb	r2, [r0, #13]
    e6f6:	4770      	bx	lr

0000e6f8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e6f8:	b510      	push	{r4, lr}
    e6fa:	2400      	movs	r4, #0
    e6fc:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e6fe:	f7fe ff79 	bl	d5f4 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e702:	b100      	cbz	r0, e706 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e704:	2001      	movs	r0, #1
    e706:	4384      	bics	r4, r0
    e708:	f084 0001 	eor.w	r0, r4, #1
    e70c:	bd10      	pop	{r4, pc}

0000e70e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e70e:	2000      	movs	r0, #0
    e710:	4770      	bx	lr

0000e712 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e712:	7880      	ldrb	r0, [r0, #2]
    e714:	f000 0001 	and.w	r0, r0, #1
    e718:	4770      	bx	lr

0000e71a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e71a:	7880      	ldrb	r0, [r0, #2]
    e71c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e720:	4770      	bx	lr

0000e722 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e722:	2001      	movs	r0, #1
    e724:	4770      	bx	lr

0000e726 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e726:	7880      	ldrb	r0, [r0, #2]
    e728:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e72c:	4770      	bx	lr

0000e72e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e72e:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e732:	4770      	bx	lr

0000e734 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e734:	7800      	ldrb	r0, [r0, #0]
    e736:	28ff      	cmp	r0, #255	; 0xff
    e738:	d001      	beq.n	e73e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e73a:	2001      	movs	r0, #1
    e73c:	4770      	bx	lr
    e73e:	2000      	movs	r0, #0
    e740:	4770      	bx	lr

0000e742 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e742:	f800 1f20 	strb.w	r1, [r0, #32]!
    e746:	7042      	strb	r2, [r0, #1]
    e748:	4770      	bx	lr

0000e74a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e74a:	680a      	ldr	r2, [r1, #0]
    e74c:	f840 2f11 	str.w	r2, [r0, #17]!
    e750:	8889      	ldrh	r1, [r1, #4]
    e752:	8081      	strh	r1, [r0, #4]
    e754:	2101      	movs	r1, #1
    e756:	7181      	strb	r1, [r0, #6]
    e758:	4770      	bx	lr

0000e75a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e75a:	7b00      	ldrb	r0, [r0, #12]
    e75c:	4770      	bx	lr

0000e75e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e75e:	2001      	movs	r0, #1
    e760:	4770      	bx	lr

0000e762 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e762:	61c1      	str	r1, [r0, #28]
    e764:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e768:	724a      	strb	r2, [r1, #9]
    e76a:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e76e:	f8c1 200a 	str.w	r2, [r1, #10]
    e772:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e776:	81c8      	strh	r0, [r1, #14]
    e778:	4770      	bx	lr

0000e77a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e77a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e77e:	4770      	bx	lr

0000e780 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e780:	b510      	push	{r4, lr}
    e782:	4604      	mov	r4, r0
    e784:	7880      	ldrb	r0, [r0, #2]
    e786:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e78a:	b158      	cbz	r0, e7a4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    e78c:	233c      	movs	r3, #60	; 0x3c
    e78e:	22ff      	movs	r2, #255	; 0xff
    e790:	4620      	mov	r0, r4
    e792:	69e1      	ldr	r1, [r4, #28]
    e794:	f7f8 fe8a 	bl	74ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    e798:	2210      	movs	r2, #16
    e79a:	4621      	mov	r1, r4
    e79c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    e7a0:	f7f7 fe46 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e7a4:	2001      	movs	r0, #1
    e7a6:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    e7aa:	bd10      	pop	{r4, pc}

0000e7ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e7ac:	7bc0      	ldrb	r0, [r0, #15]
    e7ae:	2800      	cmp	r0, #0
    e7b0:	d000      	beq.n	e7b4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e7b2:	2001      	movs	r0, #1
    e7b4:	4770      	bx	lr
    e7b6:	7802      	ldrb	r2, [r0, #0]
    e7b8:	2320      	movs	r3, #32
    e7ba:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e7be:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e7c2:	430a      	orrs	r2, r1
    e7c4:	7002      	strb	r2, [r0, #0]
    e7c6:	4770      	bx	lr
    e7c8:	b510      	push	{r4, lr}
    e7ca:	f7ff f840 	bl	d84e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e7ce:	4604      	mov	r4, r0
    e7d0:	f7f7 fb74 	bl	5ebc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e7d4:	b138      	cbz	r0, e7e6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e7d6:	4620      	mov	r0, r4
    e7d8:	f7f7 fb18 	bl	5e0c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e7dc:	b118      	cbz	r0, e7e6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e7de:	2110      	movs	r1, #16
    e7e0:	f7ff f9fb 	bl	dbda <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e7e4:	b108      	cbz	r0, e7ea <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    e7e6:	2000      	movs	r0, #0
    e7e8:	bd10      	pop	{r4, pc}
    e7ea:	2001      	movs	r0, #1
    e7ec:	bd10      	pop	{r4, pc}
    e7ee:	2101      	movs	r1, #1
    e7f0:	f7f8 babe 	b.w	6d70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e7f4:	2101      	movs	r1, #1
    e7f6:	f7f8 babb 	b.w	6d70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7fe:	4604      	mov	r4, r0
    e800:	460f      	mov	r7, r1
    e802:	7e40      	ldrb	r0, [r0, #25]
    e804:	f7f7 fae8 	bl	5dd8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e808:	4606      	mov	r6, r0
    e80a:	7e20      	ldrb	r0, [r4, #24]
    e80c:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e810:	b120      	cbz	r0, e81c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e812:	b11e      	cbz	r6, e81c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e814:	7e60      	ldrb	r0, [r4, #25]
    e816:	f7f7 fad3 	bl	5dc0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e81a:	b1a0      	cbz	r0, e846 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9a>
    e81c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e820:	2800      	cmp	r0, #0
    e822:	d024      	beq.n	e86e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e824:	7ea0      	ldrb	r0, [r4, #26]
    e826:	2800      	cmp	r0, #0
    e828:	d021      	beq.n	e86e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e82a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e82e:	4629      	mov	r1, r5
    e830:	f7ff fe60 	bl	e4f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    e834:	b1a8      	cbz	r0, e862 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb6>
    e836:	f7f7 fabf 	bl	5db8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e83a:	463a      	mov	r2, r7
    e83c:	4629      	mov	r1, r5
    e83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e842:	f7fe bf9c 	b.w	d77e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e846:	2001      	movs	r0, #1
    e848:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    e84c:	463a      	mov	r2, r7
    e84e:	4629      	mov	r1, r5
    e850:	4630      	mov	r0, r6
    e852:	f7fe ff94 	bl	d77e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e856:	7e61      	ldrb	r1, [r4, #25]
    e858:	4628      	mov	r0, r5
    e85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e85e:	f7f7 bac7 	b.w	5df0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e862:	4639      	mov	r1, r7
    e864:	4628      	mov	r0, r5
    e866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e86a:	f7fe bf77 	b.w	d75c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e872:	b510      	push	{r4, lr}
    e874:	4604      	mov	r4, r0
    e876:	4608      	mov	r0, r1
    e878:	f7fc fca0 	bl	b1bc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e87c:	7921      	ldrb	r1, [r4, #4]
    e87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e882:	2025      	movs	r0, #37	; 0x25
    e884:	f7fc bc70 	b.w	b168 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    e888:	b510      	push	{r4, lr}
    e88a:	4604      	mov	r4, r0
    e88c:	302e      	adds	r0, #46	; 0x2e
    e88e:	f7fc fc4f 	bl	b130 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e892:	2800      	cmp	r0, #0
    e894:	d102      	bne.n	e89c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf0>
    e896:	207f      	movs	r0, #127	; 0x7f
    e898:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e89c:	bd10      	pop	{r4, pc}
    e89e:	b570      	push	{r4, r5, r6, lr}
    e8a0:	4614      	mov	r4, r2
    e8a2:	461d      	mov	r5, r3
    e8a4:	4606      	mov	r6, r0
    e8a6:	f7f4 fa6b 	bl	2d80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e8aa:	1900      	adds	r0, r0, r4
    e8ac:	4169      	adcs	r1, r5
    e8ae:	e9c6 0100 	strd	r0, r1, [r6]
    e8b2:	bd70      	pop	{r4, r5, r6, pc}

0000e8b4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e8b4:	b570      	push	{r4, r5, r6, lr}
    e8b6:	7001      	strb	r1, [r0, #0]
    e8b8:	7042      	strb	r2, [r0, #1]
    e8ba:	4614      	mov	r4, r2
    e8bc:	460d      	mov	r5, r1
    e8be:	7880      	ldrb	r0, [r0, #2]
    e8c0:	f000 f87f 	bl	e9c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e8c4:	fb10 f005 	smulbb	r0, r0, r5
    e8c8:	4360      	muls	r0, r4
    e8ca:	28ff      	cmp	r0, #255	; 0xff
    e8cc:	d303      	bcc.n	e8d6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e8ce:	215c      	movs	r1, #92	; 0x5c
    e8d0:	202e      	movs	r0, #46	; 0x2e
    e8d2:	f7f5 fe3b 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8d6:	bd70      	pop	{r4, r5, r6, pc}

0000e8d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e8d8:	b510      	push	{r4, lr}
    e8da:	4604      	mov	r4, r0
    e8dc:	7880      	ldrb	r0, [r0, #2]
    e8de:	f000 f870 	bl	e9c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e8e2:	7861      	ldrb	r1, [r4, #1]
    e8e4:	7822      	ldrb	r2, [r4, #0]
    e8e6:	fb11 f102 	smulbb	r1, r1, r2
    e8ea:	4348      	muls	r0, r1
    e8ec:	b2c0      	uxtb	r0, r0
    e8ee:	bd10      	pop	{r4, pc}

0000e8f0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e8f0:	b510      	push	{r4, lr}
    e8f2:	4604      	mov	r4, r0
    e8f4:	f000 f84d 	bl	e992 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e8f8:	7961      	ldrb	r1, [r4, #5]
    e8fa:	1c49      	adds	r1, r1, #1
    e8fc:	b2c9      	uxtb	r1, r1
    e8fe:	7161      	strb	r1, [r4, #5]
    e900:	7862      	ldrb	r2, [r4, #1]
    e902:	4291      	cmp	r1, r2
    e904:	d10b      	bne.n	e91e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e906:	2200      	movs	r2, #0
    e908:	7162      	strb	r2, [r4, #5]
    e90a:	78e1      	ldrb	r1, [r4, #3]
    e90c:	4301      	orrs	r1, r0
    e90e:	70e1      	strb	r1, [r4, #3]
    e910:	78a3      	ldrb	r3, [r4, #2]
    e912:	4299      	cmp	r1, r3
    e914:	d103      	bne.n	e91e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e916:	70e2      	strb	r2, [r4, #3]
    e918:	7921      	ldrb	r1, [r4, #4]
    e91a:	1c49      	adds	r1, r1, #1
    e91c:	7121      	strb	r1, [r4, #4]
    e91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e922:	f000 b825 	b.w	e970 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e926 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e926:	7081      	strb	r1, [r0, #2]
    e928:	4770      	bx	lr

0000e92a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e92a:	b570      	push	{r4, r5, r6, lr}
    e92c:	4604      	mov	r4, r0
    e92e:	7880      	ldrb	r0, [r0, #2]
    e930:	f000 f847 	bl	e9c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e934:	7861      	ldrb	r1, [r4, #1]
    e936:	fb11 f500 	smulbb	r5, r1, r0
    e93a:	78e0      	ldrb	r0, [r4, #3]
    e93c:	f000 f841 	bl	e9c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e940:	7861      	ldrb	r1, [r4, #1]
    e942:	7962      	ldrb	r2, [r4, #5]
    e944:	fb10 2001 	smlabb	r0, r0, r1, r2
    e948:	7821      	ldrb	r1, [r4, #0]
    e94a:	7922      	ldrb	r2, [r4, #4]
    e94c:	1a89      	subs	r1, r1, r2
    e94e:	fb11 f105 	smulbb	r1, r1, r5
    e952:	1a08      	subs	r0, r1, r0
    e954:	b2c0      	uxtb	r0, r0
    e956:	bd70      	pop	{r4, r5, r6, pc}

0000e958 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e958:	2100      	movs	r1, #0
    e95a:	6001      	str	r1, [r0, #0]
    e95c:	8081      	strh	r1, [r0, #4]
    e95e:	2101      	movs	r1, #1
    e960:	7041      	strb	r1, [r0, #1]
    e962:	7001      	strb	r1, [r0, #0]
    e964:	4770      	bx	lr

0000e966 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e966:	2100      	movs	r1, #0
    e968:	70c1      	strb	r1, [r0, #3]
    e96a:	7141      	strb	r1, [r0, #5]
    e96c:	7101      	strb	r1, [r0, #4]
    e96e:	4770      	bx	lr
    e970:	b510      	push	{r4, lr}
    e972:	2801      	cmp	r0, #1
    e974:	d007      	beq.n	e986 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e976:	2802      	cmp	r0, #2
    e978:	d007      	beq.n	e98a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e97a:	2804      	cmp	r0, #4
    e97c:	d007      	beq.n	e98e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e97e:	2139      	movs	r1, #57	; 0x39
    e980:	202e      	movs	r0, #46	; 0x2e
    e982:	f7f5 fde3 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e986:	2025      	movs	r0, #37	; 0x25
    e988:	bd10      	pop	{r4, pc}
    e98a:	2026      	movs	r0, #38	; 0x26
    e98c:	bd10      	pop	{r4, pc}
    e98e:	2027      	movs	r0, #39	; 0x27
    e990:	bd10      	pop	{r4, pc}
    e992:	4601      	mov	r1, r0
    e994:	2000      	movs	r0, #0
    e996:	788a      	ldrb	r2, [r1, #2]
    e998:	07d3      	lsls	r3, r2, #31
    e99a:	d002      	beq.n	e9a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e99c:	78cb      	ldrb	r3, [r1, #3]
    e99e:	07db      	lsls	r3, r3, #31
    e9a0:	d006      	beq.n	e9b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e9a2:	0793      	lsls	r3, r2, #30
    e9a4:	d506      	bpl.n	e9b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e9a6:	78cb      	ldrb	r3, [r1, #3]
    e9a8:	079b      	lsls	r3, r3, #30
    e9aa:	d403      	bmi.n	e9b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e9ac:	2002      	movs	r0, #2
    e9ae:	4770      	bx	lr
    e9b0:	2001      	movs	r0, #1
    e9b2:	4770      	bx	lr
    e9b4:	0752      	lsls	r2, r2, #29
    e9b6:	d5fc      	bpl.n	e9b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e9b8:	78c9      	ldrb	r1, [r1, #3]
    e9ba:	0749      	lsls	r1, r1, #29
    e9bc:	d4f9      	bmi.n	e9b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e9be:	2004      	movs	r0, #4
    e9c0:	4770      	bx	lr
    e9c2:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e9c6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e9ca:	4411      	add	r1, r2
    e9cc:	f000 0001 	and.w	r0, r0, #1
    e9d0:	4408      	add	r0, r1
    e9d2:	4770      	bx	lr

0000e9d4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e9d4:	f240 315a 	movw	r1, #858	; 0x35a
    e9d8:	4348      	muls	r0, r1
    e9da:	4770      	bx	lr

0000e9dc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e9dc:	f240 20ef 	movw	r0, #751	; 0x2ef
    e9e0:	4770      	bx	lr
    e9e2:	020e      	.short	0x020e
    e9e4:	0630041c 	.word	0x0630041c
    e9e8:	035a0c60 	.word	0x035a0c60
    e9ec:	05c506b4 	.word	0x05c506b4
    e9f0:	12250bf5 	.word	0x12250bf5
    e9f4:	03b101a3 	.word	0x03b101a3
    e9f8:	02ef05bf 	.word	0x02ef05bf
    e9fc:	09a30649 	.word	0x09a30649

0000ea00 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ea00:	b510      	push	{r4, lr}
    ea02:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ea06:	b109      	cbz	r1, ea0c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ea08:	2000      	movs	r0, #0
    ea0a:	bd10      	pop	{r4, pc}
    ea0c:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ea10:	b131      	cbz	r1, ea20 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ea12:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ea16:	428a      	cmp	r2, r1
    ea18:	d902      	bls.n	ea20 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ea1a:	f7ff feb1 	bl	e780 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ea1e:	e7f3      	b.n	ea08 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ea20:	2001      	movs	r0, #1
    ea22:	bd10      	pop	{r4, pc}

0000ea24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ea24:	b510      	push	{r4, lr}
    ea26:	b131      	cbz	r1, ea36 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ea28:	2901      	cmp	r1, #1
    ea2a:	d008      	beq.n	ea3e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ea2c:	f240 717d 	movw	r1, #1917	; 0x77d
    ea30:	2030      	movs	r0, #48	; 0x30
    ea32:	f7f5 fd8b 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea3a:	f000 b9b7 	b.w	edac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    ea3e:	2100      	movs	r1, #0
    ea40:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ea44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea48:	f000 b913 	b.w	ec72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000ea4c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ea4c:	b510      	push	{r4, lr}
    ea4e:	4604      	mov	r4, r0
    ea50:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ea54:	2800      	cmp	r0, #0
    ea56:	d019      	beq.n	ea8c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ea58:	2001      	movs	r0, #1
    ea5a:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ea5e:	4601      	mov	r1, r0
    ea60:	4620      	mov	r0, r4
    ea62:	f7ff fe8a 	bl	e77a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ea66:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ea6a:	b170      	cbz	r0, ea8a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ea6c:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ea70:	f7f3 fcfa 	bl	2468 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ea74:	7820      	ldrb	r0, [r4, #0]
    ea76:	f7f3 fe5b 	bl	2730 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ea7a:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ea7e:	f7f3 fe35 	bl	26ec <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ea82:	b120      	cbz	r0, ea8e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ea84:	2000      	movs	r0, #0
    ea86:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    ea8a:	2000      	movs	r0, #0
    ea8c:	bd10      	pop	{r4, pc}
    ea8e:	f44f 7101 	mov.w	r1, #516	; 0x204
    ea92:	2030      	movs	r0, #48	; 0x30
    ea94:	f7f5 fd5a 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ea98 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ea98:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ea9c:	4770      	bx	lr

0000ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ea9e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    eaa2:	4770      	bx	lr

0000eaa4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    eaa4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eaa6:	4604      	mov	r4, r0
    eaa8:	f890 021b 	ldrb.w	r0, [r0, #539]	; 0x21b
    eaac:	2800      	cmp	r0, #0
    eaae:	d15f      	bne.n	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eab0:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    eab4:	2803      	cmp	r0, #3
    eab6:	d15b      	bne.n	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eab8:	f7f4 f962 	bl	2d80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eabc:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    eac0:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    eac4:	1ac0      	subs	r0, r0, r3
    eac6:	eb61 0102 	sbc.w	r1, r1, r2
    eaca:	2300      	movs	r3, #0
    eacc:	461a      	mov	r2, r3
    eace:	1a1b      	subs	r3, r3, r0
    ead0:	418a      	sbcs	r2, r1
    ead2:	da4d      	bge.n	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ead4:	1c42      	adds	r2, r0, #1
    ead6:	f171 0100 	sbcs.w	r1, r1, #0
    eada:	db02      	blt.n	eae2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    eadc:	f240 51c3 	movw	r1, #1475	; 0x5c3
    eae0:	e036      	b.n	eb50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    eae2:	6921      	ldr	r1, [r4, #16]
    eae4:	b111      	cbz	r1, eaec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    eae6:	fbb0 f0f1 	udiv	r0, r0, r1
    eaea:	e000      	b.n	eaee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    eaec:	2000      	movs	r0, #0
    eaee:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    eaf2:	1c40      	adds	r0, r0, #1
    eaf4:	4408      	add	r0, r1
    eaf6:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    eafa:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eafe:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    eb02:	1a08      	subs	r0, r1, r0
    eb04:	b200      	sxth	r0, r0
    eb06:	2800      	cmp	r0, #0
    eb08:	dd32      	ble.n	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb0a:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    eb0e:	f7f3 fcab 	bl	2468 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    eb12:	2800      	cmp	r0, #0
    eb14:	d02c      	beq.n	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb16:	20ff      	movs	r0, #255	; 0xff
    eb18:	f884 0261 	strb.w	r0, [r4, #609]	; 0x261
    eb1c:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    eb20:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    eb24:	ae01      	add	r6, sp, #4
    eb26:	1a40      	subs	r0, r0, r1
    eb28:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    eb2c:	1e40      	subs	r0, r0, #1
    eb2e:	4408      	add	r0, r1
    eb30:	b285      	uxth	r5, r0
    eb32:	e017      	b.n	eb64 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    eb34:	9600      	str	r6, [sp, #0]
    eb36:	f8b4 125c 	ldrh.w	r1, [r4, #604]	; 0x25c
    eb3a:	2300      	movs	r3, #0
    eb3c:	2201      	movs	r2, #1
    eb3e:	4620      	mov	r0, r4
    eb40:	f7f9 f8fa 	bl	7d38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    eb44:	2800      	cmp	r0, #0
    eb46:	d013      	beq.n	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb48:	2801      	cmp	r0, #1
    eb4a:	d004      	beq.n	eb56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    eb4c:	f240 51fc 	movw	r1, #1532	; 0x5fc
    eb50:	2030      	movs	r0, #48	; 0x30
    eb52:	f7f5 fcfb 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb56:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eb5a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    eb5e:	4408      	add	r0, r1
    eb60:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    eb64:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eb68:	1a28      	subs	r0, r5, r0
    eb6a:	b200      	sxth	r0, r0
    eb6c:	2800      	cmp	r0, #0
    eb6e:	dae1      	bge.n	eb34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    eb70:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eb72:	2000      	movs	r0, #0
    eb74:	4770      	bx	lr
    eb76:	b570      	push	{r4, r5, r6, lr}
    eb78:	4604      	mov	r4, r0
    eb7a:	f000 f8f0 	bl	ed5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    eb7e:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    eb82:	2000      	movs	r0, #0
    eb84:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    eb88:	4601      	mov	r1, r0
    eb8a:	2501      	movs	r5, #1
    eb8c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    eb90:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    eb94:	4606      	mov	r6, r0
    eb96:	f7fe ff82 	bl	da9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    eb9a:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    eb9e:	1c40      	adds	r0, r0, #1
    eba0:	280a      	cmp	r0, #10
    eba2:	d201      	bcs.n	eba8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    eba4:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    eba8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ebac:	b138      	cbz	r0, ebbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ebae:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ebb2:	1c40      	adds	r0, r0, #1
    ebb4:	280a      	cmp	r0, #10
    ebb6:	d302      	bcc.n	ebbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ebb8:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    ebbc:	e002      	b.n	ebc4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    ebbe:	2002      	movs	r0, #2
    ebc0:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    ebc4:	4620      	mov	r0, r4
    ebc6:	f000 f822 	bl	ec0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    ebca:	b120      	cbz	r0, ebd6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    ebcc:	4620      	mov	r0, r4
    ebce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ebd2:	f000 b80d 	b.w	ebf0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    ebd6:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ebda:	4631      	mov	r1, r6
    ebdc:	f000 f8bd 	bl	ed5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    ebe0:	2800      	cmp	r0, #0
    ebe2:	d104      	bne.n	ebee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    ebe4:	f240 6191 	movw	r1, #1681	; 0x691
    ebe8:	2030      	movs	r0, #48	; 0x30
    ebea:	f7f5 fcaf 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebee:	bd70      	pop	{r4, r5, r6, pc}
    ebf0:	b510      	push	{r4, lr}
    ebf2:	4604      	mov	r4, r0
    ebf4:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ebf8:	f7f3 fd78 	bl	26ec <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ebfc:	2000      	movs	r0, #0
    ebfe:	7620      	strb	r0, [r4, #24]
    ec00:	bd10      	pop	{r4, pc}
    ec02:	b510      	push	{r4, lr}
    ec04:	f7ff fd64 	bl	e6d0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ec08:	f500 7088 	add.w	r0, r0, #272	; 0x110
    ec0c:	bd10      	pop	{r4, pc}
    ec0e:	b570      	push	{r4, r5, r6, lr}
    ec10:	4605      	mov	r5, r0
    ec12:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    ec16:	b108      	cbz	r0, ec1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    ec18:	2001      	movs	r0, #1
    ec1a:	bd70      	pop	{r4, r5, r6, pc}
    ec1c:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    ec20:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ec24:	4050      	eors	r0, r2
    ec26:	ea70 0101 	orns	r1, r0, r1
    ec2a:	d012      	beq.n	ec52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ec2c:	2400      	movs	r4, #0
    ec2e:	4621      	mov	r1, r4
    ec30:	4628      	mov	r0, r5
    ec32:	f7ff ffe6 	bl	ec02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    ec36:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    ec3a:	1840      	adds	r0, r0, r1
    ec3c:	4154      	adcs	r4, r2
    ec3e:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    ec42:	3df8      	subs	r5, #248	; 0xf8
    ec44:	1a10      	subs	r0, r2, r0
    ec46:	41a1      	sbcs	r1, r4
    ec48:	d503      	bpl.n	ec52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ec4a:	4628      	mov	r0, r5
    ec4c:	f7ff fd98 	bl	e780 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ec50:	e7e2      	b.n	ec18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    ec52:	2000      	movs	r0, #0
    ec54:	bd70      	pop	{r4, r5, r6, pc}
    ec56:	b510      	push	{r4, lr}
    ec58:	4604      	mov	r4, r0
    ec5a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ec5e:	f000 f9ef 	bl	f040 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    ec62:	4602      	mov	r2, r0
    ec64:	4620      	mov	r0, r4
    ec66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec6a:	f240 111b 	movw	r1, #283	; 0x11b
    ec6e:	f7ff bafa 	b.w	e266 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ec72:	b510      	push	{r4, lr}
    ec74:	f7fc f8e4 	bl	ae40 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ec78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec7c:	f7f3 be98 	b.w	29b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ec80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec84:	4604      	mov	r4, r0
    ec86:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    ec8a:	2800      	cmp	r0, #0
    ec8c:	d051      	beq.n	ed32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ec8e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ec92:	2803      	cmp	r0, #3
    ec94:	d14d      	bne.n	ed32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ec96:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ec9a:	f001 fcab 	bl	105f4 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ec9e:	4605      	mov	r5, r0
    eca0:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    eca4:	f7f8 ff6a 	bl	7b7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    eca8:	4428      	add	r0, r5
    ecaa:	b286      	uxth	r6, r0
    ecac:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    ecb0:	f7f8 ff64 	bl	7b7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ecb4:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ecb8:	fa1f f880 	uxth.w	r8, r0
    ecbc:	4648      	mov	r0, r9
    ecbe:	f7fc f97d 	bl	afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ecc2:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    ecc6:	1a0d      	subs	r5, r1, r0
    ecc8:	4648      	mov	r0, r9
    ecca:	f7fc f9a3 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ecce:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    ecd2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ecd6:	fbb0 f0fa 	udiv	r0, r0, sl
    ecda:	1a2d      	subs	r5, r5, r0
    ecdc:	4648      	mov	r0, r9
    ecde:	f7fc f96d 	bl	afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ece2:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    ece6:	1a0f      	subs	r7, r1, r0
    ece8:	4648      	mov	r0, r9
    ecea:	f7fc f993 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ecee:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ecf2:	4401      	add	r1, r0
    ecf4:	fbb1 f0fa 	udiv	r0, r1, sl
    ecf8:	1a39      	subs	r1, r7, r0
    ecfa:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    ecfe:	4370      	muls	r0, r6
    ed00:	fbb0 f2f8 	udiv	r2, r0, r8
    ed04:	2029      	movs	r0, #41	; 0x29
    ed06:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    ed0a:	3260      	adds	r2, #96	; 0x60
    ed0c:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    ed10:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    ed14:	42a9      	cmp	r1, r5
    ed16:	d801      	bhi.n	ed1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    ed18:	4285      	cmp	r5, r0
    ed1a:	d901      	bls.n	ed20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    ed1c:	f7f5 f846 	bl	3dac <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    ed20:	4631      	mov	r1, r6
    ed22:	6920      	ldr	r0, [r4, #16]
    ed24:	f7fd fa7a 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ed28:	2100      	movs	r1, #0
    ed2a:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    ed2e:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
    ed32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed36:	b570      	push	{r4, r5, r6, lr}
    ed38:	460c      	mov	r4, r1
    ed3a:	4605      	mov	r5, r0
    ed3c:	f7fc f96a 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed40:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ed44:	4408      	add	r0, r1
    ed46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ed4a:	fbb0 f6f1 	udiv	r6, r0, r1
    ed4e:	4628      	mov	r0, r5
    ed50:	f7fc f934 	bl	afbc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ed54:	4430      	add	r0, r6
    ed56:	4420      	add	r0, r4
    ed58:	bd70      	pop	{r4, r5, r6, pc}
    ed5a:	f7f3 b863 	b.w	1e24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ed5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed60:	4604      	mov	r4, r0
    ed62:	f7ff fcde 	bl	e722 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ed66:	b1f8      	cbz	r0, eda8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    ed68:	4620      	mov	r0, r4
    ed6a:	f7ff fcd2 	bl	e712 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ed6e:	b918      	cbnz	r0, ed78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    ed70:	4620      	mov	r0, r4
    ed72:	f7ff fcd8 	bl	e726 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ed76:	b140      	cbz	r0, ed8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    ed78:	2462      	movs	r4, #98	; 0x62
    ed7a:	4668      	mov	r0, sp
    ed7c:	f7f5 fac2 	bl	4304 <mpsl_fem_pa_is_configured>
    ed80:	f89d 0000 	ldrb.w	r0, [sp]
    ed84:	b118      	cbz	r0, ed8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    ed86:	2501      	movs	r5, #1
    ed88:	e002      	b.n	ed90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    ed8a:	245b      	movs	r4, #91	; 0x5b
    ed8c:	e7f5      	b.n	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    ed8e:	2500      	movs	r5, #0
    ed90:	a801      	add	r0, sp, #4
    ed92:	f7f5 fa9f 	bl	42d4 <mpsl_fem_lna_is_configured>
    ed96:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ed9a:	b100      	cbz	r0, ed9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    ed9c:	2001      	movs	r0, #1
    ed9e:	4305      	orrs	r5, r0
    eda0:	d000      	beq.n	eda4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    eda2:	340a      	adds	r4, #10
    eda4:	4620      	mov	r0, r4
    eda6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eda8:	2084      	movs	r0, #132	; 0x84
    edaa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    edac:	b570      	push	{r4, r5, r6, lr}
    edae:	4604      	mov	r4, r0
    edb0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    edb2:	2500      	movs	r5, #0
    edb4:	b130      	cbz	r0, edc4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    edb6:	f7f7 fdd3 	bl	6960 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    edba:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    edbc:	fbb0 f2f1 	udiv	r2, r0, r1
    edc0:	fb01 0512 	mls	r5, r1, r2, r0
    edc4:	4620      	mov	r0, r4
    edc6:	f7ff fc7f 	bl	e6c8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    edca:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    edce:	4428      	add	r0, r5
    edd0:	34e8      	adds	r4, #232	; 0xe8
    edd2:	2500      	movs	r5, #0
    edd4:	1882      	adds	r2, r0, r2
    edd6:	eb45 0001 	adc.w	r0, r5, r1
    edda:	e9c4 2004 	strd	r2, r0, [r4, #16]
    edde:	f804 5b0b 	strb.w	r5, [r4], #11
    ede2:	2001      	movs	r0, #1
    ede4:	f804 0901 	strb.w	r0, [r4], #-1
    ede8:	2002      	movs	r0, #2
    edea:	f804 09f2 	strb.w	r0, [r4], #-242
    edee:	4620      	mov	r0, r4
    edf0:	f7ff ffb5 	bl	ed5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    edf4:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    edf8:	4620      	mov	r0, r4
    edfa:	f7ff ff08 	bl	ec0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    edfe:	b930      	cbnz	r0, ee0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    ee00:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ee04:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    ee08:	f7ff ffa7 	bl	ed5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    ee0c:	b128      	cbz	r0, ee1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    ee0e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    ee12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee16:	f7ff bf2c 	b.w	ec72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    ee1a:	f240 61d7 	movw	r1, #1751	; 0x6d7
    ee1e:	2030      	movs	r0, #48	; 0x30
    ee20:	f7f5 fb94 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee24:	b510      	push	{r4, lr}
    ee26:	4604      	mov	r4, r0
    ee28:	2000      	movs	r0, #0
    ee2a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    ee2e:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    ee32:	f7f3 fc5b 	bl	26ec <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ee36:	2020      	movs	r0, #32
    ee38:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
    ee3c:	bd10      	pop	{r4, pc}
    ee3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee42:	4604      	mov	r4, r0
    ee44:	2500      	movs	r5, #0
    ee46:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    ee4a:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    ee4e:	4689      	mov	r9, r1
    ee50:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    ee54:	f04f 0801 	mov.w	r8, #1
    ee58:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    ee5c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ee60:	4641      	mov	r1, r8
    ee62:	34c8      	adds	r4, #200	; 0xc8
    ee64:	f7f7 f96a 	bl	613c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ee68:	6860      	ldr	r0, [r4, #4]
    ee6a:	f8c0 6280 	str.w	r6, [r0, #640]	; 0x280
    ee6e:	f8c0 7284 	str.w	r7, [r0, #644]	; 0x284
    ee72:	6861      	ldr	r1, [r4, #4]
    ee74:	7820      	ldrb	r0, [r4, #0]
    ee76:	f881 0294 	strb.w	r0, [r1, #660]	; 0x294
    ee7a:	6861      	ldr	r1, [r4, #4]
    ee7c:	f8c1 9298 	str.w	r9, [r1, #664]	; 0x298
    ee80:	6860      	ldr	r0, [r4, #4]
    ee82:	e9c0 67a2 	strd	r6, r7, [r0, #648]	; 0x288
    ee86:	6864      	ldr	r4, [r4, #4]
    ee88:	f884 524c 	strb.w	r5, [r4, #588]	; 0x24c
    ee8c:	2300      	movs	r3, #0
    ee8e:	f8a4 5290 	strh.w	r5, [r4, #656]	; 0x290
    ee92:	461a      	mov	r2, r3
    ee94:	4619      	mov	r1, r3
    ee96:	4620      	mov	r0, r4
    ee98:	9500      	str	r5, [sp, #0]
    ee9a:	f7f8 ff4d 	bl	7d38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ee9e:	b120      	cbz	r0, eeaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    eea0:	f44f 7106 	mov.w	r1, #536	; 0x218
    eea4:	2030      	movs	r0, #48	; 0x30
    eea6:	f7f5 fb51 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeaa:	f8c4 5248 	str.w	r5, [r4, #584]	; 0x248
    eeae:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    eeb2:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
    eeb6:	f8a4 525e 	strh.w	r5, [r4, #606]	; 0x25e
    eeba:	f8a4 525c 	strh.w	r5, [r4, #604]	; 0x25c
    eebe:	348c      	adds	r4, #140	; 0x8c
    eec0:	f884 51d5 	strb.w	r5, [r4, #469]	; 0x1d5
    eec4:	8820      	ldrh	r0, [r4, #0]
    eec6:	1e40      	subs	r0, r0, #1
    eec8:	8020      	strh	r0, [r4, #0]
    eeca:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
    eece:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eed2:	f7ff bece 	b.w	ec72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    eed6:	b570      	push	{r4, r5, r6, lr}
    eed8:	b140      	cbz	r0, eeec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    eeda:	2909      	cmp	r1, #9
    eedc:	d249      	bcs.n	ef72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    eede:	e8df f001 	tbb	[pc, r1]
    eee2:	1507      	.short	0x1507
    eee4:	48383c3c 	.word	0x48383c3c
    eee8:	0044402a 	.word	0x0044402a
    eeec:	21ca      	movs	r1, #202	; 0xca
    eeee:	e03d      	b.n	ef6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    eef0:	4604      	mov	r4, r0
    eef2:	f7f7 ff0d 	bl	6d10 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    eef6:	b110      	cbz	r0, eefe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    eef8:	f44f 711d 	mov.w	r1, #628	; 0x274
    eefc:	e036      	b.n	ef6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    eefe:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    ef02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef06:	38ff      	subs	r0, #255	; 0xff
    ef08:	f7f3 be6c 	b.w	2be4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ef0c:	4605      	mov	r5, r0
    ef0e:	f7ff fc04 	bl	e71a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ef12:	b9b0      	cbnz	r0, ef42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    ef14:	2100      	movs	r1, #0
    ef16:	4628      	mov	r0, r5
    ef18:	f7ff fe73 	bl	ec02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    ef1c:	4604      	mov	r4, r0
    ef1e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    ef22:	42a0      	cmp	r0, r4
    ef24:	d20b      	bcs.n	ef3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    ef26:	1a20      	subs	r0, r4, r0
    ef28:	2103      	movs	r1, #3
    ef2a:	f7f2 fd95 	bl	1a58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ef2e:	b130      	cbz	r0, ef3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    ef30:	4628      	mov	r0, r5
    ef32:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef3a:	f7ff bb5c 	b.w	e5f6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    ef3e:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef42:	4628      	mov	r0, r5
    ef44:	f7f7 ff00 	bl	6d48 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    ef48:	2800      	cmp	r0, #0
    ef4a:	d014      	beq.n	ef76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    ef4c:	f240 21a7 	movw	r1, #679	; 0x2a7
    ef50:	e00c      	b.n	ef6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef56:	f7fc b937 	b.w	b1c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ef5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef5e:	f7ff be0a 	b.w	eb76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    ef62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef66:	f7ff be43 	b.w	ebf0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    ef6a:	21ea      	movs	r1, #234	; 0xea
    ef6c:	2030      	movs	r0, #48	; 0x30
    ef6e:	f7f5 faed 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef72:	21ee      	movs	r1, #238	; 0xee
    ef74:	e7fa      	b.n	ef6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef76:	bd70      	pop	{r4, r5, r6, pc}
    ef78:	b510      	push	{r4, lr}
    ef7a:	0004      	movs	r4, r0
    ef7c:	d008      	beq.n	ef90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    ef7e:	2909      	cmp	r1, #9
    ef80:	d25c      	bcs.n	f03c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    ef82:	e8df f001 	tbb	[pc, r1]
    ef86:	3807      	.short	0x3807
    ef88:	5b3c4040 	.word	0x5b3c4040
    ef8c:	00574c45 	.word	0x00574c45
    ef90:	2196      	movs	r1, #150	; 0x96
    ef92:	e050      	b.n	f036 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    ef94:	2100      	movs	r1, #0
    ef96:	f8c4 129c 	str.w	r1, [r4, #668]	; 0x29c
    ef9a:	f894 1260 	ldrb.w	r1, [r4, #608]	; 0x260
    ef9e:	4620      	mov	r0, r4
    efa0:	b189      	cbz	r1, efc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    efa2:	f8b0 225e 	ldrh.w	r2, [r0, #606]	; 0x25e
    efa6:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    efaa:	428a      	cmp	r2, r1
    efac:	d106      	bne.n	efbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    efae:	f8b0 2214 	ldrh.w	r2, [r0, #532]	; 0x214
    efb2:	1a51      	subs	r1, r2, r1
    efb4:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    efb8:	4611      	mov	r1, r2
    efba:	e00d      	b.n	efd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    efbc:	1a51      	subs	r1, r2, r1
    efbe:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    efc2:	b291      	uxth	r1, r2
    efc4:	e008      	b.n	efd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    efc6:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    efca:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    efce:	1a89      	subs	r1, r1, r2
    efd0:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    efd4:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    efd8:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    efdc:	e9d0 129e 	ldrd	r1, r2, [r0, #632]	; 0x278
    efe0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    efe4:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
    efe8:	f7f9 f9a8 	bl	833c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    efec:	4620      	mov	r0, r4
    efee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eff2:	f7f9 b8ab 	b.w	814c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c>
    eff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    effa:	f000 b909 	b.w	f210 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    effe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f002:	f7fc b8e1 	b.w	b1c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f006:	4620      	mov	r0, r4
    f008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f00c:	f000 b825 	b.w	f05a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    f010:	2001      	movs	r0, #1
    f012:	f7f2 fd11 	bl	1a38 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f01a:	f7fe bbe5 	b.w	d7e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f01e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    f022:	2804      	cmp	r0, #4
    f024:	d001      	beq.n	f02a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    f026:	21b8      	movs	r1, #184	; 0xb8
    f028:	e005      	b.n	f036 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f02a:	4620      	mov	r0, r4
    f02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f030:	f7ff bef8 	b.w	ee24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f034:	21be      	movs	r1, #190	; 0xbe
    f036:	2030      	movs	r0, #48	; 0x30
    f038:	f7f5 fa88 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f03c:	21c2      	movs	r1, #194	; 0xc2
    f03e:	e7fa      	b.n	f036 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f040:	b510      	push	{r4, lr}
    f042:	f7fb ffe7 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f046:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f04a:	4408      	add	r0, r1
    f04c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f050:	fbb0 f0f1 	udiv	r0, r0, r1
    f054:	f200 1079 	addw	r0, r0, #377	; 0x179
    f058:	bd10      	pop	{r4, pc}
    f05a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f05c:	4604      	mov	r4, r0
    f05e:	f7f3 fe8f 	bl	2d80 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f062:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    f066:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    f06a:	1ac0      	subs	r0, r0, r3
    f06c:	eb61 0102 	sbc.w	r1, r1, r2
    f070:	2200      	movs	r2, #0
    f072:	4613      	mov	r3, r2
    f074:	1a12      	subs	r2, r2, r0
    f076:	418b      	sbcs	r3, r1
    f078:	db02      	blt.n	f080 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5dc>
    f07a:	f240 610c 	movw	r1, #1548	; 0x60c
    f07e:	e052      	b.n	f126 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    f080:	1c42      	adds	r2, r0, #1
    f082:	f171 0100 	sbcs.w	r1, r1, #0
    f086:	db02      	blt.n	f08e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ea>
    f088:	f240 610d 	movw	r1, #1549	; 0x60d
    f08c:	e04b      	b.n	f126 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    f08e:	6922      	ldr	r2, [r4, #16]
    f090:	2100      	movs	r1, #0
    f092:	b10a      	cbz	r2, f098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f4>
    f094:	fbb0 f1f2 	udiv	r1, r0, r2
    f098:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    f09c:	280e      	cmp	r0, #14
    f09e:	d00c      	beq.n	f0ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x616>
    f0a0:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    f0a4:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    f0a8:	1843      	adds	r3, r0, r1
    f0aa:	1ad3      	subs	r3, r2, r3
    f0ac:	b21b      	sxth	r3, r3
    f0ae:	2b00      	cmp	r3, #0
    f0b0:	db06      	blt.n	f0c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61c>
    f0b2:	1c52      	adds	r2, r2, #1
    f0b4:	f8a4 225e 	strh.w	r2, [r4, #606]	; 0x25e
    f0b8:	e006      	b.n	f0c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x624>
    f0ba:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f0be:	e012      	b.n	f0e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x642>
    f0c0:	1c49      	adds	r1, r1, #1
    f0c2:	4408      	add	r0, r1
    f0c4:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f0c8:	f894 0261 	ldrb.w	r0, [r4, #609]	; 0x261
    f0cc:	f88d 0000 	strb.w	r0, [sp]
    f0d0:	9800      	ldr	r0, [sp, #0]
    f0d2:	9000      	str	r0, [sp, #0]
    f0d4:	f89d 0000 	ldrb.w	r0, [sp]
    f0d8:	b940      	cbnz	r0, f0ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    f0da:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f0de:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    f0e2:	4288      	cmp	r0, r1
    f0e4:	d102      	bne.n	f0ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    f0e6:	1c40      	adds	r0, r0, #1
    f0e8:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f0ec:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    f0f0:	1c40      	adds	r0, r0, #1
    f0f2:	f8a4 0292 	strh.w	r0, [r4, #658]	; 0x292
    f0f6:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    f0fa:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    f0fe:	1a40      	subs	r0, r0, r1
    f100:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    f104:	1e40      	subs	r0, r0, #1
    f106:	4408      	add	r0, r1
    f108:	b285      	uxth	r5, r0
    f10a:	e026      	b.n	f15a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    f10c:	a801      	add	r0, sp, #4
    f10e:	2300      	movs	r3, #0
    f110:	9000      	str	r0, [sp, #0]
    f112:	461a      	mov	r2, r3
    f114:	4620      	mov	r0, r4
    f116:	f7f8 fe0f 	bl	7d38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f11a:	2800      	cmp	r0, #0
    f11c:	d039      	beq.n	f192 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    f11e:	2801      	cmp	r0, #1
    f120:	d004      	beq.n	f12c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x688>
    f122:	f240 614c 	movw	r1, #1612	; 0x64c
    f126:	2030      	movs	r0, #48	; 0x30
    f128:	f7f5 fa10 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f12c:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f130:	f8b4 1210 	ldrh.w	r1, [r4, #528]	; 0x210
    f134:	1a42      	subs	r2, r0, r1
    f136:	b212      	sxth	r2, r2
    f138:	2a00      	cmp	r2, #0
    f13a:	da09      	bge.n	f150 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    f13c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f140:	4402      	add	r2, r0
    f142:	1aaa      	subs	r2, r5, r2
    f144:	b212      	sxth	r2, r2
    f146:	2a00      	cmp	r2, #0
    f148:	da02      	bge.n	f150 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    f14a:	f8a4 125e 	strh.w	r1, [r4, #606]	; 0x25e
    f14e:	e004      	b.n	f15a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    f150:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f154:	4408      	add	r0, r1
    f156:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f15a:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
    f15e:	1a68      	subs	r0, r5, r1
    f160:	b200      	sxth	r0, r0
    f162:	2800      	cmp	r0, #0
    f164:	dad2      	bge.n	f10c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x668>
    f166:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    f16a:	b180      	cbz	r0, f18e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ea>
    f16c:	2008      	movs	r0, #8
    f16e:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    f172:	220a      	movs	r2, #10
    f174:	4621      	mov	r1, r4
    f176:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    f17a:	f7f7 f959 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f17e:	4620      	mov	r0, r4
    f180:	f000 f848 	bl	f214 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    f184:	4620      	mov	r0, r4
    f186:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f18a:	f7ff be4b 	b.w	ee24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f18e:	203e      	movs	r0, #62	; 0x3e
    f190:	e7ed      	b.n	f16e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
    f192:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f194:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f198:	f001 0307 	and.w	r3, r1, #7
    f19c:	7802      	ldrb	r2, [r0, #0]
    f19e:	2101      	movs	r1, #1
    f1a0:	4099      	lsls	r1, r3
    f1a2:	438a      	bics	r2, r1
    f1a4:	7002      	strb	r2, [r0, #0]
    f1a6:	4770      	bx	lr

0000f1a8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f1a8:	b510      	push	{r4, lr}
    f1aa:	4604      	mov	r4, r0
    f1ac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
    f1b0:	6921      	ldr	r1, [r4, #16]
    f1b2:	4288      	cmp	r0, r1
    f1b4:	d109      	bne.n	f1ca <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f1b6:	f8b4 12c8 	ldrh.w	r1, [r4, #712]	; 0x2c8
    f1ba:	8b22      	ldrh	r2, [r4, #24]
    f1bc:	4291      	cmp	r1, r2
    f1be:	d104      	bne.n	f1ca <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f1c0:	f8b4 12ca 	ldrh.w	r1, [r4, #714]	; 0x2ca
    f1c4:	8b62      	ldrh	r2, [r4, #26]
    f1c6:	4291      	cmp	r1, r2
    f1c8:	d014      	beq.n	f1f4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    f1ca:	8821      	ldrh	r1, [r4, #0]
    f1cc:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
    f1d0:	f7fe fb82 	bl	d8d8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f1d4:	f8a4 01c8 	strh.w	r0, [r4, #456]	; 0x1c8
    f1d8:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    f1dc:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    f1e0:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    f1e4:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    f1e8:	2208      	movs	r2, #8
    f1ea:	4621      	mov	r1, r4
    f1ec:	f504 70dd 	add.w	r0, r4, #442	; 0x1ba
    f1f0:	f7f7 f91e 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f1f4:	2102      	movs	r1, #2
    f1f6:	4620      	mov	r0, r4
    f1f8:	f7f6 ffa0 	bl	613c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f1fc:	2000      	movs	r0, #0
    f1fe:	f804 0f96 	strb.w	r0, [r4, #150]!
    f202:	2003      	movs	r0, #3
    f204:	70e0      	strb	r0, [r4, #3]
    f206:	bd10      	pop	{r4, pc}

0000f208 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f208:	f7f5 bd26 	b.w	4c58 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f20c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f20c:	2000      	movs	r0, #0
    f20e:	4770      	bx	lr

0000f210 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f210:	f7f6 b9dc 	b.w	55cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f214 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f214:	2100      	movs	r1, #0
    f216:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    f21a:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f21e:	f880 1099 	strb.w	r1, [r0, #153]	; 0x99
    f222:	f890 121b 	ldrb.w	r1, [r0, #539]	; 0x21b
    f226:	b109      	cbz	r1, f22c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f228:	2102      	movs	r1, #2
    f22a:	e000      	b.n	f22e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f22c:	2103      	movs	r1, #3
    f22e:	f7f8 bc4d 	b.w	7acc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f232:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f236:	28fe      	cmp	r0, #254	; 0xfe
    f238:	d001      	beq.n	f23e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f23a:	2001      	movs	r0, #1
    f23c:	4770      	bx	lr
    f23e:	2000      	movs	r0, #0
    f240:	4770      	bx	lr
    f242:	b510      	push	{r4, lr}
    f244:	2801      	cmp	r0, #1
    f246:	d006      	beq.n	f256 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f248:	2802      	cmp	r0, #2
    f24a:	d004      	beq.n	f256 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f24c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    f250:	2006      	movs	r0, #6
    f252:	f7f5 f97b 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f256:	bd10      	pop	{r4, pc}
    f258:	2801      	cmp	r0, #1
    f25a:	d002      	beq.n	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f25c:	2802      	cmp	r0, #2
    f25e:	d105      	bne.n	f26c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f260:	e002      	b.n	f268 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f262:	2901      	cmp	r1, #1
    f264:	d004      	beq.n	f270 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f266:	e001      	b.n	f26c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f268:	2902      	cmp	r1, #2
    f26a:	d001      	beq.n	f270 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f26c:	2000      	movs	r0, #0
    f26e:	4770      	bx	lr
    f270:	2001      	movs	r0, #1
    f272:	4770      	bx	lr
    f274:	1a40      	subs	r0, r0, r1
    f276:	b200      	sxth	r0, r0
    f278:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f27c:	4288      	cmp	r0, r1
    f27e:	dc01      	bgt.n	f284 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f280:	2800      	cmp	r0, #0
    f282:	dc01      	bgt.n	f288 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f284:	2001      	movs	r0, #1
    f286:	4770      	bx	lr
    f288:	2000      	movs	r0, #0
    f28a:	4770      	bx	lr
    f28c:	2200      	movs	r2, #0
    f28e:	704a      	strb	r2, [r1, #1]
    f290:	2208      	movs	r2, #8
    f292:	700a      	strb	r2, [r1, #0]
    f294:	f5a0 7233 	sub.w	r2, r0, #716	; 0x2cc
    f298:	8812      	ldrh	r2, [r2, #0]
    f29a:	808a      	strh	r2, [r1, #4]
    f29c:	68c2      	ldr	r2, [r0, #12]
    f29e:	f8c1 2006 	str.w	r2, [r1, #6]
    f2a2:	6902      	ldr	r2, [r0, #16]
    f2a4:	f8c1 200a 	str.w	r2, [r1, #10]
    f2a8:	8a80      	ldrh	r0, [r0, #20]
    f2aa:	81c8      	strh	r0, [r1, #14]
    f2ac:	4770      	bx	lr
    f2ae:	6842      	ldr	r2, [r0, #4]
    f2b0:	2100      	movs	r1, #0
    f2b2:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    f2b6:	6842      	ldr	r2, [r0, #4]
    f2b8:	f882 10ce 	strb.w	r1, [r2, #206]	; 0xce
    f2bc:	6840      	ldr	r0, [r0, #4]
    f2be:	f8a0 10ca 	strh.w	r1, [r0, #202]	; 0xca
    f2c2:	4770      	bx	lr
    f2c4:	b510      	push	{r4, lr}
    f2c6:	4604      	mov	r4, r0
    f2c8:	6840      	ldr	r0, [r0, #4]
    f2ca:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f2ce:	0740      	lsls	r0, r0, #29
    f2d0:	d501      	bpl.n	f2d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xc2>
    f2d2:	2001      	movs	r0, #1
    f2d4:	bd10      	pop	{r4, pc}
    f2d6:	f7f9 f933 	bl	8540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f2da:	6860      	ldr	r0, [r4, #4]
    f2dc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f2e0:	f041 0104 	orr.w	r1, r1, #4
    f2e4:	6001      	str	r1, [r0, #0]
    f2e6:	2000      	movs	r0, #0
    f2e8:	bd10      	pop	{r4, pc}
    f2ea:	b510      	push	{r4, lr}
    f2ec:	4604      	mov	r4, r0
    f2ee:	6840      	ldr	r0, [r0, #4]
    f2f0:	2301      	movs	r3, #1
    f2f2:	2109      	movs	r1, #9
    f2f4:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f2f8:	3080      	adds	r0, #128	; 0x80
    f2fa:	f7fe fb06 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f2fe:	2800      	cmp	r0, #0
    f300:	d009      	beq.n	f316 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x102>
    f302:	6861      	ldr	r1, [r4, #4]
    f304:	2000      	movs	r0, #0
    f306:	f881 00c2 	strb.w	r0, [r1, #194]	; 0xc2
    f30a:	6861      	ldr	r1, [r4, #4]
    f30c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    f310:	6861      	ldr	r1, [r4, #4]
    f312:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f316:	bd10      	pop	{r4, pc}
    f318:	b510      	push	{r4, lr}
    f31a:	4604      	mov	r4, r0
    f31c:	6840      	ldr	r0, [r0, #4]
    f31e:	2301      	movs	r3, #1
    f320:	2100      	movs	r1, #0
    f322:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    f326:	3080      	adds	r0, #128	; 0x80
    f328:	f7fe faef 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f32c:	2800      	cmp	r0, #0
    f32e:	6860      	ldr	r0, [r4, #4]
    f330:	d00b      	beq.n	f34a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f332:	f890 009b 	ldrb.w	r0, [r0, #155]	; 0x9b
    f336:	2800      	cmp	r0, #0
    f338:	d006      	beq.n	f348 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x134>
    f33a:	f7f9 f901 	bl	8540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f33e:	6861      	ldr	r1, [r4, #4]
    f340:	2012      	movs	r0, #18
    f342:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f346:	2000      	movs	r0, #0
    f348:	bd10      	pop	{r4, pc}
    f34a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    f34e:	2301      	movs	r3, #1
    f350:	2105      	movs	r1, #5
    f352:	3080      	adds	r0, #128	; 0x80
    f354:	f7fe fad9 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f358:	b108      	cbz	r0, f35e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x14a>
    f35a:	2008      	movs	r0, #8
    f35c:	bd10      	pop	{r4, pc}
    f35e:	2001      	movs	r0, #1
    f360:	bd10      	pop	{r4, pc}
    f362:	6840      	ldr	r0, [r0, #4]
    f364:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f368:	2913      	cmp	r1, #19
    f36a:	d001      	beq.n	f370 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x15c>
    f36c:	2002      	movs	r0, #2
    f36e:	4770      	bx	lr
    f370:	2114      	movs	r1, #20
    f372:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f376:	2000      	movs	r0, #0
    f378:	4770      	bx	lr
    f37a:	b510      	push	{r4, lr}
    f37c:	4604      	mov	r4, r0
    f37e:	6840      	ldr	r0, [r0, #4]
    f380:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    f384:	2819      	cmp	r0, #25
    f386:	d001      	beq.n	f38c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x178>
    f388:	2002      	movs	r0, #2
    f38a:	bd10      	pop	{r4, pc}
    f38c:	f7f9 f8e4 	bl	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f390:	6861      	ldr	r1, [r4, #4]
    f392:	201d      	movs	r0, #29
    f394:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f398:	2000      	movs	r0, #0
    f39a:	bd10      	pop	{r4, pc}
    f39c:	b510      	push	{r4, lr}
    f39e:	6843      	ldr	r3, [r0, #4]
    f3a0:	4604      	mov	r4, r0
    f3a2:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
    f3a6:	2808      	cmp	r0, #8
    f3a8:	d20d      	bcs.n	f3c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b2>
    f3aa:	f500 720c 	add.w	r2, r0, #560	; 0x230
    f3ae:	f1c0 0008 	rsb	r0, r0, #8
    f3b2:	b2c1      	uxtb	r1, r0
    f3b4:	1898      	adds	r0, r3, r2
    f3b6:	f7f5 f969 	bl	468c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f3ba:	6861      	ldr	r1, [r4, #4]
    f3bc:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    f3c0:	4410      	add	r0, r2
    f3c2:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    f3c6:	6862      	ldr	r2, [r4, #4]
    f3c8:	f892 1122 	ldrb.w	r1, [r2, #290]	; 0x122
    f3cc:	3908      	subs	r1, #8
    f3ce:	2904      	cmp	r1, #4
    f3d0:	d20d      	bcs.n	f3ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1da>
    f3d2:	f501 708a 	add.w	r0, r1, #276	; 0x114
    f3d6:	f1c1 0104 	rsb	r1, r1, #4
    f3da:	b2c9      	uxtb	r1, r1
    f3dc:	4410      	add	r0, r2
    f3de:	f7f5 f955 	bl	468c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f3e2:	6861      	ldr	r1, [r4, #4]
    f3e4:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    f3e8:	4410      	add	r0, r2
    f3ea:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    f3ee:	6860      	ldr	r0, [r4, #4]
    f3f0:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    f3f4:	290c      	cmp	r1, #12
    f3f6:	d30f      	bcc.n	f418 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x204>
    f3f8:	d005      	beq.n	f406 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1f2>
    f3fa:	f640 1135 	movw	r1, #2357	; 0x935
    f3fe:	f04f 0031 	mov.w	r0, #49	; 0x31
    f402:	f7f5 f8a3 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f406:	2100      	movs	r1, #0
    f408:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
    f40c:	2101      	movs	r1, #1
    f40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f412:	2004      	movs	r0, #4
    f414:	f7f9 be4e 	b.w	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    f418:	bd10      	pop	{r4, pc}
    f41a:	6842      	ldr	r2, [r0, #4]
    f41c:	2130      	movs	r1, #48	; 0x30
    f41e:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    f422:	6840      	ldr	r0, [r0, #4]
    f424:	2100      	movs	r1, #0
    f426:	f880 12b4 	strb.w	r1, [r0, #692]	; 0x2b4
    f42a:	4770      	bx	lr
    f42c:	b510      	push	{r4, lr}
    f42e:	6841      	ldr	r1, [r0, #4]
    f430:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    f434:	2a16      	cmp	r2, #22
    f436:	d004      	beq.n	f442 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x22e>
    f438:	f240 71cc 	movw	r1, #1996	; 0x7cc
    f43c:	2031      	movs	r0, #49	; 0x31
    f43e:	f7f5 f885 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f442:	2201      	movs	r2, #1
    f444:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    f448:	6840      	ldr	r0, [r0, #4]
    f44a:	2117      	movs	r1, #23
    f44c:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f450:	bd10      	pop	{r4, pc}
    f452:	f7fe bfd0 	b.w	e3f6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f456:	b510      	push	{r4, lr}
    f458:	4604      	mov	r4, r0
    f45a:	6840      	ldr	r0, [r0, #4]
    f45c:	2301      	movs	r3, #1
    f45e:	2100      	movs	r1, #0
    f460:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f464:	3080      	adds	r0, #128	; 0x80
    f466:	f7fe fa50 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f46a:	b120      	cbz	r0, f476 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x262>
    f46c:	6861      	ldr	r1, [r4, #4]
    f46e:	201e      	movs	r0, #30
    f470:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f474:	bd10      	pop	{r4, pc}
    f476:	f640 0148 	movw	r1, #2120	; 0x848
    f47a:	2031      	movs	r0, #49	; 0x31
    f47c:	f7f5 f866 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f480:	b510      	push	{r4, lr}
    f482:	6841      	ldr	r1, [r0, #4]
    f484:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    f488:	06c2      	lsls	r2, r0, #27
    f48a:	d402      	bmi.n	f492 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x27e>
    f48c:	f640 014f 	movw	r1, #2127	; 0x84f
    f490:	e003      	b.n	f49a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x286>
    f492:	0682      	lsls	r2, r0, #26
    f494:	d504      	bpl.n	f4a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x28c>
    f496:	f44f 6105 	mov.w	r1, #2128	; 0x850
    f49a:	2031      	movs	r0, #49	; 0x31
    f49c:	f7f5 f856 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4a0:	f020 0010 	bic.w	r0, r0, #16
    f4a4:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    f4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4ac:	f7f9 b854 	b.w	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f4b0:	b510      	push	{r4, lr}
    f4b2:	4604      	mov	r4, r0
    f4b4:	6840      	ldr	r0, [r0, #4]
    f4b6:	2301      	movs	r3, #1
    f4b8:	2100      	movs	r1, #0
    f4ba:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f4be:	3080      	adds	r0, #128	; 0x80
    f4c0:	f7fe fa23 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f4c4:	b120      	cbz	r0, f4d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2bc>
    f4c6:	6861      	ldr	r1, [r4, #4]
    f4c8:	2010      	movs	r0, #16
    f4ca:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f4ce:	bd10      	pop	{r4, pc}
    f4d0:	f640 013b 	movw	r1, #2107	; 0x83b
    f4d4:	2031      	movs	r0, #49	; 0x31
    f4d6:	f7f5 f839 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4da:	6840      	ldr	r0, [r0, #4]
    f4dc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f4e0:	f021 0104 	bic.w	r1, r1, #4
    f4e4:	6001      	str	r1, [r0, #0]
    f4e6:	f7f9 b837 	b.w	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f4ea:	b510      	push	{r4, lr}
    f4ec:	6841      	ldr	r1, [r0, #4]
    f4ee:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    f4f2:	2a12      	cmp	r2, #18
    f4f4:	d004      	beq.n	f500 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ec>
    f4f6:	f240 71c4 	movw	r1, #1988	; 0x7c4
    f4fa:	2031      	movs	r0, #49	; 0x31
    f4fc:	f7f5 f826 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f500:	2201      	movs	r2, #1
    f502:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    f506:	6840      	ldr	r0, [r0, #4]
    f508:	2113      	movs	r1, #19
    f50a:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f50e:	bd10      	pop	{r4, pc}
    f510:	b510      	push	{r4, lr}
    f512:	4604      	mov	r4, r0
    f514:	6840      	ldr	r0, [r0, #4]
    f516:	2301      	movs	r3, #1
    f518:	2100      	movs	r1, #0
    f51a:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f51e:	3080      	adds	r0, #128	; 0x80
    f520:	f7fe f9f3 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f524:	b120      	cbz	r0, f530 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f526:	6861      	ldr	r1, [r4, #4]
    f528:	2021      	movs	r0, #33	; 0x21
    f52a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f52e:	bd10      	pop	{r4, pc}
    f530:	f640 015a 	movw	r1, #2138	; 0x85a
    f534:	2031      	movs	r0, #49	; 0x31
    f536:	f7f5 f809 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f53a:	b510      	push	{r4, lr}
    f53c:	6841      	ldr	r1, [r0, #4]
    f53e:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    f542:	2823      	cmp	r0, #35	; 0x23
    f544:	d005      	beq.n	f552 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f546:	b120      	cbz	r0, f552 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f548:	f640 0161 	movw	r1, #2145	; 0x861
    f54c:	2031      	movs	r0, #49	; 0x31
    f54e:	f7f4 fffd 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f552:	2024      	movs	r0, #36	; 0x24
    f554:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f558:	bd10      	pop	{r4, pc}
    f55a:	b510      	push	{r4, lr}
    f55c:	6840      	ldr	r0, [r0, #4]
    f55e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f562:	292f      	cmp	r1, #47	; 0x2f
    f564:	d006      	beq.n	f574 <__kernel_ram_size+0xc>
    f566:	2917      	cmp	r1, #23
    f568:	d00b      	beq.n	f582 <__kernel_ram_size+0x1a>
    f56a:	f240 71ee 	movw	r1, #2030	; 0x7ee
    f56e:	2031      	movs	r0, #49	; 0x31
    f570:	f7f4 ffec 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f574:	2100      	movs	r1, #0
    f576:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f57e:	f7f8 bfeb 	b.w	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f582:	211b      	movs	r1, #27
    f584:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f588:	bd10      	pop	{r4, pc}
    f58a:	b510      	push	{r4, lr}
    f58c:	6840      	ldr	r0, [r0, #4]
    f58e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f592:	2917      	cmp	r1, #23
    f594:	d004      	beq.n	f5a0 <__kernel_ram_size+0x38>
    f596:	f240 71d9 	movw	r1, #2009	; 0x7d9
    f59a:	2031      	movs	r0, #49	; 0x31
    f59c:	f7f4 ffd6 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5a0:	211b      	movs	r1, #27
    f5a2:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5a6:	bd10      	pop	{r4, pc}
    f5a8:	f7fe bf13 	b.w	e3d2 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f5ac:	b510      	push	{r4, lr}
    f5ae:	6840      	ldr	r0, [r0, #4]
    f5b0:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f5b4:	2917      	cmp	r1, #23
    f5b6:	d004      	beq.n	f5c2 <__kernel_ram_size+0x5a>
    f5b8:	f240 71d3 	movw	r1, #2003	; 0x7d3
    f5bc:	2031      	movs	r0, #49	; 0x31
    f5be:	f7f4 ffc5 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5c2:	2119      	movs	r1, #25
    f5c4:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5c8:	bd10      	pop	{r4, pc}
    f5ca:	b538      	push	{r3, r4, r5, lr}
    f5cc:	4604      	mov	r4, r0
    f5ce:	6840      	ldr	r0, [r0, #4]
    f5d0:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f5d4:	291d      	cmp	r1, #29
    f5d6:	d002      	beq.n	f5de <__kernel_ram_size+0x76>
    f5d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
    f5dc:	e00f      	b.n	f5fe <__kernel_ram_size+0x96>
    f5de:	2500      	movs	r5, #0
    f5e0:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    f5e4:	6860      	ldr	r0, [r4, #4]
    f5e6:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    f5ea:	f88d 1000 	strb.w	r1, [sp]
    f5ee:	9900      	ldr	r1, [sp, #0]
    f5f0:	9100      	str	r1, [sp, #0]
    f5f2:	f89d 2000 	ldrb.w	r2, [sp]
    f5f6:	2101      	movs	r1, #1
    f5f8:	b122      	cbz	r2, f604 <__kernel_ram_size+0x9c>
    f5fa:	f640 0103 	movw	r1, #2051	; 0x803
    f5fe:	2031      	movs	r0, #49	; 0x31
    f600:	f7f4 ffa4 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f604:	f890 20d4 	ldrb.w	r2, [r0, #212]	; 0xd4
    f608:	b162      	cbz	r2, f624 <__kernel_ram_size+0xbc>
    f60a:	f880 50d4 	strb.w	r5, [r0, #212]	; 0xd4
    f60e:	6860      	ldr	r0, [r4, #4]
    f610:	220c      	movs	r2, #12
    f612:	8801      	ldrh	r1, [r0, #0]
    f614:	f8a0 1208 	strh.w	r1, [r0, #520]	; 0x208
    f618:	6860      	ldr	r0, [r4, #4]
    f61a:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f61e:	6861      	ldr	r1, [r4, #4]
    f620:	4608      	mov	r0, r1
    f622:	e00b      	b.n	f63c <__kernel_ram_size+0xd4>
    f624:	8802      	ldrh	r2, [r0, #0]
    f626:	f8a0 2208 	strh.w	r2, [r0, #520]	; 0x208
    f62a:	6860      	ldr	r0, [r4, #4]
    f62c:	220b      	movs	r2, #11
    f62e:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f632:	6860      	ldr	r0, [r4, #4]
    f634:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    f638:	6861      	ldr	r1, [r4, #4]
    f63a:	4608      	mov	r0, r1
    f63c:	f200 10fd 	addw	r0, r0, #509	; 0x1fd
    f640:	f7f6 fef6 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f644:	6860      	ldr	r0, [r4, #4]
    f646:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    f64a:	bd38      	pop	{r3, r4, r5, pc}
    f64c:	b510      	push	{r4, lr}
    f64e:	4604      	mov	r4, r0
    f650:	6840      	ldr	r0, [r0, #4]
    f652:	2301      	movs	r3, #1
    f654:	4619      	mov	r1, r3
    f656:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    f65a:	3080      	adds	r0, #128	; 0x80
    f65c:	f7fe f955 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f660:	2800      	cmp	r0, #0
    f662:	d103      	bne.n	f66c <__kernel_ram_size+0x104>
    f664:	6861      	ldr	r1, [r4, #4]
    f666:	2008      	movs	r0, #8
    f668:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    f66c:	bd10      	pop	{r4, pc}
    f66e:	b510      	push	{r4, lr}
    f670:	4604      	mov	r4, r0
    f672:	6840      	ldr	r0, [r0, #4]
    f674:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    f678:	0789      	lsls	r1, r1, #30
    f67a:	d411      	bmi.n	f6a0 <__kernel_ram_size+0x138>
    f67c:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f680:	2301      	movs	r3, #1
    f682:	2100      	movs	r1, #0
    f684:	3080      	adds	r0, #128	; 0x80
    f686:	f7fe f940 	bl	d90a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f68a:	b120      	cbz	r0, f696 <__kernel_ram_size+0x12e>
    f68c:	6861      	ldr	r1, [r4, #4]
    f68e:	2006      	movs	r0, #6
    f690:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f694:	e00a      	b.n	f6ac <__kernel_ram_size+0x144>
    f696:	f640 0127 	movw	r1, #2087	; 0x827
    f69a:	2031      	movs	r0, #49	; 0x31
    f69c:	f7f4 ff56 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6a0:	2100      	movs	r1, #0
    f6a2:	f880 10ce 	strb.w	r1, [r0, #206]	; 0xce
    f6a6:	6860      	ldr	r0, [r4, #4]
    f6a8:	f880 113a 	strb.w	r1, [r0, #314]	; 0x13a
    f6ac:	6860      	ldr	r0, [r4, #4]
    f6ae:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f6b2:	0780      	lsls	r0, r0, #30
    f6b4:	d507      	bpl.n	f6c6 <__kernel_ram_size+0x15e>
    f6b6:	f7f8 ff4f 	bl	8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f6ba:	6860      	ldr	r0, [r4, #4]
    f6bc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f6c0:	f021 0102 	bic.w	r1, r1, #2
    f6c4:	6001      	str	r1, [r0, #0]
    f6c6:	bd10      	pop	{r4, pc}

0000f6c8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6cc:	6856      	ldr	r6, [r2, #4]
    f6ce:	460c      	mov	r4, r1
    f6d0:	f506 7594 	add.w	r5, r6, #296	; 0x128
    f6d4:	f106 0780 	add.w	r7, r6, #128	; 0x80
    f6d8:	2823      	cmp	r0, #35	; 0x23
    f6da:	d008      	beq.n	f6ee <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f6dc:	2824      	cmp	r0, #36	; 0x24
    f6de:	d015      	beq.n	f70c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x44>
    f6e0:	2825      	cmp	r0, #37	; 0x25
    f6e2:	d02a      	beq.n	f73a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f6e4:	f44f 718a 	mov.w	r1, #276	; 0x114
    f6e8:	2078      	movs	r0, #120	; 0x78
    f6ea:	f7f4 ff2f 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6ee:	7e68      	ldrb	r0, [r5, #25]
    f6f0:	f000 f8b5 	bl	f85e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f6f4:	7e69      	ldrb	r1, [r5, #25]
    f6f6:	7121      	strb	r1, [r4, #4]
    f6f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f6fc:	7ea9      	ldrb	r1, [r5, #26]
    f6fe:	4430      	add	r0, r6
    f700:	7161      	strb	r1, [r4, #5]
    f702:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f706:	71a0      	strb	r0, [r4, #6]
    f708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f70c:	7d68      	ldrb	r0, [r5, #21]
    f70e:	f000 f8a6 	bl	f85e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f712:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f716:	4430      	add	r0, r6
    f718:	7d79      	ldrb	r1, [r7, #21]
    f71a:	306f      	adds	r0, #111	; 0x6f
    f71c:	2929      	cmp	r1, #41	; 0x29
    f71e:	d00a      	beq.n	f736 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f720:	7881      	ldrb	r1, [r0, #2]
    f722:	7802      	ldrb	r2, [r0, #0]
    f724:	7122      	strb	r2, [r4, #4]
    f726:	7daa      	ldrb	r2, [r5, #22]
    f728:	7162      	strb	r2, [r4, #5]
    f72a:	7840      	ldrb	r0, [r0, #1]
    f72c:	71a0      	strb	r0, [r4, #6]
    f72e:	71e1      	strb	r1, [r4, #7]
    f730:	2000      	movs	r0, #0
    f732:	7528      	strb	r0, [r5, #20]
    f734:	e7e8      	b.n	f708 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>
    f736:	21ff      	movs	r1, #255	; 0xff
    f738:	e7f3      	b.n	f722 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f73a:	7d68      	ldrb	r0, [r5, #21]
    f73c:	f000 f88f 	bl	f85e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f740:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f744:	4430      	add	r0, r6
    f746:	7d69      	ldrb	r1, [r5, #21]
    f748:	7121      	strb	r1, [r4, #4]
    f74a:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f74e:	7161      	strb	r1, [r4, #5]
    f750:	7da9      	ldrb	r1, [r5, #22]
    f752:	71a1      	strb	r1, [r4, #6]
    f754:	7840      	ldrb	r0, [r0, #1]
    f756:	71e0      	strb	r0, [r4, #7]
    f758:	e7d6      	b.n	f708 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>

0000f75a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f75a:	b510      	push	{r4, lr}
    f75c:	2801      	cmp	r0, #1
    f75e:	d006      	beq.n	f76e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f760:	2802      	cmp	r0, #2
    f762:	d006      	beq.n	f772 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f764:	f240 2176 	movw	r1, #630	; 0x276
    f768:	2078      	movs	r0, #120	; 0x78
    f76a:	f7f4 feef 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f76e:	2000      	movs	r0, #0
    f770:	bd10      	pop	{r4, pc}
    f772:	2001      	movs	r0, #1
    f774:	bd10      	pop	{r4, pc}

0000f776 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    f776:	b570      	push	{r4, r5, r6, lr}
    f778:	6844      	ldr	r4, [r0, #4]
    f77a:	220f      	movs	r2, #15
    f77c:	f504 7594 	add.w	r5, r4, #296	; 0x128
    f780:	2100      	movs	r1, #0
    f782:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    f786:	f7fc fef2 	bl	c56e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f78a:	2100      	movs	r1, #0
    f78c:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    f790:	61a9      	str	r1, [r5, #24]
    f792:	4608      	mov	r0, r1
    f794:	217f      	movs	r1, #127	; 0x7f
    f796:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f79a:	4422      	add	r2, r4
    f79c:	1c40      	adds	r0, r0, #1
    f79e:	b2c0      	uxtb	r0, r0
    f7a0:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    f7a4:	2802      	cmp	r0, #2
    f7a6:	d3f6      	bcc.n	f796 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x20>
    f7a8:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    f7ac:	4620      	mov	r0, r4
    f7ae:	f000 f814 	bl	f7da <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    f7b2:	2000      	movs	r0, #0
    f7b4:	21ff      	movs	r1, #255	; 0xff
    f7b6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f7ba:	4422      	add	r2, r4
    f7bc:	1c40      	adds	r0, r0, #1
    f7be:	f802 1f71 	strb.w	r1, [r2, #113]!
    f7c2:	b2c0      	uxtb	r0, r0
    f7c4:	7191      	strb	r1, [r2, #6]
    f7c6:	2802      	cmp	r0, #2
    f7c8:	d3f5      	bcc.n	f7b6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x40>
    f7ca:	bd70      	pop	{r4, r5, r6, pc}

0000f7cc <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>:
    f7cc:	207f      	movs	r0, #127	; 0x7f
    f7ce:	f000 b857 	b.w	f880 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f7d2 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>:
    f7d2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f7d6:	f000 b853 	b.w	f880 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f7da <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7de:	460d      	mov	r5, r1
    f7e0:	4606      	mov	r6, r0
    f7e2:	f7ff fff3 	bl	f7cc <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>
    f7e6:	4607      	mov	r7, r0
    f7e8:	f7ff fff3 	bl	f7d2 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>
    f7ec:	2400      	movs	r4, #0
    f7ee:	4285      	cmp	r5, r0
    f7f0:	d100      	bne.n	f7f4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f7f2:	2401      	movs	r4, #1
    f7f4:	42bd      	cmp	r5, r7
    f7f6:	d101      	bne.n	f7fc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f7f8:	f044 0402 	orr.w	r4, r4, #2
    f7fc:	f000 f823 	bl	f846 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1e>
    f800:	2200      	movs	r2, #0
    f802:	4601      	mov	r1, r0
    f804:	2301      	movs	r3, #1
    f806:	fa03 f002 	lsl.w	r0, r3, r2
    f80a:	4208      	tst	r0, r1
    f80c:	d006      	beq.n	f81c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x42>
    f80e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    f812:	4430      	add	r0, r6
    f814:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f818:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f81c:	1c52      	adds	r2, r2, #1
    f81e:	b2d2      	uxtb	r2, r2
    f820:	2a02      	cmp	r2, #2
    f822:	d3f0      	bcc.n	f806 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f828 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f828:	b510      	push	{r4, lr}
    f82a:	4604      	mov	r4, r0
    f82c:	4608      	mov	r0, r1
    f82e:	f7ff ff94 	bl	f75a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f832:	2802      	cmp	r0, #2
    f834:	d206      	bcs.n	f844 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f836:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f83a:	4420      	add	r0, r4
    f83c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f840:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f844:	bd10      	pop	{r4, pc}
    f846:	b510      	push	{r4, lr}
    f848:	f7fa ff1e 	bl	a688 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f84c:	0a00      	lsrs	r0, r0, #8
    f84e:	2201      	movs	r2, #1
    f850:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f854:	07c0      	lsls	r0, r0, #31
    f856:	d000      	beq.n	f85a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x32>
    f858:	2203      	movs	r2, #3
    f85a:	4610      	mov	r0, r2
    f85c:	bd10      	pop	{r4, pc}
    f85e:	4601      	mov	r1, r0
    f860:	b510      	push	{r4, lr}
    f862:	2000      	movs	r0, #0
    f864:	2301      	movs	r3, #1
    f866:	fa03 f200 	lsl.w	r2, r3, r0
    f86a:	420a      	tst	r2, r1
    f86c:	d107      	bne.n	f87e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x56>
    f86e:	1c40      	adds	r0, r0, #1
    f870:	b2c0      	uxtb	r0, r0
    f872:	2802      	cmp	r0, #2
    f874:	d3f7      	bcc.n	f866 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f876:	2149      	movs	r1, #73	; 0x49
    f878:	2078      	movs	r0, #120	; 0x78
    f87a:	f7f4 fe67 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f87e:	bd10      	pop	{r4, pc}
    f880:	b508      	push	{r3, lr}
    f882:	f640 1288 	movw	r2, #2440	; 0x988
    f886:	4669      	mov	r1, sp
    f888:	f7f4 fd42 	bl	4310 <mpsl_fem_tx_power_split>
    f88c:	bd08      	pop	{r3, pc}
    f88e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f892:	f001 0107 	and.w	r1, r1, #7
    f896:	7800      	ldrb	r0, [r0, #0]
    f898:	40c8      	lsrs	r0, r1
    f89a:	f000 0001 	and.w	r0, r0, #1
    f89e:	4770      	bx	lr
    f8a0:	b118      	cbz	r0, f8aa <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f8a2:	2802      	cmp	r0, #2
    f8a4:	d001      	beq.n	f8aa <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f8a6:	2001      	movs	r0, #1
    f8a8:	4770      	bx	lr
    f8aa:	2000      	movs	r0, #0
    f8ac:	4770      	bx	lr

0000f8ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f8ae:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f8b0:	7881      	ldrb	r1, [r0, #2]
    f8b2:	2500      	movs	r5, #0
    f8b4:	4604      	mov	r4, r0
    f8b6:	291a      	cmp	r1, #26
    f8b8:	d024      	beq.n	f904 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f8ba:	dc0e      	bgt.n	f8da <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f8bc:	2916      	cmp	r1, #22
    f8be:	d22b      	bcs.n	f918 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8c0:	e8df f001 	tbb	[pc, r1]
    f8c4:	2a2a2a2a 	.word	0x2a2a2a2a
    f8c8:	2a2a202a 	.word	0x2a2a202a
    f8cc:	2a2a2a2a 	.word	0x2a2a2a2a
    f8d0:	2a2a2a2a 	.word	0x2a2a2a2a
    f8d4:	202a2a2a 	.word	0x202a2a2a
    f8d8:	2020      	.short	0x2020
    f8da:	292a      	cmp	r1, #42	; 0x2a
    f8dc:	d01c      	beq.n	f918 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8de:	dc0b      	bgt.n	f8f8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f8e0:	f1a1 011e 	sub.w	r1, r1, #30
    f8e4:	290c      	cmp	r1, #12
    f8e6:	d217      	bcs.n	f918 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8e8:	e8df f001 	tbb	[pc, r1]
    f8ec:	16161616 	.word	0x16161616
    f8f0:	16161616 	.word	0x16161616
    f8f4:	0c161616 	.word	0x0c161616
    f8f8:	393a      	subs	r1, #58	; 0x3a
    f8fa:	2902      	cmp	r1, #2
    f8fc:	d20c      	bcs.n	f918 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8fe:	e8df f001 	tbb	[pc, r1]
    f902:	010b      	.short	0x010b
    f904:	8820      	ldrh	r0, [r4, #0]
    f906:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f90a:	d205      	bcs.n	f918 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f90c:	4669      	mov	r1, sp
    f90e:	f7fd ffd2 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f912:	b118      	cbz	r0, f91c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f914:	2002      	movs	r0, #2
    f916:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f918:	2012      	movs	r0, #18
    f91a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f91c:	9901      	ldr	r1, [sp, #4]
    f91e:	4668      	mov	r0, sp
    f920:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    f924:	f88d 2008 	strb.w	r2, [sp, #8]
    f928:	9a02      	ldr	r2, [sp, #8]
    f92a:	9202      	str	r2, [sp, #8]
    f92c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f930:	f501 7194 	add.w	r1, r1, #296	; 0x128
    f934:	b10a      	cbz	r2, f93a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f936:	200c      	movs	r0, #12
    f938:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f93a:	78a2      	ldrb	r2, [r4, #2]
    f93c:	704a      	strb	r2, [r1, #1]
    f93e:	22ff      	movs	r2, #255	; 0xff
    f940:	700a      	strb	r2, [r1, #0]
    f942:	f7fe fb51 	bl	dfe8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f946:	4628      	mov	r0, r5
    f948:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f94a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f94a:	b510      	push	{r4, lr}
    f94c:	4604      	mov	r4, r0
    f94e:	f7fa fdcd 	bl	a4ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f952:	b108      	cbz	r0, f958 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f954:	200c      	movs	r0, #12
    f956:	bd10      	pop	{r4, pc}
    f958:	7820      	ldrb	r0, [r4, #0]
    f95a:	b118      	cbz	r0, f964 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f95c:	2801      	cmp	r0, #1
    f95e:	d001      	beq.n	f964 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f960:	2012      	movs	r0, #18
    f962:	bd10      	pop	{r4, pc}
    f964:	f7ff ff9c 	bl	f8a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    f968:	1c61      	adds	r1, r4, #1
    f96a:	f7f6 fab5 	bl	5ed8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f96e:	b108      	cbz	r0, f974 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f970:	2000      	movs	r0, #0
    f972:	bd10      	pop	{r4, pc}
    f974:	2007      	movs	r0, #7
    f976:	bd10      	pop	{r4, pc}

0000f978 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f978:	b510      	push	{r4, lr}
    f97a:	f7fa fdb7 	bl	a4ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f97e:	b108      	cbz	r0, f984 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f980:	200c      	movs	r0, #12
    f982:	bd10      	pop	{r4, pc}
    f984:	f7f6 fad0 	bl	5f28 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f988:	2000      	movs	r0, #0
    f98a:	bd10      	pop	{r4, pc}

0000f98c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f98c:	b510      	push	{r4, lr}
    f98e:	460b      	mov	r3, r1
    f990:	2201      	movs	r2, #1
    f992:	f100 0110 	add.w	r1, r0, #16
    f996:	f7fd ff70 	bl	d87a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f99a:	2000      	movs	r0, #0
    f99c:	bd10      	pop	{r4, pc}

0000f99e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f99e:	b510      	push	{r4, lr}
    f9a0:	8800      	ldrh	r0, [r0, #0]
    f9a2:	2100      	movs	r1, #0
    f9a4:	f7fd fd10 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9a8:	b118      	cbz	r0, f9b2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f9aa:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    f9ae:	b111      	cbz	r1, f9b6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f9b0:	e007      	b.n	f9c2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f9b2:	2002      	movs	r0, #2
    f9b4:	bd10      	pop	{r4, pc}
    f9b6:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f9ba:	2916      	cmp	r1, #22
    f9bc:	d003      	beq.n	f9c6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f9be:	2917      	cmp	r1, #23
    f9c0:	d001      	beq.n	f9c6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f9c2:	200c      	movs	r0, #12
    f9c4:	bd10      	pop	{r4, pc}
    f9c6:	2102      	movs	r1, #2
    f9c8:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    f9cc:	2000      	movs	r0, #0
    f9ce:	bd10      	pop	{r4, pc}

0000f9d0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9d2:	4605      	mov	r5, r0
    f9d4:	8800      	ldrh	r0, [r0, #0]
    f9d6:	2100      	movs	r1, #0
    f9d8:	f7fd fcf6 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9dc:	0004      	movs	r4, r0
    f9de:	d003      	beq.n	f9e8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f9e0:	f894 02a0 	ldrb.w	r0, [r4, #672]	; 0x2a0
    f9e4:	b110      	cbz	r0, f9ec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f9e6:	e011      	b.n	fa0c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f9e8:	2002      	movs	r0, #2
    f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9ec:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    f9f0:	2816      	cmp	r0, #22
    f9f2:	d001      	beq.n	f9f8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f9f4:	2817      	cmp	r0, #23
    f9f6:	d109      	bne.n	fa0c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f9f8:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
    f9fc:	f88d 0000 	strb.w	r0, [sp]
    fa00:	9800      	ldr	r0, [sp, #0]
    fa02:	9000      	str	r0, [sp, #0]
    fa04:	f89d 0000 	ldrb.w	r0, [sp]
    fa08:	2601      	movs	r6, #1
    fa0a:	b108      	cbz	r0, fa10 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fa0c:	200c      	movs	r0, #12
    fa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa10:	2210      	movs	r2, #16
    fa12:	1ca9      	adds	r1, r5, #2
    fa14:	f204 20a1 	addw	r0, r4, #673	; 0x2a1
    fa18:	f7fc fd2f 	bl	c47a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fa1c:	f884 62a0 	strb.w	r6, [r4, #672]	; 0x2a0
    fa20:	2000      	movs	r0, #0
    fa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fa24 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fa24:	b510      	push	{r4, lr}
    fa26:	2108      	movs	r1, #8
    fa28:	f7f4 fe3e 	bl	46a8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fa2c:	2000      	movs	r0, #0
    fa2e:	bd10      	pop	{r4, pc}

0000fa30 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fa30:	b510      	push	{r4, lr}
    fa32:	4604      	mov	r4, r0
    fa34:	f7fa fbda 	bl	a1ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fa38:	f7fe fe79 	bl	e72e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fa3c:	7020      	strb	r0, [r4, #0]
    fa3e:	2000      	movs	r0, #0
    fa40:	bd10      	pop	{r4, pc}

0000fa42 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fa42:	21fb      	movs	r1, #251	; 0xfb
    fa44:	8001      	strh	r1, [r0, #0]
    fa46:	f640 0248 	movw	r2, #2120	; 0x848
    fa4a:	8042      	strh	r2, [r0, #2]
    fa4c:	8081      	strh	r1, [r0, #4]
    fa4e:	80c2      	strh	r2, [r0, #6]
    fa50:	2000      	movs	r0, #0
    fa52:	4770      	bx	lr

0000fa54 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fa54:	b51c      	push	{r2, r3, r4, lr}
    fa56:	8800      	ldrh	r0, [r0, #0]
    fa58:	4669      	mov	r1, sp
    fa5a:	f7fd ff2c 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa5e:	2800      	cmp	r0, #0
    fa60:	d10d      	bne.n	fa7e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fa62:	f89d 0000 	ldrb.w	r0, [sp]
    fa66:	9c01      	ldr	r4, [sp, #4]
    fa68:	2801      	cmp	r0, #1
    fa6a:	f504 7494 	add.w	r4, r4, #296	; 0x128
    fa6e:	d103      	bne.n	fa78 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fa70:	9801      	ldr	r0, [sp, #4]
    fa72:	f000 fcf8 	bl	10466 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fa76:	b118      	cbz	r0, fa80 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fa78:	7ce0      	ldrb	r0, [r4, #19]
    fa7a:	b118      	cbz	r0, fa84 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fa7c:	203a      	movs	r0, #58	; 0x3a
    fa7e:	bd1c      	pop	{r2, r3, r4, pc}
    fa80:	2002      	movs	r0, #2
    fa82:	bd1c      	pop	{r2, r3, r4, pc}
    fa84:	2001      	movs	r0, #1
    fa86:	74e0      	strb	r0, [r4, #19]
    fa88:	2000      	movs	r0, #0
    fa8a:	bd1c      	pop	{r2, r3, r4, pc}

0000fa8c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fa8c:	b510      	push	{r4, lr}
    fa8e:	4604      	mov	r4, r0
    fa90:	20d8      	movs	r0, #216	; 0xd8
    fa92:	7020      	strb	r0, [r4, #0]
    fa94:	f000 fce4 	bl	10460 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fa98:	7060      	strb	r0, [r4, #1]
    fa9a:	2000      	movs	r0, #0
    fa9c:	bd10      	pop	{r4, pc}

0000fa9e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fa9e:	2108      	movs	r1, #8
    faa0:	7001      	strb	r1, [r0, #0]
    faa2:	2000      	movs	r0, #0
    faa4:	4770      	bx	lr

0000faa6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    faa6:	b510      	push	{r4, lr}
    faa8:	4604      	mov	r4, r0
    faaa:	f7fa fd1f 	bl	a4ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    faae:	b108      	cbz	r0, fab4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fab0:	200c      	movs	r0, #12
    fab2:	bd10      	pop	{r4, pc}
    fab4:	7820      	ldrb	r0, [r4, #0]
    fab6:	b108      	cbz	r0, fabc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fab8:	2801      	cmp	r0, #1
    faba:	d107      	bne.n	facc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fabc:	f7ff fef0 	bl	f8a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    fac0:	1c61      	adds	r1, r4, #1
    fac2:	f7fd fecf 	bl	d864 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fac6:	b108      	cbz	r0, facc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fac8:	2000      	movs	r0, #0
    faca:	bd10      	pop	{r4, pc}
    facc:	2012      	movs	r0, #18
    face:	bd10      	pop	{r4, pc}

0000fad0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fad0:	b51c      	push	{r2, r3, r4, lr}
    fad2:	4604      	mov	r4, r0
    fad4:	f7fa fb8a 	bl	a1ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fad8:	2000      	movs	r0, #0
    fada:	f88d 0002 	strb.w	r0, [sp, #2]
    fade:	2103      	movs	r1, #3
    fae0:	f88d 1001 	strb.w	r1, [sp, #1]
    fae4:	f814 1b01 	ldrb.w	r1, [r4], #1
    fae8:	f88d 1003 	strb.w	r1, [sp, #3]
    faec:	f88d 0000 	strb.w	r0, [sp]
    faf0:	4668      	mov	r0, sp
    faf2:	9401      	str	r4, [sp, #4]
    faf4:	f000 f99f 	bl	fe36 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    faf8:	bd1c      	pop	{r2, r3, r4, pc}

0000fafa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fafa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fafc:	4605      	mov	r5, r0
    fafe:	f7fa fb75 	bl	a1ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb02:	4606      	mov	r6, r0
    fb04:	7828      	ldrb	r0, [r5, #0]
    fb06:	2400      	movs	r4, #0
    fb08:	b160      	cbz	r0, fb24 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fb0a:	f88d 4000 	strb.w	r4, [sp]
    fb0e:	2001      	movs	r0, #1
    fb10:	f10d 0101 	add.w	r1, sp, #1
    fb14:	f7f5 fbb6 	bl	5284 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fb18:	b120      	cbz	r0, fb24 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fb1a:	4668      	mov	r0, sp
    fb1c:	f000 f897 	bl	fc4e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fb20:	2800      	cmp	r0, #0
    fb22:	d112      	bne.n	fb4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fb24:	f88d 400c 	strb.w	r4, [sp, #12]
    fb28:	4630      	mov	r0, r6
    fb2a:	f7fe fdf6 	bl	e71a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fb2e:	b118      	cbz	r0, fb38 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fb30:	2080      	movs	r0, #128	; 0x80
    fb32:	f8ad 000d 	strh.w	r0, [sp, #13]
    fb36:	e001      	b.n	fb3c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fb38:	f8ad 400d 	strh.w	r4, [sp, #13]
    fb3c:	f88d 400f 	strb.w	r4, [sp, #15]
    fb40:	7828      	ldrb	r0, [r5, #0]
    fb42:	2801      	cmp	r0, #1
    fb44:	d003      	beq.n	fb4e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fb46:	b138      	cbz	r0, fb58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fb48:	2012      	movs	r0, #18
    fb4a:	b004      	add	sp, #16
    fb4c:	bd70      	pop	{r4, r5, r6, pc}
    fb4e:	a903      	add	r1, sp, #12
    fb50:	4630      	mov	r0, r6
    fb52:	f7fa fb67 	bl	a224 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fb56:	e7f8      	b.n	fb4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fb58:	4630      	mov	r0, r6
    fb5a:	f000 fc9a 	bl	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fb5e:	e7f4      	b.n	fb4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fb60 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fb60:	b530      	push	{r4, r5, lr}
    fb62:	b08b      	sub	sp, #44	; 0x2c
    fb64:	4604      	mov	r4, r0
    fb66:	f7fa fb41 	bl	a1ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb6a:	4602      	mov	r2, r0
    fb6c:	7920      	ldrb	r0, [r4, #4]
    fb6e:	2804      	cmp	r0, #4
    fb70:	d803      	bhi.n	fb7a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fb72:	8860      	ldrh	r0, [r4, #2]
    fb74:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fb78:	d902      	bls.n	fb80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fb7a:	2012      	movs	r0, #18
    fb7c:	b00b      	add	sp, #44	; 0x2c
    fb7e:	bd30      	pop	{r4, r5, pc}
    fb80:	2500      	movs	r5, #0
    fb82:	f88d 5004 	strb.w	r5, [sp, #4]
    fb86:	7921      	ldrb	r1, [r4, #4]
    fb88:	9500      	str	r5, [sp, #0]
    fb8a:	f89d 0000 	ldrb.w	r0, [sp]
    fb8e:	2905      	cmp	r1, #5
    fb90:	f040 0010 	orr.w	r0, r0, #16
    fb94:	f88d 0000 	strb.w	r0, [sp]
    fb98:	d254      	bcs.n	fc44 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fb9a:	e8df f001 	tbb	[pc, r1]
    fb9e:	0803      	.short	0x0803
    fba0:	000b1105 	.word	0x000b1105
    fba4:	f040 0001 	orr.w	r0, r0, #1
    fba8:	f040 0002 	orr.w	r0, r0, #2
    fbac:	e006      	b.n	fbbc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fbae:	f040 0009 	orr.w	r0, r0, #9
    fbb2:	e001      	b.n	fbb8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fbb4:	f040 0001 	orr.w	r0, r0, #1
    fbb8:	f040 0004 	orr.w	r0, r0, #4
    fbbc:	f88d 0000 	strb.w	r0, [sp]
    fbc0:	f8bd 0000 	ldrh.w	r0, [sp]
    fbc4:	9000      	str	r0, [sp, #0]
    fbc6:	f8bd 0000 	ldrh.w	r0, [sp]
    fbca:	f8ad 0005 	strh.w	r0, [sp, #5]
    fbce:	8821      	ldrh	r1, [r4, #0]
    fbd0:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fbd4:	f361 201f 	bfi	r0, r1, #8, #24
    fbd8:	f8cd 0006 	str.w	r0, [sp, #6]
    fbdc:	8861      	ldrh	r1, [r4, #2]
    fbde:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fbe2:	f361 201f 	bfi	r0, r1, #8, #24
    fbe6:	f8cd 0009 	str.w	r0, [sp, #9]
    fbea:	7b60      	ldrb	r0, [r4, #13]
    fbec:	f88d 000d 	strb.w	r0, [sp, #13]
    fbf0:	7960      	ldrb	r0, [r4, #5]
    fbf2:	f88d 000e 	strb.w	r0, [sp, #14]
    fbf6:	79a0      	ldrb	r0, [r4, #6]
    fbf8:	f88d 000f 	strb.w	r0, [sp, #15]
    fbfc:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fc00:	9004      	str	r0, [sp, #16]
    fc02:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fc06:	f8ad 0014 	strh.w	r0, [sp, #20]
    fc0a:	7ba0      	ldrb	r0, [r4, #14]
    fc0c:	f88d 0016 	strb.w	r0, [sp, #22]
    fc10:	207f      	movs	r0, #127	; 0x7f
    fc12:	f88d 0017 	strb.w	r0, [sp, #23]
    fc16:	2001      	movs	r0, #1
    fc18:	f88d 0018 	strb.w	r0, [sp, #24]
    fc1c:	f88d 5019 	strb.w	r5, [sp, #25]
    fc20:	f88d 001a 	strb.w	r0, [sp, #26]
    fc24:	f88d 501b 	strb.w	r5, [sp, #27]
    fc28:	4610      	mov	r0, r2
    fc2a:	f7fe fd96 	bl	e75a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fc2e:	f88d 001c 	strb.w	r0, [sp, #28]
    fc32:	f88d 501d 	strb.w	r5, [sp, #29]
    fc36:	f88d 501e 	strb.w	r5, [sp, #30]
    fc3a:	a909      	add	r1, sp, #36	; 0x24
    fc3c:	a801      	add	r0, sp, #4
    fc3e:	f7fa f99f 	bl	9f80 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fc42:	e79b      	b.n	fb7c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fc44:	f241 11d5 	movw	r1, #4565	; 0x11d5
    fc48:	2039      	movs	r0, #57	; 0x39
    fc4a:	f7f4 fc7f 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fc4e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fc4e:	b570      	push	{r4, r5, r6, lr}
    fc50:	4604      	mov	r4, r0
    fc52:	7800      	ldrb	r0, [r0, #0]
    fc54:	2101      	movs	r1, #1
    fc56:	f7fd fbb7 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc5a:	0005      	movs	r5, r0
    fc5c:	d007      	beq.n	fc6e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fc5e:	f7fe ff1e 	bl	ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fc62:	b160      	cbz	r0, fc7e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fc64:	4628      	mov	r0, r5
    fc66:	f7fe fd5e 	bl	e726 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fc6a:	b110      	cbz	r0, fc72 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fc6c:	e005      	b.n	fc7a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fc6e:	2042      	movs	r0, #66	; 0x42
    fc70:	bd70      	pop	{r4, r5, r6, pc}
    fc72:	4628      	mov	r0, r5
    fc74:	f7fe fd4d 	bl	e712 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fc78:	b108      	cbz	r0, fc7e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fc7a:	200c      	movs	r0, #12
    fc7c:	bd70      	pop	{r4, r5, r6, pc}
    fc7e:	1c61      	adds	r1, r4, #1
    fc80:	4628      	mov	r0, r5
    fc82:	f7fe fd62 	bl	e74a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fc86:	2000      	movs	r0, #0
    fc88:	bd70      	pop	{r4, r5, r6, pc}

0000fc8a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fc8a:	b50e      	push	{r1, r2, r3, lr}
    fc8c:	8882      	ldrh	r2, [r0, #4]
    fc8e:	f244 2390 	movw	r3, #17040	; 0x4290
    fc92:	429a      	cmp	r2, r3
    fc94:	d901      	bls.n	fc9a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fc96:	2012      	movs	r0, #18
    fc98:	bd0e      	pop	{r1, r2, r3, pc}
    fc9a:	f640 0348 	movw	r3, #2120	; 0x848
    fc9e:	429a      	cmp	r2, r3
    fca0:	d300      	bcc.n	fca4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fca2:	461a      	mov	r2, r3
    fca4:	8803      	ldrh	r3, [r0, #0]
    fca6:	f8ad 3000 	strh.w	r3, [sp]
    fcaa:	8843      	ldrh	r3, [r0, #2]
    fcac:	f8ad 3002 	strh.w	r3, [sp, #2]
    fcb0:	f8ad 2004 	strh.w	r2, [sp, #4]
    fcb4:	8843      	ldrh	r3, [r0, #2]
    fcb6:	f8ad 3006 	strh.w	r3, [sp, #6]
    fcba:	f8ad 2008 	strh.w	r2, [sp, #8]
    fcbe:	8800      	ldrh	r0, [r0, #0]
    fcc0:	8008      	strh	r0, [r1, #0]
    fcc2:	4668      	mov	r0, sp
    fcc4:	f7fa fb8e 	bl	a3e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    fcc8:	bd0e      	pop	{r1, r2, r3, pc}

0000fcca <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fcca:	b510      	push	{r4, lr}
    fccc:	4604      	mov	r4, r0
    fcce:	f7fa fa8d 	bl	a1ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fcd2:	7861      	ldrb	r1, [r4, #1]
    fcd4:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fcd8:	f001 0101 	and.w	r1, r1, #1
    fcdc:	f7fe fd31 	bl	e742 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fce0:	2000      	movs	r0, #0
    fce2:	bd10      	pop	{r4, pc}

0000fce4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fce4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fce6:	4604      	mov	r4, r0
    fce8:	f10d 0007 	add.w	r0, sp, #7
    fcec:	9000      	str	r0, [sp, #0]
    fcee:	7922      	ldrb	r2, [r4, #4]
    fcf0:	78e1      	ldrb	r1, [r4, #3]
    fcf2:	78a0      	ldrb	r0, [r4, #2]
    fcf4:	f10d 0306 	add.w	r3, sp, #6
    fcf8:	f000 fbf8 	bl	104ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    fcfc:	2800      	cmp	r0, #0
    fcfe:	d109      	bne.n	fd14 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fd00:	8820      	ldrh	r0, [r4, #0]
    fd02:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd06:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fd0a:	f8ad 0008 	strh.w	r0, [sp, #8]
    fd0e:	a801      	add	r0, sp, #4
    fd10:	f000 f94c 	bl	ffac <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fd14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fd16 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fd16:	b510      	push	{r4, lr}
    fd18:	4604      	mov	r4, r0
    fd1a:	2001      	movs	r0, #1
    fd1c:	f000 fa7e 	bl	1021c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fd20:	b128      	cbz	r0, fd2e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fd22:	4621      	mov	r1, r4
    fd24:	2001      	movs	r0, #1
    fd26:	f7f5 fac5 	bl	52b4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fd2a:	2000      	movs	r0, #0
    fd2c:	bd10      	pop	{r4, pc}
    fd2e:	200c      	movs	r0, #12
    fd30:	bd10      	pop	{r4, pc}

0000fd32 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fd32:	b51c      	push	{r2, r3, r4, lr}
    fd34:	4604      	mov	r4, r0
    fd36:	f7fa fa59 	bl	a1ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fd3a:	2000      	movs	r0, #0
    fd3c:	f88d 0000 	strb.w	r0, [sp]
    fd40:	f88d 0002 	strb.w	r0, [sp, #2]
    fd44:	2003      	movs	r0, #3
    fd46:	f88d 0001 	strb.w	r0, [sp, #1]
    fd4a:	f814 0b01 	ldrb.w	r0, [r4], #1
    fd4e:	f88d 0003 	strb.w	r0, [sp, #3]
    fd52:	4668      	mov	r0, sp
    fd54:	9401      	str	r4, [sp, #4]
    fd56:	f000 f8d7 	bl	ff08 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fd5a:	bd1c      	pop	{r2, r3, r4, pc}

0000fd5c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fd5c:	b51c      	push	{r2, r3, r4, lr}
    fd5e:	8801      	ldrh	r1, [r0, #0]
    fd60:	f8ad 1000 	strh.w	r1, [sp]
    fd64:	8841      	ldrh	r1, [r0, #2]
    fd66:	f8ad 1002 	strh.w	r1, [sp, #2]
    fd6a:	8801      	ldrh	r1, [r0, #0]
    fd6c:	f8ad 1004 	strh.w	r1, [sp, #4]
    fd70:	8840      	ldrh	r0, [r0, #2]
    fd72:	f8ad 0006 	strh.w	r0, [sp, #6]
    fd76:	4668      	mov	r0, sp
    fd78:	f7fa fbd4 	bl	a524 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
    fd7c:	bd1c      	pop	{r2, r3, r4, pc}

0000fd7e <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fd7e:	b510      	push	{r4, lr}
    fd80:	f7f5 fabc 	bl	52fc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fd84:	2000      	movs	r0, #0
    fd86:	bd10      	pop	{r4, pc}

0000fd88 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fd88:	b510      	push	{r4, lr}
    fd8a:	460c      	mov	r4, r1
    fd8c:	2100      	movs	r1, #0
    fd8e:	f7fd fb1b 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd92:	b118      	cbz	r0, fd9c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    fd94:	2c02      	cmp	r4, #2
    fd96:	d903      	bls.n	fda0 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    fd98:	2012      	movs	r0, #18
    fd9a:	bd10      	pop	{r4, pc}
    fd9c:	2002      	movs	r0, #2
    fd9e:	bd10      	pop	{r4, pc}
    fda0:	f014 0101 	ands.w	r1, r4, #1
    fda4:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    fda8:	f3c4 0240 	ubfx	r2, r4, #1, #1
    fdac:	f880 221c 	strb.w	r2, [r0, #540]	; 0x21c
    fdb0:	d004      	beq.n	fdbc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fdb2:	f890 121a 	ldrb.w	r1, [r0, #538]	; 0x21a
    fdb6:	b109      	cbz	r1, fdbc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fdb8:	f7fe fe74 	bl	eaa4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    fdbc:	2000      	movs	r0, #0
    fdbe:	bd10      	pop	{r4, pc}

0000fdc0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fdc0:	b51c      	push	{r2, r3, r4, lr}
    fdc2:	460c      	mov	r4, r1
    fdc4:	4669      	mov	r1, sp
    fdc6:	f7fd fd76 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fdca:	2800      	cmp	r0, #0
    fdcc:	d105      	bne.n	fdda <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    fdce:	2100      	movs	r1, #0
    fdd0:	4622      	mov	r2, r4
    fdd2:	9801      	ldr	r0, [sp, #4]
    fdd4:	f000 faee 	bl	103b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    fdd8:	2000      	movs	r0, #0
    fdda:	bd1c      	pop	{r2, r3, r4, pc}

0000fddc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    fddc:	b510      	push	{r4, lr}
    fdde:	4604      	mov	r4, r0
    fde0:	7800      	ldrb	r0, [r0, #0]
    fde2:	28ff      	cmp	r0, #255	; 0xff
    fde4:	d009      	beq.n	fdfa <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    fde6:	2101      	movs	r1, #1
    fde8:	f7fd faee 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fdec:	b118      	cbz	r0, fdf6 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    fdee:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    fdf2:	8441      	strh	r1, [r0, #34]	; 0x22
    fdf4:	e005      	b.n	fe02 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    fdf6:	2042      	movs	r0, #66	; 0x42
    fdf8:	bd10      	pop	{r4, pc}
    fdfa:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fdfe:	f7f7 fdfb 	bl	79f8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    fe02:	2000      	movs	r0, #0
    fe04:	bd10      	pop	{r4, pc}

0000fe06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fe06:	b510      	push	{r4, lr}
    fe08:	4604      	mov	r4, r0
    fe0a:	2000      	movs	r0, #0
    fe0c:	f000 fa06 	bl	1021c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fe10:	b128      	cbz	r0, fe1e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fe12:	4621      	mov	r1, r4
    fe14:	2000      	movs	r0, #0
    fe16:	f7f5 fa4d 	bl	52b4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fe1a:	2000      	movs	r0, #0
    fe1c:	bd10      	pop	{r4, pc}
    fe1e:	200c      	movs	r0, #12
    fe20:	bd10      	pop	{r4, pc}

0000fe22 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fe22:	b510      	push	{r4, lr}
    fe24:	7800      	ldrb	r0, [r0, #0]
    fe26:	b100      	cbz	r0, fe2a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fe28:	2001      	movs	r0, #1
    fe2a:	f7f7 fe0f 	bl	7a4c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    fe2e:	2000      	movs	r0, #0
    fe30:	bd10      	pop	{r4, pc}

0000fe32 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fe32:	f7fa bad7 	b.w	a3e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000fe36 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    fe36:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fe3a:	4606      	mov	r6, r0
    fe3c:	7845      	ldrb	r5, [r0, #1]
    fe3e:	7800      	ldrb	r0, [r0, #0]
    fe40:	2101      	movs	r1, #1
    fe42:	f7fd fac1 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe46:	0004      	movs	r4, r0
    fe48:	d01e      	beq.n	fe88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    fe4a:	f7fe fbcc 	bl	e5e6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fe4e:	78f1      	ldrb	r1, [r6, #3]
    fe50:	4281      	cmp	r1, r0
    fe52:	d800      	bhi.n	fe56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    fe54:	4608      	mov	r0, r1
    fe56:	4607      	mov	r7, r0
    fe58:	2d04      	cmp	r5, #4
    fe5a:	d018      	beq.n	fe8e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    fe5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fe5e:	f7fd fbfe 	bl	d65e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fe62:	4438      	add	r0, r7
    fe64:	b281      	uxth	r1, r0
    fe66:	4620      	mov	r0, r4
    fe68:	2201      	movs	r2, #1
    fe6a:	f000 f9e9 	bl	10240 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    fe6e:	2800      	cmp	r0, #0
    fe70:	d10b      	bne.n	fe8a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fe72:	2d03      	cmp	r5, #3
    fe74:	d000      	beq.n	fe78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fe76:	b1df      	cbz	r7, feb0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fe78:	4620      	mov	r0, r4
    fe7a:	f7fe fc52 	bl	e722 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fe7e:	7871      	ldrb	r1, [r6, #1]
    fe80:	2903      	cmp	r1, #3
    fe82:	d010      	beq.n	fea6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fe84:	b9a0      	cbnz	r0, feb0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fe86:	e004      	b.n	fe92 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    fe88:	2042      	movs	r0, #66	; 0x42
    fe8a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fe8e:	b97f      	cbnz	r7, feb0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fe90:	e7f2      	b.n	fe78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fe92:	2904      	cmp	r1, #4
    fe94:	d107      	bne.n	fea6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fe96:	4620      	mov	r0, r4
    fe98:	f7fe fe01 	bl	ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fe9c:	b140      	cbz	r0, feb0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fe9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fea0:	f7fd fbac 	bl	d5fc <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fea4:	b120      	cbz	r0, feb0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fea6:	2d01      	cmp	r5, #1
    fea8:	d004      	beq.n	feb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    feaa:	2d03      	cmp	r5, #3
    feac:	d002      	beq.n	feb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    feae:	e00e      	b.n	fece <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    feb0:	2012      	movs	r0, #18
    feb2:	e7ea      	b.n	fe8a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    feb4:	4620      	mov	r0, r4
    feb6:	f7fe fc34 	bl	e722 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    feba:	b108      	cbz	r0, fec0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    febc:	2200      	movs	r2, #0
    febe:	e002      	b.n	fec6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fec0:	2d01      	cmp	r5, #1
    fec2:	d013      	beq.n	feec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    fec4:	2201      	movs	r2, #1
    fec6:	4668      	mov	r0, sp
    fec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    feca:	f7fd fb2f 	bl	d52c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fece:	2d04      	cmp	r5, #4
    fed0:	d018      	beq.n	ff04 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fed2:	6872      	ldr	r2, [r6, #4]
    fed4:	463b      	mov	r3, r7
    fed6:	2101      	movs	r1, #1
    fed8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    feda:	f7fd fb5b 	bl	d594 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fede:	b138      	cbz	r0, fef0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    fee0:	7870      	ldrb	r0, [r6, #1]
    fee2:	2802      	cmp	r0, #2
    fee4:	d006      	beq.n	fef4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fee6:	2803      	cmp	r0, #3
    fee8:	d004      	beq.n	fef4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    feea:	e00b      	b.n	ff04 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    feec:	2202      	movs	r2, #2
    feee:	e7ea      	b.n	fec6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fef0:	2007      	movs	r0, #7
    fef2:	e7ca      	b.n	fe8a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fef4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fef6:	f7fd fbb2 	bl	d65e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fefa:	4602      	mov	r2, r0
    fefc:	2101      	movs	r1, #1
    fefe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff00:	f7fd fb8a 	bl	d618 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ff04:	2000      	movs	r0, #0
    ff06:	e7c0      	b.n	fe8a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000ff08 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ff08:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ff0c:	4607      	mov	r7, r0
    ff0e:	7845      	ldrb	r5, [r0, #1]
    ff10:	78c6      	ldrb	r6, [r0, #3]
    ff12:	7800      	ldrb	r0, [r0, #0]
    ff14:	2101      	movs	r1, #1
    ff16:	f7fd fa57 	bl	d3c8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff1a:	0004      	movs	r4, r0
    ff1c:	d003      	beq.n	ff26 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    ff1e:	f7fe fc02 	bl	e726 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ff22:	b118      	cbz	r0, ff2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    ff24:	e003      	b.n	ff2e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    ff26:	2042      	movs	r0, #66	; 0x42
    ff28:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ff2c:	2600      	movs	r6, #0
    ff2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff30:	f7fd fb99 	bl	d666 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    ff34:	4430      	add	r0, r6
    ff36:	b281      	uxth	r1, r0
    ff38:	4688      	mov	r8, r1
    ff3a:	4620      	mov	r0, r4
    ff3c:	2201      	movs	r2, #1
    ff3e:	f000 f97f 	bl	10240 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ff42:	2800      	cmp	r0, #0
    ff44:	d1f0      	bne.n	ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff46:	2d04      	cmp	r5, #4
    ff48:	d008      	beq.n	ff5c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ff4a:	2d03      	cmp	r5, #3
    ff4c:	d00a      	beq.n	ff64 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    ff4e:	b12e      	cbz	r6, ff5c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ff50:	4620      	mov	r0, r4
    ff52:	f7fe fda4 	bl	ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff56:	b118      	cbz	r0, ff60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    ff58:	200c      	movs	r0, #12
    ff5a:	e7e5      	b.n	ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff5c:	2012      	movs	r0, #18
    ff5e:	e7e3      	b.n	ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff60:	2d01      	cmp	r5, #1
    ff62:	d10c      	bne.n	ff7e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    ff64:	4620      	mov	r0, r4
    ff66:	f7fe fbdc 	bl	e722 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff6a:	b108      	cbz	r0, ff70 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    ff6c:	2204      	movs	r2, #4
    ff6e:	e002      	b.n	ff76 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ff70:	2d01      	cmp	r5, #1
    ff72:	d010      	beq.n	ff96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    ff74:	2205      	movs	r2, #5
    ff76:	4668      	mov	r0, sp
    ff78:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ff7a:	f7fd fad7 	bl	d52c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ff7e:	687a      	ldr	r2, [r7, #4]
    ff80:	4633      	mov	r3, r6
    ff82:	2100      	movs	r1, #0
    ff84:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff86:	f7fd fb05 	bl	d594 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ff8a:	b130      	cbz	r0, ff9a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    ff8c:	2d02      	cmp	r5, #2
    ff8e:	d006      	beq.n	ff9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ff90:	2d03      	cmp	r5, #3
    ff92:	d004      	beq.n	ff9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ff94:	e008      	b.n	ffa8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    ff96:	2206      	movs	r2, #6
    ff98:	e7ed      	b.n	ff76 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ff9a:	2007      	movs	r0, #7
    ff9c:	e7c4      	b.n	ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff9e:	4642      	mov	r2, r8
    ffa0:	2100      	movs	r1, #0
    ffa2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffa4:	f7fd fb38 	bl	d618 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ffa8:	2000      	movs	r0, #0
    ffaa:	e7bd      	b.n	ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000ffac <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ffac:	b510      	push	{r4, lr}
    ffae:	4604      	mov	r4, r0
    ffb0:	8880      	ldrh	r0, [r0, #4]
    ffb2:	b128      	cbz	r0, ffc0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffb4:	2801      	cmp	r0, #1
    ffb6:	d003      	beq.n	ffc0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffb8:	2802      	cmp	r0, #2
    ffba:	d001      	beq.n	ffc0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffbc:	2012      	movs	r0, #18
    ffbe:	bd10      	pop	{r4, pc}
    ffc0:	78e0      	ldrb	r0, [r4, #3]
    ffc2:	f000 f9d4 	bl	1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    ffc6:	b148      	cbz	r0, ffdc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ffc8:	78a0      	ldrb	r0, [r4, #2]
    ffca:	f000 f9d0 	bl	1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    ffce:	b128      	cbz	r0, ffdc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ffd0:	4620      	mov	r0, r4
    ffd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ffd6:	2101      	movs	r1, #1
    ffd8:	f000 b88e 	b.w	100f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ffdc:	2011      	movs	r0, #17
    ffde:	bd10      	pop	{r4, pc}

0000ffe0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ffe0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ffe2:	460c      	mov	r4, r1
    ffe4:	4605      	mov	r5, r0
    ffe6:	8800      	ldrh	r0, [r0, #0]
    ffe8:	4669      	mov	r1, sp
    ffea:	f7fd fc64 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffee:	2800      	cmp	r0, #0
    fff0:	d106      	bne.n	10000 <CONFIG_PM_SRAM_SIZE>
    fff2:	9801      	ldr	r0, [sp, #4]
    fff4:	8829      	ldrh	r1, [r5, #0]
    fff6:	8021      	strh	r1, [r4, #0]
    fff8:	f8b0 00c0 	ldrh.w	r0, [r0, #192]	; 0xc0
    fffc:	8060      	strh	r0, [r4, #2]
    fffe:	2000      	movs	r0, #0
   10000:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010002 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10002:	b510      	push	{r4, lr}
   10004:	4604      	mov	r4, r0
   10006:	4601      	mov	r1, r0
   10008:	2000      	movs	r0, #0
   1000a:	f7f5 f93b 	bl	5284 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1000e:	b910      	cbnz	r0, 10016 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10010:	2000      	movs	r0, #0
   10012:	6020      	str	r0, [r4, #0]
   10014:	80a0      	strh	r0, [r4, #4]
   10016:	2000      	movs	r0, #0
   10018:	bd10      	pop	{r4, pc}

0001001a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1001a:	b50e      	push	{r1, r2, r3, lr}
   1001c:	8800      	ldrh	r0, [r0, #0]
   1001e:	4669      	mov	r1, sp
   10020:	f7fd fc49 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10024:	b960      	cbnz	r0, 10040 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10026:	9801      	ldr	r0, [sp, #4]
   10028:	f000 fa1d 	bl	10466 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
   1002c:	b140      	cbz	r0, 10040 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   1002e:	9801      	ldr	r0, [sp, #4]
   10030:	4601      	mov	r1, r0
   10032:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
   10036:	3080      	adds	r0, #128	; 0x80
   10038:	f501 719d 	add.w	r1, r1, #314	; 0x13a
   1003c:	b962      	cbnz	r2, 10058 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   1003e:	e001      	b.n	10044 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   10040:	2002      	movs	r0, #2
   10042:	bd0e      	pop	{r1, r2, r3, pc}
   10044:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
   10048:	f88d 2008 	strb.w	r2, [sp, #8]
   1004c:	9a02      	ldr	r2, [sp, #8]
   1004e:	9202      	str	r2, [sp, #8]
   10050:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10054:	2201      	movs	r2, #1
   10056:	b10b      	cbz	r3, 1005c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   10058:	203a      	movs	r0, #58	; 0x3a
   1005a:	bd0e      	pop	{r1, r2, r3, pc}
   1005c:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   10060:	079b      	lsls	r3, r3, #30
   10062:	d006      	beq.n	10072 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
   10064:	2203      	movs	r2, #3
   10066:	3056      	adds	r0, #86	; 0x56
   10068:	9901      	ldr	r1, [sp, #4]
   1006a:	f7f6 f9e1 	bl	6430 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1006e:	2000      	movs	r0, #0
   10070:	bd0e      	pop	{r1, r2, r3, pc}
   10072:	700a      	strb	r2, [r1, #0]
   10074:	4668      	mov	r0, sp
   10076:	f7fd ffb7 	bl	dfe8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1007a:	e7f8      	b.n	1006e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>

0001007c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1007c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1007e:	460c      	mov	r4, r1
   10080:	4605      	mov	r5, r0
   10082:	8800      	ldrh	r0, [r0, #0]
   10084:	4669      	mov	r1, sp
   10086:	f7fd fc16 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1008a:	b108      	cbz	r0, 10090 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1008c:	2002      	movs	r0, #2
   1008e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10090:	78a8      	ldrb	r0, [r5, #2]
   10092:	b130      	cbz	r0, 100a2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10094:	f000 f9e4 	bl	10460 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   10098:	70a0      	strb	r0, [r4, #2]
   1009a:	8828      	ldrh	r0, [r5, #0]
   1009c:	8020      	strh	r0, [r4, #0]
   1009e:	2000      	movs	r0, #0
   100a0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   100a2:	9801      	ldr	r0, [sp, #4]
   100a4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   100a8:	e7f6      	b.n	10098 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000100aa <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   100aa:	b510      	push	{r4, lr}
   100ac:	f7fa fa7a 	bl	a5a4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   100b0:	2000      	movs	r0, #0
   100b2:	bd10      	pop	{r4, pc}

000100b4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   100b4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   100b8:	4604      	mov	r4, r0
   100ba:	8840      	ldrh	r0, [r0, #2]
   100bc:	460d      	mov	r5, r1
   100be:	b1b8      	cbz	r0, 100f0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   100c0:	8820      	ldrh	r0, [r4, #0]
   100c2:	4669      	mov	r1, sp
   100c4:	f7fd fbf7 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100c8:	2800      	cmp	r0, #0
   100ca:	d10f      	bne.n	100ec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   100cc:	8820      	ldrh	r0, [r4, #0]
   100ce:	8028      	strh	r0, [r5, #0]
   100d0:	9e01      	ldr	r6, [sp, #4]
   100d2:	f106 0510 	add.w	r5, r6, #16
   100d6:	3680      	adds	r6, #128	; 0x80
   100d8:	682f      	ldr	r7, [r5, #0]
   100da:	8862      	ldrh	r2, [r4, #2]
   100dc:	4639      	mov	r1, r7
   100de:	4630      	mov	r0, r6
   100e0:	f7fd fd1a 	bl	db18 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   100e4:	6828      	ldr	r0, [r5, #0]
   100e6:	42b8      	cmp	r0, r7
   100e8:	d1f6      	bne.n	100d8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   100ea:	2000      	movs	r0, #0
   100ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   100f0:	2012      	movs	r0, #18
   100f2:	e7fb      	b.n	100ec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

000100f4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   100f4:	f000 b863 	b.w	101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000100f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   100f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100fc:	b086      	sub	sp, #24
   100fe:	4689      	mov	r9, r1
   10100:	4607      	mov	r7, r0
   10102:	8800      	ldrh	r0, [r0, #0]
   10104:	a901      	add	r1, sp, #4
   10106:	f7fd fbd6 	bl	d8b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1010a:	2800      	cmp	r0, #0
   1010c:	d136      	bne.n	1017c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1010e:	9802      	ldr	r0, [sp, #8]
   10110:	4601      	mov	r1, r0
   10112:	4688      	mov	r8, r1
   10114:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
   10118:	f500 7494 	add.w	r4, r0, #296	; 0x128
   1011c:	f88d 1000 	strb.w	r1, [sp]
   10120:	9900      	ldr	r1, [sp, #0]
   10122:	9100      	str	r1, [sp, #0]
   10124:	f89d 1000 	ldrb.w	r1, [sp]
   10128:	3080      	adds	r0, #128	; 0x80
   1012a:	b109      	cbz	r1, 10130 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   1012c:	2601      	movs	r6, #1
   1012e:	e000      	b.n	10132 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10130:	2600      	movs	r6, #0
   10132:	7d81      	ldrb	r1, [r0, #22]
   10134:	2923      	cmp	r1, #35	; 0x23
   10136:	d100      	bne.n	1013a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10138:	b13e      	cbz	r6, 1014a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   1013a:	2500      	movs	r5, #0
   1013c:	3064      	adds	r0, #100	; 0x64
   1013e:	2108      	movs	r1, #8
   10140:	4682      	mov	sl, r0
   10142:	f7ff fba4 	bl	f88e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
   10146:	b110      	cbz	r0, 1014e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10148:	e007      	b.n	1015a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1014a:	2501      	movs	r5, #1
   1014c:	e7f6      	b.n	1013c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1014e:	210b      	movs	r1, #11
   10150:	4650      	mov	r0, sl
   10152:	f7ff fb9c 	bl	f88e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
   10156:	b900      	cbnz	r0, 1015a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10158:	b17d      	cbz	r5, 1017a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   1015a:	a804      	add	r0, sp, #16
   1015c:	9000      	str	r0, [sp, #0]
   1015e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10162:	ab03      	add	r3, sp, #12
   10164:	463a      	mov	r2, r7
   10166:	4641      	mov	r1, r8
   10168:	f000 f95a 	bl	10420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   1016c:	0005      	movs	r5, r0
   1016e:	d105      	bne.n	1017c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10170:	340c      	adds	r4, #12
   10172:	20ff      	movs	r0, #255	; 0xff
   10174:	7060      	strb	r0, [r4, #1]
   10176:	b936      	cbnz	r6, 10186 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10178:	e003      	b.n	10182 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1017a:	201a      	movs	r0, #26
   1017c:	b006      	add	sp, #24
   1017e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10182:	7820      	ldrb	r0, [r4, #0]
   10184:	b108      	cbz	r0, 1018a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10186:	253a      	movs	r5, #58	; 0x3a
   10188:	e012      	b.n	101b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1018a:	f884 9000 	strb.w	r9, [r4]
   1018e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10192:	70a0      	strb	r0, [r4, #2]
   10194:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10198:	70e1      	strb	r1, [r4, #3]
   1019a:	f88d 0000 	strb.w	r0, [sp]
   1019e:	f88d 1001 	strb.w	r1, [sp, #1]
   101a2:	88b8      	ldrh	r0, [r7, #4]
   101a4:	f8ad 0002 	strh.w	r0, [sp, #2]
   101a8:	4669      	mov	r1, sp
   101aa:	4640      	mov	r0, r8
   101ac:	f7fd fc53 	bl	da56 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   101b0:	2000      	movs	r0, #0
   101b2:	7060      	strb	r0, [r4, #1]
   101b4:	4628      	mov	r0, r5
   101b6:	e7e1      	b.n	1017c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

000101b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   101b8:	2008      	movs	r0, #8
   101ba:	f7fa ba59 	b.w	a670 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000101be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   101be:	b510      	push	{r4, lr}
   101c0:	f7fd fadc 	bl	d77c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   101c4:	f7f5 fe2e 	bl	5e24 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   101c8:	f7fa fa74 	bl	a6b4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   101cc:	f7fd ff2f 	bl	e02e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   101d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101d4:	f7f9 bfea 	b.w	a1ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

000101d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   101d8:	f7f8 b898 	b.w	830c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   101dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   101e0:	4288      	cmp	r0, r1
   101e2:	d303      	bcc.n	101ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   101e4:	f640 0148 	movw	r1, #2120	; 0x848
   101e8:	4288      	cmp	r0, r1
   101ea:	d300      	bcc.n	101ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   101ec:	4608      	mov	r0, r1
   101ee:	b280      	uxth	r0, r0
   101f0:	4770      	bx	lr
   101f2:	07c1      	lsls	r1, r0, #31
   101f4:	d001      	beq.n	101fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   101f6:	2001      	movs	r0, #1
   101f8:	4770      	bx	lr
   101fa:	0780      	lsls	r0, r0, #30
   101fc:	d501      	bpl.n	10202 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   101fe:	2002      	movs	r0, #2
   10200:	4770      	bx	lr
   10202:	2000      	movs	r0, #0
   10204:	4770      	bx	lr
   10206:	b510      	push	{r4, lr}
   10208:	2801      	cmp	r0, #1
   1020a:	d006      	beq.n	1021a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1020c:	2802      	cmp	r0, #2
   1020e:	d004      	beq.n	1021a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10210:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   10214:	2006      	movs	r0, #6
   10216:	f7f4 f999 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1021a:	bd10      	pop	{r4, pc}
   1021c:	b510      	push	{r4, lr}
   1021e:	f7f9 ff43 	bl	a0a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   10222:	b158      	cbz	r0, 1023c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10224:	f7f9 ffe2 	bl	a1ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   10228:	4604      	mov	r4, r0
   1022a:	f7fe fa7c 	bl	e726 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1022e:	b918      	cbnz	r0, 10238 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   10230:	4620      	mov	r0, r4
   10232:	f7fe fa6e 	bl	e712 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10236:	b108      	cbz	r0, 1023c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10238:	2000      	movs	r0, #0
   1023a:	bd10      	pop	{r4, pc}
   1023c:	2001      	movs	r0, #1
   1023e:	bd10      	pop	{r4, pc}
   10240:	b570      	push	{r4, r5, r6, lr}
   10242:	460c      	mov	r4, r1
   10244:	4605      	mov	r5, r0
   10246:	b112      	cbz	r2, 1024e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   10248:	291f      	cmp	r1, #31
   1024a:	d80c      	bhi.n	10266 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   1024c:	e016      	b.n	1027c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   1024e:	f7f4 fe57 	bl	4f00 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10252:	42a0      	cmp	r0, r4
   10254:	d201      	bcs.n	1025a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   10256:	2007      	movs	r0, #7
   10258:	bd70      	pop	{r4, r5, r6, pc}
   1025a:	4628      	mov	r0, r5
   1025c:	f7fe fa61 	bl	e722 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10260:	b118      	cbz	r0, 1026a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10262:	2c1f      	cmp	r4, #31
   10264:	d901      	bls.n	1026a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10266:	2012      	movs	r0, #18
   10268:	bd70      	pop	{r4, r5, r6, pc}
   1026a:	4628      	mov	r0, r5
   1026c:	f7fe fa62 	bl	e734 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10270:	b130      	cbz	r0, 10280 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   10272:	4621      	mov	r1, r4
   10274:	4628      	mov	r0, r5
   10276:	f7fe fa29 	bl	e6cc <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1027a:	b118      	cbz	r0, 10284 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   1027c:	2000      	movs	r0, #0
   1027e:	bd70      	pop	{r4, r5, r6, pc}
   10280:	2042      	movs	r0, #66	; 0x42
   10282:	bd70      	pop	{r4, r5, r6, pc}
   10284:	2045      	movs	r0, #69	; 0x45
   10286:	bd70      	pop	{r4, r5, r6, pc}
   10288:	b510      	push	{r4, lr}
   1028a:	4604      	mov	r4, r0
   1028c:	7840      	ldrb	r0, [r0, #1]
   1028e:	06c1      	lsls	r1, r0, #27
   10290:	d51c      	bpl.n	102cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10292:	07c0      	lsls	r0, r0, #31
   10294:	d00b      	beq.n	102ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10296:	f7fa f9bf 	bl	a618 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1029a:	b1b8      	cbz	r0, 102cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1029c:	7860      	ldrb	r0, [r4, #1]
   1029e:	06c1      	lsls	r1, r0, #27
   102a0:	d405      	bmi.n	102ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   102a2:	0700      	lsls	r0, r0, #28
   102a4:	d503      	bpl.n	102ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   102a6:	7d20      	ldrb	r0, [r4, #20]
   102a8:	2802      	cmp	r0, #2
   102aa:	d10f      	bne.n	102cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102ac:	e010      	b.n	102d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102ae:	7d20      	ldrb	r0, [r4, #20]
   102b0:	2802      	cmp	r0, #2
   102b2:	d001      	beq.n	102b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   102b4:	7ea0      	ldrb	r0, [r4, #26]
   102b6:	b948      	cbnz	r0, 102cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102b8:	7860      	ldrb	r0, [r4, #1]
   102ba:	0700      	lsls	r0, r0, #28
   102bc:	d408      	bmi.n	102d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102be:	f8d4 0005 	ldr.w	r0, [r4, #5]
   102c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   102c6:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   102ca:	d201      	bcs.n	102d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102cc:	2011      	movs	r0, #17
   102ce:	bd10      	pop	{r4, pc}
   102d0:	2000      	movs	r0, #0
   102d2:	bd10      	pop	{r4, pc}
   102d4:	b538      	push	{r3, r4, r5, lr}
   102d6:	4604      	mov	r4, r0
   102d8:	7800      	ldrb	r0, [r0, #0]
   102da:	28ef      	cmp	r0, #239	; 0xef
   102dc:	d843      	bhi.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   102de:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   102e2:	f8ad 0000 	strh.w	r0, [sp]
   102e6:	9800      	ldr	r0, [sp, #0]
   102e8:	f000 f917 	bl	1051a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x342>
   102ec:	b3a0      	cbz	r0, 10358 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   102ee:	7861      	ldrb	r1, [r4, #1]
   102f0:	0708      	lsls	r0, r1, #28
   102f2:	d40b      	bmi.n	1030c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   102f4:	f8d4 0002 	ldr.w	r0, [r4, #2]
   102f8:	f8d4 3005 	ldr.w	r3, [r4, #5]
   102fc:	0a02      	lsrs	r2, r0, #8
   102fe:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10302:	d830      	bhi.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10304:	2220      	movs	r2, #32
   10306:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1030a:	d82c      	bhi.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1030c:	7a60      	ldrb	r0, [r4, #9]
   1030e:	b318      	cbz	r0, 10358 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   10310:	2807      	cmp	r0, #7
   10312:	d828      	bhi.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10314:	7aa0      	ldrb	r0, [r4, #10]
   10316:	b128      	cbz	r0, 10324 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10318:	2801      	cmp	r0, #1
   1031a:	d003      	beq.n	10324 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   1031c:	2802      	cmp	r0, #2
   1031e:	d001      	beq.n	10324 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10320:	2803      	cmp	r0, #3
   10322:	d120      	bne.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10324:	074a      	lsls	r2, r1, #29
   10326:	d403      	bmi.n	10330 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10328:	2802      	cmp	r0, #2
   1032a:	d001      	beq.n	10330 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   1032c:	2803      	cmp	r0, #3
   1032e:	d105      	bne.n	1033c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   10330:	7ae0      	ldrb	r0, [r4, #11]
   10332:	b108      	cbz	r0, 10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   10334:	2801      	cmp	r0, #1
   10336:	d116      	bne.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10338:	0748      	lsls	r0, r1, #29
   1033a:	d407      	bmi.n	1034c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1033c:	7ca0      	ldrb	r0, [r4, #18]
   1033e:	b128      	cbz	r0, 1034c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10340:	2801      	cmp	r0, #1
   10342:	d003      	beq.n	1034c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10344:	2802      	cmp	r0, #2
   10346:	d001      	beq.n	1034c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10348:	2803      	cmp	r0, #3
   1034a:	d10c      	bne.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1034c:	06c8      	lsls	r0, r1, #27
   1034e:	7d20      	ldrb	r0, [r4, #20]
   10350:	d503      	bpl.n	1035a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   10352:	2801      	cmp	r0, #1
   10354:	d107      	bne.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10356:	e002      	b.n	1035e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   10358:	e005      	b.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1035a:	2802      	cmp	r0, #2
   1035c:	d003      	beq.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1035e:	7e20      	ldrb	r0, [r4, #24]
   10360:	b118      	cbz	r0, 1036a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10362:	2801      	cmp	r0, #1
   10364:	d001      	beq.n	1036a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10366:	2012      	movs	r0, #18
   10368:	bd38      	pop	{r3, r4, r5, pc}
   1036a:	2000      	movs	r0, #0
   1036c:	bd38      	pop	{r3, r4, r5, pc}
   1036e:	b510      	push	{r4, lr}
   10370:	0004      	movs	r4, r0
   10372:	d005      	beq.n	10380 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10374:	f7fa f98e 	bl	a694 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10378:	4384      	bics	r4, r0
   1037a:	d001      	beq.n	10380 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   1037c:	2000      	movs	r0, #0
   1037e:	bd10      	pop	{r4, pc}
   10380:	2001      	movs	r0, #1
   10382:	bd10      	pop	{r4, pc}
   10384:	28fb      	cmp	r0, #251	; 0xfb
   10386:	d803      	bhi.n	10390 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   10388:	f640 0048 	movw	r0, #2120	; 0x848
   1038c:	4281      	cmp	r1, r0
   1038e:	d901      	bls.n	10394 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   10390:	2011      	movs	r0, #17
   10392:	4770      	bx	lr
   10394:	2000      	movs	r0, #0
   10396:	4770      	bx	lr
   10398:	381b      	subs	r0, #27
   1039a:	28e1      	cmp	r0, #225	; 0xe1
   1039c:	d206      	bcs.n	103ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   1039e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   103a2:	d303      	bcc.n	103ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   103a4:	f244 2090 	movw	r0, #17040	; 0x4290
   103a8:	4281      	cmp	r1, r0
   103aa:	d901      	bls.n	103b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   103ac:	2012      	movs	r0, #18
   103ae:	4770      	bx	lr
   103b0:	2000      	movs	r0, #0
   103b2:	4770      	bx	lr
   103b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103b8:	4606      	mov	r6, r0
   103ba:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   103be:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   103c2:	4615      	mov	r5, r2
   103c4:	302c      	adds	r0, #44	; 0x2c
   103c6:	f7f7 fb47 	bl	7a58 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   103ca:	4680      	mov	r8, r0
   103cc:	2102      	movs	r1, #2
   103ce:	f7fd fb12 	bl	d9f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   103d2:	4287      	cmp	r7, r0
   103d4:	d200      	bcs.n	103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   103d6:	4638      	mov	r0, r7
   103d8:	4607      	mov	r7, r0
   103da:	2102      	movs	r1, #2
   103dc:	4640      	mov	r0, r8
   103de:	f7fd fb0a 	bl	d9f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   103e2:	4284      	cmp	r4, r0
   103e4:	d200      	bcs.n	103e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   103e6:	4620      	mov	r0, r4
   103e8:	8831      	ldrh	r1, [r6, #0]
   103ea:	8029      	strh	r1, [r5, #0]
   103ec:	2f1b      	cmp	r7, #27
   103ee:	d913      	bls.n	10418 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   103f0:	2ffb      	cmp	r7, #251	; 0xfb
   103f2:	d300      	bcc.n	103f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   103f4:	27fb      	movs	r7, #251	; 0xfb
   103f6:	806f      	strh	r7, [r5, #2]
   103f8:	281b      	cmp	r0, #27
   103fa:	d90f      	bls.n	1041c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   103fc:	28fb      	cmp	r0, #251	; 0xfb
   103fe:	d300      	bcc.n	10402 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10400:	20fb      	movs	r0, #251	; 0xfb
   10402:	80e8      	strh	r0, [r5, #6]
   10404:	4640      	mov	r0, r8
   10406:	f7ff fee9 	bl	101dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1040a:	80a8      	strh	r0, [r5, #4]
   1040c:	4640      	mov	r0, r8
   1040e:	f7ff fee5 	bl	101dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10412:	8128      	strh	r0, [r5, #8]
   10414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10418:	271b      	movs	r7, #27
   1041a:	e7ec      	b.n	103f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   1041c:	201b      	movs	r0, #27
   1041e:	e7f0      	b.n	10402 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10424:	7890      	ldrb	r0, [r2, #2]
   10426:	9e06      	ldr	r6, [sp, #24]
   10428:	461d      	mov	r5, r3
   1042a:	4614      	mov	r4, r2
   1042c:	b908      	cbnz	r0, 10432 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   1042e:	f7fa f931 	bl	a694 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10432:	78e4      	ldrb	r4, [r4, #3]
   10434:	4607      	mov	r7, r0
   10436:	b914      	cbnz	r4, 1043e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   10438:	f7fa f92c 	bl	a694 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1043c:	4604      	mov	r4, r0
   1043e:	b16f      	cbz	r7, 1045c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10440:	b164      	cbz	r4, 1045c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10442:	4638      	mov	r0, r7
   10444:	f7ff fed5 	bl	101f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10448:	4620      	mov	r0, r4
   1044a:	f7ff fed2 	bl	101f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1044e:	b12f      	cbz	r7, 1045c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10450:	b124      	cbz	r4, 1045c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10452:	702f      	strb	r7, [r5, #0]
   10454:	7034      	strb	r4, [r6, #0]
   10456:	2000      	movs	r0, #0
   10458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1045c:	2009      	movs	r0, #9
   1045e:	e7fb      	b.n	10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10460:	207f      	movs	r0, #127	; 0x7f
   10462:	f000 b83c 	b.w	104de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   10466:	b508      	push	{r3, lr}
   10468:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
   1046c:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   10470:	f88d 0000 	strb.w	r0, [sp]
   10474:	9800      	ldr	r0, [sp, #0]
   10476:	9000      	str	r0, [sp, #0]
   10478:	f89d 0000 	ldrb.w	r0, [sp]
   1047c:	b100      	cbz	r0, 10480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   1047e:	2001      	movs	r0, #1
   10480:	1e40      	subs	r0, r0, #1
   10482:	4208      	tst	r0, r1
   10484:	d003      	beq.n	1048e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10486:	2904      	cmp	r1, #4
   10488:	d001      	beq.n	1048e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1048a:	2001      	movs	r0, #1
   1048c:	bd08      	pop	{r3, pc}
   1048e:	2000      	movs	r0, #0
   10490:	bd08      	pop	{r3, pc}
   10492:	b570      	push	{r4, r5, r6, lr}
   10494:	4605      	mov	r5, r0
   10496:	f7fe f94d 	bl	e734 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1049a:	b170      	cbz	r0, 104ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   1049c:	4628      	mov	r0, r5
   1049e:	f7fe fafe 	bl	ea9e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   104a2:	2800      	cmp	r0, #0
   104a4:	d008      	beq.n	104b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   104a6:	4628      	mov	r0, r5
   104a8:	f7fe faf6 	bl	ea98 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   104ac:	4604      	mov	r4, r0
   104ae:	4628      	mov	r0, r5
   104b0:	f7fe facc 	bl	ea4c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   104b4:	b118      	cbz	r0, 104be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   104b6:	200c      	movs	r0, #12
   104b8:	bd70      	pop	{r4, r5, r6, pc}
   104ba:	2042      	movs	r0, #66	; 0x42
   104bc:	bd70      	pop	{r4, r5, r6, pc}
   104be:	b164      	cbz	r4, 104da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   104c0:	8820      	ldrh	r0, [r4, #0]
   104c2:	f7fd f928 	bl	d716 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   104c6:	8820      	ldrh	r0, [r4, #0]
   104c8:	2100      	movs	r1, #0
   104ca:	f7f4 fac1 	bl	4a50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   104ce:	b120      	cbz	r0, 104da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   104d0:	f241 6154 	movw	r1, #5716	; 0x1654
   104d4:	2039      	movs	r0, #57	; 0x39
   104d6:	f7f4 f839 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104da:	2000      	movs	r0, #0
   104dc:	bd70      	pop	{r4, r5, r6, pc}
   104de:	b508      	push	{r3, lr}
   104e0:	f640 1288 	movw	r2, #2440	; 0x988
   104e4:	4669      	mov	r1, sp
   104e6:	f7f3 ff13 	bl	4310 <mpsl_fem_tx_power_split>
   104ea:	bd08      	pop	{r3, pc}
   104ec:	b530      	push	{r4, r5, lr}
   104ee:	f340 0400 	sbfx	r4, r0, #0, #1
   104f2:	f340 0040 	sbfx	r0, r0, #1, #1
   104f6:	1c40      	adds	r0, r0, #1
   104f8:	9d03      	ldr	r5, [sp, #12]
   104fa:	1c64      	adds	r4, r4, #1
   104fc:	d000      	beq.n	10500 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x328>
   104fe:	b119      	cbz	r1, 10508 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
   10500:	b100      	cbz	r0, 10504 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32c>
   10502:	b10a      	cbz	r2, 10508 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
   10504:	b91c      	cbnz	r4, 1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   10506:	e001      	b.n	1050c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x334>
   10508:	2011      	movs	r0, #17
   1050a:	bd30      	pop	{r4, r5, pc}
   1050c:	2100      	movs	r1, #0
   1050e:	7019      	strb	r1, [r3, #0]
   10510:	b900      	cbnz	r0, 10514 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   10512:	2200      	movs	r2, #0
   10514:	702a      	strb	r2, [r5, #0]
   10516:	2000      	movs	r0, #0
   10518:	bd30      	pop	{r4, r5, pc}
   1051a:	b2c0      	uxtb	r0, r0
   1051c:	06c1      	lsls	r1, r0, #27
   1051e:	d40c      	bmi.n	1053a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
   10520:	0681      	lsls	r1, r0, #26
   10522:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10526:	d503      	bpl.n	10530 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x358>
   10528:	b9d1      	cbnz	r1, 10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1052a:	0781      	lsls	r1, r0, #30
   1052c:	d418      	bmi.n	10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1052e:	e001      	b.n	10534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35c>
   10530:	2900      	cmp	r1, #0
   10532:	d1fa      	bne.n	1052a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   10534:	0700      	lsls	r0, r0, #28
   10536:	d413      	bmi.n	10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10538:	e010      	b.n	1055c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
   1053a:	0641      	lsls	r1, r0, #25
   1053c:	d410      	bmi.n	10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1053e:	0681      	lsls	r1, r0, #26
   10540:	d40e      	bmi.n	10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10542:	07c1      	lsls	r1, r0, #31
   10544:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10548:	d004      	beq.n	10554 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   1054a:	2900      	cmp	r1, #0
   1054c:	db02      	blt.n	10554 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   1054e:	0740      	lsls	r0, r0, #29
   10550:	d404      	bmi.n	1055c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
   10552:	e005      	b.n	10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10554:	0701      	lsls	r1, r0, #28
   10556:	d403      	bmi.n	10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10558:	0740      	lsls	r0, r0, #29
   1055a:	d401      	bmi.n	10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1055c:	2001      	movs	r0, #1
   1055e:	4770      	bx	lr
   10560:	2000      	movs	r0, #0
   10562:	4770      	bx	lr
   10564:	b510      	push	{r4, lr}
   10566:	f7f7 fa5b 	bl	7a20 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1056a:	b110      	cbz	r0, 10572 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   1056c:	f240 110d 	movw	r1, #269	; 0x10d
   10570:	e004      	b.n	1057c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
   10572:	f7f6 fbd5 	bl	6d20 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10576:	b120      	cbz	r0, 10582 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   10578:	f44f 7189 	mov.w	r1, #274	; 0x112
   1057c:	2001      	movs	r0, #1
   1057e:	f7f3 ffe5 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10586:	2001      	movs	r0, #1
   10588:	f7fc befb 	b.w	d382 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1058c:	6802      	ldr	r2, [r0, #0]
   1058e:	b912      	cbnz	r2, 10596 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   10590:	6001      	str	r1, [r0, #0]
   10592:	4770      	bx	lr
   10594:	4602      	mov	r2, r0
   10596:	6850      	ldr	r0, [r2, #4]
   10598:	b108      	cbz	r0, 1059e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   1059a:	428a      	cmp	r2, r1
   1059c:	d1fa      	bne.n	10594 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   1059e:	428a      	cmp	r2, r1
   105a0:	d0f7      	beq.n	10592 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   105a2:	6051      	str	r1, [r2, #4]
   105a4:	4770      	bx	lr
   105a6:	b510      	push	{r4, lr}
   105a8:	4604      	mov	r4, r0
   105aa:	e002      	b.n	105b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
   105ac:	6820      	ldr	r0, [r4, #0]
   105ae:	4780      	blx	r0
   105b0:	6864      	ldr	r4, [r4, #4]
   105b2:	2c00      	cmp	r4, #0
   105b4:	d1fa      	bne.n	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
   105b6:	bd10      	pop	{r4, pc}
   105b8:	b510      	push	{r4, lr}
   105ba:	2000      	movs	r0, #0
   105bc:	f7fc fee1 	bl	d382 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   105c0:	f7f4 fba8 	bl	4d14 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   105c4:	f7f4 fe40 	bl	5248 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   105c8:	f7f4 fff2 	bl	55b0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   105cc:	2800      	cmp	r0, #0
   105ce:	d003      	beq.n	105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   105d0:	21ec      	movs	r1, #236	; 0xec
   105d2:	2001      	movs	r0, #1
   105d4:	f7f3 ffba 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105d8:	bd10      	pop	{r4, pc}
   105da:	b510      	push	{r4, lr}
   105dc:	f7ff ffc2 	bl	10564 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   105e0:	f7fe fe14 	bl	f20c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   105e4:	2800      	cmp	r0, #0
   105e6:	d004      	beq.n	105f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
   105e8:	f240 1129 	movw	r1, #297	; 0x129
   105ec:	2001      	movs	r0, #1
   105ee:	f7f3 ffad 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105f2:	bd10      	pop	{r4, pc}

000105f4 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   105f4:	f7f3 bbd4 	b.w	3da0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   105f8:	000b0001 	.word	0x000b0001
   105fc:	000a0002 	.word	0x000a0002
   10600:	00090005 	.word	0x00090005
   10604:	0008000a 	.word	0x0008000a
   10608:	00070014 	.word	0x00070014
   1060c:	0006001e 	.word	0x0006001e
   10610:	00050032 	.word	0x00050032
   10614:	0004004b 	.word	0x0004004b
   10618:	00030064 	.word	0x00030064
   1061c:	00020096 	.word	0x00020096
   10620:	000100fa 	.word	0x000100fa
   10624:	000001f4 	.word	0x000001f4

00010628 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10628:	b510      	push	{r4, lr}
   1062a:	f7fa fbcd 	bl	adc8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1062e:	f000 f81d 	bl	1066c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10632:	f7fa f8a3 	bl	a77c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1063a:	f7fa b99d 	b.w	a978 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001063e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1063e:	b510      	push	{r4, lr}
   10640:	24c8      	movs	r4, #200	; 0xc8
   10642:	1e64      	subs	r4, r4, #1
   10644:	b2e4      	uxtb	r4, r4
   10646:	f7fa f8b7 	bl	a7b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   1064a:	2802      	cmp	r0, #2
   1064c:	d003      	beq.n	10656 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1064e:	2801      	cmp	r0, #1
   10650:	d000      	beq.n	10654 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10652:	2000      	movs	r0, #0
   10654:	bd10      	pop	{r4, pc}
   10656:	2c00      	cmp	r4, #0
   10658:	d1f3      	bne.n	10642 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   1065a:	21b1      	movs	r1, #177	; 0xb1
   1065c:	203b      	movs	r0, #59	; 0x3b
   1065e:	f7f3 ff75 	bl	454c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10662:	5840      	ldr	r0, [r0, r1]
   10664:	2800      	cmp	r0, #0
   10666:	d000      	beq.n	1066a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10668:	2001      	movs	r0, #1
   1066a:	4770      	bx	lr

0001066c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1066c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10670:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10674:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10678:	f3bf 8f4f 	dsb	sy
   1067c:	f3bf 8f6f 	isb	sy
   10680:	f7fa ba14 	b.w	aaac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10684:	2800      	cmp	r0, #0
   10686:	db09      	blt.n	1069c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10688:	f000 021f 	and.w	r2, r0, #31
   1068c:	2101      	movs	r1, #1
   1068e:	4091      	lsls	r1, r2
   10690:	0940      	lsrs	r0, r0, #5
   10692:	0080      	lsls	r0, r0, #2
   10694:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10698:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1069c:	4770      	bx	lr
   1069e:	2800      	cmp	r0, #0
   106a0:	db0d      	blt.n	106be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   106a2:	f000 021f 	and.w	r2, r0, #31
   106a6:	2101      	movs	r1, #1
   106a8:	4091      	lsls	r1, r2
   106aa:	0940      	lsrs	r0, r0, #5
   106ac:	0080      	lsls	r0, r0, #2
   106ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106b2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   106b6:	f3bf 8f4f 	dsb	sy
   106ba:	f3bf 8f6f 	isb	sy
   106be:	4770      	bx	lr
   106c0:	5840      	ldr	r0, [r0, r1]
   106c2:	2800      	cmp	r0, #0
   106c4:	d000      	beq.n	106c8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   106c6:	2001      	movs	r0, #1
   106c8:	4770      	bx	lr
   106ca:	5840      	ldr	r0, [r0, r1]
   106cc:	2800      	cmp	r0, #0
   106ce:	d000      	beq.n	106d2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   106d0:	2001      	movs	r0, #1
   106d2:	4770      	bx	lr

000106d4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   106d4:	b510      	push	{r4, lr}
   106d6:	4604      	mov	r4, r0
   106d8:	4608      	mov	r0, r1
   106da:	f7fa fc9b 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   106de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   106e2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   106e6:	fbb0 f0f1 	udiv	r0, r0, r1
   106ea:	1a20      	subs	r0, r4, r0
   106ec:	1e80      	subs	r0, r0, #2
   106ee:	bd10      	pop	{r4, pc}

000106f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   106f0:	b510      	push	{r4, lr}
   106f2:	4604      	mov	r4, r0
   106f4:	4608      	mov	r0, r1
   106f6:	f7fa fc8d 	bl	b014 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   106fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   106fe:	fbb0 f0f1 	udiv	r0, r0, r1
   10702:	1a20      	subs	r0, r4, r0
   10704:	bd10      	pop	{r4, pc}
   10706:	ecd8      	.short	0xecd8
   10708:	fcf8f4f0 	.word	0xfcf8f4f0
   1070c:	04030200 	.word	0x04030200
   10710:	08070605 	.word	0x08070605
	...
   10728:	01010101 	.word	0x01010101
   1072c:	02020202 	.word	0x02020202
   10730:	03030303 	.word	0x03030303
   10734:	04040404 	.word	0x04040404
   10738:	05050505 	.word	0x05050505
   1073c:	08070606 	.word	0x08070606
   10740:	0c0b0a09 	.word	0x0c0b0a09
   10744:	0000000d 	.word	0x0000000d
	...
   10758:	01010100 	.word	0x01010100
   1075c:	02020201 	.word	0x02020201
   10760:	03030302 	.word	0x03030302
   10764:	04040403 	.word	0x04040403
   10768:	05050504 	.word	0x05050504
   1076c:	06060605 	.word	0x06060605
   10770:	0908      	.short	0x0908
   10772:	080c      	.short	0x080c
   10774:	010d1702 	.word	0x010d1702
   10778:	09090201 	.word	0x09090201
   1077c:	02060101 	.word	0x02060101
   10780:	03181809 	.word	0x03181809
   10784:	09090101 	.word	0x09090101
   10788:	03050303 	.word	0x03050303
   1078c:	02230102 	.word	0x02230102
   10790:	10092402 	.word	0x10092402
   10794:	05050404 	.word	0x05050404
   10798:	0b040b0b 	.word	0x0b040b0b
   1079c:	0000002b 	.word	0x0000002b

000107a0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   107a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   107a2:	4dc0      	ldr	r5, [pc, #768]	; (10aa4 <bt_init+0x304>)
   107a4:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   107a8:	6899      	ldr	r1, [r3, #8]
   107aa:	f011 0101 	ands.w	r1, r1, #1
   107ae:	d121      	bne.n	107f4 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   107b0:	aa01      	add	r2, sp, #4
   107b2:	f640 4003 	movw	r0, #3075	; 0xc03
   107b6:	f003 fe8d 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   107ba:	4604      	mov	r4, r0
   107bc:	2800      	cmp	r0, #0
   107be:	d165      	bne.n	1088c <bt_init+0xec>
		hci_reset_complete(rsp);
   107c0:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   107c2:	6883      	ldr	r3, [r0, #8]
	if (status) {
   107c4:	781b      	ldrb	r3, [r3, #0]
   107c6:	b99b      	cbnz	r3, 107f0 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   107c8:	f3bf 8f5b 	dmb	ish
   107cc:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   107d0:	f3bf 8f5b 	dmb	ish
   107d4:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   107d8:	f003 0309 	and.w	r3, r3, #9
   107dc:	f3bf 8f5b 	dmb	ish
   107e0:	e852 1f00 	ldrex	r1, [r2]
   107e4:	e842 3400 	strex	r4, r3, [r2]
   107e8:	2c00      	cmp	r4, #0
   107ea:	d1f9      	bne.n	107e0 <bt_init+0x40>
   107ec:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   107f0:	f00b f8a6 	bl	1b940 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   107f4:	aa01      	add	r2, sp, #4
   107f6:	2100      	movs	r1, #0
   107f8:	f241 0003 	movw	r0, #4099	; 0x1003
   107fc:	f003 fe6a 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   10800:	4604      	mov	r4, r0
   10802:	2800      	cmp	r0, #0
   10804:	d142      	bne.n	1088c <bt_init+0xec>
	read_local_features_complete(rsp);
   10806:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   10808:	48a7      	ldr	r0, [pc, #668]	; (10aa8 <bt_init+0x308>)
   1080a:	68b1      	ldr	r1, [r6, #8]
   1080c:	2208      	movs	r2, #8
   1080e:	3101      	adds	r1, #1
   10810:	f013 ff6d 	bl	246ee <memcpy>
	net_buf_unref(rsp);
   10814:	4630      	mov	r0, r6
   10816:	f00b f893 	bl	1b940 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1081a:	4621      	mov	r1, r4
   1081c:	aa01      	add	r2, sp, #4
   1081e:	f241 0001 	movw	r0, #4097	; 0x1001
   10822:	f003 fe57 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   10826:	4604      	mov	r4, r0
   10828:	bb80      	cbnz	r0, 1088c <bt_init+0xec>
	read_local_ver_complete(rsp);
   1082a:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1082c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1082e:	785a      	ldrb	r2, [r3, #1]
   10830:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10834:	885a      	ldrh	r2, [r3, #2]
   10836:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   1083a:	791a      	ldrb	r2, [r3, #4]
   1083c:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10840:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   10844:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10848:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1084c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   10850:	f00b f876 	bl	1b940 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10854:	4621      	mov	r1, r4
   10856:	aa01      	add	r2, sp, #4
   10858:	f241 0002 	movw	r0, #4098	; 0x1002
   1085c:	f003 fe3a 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   10860:	4604      	mov	r4, r0
   10862:	b998      	cbnz	r0, 1088c <bt_init+0xec>
	read_supported_commands_complete(rsp);
   10864:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   10866:	4891      	ldr	r0, [pc, #580]	; (10aac <bt_init+0x30c>)
   10868:	68b1      	ldr	r1, [r6, #8]
   1086a:	2240      	movs	r2, #64	; 0x40
   1086c:	3101      	adds	r1, #1
   1086e:	f013 ff3e 	bl	246ee <memcpy>
	net_buf_unref(rsp);
   10872:	4630      	mov	r0, r6
   10874:	f00b f864 	bl	1b940 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10878:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1087c:	065a      	lsls	r2, r3, #25
   1087e:	d408      	bmi.n	10892 <bt_init+0xf2>
		BT_ERR("Non-LE capable controller detected!");
   10880:	488b      	ldr	r0, [pc, #556]	; (10ab0 <bt_init+0x310>)
   10882:	2145      	movs	r1, #69	; 0x45
   10884:	f013 f8be 	bl	23a04 <z_log_minimal_printk>
		return -ENODEV;
   10888:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   1088c:	4620      	mov	r0, r4
   1088e:	b002      	add	sp, #8
   10890:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10892:	4621      	mov	r1, r4
   10894:	aa01      	add	r2, sp, #4
   10896:	f242 0003 	movw	r0, #8195	; 0x2003
   1089a:	f003 fe1b 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   1089e:	4604      	mov	r4, r0
   108a0:	2800      	cmp	r0, #0
   108a2:	d1f3      	bne.n	1088c <bt_init+0xec>
	read_le_features_complete(rsp);
   108a4:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   108a6:	4883      	ldr	r0, [pc, #524]	; (10ab4 <bt_init+0x314>)
   108a8:	68b1      	ldr	r1, [r6, #8]
   108aa:	2208      	movs	r2, #8
   108ac:	3101      	adds	r1, #1
   108ae:	f013 ff1e 	bl	246ee <memcpy>
	net_buf_unref(rsp);
   108b2:	4630      	mov	r0, r6
   108b4:	f00b f844 	bl	1b940 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   108b8:	4621      	mov	r1, r4
   108ba:	aa01      	add	r2, sp, #4
   108bc:	f242 0002 	movw	r0, #8194	; 0x2002
   108c0:	f003 fe08 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   108c4:	4604      	mov	r4, r0
   108c6:	2800      	cmp	r0, #0
   108c8:	d1e0      	bne.n	1088c <bt_init+0xec>
		le_read_buffer_size_complete(rsp);
   108ca:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   108cc:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   108ce:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   108d2:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   108d6:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   108d8:	b121      	cbz	r1, 108e4 <bt_init+0x144>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   108da:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   108dc:	4876      	ldr	r0, [pc, #472]	; (10ab8 <bt_init+0x318>)
   108de:	4611      	mov	r1, r2
   108e0:	f016 fa8b 	bl	26dfa <z_impl_k_sem_init>
		net_buf_unref(rsp);
   108e4:	4620      	mov	r0, r4
   108e6:	f00b f82b 	bl	1b940 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   108ea:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   108ee:	f016 0620 	ands.w	r6, r6, #32
   108f2:	d118      	bne.n	10926 <bt_init+0x186>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   108f4:	2102      	movs	r1, #2
   108f6:	f640 406d 	movw	r0, #3181	; 0xc6d
   108fa:	f003 fda1 	bl	14440 <bt_hci_cmd_create>
		if (!buf) {
   108fe:	4604      	mov	r4, r0
   10900:	2800      	cmp	r0, #0
   10902:	f000 80cc 	beq.w	10a9e <bt_init+0x2fe>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10906:	2102      	movs	r1, #2
   10908:	3008      	adds	r0, #8
   1090a:	f00b f91f 	bl	1bb4c <net_buf_simple_add>
		cp_le->le = 0x01;
   1090e:	2301      	movs	r3, #1
   10910:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10912:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10914:	4621      	mov	r1, r4
   10916:	4632      	mov	r2, r6
   10918:	f640 406d 	movw	r0, #3181	; 0xc6d
   1091c:	f003 fdda 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   10920:	4604      	mov	r4, r0
   10922:	2800      	cmp	r0, #0
   10924:	d1b2      	bne.n	1088c <bt_init+0xec>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10926:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   1092a:	071b      	lsls	r3, r3, #28
   1092c:	d512      	bpl.n	10954 <bt_init+0x1b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1092e:	aa01      	add	r2, sp, #4
   10930:	2100      	movs	r1, #0
   10932:	f242 001c 	movw	r0, #8220	; 0x201c
   10936:	f003 fdcd 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   1093a:	4604      	mov	r4, r0
   1093c:	2800      	cmp	r0, #0
   1093e:	d1a5      	bne.n	1088c <bt_init+0xec>
		le_read_supp_states_complete(rsp);
   10940:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10942:	6883      	ldr	r3, [r0, #8]
   10944:	f8d3 2001 	ldr.w	r2, [r3, #1]
   10948:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1094c:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   10950:	f00a fff6 	bl	1b940 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10954:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10958:	069e      	lsls	r6, r3, #26
   1095a:	d524      	bpl.n	109a6 <bt_init+0x206>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1095c:	f10d 0102 	add.w	r1, sp, #2
   10960:	4668      	mov	r0, sp
   10962:	f003 fe17 	bl	14594 <hci_le_read_max_data_len>
		if (err) {
   10966:	4604      	mov	r4, r0
   10968:	2800      	cmp	r0, #0
   1096a:	d18f      	bne.n	1088c <bt_init+0xec>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1096c:	2104      	movs	r1, #4
   1096e:	f242 0024 	movw	r0, #8228	; 0x2024
   10972:	f003 fd65 	bl	14440 <bt_hci_cmd_create>
		if (!buf) {
   10976:	4606      	mov	r6, r0
   10978:	2800      	cmp	r0, #0
   1097a:	f000 8090 	beq.w	10a9e <bt_init+0x2fe>
   1097e:	2104      	movs	r1, #4
   10980:	3008      	adds	r0, #8
   10982:	f00b f8e3 	bl	1bb4c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10986:	f8bd 3000 	ldrh.w	r3, [sp]
   1098a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1098c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10990:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10992:	4622      	mov	r2, r4
   10994:	4631      	mov	r1, r6
   10996:	f242 0024 	movw	r0, #8228	; 0x2024
   1099a:	f003 fd9b 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   1099e:	4604      	mov	r4, r0
   109a0:	2800      	cmp	r0, #0
   109a2:	f47f af73 	bne.w	1088c <bt_init+0xec>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   109a6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   109aa:	065c      	lsls	r4, r3, #25
   109ac:	d510      	bpl.n	109d0 <bt_init+0x230>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   109ae:	aa01      	add	r2, sp, #4
   109b0:	2100      	movs	r1, #0
   109b2:	f242 002a 	movw	r0, #8234	; 0x202a
   109b6:	f003 fd8d 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   109ba:	4604      	mov	r4, r0
   109bc:	2800      	cmp	r0, #0
   109be:	f47f af65 	bne.w	1088c <bt_init+0xec>
		le_read_resolving_list_size_complete(rsp);
   109c2:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   109c4:	6883      	ldr	r3, [r0, #8]
   109c6:	785b      	ldrb	r3, [r3, #1]
   109c8:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   109cc:	f00a ffb8 	bl	1b940 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   109d0:	2108      	movs	r1, #8
   109d2:	f242 0001 	movw	r0, #8193	; 0x2001
   109d6:	f003 fd33 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   109da:	4604      	mov	r4, r0
   109dc:	2800      	cmp	r0, #0
   109de:	d05e      	beq.n	10a9e <bt_init+0x2fe>
   109e0:	2108      	movs	r1, #8
   109e2:	4408      	add	r0, r1
   109e4:	f00b f8b2 	bl	1bb4c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   109e8:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   109ec:	f011 0f40 	tst.w	r1, #64	; 0x40
   109f0:	4602      	mov	r2, r0
   109f2:	f240 2302 	movw	r3, #514	; 0x202
   109f6:	bf08      	it	eq
   109f8:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   109fa:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   109fc:	bf4c      	ite	mi
   109fe:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   10a02:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10a06:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10a08:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   10a0c:	bf48      	it	mi
   10a0e:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10a12:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10a16:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10a1a:	bf18      	it	ne
   10a1c:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10a20:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10a24:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   10a26:	bf48      	it	mi
   10a28:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10a2c:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   10a2e:	bf08      	it	eq
   10a30:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   10a34:	2100      	movs	r1, #0
   10a36:	f013 ff6d 	bl	24914 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10a3a:	4621      	mov	r1, r4
   10a3c:	2200      	movs	r2, #0
   10a3e:	f242 0001 	movw	r0, #8193	; 0x2001
   10a42:	f003 fd47 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   10a46:	4604      	mov	r4, r0
   10a48:	2800      	cmp	r0, #0
   10a4a:	f47f af1f 	bne.w	1088c <bt_init+0xec>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10a4e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   10a52:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10a56:	0698      	lsls	r0, r3, #26
   10a58:	d430      	bmi.n	10abc <bt_init+0x31c>
	if (bt_dev.le.acl_mtu) {
   10a5a:	b9c9      	cbnz	r1, 10a90 <bt_init+0x2f0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10a5c:	aa01      	add	r2, sp, #4
   10a5e:	f241 0005 	movw	r0, #4101	; 0x1005
   10a62:	f003 fd37 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   10a66:	4604      	mov	r4, r0
   10a68:	2800      	cmp	r0, #0
   10a6a:	f47f af0f 	bne.w	1088c <bt_init+0xec>
	if (bt_dev.le.acl_mtu) {
   10a6e:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   10a72:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   10a74:	b94b      	cbnz	r3, 10a8a <bt_init+0x2ea>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   10a76:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10a78:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10a7c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10a80:	889a      	ldrh	r2, [r3, #4]
   10a82:	480d      	ldr	r0, [pc, #52]	; (10ab8 <bt_init+0x318>)
   10a84:	4611      	mov	r1, r2
   10a86:	f016 f9b8 	bl	26dfa <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10a8a:	4620      	mov	r0, r4
   10a8c:	f00a ff58 	bl	1b940 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10a90:	2108      	movs	r1, #8
   10a92:	f640 4001 	movw	r0, #3073	; 0xc01
   10a96:	f003 fcd3 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   10a9a:	4604      	mov	r4, r0
   10a9c:	b9b8      	cbnz	r0, 10ace <bt_init+0x32e>
		return -ENOBUFS;
   10a9e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10aa2:	e6f3      	b.n	1088c <bt_init+0xec>
   10aa4:	20000380 	.word	0x20000380
   10aa8:	200003f0 	.word	0x200003f0
   10aac:	200003f8 	.word	0x200003f8
   10ab0:	00028fe0 	.word	0x00028fe0
   10ab4:	20000450 	.word	0x20000450
   10ab8:	20000480 	.word	0x20000480
	else if (!bt_dev.le.acl_mtu) {
   10abc:	2900      	cmp	r1, #0
   10abe:	d1e7      	bne.n	10a90 <bt_init+0x2f0>
		BT_ERR("ACL BR/EDR buffers not initialized");
   10ac0:	483f      	ldr	r0, [pc, #252]	; (10bc0 <bt_init+0x420>)
   10ac2:	2145      	movs	r1, #69	; 0x45
   10ac4:	f012 ff9e 	bl	23a04 <z_log_minimal_printk>
		return -EIO;
   10ac8:	f06f 0404 	mvn.w	r4, #4
   10acc:	e6de      	b.n	1088c <bt_init+0xec>
   10ace:	2108      	movs	r1, #8
   10ad0:	4408      	add	r0, r1
   10ad2:	f00b f83b 	bl	1bb4c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10ad6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10ada:	07d9      	lsls	r1, r3, #31
   10adc:	4602      	mov	r2, r0
   10ade:	d42e      	bmi.n	10b3e <bt_init+0x39e>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   10ae0:	4838      	ldr	r0, [pc, #224]	; (10bc4 <bt_init+0x424>)
   10ae2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   10ae6:	f013 ff15 	bl	24914 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10aea:	4621      	mov	r1, r4
   10aec:	2200      	movs	r2, #0
   10aee:	f640 4001 	movw	r0, #3073	; 0xc01
   10af2:	f003 fcef 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   10af6:	4604      	mov	r4, r0
   10af8:	2800      	cmp	r0, #0
   10afa:	f47f aec7 	bne.w	1088c <bt_init+0xec>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10afe:	4601      	mov	r1, r0
   10b00:	aa01      	add	r2, sp, #4
   10b02:	f64f 4001 	movw	r0, #64513	; 0xfc01
   10b06:	f003 fce5 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   10b0a:	4604      	mov	r4, r0
   10b0c:	b1d8      	cbz	r0, 10b46 <bt_init+0x3a6>
		BT_WARN("Vendor HCI extensions not available");
   10b0e:	482e      	ldr	r0, [pc, #184]	; (10bc8 <bt_init+0x428>)
   10b10:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   10b12:	f012 ff77 	bl	23a04 <z_log_minimal_printk>
	err = bt_id_init();
   10b16:	f014 f872 	bl	24bfe <bt_id_init>
	if (err) {
   10b1a:	4604      	mov	r4, r0
   10b1c:	2800      	cmp	r0, #0
   10b1e:	f47f aeb5 	bne.w	1088c <bt_init+0xec>
		err = bt_conn_init();
   10b22:	f006 f92f 	bl	16d84 <bt_conn_init>
		if (err) {
   10b26:	4604      	mov	r4, r0
   10b28:	2800      	cmp	r0, #0
   10b2a:	f47f aeaf 	bne.w	1088c <bt_init+0xec>
		if (!bt_dev.id_count) {
   10b2e:	79eb      	ldrb	r3, [r5, #7]
   10b30:	2b00      	cmp	r3, #0
   10b32:	d139      	bne.n	10ba8 <bt_init+0x408>
			BT_INFO("No ID address. App must call settings_load()");
   10b34:	4825      	ldr	r0, [pc, #148]	; (10bcc <bt_init+0x42c>)
   10b36:	2149      	movs	r1, #73	; 0x49
   10b38:	f012 ff64 	bl	23a04 <z_log_minimal_printk>
			return 0;
   10b3c:	e6a6      	b.n	1088c <bt_init+0xec>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10b3e:	a11e      	add	r1, pc, #120	; (adr r1, 10bb8 <bt_init+0x418>)
   10b40:	e9d1 0100 	ldrd	r0, r1, [r1]
   10b44:	e7cf      	b.n	10ae6 <bt_init+0x346>
	net_buf_unref(rsp);
   10b46:	9801      	ldr	r0, [sp, #4]
   10b48:	f00a fefa 	bl	1b940 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10b4c:	4621      	mov	r1, r4
   10b4e:	aa01      	add	r2, sp, #4
   10b50:	f64f 4002 	movw	r0, #64514	; 0xfc02
   10b54:	f003 fcbe 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   10b58:	4604      	mov	r4, r0
   10b5a:	b110      	cbz	r0, 10b62 <bt_init+0x3c2>
		BT_WARN("Failed to read supported vendor commands");
   10b5c:	481c      	ldr	r0, [pc, #112]	; (10bd0 <bt_init+0x430>)
   10b5e:	2157      	movs	r1, #87	; 0x57
   10b60:	e7d7      	b.n	10b12 <bt_init+0x372>
	rp.cmds = (void *)rsp->data;
   10b62:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10b64:	481b      	ldr	r0, [pc, #108]	; (10bd4 <bt_init+0x434>)
   10b66:	68b1      	ldr	r1, [r6, #8]
   10b68:	2202      	movs	r2, #2
   10b6a:	3101      	adds	r1, #1
   10b6c:	f013 fdbf 	bl	246ee <memcpy>
	net_buf_unref(rsp);
   10b70:	4630      	mov	r0, r6
   10b72:	f00a fee5 	bl	1b940 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   10b76:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   10b7a:	075b      	lsls	r3, r3, #29
   10b7c:	d5cb      	bpl.n	10b16 <bt_init+0x376>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   10b7e:	aa01      	add	r2, sp, #4
   10b80:	4621      	mov	r1, r4
   10b82:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10b86:	f003 fca5 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   10b8a:	b110      	cbz	r0, 10b92 <bt_init+0x3f2>
			BT_WARN("Failed to read supported vendor features");
   10b8c:	4812      	ldr	r0, [pc, #72]	; (10bd8 <bt_init+0x438>)
   10b8e:	2157      	movs	r1, #87	; 0x57
   10b90:	e7bf      	b.n	10b12 <bt_init+0x372>
		rp.feat = (void *)rsp->data;
   10b92:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10b94:	4811      	ldr	r0, [pc, #68]	; (10bdc <bt_init+0x43c>)
   10b96:	68a1      	ldr	r1, [r4, #8]
   10b98:	2201      	movs	r2, #1
   10b9a:	4411      	add	r1, r2
   10b9c:	f013 fda7 	bl	246ee <memcpy>
		net_buf_unref(rsp);
   10ba0:	4620      	mov	r0, r4
   10ba2:	f00a fecd 	bl	1b940 <net_buf_unref>
   10ba6:	e7b6      	b.n	10b16 <bt_init+0x376>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10ba8:	2108      	movs	r1, #8
   10baa:	480d      	ldr	r0, [pc, #52]	; (10be0 <bt_init+0x440>)
   10bac:	f013 fe97 	bl	248de <atomic_or>
	bt_finalize_init();
   10bb0:	f004 f964 	bl	14e7c <bt_finalize_init>
	return 0;
   10bb4:	e66a      	b.n	1088c <bt_init+0xec>
   10bb6:	bf00      	nop
   10bb8:	02008890 	.word	0x02008890
   10bbc:	20008000 	.word	0x20008000
   10bc0:	00029009 	.word	0x00029009
   10bc4:	02008810 	.word	0x02008810
   10bc8:	00029031 	.word	0x00029031
   10bcc:	000290b6 	.word	0x000290b6
   10bd0:	0002905a 	.word	0x0002905a
   10bd4:	20000439 	.word	0x20000439
   10bd8:	00029088 	.word	0x00029088
   10bdc:	20000438 	.word	0x20000438
   10be0:	2000044c 	.word	0x2000044c

00010be4 <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
   10be4:	4b01      	ldr	r3, [pc, #4]	; (10bec <app_button_cb+0x8>)
   10be6:	7818      	ldrb	r0, [r3, #0]
   10be8:	4770      	bx	lr
   10bea:	bf00      	nop
   10bec:	2000257a 	.word	0x2000257a

00010bf0 <disconnected>:
{
   10bf0:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   10bf2:	4804      	ldr	r0, [pc, #16]	; (10c04 <disconnected+0x14>)
   10bf4:	f012 fcf0 	bl	235d8 <printk>
}
   10bf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
   10bfc:	2001      	movs	r0, #1
   10bfe:	f015 bf1e 	b.w	26a3e <dk_set_led_off>
   10c02:	bf00      	nop
   10c04:	00027d9c 	.word	0x00027d9c

00010c08 <connected>:
{
   10c08:	b508      	push	{r3, lr}
	if (err) {
   10c0a:	b121      	cbz	r1, 10c16 <connected+0xe>
}
   10c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
   10c10:	4808      	ldr	r0, [pc, #32]	; (10c34 <connected+0x2c>)
   10c12:	f012 bce1 	b.w	235d8 <printk>
	printk("Connected\n");
   10c16:	4808      	ldr	r0, [pc, #32]	; (10c38 <connected+0x30>)
   10c18:	f012 fcde 	bl	235d8 <printk>
	uint16_t test_adc_smpl = adc_drv_read();
   10c1c:	f000 f956 	bl	10ecc <adc_drv_read>
   10c20:	4601      	mov	r1, r0
	printk("ADC smpl = %d\n\r", test_adc_smpl);
   10c22:	4806      	ldr	r0, [pc, #24]	; (10c3c <connected+0x34>)
   10c24:	f012 fcd8 	bl	235d8 <printk>
}
   10c28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_on(CON_STATUS_LED);
   10c2c:	2001      	movs	r0, #1
   10c2e:	f015 bf03 	b.w	26a38 <dk_set_led_on>
   10c32:	bf00      	nop
   10c34:	00027db6 	.word	0x00027db6
   10c38:	00027dd2 	.word	0x00027dd2
   10c3c:	00027ddd 	.word	0x00027ddd

00010c40 <button_changed>:
	.button_cb = app_button_cb,
};

static void button_changed(uint32_t button_state, uint32_t has_changed)
{
	if (has_changed & USER_BUTTON) {
   10c40:	07cb      	lsls	r3, r1, #31
{
   10c42:	b510      	push	{r4, lr}
	if (has_changed & USER_BUTTON) {
   10c44:	d506      	bpl.n	10c54 <button_changed+0x14>
		uint32_t user_button_state = button_state & USER_BUTTON;

		bt_lbs_send_button_state(user_button_state);
   10c46:	f000 0401 	and.w	r4, r0, #1
   10c4a:	4620      	mov	r0, r4
   10c4c:	f002 f888 	bl	12d60 <bt_lbs_send_button_state>
		app_button_state = user_button_state ? true : false;
   10c50:	4b01      	ldr	r3, [pc, #4]	; (10c58 <button_changed+0x18>)
   10c52:	701c      	strb	r4, [r3, #0]
	}
}
   10c54:	bd10      	pop	{r4, pc}
   10c56:	bf00      	nop
   10c58:	2000257a 	.word	0x2000257a

00010c5c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10c5c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   10c5e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10c60:	b08a      	sub	sp, #40	; 0x28
   10c62:	4604      	mov	r4, r0
   10c64:	460e      	mov	r6, r1
   10c66:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   10c68:	2b03      	cmp	r3, #3
   10c6a:	d820      	bhi.n	10cae <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   10c6c:	e8df f003 	tbb	[pc, r3]
   10c70:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10c74:	4911      	ldr	r1, [pc, #68]	; (10cbc <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   10c76:	4628      	mov	r0, r5
   10c78:	f013 fcef 	bl	2465a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10c7c:	9505      	str	r5, [sp, #20]
   10c7e:	7863      	ldrb	r3, [r4, #1]
   10c80:	9304      	str	r3, [sp, #16]
   10c82:	78a3      	ldrb	r3, [r4, #2]
   10c84:	9303      	str	r3, [sp, #12]
   10c86:	78e3      	ldrb	r3, [r4, #3]
   10c88:	9302      	str	r3, [sp, #8]
   10c8a:	7923      	ldrb	r3, [r4, #4]
   10c8c:	9301      	str	r3, [sp, #4]
   10c8e:	7963      	ldrb	r3, [r4, #5]
   10c90:	9300      	str	r3, [sp, #0]
   10c92:	79a3      	ldrb	r3, [r4, #6]
   10c94:	4a0a      	ldr	r2, [pc, #40]	; (10cc0 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   10c96:	211e      	movs	r1, #30
   10c98:	4630      	mov	r0, r6
   10c9a:	f012 fcaa 	bl	235f2 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   10c9e:	b00a      	add	sp, #40	; 0x28
   10ca0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   10ca2:	4908      	ldr	r1, [pc, #32]	; (10cc4 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   10ca4:	e7e7      	b.n	10c76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   10ca6:	4908      	ldr	r1, [pc, #32]	; (10cc8 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   10ca8:	e7e5      	b.n	10c76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   10caa:	4908      	ldr	r1, [pc, #32]	; (10ccc <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   10cac:	e7e3      	b.n	10c76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10cae:	4a08      	ldr	r2, [pc, #32]	; (10cd0 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   10cb0:	210a      	movs	r1, #10
   10cb2:	4628      	mov	r0, r5
   10cb4:	f012 fc9d 	bl	235f2 <snprintk>
		break;
   10cb8:	e7e0      	b.n	10c7c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   10cba:	bf00      	nop
   10cbc:	00027ded 	.word	0x00027ded
   10cc0:	00027e16 	.word	0x00027e16
   10cc4:	00027df4 	.word	0x00027df4
   10cc8:	00027dfb 	.word	0x00027dfb
   10ccc:	00027e05 	.word	0x00027e05
   10cd0:	00027e0f 	.word	0x00027e0f

00010cd4 <security_changed>:
{
   10cd4:	b530      	push	{r4, r5, lr}
   10cd6:	b089      	sub	sp, #36	; 0x24
   10cd8:	460c      	mov	r4, r1
   10cda:	4615      	mov	r5, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10cdc:	f014 f950 	bl	24f80 <bt_conn_get_dst>
   10ce0:	4669      	mov	r1, sp
   10ce2:	f7ff ffbb 	bl	10c5c <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
   10ce6:	b935      	cbnz	r5, 10cf6 <security_changed+0x22>
		printk("Security changed: %s level %u\n", addr, level);
   10ce8:	4806      	ldr	r0, [pc, #24]	; (10d04 <security_changed+0x30>)
   10cea:	4622      	mov	r2, r4
   10cec:	4669      	mov	r1, sp
   10cee:	f012 fc73 	bl	235d8 <printk>
}
   10cf2:	b009      	add	sp, #36	; 0x24
   10cf4:	bd30      	pop	{r4, r5, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
   10cf6:	4804      	ldr	r0, [pc, #16]	; (10d08 <security_changed+0x34>)
   10cf8:	462b      	mov	r3, r5
   10cfa:	4622      	mov	r2, r4
   10cfc:	4669      	mov	r1, sp
   10cfe:	f012 fc6b 	bl	235d8 <printk>
}
   10d02:	e7f6      	b.n	10cf2 <security_changed+0x1e>
   10d04:	00027e39 	.word	0x00027e39
   10d08:	00027e58 	.word	0x00027e58

00010d0c <pairing_failed>:
{
   10d0c:	b510      	push	{r4, lr}
   10d0e:	b088      	sub	sp, #32
   10d10:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d12:	f014 f935 	bl	24f80 <bt_conn_get_dst>
   10d16:	4669      	mov	r1, sp
   10d18:	f7ff ffa0 	bl	10c5c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   10d1c:	4803      	ldr	r0, [pc, #12]	; (10d2c <pairing_failed+0x20>)
   10d1e:	4622      	mov	r2, r4
   10d20:	4669      	mov	r1, sp
   10d22:	f012 fc59 	bl	235d8 <printk>
}
   10d26:	b008      	add	sp, #32
   10d28:	bd10      	pop	{r4, pc}
   10d2a:	bf00      	nop
   10d2c:	00027e7d 	.word	0x00027e7d

00010d30 <pairing_complete>:
{
   10d30:	b510      	push	{r4, lr}
   10d32:	b088      	sub	sp, #32
   10d34:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d36:	f014 f923 	bl	24f80 <bt_conn_get_dst>
   10d3a:	4669      	mov	r1, sp
   10d3c:	f7ff ff8e 	bl	10c5c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   10d40:	4803      	ldr	r0, [pc, #12]	; (10d50 <pairing_complete+0x20>)
   10d42:	4622      	mov	r2, r4
   10d44:	4669      	mov	r1, sp
   10d46:	f012 fc47 	bl	235d8 <printk>
}
   10d4a:	b008      	add	sp, #32
   10d4c:	bd10      	pop	{r4, pc}
   10d4e:	bf00      	nop
   10d50:	00027ea1 	.word	0x00027ea1

00010d54 <auth_cancel>:
{
   10d54:	b500      	push	{lr}
   10d56:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d58:	f014 f912 	bl	24f80 <bt_conn_get_dst>
   10d5c:	4669      	mov	r1, sp
   10d5e:	f7ff ff7d 	bl	10c5c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
   10d62:	4803      	ldr	r0, [pc, #12]	; (10d70 <auth_cancel+0x1c>)
   10d64:	4669      	mov	r1, sp
   10d66:	f012 fc37 	bl	235d8 <printk>
}
   10d6a:	b009      	add	sp, #36	; 0x24
   10d6c:	f85d fb04 	ldr.w	pc, [sp], #4
   10d70:	00027ec4 	.word	0x00027ec4

00010d74 <auth_passkey_display>:
{
   10d74:	b510      	push	{r4, lr}
   10d76:	b088      	sub	sp, #32
   10d78:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d7a:	f014 f901 	bl	24f80 <bt_conn_get_dst>
   10d7e:	4669      	mov	r1, sp
   10d80:	f7ff ff6c 	bl	10c5c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
   10d84:	4803      	ldr	r0, [pc, #12]	; (10d94 <auth_passkey_display+0x20>)
   10d86:	4622      	mov	r2, r4
   10d88:	4669      	mov	r1, sp
   10d8a:	f012 fc25 	bl	235d8 <printk>
}
   10d8e:	b008      	add	sp, #32
   10d90:	bd10      	pop	{r4, pc}
   10d92:	bf00      	nop
   10d94:	00027edb 	.word	0x00027edb

00010d98 <main>:

	return err;
}

void main(void)
{
   10d98:	b530      	push	{r4, r5, lr}
	int blink_status = 0;
	int err;

	printk("Starting Bluetooth Peripheral LBS example\n");
   10d9a:	4831      	ldr	r0, [pc, #196]	; (10e60 <main+0xc8>)
{
   10d9c:	b089      	sub	sp, #36	; 0x24
	printk("Starting Bluetooth Peripheral LBS example\n");
   10d9e:	f012 fc1b 	bl	235d8 <printk>

	err = dk_leds_init();
   10da2:	f00c fdb9 	bl	1d918 <dk_leds_init>
	if (err) {
   10da6:	4601      	mov	r1, r0
   10da8:	b128      	cbz	r0, 10db6 <main+0x1e>
		printk("LEDs init failed (err %d)\n", err);
   10daa:	482e      	ldr	r0, [pc, #184]	; (10e64 <main+0xcc>)
	
	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   10dac:	b009      	add	sp, #36	; 0x24
   10dae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Failed to init LBS (err:%d)\n", err);
   10db2:	f012 bc11 	b.w	235d8 <printk>
	err = dk_buttons_init(button_changed);
   10db6:	482c      	ldr	r0, [pc, #176]	; (10e68 <main+0xd0>)
   10db8:	f00c fde2 	bl	1d980 <dk_buttons_init>
	if (err) {
   10dbc:	4604      	mov	r4, r0
   10dbe:	b948      	cbnz	r0, 10dd4 <main+0x3c>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   10dc0:	482a      	ldr	r0, [pc, #168]	; (10e6c <main+0xd4>)
   10dc2:	f005 ffb1 	bl	16d28 <bt_conn_auth_cb_register>
		if (err) {
   10dc6:	b160      	cbz	r0, 10de2 <main+0x4a>
			printk("Failed to register authorization callbacks.\n");
   10dc8:	4829      	ldr	r0, [pc, #164]	; (10e70 <main+0xd8>)
}
   10dca:	b009      	add	sp, #36	; 0x24
   10dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			printk("Failed to register authorization info callbacks.\n");
   10dd0:	f012 bc02 	b.w	235d8 <printk>
		printk("Cannot init buttons (err: %d)\n", err);
   10dd4:	4601      	mov	r1, r0
   10dd6:	4827      	ldr	r0, [pc, #156]	; (10e74 <main+0xdc>)
   10dd8:	f012 fbfe 	bl	235d8 <printk>
		printk("Button init failed (err %d)\n", err);
   10ddc:	4826      	ldr	r0, [pc, #152]	; (10e78 <main+0xe0>)
   10dde:	4621      	mov	r1, r4
   10de0:	e7e4      	b.n	10dac <main+0x14>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
   10de2:	4826      	ldr	r0, [pc, #152]	; (10e7c <main+0xe4>)
   10de4:	f005 ffba 	bl	16d5c <bt_conn_auth_info_cb_register>
		if (err) {
   10de8:	b108      	cbz	r0, 10dee <main+0x56>
			printk("Failed to register authorization info callbacks.\n");
   10dea:	4825      	ldr	r0, [pc, #148]	; (10e80 <main+0xe8>)
   10dec:	e7ed      	b.n	10dca <main+0x32>
	err = bt_enable(NULL);
   10dee:	f004 f857 	bl	14ea0 <bt_enable>
	if (err) {
   10df2:	4601      	mov	r1, r0
   10df4:	b108      	cbz	r0, 10dfa <main+0x62>
		printk("Bluetooth init failed (err %d)\n", err);
   10df6:	4823      	ldr	r0, [pc, #140]	; (10e84 <main+0xec>)
   10df8:	e7d8      	b.n	10dac <main+0x14>
	printk("Bluetooth initialized\n");
   10dfa:	4823      	ldr	r0, [pc, #140]	; (10e88 <main+0xf0>)
   10dfc:	f012 fbec 	bl	235d8 <printk>
		settings_load();
   10e00:	f013 f881 	bl	23f06 <settings_load>
	err = bt_lbs_init(&lbs_callbacs);
   10e04:	4821      	ldr	r0, [pc, #132]	; (10e8c <main+0xf4>)
   10e06:	f001 ffa1 	bl	12d4c <bt_lbs_init>
	if (err) {
   10e0a:	4601      	mov	r1, r0
   10e0c:	b108      	cbz	r0, 10e12 <main+0x7a>
		printk("Failed to init LBS (err:%d)\n", err);
   10e0e:	4820      	ldr	r0, [pc, #128]	; (10e90 <main+0xf8>)
   10e10:	e7cc      	b.n	10dac <main+0x14>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   10e12:	4d20      	ldr	r5, [pc, #128]	; (10e94 <main+0xfc>)
   10e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10e16:	ac03      	add	r4, sp, #12
   10e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e1a:	682b      	ldr	r3, [r5, #0]
   10e1c:	6023      	str	r3, [r4, #0]
   10e1e:	2301      	movs	r3, #1
   10e20:	9300      	str	r3, [sp, #0]
   10e22:	491d      	ldr	r1, [pc, #116]	; (10e98 <main+0x100>)
   10e24:	4b1d      	ldr	r3, [pc, #116]	; (10e9c <main+0x104>)
   10e26:	2202      	movs	r2, #2
   10e28:	a803      	add	r0, sp, #12
   10e2a:	f004 fea3 	bl	15b74 <bt_le_adv_start>
	if (err) {
   10e2e:	4604      	mov	r4, r0
   10e30:	b128      	cbz	r0, 10e3e <main+0xa6>
		printk("Advertising failed to start (err %d)\n", err);
   10e32:	4601      	mov	r1, r0
   10e34:	481a      	ldr	r0, [pc, #104]	; (10ea0 <main+0x108>)
   10e36:	f012 fbcf 	bl	235d8 <printk>
}
   10e3a:	b009      	add	sp, #36	; 0x24
   10e3c:	bd30      	pop	{r4, r5, pc}
	printk("Advertising successfully started\n");
   10e3e:	4819      	ldr	r0, [pc, #100]	; (10ea4 <main+0x10c>)
   10e40:	f012 fbca 	bl	235d8 <printk>
	adc_drv_init();
   10e44:	f000 f830 	bl	10ea8 <adc_drv_init>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   10e48:	3401      	adds	r4, #1
   10e4a:	f004 0101 	and.w	r1, r4, #1
   10e4e:	2000      	movs	r0, #0
   10e50:	f00c fe2a 	bl	1daa8 <dk_set_led>
	return z_impl_k_sleep(timeout);
   10e54:	2100      	movs	r1, #0
   10e56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10e5a:	f011 f869 	bl	21f30 <z_impl_k_sleep>
	for (;;) {
   10e5e:	e7f3      	b.n	10e48 <main+0xb0>
   10e60:	00027ef1 	.word	0x00027ef1
   10e64:	00027f1c 	.word	0x00027f1c
   10e68:	00010c41 	.word	0x00010c41
   10e6c:	200005b0 	.word	0x200005b0
   10e70:	00027f73 	.word	0x00027f73
   10e74:	00027f37 	.word	0x00027f37
   10e78:	00027f56 	.word	0x00027f56
   10e7c:	200005a0 	.word	0x200005a0
   10e80:	00027fa0 	.word	0x00027fa0
   10e84:	00027fd2 	.word	0x00027fd2
   10e88:	00027ff2 	.word	0x00027ff2
   10e8c:	20000598 	.word	0x20000598
   10e90:	00028009 	.word	0x00028009
   10e94:	000275c0 	.word	0x000275c0
   10e98:	00027660 	.word	0x00027660
   10e9c:	00027658 	.word	0x00027658
   10ea0:	00028026 	.word	0x00028026
   10ea4:	0002804c 	.word	0x0002804c

00010ea8 <adc_drv_init>:
};

static const struct device *adc_dev = DEVICE_DT_GET(ADC_NODE);

void adc_drv_init( void )
{
   10ea8:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   10eaa:	4c06      	ldr	r4, [pc, #24]	; (10ec4 <adc_drv_init+0x1c>)
   10eac:	4620      	mov	r0, r4
   10eae:	f015 ff26 	bl	26cfe <z_device_is_ready>
    int err;

    if(!device_is_ready(adc_dev))
   10eb2:	b130      	cbz	r0, 10ec2 <adc_drv_init+0x1a>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   10eb4:	68a3      	ldr	r3, [r4, #8]
   10eb6:	4904      	ldr	r1, [pc, #16]	; (10ec8 <adc_drv_init+0x20>)
   10eb8:	681b      	ldr	r3, [r3, #0]
   10eba:	4620      	mov	r0, r4

    if(err != 0)
    {
        return;
    }
}
   10ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ec0:	4718      	bx	r3
   10ec2:	bd10      	pop	{r4, pc}
   10ec4:	00027248 	.word	0x00027248
   10ec8:	2000079c 	.word	0x2000079c

00010ecc <adc_drv_read>:

uint16_t adc_drv_read( void )
{
   10ecc:	b508      	push	{r3, lr}
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   10ece:	4804      	ldr	r0, [pc, #16]	; (10ee0 <adc_drv_read+0x14>)
   10ed0:	4904      	ldr	r1, [pc, #16]	; (10ee4 <adc_drv_read+0x18>)
   10ed2:	6883      	ldr	r3, [r0, #8]
   10ed4:	685b      	ldr	r3, [r3, #4]
   10ed6:	4798      	blx	r3
    int err;

    err = adc_read(adc_dev, &sequence);

    return smpl_buf[0];
   10ed8:	4b03      	ldr	r3, [pc, #12]	; (10ee8 <adc_drv_read+0x1c>)
   10eda:	8818      	ldrh	r0, [r3, #0]
   10edc:	bd08      	pop	{r3, pc}
   10ede:	bf00      	nop
   10ee0:	00027248 	.word	0x00027248
   10ee4:	200005c8 	.word	0x200005c8
   10ee8:	2000255c 	.word	0x2000255c

00010eec <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   10eec:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10eee:	4c09      	ldr	r4, [pc, #36]	; (10f14 <crc8_ccitt+0x28>)
   10ef0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   10ef2:	4291      	cmp	r1, r2
   10ef4:	d100      	bne.n	10ef8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   10ef6:	bd10      	pop	{r4, pc}
		val ^= p[i];
   10ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
   10efc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10efe:	0903      	lsrs	r3, r0, #4
   10f00:	0100      	lsls	r0, r0, #4
   10f02:	5ce3      	ldrb	r3, [r4, r3]
   10f04:	b2c0      	uxtb	r0, r0
   10f06:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10f08:	0918      	lsrs	r0, r3, #4
   10f0a:	011b      	lsls	r3, r3, #4
   10f0c:	5c20      	ldrb	r0, [r4, r0]
   10f0e:	b2db      	uxtb	r3, r3
   10f10:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   10f12:	e7ee      	b.n	10ef2 <crc8_ccitt+0x6>
   10f14:	0002808c 	.word	0x0002808c

00010f18 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   10f18:	4b01      	ldr	r3, [pc, #4]	; (10f20 <char_out+0x8>)
   10f1a:	681b      	ldr	r3, [r3, #0]
   10f1c:	4718      	bx	r3
   10f1e:	bf00      	nop
   10f20:	200005dc 	.word	0x200005dc

00010f24 <__printk_hook_install>:
	_char_out = fn;
   10f24:	4b01      	ldr	r3, [pc, #4]	; (10f2c <__printk_hook_install+0x8>)
   10f26:	6018      	str	r0, [r3, #0]
}
   10f28:	4770      	bx	lr
   10f2a:	bf00      	nop
   10f2c:	200005dc 	.word	0x200005dc

00010f30 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   10f30:	b507      	push	{r0, r1, r2, lr}
   10f32:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10f34:	2100      	movs	r1, #0
   10f36:	4602      	mov	r2, r0
   10f38:	9100      	str	r1, [sp, #0]
   10f3a:	4803      	ldr	r0, [pc, #12]	; (10f48 <vprintk+0x18>)
   10f3c:	f000 fba8 	bl	11690 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10f40:	b003      	add	sp, #12
   10f42:	f85d fb04 	ldr.w	pc, [sp], #4
   10f46:	bf00      	nop
   10f48:	00010f19 	.word	0x00010f19

00010f4c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10f4c:	b530      	push	{r4, r5, lr}
   10f4e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   10f50:	2500      	movs	r5, #0
   10f52:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   10f56:	4604      	mov	r4, r0
   10f58:	9500      	str	r5, [sp, #0]
   10f5a:	a903      	add	r1, sp, #12
   10f5c:	4805      	ldr	r0, [pc, #20]	; (10f74 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   10f5e:	9505      	str	r5, [sp, #20]
   10f60:	f000 fb96 	bl	11690 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   10f64:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   10f68:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10f6a:	bfb8      	it	lt
   10f6c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10f6e:	b007      	add	sp, #28
   10f70:	bd30      	pop	{r4, r5, pc}
   10f72:	bf00      	nop
   10f74:	000235b3 	.word	0x000235b3

00010f78 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   10f78:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
   10f7a:	b351      	cbz	r1, 10fd2 <sys_heap_free+0x5a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   10f7c:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10f7e:	1f0b      	subs	r3, r1, #4
   10f80:	1a9b      	subs	r3, r3, r2
   10f82:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10f84:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   10f88:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   10f8a:	885c      	ldrh	r4, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   10f8c:	07e0      	lsls	r0, r4, #31
   10f8e:	d408      	bmi.n	10fa2 <sys_heap_free+0x2a>
   10f90:	4910      	ldr	r1, [pc, #64]	; (10fd4 <sys_heap_free+0x5c>)
   10f92:	4811      	ldr	r0, [pc, #68]	; (10fd8 <sys_heap_free+0x60>)
   10f94:	22af      	movs	r2, #175	; 0xaf
   10f96:	f012 fd27 	bl	239e8 <assert_print>
   10f9a:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10f9c:	480d      	ldr	r0, [pc, #52]	; (10fd4 <sys_heap_free+0x5c>)
   10f9e:	f012 fd1c 	bl	239da <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   10fa2:	4610      	mov	r0, r2
   10fa4:	f012 fb3c 	bl	23620 <chunk_size>
   10fa8:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   10faa:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   10fae:	1b40      	subs	r0, r0, r5
   10fb0:	4281      	cmp	r1, r0
   10fb2:	d006      	beq.n	10fc2 <sys_heap_free+0x4a>
   10fb4:	4907      	ldr	r1, [pc, #28]	; (10fd4 <sys_heap_free+0x5c>)
   10fb6:	4808      	ldr	r0, [pc, #32]	; (10fd8 <sys_heap_free+0x60>)
   10fb8:	22b7      	movs	r2, #183	; 0xb7
   10fba:	f012 fd15 	bl	239e8 <assert_print>
   10fbe:	21b7      	movs	r1, #183	; 0xb7
   10fc0:	e7ec      	b.n	10f9c <sys_heap_free+0x24>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10fc2:	f024 0401 	bic.w	r4, r4, #1
   10fc6:	805c      	strh	r4, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   10fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
   10fcc:	4610      	mov	r0, r2
   10fce:	f012 bbe4 	b.w	2379a <free_chunk>
}
   10fd2:	bd38      	pop	{r3, r4, r5, pc}
   10fd4:	0002809c 	.word	0x0002809c
   10fd8:	000280bd 	.word	0x000280bd

00010fdc <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10fe0:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   10fe2:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   10fe4:	6806      	ldr	r6, [r0, #0]
{
   10fe6:	460f      	mov	r7, r1
   10fe8:	4614      	mov	r4, r2
	if (align != rew) {
   10fea:	d011      	beq.n	11010 <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   10fec:	f1c1 0900 	rsb	r9, r1, #0
   10ff0:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   10ff4:	464a      	mov	r2, r9
   10ff6:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10ff8:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
		gap = MIN(rew, chunk_header_bytes(h));
   10ffc:	bf28      	it	cs
   10ffe:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11000:	4219      	tst	r1, r3
   11002:	d10c      	bne.n	1101e <sys_heap_aligned_alloc+0x42>
   11004:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   11006:	b9c4      	cbnz	r4, 1103a <sys_heap_aligned_alloc+0x5e>
		return NULL;
   11008:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1100a:	4628      	mov	r0, r5
   1100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   11010:	2904      	cmp	r1, #4
   11012:	d80f      	bhi.n	11034 <sys_heap_aligned_alloc+0x58>
}
   11014:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   11018:	4611      	mov	r1, r2
   1101a:	f012 bbef 	b.w	237fc <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1101e:	492a      	ldr	r1, [pc, #168]	; (110c8 <sys_heap_aligned_alloc+0xec>)
   11020:	482a      	ldr	r0, [pc, #168]	; (110cc <sys_heap_aligned_alloc+0xf0>)
   11022:	f44f 72a2 	mov.w	r2, #324	; 0x144
   11026:	f012 fcdf 	bl	239e8 <assert_print>
   1102a:	4827      	ldr	r0, [pc, #156]	; (110c8 <sys_heap_aligned_alloc+0xec>)
   1102c:	f44f 71a2 	mov.w	r1, #324	; 0x144
   11030:	f012 fcd3 	bl	239da <assert_post_action>
		rew = 0;
   11034:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   11036:	2204      	movs	r2, #4
   11038:	e7e5      	b.n	11006 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1103a:	68b3      	ldr	r3, [r6, #8]
   1103c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   11040:	d9e2      	bls.n	11008 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11042:	f104 010b 	add.w	r1, r4, #11
   11046:	4439      	add	r1, r7
   11048:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1104a:	08c9      	lsrs	r1, r1, #3
   1104c:	4630      	mov	r0, r6
   1104e:	f012 fb3d 	bl	236cc <alloc_chunk>
	if (c0 == 0) {
   11052:	4680      	mov	r8, r0
   11054:	2800      	cmp	r0, #0
   11056:	d0d7      	beq.n	11008 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11058:	f109 0504 	add.w	r5, r9, #4
   1105c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   11060:	1e7b      	subs	r3, r7, #1
   11062:	4435      	add	r5, r6
   11064:	441d      	add	r5, r3
   11066:	427f      	negs	r7, r7
   11068:	403d      	ands	r5, r7
   1106a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1106e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11070:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11072:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11074:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11076:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1107a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1107c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11080:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   11084:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11088:	d208      	bcs.n	1109c <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c0, c);
   1108a:	4601      	mov	r1, r0
   1108c:	463a      	mov	r2, r7
   1108e:	4630      	mov	r0, r6
   11090:	f012 fb69 	bl	23766 <split_chunks>
		free_list_add(h, c0);
   11094:	4641      	mov	r1, r8
   11096:	4630      	mov	r0, r6
   11098:	f012 fac7 	bl	2362a <free_list_add>
	return c + chunk_size(h, c);
   1109c:	4639      	mov	r1, r7
   1109e:	4630      	mov	r0, r6
   110a0:	f012 fabe 	bl	23620 <chunk_size>
   110a4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   110a6:	4284      	cmp	r4, r0
   110a8:	d207      	bcs.n	110ba <sys_heap_aligned_alloc+0xde>
		split_chunks(h, c, c_end);
   110aa:	4630      	mov	r0, r6
   110ac:	4622      	mov	r2, r4
   110ae:	f012 fb5a 	bl	23766 <split_chunks>
		free_list_add(h, c_end);
   110b2:	4621      	mov	r1, r4
   110b4:	4630      	mov	r0, r6
   110b6:	f012 fab8 	bl	2362a <free_list_add>
	void *cmem = &buf[c];
   110ba:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   110be:	8873      	ldrh	r3, [r6, #2]
   110c0:	f043 0301 	orr.w	r3, r3, #1
   110c4:	8073      	strh	r3, [r6, #2]
   110c6:	e7a0      	b.n	1100a <sys_heap_aligned_alloc+0x2e>
   110c8:	0002809c 	.word	0x0002809c
   110cc:	000280bd 	.word	0x000280bd

000110d0 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   110d0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   110d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110d6:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   110d8:	d30a      	bcc.n	110f0 <sys_heap_init+0x20>
   110da:	4933      	ldr	r1, [pc, #204]	; (111a8 <sys_heap_init+0xd8>)
   110dc:	4833      	ldr	r0, [pc, #204]	; (111ac <sys_heap_init+0xdc>)
   110de:	f240 12eb 	movw	r2, #491	; 0x1eb
   110e2:	f012 fc81 	bl	239e8 <assert_print>
   110e6:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   110ea:	482f      	ldr	r0, [pc, #188]	; (111a8 <sys_heap_init+0xd8>)
   110ec:	f012 fc75 	bl	239da <assert_post_action>
   110f0:	2a04      	cmp	r2, #4
   110f2:	d808      	bhi.n	11106 <sys_heap_init+0x36>
   110f4:	492c      	ldr	r1, [pc, #176]	; (111a8 <sys_heap_init+0xd8>)
   110f6:	482d      	ldr	r0, [pc, #180]	; (111ac <sys_heap_init+0xdc>)
   110f8:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   110fc:	f012 fc74 	bl	239e8 <assert_print>
   11100:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   11104:	e7f1      	b.n	110ea <sys_heap_init+0x1a>
	bytes -= heap_footer_bytes(bytes);
   11106:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11108:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1110a:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1110c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11110:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11114:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11116:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11118:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1111c:	d808      	bhi.n	11130 <sys_heap_init+0x60>
   1111e:	4922      	ldr	r1, [pc, #136]	; (111a8 <sys_heap_init+0xd8>)
   11120:	4822      	ldr	r0, [pc, #136]	; (111ac <sys_heap_init+0xdc>)
   11122:	f240 12fb 	movw	r2, #507	; 0x1fb
   11126:	f012 fc5f 	bl	239e8 <assert_print>
   1112a:	f240 11fb 	movw	r1, #507	; 0x1fb
   1112e:	e7dc      	b.n	110ea <sys_heap_init+0x1a>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   11130:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11134:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11138:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   1113c:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1113e:	3107      	adds	r1, #7
   11140:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11142:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   11144:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11146:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   11148:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   1114c:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   1114e:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11150:	d908      	bls.n	11164 <sys_heap_init+0x94>
   11152:	4915      	ldr	r1, [pc, #84]	; (111a8 <sys_heap_init+0xd8>)
   11154:	4815      	ldr	r0, [pc, #84]	; (111ac <sys_heap_init+0xdc>)
   11156:	f44f 7203 	mov.w	r2, #524	; 0x20c
   1115a:	f012 fc45 	bl	239e8 <assert_print>
   1115e:	f44f 7103 	mov.w	r1, #524	; 0x20c
   11162:	e7c2      	b.n	110ea <sys_heap_init+0x1a>
   11164:	f100 050c 	add.w	r5, r0, #12
   11168:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1116c:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   11170:	42b5      	cmp	r5, r6
   11172:	d1fb      	bne.n	1116c <sys_heap_init+0x9c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11174:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11176:	f045 0501 	orr.w	r5, r5, #1
   1117a:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   1117c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11180:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11182:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   11184:	8004      	strh	r4, [r0, #0]
   11186:	8077      	strh	r7, [r6, #2]
   11188:	1886      	adds	r6, r0, r2
   1118a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1118e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   11192:	8074      	strh	r4, [r6, #2]
   11194:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11196:	885a      	ldrh	r2, [r3, #2]
   11198:	f042 0201 	orr.w	r2, r2, #1
   1119c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1119e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   111a2:	f012 ba42 	b.w	2362a <free_list_add>
   111a6:	bf00      	nop
   111a8:	0002809c 	.word	0x0002809c
   111ac:	000280bd 	.word	0x000280bd

000111b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   111b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111b4:	4604      	mov	r4, r0
   111b6:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   111b8:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   111ba:	0719      	lsls	r1, r3, #28
{
   111bc:	4616      	mov	r6, r2
	if (processing) {
   111be:	d412      	bmi.n	111e6 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   111c0:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   111c2:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   111c6:	d162      	bne.n	1128e <process_event+0xde>
			evt = process_recheck(mgr);
   111c8:	4620      	mov	r0, r4
   111ca:	f012 fb40 	bl	2384e <process_recheck>
		}

		if (evt == EVT_NOP) {
   111ce:	b188      	cbz	r0, 111f4 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   111d0:	3801      	subs	r0, #1
   111d2:	2804      	cmp	r0, #4
   111d4:	f200 8121 	bhi.w	1141a <process_event+0x26a>
   111d8:	e8df f010 	tbh	[pc, r0, lsl #1]
   111dc:	011f0059 	.word	0x011f0059
   111e0:	00c4007e 	.word	0x00c4007e
   111e4:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
   111e6:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   111e8:	bf0c      	ite	eq
   111ea:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   111ee:	f043 0120 	orrne.w	r1, r3, #32
   111f2:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   111f4:	f104 0014 	add.w	r0, r4, #20
   111f8:	f00e ffca 	bl	20190 <z_spin_unlock_valid>
   111fc:	2800      	cmp	r0, #0
   111fe:	f000 80a9 	beq.w	11354 <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11202:	f386 8811 	msr	BASEPRI, r6
   11206:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1120a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1120e:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11212:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11214:	2801      	cmp	r0, #1
   11216:	d81e      	bhi.n	11256 <process_event+0xa6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11218:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   1121a:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1121c:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   1121e:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11222:	d114      	bne.n	1124e <process_event+0x9e>
		*clients = mgr->clients;
   11224:	463a      	mov	r2, r7
   11226:	e003      	b.n	11230 <process_event+0x80>
				mgr->refs += 1U;
   11228:	8be0      	ldrh	r0, [r4, #30]
   1122a:	3001      	adds	r0, #1
   1122c:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1122e:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11230:	2a00      	cmp	r2, #0
   11232:	d1f9      	bne.n	11228 <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11234:	f023 0307 	bic.w	r3, r3, #7
   11238:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1123c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1123e:	4620      	mov	r0, r4
   11240:	f012 fb05 	bl	2384e <process_recheck>
   11244:	b390      	cbz	r0, 112ac <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11246:	f042 0220 	orr.w	r2, r2, #32
   1124a:	83a2      	strh	r2, [r4, #28]
   1124c:	e02e      	b.n	112ac <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1124e:	f023 0307 	bic.w	r3, r3, #7
   11252:	b29a      	uxth	r2, r3
}
   11254:	e7f2      	b.n	1123c <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11256:	2a04      	cmp	r2, #4
   11258:	d133      	bne.n	112c2 <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1125a:	f023 0307 	bic.w	r3, r3, #7
   1125e:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11260:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11262:	4620      	mov	r0, r4
   11264:	f012 faf3 	bl	2384e <process_recheck>
   11268:	b110      	cbz	r0, 11270 <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1126a:	f042 0220 	orr.w	r2, r2, #32
   1126e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11270:	8ba3      	ldrh	r3, [r4, #28]
   11272:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11276:	4589      	cmp	r9, r1
   11278:	f040 80d8 	bne.w	1142c <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1127c:	8ba1      	ldrh	r1, [r4, #28]
   1127e:	06ca      	lsls	r2, r1, #27
   11280:	f140 811e 	bpl.w	114c0 <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11284:	f021 0310 	bic.w	r3, r1, #16
   11288:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1128a:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   1128e:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11292:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   11294:	f1b8 0f00 	cmp.w	r8, #0
   11298:	dab9      	bge.n	1120e <process_event+0x5e>
	list->head = NULL;
   1129a:	2200      	movs	r2, #0
		*clients = mgr->clients;
   1129c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1129e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   112a2:	e9c4 2200 	strd	r2, r2, [r4]
   112a6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   112aa:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   112ac:	8ba3      	ldrh	r3, [r4, #28]
   112ae:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   112b2:	4589      	cmp	r9, r1
   112b4:	f040 80bb 	bne.w	1142e <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
   112b8:	2f00      	cmp	r7, #0
   112ba:	d0df      	beq.n	1127c <process_event+0xcc>
   112bc:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   112be:	46aa      	mov	sl, r5
   112c0:	e03e      	b.n	11340 <process_event+0x190>
		__ASSERT_NO_MSG(false);
   112c2:	4984      	ldr	r1, [pc, #528]	; (114d4 <process_event+0x324>)
   112c4:	4884      	ldr	r0, [pc, #528]	; (114d8 <process_event+0x328>)
   112c6:	f240 121b 	movw	r2, #283	; 0x11b
   112ca:	f012 fb8d 	bl	239e8 <assert_print>
   112ce:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   112d2:	4880      	ldr	r0, [pc, #512]	; (114d4 <process_event+0x324>)
   112d4:	f012 fb81 	bl	239da <assert_post_action>
   112d8:	b141      	cbz	r1, 112ec <process_event+0x13c>
   112da:	497e      	ldr	r1, [pc, #504]	; (114d4 <process_event+0x324>)
   112dc:	487e      	ldr	r0, [pc, #504]	; (114d8 <process_event+0x328>)
   112de:	f44f 72ab 	mov.w	r2, #342	; 0x156
   112e2:	f012 fb81 	bl	239e8 <assert_print>
   112e6:	f44f 71ab 	mov.w	r1, #342	; 0x156
   112ea:	e7f2      	b.n	112d2 <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   112ec:	6823      	ldr	r3, [r4, #0]
   112ee:	b943      	cbnz	r3, 11302 <process_event+0x152>
   112f0:	4978      	ldr	r1, [pc, #480]	; (114d4 <process_event+0x324>)
   112f2:	4879      	ldr	r0, [pc, #484]	; (114d8 <process_event+0x328>)
   112f4:	f240 1257 	movw	r2, #343	; 0x157
   112f8:	f012 fb76 	bl	239e8 <assert_print>
   112fc:	f240 1157 	movw	r1, #343	; 0x157
   11300:	e7e7      	b.n	112d2 <process_event+0x122>
			transit = mgr->transitions->start;
   11302:	6923      	ldr	r3, [r4, #16]
   11304:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   11306:	b945      	cbnz	r5, 1131a <process_event+0x16a>
   11308:	4972      	ldr	r1, [pc, #456]	; (114d4 <process_event+0x324>)
   1130a:	4873      	ldr	r0, [pc, #460]	; (114d8 <process_event+0x328>)
   1130c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   11310:	f012 fb6a 	bl	239e8 <assert_print>
   11314:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   11318:	e7db      	b.n	112d2 <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1131a:	8ba3      	ldrh	r3, [r4, #28]
   1131c:	f023 0307 	bic.w	r3, r3, #7
   11320:	f043 0306 	orr.w	r3, r3, #6
   11324:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11326:	83a3      	strh	r3, [r4, #28]
   11328:	460f      	mov	r7, r1
		res = 0;
   1132a:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1132c:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   11330:	68a2      	ldr	r2, [r4, #8]
   11332:	2a00      	cmp	r2, #0
   11334:	d17d      	bne.n	11432 <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
   11336:	2f00      	cmp	r7, #0
   11338:	d17e      	bne.n	11438 <process_event+0x288>
		    || (transit != NULL)) {
   1133a:	2d00      	cmp	r5, #0
   1133c:	d09e      	beq.n	1127c <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1133e:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11340:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   11344:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   11348:	83a3      	strh	r3, [r4, #28]
   1134a:	4658      	mov	r0, fp
   1134c:	f00e ff20 	bl	20190 <z_spin_unlock_valid>
   11350:	2800      	cmp	r0, #0
   11352:	d173      	bne.n	1143c <process_event+0x28c>
   11354:	4961      	ldr	r1, [pc, #388]	; (114dc <process_event+0x32c>)
   11356:	4860      	ldr	r0, [pc, #384]	; (114d8 <process_event+0x328>)
   11358:	22c2      	movs	r2, #194	; 0xc2
   1135a:	f012 fb45 	bl	239e8 <assert_print>
   1135e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11360:	485e      	ldr	r0, [pc, #376]	; (114dc <process_event+0x32c>)
   11362:	e7b7      	b.n	112d4 <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   11364:	2902      	cmp	r1, #2
   11366:	d008      	beq.n	1137a <process_event+0x1ca>
   11368:	495a      	ldr	r1, [pc, #360]	; (114d4 <process_event+0x324>)
   1136a:	485b      	ldr	r0, [pc, #364]	; (114d8 <process_event+0x328>)
   1136c:	f240 125d 	movw	r2, #349	; 0x15d
   11370:	f012 fb3a 	bl	239e8 <assert_print>
   11374:	f240 115d 	movw	r1, #349	; 0x15d
   11378:	e7ab      	b.n	112d2 <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1137a:	8be7      	ldrh	r7, [r4, #30]
   1137c:	b147      	cbz	r7, 11390 <process_event+0x1e0>
   1137e:	4955      	ldr	r1, [pc, #340]	; (114d4 <process_event+0x324>)
   11380:	4855      	ldr	r0, [pc, #340]	; (114d8 <process_event+0x328>)
   11382:	f44f 72af 	mov.w	r2, #350	; 0x15e
   11386:	f012 fb2f 	bl	239e8 <assert_print>
   1138a:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1138e:	e7a0      	b.n	112d2 <process_event+0x122>
			transit = mgr->transitions->stop;
   11390:	6923      	ldr	r3, [r4, #16]
   11392:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   11394:	b945      	cbnz	r5, 113a8 <process_event+0x1f8>
   11396:	494f      	ldr	r1, [pc, #316]	; (114d4 <process_event+0x324>)
   11398:	484f      	ldr	r0, [pc, #316]	; (114d8 <process_event+0x328>)
   1139a:	f240 1261 	movw	r2, #353	; 0x161
   1139e:	f012 fb23 	bl	239e8 <assert_print>
   113a2:	f240 1161 	movw	r1, #353	; 0x161
   113a6:	e794      	b.n	112d2 <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113a8:	8ba3      	ldrh	r3, [r4, #28]
   113aa:	f023 0307 	bic.w	r3, r3, #7
   113ae:	f043 0304 	orr.w	r3, r3, #4
   113b2:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   113b4:	83a3      	strh	r3, [r4, #28]
		res = 0;
   113b6:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   113b8:	f04f 0904 	mov.w	r9, #4
   113bc:	e7b8      	b.n	11330 <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   113be:	2901      	cmp	r1, #1
   113c0:	d008      	beq.n	113d4 <process_event+0x224>
   113c2:	4944      	ldr	r1, [pc, #272]	; (114d4 <process_event+0x324>)
   113c4:	4844      	ldr	r0, [pc, #272]	; (114d8 <process_event+0x328>)
   113c6:	f44f 72b2 	mov.w	r2, #356	; 0x164
   113ca:	f012 fb0d 	bl	239e8 <assert_print>
   113ce:	f44f 71b2 	mov.w	r1, #356	; 0x164
   113d2:	e77e      	b.n	112d2 <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   113d4:	6823      	ldr	r3, [r4, #0]
   113d6:	b943      	cbnz	r3, 113ea <process_event+0x23a>
   113d8:	493e      	ldr	r1, [pc, #248]	; (114d4 <process_event+0x324>)
   113da:	483f      	ldr	r0, [pc, #252]	; (114d8 <process_event+0x328>)
   113dc:	f240 1265 	movw	r2, #357	; 0x165
   113e0:	f012 fb02 	bl	239e8 <assert_print>
   113e4:	f240 1165 	movw	r1, #357	; 0x165
   113e8:	e773      	b.n	112d2 <process_event+0x122>
			transit = mgr->transitions->reset;
   113ea:	6923      	ldr	r3, [r4, #16]
   113ec:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   113ee:	b945      	cbnz	r5, 11402 <process_event+0x252>
   113f0:	4938      	ldr	r1, [pc, #224]	; (114d4 <process_event+0x324>)
   113f2:	4839      	ldr	r0, [pc, #228]	; (114d8 <process_event+0x328>)
   113f4:	f44f 72b4 	mov.w	r2, #360	; 0x168
   113f8:	f012 faf6 	bl	239e8 <assert_print>
   113fc:	f44f 71b4 	mov.w	r1, #360	; 0x168
   11400:	e767      	b.n	112d2 <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11402:	8ba3      	ldrh	r3, [r4, #28]
   11404:	f023 0307 	bic.w	r3, r3, #7
   11408:	f043 0305 	orr.w	r3, r3, #5
   1140c:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1140e:	2700      	movs	r7, #0
   11410:	83a3      	strh	r3, [r4, #28]
		res = 0;
   11412:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11414:	f04f 0905 	mov.w	r9, #5
   11418:	e78a      	b.n	11330 <process_event+0x180>
			__ASSERT_NO_MSG(false);
   1141a:	492e      	ldr	r1, [pc, #184]	; (114d4 <process_event+0x324>)
   1141c:	482e      	ldr	r0, [pc, #184]	; (114d8 <process_event+0x328>)
   1141e:	f240 126b 	movw	r2, #363	; 0x16b
   11422:	f012 fae1 	bl	239e8 <assert_print>
   11426:	f240 116b 	movw	r1, #363	; 0x16b
   1142a:	e752      	b.n	112d2 <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
   1142c:	2700      	movs	r7, #0
   1142e:	2500      	movs	r5, #0
   11430:	e77e      	b.n	11330 <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11432:	f04f 0a01 	mov.w	sl, #1
   11436:	e783      	b.n	11340 <process_event+0x190>
   11438:	4692      	mov	sl, r2
   1143a:	e781      	b.n	11340 <process_event+0x190>
   1143c:	f386 8811 	msr	BASEPRI, r6
   11440:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11444:	f1ba 0f00 	cmp.w	sl, #0
   11448:	d117      	bne.n	1147a <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
   1144a:	bb4f      	cbnz	r7, 114a0 <process_event+0x2f0>
			if (transit != NULL) {
   1144c:	b115      	cbz	r5, 11454 <process_event+0x2a4>
				transit(mgr, transition_complete);
   1144e:	4924      	ldr	r1, [pc, #144]	; (114e0 <process_event+0x330>)
   11450:	4620      	mov	r0, r4
   11452:	47a8      	blx	r5
	__asm__ volatile(
   11454:	f04f 0340 	mov.w	r3, #64	; 0x40
   11458:	f3ef 8611 	mrs	r6, BASEPRI
   1145c:	f383 8812 	msr	BASEPRI_MAX, r3
   11460:	f3bf 8f6f 	isb	sy
   11464:	4658      	mov	r0, fp
   11466:	f00e fe85 	bl	20174 <z_spin_lock_valid>
   1146a:	bb08      	cbnz	r0, 114b0 <process_event+0x300>
   1146c:	491b      	ldr	r1, [pc, #108]	; (114dc <process_event+0x32c>)
   1146e:	481a      	ldr	r0, [pc, #104]	; (114d8 <process_event+0x328>)
   11470:	2294      	movs	r2, #148	; 0x94
   11472:	f012 fab9 	bl	239e8 <assert_print>
   11476:	2194      	movs	r1, #148	; 0x94
   11478:	e772      	b.n	11360 <process_event+0x1b0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1147a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1147c:	2900      	cmp	r1, #0
   1147e:	d0e4      	beq.n	1144a <process_event+0x29a>
	return node->next;
   11480:	680e      	ldr	r6, [r1, #0]
   11482:	2900      	cmp	r1, #0
   11484:	d0e1      	beq.n	1144a <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
   11486:	f8d1 a004 	ldr.w	sl, [r1, #4]
   1148a:	4643      	mov	r3, r8
   1148c:	464a      	mov	r2, r9
   1148e:	4620      	mov	r0, r4
   11490:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11492:	b11e      	cbz	r6, 1149c <process_event+0x2ec>
   11494:	6833      	ldr	r3, [r6, #0]
   11496:	4631      	mov	r1, r6
   11498:	461e      	mov	r6, r3
   1149a:	e7f2      	b.n	11482 <process_event+0x2d2>
   1149c:	4633      	mov	r3, r6
   1149e:	e7fa      	b.n	11496 <process_event+0x2e6>
   114a0:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   114a2:	4643      	mov	r3, r8
   114a4:	464a      	mov	r2, r9
   114a6:	4620      	mov	r0, r4
   114a8:	683f      	ldr	r7, [r7, #0]
   114aa:	f012 f9fc 	bl	238a6 <notify_one>
   114ae:	e7cc      	b.n	1144a <process_event+0x29a>
	z_spin_lock_set_owner(l);
   114b0:	4658      	mov	r0, fp
   114b2:	f00e fe7d 	bl	201b0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   114b6:	8ba3      	ldrh	r3, [r4, #28]
   114b8:	f023 0308 	bic.w	r3, r3, #8
   114bc:	83a3      	strh	r3, [r4, #28]
   114be:	e6dd      	b.n	1127c <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   114c0:	068b      	lsls	r3, r1, #26
   114c2:	f57f ae97 	bpl.w	111f4 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   114c6:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   114ca:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   114cc:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   114d0:	e67a      	b.n	111c8 <process_event+0x18>
   114d2:	bf00      	nop
   114d4:	000280d5 	.word	0x000280d5
   114d8:	000280bd 	.word	0x000280bd
   114dc:	000280f7 	.word	0x000280f7
   114e0:	000114e5 	.word	0x000114e5

000114e4 <transition_complete>:
{
   114e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114e6:	4604      	mov	r4, r0
   114e8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   114ea:	f100 0614 	add.w	r6, r0, #20
   114ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   114f2:	f3ef 8711 	mrs	r7, BASEPRI
   114f6:	f383 8812 	msr	BASEPRI_MAX, r3
   114fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114fe:	4630      	mov	r0, r6
   11500:	f00e fe38 	bl	20174 <z_spin_lock_valid>
   11504:	b940      	cbnz	r0, 11518 <transition_complete+0x34>
   11506:	490a      	ldr	r1, [pc, #40]	; (11530 <transition_complete+0x4c>)
   11508:	480a      	ldr	r0, [pc, #40]	; (11534 <transition_complete+0x50>)
   1150a:	2294      	movs	r2, #148	; 0x94
   1150c:	f012 fa6c 	bl	239e8 <assert_print>
   11510:	4807      	ldr	r0, [pc, #28]	; (11530 <transition_complete+0x4c>)
   11512:	2194      	movs	r1, #148	; 0x94
   11514:	f012 fa61 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   11518:	4630      	mov	r0, r6
   1151a:	f00e fe49 	bl	201b0 <z_spin_lock_set_owner>
	mgr->last_res = res;
   1151e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11520:	463a      	mov	r2, r7
   11522:	4620      	mov	r0, r4
   11524:	2101      	movs	r1, #1
}
   11526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1152a:	f7ff be41 	b.w	111b0 <process_event>
   1152e:	bf00      	nop
   11530:	000280f7 	.word	0x000280f7
   11534:	000280bd 	.word	0x000280bd

00011538 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1153c:	4604      	mov	r4, r0
   1153e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11540:	f012 f9a1 	bl	23886 <validate_args>

	if (rv < 0) {
   11544:	1e05      	subs	r5, r0, #0
   11546:	db5c      	blt.n	11602 <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11548:	f104 0914 	add.w	r9, r4, #20
   1154c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11550:	f3ef 8a11 	mrs	sl, BASEPRI
   11554:	f383 8812 	msr	BASEPRI_MAX, r3
   11558:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1155c:	4648      	mov	r0, r9
   1155e:	f00e fe09 	bl	20174 <z_spin_lock_valid>
   11562:	4680      	mov	r8, r0
   11564:	b938      	cbnz	r0, 11576 <onoff_request+0x3e>
   11566:	4932      	ldr	r1, [pc, #200]	; (11630 <onoff_request+0xf8>)
   11568:	4832      	ldr	r0, [pc, #200]	; (11634 <onoff_request+0xfc>)
   1156a:	2294      	movs	r2, #148	; 0x94
   1156c:	f012 fa3c 	bl	239e8 <assert_print>
   11570:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11572:	482f      	ldr	r0, [pc, #188]	; (11630 <onoff_request+0xf8>)
   11574:	e03a      	b.n	115ec <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
   11576:	4648      	mov	r0, r9
   11578:	f00e fe1a 	bl	201b0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1157c:	8be3      	ldrh	r3, [r4, #30]
   1157e:	8ba6      	ldrh	r6, [r4, #28]
   11580:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11584:	4293      	cmp	r3, r2
   11586:	f006 0607 	and.w	r6, r6, #7
   1158a:	d03d      	beq.n	11608 <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1158c:	2e02      	cmp	r6, #2
   1158e:	d10e      	bne.n	115ae <onoff_request+0x76>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   11590:	3301      	adds	r3, #1
   11592:	83e3      	strh	r3, [r4, #30]
	rv = state;
   11594:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11596:	4648      	mov	r0, r9
   11598:	f00e fdfa 	bl	20190 <z_spin_unlock_valid>
   1159c:	2800      	cmp	r0, #0
   1159e:	d139      	bne.n	11614 <onoff_request+0xdc>
   115a0:	4923      	ldr	r1, [pc, #140]	; (11630 <onoff_request+0xf8>)
   115a2:	4824      	ldr	r0, [pc, #144]	; (11634 <onoff_request+0xfc>)
   115a4:	22c2      	movs	r2, #194	; 0xc2
   115a6:	f012 fa1f 	bl	239e8 <assert_print>
   115aa:	21c2      	movs	r1, #194	; 0xc2
   115ac:	e7e1      	b.n	11572 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   115ae:	2e06      	cmp	r6, #6
   115b0:	d813      	bhi.n	115da <onoff_request+0xa2>
   115b2:	e8df f006 	tbb	[pc, r6]
   115b6:	2c09      	.short	0x2c09
   115b8:	04091212 	.word	0x04091212
   115bc:	09          	.byte	0x09
   115bd:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   115be:	f06f 0585 	mvn.w	r5, #133	; 0x85
   115c2:	f04f 0800 	mov.w	r8, #0
   115c6:	e7e6      	b.n	11596 <onoff_request+0x5e>
	parent->next = child;
   115c8:	2300      	movs	r3, #0
   115ca:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   115cc:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   115ce:	b97b      	cbnz	r3, 115f0 <onoff_request+0xb8>
	list->head = node;
   115d0:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   115d4:	b17e      	cbz	r6, 115f6 <onoff_request+0xbe>
	rv = state;
   115d6:	4635      	mov	r5, r6
   115d8:	e7f3      	b.n	115c2 <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   115da:	4917      	ldr	r1, [pc, #92]	; (11638 <onoff_request+0x100>)
   115dc:	4815      	ldr	r0, [pc, #84]	; (11634 <onoff_request+0xfc>)
   115de:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   115e2:	f012 fa01 	bl	239e8 <assert_print>
   115e6:	4814      	ldr	r0, [pc, #80]	; (11638 <onoff_request+0x100>)
   115e8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   115ec:	f012 f9f5 	bl	239da <assert_post_action>
	parent->next = child;
   115f0:	601f      	str	r7, [r3, #0]
	list->tail = node;
   115f2:	6067      	str	r7, [r4, #4]
}
   115f4:	e7ee      	b.n	115d4 <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
   115f6:	4652      	mov	r2, sl
   115f8:	2102      	movs	r1, #2
   115fa:	4620      	mov	r0, r4
   115fc:	f7ff fdd8 	bl	111b0 <process_event>
   11600:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   11602:	4628      	mov	r0, r5
   11604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   11608:	f06f 050a 	mvn.w	r5, #10
   1160c:	e7d9      	b.n	115c2 <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
   1160e:	f06f 0504 	mvn.w	r5, #4
   11612:	e7d6      	b.n	115c2 <onoff_request+0x8a>
	__asm__ volatile(
   11614:	f38a 8811 	msr	BASEPRI, sl
   11618:	f3bf 8f6f 	isb	sy
		if (notify) {
   1161c:	f1b8 0f00 	cmp.w	r8, #0
   11620:	d0ef      	beq.n	11602 <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   11622:	2300      	movs	r3, #0
   11624:	4632      	mov	r2, r6
   11626:	4639      	mov	r1, r7
   11628:	4620      	mov	r0, r4
   1162a:	f012 f93c 	bl	238a6 <notify_one>
   1162e:	e7e8      	b.n	11602 <onoff_request+0xca>
   11630:	000280f7 	.word	0x000280f7
   11634:	000280bd 	.word	0x000280bd
   11638:	000280d5 	.word	0x000280d5

0001163c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1163c:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1163e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11640:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   11642:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   11646:	2a02      	cmp	r2, #2
{
   11648:	4603      	mov	r3, r0
	switch (method) {
   1164a:	d00a      	beq.n	11662 <sys_notify_finalize+0x26>
   1164c:	2a03      	cmp	r2, #3
   1164e:	f04f 0100 	mov.w	r1, #0
   11652:	d003      	beq.n	1165c <sys_notify_finalize+0x20>
   11654:	2a01      	cmp	r2, #1
   11656:	d10a      	bne.n	1166e <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11658:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1165a:	e006      	b.n	1166a <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   1165c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1165e:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11660:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   11662:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11664:	2200      	movs	r2, #0
   11666:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11668:	b950      	cbnz	r0, 11680 <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
   1166a:	2000      	movs	r0, #0
   1166c:	e7f8      	b.n	11660 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1166e:	4906      	ldr	r1, [pc, #24]	; (11688 <sys_notify_finalize+0x4c>)
   11670:	4806      	ldr	r0, [pc, #24]	; (1168c <sys_notify_finalize+0x50>)
   11672:	2245      	movs	r2, #69	; 0x45
   11674:	f012 f9b8 	bl	239e8 <assert_print>
   11678:	4803      	ldr	r0, [pc, #12]	; (11688 <sys_notify_finalize+0x4c>)
   1167a:	2145      	movs	r1, #69	; 0x45
   1167c:	f012 f9ad 	bl	239da <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11680:	f011 fb34 	bl	22cec <z_impl_k_poll_signal_raise>
   11684:	e7f1      	b.n	1166a <sys_notify_finalize+0x2e>
   11686:	bf00      	nop
   11688:	00028124 	.word	0x00028124
   1168c:	000280bd 	.word	0x000280bd

00011690 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11694:	4681      	mov	r9, r0
   11696:	b095      	sub	sp, #84	; 0x54
   11698:	468b      	mov	fp, r1
   1169a:	4617      	mov	r7, r2
   1169c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1169e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   116a0:	7838      	ldrb	r0, [r7, #0]
   116a2:	b908      	cbnz	r0, 116a8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   116a4:	4628      	mov	r0, r5
   116a6:	e358      	b.n	11d5a <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   116a8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   116aa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   116ac:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   116ae:	d006      	beq.n	116be <z_cbvprintf_impl+0x2e>
			OUTC('%');
   116b0:	4659      	mov	r1, fp
   116b2:	47c8      	blx	r9
   116b4:	2800      	cmp	r0, #0
   116b6:	f2c0 8350 	blt.w	11d5a <z_cbvprintf_impl+0x6ca>
   116ba:	3501      	adds	r5, #1
		if (bps == NULL) {
   116bc:	e1fb      	b.n	11ab6 <z_cbvprintf_impl+0x426>
		} state = {
   116be:	2218      	movs	r2, #24
   116c0:	2100      	movs	r1, #0
   116c2:	a80e      	add	r0, sp, #56	; 0x38
   116c4:	f013 f81e 	bl	24704 <memset>
	if (*sp == '%') {
   116c8:	787b      	ldrb	r3, [r7, #1]
   116ca:	2b25      	cmp	r3, #37	; 0x25
   116cc:	d07d      	beq.n	117ca <z_cbvprintf_impl+0x13a>
   116ce:	2300      	movs	r3, #0
   116d0:	1c78      	adds	r0, r7, #1
   116d2:	4698      	mov	r8, r3
   116d4:	469e      	mov	lr, r3
   116d6:	469c      	mov	ip, r3
   116d8:	461e      	mov	r6, r3
   116da:	4601      	mov	r1, r0
		switch (*sp) {
   116dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   116e0:	2a2b      	cmp	r2, #43	; 0x2b
   116e2:	f000 80a1 	beq.w	11828 <z_cbvprintf_impl+0x198>
   116e6:	f200 8098 	bhi.w	1181a <z_cbvprintf_impl+0x18a>
   116ea:	2a20      	cmp	r2, #32
   116ec:	f000 809f 	beq.w	1182e <z_cbvprintf_impl+0x19e>
   116f0:	2a23      	cmp	r2, #35	; 0x23
   116f2:	f000 809f 	beq.w	11834 <z_cbvprintf_impl+0x1a4>
   116f6:	b12b      	cbz	r3, 11704 <z_cbvprintf_impl+0x74>
   116f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   116fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11700:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11704:	f1b8 0f00 	cmp.w	r8, #0
   11708:	d005      	beq.n	11716 <z_cbvprintf_impl+0x86>
   1170a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1170e:	f043 0320 	orr.w	r3, r3, #32
   11712:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11716:	f1be 0f00 	cmp.w	lr, #0
   1171a:	d005      	beq.n	11728 <z_cbvprintf_impl+0x98>
   1171c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11720:	f043 0310 	orr.w	r3, r3, #16
   11724:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11728:	f1bc 0f00 	cmp.w	ip, #0
   1172c:	d005      	beq.n	1173a <z_cbvprintf_impl+0xaa>
   1172e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11732:	f043 0308 	orr.w	r3, r3, #8
   11736:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1173a:	b12e      	cbz	r6, 11748 <z_cbvprintf_impl+0xb8>
   1173c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11740:	f043 0304 	orr.w	r3, r3, #4
   11744:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   11748:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1174c:	f003 0044 	and.w	r0, r3, #68	; 0x44
   11750:	2844      	cmp	r0, #68	; 0x44
   11752:	d103      	bne.n	1175c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   11754:	f36f 1386 	bfc	r3, #6, #1
   11758:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   1175c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   11760:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   11762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11766:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   1176a:	d17f      	bne.n	1186c <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   1176c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11770:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   11774:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   11776:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   1177a:	781a      	ldrb	r2, [r3, #0]
   1177c:	2a2e      	cmp	r2, #46	; 0x2e
   1177e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11782:	bf0c      	ite	eq
   11784:	2101      	moveq	r1, #1
   11786:	2100      	movne	r1, #0
   11788:	f361 0241 	bfi	r2, r1, #1, #1
   1178c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   11790:	d178      	bne.n	11884 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   11792:	785a      	ldrb	r2, [r3, #1]
   11794:	2a2a      	cmp	r2, #42	; 0x2a
   11796:	d06e      	beq.n	11876 <z_cbvprintf_impl+0x1e6>
	++sp;
   11798:	3301      	adds	r3, #1
	size_t val = 0;
   1179a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1179c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   117a0:	4619      	mov	r1, r3
   117a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   117a6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   117aa:	2e09      	cmp	r6, #9
   117ac:	f240 8095 	bls.w	118da <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   117b0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   117b4:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   117b6:	f3c1 0040 	ubfx	r0, r1, #1, #1
   117ba:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   117be:	460a      	mov	r2, r1
   117c0:	f360 0241 	bfi	r2, r0, #1, #1
   117c4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   117c8:	e05c      	b.n	11884 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   117ca:	1cba      	adds	r2, r7, #2
   117cc:	9203      	str	r2, [sp, #12]
   117ce:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   117d2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   117d6:	07da      	lsls	r2, r3, #31
   117d8:	f140 812e 	bpl.w	11a38 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   117dc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   117e0:	f1b8 0f00 	cmp.w	r8, #0
   117e4:	da07      	bge.n	117f6 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   117e6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   117ea:	f042 0204 	orr.w	r2, r2, #4
   117ee:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   117f2:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   117f6:	075e      	lsls	r6, r3, #29
   117f8:	f140 8127 	bpl.w	11a4a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   117fc:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   11800:	f1ba 0f00 	cmp.w	sl, #0
   11804:	f280 8126 	bge.w	11a54 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   11808:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1180c:	f36f 0341 	bfc	r3, #1, #1
   11810:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   11814:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   11818:	e11c      	b.n	11a54 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   1181a:	2a2d      	cmp	r2, #45	; 0x2d
   1181c:	d00d      	beq.n	1183a <z_cbvprintf_impl+0x1aa>
   1181e:	2a30      	cmp	r2, #48	; 0x30
   11820:	f47f af69 	bne.w	116f6 <z_cbvprintf_impl+0x66>
   11824:	2301      	movs	r3, #1
	} while (loop);
   11826:	e758      	b.n	116da <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   11828:	f04f 0c01 	mov.w	ip, #1
   1182c:	e755      	b.n	116da <z_cbvprintf_impl+0x4a>
   1182e:	f04f 0e01 	mov.w	lr, #1
   11832:	e752      	b.n	116da <z_cbvprintf_impl+0x4a>
   11834:	f04f 0801 	mov.w	r8, #1
   11838:	e74f      	b.n	116da <z_cbvprintf_impl+0x4a>
   1183a:	2601      	movs	r6, #1
   1183c:	e74d      	b.n	116da <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   1183e:	fb0e 6202 	mla	r2, lr, r2, r6
   11842:	3a30      	subs	r2, #48	; 0x30
   11844:	4603      	mov	r3, r0
   11846:	4618      	mov	r0, r3
   11848:	f810 6b01 	ldrb.w	r6, [r0], #1
   1184c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11850:	f1bc 0f09 	cmp.w	ip, #9
   11854:	d9f3      	bls.n	1183e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   11856:	4299      	cmp	r1, r3
   11858:	d08f      	beq.n	1177a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1185a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   1185e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   11860:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   11862:	f362 0141 	bfi	r1, r2, #1, #1
   11866:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   1186a:	e786      	b.n	1177a <z_cbvprintf_impl+0xea>
   1186c:	460b      	mov	r3, r1
	size_t val = 0;
   1186e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11870:	f04f 0e0a 	mov.w	lr, #10
   11874:	e7e7      	b.n	11846 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   11876:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1187a:	f042 0204 	orr.w	r2, r2, #4
   1187e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   11882:	3302      	adds	r3, #2
	switch (*sp) {
   11884:	781a      	ldrb	r2, [r3, #0]
   11886:	2a6c      	cmp	r2, #108	; 0x6c
   11888:	d047      	beq.n	1191a <z_cbvprintf_impl+0x28a>
   1188a:	d82b      	bhi.n	118e4 <z_cbvprintf_impl+0x254>
   1188c:	2a68      	cmp	r2, #104	; 0x68
   1188e:	d031      	beq.n	118f4 <z_cbvprintf_impl+0x264>
   11890:	2a6a      	cmp	r2, #106	; 0x6a
   11892:	d04b      	beq.n	1192c <z_cbvprintf_impl+0x29c>
   11894:	2a4c      	cmp	r2, #76	; 0x4c
   11896:	d051      	beq.n	1193c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   11898:	461a      	mov	r2, r3
   1189a:	f812 3b01 	ldrb.w	r3, [r2], #1
   1189e:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   118a0:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   118a2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   118a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   118aa:	f200 80be 	bhi.w	11a2a <z_cbvprintf_impl+0x39a>
   118ae:	2b6d      	cmp	r3, #109	; 0x6d
   118b0:	d851      	bhi.n	11956 <z_cbvprintf_impl+0x2c6>
   118b2:	2b69      	cmp	r3, #105	; 0x69
   118b4:	f200 80b9 	bhi.w	11a2a <z_cbvprintf_impl+0x39a>
   118b8:	2b57      	cmp	r3, #87	; 0x57
   118ba:	d867      	bhi.n	1198c <z_cbvprintf_impl+0x2fc>
   118bc:	2b41      	cmp	r3, #65	; 0x41
   118be:	d003      	beq.n	118c8 <z_cbvprintf_impl+0x238>
   118c0:	3b45      	subs	r3, #69	; 0x45
   118c2:	2b02      	cmp	r3, #2
   118c4:	f200 80b1 	bhi.w	11a2a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   118c8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   118cc:	2204      	movs	r2, #4
   118ce:	f362 0302 	bfi	r3, r2, #0, #3
   118d2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   118d6:	2301      	movs	r3, #1
			break;
   118d8:	e073      	b.n	119c2 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   118da:	fb0c 0202 	mla	r2, ip, r2, r0
   118de:	3a30      	subs	r2, #48	; 0x30
   118e0:	460b      	mov	r3, r1
   118e2:	e75d      	b.n	117a0 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   118e4:	2a74      	cmp	r2, #116	; 0x74
   118e6:	d025      	beq.n	11934 <z_cbvprintf_impl+0x2a4>
   118e8:	2a7a      	cmp	r2, #122	; 0x7a
   118ea:	d1d5      	bne.n	11898 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   118ec:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   118f0:	2106      	movs	r1, #6
   118f2:	e00c      	b.n	1190e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   118f4:	785a      	ldrb	r2, [r3, #1]
   118f6:	2a68      	cmp	r2, #104	; 0x68
   118f8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   118fc:	d106      	bne.n	1190c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   118fe:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11900:	f361 02c6 	bfi	r2, r1, #3, #4
   11904:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   11908:	3302      	adds	r3, #2
   1190a:	e7c5      	b.n	11898 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   1190c:	2102      	movs	r1, #2
   1190e:	f361 02c6 	bfi	r2, r1, #3, #4
   11912:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   11916:	3301      	adds	r3, #1
   11918:	e7be      	b.n	11898 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   1191a:	785a      	ldrb	r2, [r3, #1]
   1191c:	2a6c      	cmp	r2, #108	; 0x6c
   1191e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11922:	d101      	bne.n	11928 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   11924:	2104      	movs	r1, #4
   11926:	e7eb      	b.n	11900 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   11928:	2103      	movs	r1, #3
   1192a:	e7f0      	b.n	1190e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   1192c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11930:	2105      	movs	r1, #5
   11932:	e7ec      	b.n	1190e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   11934:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11938:	2107      	movs	r1, #7
   1193a:	e7e8      	b.n	1190e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   1193c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   11940:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   11944:	f022 0202 	bic.w	r2, r2, #2
   11948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1194c:	f042 0202 	orr.w	r2, r2, #2
   11950:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   11954:	e7df      	b.n	11916 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   11956:	3b6e      	subs	r3, #110	; 0x6e
   11958:	b2d9      	uxtb	r1, r3
   1195a:	2301      	movs	r3, #1
   1195c:	408b      	lsls	r3, r1
   1195e:	f240 4182 	movw	r1, #1154	; 0x482
   11962:	420b      	tst	r3, r1
   11964:	d137      	bne.n	119d6 <z_cbvprintf_impl+0x346>
   11966:	f013 0f24 	tst.w	r3, #36	; 0x24
   1196a:	d151      	bne.n	11a10 <z_cbvprintf_impl+0x380>
   1196c:	07d8      	lsls	r0, r3, #31
   1196e:	d55c      	bpl.n	11a2a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   11970:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11974:	2103      	movs	r1, #3
   11976:	f361 0302 	bfi	r3, r1, #0, #3
   1197a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1197e:	f002 0378 	and.w	r3, r2, #120	; 0x78
   11982:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   11986:	424b      	negs	r3, r1
   11988:	414b      	adcs	r3, r1
   1198a:	e01a      	b.n	119c2 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   1198c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   11990:	b2c9      	uxtb	r1, r1
   11992:	2001      	movs	r0, #1
   11994:	fa00 f101 	lsl.w	r1, r0, r1
   11998:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1199c:	d194      	bne.n	118c8 <z_cbvprintf_impl+0x238>
   1199e:	f640 0601 	movw	r6, #2049	; 0x801
   119a2:	4231      	tst	r1, r6
   119a4:	d11d      	bne.n	119e2 <z_cbvprintf_impl+0x352>
   119a6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   119aa:	d03e      	beq.n	11a2a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   119ac:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   119b0:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   119b4:	f002 0278 	and.w	r2, r2, #120	; 0x78
   119b8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   119ba:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   119be:	d034      	beq.n	11a2a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   119c0:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   119c2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   119c6:	f3c2 0140 	ubfx	r1, r2, #1, #1
   119ca:	430b      	orrs	r3, r1
   119cc:	f363 0241 	bfi	r2, r3, #1, #1
   119d0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   119d4:	e6fd      	b.n	117d2 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   119d6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   119da:	2102      	movs	r1, #2
   119dc:	f361 0302 	bfi	r3, r1, #0, #3
   119e0:	e7e8      	b.n	119b4 <z_cbvprintf_impl+0x324>
   119e2:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   119e6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   119e8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   119ec:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   119f0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   119f2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   119f6:	bf02      	ittt	eq
   119f8:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   119fc:	f041 0101 	orreq.w	r1, r1, #1
   11a00:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   11a04:	2b63      	cmp	r3, #99	; 0x63
   11a06:	d1db      	bne.n	119c0 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11a08:	1e13      	subs	r3, r2, #0
   11a0a:	bf18      	it	ne
   11a0c:	2301      	movne	r3, #1
   11a0e:	e7d8      	b.n	119c2 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   11a10:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11a14:	2103      	movs	r1, #3
   11a16:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   11a1a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11a1e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   11a22:	bf14      	ite	ne
   11a24:	2301      	movne	r3, #1
   11a26:	2300      	moveq	r3, #0
   11a28:	e7cb      	b.n	119c2 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   11a2a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11a2e:	f043 0301 	orr.w	r3, r3, #1
   11a32:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   11a36:	e7c3      	b.n	119c0 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   11a38:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   11a3c:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11a3e:	bfb4      	ite	lt
   11a40:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   11a44:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
   11a48:	e6d5      	b.n	117f6 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   11a4a:	0798      	lsls	r0, r3, #30
   11a4c:	f57f aee2 	bpl.w	11814 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   11a50:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   11a54:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   11a58:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11a5a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   11a5e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   11a62:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11a66:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11a68:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11a6c:	d133      	bne.n	11ad6 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   11a6e:	1ecb      	subs	r3, r1, #3
   11a70:	2b04      	cmp	r3, #4
   11a72:	d804      	bhi.n	11a7e <z_cbvprintf_impl+0x3ee>
   11a74:	e8df f003 	tbb	[pc, r3]
   11a78:	21464621 	.word	0x21464621
   11a7c:	21          	.byte	0x21
   11a7d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11a7e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   11a80:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   11a82:	ea4f 72e3 	mov.w	r2, r3, asr #31
   11a86:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11a8a:	d11c      	bne.n	11ac6 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   11a8c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   11a90:	17da      	asrs	r2, r3, #31
   11a92:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   11a96:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   11a98:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11a9c:	f013 0603 	ands.w	r6, r3, #3
   11aa0:	d050      	beq.n	11b44 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   11aa2:	9b03      	ldr	r3, [sp, #12]
   11aa4:	463a      	mov	r2, r7
   11aa6:	4659      	mov	r1, fp
   11aa8:	4648      	mov	r0, r9
   11aaa:	f011 ff7f 	bl	239ac <outs>
   11aae:	2800      	cmp	r0, #0
   11ab0:	f2c0 8153 	blt.w	11d5a <z_cbvprintf_impl+0x6ca>
   11ab4:	4405      	add	r5, r0
			continue;
   11ab6:	9f03      	ldr	r7, [sp, #12]
   11ab8:	e5f2      	b.n	116a0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11aba:	f854 3b04 	ldr.w	r3, [r4], #4
   11abe:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   11ac0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   11ac4:	e7e8      	b.n	11a98 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   11ac6:	2902      	cmp	r1, #2
   11ac8:	d1e5      	bne.n	11a96 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   11aca:	b21a      	sxth	r2, r3
   11acc:	f343 33c0 	sbfx	r3, r3, #15, #1
   11ad0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11ad4:	e7df      	b.n	11a96 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11ad6:	2b02      	cmp	r3, #2
   11ad8:	d124      	bne.n	11b24 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   11ada:	1ecb      	subs	r3, r1, #3
   11adc:	2b04      	cmp	r3, #4
   11ade:	d804      	bhi.n	11aea <z_cbvprintf_impl+0x45a>
   11ae0:	e8df f003 	tbb	[pc, r3]
   11ae4:	18101018 	.word	0x18101018
   11ae8:	18          	.byte	0x18
   11ae9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   11aea:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   11aec:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11af0:	f04f 0200 	mov.w	r2, #0
   11af4:	d014      	beq.n	11b20 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   11af6:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   11af8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   11afc:	d1cc      	bne.n	11a98 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   11afe:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11b00:	930e      	str	r3, [sp, #56]	; 0x38
   11b02:	e7c9      	b.n	11a98 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   11b04:	3407      	adds	r4, #7
   11b06:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   11b0a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   11b0e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11b12:	e7c1      	b.n	11a98 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   11b14:	f854 3b04 	ldr.w	r3, [r4], #4
   11b18:	930e      	str	r3, [sp, #56]	; 0x38
   11b1a:	2300      	movs	r3, #0
   11b1c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   11b1e:	e7bb      	b.n	11a98 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   11b20:	b2db      	uxtb	r3, r3
   11b22:	e7cd      	b.n	11ac0 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   11b24:	2b04      	cmp	r3, #4
   11b26:	d108      	bne.n	11b3a <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   11b28:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   11b2a:	f024 0407 	bic.w	r4, r4, #7
   11b2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   11b32:	3408      	adds	r4, #8
   11b34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11b38:	e7ae      	b.n	11a98 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11b3a:	2b03      	cmp	r3, #3
   11b3c:	d1ac      	bne.n	11a98 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   11b3e:	f854 3b04 	ldr.w	r3, [r4], #4
   11b42:	e7dd      	b.n	11b00 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   11b44:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11b48:	2878      	cmp	r0, #120	; 0x78
   11b4a:	d8b4      	bhi.n	11ab6 <z_cbvprintf_impl+0x426>
   11b4c:	2862      	cmp	r0, #98	; 0x62
   11b4e:	d81c      	bhi.n	11b8a <z_cbvprintf_impl+0x4fa>
   11b50:	2825      	cmp	r0, #37	; 0x25
   11b52:	f43f adad 	beq.w	116b0 <z_cbvprintf_impl+0x20>
   11b56:	2858      	cmp	r0, #88	; 0x58
   11b58:	d1ad      	bne.n	11ab6 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11b5a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11b5e:	9300      	str	r3, [sp, #0]
   11b60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   11b64:	ab08      	add	r3, sp, #32
   11b66:	aa10      	add	r2, sp, #64	; 0x40
   11b68:	f011 feda 	bl	23920 <encode_uint>
			if (precision >= 0) {
   11b6c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   11b70:	4607      	mov	r7, r0
			if (precision >= 0) {
   11b72:	f280 809a 	bge.w	11caa <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   11b76:	2f00      	cmp	r7, #0
   11b78:	d09d      	beq.n	11ab6 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11b7a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11b7e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   11b80:	2e00      	cmp	r6, #0
   11b82:	f000 80c1 	beq.w	11d08 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   11b86:	3001      	adds	r0, #1
   11b88:	e0be      	b.n	11d08 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   11b8a:	3863      	subs	r0, #99	; 0x63
   11b8c:	2815      	cmp	r0, #21
   11b8e:	d892      	bhi.n	11ab6 <z_cbvprintf_impl+0x426>
   11b90:	a201      	add	r2, pc, #4	; (adr r2, 11b98 <z_cbvprintf_impl+0x508>)
   11b92:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   11b96:	bf00      	nop
   11b98:	00011c6d 	.word	0x00011c6d
   11b9c:	00011c7f 	.word	0x00011c7f
   11ba0:	00011ab7 	.word	0x00011ab7
   11ba4:	00011ab7 	.word	0x00011ab7
   11ba8:	00011ab7 	.word	0x00011ab7
   11bac:	00011ab7 	.word	0x00011ab7
   11bb0:	00011c7f 	.word	0x00011c7f
   11bb4:	00011ab7 	.word	0x00011ab7
   11bb8:	00011ab7 	.word	0x00011ab7
   11bbc:	00011ab7 	.word	0x00011ab7
   11bc0:	00011ab7 	.word	0x00011ab7
   11bc4:	00011d0d 	.word	0x00011d0d
   11bc8:	00011ca5 	.word	0x00011ca5
   11bcc:	00011ccb 	.word	0x00011ccb
   11bd0:	00011ab7 	.word	0x00011ab7
   11bd4:	00011ab7 	.word	0x00011ab7
   11bd8:	00011bf1 	.word	0x00011bf1
   11bdc:	00011ab7 	.word	0x00011ab7
   11be0:	00011ca5 	.word	0x00011ca5
   11be4:	00011ab7 	.word	0x00011ab7
   11be8:	00011ab7 	.word	0x00011ab7
   11bec:	00011ca5 	.word	0x00011ca5
			if (precision >= 0) {
   11bf0:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   11bf4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   11bf6:	db35      	blt.n	11c64 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   11bf8:	4651      	mov	r1, sl
   11bfa:	4638      	mov	r0, r7
   11bfc:	f012 fd3e 	bl	2467c <strnlen>
			bpe = bps + len;
   11c00:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   11c04:	2f00      	cmp	r7, #0
   11c06:	f43f af56 	beq.w	11ab6 <z_cbvprintf_impl+0x426>
		char sign = 0;
   11c0a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   11c0c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11c10:	f013 0210 	ands.w	r2, r3, #16
   11c14:	9205      	str	r2, [sp, #20]
   11c16:	f000 8093 	beq.w	11d40 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   11c1a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   11c1c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   11c1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   11c20:	bf48      	it	mi
   11c22:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   11c24:	9204      	str	r2, [sp, #16]
   11c26:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   11c28:	bf48      	it	mi
   11c2a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   11c2c:	f1b8 0f00 	cmp.w	r8, #0
   11c30:	f340 80a0 	ble.w	11d74 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   11c34:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   11c38:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   11c3c:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11c40:	0750      	lsls	r0, r2, #29
   11c42:	9306      	str	r3, [sp, #24]
   11c44:	f100 8096 	bmi.w	11d74 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   11c48:	0651      	lsls	r1, r2, #25
   11c4a:	f140 8089 	bpl.w	11d60 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   11c4e:	b13e      	cbz	r6, 11c60 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   11c50:	4659      	mov	r1, fp
   11c52:	4630      	mov	r0, r6
   11c54:	47c8      	blx	r9
   11c56:	2800      	cmp	r0, #0
   11c58:	db7f      	blt.n	11d5a <z_cbvprintf_impl+0x6ca>
   11c5a:	9b06      	ldr	r3, [sp, #24]
   11c5c:	3501      	adds	r5, #1
   11c5e:	461e      	mov	r6, r3
					pad = '0';
   11c60:	2230      	movs	r2, #48	; 0x30
   11c62:	e07e      	b.n	11d62 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   11c64:	4638      	mov	r0, r7
   11c66:	f012 fd02 	bl	2466e <strlen>
   11c6a:	e7c9      	b.n	11c00 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11c6e:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   11c72:	2600      	movs	r6, #0
			bps = buf;
   11c74:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   11c76:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   11c7a:	2001      	movs	r0, #1
   11c7c:	e7c6      	b.n	11c0c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   11c7e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   11c80:	bf5c      	itt	pl
   11c82:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   11c86:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   11c88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   11c8c:	bf48      	it	mi
   11c8e:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   11c90:	2b00      	cmp	r3, #0
   11c92:	f6bf af62 	bge.w	11b5a <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   11c96:	4252      	negs	r2, r2
   11c98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11c9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   11ca0:	262d      	movs	r6, #45	; 0x2d
   11ca2:	e75a      	b.n	11b5a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   11ca4:	2600      	movs	r6, #0
   11ca6:	e758      	b.n	11b5a <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   11ca8:	2600      	movs	r6, #0
				conv->flag_zero = false;
   11caa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   11cae:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11cb2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   11cb4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11cb8:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   11cba:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   11cbe:	f67f af5a 	bls.w	11b76 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   11cc2:	ebaa 0303 	sub.w	r3, sl, r3
   11cc6:	9311      	str	r3, [sp, #68]	; 0x44
   11cc8:	e755      	b.n	11b76 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   11cca:	980e      	ldr	r0, [sp, #56]	; 0x38
   11ccc:	b390      	cbz	r0, 11d34 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11cce:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11cd2:	9300      	str	r3, [sp, #0]
   11cd4:	aa10      	add	r2, sp, #64	; 0x40
   11cd6:	ab08      	add	r3, sp, #32
   11cd8:	2100      	movs	r1, #0
   11cda:	f011 fe21 	bl	23920 <encode_uint>
				conv->altform_0c = true;
   11cde:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   11ce2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11ce6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11cea:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   11cee:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11cf2:	4607      	mov	r7, r0
				conv->altform_0c = true;
   11cf4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   11cf8:	dad6      	bge.n	11ca8 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   11cfa:	2800      	cmp	r0, #0
   11cfc:	f43f aedb 	beq.w	11ab6 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11d00:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11d04:	1a18      	subs	r0, r3, r0
		char sign = 0;
   11d06:	2600      	movs	r6, #0
   11d08:	469a      	mov	sl, r3
   11d0a:	e77f      	b.n	11c0c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   11d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   11d0e:	2907      	cmp	r1, #7
   11d10:	f63f aed1 	bhi.w	11ab6 <z_cbvprintf_impl+0x426>
   11d14:	e8df f001 	tbb	[pc, r1]
   11d18:	0c06040c 	.word	0x0c06040c
   11d1c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   11d20:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   11d22:	e6c8      	b.n	11ab6 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   11d24:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   11d26:	e6c6      	b.n	11ab6 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   11d28:	17ea      	asrs	r2, r5, #31
   11d2a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   11d2e:	e6c2      	b.n	11ab6 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11d30:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   11d32:	e6c0      	b.n	11ab6 <z_cbvprintf_impl+0x426>
   11d34:	4f2e      	ldr	r7, [pc, #184]	; (11df0 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   11d36:	4606      	mov	r6, r0
			bpe = bps + 5;
   11d38:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   11d3c:	2005      	movs	r0, #5
   11d3e:	e765      	b.n	11c0c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   11d40:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11d42:	bf48      	it	mi
   11d44:	3001      	addmi	r0, #1
   11d46:	e769      	b.n	11c1c <z_cbvprintf_impl+0x58c>
   11d48:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   11d4a:	4610      	mov	r0, r2
   11d4c:	9206      	str	r2, [sp, #24]
   11d4e:	4659      	mov	r1, fp
   11d50:	47c8      	blx	r9
   11d52:	2800      	cmp	r0, #0
   11d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11d58:	da04      	bge.n	11d64 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   11d5a:	b015      	add	sp, #84	; 0x54
   11d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11d60:	2220      	movs	r2, #32
					pad = '0';
   11d62:	4643      	mov	r3, r8
				while (width-- > 0) {
   11d64:	4619      	mov	r1, r3
   11d66:	2900      	cmp	r1, #0
   11d68:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11d6c:	dcec      	bgt.n	11d48 <z_cbvprintf_impl+0x6b8>
   11d6e:	4445      	add	r5, r8
   11d70:	1a6d      	subs	r5, r5, r1
   11d72:	4698      	mov	r8, r3
		if (sign != 0) {
   11d74:	b12e      	cbz	r6, 11d82 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   11d76:	4659      	mov	r1, fp
   11d78:	4630      	mov	r0, r6
   11d7a:	47c8      	blx	r9
   11d7c:	2800      	cmp	r0, #0
   11d7e:	dbec      	blt.n	11d5a <z_cbvprintf_impl+0x6ca>
   11d80:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11d82:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11d86:	06da      	lsls	r2, r3, #27
   11d88:	d401      	bmi.n	11d8e <z_cbvprintf_impl+0x6fe>
   11d8a:	071b      	lsls	r3, r3, #28
   11d8c:	d505      	bpl.n	11d9a <z_cbvprintf_impl+0x70a>
				OUTC('0');
   11d8e:	4659      	mov	r1, fp
   11d90:	2030      	movs	r0, #48	; 0x30
   11d92:	47c8      	blx	r9
   11d94:	2800      	cmp	r0, #0
   11d96:	dbe0      	blt.n	11d5a <z_cbvprintf_impl+0x6ca>
   11d98:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11d9a:	9b05      	ldr	r3, [sp, #20]
   11d9c:	b133      	cbz	r3, 11dac <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   11d9e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11da2:	4659      	mov	r1, fp
   11da4:	47c8      	blx	r9
   11da6:	2800      	cmp	r0, #0
   11da8:	dbd7      	blt.n	11d5a <z_cbvprintf_impl+0x6ca>
   11daa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11dac:	9e04      	ldr	r6, [sp, #16]
   11dae:	442e      	add	r6, r5
   11db0:	e005      	b.n	11dbe <z_cbvprintf_impl+0x72e>
				OUTC('0');
   11db2:	4659      	mov	r1, fp
   11db4:	2030      	movs	r0, #48	; 0x30
   11db6:	47c8      	blx	r9
   11db8:	2800      	cmp	r0, #0
   11dba:	dbce      	blt.n	11d5a <z_cbvprintf_impl+0x6ca>
   11dbc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11dbe:	1b73      	subs	r3, r6, r5
   11dc0:	2b00      	cmp	r3, #0
   11dc2:	dcf6      	bgt.n	11db2 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   11dc4:	4653      	mov	r3, sl
   11dc6:	463a      	mov	r2, r7
   11dc8:	4659      	mov	r1, fp
   11dca:	4648      	mov	r0, r9
   11dcc:	f011 fdee 	bl	239ac <outs>
   11dd0:	2800      	cmp	r0, #0
   11dd2:	dbc2      	blt.n	11d5a <z_cbvprintf_impl+0x6ca>
   11dd4:	4405      	add	r5, r0
		while (width > 0) {
   11dd6:	44a8      	add	r8, r5
   11dd8:	eba8 0305 	sub.w	r3, r8, r5
   11ddc:	2b00      	cmp	r3, #0
   11dde:	f77f ae6a 	ble.w	11ab6 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   11de2:	4659      	mov	r1, fp
   11de4:	2020      	movs	r0, #32
   11de6:	47c8      	blx	r9
   11de8:	2800      	cmp	r0, #0
   11dea:	dbb6      	blt.n	11d5a <z_cbvprintf_impl+0x6ca>
   11dec:	3501      	adds	r5, #1
			--width;
   11dee:	e7f3      	b.n	11dd8 <z_cbvprintf_impl+0x748>
   11df0:	00028147 	.word	0x00028147

00011df4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   11df4:	f00c bfd6 	b.w	1eda4 <SystemInit>

00011df8 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   11df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dfc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 11e98 <z_log_minimal_hexdump_print+0xa0>
   11e00:	4680      	mov	r8, r0
   11e02:	460f      	mov	r7, r1
   11e04:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   11e06:	4614      	mov	r4, r2
   11e08:	19bd      	adds	r5, r7, r6
   11e0a:	1b2d      	subs	r5, r5, r4
   11e0c:	b90c      	cbnz	r4, 11e12 <z_log_minimal_hexdump_print+0x1a>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   11e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   11e12:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   11e16:	2b03      	cmp	r3, #3
   11e18:	bf98      	it	ls
   11e1a:	f819 1003 	ldrbls.w	r1, [r9, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   11e1e:	481f      	ldr	r0, [pc, #124]	; (11e9c <z_log_minimal_hexdump_print+0xa4>)
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   11e20:	f8df a07c 	ldr.w	sl, [pc, #124]	; 11ea0 <z_log_minimal_hexdump_print+0xa8>
   11e24:	bf88      	it	hi
   11e26:	213f      	movhi	r1, #63	; 0x3f
		printk("%c: ", z_log_minimal_level_to_char(level));
   11e28:	f011 fbd6 	bl	235d8 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e2c:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   11e30:	455c      	cmp	r4, fp
   11e32:	d928      	bls.n	11e86 <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   11e34:	f815 100b 	ldrb.w	r1, [r5, fp]
   11e38:	4650      	mov	r0, sl
   11e3a:	f011 fbcd 	bl	235d8 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e3e:	f10b 0b01 	add.w	fp, fp, #1
   11e42:	f1bb 0f08 	cmp.w	fp, #8
   11e46:	d1f3      	bne.n	11e30 <z_log_minimal_hexdump_print+0x38>
	printk("|");
   11e48:	4816      	ldr	r0, [pc, #88]	; (11ea4 <z_log_minimal_hexdump_print+0xac>)
			printk("%c", isprint((int)c) != 0 ? c : '.');
   11e4a:	f8df b05c 	ldr.w	fp, [pc, #92]	; 11ea8 <z_log_minimal_hexdump_print+0xb0>
	printk("|");
   11e4e:	f011 fbc3 	bl	235d8 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e52:	f04f 0a00 	mov.w	sl, #0
		if (i < length) {
   11e56:	4554      	cmp	r4, sl
   11e58:	d919      	bls.n	11e8e <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
   11e5a:	f815 100a 	ldrb.w	r1, [r5, sl]
	return (int)((((unsigned)c) >= ' ') &&
   11e5e:	f1a1 0220 	sub.w	r2, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
   11e62:	2a5f      	cmp	r2, #95	; 0x5f
   11e64:	bf28      	it	cs
   11e66:	212e      	movcs	r1, #46	; 0x2e
   11e68:	4658      	mov	r0, fp
   11e6a:	f011 fbb5 	bl	235d8 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e6e:	f10a 0a01 	add.w	sl, sl, #1
   11e72:	f1ba 0f08 	cmp.w	sl, #8
   11e76:	d1ee      	bne.n	11e56 <z_log_minimal_hexdump_print+0x5e>
	printk("\n");
   11e78:	480c      	ldr	r0, [pc, #48]	; (11eac <z_log_minimal_hexdump_print+0xb4>)
   11e7a:	f011 fbad 	bl	235d8 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   11e7e:	2c07      	cmp	r4, #7
   11e80:	d9c5      	bls.n	11e0e <z_log_minimal_hexdump_print+0x16>
		size -= HEXDUMP_BYTES_IN_LINE;
   11e82:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   11e84:	e7c0      	b.n	11e08 <z_log_minimal_hexdump_print+0x10>
			printk("   ");
   11e86:	480a      	ldr	r0, [pc, #40]	; (11eb0 <z_log_minimal_hexdump_print+0xb8>)
   11e88:	f011 fba6 	bl	235d8 <printk>
   11e8c:	e7d7      	b.n	11e3e <z_log_minimal_hexdump_print+0x46>
			printk(" ");
   11e8e:	4809      	ldr	r0, [pc, #36]	; (11eb4 <z_log_minimal_hexdump_print+0xbc>)
   11e90:	f011 fba2 	bl	235d8 <printk>
   11e94:	e7eb      	b.n	11e6e <z_log_minimal_hexdump_print+0x76>
   11e96:	bf00      	nop
   11e98:	00028161 	.word	0x00028161
   11e9c:	0002814d 	.word	0x0002814d
   11ea0:	00028152 	.word	0x00028152
   11ea4:	0002815c 	.word	0x0002815c
   11ea8:	0002815e 	.word	0x0002815e
   11eac:	0002af6b 	.word	0x0002af6b
   11eb0:	00028158 	.word	0x00028158
   11eb4:	0002815a 	.word	0x0002815a

00011eb8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   11eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11ebc:	460f      	mov	r7, r1
   11ebe:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11ec0:	2108      	movs	r1, #8
   11ec2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   11ec4:	f8df 9050 	ldr.w	r9, [pc, #80]	; 11f18 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11ec8:	f011 fe36 	bl	23b38 <nvs_al_size.isra.0>
	*addr -= ate_size;
   11ecc:	683c      	ldr	r4, [r7, #0]
   11ece:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11ed0:	4680      	mov	r8, r0
	*addr -= ate_size;
   11ed2:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   11ed4:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   11ed8:	42ac      	cmp	r4, r5
   11eda:	d803      	bhi.n	11ee4 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   11edc:	2000      	movs	r0, #0
}
   11ede:	b003      	add	sp, #12
   11ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11ee4:	2308      	movs	r3, #8
   11ee6:	466a      	mov	r2, sp
   11ee8:	4621      	mov	r1, r4
   11eea:	4630      	mov	r0, r6
   11eec:	f011 fd97 	bl	23a1e <nvs_flash_rd>
		if (rc) {
   11ef0:	2800      	cmp	r0, #0
   11ef2:	d1f4      	bne.n	11ede <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   11ef4:	4669      	mov	r1, sp
   11ef6:	4630      	mov	r0, r6
   11ef8:	f011 fe28 	bl	23b4c <nvs_ate_valid>
   11efc:	b140      	cbz	r0, 11f10 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   11efe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11f02:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   11f06:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   11f08:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   11f0c:	4413      	add	r3, r2
   11f0e:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   11f10:	eba4 0408 	sub.w	r4, r4, r8
   11f14:	e7e0      	b.n	11ed8 <nvs_recover_last_ate+0x20>
   11f16:	bf00      	nop
   11f18:	ffff0000 	.word	0xffff0000

00011f1c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   11f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11f20:	4604      	mov	r4, r0
   11f22:	b088      	sub	sp, #32

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   11f24:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   11f28:	4638      	mov	r0, r7
   11f2a:	f014 ff31 	bl	26d90 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   11f2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   11f30:	6883      	ldr	r3, [r0, #8]
   11f32:	68db      	ldr	r3, [r3, #12]
   11f34:	4798      	blx	r3
   11f36:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   11f38:	b948      	cbnz	r0, 11f4e <nvs_mount+0x32>
		LOG_ERR("Could not obtain flash parameters");
   11f3a:	48ac      	ldr	r0, [pc, #688]	; (121ec <nvs_mount+0x2d0>)
   11f3c:	2145      	movs	r1, #69	; 0x45

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   11f3e:	f011 fd61 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   11f42:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   11f46:	4628      	mov	r0, r5
   11f48:	b008      	add	sp, #32
   11f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   11f4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   11f50:	6883      	ldr	r3, [r0, #8]
   11f52:	68db      	ldr	r3, [r3, #12]
   11f54:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   11f56:	6803      	ldr	r3, [r0, #0]
   11f58:	3b01      	subs	r3, #1
   11f5a:	2b1f      	cmp	r3, #31
   11f5c:	d902      	bls.n	11f64 <nvs_mount+0x48>
		LOG_ERR("Unsupported write block size");
   11f5e:	48a4      	ldr	r0, [pc, #656]	; (121f0 <nvs_mount+0x2d4>)
   11f60:	2145      	movs	r1, #69	; 0x45
   11f62:	e7ec      	b.n	11f3e <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   11f64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11f66:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11f68:	aa05      	add	r2, sp, #20
   11f6a:	f014 fc0a 	bl	26782 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   11f6e:	b110      	cbz	r0, 11f76 <nvs_mount+0x5a>
		LOG_ERR("Unable to get page info");
   11f70:	48a0      	ldr	r0, [pc, #640]	; (121f4 <nvs_mount+0x2d8>)
   11f72:	2145      	movs	r1, #69	; 0x45
   11f74:	e7e3      	b.n	11f3e <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   11f76:	89a5      	ldrh	r5, [r4, #12]
   11f78:	b12d      	cbz	r5, 11f86 <nvs_mount+0x6a>
   11f7a:	9b06      	ldr	r3, [sp, #24]
   11f7c:	fbb5 f2f3 	udiv	r2, r5, r3
   11f80:	fb03 5512 	mls	r5, r3, r2, r5
   11f84:	b115      	cbz	r5, 11f8c <nvs_mount+0x70>
		LOG_ERR("Invalid sector size");
   11f86:	489c      	ldr	r0, [pc, #624]	; (121f8 <nvs_mount+0x2dc>)
   11f88:	2145      	movs	r1, #69	; 0x45
   11f8a:	e7d8      	b.n	11f3e <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   11f8c:	89e3      	ldrh	r3, [r4, #14]
   11f8e:	2b01      	cmp	r3, #1
   11f90:	d802      	bhi.n	11f98 <nvs_mount+0x7c>
		LOG_ERR("Configuration error - sector count");
   11f92:	489a      	ldr	r0, [pc, #616]	; (121fc <nvs_mount+0x2e0>)
   11f94:	2145      	movs	r1, #69	; 0x45
   11f96:	e7d2      	b.n	11f3e <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   11f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   11f9a:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   11f9c:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11fa8:	4638      	mov	r0, r7
   11faa:	f00e f937 	bl	2021c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11fae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11fb0:	2108      	movs	r1, #8
   11fb2:	f011 fdc1 	bl	23b38 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   11fb6:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11fb8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   11fba:	89e3      	ldrh	r3, [r4, #14]
   11fbc:	fa1f fa85 	uxth.w	sl, r5
   11fc0:	4553      	cmp	r3, sl
   11fc2:	d808      	bhi.n	11fd6 <nvs_mount+0xba>
	if (closed_sectors == fs->sector_count) {
   11fc4:	89e3      	ldrh	r3, [r4, #14]
   11fc6:	4543      	cmp	r3, r8
   11fc8:	d123      	bne.n	12012 <nvs_mount+0xf6>
	return z_impl_k_mutex_unlock(mutex);
   11fca:	4638      	mov	r0, r7
   11fcc:	f00e f9dc 	bl	20388 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   11fd0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   11fd4:	e7b7      	b.n	11f46 <nvs_mount+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
   11fd6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   11fd8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   11fda:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   11fdc:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11fe0:	464a      	mov	r2, r9
   11fe2:	2308      	movs	r3, #8
   11fe4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   11fe6:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11fe8:	f011 fd5e 	bl	23aa8 <nvs_flash_cmp_const>
		if (rc) {
   11fec:	b178      	cbz	r0, 1200e <nvs_mount+0xf2>
			nvs_sector_advance(fs, &addr);
   11fee:	4669      	mov	r1, sp
   11ff0:	4620      	mov	r0, r4
   11ff2:	f011 fd22 	bl	23a3a <nvs_sector_advance>
			closed_sectors++;
   11ff6:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11ffa:	9900      	ldr	r1, [sp, #0]
   11ffc:	2308      	movs	r3, #8
   11ffe:	464a      	mov	r2, r9
   12000:	4620      	mov	r0, r4
			closed_sectors++;
   12002:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12006:	f011 fd4f 	bl	23aa8 <nvs_flash_cmp_const>
			if (!rc) {
   1200a:	2800      	cmp	r0, #0
   1200c:	d0da      	beq.n	11fc4 <nvs_mount+0xa8>
	for (i = 0; i < fs->sector_count; i++) {
   1200e:	3501      	adds	r5, #1
   12010:	e7d3      	b.n	11fba <nvs_mount+0x9e>
	if (i == fs->sector_count) {
   12012:	4553      	cmp	r3, sl
   12014:	d10b      	bne.n	1202e <nvs_mount+0x112>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   12016:	9900      	ldr	r1, [sp, #0]
   12018:	2308      	movs	r3, #8
   1201a:	464a      	mov	r2, r9
   1201c:	1b89      	subs	r1, r1, r6
   1201e:	4620      	mov	r0, r4
   12020:	f011 fd42 	bl	23aa8 <nvs_flash_cmp_const>
		if (!rc) {
   12024:	b918      	cbnz	r0, 1202e <nvs_mount+0x112>
			nvs_sector_advance(fs, &addr);
   12026:	4669      	mov	r1, sp
   12028:	4620      	mov	r0, r4
   1202a:	f011 fd06 	bl	23a3a <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   1202e:	4669      	mov	r1, sp
   12030:	4620      	mov	r0, r4
   12032:	f7ff ff41 	bl	11eb8 <nvs_recover_last_ate>
	if (rc) {
   12036:	4605      	mov	r5, r0
   12038:	b118      	cbz	r0, 12042 <nvs_mount+0x126>
   1203a:	4638      	mov	r0, r7
   1203c:	f00e f9a4 	bl	20388 <z_impl_k_mutex_unlock>
	if (rc) {
   12040:	e781      	b.n	11f46 <nvs_mount+0x2a>
	fs->ate_wra = addr;
   12042:	9b00      	ldr	r3, [sp, #0]
   12044:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12046:	ea4f 4813 	mov.w	r8, r3, lsr #16
   1204a:	ea4f 4808 	mov.w	r8, r8, lsl #16
   1204e:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   12052:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   12056:	4299      	cmp	r1, r3
   12058:	d30f      	bcc.n	1207a <nvs_mount+0x15e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1205a:	2308      	movs	r3, #8
   1205c:	aa01      	add	r2, sp, #4
   1205e:	4620      	mov	r0, r4
   12060:	f011 fcdd 	bl	23a1e <nvs_flash_rd>
		if (rc) {
   12064:	4605      	mov	r5, r0
   12066:	2800      	cmp	r0, #0
   12068:	d1e7      	bne.n	1203a <nvs_mount+0x11e>
   1206a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   1206c:	f813 2b01 	ldrb.w	r2, [r3], #1
   12070:	4591      	cmp	r9, r2
   12072:	d13c      	bne.n	120ee <nvs_mount+0x1d2>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12074:	3501      	adds	r5, #1
   12076:	2d08      	cmp	r5, #8
   12078:	d1f8      	bne.n	1206c <nvs_mount+0x150>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1207a:	6863      	ldr	r3, [r4, #4]
   1207c:	0c1b      	lsrs	r3, r3, #16
   1207e:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   12080:	4669      	mov	r1, sp
   12082:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12084:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   12086:	f011 fcd8 	bl	23a3a <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   1208a:	89a3      	ldrh	r3, [r4, #12]
   1208c:	9900      	ldr	r1, [sp, #0]
   1208e:	464a      	mov	r2, r9
   12090:	4620      	mov	r0, r4
   12092:	f011 fd09 	bl	23aa8 <nvs_flash_cmp_const>
	if (rc < 0) {
   12096:	1e05      	subs	r5, r0, #0
   12098:	dbcf      	blt.n	1203a <nvs_mount+0x11e>
		addr = fs->ate_wra + ate_size;
   1209a:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   1209c:	d069      	beq.n	12172 <nvs_mount+0x256>
		addr = fs->ate_wra + ate_size;
   1209e:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   120a2:	f64f 79ff 	movw	r9, #65535	; 0xffff
   120a6:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   120a8:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   120ac:	fa1f f288 	uxth.w	r2, r8
   120b0:	1b9b      	subs	r3, r3, r6
   120b2:	429a      	cmp	r2, r3
   120b4:	d337      	bcc.n	12126 <nvs_mount+0x20a>
		LOG_INF("No GC Done marker found: restarting gc");
   120b6:	4852      	ldr	r0, [pc, #328]	; (12200 <nvs_mount+0x2e4>)
   120b8:	2149      	movs	r1, #73	; 0x49
   120ba:	f011 fca3 	bl	23a04 <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   120be:	6861      	ldr	r1, [r4, #4]
   120c0:	4620      	mov	r0, r4
   120c2:	f011 fd16 	bl	23af2 <nvs_flash_erase_sector>
		if (rc) {
   120c6:	4605      	mov	r5, r0
   120c8:	2800      	cmp	r0, #0
   120ca:	d1b6      	bne.n	1203a <nvs_mount+0x11e>
		fs->ate_wra &= ADDR_SECT_MASK;
   120cc:	6863      	ldr	r3, [r4, #4]
   120ce:	4a4d      	ldr	r2, [pc, #308]	; (12204 <nvs_mount+0x2e8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   120d0:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   120d2:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   120d4:	440b      	add	r3, r1
   120d6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   120da:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   120dc:	4013      	ands	r3, r2
   120de:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   120e0:	4620      	mov	r0, r4
   120e2:	f011 fe15 	bl	23d10 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   120e6:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   120e8:	2d00      	cmp	r5, #0
   120ea:	d05e      	beq.n	121aa <nvs_mount+0x28e>
   120ec:	e7a5      	b.n	1203a <nvs_mount+0x11e>
		if (nvs_ate_valid(fs, &last_ate)) {
   120ee:	a901      	add	r1, sp, #4
   120f0:	4620      	mov	r0, r4
   120f2:	f011 fd2b 	bl	23b4c <nvs_ate_valid>
   120f6:	6862      	ldr	r2, [r4, #4]
   120f8:	b910      	cbnz	r0, 12100 <nvs_mount+0x1e4>
		fs->ate_wra -= ate_size;
   120fa:	1b92      	subs	r2, r2, r6
   120fc:	6062      	str	r2, [r4, #4]
   120fe:	e7a8      	b.n	12052 <nvs_mount+0x136>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12100:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   12104:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   12108:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1210a:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1210e:	4429      	add	r1, r5
   12110:	f011 fd12 	bl	23b38 <nvs_al_size.isra.0>
   12114:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12116:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12118:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1211a:	d1ee      	bne.n	120fa <nvs_mount+0x1de>
   1211c:	2d00      	cmp	r5, #0
   1211e:	d0ec      	beq.n	120fa <nvs_mount+0x1de>
				rc = -ESPIPE;
   12120:	f06f 051c 	mvn.w	r5, #28
   12124:	e07a      	b.n	1221c <nvs_mount+0x300>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12126:	2308      	movs	r3, #8
   12128:	aa03      	add	r2, sp, #12
   1212a:	4641      	mov	r1, r8
   1212c:	4620      	mov	r0, r4
   1212e:	f011 fc76 	bl	23a1e <nvs_flash_rd>
			if (rc) {
   12132:	4605      	mov	r5, r0
   12134:	2800      	cmp	r0, #0
   12136:	d180      	bne.n	1203a <nvs_mount+0x11e>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   12138:	a903      	add	r1, sp, #12
   1213a:	4620      	mov	r0, r4
   1213c:	f011 fd06 	bl	23b4c <nvs_ate_valid>
   12140:	b138      	cbz	r0, 12152 <nvs_mount+0x236>
   12142:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12146:	454b      	cmp	r3, r9
   12148:	d103      	bne.n	12152 <nvs_mount+0x236>
			    (gc_done_ate.id == 0xffff) &&
   1214a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1214e:	2b00      	cmp	r3, #0
   12150:	d06a      	beq.n	12228 <nvs_mount+0x30c>
			addr += ate_size;
   12152:	44b0      	add	r8, r6
   12154:	e7a7      	b.n	120a6 <nvs_mount+0x18a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   12156:	1a5b      	subs	r3, r3, r1
   12158:	464a      	mov	r2, r9
   1215a:	4620      	mov	r0, r4
   1215c:	f011 fca4 	bl	23aa8 <nvs_flash_cmp_const>
		if (rc < 0) {
   12160:	1e05      	subs	r5, r0, #0
   12162:	f6ff af6a 	blt.w	1203a <nvs_mount+0x11e>
		if (!rc) {
   12166:	d008      	beq.n	1217a <nvs_mount+0x25e>
		fs->data_wra += fs->flash_parameters->write_block_size;
   12168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1216a:	68a3      	ldr	r3, [r4, #8]
   1216c:	6812      	ldr	r2, [r2, #0]
   1216e:	4413      	add	r3, r2
   12170:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   12172:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   12176:	428b      	cmp	r3, r1
   12178:	d8ed      	bhi.n	12156 <nvs_mount+0x23a>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1217a:	6861      	ldr	r1, [r4, #4]
   1217c:	89a3      	ldrh	r3, [r4, #12]
   1217e:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   12182:	429a      	cmp	r2, r3
   12184:	d1b0      	bne.n	120e8 <nvs_mount+0x1cc>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   12186:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12204 <nvs_mount+0x2e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1218a:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1218c:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12190:	429a      	cmp	r2, r3
   12192:	d0a9      	beq.n	120e8 <nvs_mount+0x1cc>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12194:	4620      	mov	r0, r4
   12196:	f011 fcac 	bl	23af2 <nvs_flash_erase_sector>
		if (rc) {
   1219a:	4605      	mov	r5, r0
   1219c:	2800      	cmp	r0, #0
   1219e:	f47f af4c 	bne.w	1203a <nvs_mount+0x11e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   121a2:	6863      	ldr	r3, [r4, #4]
   121a4:	ea03 0308 	and.w	r3, r3, r8
   121a8:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   121aa:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   121ac:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   121ae:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   121b2:	429a      	cmp	r2, r3
   121b4:	d02e      	beq.n	12214 <nvs_mount+0x2f8>
   121b6:	4638      	mov	r0, r7
   121b8:	f00e f8e6 	bl	20388 <z_impl_k_mutex_unlock>
	fs->ready = true;
   121bc:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   121be:	89e2      	ldrh	r2, [r4, #14]
   121c0:	4811      	ldr	r0, [pc, #68]	; (12208 <nvs_mount+0x2ec>)
	fs->ready = true;
   121c2:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   121c4:	2149      	movs	r1, #73	; 0x49
   121c6:	89a3      	ldrh	r3, [r4, #12]
   121c8:	f011 fc1c 	bl	23a04 <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   121cc:	6862      	ldr	r2, [r4, #4]
   121ce:	480f      	ldr	r0, [pc, #60]	; (1220c <nvs_mount+0x2f0>)
   121d0:	b293      	uxth	r3, r2
   121d2:	2149      	movs	r1, #73	; 0x49
   121d4:	0c12      	lsrs	r2, r2, #16
   121d6:	f011 fc15 	bl	23a04 <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   121da:	68a2      	ldr	r2, [r4, #8]
   121dc:	480c      	ldr	r0, [pc, #48]	; (12210 <nvs_mount+0x2f4>)
   121de:	b293      	uxth	r3, r2
   121e0:	2149      	movs	r1, #73	; 0x49
   121e2:	0c12      	lsrs	r2, r2, #16
   121e4:	f011 fc0e 	bl	23a04 <z_log_minimal_printk>
	return 0;
   121e8:	2500      	movs	r5, #0
   121ea:	e6ac      	b.n	11f46 <nvs_mount+0x2a>
   121ec:	0002817e 	.word	0x0002817e
   121f0:	000281a5 	.word	0x000281a5
   121f4:	000281c7 	.word	0x000281c7
   121f8:	000281e4 	.word	0x000281e4
   121fc:	000281fd 	.word	0x000281fd
   12200:	0002826e 	.word	0x0002826e
   12204:	ffff0000 	.word	0xffff0000
   12208:	00028225 	.word	0x00028225
   1220c:	00028241 	.word	0x00028241
   12210:	00028258 	.word	0x00028258
		rc = nvs_add_gc_done_ate(fs);
   12214:	4620      	mov	r0, r4
   12216:	f011 fd66 	bl	23ce6 <nvs_add_gc_done_ate>
   1221a:	4605      	mov	r5, r0
   1221c:	4638      	mov	r0, r7
   1221e:	f00e f8b3 	bl	20388 <z_impl_k_mutex_unlock>
	if (rc) {
   12222:	2d00      	cmp	r5, #0
   12224:	d0ca      	beq.n	121bc <nvs_mount+0x2a0>
   12226:	e68e      	b.n	11f46 <nvs_mount+0x2a>
			LOG_INF("GC Done marker found");
   12228:	4808      	ldr	r0, [pc, #32]	; (1224c <nvs_mount+0x330>)
   1222a:	2149      	movs	r1, #73	; 0x49
   1222c:	f011 fbea 	bl	23a04 <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12230:	6863      	ldr	r3, [r4, #4]
   12232:	0c1b      	lsrs	r3, r3, #16
   12234:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   12236:	4669      	mov	r1, sp
   12238:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1223a:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   1223c:	f011 fbfd 	bl	23a3a <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   12240:	9900      	ldr	r1, [sp, #0]
   12242:	4620      	mov	r0, r4
   12244:	f011 fc55 	bl	23af2 <nvs_flash_erase_sector>
   12248:	e74d      	b.n	120e6 <nvs_mount+0x1ca>
   1224a:	bf00      	nop
   1224c:	0002829a 	.word	0x0002829a

00012250 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   12250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12254:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   12256:	7c03      	ldrb	r3, [r0, #16]
{
   12258:	b089      	sub	sp, #36	; 0x24
   1225a:	4604      	mov	r4, r0
   1225c:	4689      	mov	r9, r1
   1225e:	4690      	mov	r8, r2
	if (!fs->ready) {
   12260:	b94b      	cbnz	r3, 12276 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   12262:	4863      	ldr	r0, [pc, #396]	; (123f0 <nvs_write+0x1a0>)
   12264:	2145      	movs	r1, #69	; 0x45
   12266:	f011 fbcd 	bl	23a04 <z_log_minimal_printk>
		return -EACCES;
   1226a:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1226e:	4630      	mov	r0, r6
   12270:	b009      	add	sp, #36	; 0x24
   12272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12276:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   12278:	2108      	movs	r1, #8
   1227a:	4610      	mov	r0, r2
   1227c:	f011 fc5c 	bl	23b38 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   12280:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12282:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   12284:	4610      	mov	r0, r2
   12286:	f011 fc57 	bl	23b38 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1228a:	89a3      	ldrh	r3, [r4, #12]
   1228c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   12290:	429d      	cmp	r5, r3
	data_size = nvs_al_size(fs, len);
   12292:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12294:	f200 80a9 	bhi.w	123ea <nvs_write+0x19a>
   12298:	b11d      	cbz	r5, 122a2 <nvs_write+0x52>
	    ((len > 0) && (data == NULL))) {
   1229a:	f1b8 0f00 	cmp.w	r8, #0
   1229e:	f000 80a4 	beq.w	123ea <nvs_write+0x19a>
	wlk_addr = fs->ate_wra;
   122a2:	6863      	ldr	r3, [r4, #4]
   122a4:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   122a6:	aa04      	add	r2, sp, #16
   122a8:	a903      	add	r1, sp, #12
   122aa:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   122ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   122b0:	f011 fc84 	bl	23bbc <nvs_prev_ate>
		if (rc) {
   122b4:	4606      	mov	r6, r0
   122b6:	2800      	cmp	r0, #0
   122b8:	d1d9      	bne.n	1226e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   122ba:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   122be:	454b      	cmp	r3, r9
   122c0:	d005      	beq.n	122ce <nvs_write+0x7e>
		if (wlk_addr == fs->ate_wra) {
   122c2:	6862      	ldr	r2, [r4, #4]
   122c4:	9b03      	ldr	r3, [sp, #12]
   122c6:	429a      	cmp	r2, r3
   122c8:	d1ed      	bne.n	122a6 <nvs_write+0x56>
		if (len == 0) {
   122ca:	b9e5      	cbnz	r5, 12306 <nvs_write+0xb6>
   122cc:	e7cf      	b.n	1226e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   122ce:	a904      	add	r1, sp, #16
   122d0:	4620      	mov	r0, r4
   122d2:	f011 fc3b 	bl	23b4c <nvs_ate_valid>
   122d6:	2800      	cmp	r0, #0
   122d8:	d0f3      	beq.n	122c2 <nvs_write+0x72>
		rd_addr += wlk_ate.offset;
   122da:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   122de:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   122e2:	b175      	cbz	r5, 12302 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   122e4:	429d      	cmp	r5, r3
   122e6:	d10e      	bne.n	12306 <nvs_write+0xb6>
		rd_addr &= ADDR_SECT_MASK;
   122e8:	ea4f 411b 	mov.w	r1, fp, lsr #16
   122ec:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   122ee:	4401      	add	r1, r0
   122f0:	462b      	mov	r3, r5
   122f2:	4642      	mov	r2, r8
   122f4:	4620      	mov	r0, r4
   122f6:	f011 fbad 	bl	23a54 <nvs_flash_block_cmp>
			if (rc <= 0) {
   122fa:	2800      	cmp	r0, #0
   122fc:	dc03      	bgt.n	12306 <nvs_write+0xb6>
   122fe:	4606      	mov	r6, r0
   12300:	e7b5      	b.n	1226e <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   12302:	2b00      	cmp	r3, #0
   12304:	d0b3      	beq.n	1226e <nvs_write+0x1e>
	if (data_size) {
   12306:	2f00      	cmp	r7, #0
   12308:	d13e      	bne.n	12388 <nvs_write+0x138>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1230a:	f104 0314 	add.w	r3, r4, #20
   1230e:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   12310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12318:	f104 0014 	add.w	r0, r4, #20
   1231c:	f00d ff7e 	bl	2021c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   12320:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 123f4 <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
   12324:	89e3      	ldrh	r3, [r4, #14]
   12326:	429e      	cmp	r6, r3
   12328:	d05c      	beq.n	123e4 <nvs_write+0x194>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1232a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1232e:	18f9      	adds	r1, r7, r3
   12330:	428a      	cmp	r2, r1
   12332:	d32c      	bcc.n	1238e <nvs_write+0x13e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12334:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   12338:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   1233a:	23ff      	movs	r3, #255	; 0xff
   1233c:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   12340:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   12344:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   12348:	f011 fbed 	bl	23b26 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1234c:	68a1      	ldr	r1, [r4, #8]
   1234e:	462b      	mov	r3, r5
   12350:	4642      	mov	r2, r8
   12352:	4620      	mov	r0, r4
   12354:	f011 fc7c 	bl	23c50 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   12358:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1235a:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   1235c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1235e:	f011 fbeb 	bl	23b38 <nvs_al_size.isra.0>
   12362:	68a2      	ldr	r2, [r4, #8]
   12364:	4402      	add	r2, r0
   12366:	60a2      	str	r2, [r4, #8]
	if (rc) {
   12368:	f1ba 0f00 	cmp.w	sl, #0
   1236c:	d107      	bne.n	1237e <nvs_write+0x12e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1236e:	a906      	add	r1, sp, #24
   12370:	4620      	mov	r0, r4
   12372:	f011 fca7 	bl	23cc4 <nvs_flash_ate_wrt>
	rc = len;
   12376:	2800      	cmp	r0, #0
   12378:	bf14      	ite	ne
   1237a:	4682      	movne	sl, r0
   1237c:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   1237e:	9801      	ldr	r0, [sp, #4]
   12380:	f00e f802 	bl	20388 <z_impl_k_mutex_unlock>
	return rc;
   12384:	4656      	mov	r6, sl
   12386:	e772      	b.n	1226e <nvs_write+0x1e>
		required_space = data_size + ate_size;
   12388:	4457      	add	r7, sl
   1238a:	b2bf      	uxth	r7, r7
   1238c:	e7bd      	b.n	1230a <nvs_write+0xba>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1238e:	2108      	movs	r1, #8
   12390:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12392:	f011 fbd1 	bl	23b38 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   12396:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1239a:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   1239e:	2300      	movs	r3, #0
   123a0:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   123a4:	1813      	adds	r3, r2, r0
   123a6:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   123aa:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   123ac:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   123b0:	441a      	add	r2, r3
   123b2:	1a10      	subs	r0, r2, r0
   123b4:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   123b6:	a806      	add	r0, sp, #24
   123b8:	f011 fbb5 	bl	23b26 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   123bc:	a906      	add	r1, sp, #24
   123be:	4620      	mov	r0, r4
   123c0:	f011 fc80 	bl	23cc4 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   123c4:	1d21      	adds	r1, r4, #4
   123c6:	4620      	mov	r0, r4
   123c8:	f011 fb37 	bl	23a3a <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   123cc:	6863      	ldr	r3, [r4, #4]
   123ce:	ea03 030b 	and.w	r3, r3, fp
   123d2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   123d4:	4620      	mov	r0, r4
   123d6:	f011 fc9b 	bl	23d10 <nvs_gc>
		if (rc) {
   123da:	4682      	mov	sl, r0
   123dc:	2800      	cmp	r0, #0
   123de:	d1ce      	bne.n	1237e <nvs_write+0x12e>
		gc_count++;
   123e0:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   123e2:	e79f      	b.n	12324 <nvs_write+0xd4>
			rc = -ENOSPC;
   123e4:	f06f 0a1b 	mvn.w	sl, #27
   123e8:	e7c9      	b.n	1237e <nvs_write+0x12e>
		return -EINVAL;
   123ea:	f06f 0615 	mvn.w	r6, #21
   123ee:	e73e      	b.n	1226e <nvs_write+0x1e>
   123f0:	00028165 	.word	0x00028165
   123f4:	ffff0000 	.word	0xffff0000

000123f8 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   123f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   123fc:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   123fe:	7c03      	ldrb	r3, [r0, #16]
{
   12400:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   12404:	4604      	mov	r4, r0
   12406:	460f      	mov	r7, r1
   12408:	4690      	mov	r8, r2
	if (!fs->ready) {
   1240a:	b943      	cbnz	r3, 1241e <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   1240c:	482c      	ldr	r0, [pc, #176]	; (124c0 <nvs_read_hist+0xc8>)
   1240e:	2145      	movs	r1, #69	; 0x45
   12410:	f011 faf8 	bl	23a04 <z_log_minimal_printk>
		return -EACCES;
   12414:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   12418:	b004      	add	sp, #16
   1241a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1241e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12420:	2108      	movs	r1, #8
   12422:	f011 fb89 	bl	23b38 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   12426:	89a3      	ldrh	r3, [r4, #12]
   12428:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   1242c:	429e      	cmp	r6, r3
   1242e:	d843      	bhi.n	124b8 <nvs_read_hist+0xc0>
	wlk_addr = fs->ate_wra;
   12430:	f8d4 a004 	ldr.w	sl, [r4, #4]
   12434:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   12438:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   1243a:	45a9      	cmp	r9, r5
   1243c:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   1243e:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   12442:	d209      	bcs.n	12458 <nvs_read_hist+0x60>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12444:	6863      	ldr	r3, [r4, #4]
   12446:	4553      	cmp	r3, sl
   12448:	d11e      	bne.n	12488 <nvs_read_hist+0x90>
   1244a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1244e:	42bb      	cmp	r3, r7
   12450:	d01a      	beq.n	12488 <nvs_read_hist+0x90>
		return -ENOENT;
   12452:	f06f 0001 	mvn.w	r0, #1
   12456:	e7df      	b.n	12418 <nvs_read_hist+0x20>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12458:	aa02      	add	r2, sp, #8
   1245a:	a901      	add	r1, sp, #4
   1245c:	4620      	mov	r0, r4
   1245e:	f011 fbad 	bl	23bbc <nvs_prev_ate>
		if (rc) {
   12462:	2800      	cmp	r0, #0
   12464:	d1d8      	bne.n	12418 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   12466:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1246a:	42bb      	cmp	r3, r7
   1246c:	d106      	bne.n	1247c <nvs_read_hist+0x84>
   1246e:	a902      	add	r1, sp, #8
   12470:	4620      	mov	r0, r4
   12472:	f011 fb6b 	bl	23b4c <nvs_ate_valid>
   12476:	b108      	cbz	r0, 1247c <nvs_read_hist+0x84>
			cnt_his++;
   12478:	3501      	adds	r5, #1
   1247a:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   1247c:	6862      	ldr	r2, [r4, #4]
   1247e:	9b01      	ldr	r3, [sp, #4]
   12480:	429a      	cmp	r2, r3
   12482:	d1da      	bne.n	1243a <nvs_read_hist+0x42>
		rd_addr = wlk_addr;
   12484:	4651      	mov	r1, sl
   12486:	e7e0      	b.n	1244a <nvs_read_hist+0x52>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12488:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1248c:	2b00      	cmp	r3, #0
   1248e:	d0e0      	beq.n	12452 <nvs_read_hist+0x5a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12490:	45a9      	cmp	r9, r5
   12492:	d8de      	bhi.n	12452 <nvs_read_hist+0x5a>
	rd_addr += wlk_ate.offset;
   12494:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   12498:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1249a:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   1249c:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   124a0:	bf28      	it	cs
   124a2:	4633      	movcs	r3, r6
   124a4:	4401      	add	r1, r0
   124a6:	4642      	mov	r2, r8
   124a8:	4620      	mov	r0, r4
   124aa:	f011 fab8 	bl	23a1e <nvs_flash_rd>
	if (rc) {
   124ae:	2800      	cmp	r0, #0
   124b0:	d1b2      	bne.n	12418 <nvs_read_hist+0x20>
	return wlk_ate.len;
   124b2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   124b6:	e7af      	b.n	12418 <nvs_read_hist+0x20>
		return -EINVAL;
   124b8:	f06f 0015 	mvn.w	r0, #21
   124bc:	e7ac      	b.n	12418 <nvs_read_hist+0x20>
   124be:	bf00      	nop
   124c0:	00028165 	.word	0x00028165

000124c4 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   124c4:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   124c6:	4b11      	ldr	r3, [pc, #68]	; (1250c <flash_area_open+0x48>)
   124c8:	681c      	ldr	r4, [r3, #0]
{
   124ca:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   124cc:	b1dc      	cbz	r4, 12506 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   124ce:	4b10      	ldr	r3, [pc, #64]	; (12510 <flash_area_open+0x4c>)
   124d0:	6819      	ldr	r1, [r3, #0]
   124d2:	2300      	movs	r3, #0
   124d4:	428b      	cmp	r3, r1
   124d6:	db02      	blt.n	124de <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   124d8:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   124dc:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   124de:	4622      	mov	r2, r4
   124e0:	f812 6b10 	ldrb.w	r6, [r2], #16
   124e4:	4286      	cmp	r6, r0
   124e6:	d002      	beq.n	124ee <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   124e8:	3301      	adds	r3, #1
   124ea:	4614      	mov	r4, r2
   124ec:	e7f2      	b.n	124d4 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   124ee:	68e0      	ldr	r0, [r4, #12]
   124f0:	b910      	cbnz	r0, 124f8 <flash_area_open+0x34>
		return -ENODEV;
   124f2:	f06f 0012 	mvn.w	r0, #18
   124f6:	e7f1      	b.n	124dc <flash_area_open+0x18>
   124f8:	f014 fc01 	bl	26cfe <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   124fc:	2800      	cmp	r0, #0
   124fe:	d0f8      	beq.n	124f2 <flash_area_open+0x2e>
	*fap = area;
   12500:	602c      	str	r4, [r5, #0]
	return 0;
   12502:	2000      	movs	r0, #0
   12504:	e7ea      	b.n	124dc <flash_area_open+0x18>
		return -EACCES;
   12506:	f06f 000c 	mvn.w	r0, #12
   1250a:	e7e7      	b.n	124dc <flash_area_open+0x18>
   1250c:	200005e0 	.word	0x200005e0
   12510:	00027670 	.word	0x00027670

00012514 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   12514:	b570      	push	{r4, r5, r6, lr}
   12516:	b088      	sub	sp, #32
   12518:	4605      	mov	r5, r0
   1251a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   1251c:	b2c0      	uxtb	r0, r0
   1251e:	4669      	mov	r1, sp
{
   12520:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   12522:	f7ff ffcf 	bl	124c4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   12526:	2800      	cmp	r0, #0
   12528:	db1b      	blt.n	12562 <flash_area_get_sectors+0x4e>
   1252a:	9800      	ldr	r0, [sp, #0]
   1252c:	b1c8      	cbz	r0, 12562 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   1252e:	6843      	ldr	r3, [r0, #4]
   12530:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   12532:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   12534:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   12536:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   12538:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   1253c:	2300      	movs	r3, #0
	cb_data->status = 0;
   1253e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   12542:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   12544:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   12546:	f011 fcbb 	bl	23ec0 <flash_area_close>
	if (flash_dev == NULL) {
   1254a:	b16d      	cbz	r5, 12568 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   1254c:	4628      	mov	r0, r5
   1254e:	4908      	ldr	r1, [pc, #32]	; (12570 <flash_area_get_sectors+0x5c>)
   12550:	aa01      	add	r2, sp, #4
   12552:	f014 f91a 	bl	2678a <flash_page_foreach>
	if (cb_data->status == 0) {
   12556:	9807      	ldr	r0, [sp, #28]
   12558:	b908      	cbnz	r0, 1255e <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   1255a:	9b05      	ldr	r3, [sp, #20]
   1255c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1255e:	b008      	add	sp, #32
   12560:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   12562:	f06f 0015 	mvn.w	r0, #21
   12566:	e7fa      	b.n	1255e <flash_area_get_sectors+0x4a>
		return -ENODEV;
   12568:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   1256c:	e7f7      	b.n	1255e <flash_area_get_sectors+0x4a>
   1256e:	bf00      	nop
   12570:	00023ec3 	.word	0x00023ec3

00012574 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   12574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   12578:	4b0f      	ldr	r3, [pc, #60]	; (125b8 <settings_save_one+0x44>)
   1257a:	681c      	ldr	r4, [r3, #0]
{
   1257c:	4605      	mov	r5, r0
   1257e:	460e      	mov	r6, r1
   12580:	4617      	mov	r7, r2
	if (!cs) {
   12582:	b1ac      	cbz	r4, 125b0 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   12584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1258c:	480b      	ldr	r0, [pc, #44]	; (125bc <settings_save_one+0x48>)
   1258e:	f00d fe45 	bl	2021c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   12592:	6863      	ldr	r3, [r4, #4]
   12594:	4632      	mov	r2, r6
   12596:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1259a:	4629      	mov	r1, r5
   1259c:	463b      	mov	r3, r7
   1259e:	4620      	mov	r0, r4
   125a0:	47c0      	blx	r8
   125a2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   125a4:	4805      	ldr	r0, [pc, #20]	; (125bc <settings_save_one+0x48>)
   125a6:	f00d feef 	bl	20388 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   125aa:	4620      	mov	r0, r4
   125ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   125b0:	f06f 0401 	mvn.w	r4, #1
   125b4:	e7f9      	b.n	125aa <settings_save_one+0x36>
   125b6:	bf00      	nop
   125b8:	20001fd8 	.word	0x20001fd8
   125bc:	200008fc 	.word	0x200008fc

000125c0 <settings_src_register>:
	parent->next = child;
   125c0:	2300      	movs	r3, #0
   125c2:	6003      	str	r3, [r0, #0]
	return list->tail;
   125c4:	4b04      	ldr	r3, [pc, #16]	; (125d8 <settings_src_register+0x18>)
   125c6:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   125c8:	b912      	cbnz	r2, 125d0 <settings_src_register+0x10>
	list->head = node;
   125ca:	e9c3 0000 	strd	r0, r0, [r3]
}
   125ce:	4770      	bx	lr
	parent->next = child;
   125d0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   125d2:	6058      	str	r0, [r3, #4]
}
   125d4:	4770      	bx	lr
   125d6:	bf00      	nop
   125d8:	20001fdc 	.word	0x20001fdc

000125dc <settings_dst_register>:
	settings_save_dst = cs;
   125dc:	4b01      	ldr	r3, [pc, #4]	; (125e4 <settings_dst_register+0x8>)
   125de:	6018      	str	r0, [r3, #0]
}
   125e0:	4770      	bx	lr
   125e2:	bf00      	nop
   125e4:	20001fd8 	.word	0x20001fd8

000125e8 <settings_load_subtree>:
{
   125e8:	b530      	push	{r4, r5, lr}
   125ea:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   125ec:	2300      	movs	r3, #0
{
   125ee:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   125f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   125f4:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   125f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125fa:	480c      	ldr	r0, [pc, #48]	; (1262c <settings_load_subtree+0x44>)
   125fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12600:	f00d fe0c 	bl	2021c <z_impl_k_mutex_lock>
	return list->head;
   12604:	4b0a      	ldr	r3, [pc, #40]	; (12630 <settings_load_subtree+0x48>)
   12606:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12608:	b94c      	cbnz	r4, 1261e <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   1260a:	4628      	mov	r0, r5
   1260c:	f000 f8dc 	bl	127c8 <settings_commit_subtree>
   12610:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12612:	4806      	ldr	r0, [pc, #24]	; (1262c <settings_load_subtree+0x44>)
   12614:	f00d feb8 	bl	20388 <z_impl_k_mutex_unlock>
}
   12618:	4620      	mov	r0, r4
   1261a:	b005      	add	sp, #20
   1261c:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   1261e:	6863      	ldr	r3, [r4, #4]
   12620:	4620      	mov	r0, r4
   12622:	681b      	ldr	r3, [r3, #0]
   12624:	a901      	add	r1, sp, #4
   12626:	4798      	blx	r3
	return node->next;
   12628:	6824      	ldr	r4, [r4, #0]
   1262a:	e7ed      	b.n	12608 <settings_load_subtree+0x20>
   1262c:	200008fc 	.word	0x200008fc
   12630:	20001fdc 	.word	0x20001fdc

00012634 <settings_load_subtree_direct>:
{
   12634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   12636:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1263a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1263c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12640:	480a      	ldr	r0, [pc, #40]	; (1266c <settings_load_subtree_direct+0x38>)
   12642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12646:	f00d fde9 	bl	2021c <z_impl_k_mutex_lock>
	return list->head;
   1264a:	4b09      	ldr	r3, [pc, #36]	; (12670 <settings_load_subtree_direct+0x3c>)
   1264c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1264e:	b92c      	cbnz	r4, 1265c <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   12650:	4806      	ldr	r0, [pc, #24]	; (1266c <settings_load_subtree_direct+0x38>)
   12652:	f00d fe99 	bl	20388 <z_impl_k_mutex_unlock>
}
   12656:	4620      	mov	r0, r4
   12658:	b004      	add	sp, #16
   1265a:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   1265c:	6863      	ldr	r3, [r4, #4]
   1265e:	4620      	mov	r0, r4
   12660:	681b      	ldr	r3, [r3, #0]
   12662:	a901      	add	r1, sp, #4
   12664:	4798      	blx	r3
	return node->next;
   12666:	6824      	ldr	r4, [r4, #0]
   12668:	e7f1      	b.n	1264e <settings_load_subtree_direct+0x1a>
   1266a:	bf00      	nop
   1266c:	200008fc 	.word	0x200008fc
   12670:	20001fdc 	.word	0x20001fdc

00012674 <settings_store_init>:
	list->head = NULL;
   12674:	4b02      	ldr	r3, [pc, #8]	; (12680 <settings_store_init+0xc>)
   12676:	2200      	movs	r2, #0
	list->tail = NULL;
   12678:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   1267c:	4770      	bx	lr
   1267e:	bf00      	nop
   12680:	20001fdc 	.word	0x20001fdc

00012684 <settings_init>:
	list->head = NULL;
   12684:	4b02      	ldr	r3, [pc, #8]	; (12690 <settings_init+0xc>)
   12686:	2200      	movs	r2, #0
	list->tail = NULL;
   12688:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   1268c:	f7ff bff2 	b.w	12674 <settings_store_init>
   12690:	20001fe4 	.word	0x20001fe4

00012694 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   12694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12698:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   1269a:	460c      	mov	r4, r1
   1269c:	b109      	cbz	r1, 126a2 <settings_parse_and_lookup+0xe>
		*next = NULL;
   1269e:	2300      	movs	r3, #0
   126a0:	600b      	str	r3, [r1, #0]
{
   126a2:	4d24      	ldr	r5, [pc, #144]	; (12734 <settings_parse_and_lookup+0xa0>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   126a4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 12738 <settings_parse_and_lookup+0xa4>
{
   126a8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   126aa:	454d      	cmp	r5, r9
   126ac:	d920      	bls.n	126f0 <settings_parse_and_lookup+0x5c>
   126ae:	4923      	ldr	r1, [pc, #140]	; (1273c <settings_parse_and_lookup+0xa8>)
   126b0:	4823      	ldr	r0, [pc, #140]	; (12740 <settings_parse_and_lookup+0xac>)
   126b2:	2294      	movs	r2, #148	; 0x94
   126b4:	f011 f998 	bl	239e8 <assert_print>
   126b8:	4820      	ldr	r0, [pc, #128]	; (1273c <settings_parse_and_lookup+0xa8>)
   126ba:	2194      	movs	r1, #148	; 0x94
   126bc:	f011 f98d 	bl	239da <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   126c0:	f8d5 8000 	ldr.w	r8, [r5]
   126c4:	aa01      	add	r2, sp, #4
   126c6:	4641      	mov	r1, r8
   126c8:	4638      	mov	r0, r7
   126ca:	f011 fc23 	bl	23f14 <settings_name_steq>
   126ce:	b150      	cbz	r0, 126e6 <settings_parse_and_lookup+0x52>
			continue;
		}
		if (!bestmatch) {
   126d0:	b916      	cbnz	r6, 126d8 <settings_parse_and_lookup+0x44>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
   126d2:	b954      	cbnz	r4, 126ea <settings_parse_and_lookup+0x56>
{
   126d4:	462e      	mov	r6, r5
   126d6:	e006      	b.n	126e6 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   126d8:	6831      	ldr	r1, [r6, #0]
   126da:	2200      	movs	r2, #0
   126dc:	4640      	mov	r0, r8
   126de:	f011 fc19 	bl	23f14 <settings_name_steq>
   126e2:	2800      	cmp	r0, #0
   126e4:	d1f5      	bne.n	126d2 <settings_parse_and_lookup+0x3e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   126e6:	3514      	adds	r5, #20
   126e8:	e7df      	b.n	126aa <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   126ea:	9b01      	ldr	r3, [sp, #4]
   126ec:	6023      	str	r3, [r4, #0]
   126ee:	e7f1      	b.n	126d4 <settings_parse_and_lookup+0x40>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   126f0:	d3e6      	bcc.n	126c0 <settings_parse_and_lookup+0x2c>
	return list->head;
   126f2:	4b14      	ldr	r3, [pc, #80]	; (12744 <settings_parse_and_lookup+0xb0>)
   126f4:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   126f6:	b1c5      	cbz	r5, 1272a <settings_parse_and_lookup+0x96>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   126f8:	f855 8c14 	ldr.w	r8, [r5, #-20]
   126fc:	aa01      	add	r2, sp, #4
   126fe:	4641      	mov	r1, r8
   12700:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12702:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   12704:	f011 fc06 	bl	23f14 <settings_name_steq>
   12708:	b150      	cbz	r0, 12720 <settings_parse_and_lookup+0x8c>
			continue;
		}
		if (!bestmatch) {
   1270a:	b916      	cbnz	r6, 12712 <settings_parse_and_lookup+0x7e>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   1270c:	b954      	cbnz	r4, 12724 <settings_parse_and_lookup+0x90>
{
   1270e:	462e      	mov	r6, r5
   12710:	e006      	b.n	12720 <settings_parse_and_lookup+0x8c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   12712:	6831      	ldr	r1, [r6, #0]
   12714:	2200      	movs	r2, #0
   12716:	4640      	mov	r0, r8
   12718:	f011 fbfc 	bl	23f14 <settings_name_steq>
   1271c:	2800      	cmp	r0, #0
   1271e:	d1f5      	bne.n	1270c <settings_parse_and_lookup+0x78>
	return node->next;
   12720:	696d      	ldr	r5, [r5, #20]
   12722:	e7e8      	b.n	126f6 <settings_parse_and_lookup+0x62>
				*next = tmpnext;
   12724:	9b01      	ldr	r3, [sp, #4]
   12726:	6023      	str	r3, [r4, #0]
   12728:	e7f1      	b.n	1270e <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   1272a:	4630      	mov	r0, r6
   1272c:	b003      	add	sp, #12
   1272e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12732:	bf00      	nop
   12734:	00027544 	.word	0x00027544
   12738:	000275bc 	.word	0x000275bc
   1273c:	000282bb 	.word	0x000282bb
   12740:	000280bd 	.word	0x000280bd
   12744:	20001fe4 	.word	0x20001fe4

00012748 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   12748:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1274c:	f8dd 8020 	ldr.w	r8, [sp, #32]
	int rc;
	const char *name_key = name;
   12750:	9001      	str	r0, [sp, #4]
{
   12752:	4604      	mov	r4, r0
   12754:	460d      	mov	r5, r1
   12756:	4616      	mov	r6, r2
   12758:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   1275a:	f1b8 0f00 	cmp.w	r8, #0
   1275e:	d007      	beq.n	12770 <settings_call_set_handler+0x28>
   12760:	f8d8 1000 	ldr.w	r1, [r8]
   12764:	b9c1      	cbnz	r1, 12798 <settings_call_set_handler+0x50>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   12766:	f8d8 e004 	ldr.w	lr, [r8, #4]
   1276a:	f1be 0f00 	cmp.w	lr, #0
   1276e:	d11c      	bne.n	127aa <settings_call_set_handler+0x62>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   12770:	a901      	add	r1, sp, #4
   12772:	4620      	mov	r0, r4
   12774:	f7ff ff8e 	bl	12694 <settings_parse_and_lookup>
		if (!ch) {
   12778:	b198      	cbz	r0, 127a2 <settings_call_set_handler+0x5a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   1277a:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1277e:	9801      	ldr	r0, [sp, #4]
   12780:	463b      	mov	r3, r7
   12782:	4632      	mov	r2, r6
   12784:	4629      	mov	r1, r5
   12786:	47c0      	blx	r8

		if (rc != 0) {
   12788:	4603      	mov	r3, r0
   1278a:	b150      	cbz	r0, 127a2 <settings_call_set_handler+0x5a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   1278c:	480d      	ldr	r0, [pc, #52]	; (127c4 <settings_call_set_handler+0x7c>)
   1278e:	4622      	mov	r2, r4
   12790:	2145      	movs	r1, #69	; 0x45
   12792:	f011 f937 	bl	23a04 <z_log_minimal_printk>
				name, rc);
			/* Ignoring the error */
			rc = 0;
   12796:	e004      	b.n	127a2 <settings_call_set_handler+0x5a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   12798:	aa01      	add	r2, sp, #4
   1279a:	f011 fbbb 	bl	23f14 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1279e:	2800      	cmp	r0, #0
   127a0:	d1e1      	bne.n	12766 <settings_call_set_handler+0x1e>
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   127a2:	2000      	movs	r0, #0
   127a4:	b002      	add	sp, #8
   127a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   127aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   127ae:	9801      	ldr	r0, [sp, #4]
   127b0:	9308      	str	r3, [sp, #32]
   127b2:	4632      	mov	r2, r6
   127b4:	463b      	mov	r3, r7
   127b6:	4629      	mov	r1, r5
   127b8:	46f4      	mov	ip, lr
}
   127ba:	b002      	add	sp, #8
   127bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   127c0:	4760      	bx	ip
   127c2:	bf00      	nop
   127c4:	000282ed 	.word	0x000282ed

000127c8 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   127c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   127ca:	4c1d      	ldr	r4, [pc, #116]	; (12840 <settings_commit_subtree+0x78>)
   127cc:	4f1d      	ldr	r7, [pc, #116]	; (12844 <settings_commit_subtree+0x7c>)
{
   127ce:	4606      	mov	r6, r0
	rc = 0;
   127d0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   127d2:	42bc      	cmp	r4, r7
   127d4:	d91b      	bls.n	1280e <settings_commit_subtree+0x46>
   127d6:	491c      	ldr	r1, [pc, #112]	; (12848 <settings_commit_subtree+0x80>)
   127d8:	481c      	ldr	r0, [pc, #112]	; (1284c <settings_commit_subtree+0x84>)
   127da:	22f4      	movs	r2, #244	; 0xf4
   127dc:	f011 f904 	bl	239e8 <assert_print>
   127e0:	4819      	ldr	r0, [pc, #100]	; (12848 <settings_commit_subtree+0x80>)
   127e2:	21f4      	movs	r1, #244	; 0xf4
   127e4:	f011 f8f9 	bl	239da <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   127e8:	b92e      	cbnz	r6, 127f6 <settings_commit_subtree+0x2e>
			continue;
		}
		if (ch->h_commit) {
   127ea:	68e3      	ldr	r3, [r4, #12]
   127ec:	b95b      	cbnz	r3, 12806 <settings_commit_subtree+0x3e>
{
   127ee:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   127f0:	3414      	adds	r4, #20
   127f2:	4605      	mov	r5, r0
   127f4:	e7ed      	b.n	127d2 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   127f6:	6820      	ldr	r0, [r4, #0]
   127f8:	2200      	movs	r2, #0
   127fa:	4631      	mov	r1, r6
   127fc:	f011 fb8a 	bl	23f14 <settings_name_steq>
   12800:	2800      	cmp	r0, #0
   12802:	d1f2      	bne.n	127ea <settings_commit_subtree+0x22>
   12804:	e7f3      	b.n	127ee <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   12806:	4798      	blx	r3
			if (!rc) {
   12808:	2d00      	cmp	r5, #0
   1280a:	d1f0      	bne.n	127ee <settings_commit_subtree+0x26>
   1280c:	e7f0      	b.n	127f0 <settings_commit_subtree+0x28>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1280e:	d3eb      	bcc.n	127e8 <settings_commit_subtree+0x20>
	return list->head;
   12810:	4b0f      	ldr	r3, [pc, #60]	; (12850 <settings_commit_subtree+0x88>)
   12812:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12814:	b194      	cbz	r4, 1283c <settings_commit_subtree+0x74>
   12816:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   12818:	b91e      	cbnz	r6, 12822 <settings_commit_subtree+0x5a>
			continue;
		}
		if (ch->h_commit) {
   1281a:	68e3      	ldr	r3, [r4, #12]
   1281c:	b94b      	cbnz	r3, 12832 <settings_commit_subtree+0x6a>
	return node->next;
   1281e:	6964      	ldr	r4, [r4, #20]
   12820:	e7f8      	b.n	12814 <settings_commit_subtree+0x4c>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   12822:	6820      	ldr	r0, [r4, #0]
   12824:	2200      	movs	r2, #0
   12826:	4631      	mov	r1, r6
   12828:	f011 fb74 	bl	23f14 <settings_name_steq>
   1282c:	2800      	cmp	r0, #0
   1282e:	d1f4      	bne.n	1281a <settings_commit_subtree+0x52>
   12830:	e7f5      	b.n	1281e <settings_commit_subtree+0x56>
			rc2 = ch->h_commit();
   12832:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   12834:	2d00      	cmp	r5, #0
   12836:	bf08      	it	eq
   12838:	4605      	moveq	r5, r0
   1283a:	e7f0      	b.n	1281e <settings_commit_subtree+0x56>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1283c:	4628      	mov	r0, r5
   1283e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12840:	00027544 	.word	0x00027544
   12844:	000275bc 	.word	0x000275bc
   12848:	000282bb 	.word	0x000282bb
   1284c:	000280bd 	.word	0x000280bd
   12850:	20001fe4 	.word	0x20001fe4

00012854 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   12854:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   12856:	4c07      	ldr	r4, [pc, #28]	; (12874 <settings_subsys_init+0x20>)
   12858:	7823      	ldrb	r3, [r4, #0]
   1285a:	b10b      	cbz	r3, 12860 <settings_subsys_init+0xc>
		return 0;
   1285c:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   1285e:	bd10      	pop	{r4, pc}
	settings_init();
   12860:	f7ff ff10 	bl	12684 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   12864:	f000 f866 	bl	12934 <settings_backend_init>
	if (!err) {
   12868:	2800      	cmp	r0, #0
   1286a:	d1f8      	bne.n	1285e <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   1286c:	2301      	movs	r3, #1
   1286e:	7023      	strb	r3, [r4, #0]
   12870:	e7f4      	b.n	1285c <settings_subsys_init+0x8>
   12872:	bf00      	nop
   12874:	2000257b 	.word	0x2000257b

00012878 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   12878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   1287c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   1287e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 12930 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   12882:	3401      	adds	r4, #1
{
   12884:	b098      	sub	sp, #96	; 0x60
   12886:	4680      	mov	r8, r0
   12888:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   1288a:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1288c:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   12890:	1e65      	subs	r5, r4, #1
   12892:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   12894:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   12898:	d047      	beq.n	1292a <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1289a:	234a      	movs	r3, #74	; 0x4a
   1289c:	aa05      	add	r2, sp, #20
   1289e:	4629      	mov	r1, r5
   128a0:	4630      	mov	r0, r6
   128a2:	f011 fb06 	bl	23eb2 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   128a6:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   128aa:	343f      	adds	r4, #63	; 0x3f
   128ac:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   128ae:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   128b0:	4621      	mov	r1, r4
   128b2:	2301      	movs	r3, #1
   128b4:	f10d 020b 	add.w	r2, sp, #11
   128b8:	4630      	mov	r0, r6
   128ba:	f011 fafa 	bl	23eb2 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   128be:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   128c0:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   128c2:	dc03      	bgt.n	128cc <settings_nvs_load+0x54>
   128c4:	2800      	cmp	r0, #0
   128c6:	dc03      	bgt.n	128d0 <settings_nvs_load+0x58>
{
   128c8:	462c      	mov	r4, r5
   128ca:	e7e1      	b.n	12890 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   128cc:	2800      	cmp	r0, #0
   128ce:	dc16      	bgt.n	128fe <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   128d0:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   128d4:	42ab      	cmp	r3, r5
   128d6:	d109      	bne.n	128ec <settings_nvs_load+0x74>
				cf->last_name_id--;
   128d8:	4642      	mov	r2, r8
   128da:	1e6b      	subs	r3, r5, #1
   128dc:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   128e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   128e4:	2302      	movs	r3, #2
   128e6:	4630      	mov	r0, r6
   128e8:	f7ff fcb2 	bl	12250 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   128ec:	4629      	mov	r1, r5
   128ee:	4630      	mov	r0, r6
   128f0:	f011 fadb 	bl	23eaa <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   128f4:	4621      	mov	r1, r4
   128f6:	4630      	mov	r0, r6
   128f8:	f011 fad7 	bl	23eaa <nvs_delete>
			continue;
   128fc:	e7e4      	b.n	128c8 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   128fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
   12902:	eb0d 0703 	add.w	r7, sp, r3
   12906:	2300      	movs	r3, #0
   12908:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   1290c:	4652      	mov	r2, sl
   1290e:	f8cd 9000 	str.w	r9, [sp]
   12912:	ab03      	add	r3, sp, #12
   12914:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   12916:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   12918:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   1291c:	f7ff ff14 	bl	12748 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   12920:	2800      	cmp	r0, #0
   12922:	d0d1      	beq.n	128c8 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   12924:	b018      	add	sp, #96	; 0x60
   12926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1292a:	2000      	movs	r0, #0
	return ret;
   1292c:	e7fa      	b.n	12924 <settings_nvs_load+0xac>
   1292e:	bf00      	nop
   12930:	00023f85 	.word	0x00023f85

00012934 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   12934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   12936:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   12938:	4669      	mov	r1, sp
   1293a:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   1293c:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   1293e:	f7ff fdc1 	bl	124c4 <flash_area_open>
	if (rc) {
   12942:	4604      	mov	r4, r0
   12944:	2800      	cmp	r0, #0
   12946:	d134      	bne.n	129b2 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   12948:	aa02      	add	r2, sp, #8
   1294a:	a901      	add	r1, sp, #4
   1294c:	2004      	movs	r0, #4
   1294e:	f7ff fde1 	bl	12514 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   12952:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   12956:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   12958:	d02b      	beq.n	129b2 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   1295a:	b138      	cbz	r0, 1296c <settings_backend_init+0x38>
   1295c:	340c      	adds	r4, #12
   1295e:	d005      	beq.n	1296c <settings_backend_init+0x38>
		k_panic();
   12960:	4040      	eors	r0, r0
   12962:	f380 8811 	msr	BASEPRI, r0
   12966:	f04f 0004 	mov.w	r0, #4
   1296a:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   1296c:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   1296e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   12972:	d223      	bcs.n	129bc <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   12974:	9a00      	ldr	r2, [sp, #0]
   12976:	2300      	movs	r3, #0
   12978:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   1297a:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   1297c:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   1297e:	4284      	cmp	r4, r0
   12980:	d31a      	bcc.n	129b8 <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   12982:	3301      	adds	r3, #1
   12984:	2b08      	cmp	r3, #8
   12986:	d1f9      	bne.n	1297c <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   12988:	4d0e      	ldr	r5, [pc, #56]	; (129c4 <settings_backend_init+0x90>)
   1298a:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   1298c:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1298e:	6853      	ldr	r3, [r2, #4]
   12990:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   12992:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   12994:	68d3      	ldr	r3, [r2, #12]
   12996:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   12998:	f011 fb8e 	bl	240b8 <settings_nvs_backend_init>
	if (rc) {
   1299c:	4604      	mov	r4, r0
   1299e:	b940      	cbnz	r0, 129b2 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   129a0:	4e09      	ldr	r6, [pc, #36]	; (129c8 <settings_backend_init+0x94>)
   129a2:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   129a4:	4628      	mov	r0, r5
   129a6:	f7ff fe0b 	bl	125c0 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   129aa:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   129ac:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   129ae:	f7ff fe15 	bl	125dc <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   129b2:	4620      	mov	r0, r4
   129b4:	b004      	add	sp, #16
   129b6:	bd70      	pop	{r4, r5, r6, pc}
   129b8:	b29b      	uxth	r3, r3
   129ba:	e7e5      	b.n	12988 <settings_backend_init+0x54>
		return -EDOM;
   129bc:	f06f 0420 	mvn.w	r4, #32
   129c0:	e7f7      	b.n	129b2 <settings_backend_init+0x7e>
   129c2:	bf00      	nop
   129c4:	20001fec 	.word	0x20001fec
   129c8:	200005e4 	.word	0x200005e4

000129cc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   129cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   129d0:	4605      	mov	r5, r0
	__asm__ volatile(
   129d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   129d6:	f3ef 8611 	mrs	r6, BASEPRI
   129da:	f383 8812 	msr	BASEPRI_MAX, r3
   129de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   129e2:	481b      	ldr	r0, [pc, #108]	; (12a50 <pm_state_notify+0x84>)
   129e4:	f00d fbc6 	bl	20174 <z_spin_lock_valid>
   129e8:	b940      	cbnz	r0, 129fc <pm_state_notify+0x30>
   129ea:	491a      	ldr	r1, [pc, #104]	; (12a54 <pm_state_notify+0x88>)
   129ec:	481a      	ldr	r0, [pc, #104]	; (12a58 <pm_state_notify+0x8c>)
   129ee:	2294      	movs	r2, #148	; 0x94
   129f0:	f010 fffa 	bl	239e8 <assert_print>
   129f4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   129f6:	4817      	ldr	r0, [pc, #92]	; (12a54 <pm_state_notify+0x88>)
   129f8:	f010 ffef 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   129fc:	4814      	ldr	r0, [pc, #80]	; (12a50 <pm_state_notify+0x84>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   129fe:	4f17      	ldr	r7, [pc, #92]	; (12a5c <pm_state_notify+0x90>)
   12a00:	f8df 805c 	ldr.w	r8, [pc, #92]	; 12a60 <pm_state_notify+0x94>
   12a04:	f00d fbd4 	bl	201b0 <z_spin_lock_set_owner>
	return list->head;
   12a08:	4b16      	ldr	r3, [pc, #88]	; (12a64 <pm_state_notify+0x98>)
   12a0a:	681c      	ldr	r4, [r3, #0]
   12a0c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12a10:	b954      	cbnz	r4, 12a28 <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12a12:	480f      	ldr	r0, [pc, #60]	; (12a50 <pm_state_notify+0x84>)
   12a14:	f00d fbbc 	bl	20190 <z_spin_unlock_valid>
   12a18:	b9a0      	cbnz	r0, 12a44 <pm_state_notify+0x78>
   12a1a:	490e      	ldr	r1, [pc, #56]	; (12a54 <pm_state_notify+0x88>)
   12a1c:	480e      	ldr	r0, [pc, #56]	; (12a58 <pm_state_notify+0x8c>)
   12a1e:	22c2      	movs	r2, #194	; 0xc2
   12a20:	f010 ffe2 	bl	239e8 <assert_print>
   12a24:	21c2      	movs	r1, #194	; 0xc2
   12a26:	e7e6      	b.n	129f6 <pm_state_notify+0x2a>
			callback = notifier->state_exit;
   12a28:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   12a2c:	2d00      	cmp	r5, #0
   12a2e:	bf18      	it	ne
   12a30:	4613      	movne	r3, r2
		if (callback) {
   12a32:	b12b      	cbz	r3, 12a40 <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12a34:	f898 2014 	ldrb.w	r2, [r8, #20]
   12a38:	fb09 f202 	mul.w	r2, r9, r2
   12a3c:	5cb8      	ldrb	r0, [r7, r2]
   12a3e:	4798      	blx	r3
	return node->next;
   12a40:	6824      	ldr	r4, [r4, #0]
   12a42:	e7e5      	b.n	12a10 <pm_state_notify+0x44>
	__asm__ volatile(
   12a44:	f386 8811 	msr	BASEPRI, r6
   12a48:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12a50:	2000202c 	.word	0x2000202c
   12a54:	000280f7 	.word	0x000280f7
   12a58:	000280bd 	.word	0x000280bd
   12a5c:	20002040 	.word	0x20002040
   12a60:	20002500 	.word	0x20002500
   12a64:	2000204c 	.word	0x2000204c

00012a68 <pm_system_resume>:

void pm_system_resume(void)
{
   12a68:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   12a6a:	4b19      	ldr	r3, [pc, #100]	; (12ad0 <pm_system_resume+0x68>)
   12a6c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12a6e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   12a72:	f004 031f 	and.w	r3, r4, #31
   12a76:	2201      	movs	r2, #1
   12a78:	409a      	lsls	r2, r3
   12a7a:	4b16      	ldr	r3, [pc, #88]	; (12ad4 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12a7c:	0961      	lsrs	r1, r4, #5
   12a7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12a82:	43d0      	mvns	r0, r2
   12a84:	e853 1f00 	ldrex	r1, [r3]
   12a88:	ea01 0500 	and.w	r5, r1, r0
   12a8c:	e843 5600 	strex	r6, r5, [r3]
   12a90:	2e00      	cmp	r6, #0
   12a92:	d1f7      	bne.n	12a84 <pm_system_resume+0x1c>
   12a94:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12a98:	420a      	tst	r2, r1
   12a9a:	d013      	beq.n	12ac4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   12a9c:	4b0e      	ldr	r3, [pc, #56]	; (12ad8 <pm_system_resume+0x70>)
   12a9e:	4d0f      	ldr	r5, [pc, #60]	; (12adc <pm_system_resume+0x74>)
   12aa0:	b18b      	cbz	r3, 12ac6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   12aa2:	230c      	movs	r3, #12
   12aa4:	4363      	muls	r3, r4
   12aa6:	18ea      	adds	r2, r5, r3
   12aa8:	5ce8      	ldrb	r0, [r5, r3]
   12aaa:	7851      	ldrb	r1, [r2, #1]
   12aac:	f011 fe42 	bl	24734 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   12ab0:	2000      	movs	r0, #0
   12ab2:	f7ff ff8b 	bl	129cc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12ab6:	230c      	movs	r3, #12
   12ab8:	435c      	muls	r4, r3
   12aba:	192a      	adds	r2, r5, r4
   12abc:	2300      	movs	r3, #0
   12abe:	512b      	str	r3, [r5, r4]
   12ac0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   12ac4:	bd70      	pop	{r4, r5, r6, pc}
   12ac6:	f383 8811 	msr	BASEPRI, r3
   12aca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12ace:	e7ef      	b.n	12ab0 <pm_system_resume+0x48>
   12ad0:	20002500 	.word	0x20002500
   12ad4:	20002054 	.word	0x20002054
   12ad8:	00024735 	.word	0x00024735
   12adc:	20002040 	.word	0x20002040

00012ae0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   12ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   12ae4:	4b42      	ldr	r3, [pc, #264]	; (12bf0 <pm_system_suspend+0x110>)
{
   12ae6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   12ae8:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   12aea:	f04f 0340 	mov.w	r3, #64	; 0x40
   12aee:	f3ef 8811 	mrs	r8, BASEPRI
   12af2:	f383 8812 	msr	BASEPRI_MAX, r3
   12af6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12afa:	483e      	ldr	r0, [pc, #248]	; (12bf4 <pm_system_suspend+0x114>)
   12afc:	f00d fb3a 	bl	20174 <z_spin_lock_valid>
   12b00:	b940      	cbnz	r0, 12b14 <pm_system_suspend+0x34>
   12b02:	493d      	ldr	r1, [pc, #244]	; (12bf8 <pm_system_suspend+0x118>)
   12b04:	483d      	ldr	r0, [pc, #244]	; (12bfc <pm_system_suspend+0x11c>)
   12b06:	2294      	movs	r2, #148	; 0x94
   12b08:	f010 ff6e 	bl	239e8 <assert_print>
   12b0c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12b0e:	483a      	ldr	r0, [pc, #232]	; (12bf8 <pm_system_suspend+0x118>)
   12b10:	f010 ff63 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   12b14:	4837      	ldr	r0, [pc, #220]	; (12bf4 <pm_system_suspend+0x114>)
   12b16:	4e3a      	ldr	r6, [pc, #232]	; (12c00 <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   12b18:	240c      	movs	r4, #12
   12b1a:	f00d fb49 	bl	201b0 <z_spin_lock_set_owner>
   12b1e:	436c      	muls	r4, r5
   12b20:	4b38      	ldr	r3, [pc, #224]	; (12c04 <pm_system_suspend+0x124>)
   12b22:	5d19      	ldrb	r1, [r3, r4]
   12b24:	191a      	adds	r2, r3, r4
   12b26:	b191      	cbz	r1, 12b4e <pm_system_suspend+0x6e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   12b28:	ca07      	ldmia	r2, {r0, r1, r2}
   12b2a:	eb06 0c04 	add.w	ip, r6, r4
   12b2e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   12b32:	2200      	movs	r2, #0
   12b34:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12b36:	482f      	ldr	r0, [pc, #188]	; (12bf4 <pm_system_suspend+0x114>)
   12b38:	f00d fb2a 	bl	20190 <z_spin_unlock_valid>
   12b3c:	4604      	mov	r4, r0
   12b3e:	b988      	cbnz	r0, 12b64 <pm_system_suspend+0x84>
   12b40:	492d      	ldr	r1, [pc, #180]	; (12bf8 <pm_system_suspend+0x118>)
   12b42:	482e      	ldr	r0, [pc, #184]	; (12bfc <pm_system_suspend+0x11c>)
   12b44:	22c2      	movs	r2, #194	; 0xc2
   12b46:	f010 ff4f 	bl	239e8 <assert_print>
   12b4a:	21c2      	movs	r1, #194	; 0xc2
   12b4c:	e7df      	b.n	12b0e <pm_system_suspend+0x2e>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   12b4e:	4639      	mov	r1, r7
   12b50:	4628      	mov	r0, r5
   12b52:	f000 f861 	bl	12c18 <pm_policy_next_state>
		if (info != NULL) {
   12b56:	2800      	cmp	r0, #0
   12b58:	d0ed      	beq.n	12b36 <pm_system_suspend+0x56>
			z_cpus_pm_state[id] = *info;
   12b5a:	c807      	ldmia	r0, {r0, r1, r2}
   12b5c:	4434      	add	r4, r6
   12b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   12b62:	e7e8      	b.n	12b36 <pm_system_suspend+0x56>
	__asm__ volatile(
   12b64:	f388 8811 	msr	BASEPRI, r8
   12b68:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12b6c:	230c      	movs	r3, #12
   12b6e:	436b      	muls	r3, r5
   12b70:	18f2      	adds	r2, r6, r3
   12b72:	5cf3      	ldrb	r3, [r6, r3]
   12b74:	2b00      	cmp	r3, #0
   12b76:	d039      	beq.n	12bec <pm_system_suspend+0x10c>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   12b78:	1c7b      	adds	r3, r7, #1
   12b7a:	d00f      	beq.n	12b9c <pm_system_suspend+0xbc>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12b7c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12b80:	4821      	ldr	r0, [pc, #132]	; (12c08 <pm_system_suspend+0x128>)
   12b82:	4a22      	ldr	r2, [pc, #136]	; (12c0c <pm_system_suspend+0x12c>)
   12b84:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   12b88:	2100      	movs	r1, #0
   12b8a:	2300      	movs	r3, #0
   12b8c:	fbee 010c 	umlal	r0, r1, lr, ip
   12b90:	f7ed faa6 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12b94:	2101      	movs	r1, #1
   12b96:	1a38      	subs	r0, r7, r0
   12b98:	f00f fc7e 	bl	22498 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12b9c:	f00e fc9e 	bl	214dc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   12ba0:	2001      	movs	r0, #1
   12ba2:	f7ff ff13 	bl	129cc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12ba6:	f3bf 8f5b 	dmb	ish
   12baa:	4b19      	ldr	r3, [pc, #100]	; (12c10 <pm_system_suspend+0x130>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12bac:	096a      	lsrs	r2, r5, #5
   12bae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   12bb2:	f005 011f 	and.w	r1, r5, #31
   12bb6:	2201      	movs	r2, #1
   12bb8:	408a      	lsls	r2, r1
   12bba:	e853 0f00 	ldrex	r0, [r3]
   12bbe:	4310      	orrs	r0, r2
   12bc0:	e843 0100 	strex	r1, r0, [r3]
   12bc4:	2900      	cmp	r1, #0
   12bc6:	d1f8      	bne.n	12bba <pm_system_suspend+0xda>
   12bc8:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   12bcc:	4b11      	ldr	r3, [pc, #68]	; (12c14 <pm_system_suspend+0x134>)
   12bce:	b133      	cbz	r3, 12bde <pm_system_suspend+0xfe>
		pm_state_set(info->state, info->substate_id);
   12bd0:	230c      	movs	r3, #12
   12bd2:	436b      	muls	r3, r5
   12bd4:	18f2      	adds	r2, r6, r3
   12bd6:	5cf0      	ldrb	r0, [r6, r3]
   12bd8:	7851      	ldrb	r1, [r2, #1]
   12bda:	f011 fd9f 	bl	2471c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   12bde:	f7ff ff43 	bl	12a68 <pm_system_resume>
	k_sched_unlock();
   12be2:	f00e fcc7 	bl	21574 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   12be6:	4620      	mov	r0, r4
   12be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   12bec:	461c      	mov	r4, r3
   12bee:	e7fa      	b.n	12be6 <pm_system_suspend+0x106>
   12bf0:	20002500 	.word	0x20002500
   12bf4:	20002030 	.word	0x20002030
   12bf8:	000280f7 	.word	0x000280f7
   12bfc:	000280bd 	.word	0x000280bd
   12c00:	20002040 	.word	0x20002040
   12c04:	20002034 	.word	0x20002034
   12c08:	000f423f 	.word	0x000f423f
   12c0c:	000f4240 	.word	0x000f4240
   12c10:	20002054 	.word	0x20002054
   12c14:	0002471d 	.word	0x0002471d

00012c18 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   12c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c1c:	b085      	sub	sp, #20
   12c1e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12c20:	a903      	add	r1, sp, #12
   12c22:	f000 f843 	bl	12cac <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12c26:	4b1e      	ldr	r3, [pc, #120]	; (12ca0 <pm_policy_next_state+0x88>)
   12c28:	9d03      	ldr	r5, [sp, #12]
   12c2a:	f8d3 a000 	ldr.w	sl, [r3]
   12c2e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 12ca4 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12c32:	1e43      	subs	r3, r0, #1
   12c34:	b21b      	sxth	r3, r3
   12c36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12c3a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12c3c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12c40:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   12c44:	f04f 0b00 	mov.w	fp, #0
   12c48:	b924      	cbnz	r4, 12c54 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   12c4a:	46a1      	mov	r9, r4
}
   12c4c:	4648      	mov	r0, r9
   12c4e:	b005      	add	sp, #20
   12c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c54:	6868      	ldr	r0, [r5, #4]
   12c56:	4a14      	ldr	r2, [pc, #80]	; (12ca8 <pm_policy_next_state+0x90>)
   12c58:	46c4      	mov	ip, r8
   12c5a:	4659      	mov	r1, fp
   12c5c:	fbe0 c107 	umlal	ip, r1, r0, r7
   12c60:	2300      	movs	r3, #0
   12c62:	4660      	mov	r0, ip
   12c64:	f7ed fa3c 	bl	e0 <__aeabi_uldivmod>
   12c68:	9001      	str	r0, [sp, #4]
   12c6a:	68a8      	ldr	r0, [r5, #8]
   12c6c:	4a0e      	ldr	r2, [pc, #56]	; (12ca8 <pm_policy_next_state+0x90>)
   12c6e:	46c4      	mov	ip, r8
   12c70:	4659      	mov	r1, fp
   12c72:	fbe0 c107 	umlal	ip, r1, r0, r7
   12c76:	2300      	movs	r3, #0
   12c78:	4660      	mov	r0, ip
   12c7a:	f7ed fa31 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12c7e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   12c82:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12c84:	d001      	beq.n	12c8a <pm_policy_next_state+0x72>
   12c86:	4582      	cmp	sl, r0
   12c88:	d905      	bls.n	12c96 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   12c8a:	1c73      	adds	r3, r6, #1
   12c8c:	d0de      	beq.n	12c4c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   12c8e:	9b01      	ldr	r3, [sp, #4]
   12c90:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   12c92:	42b0      	cmp	r0, r6
   12c94:	d9da      	bls.n	12c4c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12c96:	3c01      	subs	r4, #1
   12c98:	b2a4      	uxth	r4, r4
   12c9a:	3d0c      	subs	r5, #12
   12c9c:	e7d4      	b.n	12c48 <pm_policy_next_state+0x30>
   12c9e:	bf00      	nop
   12ca0:	200005f8 	.word	0x200005f8
   12ca4:	000f423f 	.word	0x000f423f
   12ca8:	000f4240 	.word	0x000f4240

00012cac <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   12cac:	b908      	cbnz	r0, 12cb2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   12cae:	4b02      	ldr	r3, [pc, #8]	; (12cb8 <pm_state_cpu_get_all+0xc>)
   12cb0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   12cb2:	2000      	movs	r0, #0
   12cb4:	4770      	bx	lr
   12cb6:	bf00      	nop
   12cb8:	000276c4 	.word	0x000276c4

00012cbc <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   12cbc:	1e4b      	subs	r3, r1, #1
   12cbe:	4259      	negs	r1, r3
   12cc0:	4159      	adcs	r1, r3
   12cc2:	4b01      	ldr	r3, [pc, #4]	; (12cc8 <lbslc_ccc_cfg_changed+0xc>)
   12cc4:	7019      	strb	r1, [r3, #0]
}
   12cc6:	4770      	bx	lr
   12cc8:	2000257d 	.word	0x2000257d

00012ccc <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   12ccc:	b508      	push	{r3, lr}
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 1U) {
   12cce:	2b01      	cmp	r3, #1
{
   12cd0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (len != 1U) {
   12cd4:	d10c      	bne.n	12cf0 <write_led+0x24>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   12cd6:	b971      	cbnz	r1, 12cf6 <write_led+0x2a>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
   12cd8:	4b0a      	ldr	r3, [pc, #40]	; (12d04 <write_led+0x38>)
   12cda:	681b      	ldr	r3, [r3, #0]
   12cdc:	b90b      	cbnz	r3, 12ce2 <write_led+0x16>
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
   12cde:	2001      	movs	r0, #1
}
   12ce0:	bd08      	pop	{r3, pc}
		uint8_t val = *((uint8_t *)buf);
   12ce2:	7810      	ldrb	r0, [r2, #0]
		if (val == 0x00 || val == 0x01) {
   12ce4:	2801      	cmp	r0, #1
   12ce6:	d809      	bhi.n	12cfc <write_led+0x30>
			lbs_cb.led_cb(val ? true : false);
   12ce8:	f000 0001 	and.w	r0, r0, #1
   12cec:	4798      	blx	r3
   12cee:	e7f6      	b.n	12cde <write_led+0x12>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12cf0:	f06f 000c 	mvn.w	r0, #12
   12cf4:	e7f4      	b.n	12ce0 <write_led+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12cf6:	f06f 0006 	mvn.w	r0, #6
   12cfa:	e7f1      	b.n	12ce0 <write_led+0x14>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   12cfc:	f06f 0012 	mvn.w	r0, #18
   12d00:	e7ee      	b.n	12ce0 <write_led+0x14>
   12d02:	bf00      	nop
   12d04:	20002058 	.word	0x20002058

00012d08 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   12d08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12d0c:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (lbs_cb.button_cb) {
   12d0e:	4b0d      	ldr	r3, [pc, #52]	; (12d44 <read_button+0x3c>)
{
   12d10:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
   12d12:	6858      	ldr	r0, [r3, #4]
{
   12d14:	460c      	mov	r4, r1
   12d16:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
   12d18:	b180      	cbz	r0, 12d3c <read_button+0x34>
	const char *value = attr->user_data;
   12d1a:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
   12d1e:	4780      	blx	r0
   12d20:	4b09      	ldr	r3, [pc, #36]	; (12d48 <read_button+0x40>)
   12d22:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   12d24:	2301      	movs	r3, #1
   12d26:	e9cd 8301 	strd	r8, r3, [sp, #4]
   12d2a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12d2e:	9300      	str	r3, [sp, #0]
   12d30:	4632      	mov	r2, r6
   12d32:	463b      	mov	r3, r7
   12d34:	4621      	mov	r1, r4
   12d36:	4628      	mov	r0, r5
   12d38:	f012 ffad 	bl	25c96 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   12d3c:	b004      	add	sp, #16
   12d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d42:	bf00      	nop
   12d44:	20002058 	.word	0x20002058
   12d48:	2000257c 	.word	0x2000257c

00012d4c <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
   12d4c:	b120      	cbz	r0, 12d58 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
   12d4e:	4b03      	ldr	r3, [pc, #12]	; (12d5c <bt_lbs_init+0x10>)
   12d50:	6802      	ldr	r2, [r0, #0]
   12d52:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
   12d54:	6842      	ldr	r2, [r0, #4]
   12d56:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
   12d58:	2000      	movs	r0, #0
   12d5a:	4770      	bx	lr
   12d5c:	20002058 	.word	0x20002058

00012d60 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
   12d60:	b500      	push	{lr}
	if (!notify_enabled) {
   12d62:	4b0e      	ldr	r3, [pc, #56]	; (12d9c <bt_lbs_send_button_state+0x3c>)
{
   12d64:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
   12d66:	781b      	ldrb	r3, [r3, #0]
{
   12d68:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
   12d6c:	b19b      	cbz	r3, 12d96 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   12d6e:	2100      	movs	r1, #0
   12d70:	2218      	movs	r2, #24
   12d72:	a802      	add	r0, sp, #8
   12d74:	f011 fcc6 	bl	24704 <memset>

	params.attr = attr;
   12d78:	4b09      	ldr	r3, [pc, #36]	; (12da0 <bt_lbs_send_button_state+0x40>)
   12d7a:	9303      	str	r3, [sp, #12]
	params.data = data;
   12d7c:	f10d 0307 	add.w	r3, sp, #7
   12d80:	9304      	str	r3, [sp, #16]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   12d82:	a902      	add	r1, sp, #8
	params.len = len;
   12d84:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   12d86:	2000      	movs	r0, #0
	params.len = len;
   12d88:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   12d8c:	f006 fb46 	bl	1941c <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
   12d90:	b009      	add	sp, #36	; 0x24
   12d92:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   12d96:	f06f 000c 	mvn.w	r0, #12
   12d9a:	e7f9      	b.n	12d90 <bt_lbs_send_button_state+0x30>
   12d9c:	2000257d 	.word	0x2000257d
   12da0:	000276ec 	.word	0x000276ec

00012da4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12da4:	4904      	ldr	r1, [pc, #16]	; (12db8 <sub_bytes+0x14>)
   12da6:	1e43      	subs	r3, r0, #1
   12da8:	300f      	adds	r0, #15
   12daa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12dae:	5c8a      	ldrb	r2, [r1, r2]
   12db0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   12db2:	4283      	cmp	r3, r0
   12db4:	d1f9      	bne.n	12daa <sub_bytes+0x6>
	}
}
   12db6:	4770      	bx	lr
   12db8:	00028321 	.word	0x00028321

00012dbc <tc_aes128_set_encrypt_key>:
{
   12dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   12dbe:	4e26      	ldr	r6, [pc, #152]	; (12e58 <tc_aes128_set_encrypt_key+0x9c>)
{
   12dc0:	4607      	mov	r7, r0
   12dc2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12dc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12dc6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12dc8:	ad01      	add	r5, sp, #4
   12dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12dcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12dd0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12dd4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   12dd8:	4638      	mov	r0, r7
   12dda:	2f00      	cmp	r7, #0
   12ddc:	d038      	beq.n	12e50 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   12dde:	2c00      	cmp	r4, #0
   12de0:	d038      	beq.n	12e54 <tc_aes128_set_encrypt_key+0x98>
   12de2:	1f38      	subs	r0, r7, #4
   12de4:	4621      	mov	r1, r4
   12de6:	4602      	mov	r2, r0
   12de8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12dea:	784b      	ldrb	r3, [r1, #1]
   12dec:	780d      	ldrb	r5, [r1, #0]
   12dee:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12df0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12df4:	78cd      	ldrb	r5, [r1, #3]
   12df6:	432b      	orrs	r3, r5
   12df8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   12dfa:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12dfc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   12e00:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12e02:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12e06:	d1f0      	bne.n	12dea <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12e08:	4c14      	ldr	r4, [pc, #80]	; (12e5c <tc_aes128_set_encrypt_key+0xa0>)
   12e0a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12e0c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   12e0e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12e10:	d116      	bne.n	12e40 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12e12:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12e16:	5ca5      	ldrb	r5, [r4, r2]
   12e18:	0e1a      	lsrs	r2, r3, #24
   12e1a:	5ca2      	ldrb	r2, [r4, r2]
   12e1c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12e20:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12e24:	b2db      	uxtb	r3, r3
   12e26:	5d65      	ldrb	r5, [r4, r5]
   12e28:	5ce3      	ldrb	r3, [r4, r3]
   12e2a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   12e2e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12e32:	f021 0303 	bic.w	r3, r1, #3
   12e36:	3330      	adds	r3, #48	; 0x30
   12e38:	446b      	add	r3, sp
   12e3a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   12e3e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   12e40:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12e44:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12e46:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12e48:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   12e4a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12e4c:	d1de      	bne.n	12e0c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   12e4e:	2001      	movs	r0, #1
}
   12e50:	b00d      	add	sp, #52	; 0x34
   12e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12e54:	4620      	mov	r0, r4
   12e56:	e7fb      	b.n	12e50 <tc_aes128_set_encrypt_key+0x94>
   12e58:	000275d4 	.word	0x000275d4
   12e5c:	00028321 	.word	0x00028321

00012e60 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12e60:	4901      	ldr	r1, [pc, #4]	; (12e68 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12e62:	2210      	movs	r2, #16
	str	r2, [r1]
   12e64:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12e66:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12e68:	e000ed10 	.word	0xe000ed10

00012e6c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12e6c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12e6e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12e70:	f380 8811 	msr	BASEPRI, r0
	isb
   12e74:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12e78:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12e7c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12e7e:	b662      	cpsie	i
	isb
   12e80:	f3bf 8f6f 	isb	sy

	bx	lr
   12e84:	4770      	bx	lr
   12e86:	bf00      	nop

00012e88 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12e88:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12e8a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12e8c:	f381 8811 	msr	BASEPRI, r1

	wfe
   12e90:	bf20      	wfe

	msr	BASEPRI, r0
   12e92:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12e96:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12e98:	4770      	bx	lr
   12e9a:	bf00      	nop

00012e9c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12e9e:	4605      	mov	r5, r0

	if (esf != NULL) {
   12ea0:	460c      	mov	r4, r1
   12ea2:	b1c9      	cbz	r1, 12ed8 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12ea4:	688b      	ldr	r3, [r1, #8]
   12ea6:	9300      	str	r3, [sp, #0]
   12ea8:	e9d1 2300 	ldrd	r2, r3, [r1]
   12eac:	480e      	ldr	r0, [pc, #56]	; (12ee8 <z_arm_fatal_error+0x4c>)
   12eae:	2145      	movs	r1, #69	; 0x45
   12eb0:	f010 fda8 	bl	23a04 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12eb4:	6963      	ldr	r3, [r4, #20]
   12eb6:	9300      	str	r3, [sp, #0]
   12eb8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   12ebc:	480b      	ldr	r0, [pc, #44]	; (12eec <z_arm_fatal_error+0x50>)
   12ebe:	2145      	movs	r1, #69	; 0x45
   12ec0:	f010 fda0 	bl	23a04 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12ec4:	69e2      	ldr	r2, [r4, #28]
   12ec6:	480a      	ldr	r0, [pc, #40]	; (12ef0 <z_arm_fatal_error+0x54>)
   12ec8:	2145      	movs	r1, #69	; 0x45
   12eca:	f010 fd9b 	bl	23a04 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12ece:	69a2      	ldr	r2, [r4, #24]
   12ed0:	4808      	ldr	r0, [pc, #32]	; (12ef4 <z_arm_fatal_error+0x58>)
   12ed2:	2145      	movs	r1, #69	; 0x45
   12ed4:	f010 fd96 	bl	23a04 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12ed8:	4621      	mov	r1, r4
   12eda:	4628      	mov	r0, r5
}
   12edc:	b003      	add	sp, #12
   12ede:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   12ee2:	f00c bd4d 	b.w	1f980 <z_fatal_error>
   12ee6:	bf00      	nop
   12ee8:	00028421 	.word	0x00028421
   12eec:	00028455 	.word	0x00028455
   12ef0:	00028489 	.word	0x00028489
   12ef4:	0002849d 	.word	0x0002849d

00012ef8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12ef8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12efa:	2800      	cmp	r0, #0
   12efc:	db07      	blt.n	12f0e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12efe:	4a04      	ldr	r2, [pc, #16]	; (12f10 <arch_irq_enable+0x18>)
   12f00:	0941      	lsrs	r1, r0, #5
   12f02:	2301      	movs	r3, #1
   12f04:	f000 001f 	and.w	r0, r0, #31
   12f08:	4083      	lsls	r3, r0
   12f0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   12f0e:	4770      	bx	lr
   12f10:	e000e100 	.word	0xe000e100

00012f14 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12f14:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12f16:	2800      	cmp	r0, #0
   12f18:	db0c      	blt.n	12f34 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12f1a:	0943      	lsrs	r3, r0, #5
   12f1c:	4906      	ldr	r1, [pc, #24]	; (12f38 <arch_irq_disable+0x24>)
   12f1e:	f000 001f 	and.w	r0, r0, #31
   12f22:	3320      	adds	r3, #32
   12f24:	2201      	movs	r2, #1
   12f26:	4082      	lsls	r2, r0
   12f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12f2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12f30:	f3bf 8f6f 	isb	sy
}
   12f34:	4770      	bx	lr
   12f36:	bf00      	nop
   12f38:	e000e100 	.word	0xe000e100

00012f3c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12f3c:	4b05      	ldr	r3, [pc, #20]	; (12f54 <arch_irq_is_enabled+0x18>)
   12f3e:	0942      	lsrs	r2, r0, #5
   12f40:	f000 001f 	and.w	r0, r0, #31
   12f44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12f48:	2301      	movs	r3, #1
   12f4a:	fa03 f000 	lsl.w	r0, r3, r0
}
   12f4e:	4010      	ands	r0, r2
   12f50:	4770      	bx	lr
   12f52:	bf00      	nop
   12f54:	e000e100 	.word	0xe000e100

00012f58 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   12f58:	b508      	push	{r3, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12f5a:	07d3      	lsls	r3, r2, #31
   12f5c:	d40b      	bmi.n	12f76 <z_arm_irq_priority_set+0x1e>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   12f5e:	3102      	adds	r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   12f60:	2907      	cmp	r1, #7
   12f62:	d909      	bls.n	12f78 <z_arm_irq_priority_set+0x20>
   12f64:	490e      	ldr	r1, [pc, #56]	; (12fa0 <z_arm_irq_priority_set+0x48>)
   12f66:	480f      	ldr	r0, [pc, #60]	; (12fa4 <z_arm_irq_priority_set+0x4c>)
   12f68:	225b      	movs	r2, #91	; 0x5b
   12f6a:	f010 fd3d 	bl	239e8 <assert_print>
   12f6e:	480c      	ldr	r0, [pc, #48]	; (12fa0 <z_arm_irq_priority_set+0x48>)
   12f70:	215b      	movs	r1, #91	; 0x5b
   12f72:	f010 fd32 	bl	239da <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12f76:	2100      	movs	r1, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12f78:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12f7a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f7c:	bfac      	ite	ge
   12f7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f82:	4b09      	ldrlt	r3, [pc, #36]	; (12fa8 <z_arm_irq_priority_set+0x50>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f84:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f88:	bfb8      	it	lt
   12f8a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f8e:	b2c9      	uxtb	r1, r1
   12f90:	bfaa      	itet	ge
   12f92:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f96:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f98:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   12f9c:	bd08      	pop	{r3, pc}
   12f9e:	bf00      	nop
   12fa0:	000284d0 	.word	0x000284d0
   12fa4:	000280bd 	.word	0x000280bd
   12fa8:	e000ed14 	.word	0xe000ed14

00012fac <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12fac:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   12fae:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12fb0:	4b04      	ldr	r3, [pc, #16]	; (12fc4 <_arch_isr_direct_pm+0x18>)
   12fb2:	699a      	ldr	r2, [r3, #24]
   12fb4:	b11a      	cbz	r2, 12fbe <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   12fb6:	2200      	movs	r2, #0
   12fb8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   12fba:	f013 feda 	bl	26d72 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12fbe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12fc0:	bd08      	pop	{r3, pc}
   12fc2:	bf00      	nop
   12fc4:	20002500 	.word	0x20002500

00012fc8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12fc8:	bf30      	wfi
    b z_SysNmiOnReset
   12fca:	f7ff bffd 	b.w	12fc8 <z_SysNmiOnReset>
   12fce:	bf00      	nop

00012fd0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12fd0:	4a0b      	ldr	r2, [pc, #44]	; (13000 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   12fd2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12fd4:	4b0b      	ldr	r3, [pc, #44]	; (13004 <z_arm_prep_c+0x34>)
   12fd6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12fda:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12fdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12fe0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12fe4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12fe8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12ff0:	f00c fd5e 	bl	1fab0 <z_bss_zero>
	z_data_copy();
   12ff4:	f00f f8ce 	bl	22194 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12ff8:	f000 fb00 	bl	135fc <z_arm_interrupt_init>
	z_cstart();
   12ffc:	f00c fd9c 	bl	1fb38 <z_cstart>
   13000:	00000000 	.word	0x00000000
   13004:	e000ed00 	.word	0xe000ed00

00013008 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13008:	4a09      	ldr	r2, [pc, #36]	; (13030 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1300a:	490a      	ldr	r1, [pc, #40]	; (13034 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1300c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1300e:	6809      	ldr	r1, [r1, #0]
   13010:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13012:	4909      	ldr	r1, [pc, #36]	; (13038 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13014:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13016:	684b      	ldr	r3, [r1, #4]
   13018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1301c:	604b      	str	r3, [r1, #4]
   1301e:	2300      	movs	r3, #0
   13020:	f383 8811 	msr	BASEPRI, r3
   13024:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13028:	6893      	ldr	r3, [r2, #8]
}
   1302a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1302c:	4770      	bx	lr
   1302e:	bf00      	nop
   13030:	20002500 	.word	0x20002500
   13034:	00027c6c 	.word	0x00027c6c
   13038:	e000ed00 	.word	0xe000ed00

0001303c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1303c:	4912      	ldr	r1, [pc, #72]	; (13088 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1303e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13040:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13044:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13046:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1304a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1304e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13050:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13054:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13058:	4f0c      	ldr	r7, [pc, #48]	; (1308c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1305a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1305e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13060:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13062:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13064:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   13066:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13068:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1306a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1306e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13070:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13072:	f000 fb5f 	bl	13734 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13076:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1307a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1307e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13082:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13086:	4770      	bx	lr
    ldr r1, =_kernel
   13088:	20002500 	.word	0x20002500
    ldr v4, =_SCS_ICSR
   1308c:	e000ed04 	.word	0xe000ed04

00013090 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13090:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13094:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13096:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1309a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1309e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   130a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   130a4:	2902      	cmp	r1, #2
    beq _oops
   130a6:	d0ff      	beq.n	130a8 <_oops>

000130a8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   130a8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   130aa:	f011 fa50 	bl	2454e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   130ae:	bd01      	pop	{r0, pc}

000130b0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   130b0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   130b4:	9b00      	ldr	r3, [sp, #0]
   130b6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   130ba:	490a      	ldr	r1, [pc, #40]	; (130e4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   130bc:	9b01      	ldr	r3, [sp, #4]
   130be:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   130c2:	9b02      	ldr	r3, [sp, #8]
   130c4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   130c8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   130cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   130d0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   130d4:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   130d8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   130da:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   130dc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   130de:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   130e0:	4770      	bx	lr
   130e2:	bf00      	nop
   130e4:	0002360d 	.word	0x0002360d

000130e8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   130e8:	4a09      	ldr	r2, [pc, #36]	; (13110 <z_check_thread_stack_fail+0x28>)
{
   130ea:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   130ec:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   130ee:	b170      	cbz	r0, 1310e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   130f0:	f113 0f16 	cmn.w	r3, #22
   130f4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   130f6:	d005      	beq.n	13104 <z_check_thread_stack_fail+0x1c>
   130f8:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   130fc:	429a      	cmp	r2, r3
   130fe:	d805      	bhi.n	1310c <z_check_thread_stack_fail+0x24>
   13100:	4283      	cmp	r3, r0
   13102:	d203      	bcs.n	1310c <z_check_thread_stack_fail+0x24>
		return 0;
   13104:	4281      	cmp	r1, r0
   13106:	bf28      	it	cs
   13108:	2000      	movcs	r0, #0
   1310a:	4770      	bx	lr
   1310c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   1310e:	4770      	bx	lr
   13110:	20002500 	.word	0x20002500

00013114 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13114:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13116:	4b09      	ldr	r3, [pc, #36]	; (1313c <arch_switch_to_main_thread+0x28>)
   13118:	6098      	str	r0, [r3, #8]
{
   1311a:	460d      	mov	r5, r1
   1311c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1311e:	f000 fb09 	bl	13734 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13122:	4620      	mov	r0, r4
   13124:	f385 8809 	msr	PSP, r5
   13128:	2100      	movs	r1, #0
   1312a:	b663      	cpsie	if
   1312c:	f381 8811 	msr	BASEPRI, r1
   13130:	f3bf 8f6f 	isb	sy
   13134:	2200      	movs	r2, #0
   13136:	2300      	movs	r3, #0
   13138:	f010 fa68 	bl	2360c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1313c:	20002500 	.word	0x20002500

00013140 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13140:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13142:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13144:	4a0b      	ldr	r2, [pc, #44]	; (13174 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13146:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13148:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1314a:	bf1e      	ittt	ne
	movne	r1, #0
   1314c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1314e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13150:	f013 fe0f 	blne	26d72 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13154:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13156:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1315a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1315e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13162:	4905      	ldr	r1, [pc, #20]	; (13178 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13164:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13166:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13168:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1316a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1316e:	4903      	ldr	r1, [pc, #12]	; (1317c <_isr_wrapper+0x3c>)
	bx r1
   13170:	4708      	bx	r1
   13172:	0000      	.short	0x0000
	ldr r2, =_kernel
   13174:	20002500 	.word	0x20002500
	ldr r1, =_sw_isr_table
   13178:	00027278 	.word	0x00027278
	ldr r1, =z_arm_int_exit
   1317c:	00013181 	.word	0x00013181

00013180 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13180:	4b04      	ldr	r3, [pc, #16]	; (13194 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13182:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13184:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13186:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13188:	d003      	beq.n	13192 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1318a:	4903      	ldr	r1, [pc, #12]	; (13198 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1318c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13190:	600a      	str	r2, [r1, #0]

00013192 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13192:	4770      	bx	lr
	ldr r3, =_kernel
   13194:	20002500 	.word	0x20002500
	ldr r1, =_SCS_ICSR
   13198:	e000ed04 	.word	0xe000ed04

0001319c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   1319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   131a0:	4c38      	ldr	r4, [pc, #224]	; (13284 <mem_manage_fault+0xe8>)
{
   131a2:	4607      	mov	r7, r0
   131a4:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   131a6:	4838      	ldr	r0, [pc, #224]	; (13288 <mem_manage_fault+0xec>)
   131a8:	2145      	movs	r1, #69	; 0x45
{
   131aa:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   131ac:	f010 fc2a 	bl	23a04 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   131b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   131b2:	06d8      	lsls	r0, r3, #27
   131b4:	d503      	bpl.n	131be <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   131b6:	4835      	ldr	r0, [pc, #212]	; (1328c <mem_manage_fault+0xf0>)
   131b8:	2145      	movs	r1, #69	; 0x45
   131ba:	f010 fc23 	bl	23a04 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   131be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   131c0:	0719      	lsls	r1, r3, #28
   131c2:	d503      	bpl.n	131cc <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   131c4:	4832      	ldr	r0, [pc, #200]	; (13290 <mem_manage_fault+0xf4>)
   131c6:	2145      	movs	r1, #69	; 0x45
   131c8:	f010 fc1c 	bl	23a04 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   131cc:	4c2d      	ldr	r4, [pc, #180]	; (13284 <mem_manage_fault+0xe8>)
   131ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   131d0:	079a      	lsls	r2, r3, #30
   131d2:	d432      	bmi.n	1323a <mem_manage_fault+0x9e>
	uint32_t mmfar = -EINVAL;
   131d4:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   131d8:	4c2a      	ldr	r4, [pc, #168]	; (13284 <mem_manage_fault+0xe8>)
   131da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   131dc:	07d8      	lsls	r0, r3, #31
   131de:	d503      	bpl.n	131e8 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   131e0:	482c      	ldr	r0, [pc, #176]	; (13294 <mem_manage_fault+0xf8>)
   131e2:	2145      	movs	r1, #69	; 0x45
   131e4:	f010 fc0e 	bl	23a04 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   131e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   131ea:	0699      	lsls	r1, r3, #26
   131ec:	d503      	bpl.n	131f6 <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   131ee:	482a      	ldr	r0, [pc, #168]	; (13298 <mem_manage_fault+0xfc>)
   131f0:	2145      	movs	r1, #69	; 0x45
   131f2:	f010 fc07 	bl	23a04 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   131f6:	4c23      	ldr	r4, [pc, #140]	; (13284 <mem_manage_fault+0xe8>)
   131f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   131fa:	06da      	lsls	r2, r3, #27
   131fc:	d402      	bmi.n	13204 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   131fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13200:	079b      	lsls	r3, r3, #30
   13202:	d53d      	bpl.n	13280 <mem_manage_fault+0xe4>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13204:	6863      	ldr	r3, [r4, #4]
   13206:	0518      	lsls	r0, r3, #20
   13208:	d53a      	bpl.n	13280 <mem_manage_fault+0xe4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1320a:	4639      	mov	r1, r7
   1320c:	4630      	mov	r0, r6
   1320e:	f7ff ff6b 	bl	130e8 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   13212:	b338      	cbz	r0, 13264 <mem_manage_fault+0xc8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13214:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   13218:	2002      	movs	r0, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1321a:	4b1a      	ldr	r3, [pc, #104]	; (13284 <mem_manage_fault+0xe8>)
   1321c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1321e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   13220:	bf42      	ittt	mi
   13222:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   13224:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   13228:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1322a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1322c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   13230:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13232:	2300      	movs	r3, #0
   13234:	702b      	strb	r3, [r5, #0]

	return reason;
}
   13236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   1323a:	4818      	ldr	r0, [pc, #96]	; (1329c <mem_manage_fault+0x100>)
   1323c:	2145      	movs	r1, #69	; 0x45
   1323e:	f010 fbe1 	bl	23a04 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   13242:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13246:	061b      	lsls	r3, r3, #24
   13248:	d5c4      	bpl.n	131d4 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1324a:	4815      	ldr	r0, [pc, #84]	; (132a0 <mem_manage_fault+0x104>)
   1324c:	4632      	mov	r2, r6
   1324e:	2145      	movs	r1, #69	; 0x45
   13250:	f010 fbd8 	bl	23a04 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   13254:	f1b8 0f00 	cmp.w	r8, #0
   13258:	d0be      	beq.n	131d8 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1325a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1325c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13260:	62a3      	str	r3, [r4, #40]	; 0x28
   13262:	e7b9      	b.n	131d8 <mem_manage_fault+0x3c>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   13264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13266:	06d9      	lsls	r1, r3, #27
   13268:	d50a      	bpl.n	13280 <mem_manage_fault+0xe4>
   1326a:	490e      	ldr	r1, [pc, #56]	; (132a4 <mem_manage_fault+0x108>)
   1326c:	480e      	ldr	r0, [pc, #56]	; (132a8 <mem_manage_fault+0x10c>)
   1326e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   13272:	f010 fbb9 	bl	239e8 <assert_print>
   13276:	480b      	ldr	r0, [pc, #44]	; (132a4 <mem_manage_fault+0x108>)
   13278:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1327c:	f010 fbad 	bl	239da <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13280:	2000      	movs	r0, #0
   13282:	e7ca      	b.n	1321a <mem_manage_fault+0x7e>
   13284:	e000ed00 	.word	0xe000ed00
   13288:	00028506 	.word	0x00028506
   1328c:	00028521 	.word	0x00028521
   13290:	00028559 	.word	0x00028559
   13294:	000285a9 	.word	0x000285a9
   13298:	000285cd 	.word	0x000285cd
   1329c:	00028571 	.word	0x00028571
   132a0:	0002858e 	.word	0x0002858e
   132a4:	00028601 	.word	0x00028601
   132a8:	000280bd 	.word	0x000280bd

000132ac <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   132ac:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   132ae:	4c1d      	ldr	r4, [pc, #116]	; (13324 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   132b0:	481d      	ldr	r0, [pc, #116]	; (13328 <usage_fault.constprop.0+0x7c>)
   132b2:	2145      	movs	r1, #69	; 0x45
   132b4:	f010 fba6 	bl	23a04 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   132b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   132ba:	019b      	lsls	r3, r3, #6
   132bc:	d503      	bpl.n	132c6 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   132be:	481b      	ldr	r0, [pc, #108]	; (1332c <usage_fault.constprop.0+0x80>)
   132c0:	2145      	movs	r1, #69	; 0x45
   132c2:	f010 fb9f 	bl	23a04 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   132c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   132c8:	01dc      	lsls	r4, r3, #7
   132ca:	d503      	bpl.n	132d4 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   132cc:	4818      	ldr	r0, [pc, #96]	; (13330 <usage_fault.constprop.0+0x84>)
   132ce:	2145      	movs	r1, #69	; 0x45
   132d0:	f010 fb98 	bl	23a04 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   132d4:	4c13      	ldr	r4, [pc, #76]	; (13324 <usage_fault.constprop.0+0x78>)
   132d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   132d8:	0318      	lsls	r0, r3, #12
   132da:	d503      	bpl.n	132e4 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   132dc:	4815      	ldr	r0, [pc, #84]	; (13334 <usage_fault.constprop.0+0x88>)
   132de:	2145      	movs	r1, #69	; 0x45
   132e0:	f010 fb90 	bl	23a04 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   132e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   132e6:	0359      	lsls	r1, r3, #13
   132e8:	d503      	bpl.n	132f2 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   132ea:	4813      	ldr	r0, [pc, #76]	; (13338 <usage_fault.constprop.0+0x8c>)
   132ec:	2145      	movs	r1, #69	; 0x45
   132ee:	f010 fb89 	bl	23a04 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   132f2:	4c0c      	ldr	r4, [pc, #48]	; (13324 <usage_fault.constprop.0+0x78>)
   132f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   132f6:	039a      	lsls	r2, r3, #14
   132f8:	d503      	bpl.n	13302 <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   132fa:	4810      	ldr	r0, [pc, #64]	; (1333c <usage_fault.constprop.0+0x90>)
   132fc:	2145      	movs	r1, #69	; 0x45
   132fe:	f010 fb81 	bl	23a04 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13304:	03db      	lsls	r3, r3, #15
   13306:	d503      	bpl.n	13310 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13308:	480d      	ldr	r0, [pc, #52]	; (13340 <usage_fault.constprop.0+0x94>)
   1330a:	2145      	movs	r1, #69	; 0x45
   1330c:	f010 fb7a 	bl	23a04 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13310:	4a04      	ldr	r2, [pc, #16]	; (13324 <usage_fault.constprop.0+0x78>)
   13312:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13314:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13318:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1331c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1331e:	2000      	movs	r0, #0
   13320:	bd10      	pop	{r4, pc}
   13322:	bf00      	nop
   13324:	e000ed00 	.word	0xe000ed00
   13328:	0002863b 	.word	0x0002863b
   1332c:	00028658 	.word	0x00028658
   13330:	00028670 	.word	0x00028670
   13334:	0002868f 	.word	0x0002868f
   13338:	000286b2 	.word	0x000286b2
   1333c:	000286dc 	.word	0x000286dc
   13340:	000286fb 	.word	0x000286fb

00013344 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13344:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13346:	4c23      	ldr	r4, [pc, #140]	; (133d4 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13348:	4606      	mov	r6, r0
   1334a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1334c:	4822      	ldr	r0, [pc, #136]	; (133d8 <bus_fault.constprop.0+0x94>)
   1334e:	2145      	movs	r1, #69	; 0x45
   13350:	f010 fb58 	bl	23a04 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13356:	04d9      	lsls	r1, r3, #19
   13358:	d503      	bpl.n	13362 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   1335a:	4820      	ldr	r0, [pc, #128]	; (133dc <bus_fault.constprop.0+0x98>)
   1335c:	2145      	movs	r1, #69	; 0x45
   1335e:	f010 fb51 	bl	23a04 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13364:	051a      	lsls	r2, r3, #20
   13366:	d503      	bpl.n	13370 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   13368:	481d      	ldr	r0, [pc, #116]	; (133e0 <bus_fault.constprop.0+0x9c>)
   1336a:	2145      	movs	r1, #69	; 0x45
   1336c:	f010 fb4a 	bl	23a04 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13370:	4c18      	ldr	r4, [pc, #96]	; (133d4 <bus_fault.constprop.0+0x90>)
   13372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13374:	059b      	lsls	r3, r3, #22
   13376:	d510      	bpl.n	1339a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   13378:	481a      	ldr	r0, [pc, #104]	; (133e4 <bus_fault.constprop.0+0xa0>)
   1337a:	2145      	movs	r1, #69	; 0x45
   1337c:	f010 fb42 	bl	23a04 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   13380:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13384:	0418      	lsls	r0, r3, #16
   13386:	d508      	bpl.n	1339a <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13388:	4817      	ldr	r0, [pc, #92]	; (133e8 <bus_fault.constprop.0+0xa4>)
   1338a:	2145      	movs	r1, #69	; 0x45
   1338c:	f010 fb3a 	bl	23a04 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   13390:	b11e      	cbz	r6, 1339a <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13398:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1339a:	4c0e      	ldr	r4, [pc, #56]	; (133d4 <bus_fault.constprop.0+0x90>)
   1339c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1339e:	0559      	lsls	r1, r3, #21
   133a0:	d503      	bpl.n	133aa <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   133a2:	4812      	ldr	r0, [pc, #72]	; (133ec <bus_fault.constprop.0+0xa8>)
   133a4:	2145      	movs	r1, #69	; 0x45
   133a6:	f010 fb2d 	bl	23a04 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   133aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   133ac:	05da      	lsls	r2, r3, #23
   133ae:	d50b      	bpl.n	133c8 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   133b0:	480f      	ldr	r0, [pc, #60]	; (133f0 <bus_fault.constprop.0+0xac>)
   133b2:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   133b4:	f010 fb26 	bl	23a04 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   133b8:	4a06      	ldr	r2, [pc, #24]	; (133d4 <bus_fault.constprop.0+0x90>)
   133ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   133bc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   133be:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   133c2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   133c4:	7028      	strb	r0, [r5, #0]
}
   133c6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   133c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   133ca:	049b      	lsls	r3, r3, #18
   133cc:	d5f4      	bpl.n	133b8 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   133ce:	4809      	ldr	r0, [pc, #36]	; (133f4 <bus_fault.constprop.0+0xb0>)
   133d0:	2145      	movs	r1, #69	; 0x45
   133d2:	e7ef      	b.n	133b4 <bus_fault.constprop.0+0x70>
   133d4:	e000ed00 	.word	0xe000ed00
   133d8:	0002872b 	.word	0x0002872b
   133dc:	00028746 	.word	0x00028746
   133e0:	00028559 	.word	0x00028559
   133e4:	0002875c 	.word	0x0002875c
   133e8:	0002877a 	.word	0x0002877a
   133ec:	00028794 	.word	0x00028794
   133f0:	000287b4 	.word	0x000287b4
   133f4:	000285cd 	.word	0x000285cd

000133f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   133f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   133fa:	4b6a      	ldr	r3, [pc, #424]	; (135a4 <z_arm_fault+0x1ac>)
{
   133fc:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   133fe:	6858      	ldr	r0, [r3, #4]
{
   13400:	b08a      	sub	sp, #40	; 0x28
   13402:	f3c0 0308 	ubfx	r3, r0, #0, #9
   13406:	2600      	movs	r6, #0
   13408:	f386 8811 	msr	BASEPRI, r6
   1340c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13410:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   13414:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   13418:	d107      	bne.n	1342a <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1341a:	f002 040c 	and.w	r4, r2, #12
   1341e:	2c08      	cmp	r4, #8
   13420:	d10e      	bne.n	13440 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13422:	4861      	ldr	r0, [pc, #388]	; (135a8 <z_arm_fault+0x1b0>)
   13424:	2145      	movs	r1, #69	; 0x45
   13426:	f010 faed 	bl	23a04 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1342a:	4960      	ldr	r1, [pc, #384]	; (135ac <z_arm_fault+0x1b4>)
   1342c:	4860      	ldr	r0, [pc, #384]	; (135b0 <z_arm_fault+0x1b8>)
   1342e:	f44f 6284 	mov.w	r2, #1056	; 0x420
   13432:	f010 fad9 	bl	239e8 <assert_print>
   13436:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   1343a:	485c      	ldr	r0, [pc, #368]	; (135ac <z_arm_fault+0x1b4>)
   1343c:	f010 facd 	bl	239da <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13440:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   13442:	bf4c      	ite	mi
   13444:	460d      	movmi	r5, r1
			*nested_exc = true;
   13446:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   13448:	2d00      	cmp	r5, #0
   1344a:	d0ee      	beq.n	1342a <z_arm_fault+0x32>
	*recoverable = false;
   1344c:	2400      	movs	r4, #0
	switch (fault) {
   1344e:	1eda      	subs	r2, r3, #3
	*recoverable = false;
   13450:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   13454:	2a09      	cmp	r2, #9
   13456:	f200 8093 	bhi.w	13580 <z_arm_fault+0x188>
   1345a:	e8df f002 	tbb	[pc, r2]
   1345e:	8605      	.short	0x8605
   13460:	9191718a 	.word	0x9191718a
   13464:	8e919191 	.word	0x8e919191
	PR_FAULT_INFO("***** HARD FAULT *****");
   13468:	4852      	ldr	r0, [pc, #328]	; (135b4 <z_arm_fault+0x1bc>)
   1346a:	2145      	movs	r1, #69	; 0x45
   1346c:	f010 faca 	bl	23a04 <z_log_minimal_printk>
	*recoverable = false;
   13470:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13474:	4c4b      	ldr	r4, [pc, #300]	; (135a4 <z_arm_fault+0x1ac>)
   13476:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13478:	079a      	lsls	r2, r3, #30
   1347a:	d505      	bpl.n	13488 <z_arm_fault+0x90>
		PR_EXC("  Bus fault on vector table read");
   1347c:	484e      	ldr	r0, [pc, #312]	; (135b8 <z_arm_fault+0x1c0>)
   1347e:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   13480:	f010 fac0 	bl	23a04 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13484:	2400      	movs	r4, #0
   13486:	e029      	b.n	134dc <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13488:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1348a:	2b00      	cmp	r3, #0
   1348c:	da02      	bge.n	13494 <z_arm_fault+0x9c>
		PR_EXC("  Debug event");
   1348e:	484b      	ldr	r0, [pc, #300]	; (135bc <z_arm_fault+0x1c4>)
   13490:	2145      	movs	r1, #69	; 0x45
   13492:	e7f5      	b.n	13480 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13496:	005b      	lsls	r3, r3, #1
   13498:	d55e      	bpl.n	13558 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   1349a:	4849      	ldr	r0, [pc, #292]	; (135c0 <z_arm_fault+0x1c8>)
   1349c:	2145      	movs	r1, #69	; 0x45
   1349e:	f010 fab1 	bl	23a04 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   134a2:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   134a4:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   134a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   134aa:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   134ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   134b0:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   134b4:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   134b6:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   134ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   134be:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   134c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   134c4:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   134c8:	f64d 7302 	movw	r3, #57090	; 0xdf02
   134cc:	429a      	cmp	r2, r3
   134ce:	d11e      	bne.n	1350e <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   134d0:	682a      	ldr	r2, [r5, #0]
   134d2:	483c      	ldr	r0, [pc, #240]	; (135c4 <z_arm_fault+0x1cc>)
   134d4:	2145      	movs	r1, #69	; 0x45
   134d6:	f010 fa95 	bl	23a04 <z_log_minimal_printk>
			reason = esf->basic.r0;
   134da:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   134dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   134e0:	b99b      	cbnz	r3, 1350a <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   134e2:	2220      	movs	r2, #32
   134e4:	4629      	mov	r1, r5
   134e6:	a802      	add	r0, sp, #8
   134e8:	f011 f901 	bl	246ee <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   134ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   134ee:	2e00      	cmp	r6, #0
   134f0:	d052      	beq.n	13598 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   134f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   134f6:	b922      	cbnz	r2, 13502 <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   134f8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   134fc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13500:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13502:	a902      	add	r1, sp, #8
   13504:	4620      	mov	r0, r4
   13506:	f7ff fcc9 	bl	12e9c <z_arm_fatal_error>
}
   1350a:	b00a      	add	sp, #40	; 0x28
   1350c:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1350e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13510:	b2db      	uxtb	r3, r3
   13512:	b13b      	cbz	r3, 13524 <z_arm_fault+0x12c>
			reason = mem_manage_fault(esf, 1, recoverable);
   13514:	f10d 0207 	add.w	r2, sp, #7
   13518:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1351a:	4628      	mov	r0, r5
   1351c:	f7ff fe3e 	bl	1319c <mem_manage_fault>
   13520:	4604      	mov	r4, r0
		break;
   13522:	e7db      	b.n	134dc <z_arm_fault+0xe4>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   13524:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13526:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1352a:	d005      	beq.n	13538 <z_arm_fault+0x140>
			reason = bus_fault(esf, 1, recoverable);
   1352c:	f10d 0107 	add.w	r1, sp, #7
   13530:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13532:	f7ff ff07 	bl	13344 <bus_fault.constprop.0>
   13536:	e7f3      	b.n	13520 <z_arm_fault+0x128>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   13538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1353e:	d302      	bcc.n	13546 <z_arm_fault+0x14e>
		reason = usage_fault(esf);
   13540:	f7ff feb4 	bl	132ac <usage_fault.constprop.0>
   13544:	e7ec      	b.n	13520 <z_arm_fault+0x128>
			__ASSERT(0,
   13546:	4919      	ldr	r1, [pc, #100]	; (135ac <z_arm_fault+0x1b4>)
   13548:	4819      	ldr	r0, [pc, #100]	; (135b0 <z_arm_fault+0x1b8>)
   1354a:	f240 22f2 	movw	r2, #754	; 0x2f2
   1354e:	f010 fa4b 	bl	239e8 <assert_print>
   13552:	f240 21f2 	movw	r1, #754	; 0x2f2
   13556:	e770      	b.n	1343a <z_arm_fault+0x42>
		__ASSERT(0,
   13558:	4914      	ldr	r1, [pc, #80]	; (135ac <z_arm_fault+0x1b4>)
   1355a:	4815      	ldr	r0, [pc, #84]	; (135b0 <z_arm_fault+0x1b8>)
   1355c:	f240 22f6 	movw	r2, #758	; 0x2f6
   13560:	f010 fa42 	bl	239e8 <assert_print>
   13564:	f240 21f6 	movw	r1, #758	; 0x2f6
   13568:	e767      	b.n	1343a <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   1356a:	f10d 0207 	add.w	r2, sp, #7
   1356e:	2100      	movs	r1, #0
   13570:	e7d3      	b.n	1351a <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   13572:	f10d 0107 	add.w	r1, sp, #7
   13576:	2000      	movs	r0, #0
   13578:	e7db      	b.n	13532 <z_arm_fault+0x13a>
	PR_FAULT_INFO(
   1357a:	4813      	ldr	r0, [pc, #76]	; (135c8 <z_arm_fault+0x1d0>)
   1357c:	2145      	movs	r1, #69	; 0x45
   1357e:	e77f      	b.n	13480 <z_arm_fault+0x88>
	PR_FAULT_INFO("***** %s %d) *****",
   13580:	4912      	ldr	r1, [pc, #72]	; (135cc <z_arm_fault+0x1d4>)
   13582:	4a13      	ldr	r2, [pc, #76]	; (135d0 <z_arm_fault+0x1d8>)
   13584:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   13588:	bf08      	it	eq
   1358a:	460a      	moveq	r2, r1
   1358c:	4811      	ldr	r0, [pc, #68]	; (135d4 <z_arm_fault+0x1dc>)
   1358e:	3b10      	subs	r3, #16
   13590:	2145      	movs	r1, #69	; 0x45
   13592:	f010 fa37 	bl	23a04 <z_log_minimal_printk>
}
   13596:	e775      	b.n	13484 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13598:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1359c:	f023 0301 	bic.w	r3, r3, #1
   135a0:	e7ae      	b.n	13500 <z_arm_fault+0x108>
   135a2:	bf00      	nop
   135a4:	e000ed00 	.word	0xe000ed00
   135a8:	000287ff 	.word	0x000287ff
   135ac:	00028601 	.word	0x00028601
   135b0:	000280bd 	.word	0x000280bd
   135b4:	0002882f 	.word	0x0002882f
   135b8:	0002884b 	.word	0x0002884b
   135bc:	00028871 	.word	0x00028871
   135c0:	00028884 	.word	0x00028884
   135c4:	000288a8 	.word	0x000288a8
   135c8:	000288c9 	.word	0x000288c9
   135cc:	000287d1 	.word	0x000287d1
   135d0:	000287e6 	.word	0x000287e6
   135d4:	000288f2 	.word	0x000288f2

000135d8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   135d8:	4a02      	ldr	r2, [pc, #8]	; (135e4 <z_arm_fault_init+0xc>)
   135da:	6953      	ldr	r3, [r2, #20]
   135dc:	f043 0310 	orr.w	r3, r3, #16
   135e0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   135e2:	4770      	bx	lr
   135e4:	e000ed00 	.word	0xe000ed00

000135e8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   135e8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   135ec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   135f0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   135f2:	4672      	mov	r2, lr
	bl z_arm_fault
   135f4:	f7ff ff00 	bl	133f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   135f8:	bd01      	pop	{r0, pc}
   135fa:	bf00      	nop

000135fc <z_arm_interrupt_init>:
   135fc:	4804      	ldr	r0, [pc, #16]	; (13610 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   135fe:	2300      	movs	r3, #0
   13600:	2140      	movs	r1, #64	; 0x40
   13602:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13604:	3301      	adds	r3, #1
   13606:	2b27      	cmp	r3, #39	; 0x27
   13608:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1360c:	d1f9      	bne.n	13602 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1360e:	4770      	bx	lr
   13610:	e000e100 	.word	0xe000e100

00013614 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13614:	2000      	movs	r0, #0
    msr CONTROL, r0
   13616:	f380 8814 	msr	CONTROL, r0
    isb
   1361a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1361e:	f7fe fbe9 	bl	11df4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13622:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13624:	490d      	ldr	r1, [pc, #52]	; (1365c <__start+0x48>)
    str r0, [r1]
   13626:	6008      	str	r0, [r1, #0]
    dsb
   13628:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1362c:	480c      	ldr	r0, [pc, #48]	; (13660 <__start+0x4c>)
    msr msp, r0
   1362e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13632:	f000 f82b 	bl	1368c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13636:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13638:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1363c:	4809      	ldr	r0, [pc, #36]	; (13664 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1363e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   13642:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13644:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13648:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1364c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1364e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13650:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13654:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13658:	f7ff fcba 	bl	12fd0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1365c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13660:	20005d80 	.word	0x20005d80
    ldr r0, =z_interrupt_stacks
   13664:	20004fc0 	.word	0x20004fc0

00013668 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13668:	4907      	ldr	r1, [pc, #28]	; (13688 <z_arm_clear_arm_mpu_config+0x20>)
   1366a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1366e:	2300      	movs	r3, #0
	int num_regions =
   13670:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   13674:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   13676:	4293      	cmp	r3, r2
   13678:	db00      	blt.n	1367c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1367a:	4770      	bx	lr
  MPU->RNR = rnr;
   1367c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   13680:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   13684:	3301      	adds	r3, #1
   13686:	e7f6      	b.n	13676 <z_arm_clear_arm_mpu_config+0xe>
   13688:	e000ed00 	.word	0xe000ed00

0001368c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1368c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1368e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13690:	2300      	movs	r3, #0
   13692:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13696:	f7ff ffe7 	bl	13668 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1369a:	4b14      	ldr	r3, [pc, #80]	; (136ec <z_arm_init_arch_hw_at_boot+0x60>)
   1369c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   136a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   136a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   136a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   136ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   136b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   136b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   136b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   136bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   136c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   136c4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   136c8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   136cc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   136d0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   136d4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   136d8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   136dc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   136e0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   136e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   136e6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   136ea:	bd08      	pop	{r3, pc}
   136ec:	e000e100 	.word	0xe000e100

000136f0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   136f0:	4b08      	ldr	r3, [pc, #32]	; (13714 <z_impl_k_thread_abort+0x24>)
   136f2:	689b      	ldr	r3, [r3, #8]
   136f4:	4283      	cmp	r3, r0
   136f6:	d10b      	bne.n	13710 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   136f8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   136fc:	b143      	cbz	r3, 13710 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   136fe:	4b06      	ldr	r3, [pc, #24]	; (13718 <z_impl_k_thread_abort+0x28>)
   13700:	685a      	ldr	r2, [r3, #4]
   13702:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13706:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1370a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1370e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   13710:	f00e bc40 	b.w	21f94 <z_thread_abort>
   13714:	20002500 	.word	0x20002500
   13718:	e000ed00 	.word	0xe000ed00

0001371c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1371c:	4b02      	ldr	r3, [pc, #8]	; (13728 <z_arm_configure_static_mpu_regions+0xc>)
   1371e:	4a03      	ldr	r2, [pc, #12]	; (1372c <z_arm_configure_static_mpu_regions+0x10>)
   13720:	4803      	ldr	r0, [pc, #12]	; (13730 <z_arm_configure_static_mpu_regions+0x14>)
   13722:	2101      	movs	r1, #1
   13724:	f000 b87c 	b.w	13820 <arm_core_mpu_configure_static_mpu_regions>
   13728:	20010000 	.word	0x20010000
   1372c:	20000000 	.word	0x20000000
   13730:	0002773c 	.word	0x0002773c

00013734 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13734:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13736:	4b05      	ldr	r3, [pc, #20]	; (1374c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   13738:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   1373a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1373c:	4a04      	ldr	r2, [pc, #16]	; (13750 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   1373e:	2140      	movs	r1, #64	; 0x40
   13740:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13744:	4618      	mov	r0, r3
   13746:	2101      	movs	r1, #1
   13748:	f000 b886 	b.w	13858 <arm_core_mpu_configure_dynamic_mpu_regions>
   1374c:	20002060 	.word	0x20002060
   13750:	150b0000 	.word	0x150b0000

00013754 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13756:	4e24      	ldr	r6, [pc, #144]	; (137e8 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13758:	2500      	movs	r5, #0
   1375a:	428d      	cmp	r5, r1
   1375c:	da0f      	bge.n	1377e <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   1375e:	6844      	ldr	r4, [r0, #4]
   13760:	2c00      	cmp	r4, #0
   13762:	d03e      	beq.n	137e2 <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   13764:	b19b      	cbz	r3, 1378e <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   13766:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1376a:	ea14 0f0c 	tst.w	r4, ip
   1376e:	d008      	beq.n	13782 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   13770:	481e      	ldr	r0, [pc, #120]	; (137ec <mpu_configure_regions+0x98>)
   13772:	462a      	mov	r2, r5
   13774:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13776:	f010 f945 	bl	23a04 <z_log_minimal_printk>
			return -EINVAL;
   1377a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1377e:	4610      	mov	r0, r2
   13780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   13782:	2c1f      	cmp	r4, #31
   13784:	d9f4      	bls.n	13770 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
   13786:	6807      	ldr	r7, [r0, #0]
		&&
   13788:	ea1c 0f07 	tst.w	ip, r7
   1378c:	d1f0      	bne.n	13770 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   1378e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   13790:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13792:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13796:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   1379a:	d910      	bls.n	137be <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
   1379c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   137a0:	d80f      	bhi.n	137c2 <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   137a2:	3c01      	subs	r4, #1
   137a4:	fab4 f484 	clz	r4, r4
   137a8:	f1c4 041f 	rsb	r4, r4, #31
   137ac:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   137ae:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   137b2:	ea4c 0c04 	orr.w	ip, ip, r4
   137b6:	d906      	bls.n	137c6 <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   137b8:	480d      	ldr	r0, [pc, #52]	; (137f0 <mpu_configure_regions+0x9c>)
   137ba:	2145      	movs	r1, #69	; 0x45
   137bc:	e7db      	b.n	13776 <mpu_configure_regions+0x22>
		return REGION_32B;
   137be:	2408      	movs	r4, #8
   137c0:	e7f5      	b.n	137ae <mpu_configure_regions+0x5a>
		return REGION_4G;
   137c2:	243e      	movs	r4, #62	; 0x3e
   137c4:	e7f3      	b.n	137ae <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   137c6:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   137ca:	4314      	orrs	r4, r2
   137cc:	f044 0410 	orr.w	r4, r4, #16
   137d0:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   137d4:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   137d8:	f04c 0401 	orr.w	r4, ip, #1
   137dc:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   137e0:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   137e2:	3501      	adds	r5, #1
   137e4:	300c      	adds	r0, #12
   137e6:	e7b8      	b.n	1375a <mpu_configure_regions+0x6>
   137e8:	e000ed00 	.word	0xe000ed00
   137ec:	0002890e 	.word	0x0002890e
   137f0:	00028936 	.word	0x00028936

000137f4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   137f4:	4b04      	ldr	r3, [pc, #16]	; (13808 <arm_core_mpu_enable+0x14>)
   137f6:	2205      	movs	r2, #5
   137f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   137fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13800:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13804:	4770      	bx	lr
   13806:	bf00      	nop
   13808:	e000ed00 	.word	0xe000ed00

0001380c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1380c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13810:	4b02      	ldr	r3, [pc, #8]	; (1381c <arm_core_mpu_disable+0x10>)
   13812:	2200      	movs	r2, #0
   13814:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13818:	4770      	bx	lr
   1381a:	bf00      	nop
   1381c:	e000ed00 	.word	0xe000ed00

00013820 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13820:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13822:	4c0a      	ldr	r4, [pc, #40]	; (1384c <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13824:	2301      	movs	r3, #1
   13826:	7822      	ldrb	r2, [r4, #0]
   13828:	f7ff ff94 	bl	13754 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1382c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1382e:	3016      	adds	r0, #22
   13830:	d10a      	bne.n	13848 <arm_core_mpu_configure_static_mpu_regions+0x28>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   13832:	4907      	ldr	r1, [pc, #28]	; (13850 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   13834:	4807      	ldr	r0, [pc, #28]	; (13854 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   13836:	f44f 728b 	mov.w	r2, #278	; 0x116
   1383a:	f010 f8d5 	bl	239e8 <assert_print>
   1383e:	4804      	ldr	r0, [pc, #16]	; (13850 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   13840:	f44f 718b 	mov.w	r1, #278	; 0x116
   13844:	f010 f8c9 	bl	239da <assert_post_action>
			regions_num);
	}
}
   13848:	bd10      	pop	{r4, pc}
   1384a:	bf00      	nop
   1384c:	2000257e 	.word	0x2000257e
   13850:	00028961 	.word	0x00028961
   13854:	000280bd 	.word	0x000280bd

00013858 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   13858:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1385a:	4a0f      	ldr	r2, [pc, #60]	; (13898 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   1385c:	2300      	movs	r3, #0
   1385e:	7812      	ldrb	r2, [r2, #0]
   13860:	f7ff ff78 	bl	13754 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13864:	f110 0f16 	cmn.w	r0, #22
   13868:	d004      	beq.n	13874 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
  MPU->RNR = rnr;
   1386a:	4b0c      	ldr	r3, [pc, #48]	; (1389c <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
   1386c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1386e:	2807      	cmp	r0, #7
   13870:	dd0b      	ble.n	1388a <arm_core_mpu_configure_dynamic_mpu_regions+0x32>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13872:	bd08      	pop	{r3, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   13874:	490a      	ldr	r1, [pc, #40]	; (138a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   13876:	480b      	ldr	r0, [pc, #44]	; (138a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   13878:	f240 1235 	movw	r2, #309	; 0x135
   1387c:	f010 f8b4 	bl	239e8 <assert_print>
   13880:	4807      	ldr	r0, [pc, #28]	; (138a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   13882:	f240 1135 	movw	r1, #309	; 0x135
   13886:	f010 f8a8 	bl	239da <assert_post_action>
  MPU->RNR = rnr;
   1388a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   1388e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   13892:	3001      	adds	r0, #1
   13894:	e7eb      	b.n	1386e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13896:	bf00      	nop
   13898:	2000257e 	.word	0x2000257e
   1389c:	e000ed00 	.word	0xe000ed00
   138a0:	00028961 	.word	0x00028961
   138a4:	000280bd 	.word	0x000280bd

000138a8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   138a8:	4920      	ldr	r1, [pc, #128]	; (1392c <z_arm_mpu_init+0x84>)
{
   138aa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   138ac:	680c      	ldr	r4, [r1, #0]
   138ae:	2c08      	cmp	r4, #8
   138b0:	d90a      	bls.n	138c8 <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   138b2:	491f      	ldr	r1, [pc, #124]	; (13930 <z_arm_mpu_init+0x88>)
   138b4:	481f      	ldr	r0, [pc, #124]	; (13934 <z_arm_mpu_init+0x8c>)
   138b6:	f240 124d 	movw	r2, #333	; 0x14d
   138ba:	f010 f895 	bl	239e8 <assert_print>
   138be:	f240 114d 	movw	r1, #333	; 0x14d

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   138c2:	481b      	ldr	r0, [pc, #108]	; (13930 <z_arm_mpu_init+0x88>)
   138c4:	f010 f889 	bl	239da <assert_post_action>
	arm_core_mpu_disable();
   138c8:	f7ff ffa0 	bl	1380c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   138cc:	6848      	ldr	r0, [r1, #4]
   138ce:	491a      	ldr	r1, [pc, #104]	; (13938 <z_arm_mpu_init+0x90>)
   138d0:	2200      	movs	r2, #0
   138d2:	4294      	cmp	r4, r2
   138d4:	f100 000c 	add.w	r0, r0, #12
   138d8:	d112      	bne.n	13900 <z_arm_mpu_init+0x58>
	static_regions_num = mpu_config.num_regions;
   138da:	4b18      	ldr	r3, [pc, #96]	; (1393c <z_arm_mpu_init+0x94>)
   138dc:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   138de:	f7ff ff89 	bl	137f4 <arm_core_mpu_enable>
	__ASSERT(
   138e2:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   138e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   138ea:	2b08      	cmp	r3, #8
   138ec:	d01b      	beq.n	13926 <z_arm_mpu_init+0x7e>
   138ee:	4910      	ldr	r1, [pc, #64]	; (13930 <z_arm_mpu_init+0x88>)
   138f0:	4810      	ldr	r0, [pc, #64]	; (13934 <z_arm_mpu_init+0x8c>)
   138f2:	f240 12ad 	movw	r2, #429	; 0x1ad
   138f6:	f010 f877 	bl	239e8 <assert_print>
   138fa:	f240 11ad 	movw	r1, #429	; 0x1ad
   138fe:	e7e0      	b.n	138c2 <z_arm_mpu_init+0x1a>
   13900:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13904:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   13908:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1390c:	4313      	orrs	r3, r2
   1390e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13912:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13916:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1391a:	f043 0301 	orr.w	r3, r3, #1
   1391e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13922:	3201      	adds	r2, #1
   13924:	e7d5      	b.n	138d2 <z_arm_mpu_init+0x2a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   13926:	2000      	movs	r0, #0
   13928:	bd10      	pop	{r4, pc}
   1392a:	bf00      	nop
   1392c:	00027748 	.word	0x00027748
   13930:	00028961 	.word	0x00028961
   13934:	000280bd 	.word	0x000280bd
   13938:	e000ed00 	.word	0xe000ed00
   1393c:	2000257e 	.word	0x2000257e

00013940 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   13940:	4b01      	ldr	r3, [pc, #4]	; (13948 <__stdout_hook_install+0x8>)
   13942:	6018      	str	r0, [r3, #0]
}
   13944:	4770      	bx	lr
   13946:	bf00      	nop
   13948:	20000624 	.word	0x20000624

0001394c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1394c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13950:	f3ef 8211 	mrs	r2, BASEPRI
   13954:	f383 8812 	msr	BASEPRI_MAX, r3
   13958:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1395c:	4906      	ldr	r1, [pc, #24]	; (13978 <nordicsemi_nrf52_init+0x2c>)
   1395e:	2301      	movs	r3, #1
   13960:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13964:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13968:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   1396c:	f382 8811 	msr	BASEPRI, r2
   13970:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13974:	2000      	movs	r0, #0
   13976:	4770      	bx	lr
   13978:	4001e000 	.word	0x4001e000

0001397c <sys_arch_reboot>:
    *p_gpregret = val;
   1397c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13980:	b2c0      	uxtb	r0, r0
   13982:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13986:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1398a:	4905      	ldr	r1, [pc, #20]	; (139a0 <sys_arch_reboot+0x24>)
   1398c:	4b05      	ldr	r3, [pc, #20]	; (139a4 <sys_arch_reboot+0x28>)
   1398e:	68ca      	ldr	r2, [r1, #12]
   13990:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13994:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13996:	60cb      	str	r3, [r1, #12]
   13998:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1399c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1399e:	e7fd      	b.n	1399c <sys_arch_reboot+0x20>
   139a0:	e000ed00 	.word	0xe000ed00
   139a4:	05fa0004 	.word	0x05fa0004

000139a8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   139a8:	b120      	cbz	r0, 139b4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   139aa:	4b03      	ldr	r3, [pc, #12]	; (139b8 <arch_busy_wait+0x10>)
   139ac:	0180      	lsls	r0, r0, #6
   139ae:	f043 0301 	orr.w	r3, r3, #1
   139b2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   139b4:	4770      	bx	lr
   139b6:	bf00      	nop
   139b8:	00027650 	.word	0x00027650

000139bc <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   139bc:	4b0e      	ldr	r3, [pc, #56]	; (139f8 <bt_hex+0x3c>)
   139be:	2940      	cmp	r1, #64	; 0x40
{
   139c0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   139c2:	bf28      	it	cs
   139c4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   139c6:	4c0d      	ldr	r4, [pc, #52]	; (139fc <bt_hex+0x40>)
   139c8:	1846      	adds	r6, r0, r1
   139ca:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   139cc:	42b0      	cmp	r0, r6
   139ce:	f103 0302 	add.w	r3, r3, #2
   139d2:	d104      	bne.n	139de <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   139d4:	2300      	movs	r3, #0
   139d6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   139da:	4807      	ldr	r0, [pc, #28]	; (139f8 <bt_hex+0x3c>)
   139dc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   139de:	7802      	ldrb	r2, [r0, #0]
   139e0:	0912      	lsrs	r2, r2, #4
   139e2:	5ca2      	ldrb	r2, [r4, r2]
   139e4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   139e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   139ec:	f002 020f 	and.w	r2, r2, #15
   139f0:	5ca2      	ldrb	r2, [r4, r2]
   139f2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   139f6:	e7e9      	b.n	139cc <bt_hex+0x10>
   139f8:	2000259d 	.word	0x2000259d
   139fc:	000289c5 	.word	0x000289c5

00013a00 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   13a00:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   13a02:	7803      	ldrb	r3, [r0, #0]
   13a04:	b08b      	sub	sp, #44	; 0x2c
   13a06:	4604      	mov	r4, r0
   13a08:	ad07      	add	r5, sp, #28
   13a0a:	2b03      	cmp	r3, #3
   13a0c:	d821      	bhi.n	13a52 <bt_addr_le_str+0x52>
   13a0e:	e8df f003 	tbb	[pc, r3]
   13a12:	1a02      	.short	0x1a02
   13a14:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   13a16:	4912      	ldr	r1, [pc, #72]	; (13a60 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   13a18:	4628      	mov	r0, r5
   13a1a:	f010 fe1e 	bl	2465a <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13a1e:	9505      	str	r5, [sp, #20]
   13a20:	7863      	ldrb	r3, [r4, #1]
   13a22:	9304      	str	r3, [sp, #16]
   13a24:	78a3      	ldrb	r3, [r4, #2]
   13a26:	9303      	str	r3, [sp, #12]
   13a28:	78e3      	ldrb	r3, [r4, #3]
   13a2a:	9302      	str	r3, [sp, #8]
   13a2c:	7923      	ldrb	r3, [r4, #4]
   13a2e:	9301      	str	r3, [sp, #4]
   13a30:	7963      	ldrb	r3, [r4, #5]
   13a32:	9300      	str	r3, [sp, #0]
   13a34:	79a3      	ldrb	r3, [r4, #6]
   13a36:	4a0b      	ldr	r2, [pc, #44]	; (13a64 <bt_addr_le_str+0x64>)
   13a38:	480b      	ldr	r0, [pc, #44]	; (13a68 <bt_addr_le_str+0x68>)
   13a3a:	211e      	movs	r1, #30
   13a3c:	f00f fdd9 	bl	235f2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   13a40:	4809      	ldr	r0, [pc, #36]	; (13a68 <bt_addr_le_str+0x68>)
   13a42:	b00b      	add	sp, #44	; 0x2c
   13a44:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   13a46:	4909      	ldr	r1, [pc, #36]	; (13a6c <bt_addr_le_str+0x6c>)
   13a48:	e7e6      	b.n	13a18 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   13a4a:	4909      	ldr	r1, [pc, #36]	; (13a70 <bt_addr_le_str+0x70>)
   13a4c:	e7e4      	b.n	13a18 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   13a4e:	4909      	ldr	r1, [pc, #36]	; (13a74 <bt_addr_le_str+0x74>)
   13a50:	e7e2      	b.n	13a18 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   13a52:	4a09      	ldr	r2, [pc, #36]	; (13a78 <bt_addr_le_str+0x78>)
   13a54:	210a      	movs	r1, #10
   13a56:	4628      	mov	r0, r5
   13a58:	f00f fdcb 	bl	235f2 <snprintk>
		break;
   13a5c:	e7df      	b.n	13a1e <bt_addr_le_str+0x1e>
   13a5e:	bf00      	nop
   13a60:	00027ded 	.word	0x00027ded
   13a64:	00027e16 	.word	0x00027e16
   13a68:	2000257f 	.word	0x2000257f
   13a6c:	00027df4 	.word	0x00027df4
   13a70:	00027dfb 	.word	0x00027dfb
   13a74:	00027e05 	.word	0x00027e05
   13a78:	00027e0f 	.word	0x00027e0f

00013a7c <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   13a7c:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   13a7e:	480a      	ldr	r0, [pc, #40]	; (13aa8 <save_id+0x2c>)
   13a80:	2149      	movs	r1, #73	; 0x49
   13a82:	f00f ffbf 	bl	23a04 <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   13a86:	4909      	ldr	r1, [pc, #36]	; (13aac <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   13a88:	4809      	ldr	r0, [pc, #36]	; (13ab0 <save_id+0x34>)
   13a8a:	79ca      	ldrb	r2, [r1, #7]
   13a8c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   13a90:	f7fe fd70 	bl	12574 <settings_save_one>
	if (err) {
   13a94:	4602      	mov	r2, r0
   13a96:	b128      	cbz	r0, 13aa4 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   13a98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   13a9c:	4805      	ldr	r0, [pc, #20]	; (13ab4 <save_id+0x38>)
   13a9e:	2145      	movs	r1, #69	; 0x45
   13aa0:	f00f bfb0 	b.w	23a04 <z_log_minimal_printk>
}
   13aa4:	bd08      	pop	{r3, pc}
   13aa6:	bf00      	nop
   13aa8:	000289dd 	.word	0x000289dd
   13aac:	20000380 	.word	0x20000380
   13ab0:	000289ec 	.word	0x000289ec
   13ab4:	000289f2 	.word	0x000289f2

00013ab8 <set>:
{
   13ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13aba:	4c22      	ldr	r4, [pc, #136]	; (13b44 <set+0x8c>)
   13abc:	f3bf 8f5b 	dmb	ish
   13ac0:	461f      	mov	r7, r3
   13ac2:	6823      	ldr	r3, [r4, #0]
   13ac4:	f3bf 8f5b 	dmb	ish
   13ac8:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13aca:	07da      	lsls	r2, r3, #31
{
   13acc:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13ace:	d51e      	bpl.n	13b0e <set+0x56>
	if (!name) {
   13ad0:	b930      	cbnz	r0, 13ae0 <set+0x28>
		BT_ERR("Insufficient number of arguments");
   13ad2:	481d      	ldr	r0, [pc, #116]	; (13b48 <set+0x90>)
   13ad4:	2145      	movs	r1, #69	; 0x45
   13ad6:	f00f ff95 	bl	23a04 <z_log_minimal_printk>
		return -ENOENT;
   13ada:	f06f 0001 	mvn.w	r0, #1
   13ade:	e017      	b.n	13b10 <set+0x58>
	len = settings_name_next(name, &next);
   13ae0:	a901      	add	r1, sp, #4
   13ae2:	f010 fa3b 	bl	23f5c <settings_name_next>
	if (!strncmp(name, "id", len)) {
   13ae6:	4919      	ldr	r1, [pc, #100]	; (13b4c <set+0x94>)
	len = settings_name_next(name, &next);
   13ae8:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   13aea:	4628      	mov	r0, r5
   13aec:	f010 fddb 	bl	246a6 <strncmp>
   13af0:	2800      	cmp	r0, #0
   13af2:	d1f2      	bne.n	13ada <set+0x22>
   13af4:	f3bf 8f5b 	dmb	ish
   13af8:	6823      	ldr	r3, [r4, #0]
   13afa:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   13afe:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   13b02:	071b      	lsls	r3, r3, #28
   13b04:	d506      	bpl.n	13b14 <set+0x5c>
			BT_WARN("Ignoring identities stored in flash");
   13b06:	4812      	ldr	r0, [pc, #72]	; (13b50 <set+0x98>)
   13b08:	2157      	movs	r1, #87	; 0x57
   13b0a:	f00f ff7b 	bl	23a04 <z_log_minimal_printk>
		return 0;
   13b0e:	2000      	movs	r0, #0
}
   13b10:	b003      	add	sp, #12
   13b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   13b14:	3ccc      	subs	r4, #204	; 0xcc
   13b16:	2207      	movs	r2, #7
   13b18:	4621      	mov	r1, r4
   13b1a:	4638      	mov	r0, r7
   13b1c:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   13b1e:	2806      	cmp	r0, #6
   13b20:	d80a      	bhi.n	13b38 <set+0x80>
				BT_ERR("Invalid length ID address in storage");
   13b22:	480c      	ldr	r0, [pc, #48]	; (13b54 <set+0x9c>)
   13b24:	2145      	movs	r1, #69	; 0x45
   13b26:	f00f ff6d 	bl	23a04 <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   13b2a:	2207      	movs	r2, #7
   13b2c:	4629      	mov	r1, r5
   13b2e:	4620      	mov	r0, r4
   13b30:	f010 fde8 	bl	24704 <memset>
			bt_dev.id_count = 0U;
   13b34:	71e5      	strb	r5, [r4, #7]
   13b36:	e7ea      	b.n	13b0e <set+0x56>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   13b38:	2307      	movs	r3, #7
   13b3a:	fbb0 f0f3 	udiv	r0, r0, r3
   13b3e:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   13b40:	e7e5      	b.n	13b0e <set+0x56>
   13b42:	bf00      	nop
   13b44:	2000044c 	.word	0x2000044c
   13b48:	00028a12 	.word	0x00028a12
   13b4c:	00027e02 	.word	0x00027e02
   13b50:	00028a38 	.word	0x00028a38
   13b54:	00028a61 	.word	0x00028a61

00013b58 <bt_settings_encode_key>:
{
   13b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b5c:	b088      	sub	sp, #32
		snprintk(path, path_size,
   13b5e:	799c      	ldrb	r4, [r3, #6]
{
   13b60:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   13b64:	795d      	ldrb	r5, [r3, #5]
   13b66:	791e      	ldrb	r6, [r3, #4]
   13b68:	78df      	ldrb	r7, [r3, #3]
   13b6a:	f893 c002 	ldrb.w	ip, [r3, #2]
   13b6e:	f893 e001 	ldrb.w	lr, [r3, #1]
   13b72:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   13b74:	f1b8 0f00 	cmp.w	r8, #0
   13b78:	d00e      	beq.n	13b98 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   13b7a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   13b7e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   13b82:	4613      	mov	r3, r2
   13b84:	e9cd 6702 	strd	r6, r7, [sp, #8]
   13b88:	e9cd 4500 	strd	r4, r5, [sp]
   13b8c:	4a08      	ldr	r2, [pc, #32]	; (13bb0 <bt_settings_encode_key+0x58>)
   13b8e:	f00f fd30 	bl	235f2 <snprintk>
}
   13b92:	b008      	add	sp, #32
   13b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   13b98:	e9cd e305 	strd	lr, r3, [sp, #20]
   13b9c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   13ba0:	4613      	mov	r3, r2
   13ba2:	e9cd 5601 	strd	r5, r6, [sp, #4]
   13ba6:	4a03      	ldr	r2, [pc, #12]	; (13bb4 <bt_settings_encode_key+0x5c>)
   13ba8:	9400      	str	r4, [sp, #0]
   13baa:	f00f fd22 	bl	235f2 <snprintk>
}
   13bae:	e7f0      	b.n	13b92 <bt_settings_encode_key+0x3a>
   13bb0:	00028a8b 	.word	0x00028a8b
   13bb4:	00028aaf 	.word	0x00028aaf

00013bb8 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   13bb8:	4801      	ldr	r0, [pc, #4]	; (13bc0 <bt_settings_save_id+0x8>)
   13bba:	f00d b8b3 	b.w	20d24 <k_work_submit>
   13bbe:	bf00      	nop
   13bc0:	20000628 	.word	0x20000628

00013bc4 <commit>:
}

static int commit(void)
{
   13bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13bc6:	4d1d      	ldr	r5, [pc, #116]	; (13c3c <commit+0x78>)
   13bc8:	f3bf 8f5b 	dmb	ish
   13bcc:	682b      	ldr	r3, [r5, #0]
   13bce:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13bd2:	f013 0f01 	tst.w	r3, #1
   13bd6:	462e      	mov	r6, r5
   13bd8:	d02e      	beq.n	13c38 <commit+0x74>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   13bda:	f815 3cc5 	ldrb.w	r3, [r5, #-197]
   13bde:	f1a5 07cc 	sub.w	r7, r5, #204	; 0xcc
   13be2:	b983      	cbnz	r3, 13c06 <commit+0x42>
		err = bt_setup_public_id_addr();
   13be4:	f001 fcce 	bl	15584 <bt_setup_public_id_addr>
		if (err) {
   13be8:	4604      	mov	r4, r0
   13bea:	b128      	cbz	r0, 13bf8 <commit+0x34>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   13bec:	4814      	ldr	r0, [pc, #80]	; (13c40 <commit+0x7c>)
   13bee:	2145      	movs	r1, #69	; 0x45
   13bf0:	f00f ff08 	bl	23a04 <z_log_minimal_printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   13bf4:	4620      	mov	r0, r4
   13bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   13bf8:	79fb      	ldrb	r3, [r7, #7]
   13bfa:	b923      	cbnz	r3, 13c06 <commit+0x42>
		err = bt_setup_random_id_addr();
   13bfc:	f001 fd16 	bl	1562c <bt_setup_random_id_addr>
		if (err) {
   13c00:	4604      	mov	r4, r0
   13c02:	2800      	cmp	r0, #0
   13c04:	d1f2      	bne.n	13bec <commit+0x28>
   13c06:	f3bf 8f5b 	dmb	ish
   13c0a:	682b      	ldr	r3, [r5, #0]
   13c0c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13c10:	075a      	lsls	r2, r3, #29
   13c12:	d401      	bmi.n	13c18 <commit+0x54>
		bt_finalize_init();
   13c14:	f001 f932 	bl	14e7c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c18:	f3bf 8f5b 	dmb	ish
   13c1c:	e856 3f00 	ldrex	r3, [r6]
   13c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   13c24:	e846 2100 	strex	r1, r2, [r6]
   13c28:	2900      	cmp	r1, #0
   13c2a:	d1f7      	bne.n	13c1c <commit+0x58>
   13c2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   13c30:	03db      	lsls	r3, r3, #15
   13c32:	d501      	bpl.n	13c38 <commit+0x74>
		bt_settings_save_id();
   13c34:	f7ff ffc0 	bl	13bb8 <bt_settings_save_id>
		return 0;
   13c38:	2400      	movs	r4, #0
   13c3a:	e7db      	b.n	13bf4 <commit+0x30>
   13c3c:	2000044c 	.word	0x2000044c
   13c40:	00028ad0 	.word	0x00028ad0

00013c44 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   13c44:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   13c46:	f7fe fe05 	bl	12854 <settings_subsys_init>
	if (err) {
   13c4a:	4604      	mov	r4, r0
   13c4c:	b120      	cbz	r0, 13c58 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
   13c4e:	4602      	mov	r2, r0
   13c50:	2145      	movs	r1, #69	; 0x45
   13c52:	4802      	ldr	r0, [pc, #8]	; (13c5c <bt_settings_init+0x18>)
   13c54:	f00f fed6 	bl	23a04 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   13c58:	4620      	mov	r0, r4
   13c5a:	bd10      	pop	{r4, pc}
   13c5c:	00028af9 	.word	0x00028af9

00013c60 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   13c60:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   13c62:	4d0a      	ldr	r5, [pc, #40]	; (13c8c <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13c64:	4b0a      	ldr	r3, [pc, #40]	; (13c90 <long_wq_init+0x30>)
{
   13c66:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13c68:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   13c6a:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13c6c:	9302      	str	r3, [sp, #8]
   13c6e:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   13c70:	f00d f85e 	bl	20d30 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   13c74:	ab02      	add	r3, sp, #8
   13c76:	9300      	str	r3, [sp, #0]
   13c78:	4628      	mov	r0, r5
   13c7a:	4906      	ldr	r1, [pc, #24]	; (13c94 <long_wq_init+0x34>)
   13c7c:	230a      	movs	r3, #10
   13c7e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   13c82:	f00d f86b 	bl	20d5c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   13c86:	4620      	mov	r0, r4
   13c88:	b005      	add	sp, #20
   13c8a:	bd30      	pop	{r4, r5, pc}
   13c8c:	20001778 	.word	0x20001778
   13c90:	00028b32 	.word	0x00028b32
   13c94:	200032c0 	.word	0x200032c0

00013c98 <bt_long_wq_schedule>:
{
   13c98:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   13c9a:	4801      	ldr	r0, [pc, #4]	; (13ca0 <bt_long_wq_schedule+0x8>)
   13c9c:	f00d b8e4 	b.w	20e68 <k_work_schedule_for_queue>
   13ca0:	20001778 	.word	0x20001778

00013ca4 <bt_long_wq_reschedule>:
{
   13ca4:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   13ca6:	4801      	ldr	r0, [pc, #4]	; (13cac <bt_long_wq_reschedule+0x8>)
   13ca8:	f00d b944 	b.w	20f34 <k_work_reschedule_for_queue>
   13cac:	20001778 	.word	0x20001778

00013cb0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   13cb0:	b430      	push	{r4, r5}
   13cb2:	4603      	mov	r3, r0
   13cb4:	4608      	mov	r0, r1
	switch (src->type) {
   13cb6:	781a      	ldrb	r2, [r3, #0]
   13cb8:	2a01      	cmp	r2, #1
   13cba:	d013      	beq.n	13ce4 <uuid_to_uuid128+0x34>
   13cbc:	2a02      	cmp	r2, #2
   13cbe:	d026      	beq.n	13d0e <uuid_to_uuid128+0x5e>
   13cc0:	b972      	cbnz	r2, 13ce0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13cc2:	4a15      	ldr	r2, [pc, #84]	; (13d18 <uuid_to_uuid128+0x68>)
   13cc4:	f102 0410 	add.w	r4, r2, #16
   13cc8:	f852 5b04 	ldr.w	r5, [r2], #4
   13ccc:	f841 5b04 	str.w	r5, [r1], #4
   13cd0:	42a2      	cmp	r2, r4
   13cd2:	d1f9      	bne.n	13cc8 <uuid_to_uuid128+0x18>
   13cd4:	7812      	ldrb	r2, [r2, #0]
   13cd6:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13cd8:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   13cda:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13cdc:	0a1b      	lsrs	r3, r3, #8
   13cde:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13ce0:	bc30      	pop	{r4, r5}
   13ce2:	4770      	bx	lr
		*dst = uuid128_base;
   13ce4:	4a0c      	ldr	r2, [pc, #48]	; (13d18 <uuid_to_uuid128+0x68>)
   13ce6:	f102 0410 	add.w	r4, r2, #16
   13cea:	f852 5b04 	ldr.w	r5, [r2], #4
   13cee:	f841 5b04 	str.w	r5, [r1], #4
   13cf2:	42a2      	cmp	r2, r4
   13cf4:	d1f9      	bne.n	13cea <uuid_to_uuid128+0x3a>
   13cf6:	7812      	ldrb	r2, [r2, #0]
   13cf8:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13cfa:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   13cfc:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13cfe:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   13d02:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13d04:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   13d06:	0a1b      	lsrs	r3, r3, #8
   13d08:	7382      	strb	r2, [r0, #14]
   13d0a:	7403      	strb	r3, [r0, #16]
}
   13d0c:	e7e8      	b.n	13ce0 <uuid_to_uuid128+0x30>
}
   13d0e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   13d10:	2211      	movs	r2, #17
   13d12:	4619      	mov	r1, r3
   13d14:	f010 bceb 	b.w	246ee <memcpy>
   13d18:	00028b3b 	.word	0x00028b3b

00013d1c <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   13d1c:	2805      	cmp	r0, #5
{
   13d1e:	b538      	push	{r3, r4, r5, lr}
   13d20:	4605      	mov	r5, r0
   13d22:	d803      	bhi.n	13d2c <bt_buf_get_rx+0x10>
   13d24:	212a      	movs	r1, #42	; 0x2a
   13d26:	40c1      	lsrs	r1, r0
   13d28:	07c9      	lsls	r1, r1, #31
   13d2a:	d408      	bmi.n	13d3e <bt_buf_get_rx+0x22>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   13d2c:	490a      	ldr	r1, [pc, #40]	; (13d58 <bt_buf_get_rx+0x3c>)
   13d2e:	480b      	ldr	r0, [pc, #44]	; (13d5c <bt_buf_get_rx+0x40>)
   13d30:	223f      	movs	r2, #63	; 0x3f
   13d32:	f00f fe59 	bl	239e8 <assert_print>
   13d36:	4808      	ldr	r0, [pc, #32]	; (13d58 <bt_buf_get_rx+0x3c>)
   13d38:	213f      	movs	r1, #63	; 0x3f
   13d3a:	f00f fe4e 	bl	239da <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   13d3e:	4808      	ldr	r0, [pc, #32]	; (13d60 <bt_buf_get_rx+0x44>)
   13d40:	f012 fbf3 	bl	2652a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13d44:	4604      	mov	r4, r0
   13d46:	b120      	cbz	r0, 13d52 <bt_buf_get_rx+0x36>
	net_buf_simple_reserve(&buf->b, reserve);
   13d48:	2100      	movs	r1, #0
   13d4a:	3008      	adds	r0, #8
   13d4c:	f007 fcf0 	bl	1b730 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13d50:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13d52:	4620      	mov	r0, r4
   13d54:	bd38      	pop	{r3, r4, r5, pc}
   13d56:	bf00      	nop
   13d58:	00028b4c 	.word	0x00028b4c
   13d5c:	000280bd 	.word	0x000280bd
   13d60:	20000a30 	.word	0x20000a30

00013d64 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13d64:	b510      	push	{r4, lr}
   13d66:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   13d68:	490a      	ldr	r1, [pc, #40]	; (13d94 <bt_buf_get_cmd_complete+0x30>)
{
   13d6a:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   13d6c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   13d70:	b920      	cbnz	r0, 13d7c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13d76:	2001      	movs	r0, #1
   13d78:	f7ff bfd0 	b.w	13d1c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   13d7c:	f007 fe22 	bl	1b9c4 <net_buf_ref>
   13d80:	2301      	movs	r3, #1
		buf->len = 0U;
   13d82:	2100      	movs	r1, #0
   13d84:	7503      	strb	r3, [r0, #20]
   13d86:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   13d88:	4604      	mov	r4, r0
   13d8a:	3008      	adds	r0, #8
   13d8c:	f007 fcd0 	bl	1b730 <net_buf_simple_reserve>
}
   13d90:	4620      	mov	r0, r4
   13d92:	bd10      	pop	{r4, pc}
   13d94:	20000380 	.word	0x20000380

00013d98 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13d98:	b570      	push	{r4, r5, r6, lr}
   13d9a:	4604      	mov	r4, r0
	switch (evt) {
   13d9c:	2c0f      	cmp	r4, #15
{
   13d9e:	460d      	mov	r5, r1
   13da0:	4610      	mov	r0, r2
   13da2:	4619      	mov	r1, r3
	switch (evt) {
   13da4:	d805      	bhi.n	13db2 <bt_buf_get_evt+0x1a>
   13da6:	2c0d      	cmp	r4, #13
   13da8:	d90d      	bls.n	13dc6 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   13daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13dae:	f7ff bfd9 	b.w	13d64 <bt_buf_get_cmd_complete>
	switch (evt) {
   13db2:	2c13      	cmp	r4, #19
   13db4:	d107      	bne.n	13dc6 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   13db6:	480c      	ldr	r0, [pc, #48]	; (13de8 <bt_buf_get_evt+0x50>)
   13db8:	f012 fbb7 	bl	2652a <net_buf_alloc_fixed>
			if (buf) {
   13dbc:	4604      	mov	r4, r0
   13dbe:	b938      	cbnz	r0, 13dd0 <bt_buf_get_evt+0x38>
{
   13dc0:	2400      	movs	r4, #0
}
   13dc2:	4620      	mov	r0, r4
   13dc4:	bd70      	pop	{r4, r5, r6, pc}
   13dc6:	4602      	mov	r2, r0
   13dc8:	460b      	mov	r3, r1
		if (discardable) {
   13dca:	b145      	cbz	r5, 13dde <bt_buf_get_evt+0x46>
   13dcc:	4807      	ldr	r0, [pc, #28]	; (13dec <bt_buf_get_evt+0x54>)
   13dce:	e7f3      	b.n	13db8 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   13dd0:	2100      	movs	r1, #0
   13dd2:	3008      	adds	r0, #8
   13dd4:	f007 fcac 	bl	1b730 <net_buf_simple_reserve>
   13dd8:	2301      	movs	r3, #1
   13dda:	7523      	strb	r3, [r4, #20]
}
   13ddc:	e7f1      	b.n	13dc2 <bt_buf_get_evt+0x2a>
}
   13dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13de2:	2001      	movs	r0, #1
   13de4:	f7ff bf9a 	b.w	13d1c <bt_buf_get_rx>
   13de8:	20000a64 	.word	0x20000a64
   13dec:	20000994 	.word	0x20000994

00013df0 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   13df0:	6883      	ldr	r3, [r0, #8]
   13df2:	4802      	ldr	r0, [pc, #8]	; (13dfc <hci_data_buf_overflow+0xc>)
   13df4:	781a      	ldrb	r2, [r3, #0]
   13df6:	2157      	movs	r1, #87	; 0x57
   13df8:	f00f be04 	b.w	23a04 <z_log_minimal_printk>
   13dfc:	00028b82 	.word	0x00028b82

00013e00 <hci_disconn_complete_prio>:
{
   13e00:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13e02:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13e04:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   13e08:	781b      	ldrb	r3, [r3, #0]
   13e0a:	b963      	cbnz	r3, 13e26 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   13e0c:	4620      	mov	r0, r4
   13e0e:	f002 fb93 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   13e12:	4605      	mov	r5, r0
   13e14:	b940      	cbnz	r0, 13e28 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   13e16:	4b08      	ldr	r3, [pc, #32]	; (13e38 <hci_disconn_complete_prio+0x38>)
   13e18:	881a      	ldrh	r2, [r3, #0]
   13e1a:	b922      	cbnz	r2, 13e26 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13e1c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13e20:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13e24:	8018      	strh	r0, [r3, #0]
}
   13e26:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13e28:	2101      	movs	r1, #1
   13e2a:	f002 fb8d 	bl	16548 <bt_conn_set_state>
	bt_conn_unref(conn);
   13e2e:	4628      	mov	r0, r5
}
   13e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13e34:	f002 bb50 	b.w	164d8 <bt_conn_unref>
   13e38:	2000255e 	.word	0x2000255e

00013e3c <hci_disconn_complete>:
{
   13e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13e3e:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   13e40:	782e      	ldrb	r6, [r5, #0]
   13e42:	b9be      	cbnz	r6, 13e74 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13e44:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   13e48:	4638      	mov	r0, r7
   13e4a:	f002 fb75 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   13e4e:	4604      	mov	r4, r0
   13e50:	b930      	cbnz	r0, 13e60 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   13e52:	463a      	mov	r2, r7
   13e54:	4808      	ldr	r0, [pc, #32]	; (13e78 <hci_disconn_complete+0x3c>)
}
   13e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   13e5a:	2145      	movs	r1, #69	; 0x45
   13e5c:	f00f bdd2 	b.w	23a04 <z_log_minimal_printk>
	conn->err = evt->reason;
   13e60:	78eb      	ldrb	r3, [r5, #3]
   13e62:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13e64:	4631      	mov	r1, r6
   13e66:	f002 fb6f 	bl	16548 <bt_conn_set_state>
		bt_conn_unref(conn);
   13e6a:	4620      	mov	r0, r4
}
   13e6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   13e70:	f002 bb32 	b.w	164d8 <bt_conn_unref>
}
   13e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e76:	bf00      	nop
   13e78:	00028baf 	.word	0x00028baf

00013e7c <le_phy_update_complete>:
{
   13e7c:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13e7e:	6883      	ldr	r3, [r0, #8]
   13e80:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   13e84:	4620      	mov	r0, r4
   13e86:	f002 fb57 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   13e8a:	b930      	cbnz	r0, 13e9a <le_phy_update_complete+0x1e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13e8c:	4622      	mov	r2, r4
   13e8e:	4805      	ldr	r0, [pc, #20]	; (13ea4 <le_phy_update_complete+0x28>)
}
   13e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13e94:	2145      	movs	r1, #69	; 0x45
   13e96:	f00f bdb5 	b.w	23a04 <z_log_minimal_printk>
}
   13e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   13e9e:	f002 bb1b 	b.w	164d8 <bt_conn_unref>
   13ea2:	bf00      	nop
   13ea4:	00028bda 	.word	0x00028bda

00013ea8 <le_data_len_change>:
{
   13ea8:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13eaa:	6883      	ldr	r3, [r0, #8]
   13eac:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   13eae:	4620      	mov	r0, r4
   13eb0:	f002 fb42 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   13eb4:	b930      	cbnz	r0, 13ec4 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13eb6:	4622      	mov	r2, r4
   13eb8:	4804      	ldr	r0, [pc, #16]	; (13ecc <le_data_len_change+0x24>)
}
   13eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13ebe:	2145      	movs	r1, #69	; 0x45
   13ec0:	f00f bda0 	b.w	23a04 <z_log_minimal_printk>
}
   13ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   13ec8:	f002 bb06 	b.w	164d8 <bt_conn_unref>
   13ecc:	00028bda 	.word	0x00028bda

00013ed0 <hci_hardware_error>:
{
   13ed0:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13ed2:	2101      	movs	r1, #1
   13ed4:	3008      	adds	r0, #8
   13ed6:	f007 fe1f 	bl	1bb18 <net_buf_simple_pull_mem>
}
   13eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   13ede:	7802      	ldrb	r2, [r0, #0]
   13ee0:	4801      	ldr	r0, [pc, #4]	; (13ee8 <hci_hardware_error+0x18>)
   13ee2:	2145      	movs	r1, #69	; 0x45
   13ee4:	f00f bd8e 	b.w	23a04 <z_log_minimal_printk>
   13ee8:	00028c03 	.word	0x00028c03

00013eec <rx_queue_put>:
{
   13eec:	4601      	mov	r1, r0
   13eee:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   13ef0:	4807      	ldr	r0, [pc, #28]	; (13f10 <rx_queue_put+0x24>)
   13ef2:	f007 fc3d 	bl	1b770 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   13ef6:	4907      	ldr	r1, [pc, #28]	; (13f14 <rx_queue_put+0x28>)
   13ef8:	4807      	ldr	r0, [pc, #28]	; (13f18 <rx_queue_put+0x2c>)
   13efa:	f012 ffe1 	bl	26ec0 <k_work_submit_to_queue>
	if (err < 0) {
   13efe:	1e02      	subs	r2, r0, #0
   13f00:	da05      	bge.n	13f0e <rx_queue_put+0x22>
}
   13f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Could not submit rx_work: %d", err);
   13f06:	4805      	ldr	r0, [pc, #20]	; (13f1c <rx_queue_put+0x30>)
   13f08:	2145      	movs	r1, #69	; 0x45
   13f0a:	f00f bd7b 	b.w	23a04 <z_log_minimal_printk>
}
   13f0e:	bd08      	pop	{r3, pc}
   13f10:	200004bc 	.word	0x200004bc
   13f14:	20000674 	.word	0x20000674
   13f18:	20001898 	.word	0x20001898
   13f1c:	00028c2a 	.word	0x00028c2a

00013f20 <le_conn_update_complete>:
{
   13f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   13f22:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   13f24:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   13f28:	4630      	mov	r0, r6
   13f2a:	f002 fb05 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   13f2e:	4604      	mov	r4, r0
   13f30:	b938      	cbnz	r0, 13f42 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13f32:	481a      	ldr	r0, [pc, #104]	; (13f9c <le_conn_update_complete+0x7c>)
   13f34:	4632      	mov	r2, r6
   13f36:	2145      	movs	r1, #69	; 0x45
}
   13f38:	b002      	add	sp, #8
   13f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13f3e:	f00f bd61 	b.w	23a04 <z_log_minimal_printk>
	if (!evt->status) {
   13f42:	782b      	ldrb	r3, [r5, #0]
   13f44:	b99b      	cbnz	r3, 13f6e <le_conn_update_complete+0x4e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   13f46:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   13f4a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   13f4e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   13f52:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13f56:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   13f5a:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   13f5e:	f002 fc1d 	bl	1679c <notify_le_param_updated>
	bt_conn_unref(conn);
   13f62:	4620      	mov	r0, r4
}
   13f64:	b002      	add	sp, #8
   13f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   13f6a:	f002 bab5 	b.w	164d8 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   13f6e:	2b1a      	cmp	r3, #26
   13f70:	d1f7      	bne.n	13f62 <le_conn_update_complete+0x42>
   13f72:	78c3      	ldrb	r3, [r0, #3]
   13f74:	2b01      	cmp	r3, #1
   13f76:	d1f4      	bne.n	13f62 <le_conn_update_complete+0x42>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13f78:	f44f 7100 	mov.w	r1, #512	; 0x200
   13f7c:	3004      	adds	r0, #4
   13f7e:	f010 fcae 	bl	248de <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   13f82:	0583      	lsls	r3, r0, #22
   13f84:	d4ed      	bmi.n	13f62 <le_conn_update_complete+0x42>
		param.interval_min = conn->le.interval_min;
   13f86:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   13f8a:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   13f8c:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   13f8e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   13f92:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   13f94:	4620      	mov	r0, r4
   13f96:	f003 f829 	bl	16fec <bt_l2cap_update_conn_param>
   13f9a:	e7e2      	b.n	13f62 <le_conn_update_complete+0x42>
   13f9c:	00028bda 	.word	0x00028bda

00013fa0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13fa0:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13fa2:	4c08      	ldr	r4, [pc, #32]	; (13fc4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13fa4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13fa6:	2205      	movs	r2, #5
   13fa8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   13fac:	f002 fd5a 	bl	16a64 <bt_conn_lookup_state_le>
		if (!conn) {
   13fb0:	b938      	cbnz	r0, 13fc2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13fb2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   13fb6:	4904      	ldr	r1, [pc, #16]	; (13fc8 <find_pending_connect.part.0+0x28>)
}
   13fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13fbc:	2204      	movs	r2, #4
   13fbe:	f002 bd51 	b.w	16a64 <bt_conn_lookup_state_le>
}
   13fc2:	bd10      	pop	{r4, pc}
   13fc4:	20000380 	.word	0x20000380
   13fc8:	000289ab 	.word	0x000289ab

00013fcc <handle_event>:
{
   13fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13fce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13fd2:	4605      	mov	r5, r0
   13fd4:	4614      	mov	r4, r2
   13fd6:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   13fd8:	429c      	cmp	r4, r3
   13fda:	d10d      	bne.n	13ff8 <handle_event+0x2c>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   13fdc:	8984      	ldrh	r4, [r0, #12]
   13fde:	6880      	ldr	r0, [r0, #8]
   13fe0:	4621      	mov	r1, r4
   13fe2:	f7ff fceb 	bl	139bc <bt_hex>
   13fe6:	4623      	mov	r3, r4
   13fe8:	9000      	str	r0, [sp, #0]
   13fea:	462a      	mov	r2, r5
   13fec:	480e      	ldr	r0, [pc, #56]	; (14028 <handle_event+0x5c>)
   13fee:	2157      	movs	r1, #87	; 0x57
   13ff0:	f00f fd08 	bl	23a04 <z_log_minimal_printk>
}
   13ff4:	b003      	add	sp, #12
   13ff6:	bd30      	pop	{r4, r5, pc}
		if (handler->event != event) {
   13ff8:	4622      	mov	r2, r4
   13ffa:	f812 1b08 	ldrb.w	r1, [r2], #8
   13ffe:	42a9      	cmp	r1, r5
   14000:	d110      	bne.n	14024 <handle_event+0x58>
		if (buf->len < handler->min_len) {
   14002:	8982      	ldrh	r2, [r0, #12]
   14004:	7863      	ldrb	r3, [r4, #1]
   14006:	4293      	cmp	r3, r2
   14008:	d907      	bls.n	1401a <handle_event+0x4e>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1400a:	4808      	ldr	r0, [pc, #32]	; (1402c <handle_event+0x60>)
   1400c:	462b      	mov	r3, r5
   1400e:	2145      	movs	r1, #69	; 0x45
}
   14010:	b003      	add	sp, #12
   14012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14016:	f00f bcf5 	b.w	23a04 <z_log_minimal_printk>
		handler->handler(buf);
   1401a:	6863      	ldr	r3, [r4, #4]
}
   1401c:	b003      	add	sp, #12
   1401e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   14022:	4718      	bx	r3
   14024:	4614      	mov	r4, r2
   14026:	e7d7      	b.n	13fd8 <handle_event+0xc>
   14028:	00028c73 	.word	0x00028c73
   1402c:	00028c4c 	.word	0x00028c4c

00014030 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   14030:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   14032:	4844      	ldr	r0, [pc, #272]	; (14144 <rx_work_handler+0x114>)
   14034:	f007 fbf4 	bl	1b820 <net_buf_slist_get>
	if (!buf) {
   14038:	4604      	mov	r4, r0
   1403a:	2800      	cmp	r0, #0
   1403c:	f000 8081 	beq.w	14142 <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14040:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   14042:	2a01      	cmp	r2, #1
   14044:	d04d      	beq.n	140e2 <rx_work_handler+0xb2>
   14046:	2a03      	cmp	r2, #3
   14048:	d178      	bne.n	1413c <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1404a:	8983      	ldrh	r3, [r0, #12]
   1404c:	2b03      	cmp	r3, #3
   1404e:	d80b      	bhi.n	14068 <rx_work_handler+0x38>
   14050:	493d      	ldr	r1, [pc, #244]	; (14148 <rx_work_handler+0x118>)
   14052:	483e      	ldr	r0, [pc, #248]	; (1414c <rx_work_handler+0x11c>)
   14054:	f240 12ed 	movw	r2, #493	; 0x1ed
   14058:	f00f fcc6 	bl	239e8 <assert_print>
   1405c:	4040      	eors	r0, r0
   1405e:	f380 8811 	msr	BASEPRI, r0
   14062:	f04f 0003 	mov.w	r0, #3
   14066:	df02      	svc	2
   14068:	2104      	movs	r1, #4
   1406a:	f104 0008 	add.w	r0, r4, #8
   1406e:	f007 fd53 	bl	1bb18 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14072:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   14074:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14076:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14078:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   1407a:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   1407c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   14080:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   14082:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   14084:	d007      	beq.n	14096 <rx_work_handler+0x66>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   14086:	4832      	ldr	r0, [pc, #200]	; (14150 <rx_work_handler+0x120>)
   14088:	2145      	movs	r1, #69	; 0x45
   1408a:	f00f fcbb 	bl	23a04 <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   1408e:	4620      	mov	r0, r4
   14090:	f007 fc56 	bl	1b940 <net_buf_unref>
		break;
   14094:	e014      	b.n	140c0 <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14096:	f002 fa4f 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   1409a:	4605      	mov	r5, r0
   1409c:	b928      	cbnz	r0, 140aa <rx_work_handler+0x7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1409e:	8ae2      	ldrh	r2, [r4, #22]
   140a0:	482c      	ldr	r0, [pc, #176]	; (14154 <rx_work_handler+0x124>)
   140a2:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   140a4:	f00f fcae 	bl	23a04 <z_log_minimal_printk>
   140a8:	e7f1      	b.n	1408e <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   140aa:	f002 fb27 	bl	166fc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   140ae:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   140b0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   140b2:	4621      	mov	r1, r4
   140b4:	4628      	mov	r0, r5
   140b6:	f002 f8e7 	bl	16288 <bt_conn_recv>
	bt_conn_unref(conn);
   140ba:	4628      	mov	r0, r5
   140bc:	f002 fa0c 	bl	164d8 <bt_conn_unref>
	return list->head;
   140c0:	4b25      	ldr	r3, [pc, #148]	; (14158 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   140c2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   140c6:	2b00      	cmp	r3, #0
   140c8:	d03b      	beq.n	14142 <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   140ca:	4924      	ldr	r1, [pc, #144]	; (1415c <rx_work_handler+0x12c>)
   140cc:	4824      	ldr	r0, [pc, #144]	; (14160 <rx_work_handler+0x130>)
   140ce:	f012 fef7 	bl	26ec0 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   140d2:	1e02      	subs	r2, r0, #0
   140d4:	da35      	bge.n	14142 <rx_work_handler+0x112>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   140d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Could not submit rx_work: %d", err);
   140da:	4822      	ldr	r0, [pc, #136]	; (14164 <rx_work_handler+0x134>)
   140dc:	2145      	movs	r1, #69	; 0x45
   140de:	f00f bc91 	b.w	23a04 <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   140e2:	8983      	ldrh	r3, [r0, #12]
   140e4:	2b01      	cmp	r3, #1
   140e6:	d80b      	bhi.n	14100 <rx_work_handler+0xd0>
   140e8:	4917      	ldr	r1, [pc, #92]	; (14148 <rx_work_handler+0x118>)
   140ea:	4818      	ldr	r0, [pc, #96]	; (1414c <rx_work_handler+0x11c>)
   140ec:	f44f 6216 	mov.w	r2, #2400	; 0x960
   140f0:	f00f fc7a 	bl	239e8 <assert_print>
   140f4:	4040      	eors	r0, r0
   140f6:	f380 8811 	msr	BASEPRI, r0
   140fa:	f04f 0003 	mov.w	r0, #3
   140fe:	df02      	svc	2
   14100:	2102      	movs	r1, #2
   14102:	f104 0008 	add.w	r0, r4, #8
   14106:	f007 fd07 	bl	1bb18 <net_buf_simple_pull_mem>
   1410a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1410c:	7800      	ldrb	r0, [r0, #0]
   1410e:	f010 fbb8 	bl	24882 <bt_hci_evt_get_flags>
   14112:	0783      	lsls	r3, r0, #30
   14114:	d40b      	bmi.n	1412e <rx_work_handler+0xfe>
   14116:	490c      	ldr	r1, [pc, #48]	; (14148 <rx_work_handler+0x118>)
   14118:	480c      	ldr	r0, [pc, #48]	; (1414c <rx_work_handler+0x11c>)
   1411a:	f640 1264 	movw	r2, #2404	; 0x964
   1411e:	f00f fc63 	bl	239e8 <assert_print>
   14122:	4040      	eors	r0, r0
   14124:	f380 8811 	msr	BASEPRI, r0
   14128:	f04f 0003 	mov.w	r0, #3
   1412c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1412e:	4a0e      	ldr	r2, [pc, #56]	; (14168 <rx_work_handler+0x138>)
   14130:	7828      	ldrb	r0, [r5, #0]
   14132:	2306      	movs	r3, #6
   14134:	4621      	mov	r1, r4
   14136:	f7ff ff49 	bl	13fcc <handle_event>
	net_buf_unref(buf);
   1413a:	e7a8      	b.n	1408e <rx_work_handler+0x5e>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1413c:	480b      	ldr	r0, [pc, #44]	; (1416c <rx_work_handler+0x13c>)
   1413e:	2145      	movs	r1, #69	; 0x45
   14140:	e7b0      	b.n	140a4 <rx_work_handler+0x74>
}
   14142:	bd70      	pop	{r4, r5, r6, pc}
   14144:	200004bc 	.word	0x200004bc
   14148:	00028c9a 	.word	0x00028c9a
   1414c:	000280bd 	.word	0x000280bd
   14150:	00028cce 	.word	0x00028cce
   14154:	00028cf7 	.word	0x00028cf7
   14158:	20000380 	.word	0x20000380
   1415c:	20000674 	.word	0x20000674
   14160:	20001898 	.word	0x20001898
   14164:	00028c2a 	.word	0x00028c2a
   14168:	000277c0 	.word	0x000277c0
   1416c:	00028d1e 	.word	0x00028d1e

00014170 <hci_le_meta_event>:
{
   14170:	b510      	push	{r4, lr}
   14172:	2101      	movs	r1, #1
   14174:	4604      	mov	r4, r0
   14176:	3008      	adds	r0, #8
   14178:	f007 fcce 	bl	1bb18 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1417c:	4621      	mov	r1, r4
   1417e:	4a03      	ldr	r2, [pc, #12]	; (1418c <hci_le_meta_event+0x1c>)
   14180:	7800      	ldrb	r0, [r0, #0]
}
   14182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14186:	230a      	movs	r3, #10
   14188:	f7ff bf20 	b.w	13fcc <handle_event>
   1418c:	000277f0 	.word	0x000277f0

00014190 <le_remote_feat_complete>:
{
   14190:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   14192:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14194:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   14198:	4630      	mov	r0, r6
   1419a:	f002 f9cd 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   1419e:	4604      	mov	r4, r0
   141a0:	b930      	cbnz	r0, 141b0 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   141a2:	4632      	mov	r2, r6
   141a4:	480b      	ldr	r0, [pc, #44]	; (141d4 <le_remote_feat_complete+0x44>)
}
   141a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   141aa:	2145      	movs	r1, #69	; 0x45
   141ac:	f00f bc2a 	b.w	23a04 <z_log_minimal_printk>
	if (!evt->status) {
   141b0:	782b      	ldrb	r3, [r5, #0]
   141b2:	b923      	cbnz	r3, 141be <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   141b4:	2208      	movs	r2, #8
   141b6:	1ce9      	adds	r1, r5, #3
   141b8:	30b4      	adds	r0, #180	; 0xb4
   141ba:	f010 fa98 	bl	246ee <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   141be:	1d20      	adds	r0, r4, #4
   141c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   141c4:	f010 fb8b 	bl	248de <atomic_or>
	bt_conn_unref(conn);
   141c8:	4620      	mov	r0, r4
}
   141ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   141ce:	f002 b983 	b.w	164d8 <bt_conn_unref>
   141d2:	bf00      	nop
   141d4:	00028bda 	.word	0x00028bda

000141d8 <hci_cmd_done>:
{
   141d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   141dc:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   141de:	7990      	ldrb	r0, [r2, #6]
   141e0:	4d39      	ldr	r5, [pc, #228]	; (142c8 <hci_cmd_done+0xf0>)
{
   141e2:	460f      	mov	r7, r1
   141e4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   141e6:	f007 f96f 	bl	1b4c8 <net_buf_pool_get>
   141ea:	4285      	cmp	r5, r0
   141ec:	d00e      	beq.n	1420c <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   141ee:	79a4      	ldrb	r4, [r4, #6]
   141f0:	4620      	mov	r0, r4
   141f2:	f007 f969 	bl	1b4c8 <net_buf_pool_get>
   141f6:	4623      	mov	r3, r4
   141f8:	e9cd 0500 	strd	r0, r5, [sp]
   141fc:	4632      	mov	r2, r6
   141fe:	4833      	ldr	r0, [pc, #204]	; (142cc <hci_cmd_done+0xf4>)
   14200:	2157      	movs	r1, #87	; 0x57
   14202:	f00f fbff 	bl	23a04 <z_log_minimal_printk>
}
   14206:	b002      	add	sp, #8
   14208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   1420c:	4620      	mov	r0, r4
   1420e:	f007 f963 	bl	1b4d8 <net_buf_id>
   14212:	4d2f      	ldr	r5, [pc, #188]	; (142d0 <hci_cmd_done+0xf8>)
   14214:	f04f 080c 	mov.w	r8, #12
   14218:	fb08 5000 	mla	r0, r8, r0, r5
   1421c:	8843      	ldrh	r3, [r0, #2]
   1421e:	42b3      	cmp	r3, r6
   14220:	d00d      	beq.n	1423e <hci_cmd_done+0x66>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   14222:	4620      	mov	r0, r4
   14224:	f007 f958 	bl	1b4d8 <net_buf_id>
   14228:	fb08 5000 	mla	r0, r8, r0, r5
   1422c:	4632      	mov	r2, r6
   1422e:	8843      	ldrh	r3, [r0, #2]
   14230:	4828      	ldr	r0, [pc, #160]	; (142d4 <hci_cmd_done+0xfc>)
   14232:	2157      	movs	r1, #87	; 0x57
}
   14234:	b002      	add	sp, #8
   14236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1423a:	f00f bbe3 	b.w	23a04 <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   1423e:	4e26      	ldr	r6, [pc, #152]	; (142d8 <hci_cmd_done+0x100>)
   14240:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   14244:	b120      	cbz	r0, 14250 <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   14246:	f007 fb7b 	bl	1b940 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1424a:	2300      	movs	r3, #0
   1424c:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   14250:	4620      	mov	r0, r4
   14252:	f007 f941 	bl	1b4d8 <net_buf_id>
   14256:	260c      	movs	r6, #12
   14258:	fb06 5000 	mla	r0, r6, r0, r5
   1425c:	6843      	ldr	r3, [r0, #4]
   1425e:	b19b      	cbz	r3, 14288 <hci_cmd_done+0xb0>
   14260:	b997      	cbnz	r7, 14288 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14262:	4620      	mov	r0, r4
   14264:	f007 f938 	bl	1b4d8 <net_buf_id>
   14268:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1426c:	2101      	movs	r1, #1
   1426e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14270:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   14274:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   14276:	f003 061f 	and.w	r6, r3, #31
   1427a:	40b1      	lsls	r1, r6
	if (val) {
   1427c:	095b      	lsrs	r3, r3, #5
   1427e:	b1e2      	cbz	r2, 142ba <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14280:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14284:	f010 fb2b 	bl	248de <atomic_or>
	if (cmd(buf)->sync) {
   14288:	4620      	mov	r0, r4
   1428a:	f007 f925 	bl	1b4d8 <net_buf_id>
   1428e:	260c      	movs	r6, #12
   14290:	fb06 5000 	mla	r0, r6, r0, r5
   14294:	6883      	ldr	r3, [r0, #8]
   14296:	2b00      	cmp	r3, #0
   14298:	d0b5      	beq.n	14206 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   1429a:	4620      	mov	r0, r4
   1429c:	f007 f91c 	bl	1b4d8 <net_buf_id>
   142a0:	4370      	muls	r0, r6
   142a2:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   142a4:	4620      	mov	r0, r4
   142a6:	f007 f917 	bl	1b4d8 <net_buf_id>
   142aa:	fb06 5500 	mla	r5, r6, r0, r5
   142ae:	68a8      	ldr	r0, [r5, #8]
}
   142b0:	b002      	add	sp, #8
   142b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   142b6:	f00c ba0b 	b.w	206d0 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   142ba:	43c9      	mvns	r1, r1
   142bc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   142c0:	f010 fb1c 	bl	248fc <atomic_and.isra.0>
   142c4:	e7e0      	b.n	14288 <hci_cmd_done+0xb0>
   142c6:	bf00      	nop
   142c8:	200009fc 	.word	0x200009fc
   142cc:	00028d37 	.word	0x00028d37
   142d0:	2000206c 	.word	0x2000206c
   142d4:	00028d71 	.word	0x00028d71
   142d8:	20000380 	.word	0x20000380

000142dc <hci_cmd_status>:
{
   142dc:	b538      	push	{r3, r4, r5, lr}
   142de:	2104      	movs	r1, #4
   142e0:	4604      	mov	r4, r0
   142e2:	3008      	adds	r0, #8
   142e4:	f007 fc18 	bl	1bb18 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   142e8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   142ea:	7801      	ldrb	r1, [r0, #0]
   142ec:	8840      	ldrh	r0, [r0, #2]
   142ee:	4622      	mov	r2, r4
   142f0:	f7ff ff72 	bl	141d8 <hci_cmd_done>
	if (ncmd) {
   142f4:	b125      	cbz	r5, 14300 <hci_cmd_status+0x24>
   142f6:	4803      	ldr	r0, [pc, #12]	; (14304 <hci_cmd_status+0x28>)
}
   142f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   142fc:	f00c b9e8 	b.w	206d0 <z_impl_k_sem_give>
   14300:	bd38      	pop	{r3, r4, r5, pc}
   14302:	bf00      	nop
   14304:	200004a0 	.word	0x200004a0

00014308 <hci_cmd_complete>:
{
   14308:	b538      	push	{r3, r4, r5, lr}
   1430a:	2103      	movs	r1, #3
   1430c:	4604      	mov	r4, r0
   1430e:	3008      	adds	r0, #8
   14310:	f007 fc02 	bl	1bb18 <net_buf_simple_pull_mem>
	status = buf->data[0];
   14314:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   14316:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   14318:	7819      	ldrb	r1, [r3, #0]
   1431a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1431e:	4622      	mov	r2, r4
   14320:	f7ff ff5a 	bl	141d8 <hci_cmd_done>
	if (ncmd) {
   14324:	b125      	cbz	r5, 14330 <hci_cmd_complete+0x28>
   14326:	4803      	ldr	r0, [pc, #12]	; (14334 <hci_cmd_complete+0x2c>)
}
   14328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1432c:	f00c b9d0 	b.w	206d0 <z_impl_k_sem_give>
   14330:	bd38      	pop	{r3, r4, r5, pc}
   14332:	bf00      	nop
   14334:	200004a0 	.word	0x200004a0

00014338 <hci_num_completed_packets>:
{
   14338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1433c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1433e:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   14340:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 14414 <hci_num_completed_packets+0xdc>
			tx->pending_no_cb = 0U;
   14344:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   14346:	783b      	ldrb	r3, [r7, #0]
   14348:	429d      	cmp	r5, r3
   1434a:	db01      	blt.n	14350 <hci_num_completed_packets+0x18>
}
   1434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14350:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   14354:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14358:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1435c:	4650      	mov	r0, sl
   1435e:	f002 f8eb 	bl	16538 <bt_conn_lookup_handle>
		if (!conn) {
   14362:	4604      	mov	r4, r0
   14364:	b1d0      	cbz	r0, 1439c <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   14366:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   1436a:	b346      	cbz	r6, 143be <hci_num_completed_packets+0x86>
	__asm__ volatile(
   1436c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14370:	f3ef 8211 	mrs	r2, BASEPRI
   14374:	f383 8812 	msr	BASEPRI_MAX, r3
   14378:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1437c:	69e3      	ldr	r3, [r4, #28]
   1437e:	b1a3      	cbz	r3, 143aa <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   14380:	3b01      	subs	r3, #1
   14382:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14384:	f382 8811 	msr	BASEPRI, r2
   14388:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1438c:	4620      	mov	r0, r4
   1438e:	f001 ff05 	bl	1619c <bt_conn_get_pkts>
   14392:	3e01      	subs	r6, #1
   14394:	f00c f99c 	bl	206d0 <z_impl_k_sem_give>
   14398:	b2b6      	uxth	r6, r6
   1439a:	e7e6      	b.n	1436a <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
   1439c:	481e      	ldr	r0, [pc, #120]	; (14418 <hci_num_completed_packets+0xe0>)
   1439e:	4652      	mov	r2, sl
   143a0:	2145      	movs	r1, #69	; 0x45
   143a2:	f00f fb2f 	bl	23a04 <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   143a6:	3501      	adds	r5, #1
   143a8:	e7cd      	b.n	14346 <hci_num_completed_packets+0xe>
   143aa:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   143ac:	b95b      	cbnz	r3, 143c6 <hci_num_completed_packets+0x8e>
   143ae:	f382 8811 	msr	BASEPRI, r2
   143b2:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
   143b6:	2145      	movs	r1, #69	; 0x45
   143b8:	4648      	mov	r0, r9
   143ba:	f00f fb23 	bl	23a04 <z_log_minimal_printk>
		bt_conn_unref(conn);
   143be:	4620      	mov	r0, r4
   143c0:	f002 f88a 	bl	164d8 <bt_conn_unref>
   143c4:	e7ef      	b.n	143a6 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   143c6:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   143c8:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   143ca:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   143cc:	428b      	cmp	r3, r1
	list->tail = node;
   143ce:	bf08      	it	eq
   143d0:	61a0      	streq	r0, [r4, #24]
   143d2:	f382 8811 	msr	BASEPRI, r2
   143d6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   143da:	f04f 0240 	mov.w	r2, #64	; 0x40
   143de:	f3ef 8111 	mrs	r1, BASEPRI
   143e2:	f382 8812 	msr	BASEPRI_MAX, r2
   143e6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   143ea:	68da      	ldr	r2, [r3, #12]
   143ec:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   143ee:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   143f2:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   143f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   143f8:	b94a      	cbnz	r2, 1440e <hci_num_completed_packets+0xd6>
	list->head = node;
   143fa:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   143fe:	f381 8811 	msr	BASEPRI, r1
   14402:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   14406:	4650      	mov	r0, sl
   14408:	f00c fc8c 	bl	20d24 <k_work_submit>
   1440c:	e7be      	b.n	1438c <hci_num_completed_packets+0x54>
	parent->next = child;
   1440e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14410:	6263      	str	r3, [r4, #36]	; 0x24
}
   14412:	e7f4      	b.n	143fe <hci_num_completed_packets+0xc6>
   14414:	00028dca 	.word	0x00028dca
   14418:	00028da9 	.word	0x00028da9

0001441c <bt_hci_cmd_state_set_init>:
{
   1441c:	b510      	push	{r4, lr}
	state->bit = bit;
   1441e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   14422:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14426:	720b      	strb	r3, [r1, #8]
{
   14428:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1442a:	f007 f855 	bl	1b4d8 <net_buf_id>
   1442e:	4b03      	ldr	r3, [pc, #12]	; (1443c <bt_hci_cmd_state_set_init+0x20>)
   14430:	220c      	movs	r2, #12
   14432:	fb02 3300 	mla	r3, r2, r0, r3
   14436:	605c      	str	r4, [r3, #4]
}
   14438:	bd10      	pop	{r4, pc}
   1443a:	bf00      	nop
   1443c:	2000206c 	.word	0x2000206c

00014440 <bt_hci_cmd_create>:
{
   14440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   14444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14448:	4606      	mov	r6, r0
   1444a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1444e:	481d      	ldr	r0, [pc, #116]	; (144c4 <bt_hci_cmd_create+0x84>)
   14450:	460f      	mov	r7, r1
   14452:	f012 f86a 	bl	2652a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   14456:	4604      	mov	r4, r0
   14458:	b950      	cbnz	r0, 14470 <bt_hci_cmd_create+0x30>
   1445a:	491b      	ldr	r1, [pc, #108]	; (144c8 <bt_hci_cmd_create+0x88>)
   1445c:	481b      	ldr	r0, [pc, #108]	; (144cc <bt_hci_cmd_create+0x8c>)
   1445e:	f240 1201 	movw	r2, #257	; 0x101
   14462:	f00f fac1 	bl	239e8 <assert_print>
   14466:	4818      	ldr	r0, [pc, #96]	; (144c8 <bt_hci_cmd_create+0x88>)
   14468:	f240 1101 	movw	r1, #257	; 0x101
   1446c:	f00f fab5 	bl	239da <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   14470:	f100 0a08 	add.w	sl, r0, #8
   14474:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14476:	f04f 0800 	mov.w	r8, #0
   1447a:	4650      	mov	r0, sl
   1447c:	f007 f958 	bl	1b730 <net_buf_simple_reserve>
   14480:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   14484:	4620      	mov	r0, r4
   14486:	f007 f827 	bl	1b4d8 <net_buf_id>
   1448a:	4d11      	ldr	r5, [pc, #68]	; (144d0 <bt_hci_cmd_create+0x90>)
   1448c:	f04f 090c 	mov.w	r9, #12
   14490:	fb09 5000 	mla	r0, r9, r0, r5
   14494:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   14496:	4620      	mov	r0, r4
   14498:	f007 f81e 	bl	1b4d8 <net_buf_id>
   1449c:	fb09 5000 	mla	r0, r9, r0, r5
   144a0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   144a4:	4620      	mov	r0, r4
   144a6:	f007 f817 	bl	1b4d8 <net_buf_id>
   144aa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   144ae:	2103      	movs	r1, #3
   144b0:	f8c5 8004 	str.w	r8, [r5, #4]
   144b4:	4650      	mov	r0, sl
   144b6:	f007 fb49 	bl	1bb4c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   144ba:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   144bc:	7087      	strb	r7, [r0, #2]
}
   144be:	4620      	mov	r0, r4
   144c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   144c4:	200009fc 	.word	0x200009fc
   144c8:	00028c9a 	.word	0x00028c9a
   144cc:	000280bd 	.word	0x000280bd
   144d0:	2000206c 	.word	0x2000206c

000144d4 <bt_hci_cmd_send_sync>:
{
   144d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   144d6:	4607      	mov	r7, r0
   144d8:	b087      	sub	sp, #28
   144da:	4615      	mov	r5, r2
	if (!buf) {
   144dc:	460c      	mov	r4, r1
   144de:	b921      	cbnz	r1, 144ea <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   144e0:	f7ff ffae 	bl	14440 <bt_hci_cmd_create>
		if (!buf) {
   144e4:	4604      	mov	r4, r0
   144e6:	2800      	cmp	r0, #0
   144e8:	d047      	beq.n	1457a <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   144ea:	2201      	movs	r2, #1
   144ec:	2100      	movs	r1, #0
   144ee:	4668      	mov	r0, sp
   144f0:	f012 fc83 	bl	26dfa <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   144f4:	4620      	mov	r0, r4
   144f6:	f006 ffef 	bl	1b4d8 <net_buf_id>
   144fa:	4e21      	ldr	r6, [pc, #132]	; (14580 <bt_hci_cmd_send_sync+0xac>)
   144fc:	230c      	movs	r3, #12
   144fe:	fb03 6000 	mla	r0, r3, r0, r6
   14502:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14506:	4620      	mov	r0, r4
   14508:	f007 fa5c 	bl	1b9c4 <net_buf_ref>
   1450c:	4601      	mov	r1, r0
   1450e:	481d      	ldr	r0, [pc, #116]	; (14584 <bt_hci_cmd_send_sync+0xb0>)
   14510:	f007 f9ec 	bl	1b8ec <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14514:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14518:	2300      	movs	r3, #0
   1451a:	4668      	mov	r0, sp
   1451c:	f00c f912 	bl	20744 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14520:	b158      	cbz	r0, 1453a <bt_hci_cmd_send_sync+0x66>
   14522:	4919      	ldr	r1, [pc, #100]	; (14588 <bt_hci_cmd_send_sync+0xb4>)
   14524:	4819      	ldr	r0, [pc, #100]	; (1458c <bt_hci_cmd_send_sync+0xb8>)
   14526:	f240 1249 	movw	r2, #329	; 0x149
   1452a:	f00f fa5d 	bl	239e8 <assert_print>
   1452e:	4040      	eors	r0, r0
   14530:	f380 8811 	msr	BASEPRI, r0
   14534:	f04f 0003 	mov.w	r0, #3
   14538:	df02      	svc	2
	status = cmd(buf)->status;
   1453a:	4620      	mov	r0, r4
   1453c:	f006 ffcc 	bl	1b4d8 <net_buf_id>
   14540:	230c      	movs	r3, #12
   14542:	4358      	muls	r0, r3
   14544:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   14546:	b186      	cbz	r6, 1456a <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   14548:	4811      	ldr	r0, [pc, #68]	; (14590 <bt_hci_cmd_send_sync+0xbc>)
   1454a:	4633      	mov	r3, r6
   1454c:	463a      	mov	r2, r7
   1454e:	2157      	movs	r1, #87	; 0x57
   14550:	f00f fa58 	bl	23a04 <z_log_minimal_printk>
		net_buf_unref(buf);
   14554:	4620      	mov	r0, r4
   14556:	f007 f9f3 	bl	1b940 <net_buf_unref>
			return -ECONNREFUSED;
   1455a:	2e09      	cmp	r6, #9
   1455c:	bf14      	ite	ne
   1455e:	f06f 0004 	mvnne.w	r0, #4
   14562:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   14566:	b007      	add	sp, #28
   14568:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   1456a:	b115      	cbz	r5, 14572 <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   1456c:	602c      	str	r4, [r5, #0]
	return 0;
   1456e:	2000      	movs	r0, #0
   14570:	e7f9      	b.n	14566 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   14572:	4620      	mov	r0, r4
   14574:	f007 f9e4 	bl	1b940 <net_buf_unref>
   14578:	e7f9      	b.n	1456e <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
   1457a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1457e:	e7f2      	b.n	14566 <bt_hci_cmd_send_sync+0x92>
   14580:	2000206c 	.word	0x2000206c
   14584:	200004c4 	.word	0x200004c4
   14588:	00028c9a 	.word	0x00028c9a
   1458c:	000280bd 	.word	0x000280bd
   14590:	00028de6 	.word	0x00028de6

00014594 <hci_le_read_max_data_len>:
{
   14594:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14596:	4606      	mov	r6, r0
   14598:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1459a:	aa01      	add	r2, sp, #4
   1459c:	2100      	movs	r1, #0
   1459e:	f242 002f 	movw	r0, #8239	; 0x202f
   145a2:	f7ff ff97 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   145a6:	4604      	mov	r4, r0
   145a8:	b130      	cbz	r0, 145b8 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   145aa:	4809      	ldr	r0, [pc, #36]	; (145d0 <hci_le_read_max_data_len+0x3c>)
   145ac:	2145      	movs	r1, #69	; 0x45
   145ae:	f00f fa29 	bl	23a04 <z_log_minimal_printk>
}
   145b2:	4620      	mov	r0, r4
   145b4:	b002      	add	sp, #8
   145b6:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   145b8:	9801      	ldr	r0, [sp, #4]
   145ba:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   145bc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   145c0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   145c2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   145c6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   145c8:	f007 f9ba 	bl	1b940 <net_buf_unref>
	return 0;
   145cc:	e7f1      	b.n	145b2 <hci_le_read_max_data_len+0x1e>
   145ce:	bf00      	nop
   145d0:	00028e07 	.word	0x00028e07

000145d4 <bt_hci_le_rand>:
{
   145d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   145d6:	4b14      	ldr	r3, [pc, #80]	; (14628 <bt_hci_le_rand+0x54>)
   145d8:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   145dc:	2b00      	cmp	r3, #0
{
   145de:	4605      	mov	r5, r0
   145e0:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   145e2:	da1d      	bge.n	14620 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   145e4:	b914      	cbnz	r4, 145ec <bt_hci_le_rand+0x18>
	return 0;
   145e6:	4620      	mov	r0, r4
}
   145e8:	b003      	add	sp, #12
   145ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   145ec:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   145ee:	aa01      	add	r2, sp, #4
   145f0:	f04f 0100 	mov.w	r1, #0
   145f4:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   145f8:	4626      	mov	r6, r4
   145fa:	bf28      	it	cs
   145fc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   145fe:	f7ff ff69 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   14602:	2800      	cmp	r0, #0
   14604:	d1f0      	bne.n	145e8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   14606:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   14608:	68b9      	ldr	r1, [r7, #8]
   1460a:	4632      	mov	r2, r6
   1460c:	3101      	adds	r1, #1
   1460e:	4628      	mov	r0, r5
   14610:	f010 f86d 	bl	246ee <memcpy>
		net_buf_unref(rsp);
   14614:	4638      	mov	r0, r7
   14616:	f007 f993 	bl	1b940 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1461a:	4435      	add	r5, r6
		len -= count;
   1461c:	1ba4      	subs	r4, r4, r6
   1461e:	e7e1      	b.n	145e4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   14620:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14624:	e7e0      	b.n	145e8 <bt_hci_le_rand+0x14>
   14626:	bf00      	nop
   14628:	20000380 	.word	0x20000380

0001462c <bt_hci_le_enh_conn_complete>:
{
   1462c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14630:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   14634:	4a94      	ldr	r2, [pc, #592]	; (14888 <bt_hci_le_enh_conn_complete+0x25c>)
	handle |= ~BT_ACL_HANDLE_MASK;
   14636:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   1463a:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   1463c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   14640:	b29b      	uxth	r3, r3
   14642:	4299      	cmp	r1, r3
{
   14644:	4605      	mov	r5, r0
   14646:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   1464a:	bf08      	it	eq
   1464c:	8016      	strheq	r6, [r2, #0]
{
   1464e:	b088      	sub	sp, #32
			return true;
   14650:	bf08      	it	eq
   14652:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   14654:	f000 fd90 	bl	15178 <bt_id_pending_keys_update>
	if (evt->status) {
   14658:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1465a:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   1465e:	b334      	cbz	r4, 146ae <bt_hci_le_enh_conn_complete+0x82>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14660:	2c3c      	cmp	r4, #60	; 0x3c
   14662:	d11c      	bne.n	1469e <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14664:	f001 f94e 	bl	15904 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14668:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1466c:	3010      	adds	r0, #16
   1466e:	f010 f945 	bl	248fc <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   14672:	2000      	movs	r0, #0
   14674:	f7ff fc94 	bl	13fa0 <find_pending_connect.part.0>
		if (!conn) {
   14678:	4605      	mov	r5, r0
   1467a:	b930      	cbnz	r0, 1468a <bt_hci_le_enh_conn_complete+0x5e>
			BT_ERR("No pending peripheral connection");
   1467c:	4883      	ldr	r0, [pc, #524]	; (1488c <bt_hci_le_enh_conn_complete+0x260>)
   1467e:	2145      	movs	r1, #69	; 0x45
}
   14680:	b008      	add	sp, #32
   14682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			BT_ERR("No pending peripheral connection");
   14686:	f00f b9bd 	b.w	23a04 <z_log_minimal_printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1468a:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1468c:	2100      	movs	r1, #0
   1468e:	f001 ff5b 	bl	16548 <bt_conn_set_state>
		bt_conn_unref(conn);
   14692:	4628      	mov	r0, r5
}
   14694:	b008      	add	sp, #32
   14696:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   1469a:	f001 bf1d 	b.w	164d8 <bt_conn_unref>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1469e:	487c      	ldr	r0, [pc, #496]	; (14890 <bt_hci_le_enh_conn_complete+0x264>)
   146a0:	4622      	mov	r2, r4
   146a2:	2157      	movs	r1, #87	; 0x57
}
   146a4:	b008      	add	sp, #32
   146a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   146aa:	f00f b9ab 	b.w	23a04 <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   146ae:	792b      	ldrb	r3, [r5, #4]
   146b0:	3b02      	subs	r3, #2
   146b2:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   146b4:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   146b8:	d824      	bhi.n	14704 <bt_hci_le_enh_conn_complete+0xd8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   146ba:	4649      	mov	r1, r9
   146bc:	a806      	add	r0, sp, #24
   146be:	f010 f90b 	bl	248d8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   146c2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   146c6:	2206      	movs	r2, #6
   146c8:	3b02      	subs	r3, #2
   146ca:	f105 0111 	add.w	r1, r5, #17
   146ce:	f10d 0011 	add.w	r0, sp, #17
   146d2:	f88d 3018 	strb.w	r3, [sp, #24]
   146d6:	f010 f80a 	bl	246ee <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   146da:	2301      	movs	r3, #1
   146dc:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   146e0:	78eb      	ldrb	r3, [r5, #3]
   146e2:	2b01      	cmp	r3, #1
   146e4:	d021      	beq.n	1472a <bt_hci_le_enh_conn_complete+0xfe>
		BT_ERR("No pending conn for peer %s",
   146e6:	4648      	mov	r0, r9
   146e8:	f7ff f98a 	bl	13a00 <bt_addr_le_str>
   146ec:	2145      	movs	r1, #69	; 0x45
   146ee:	4602      	mov	r2, r0
   146f0:	4868      	ldr	r0, [pc, #416]	; (14894 <bt_hci_le_enh_conn_complete+0x268>)
   146f2:	f00f f987 	bl	23a04 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   146f6:	211f      	movs	r1, #31
   146f8:	4640      	mov	r0, r8
   146fa:	f010 f91b 	bl	24934 <bt_hci_disconnect>
}
   146fe:	b008      	add	sp, #32
   14700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   14704:	78eb      	ldrb	r3, [r5, #3]
   14706:	2b01      	cmp	r3, #1
   14708:	bf04      	itt	eq
   1470a:	4b63      	ldreq	r3, [pc, #396]	; (14898 <bt_hci_le_enh_conn_complete+0x26c>)
   1470c:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   14710:	4649      	mov	r1, r9
   14712:	4620      	mov	r0, r4
   14714:	f010 fa34 	bl	24b80 <bt_lookup_id_addr>
   14718:	4601      	mov	r1, r0
   1471a:	a806      	add	r0, sp, #24
   1471c:	f010 f8dc 	bl	248d8 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   14720:	4649      	mov	r1, r9
   14722:	a804      	add	r0, sp, #16
   14724:	f010 f8d8 	bl	248d8 <bt_addr_le_copy>
   14728:	e7da      	b.n	146e0 <bt_hci_le_enh_conn_complete+0xb4>
   1472a:	a806      	add	r0, sp, #24
   1472c:	f7ff fc38 	bl	13fa0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14730:	78eb      	ldrb	r3, [r5, #3]
   14732:	2b01      	cmp	r3, #1
   14734:	4604      	mov	r4, r0
   14736:	d10a      	bne.n	1474e <bt_hci_le_enh_conn_complete+0x122>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14738:	f001 f8e4 	bl	15904 <bt_le_adv_lookup_legacy>
   1473c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14740:	4682      	mov	sl, r0
   14742:	3010      	adds	r0, #16
   14744:	f010 f8da 	bl	248fc <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   14748:	4650      	mov	r0, sl
   1474a:	f010 fb43 	bl	24dd4 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   1474e:	2c00      	cmp	r4, #0
   14750:	d0c9      	beq.n	146e6 <bt_hci_le_enh_conn_complete+0xba>
	conn->handle = handle;
   14752:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   14754:	a906      	add	r1, sp, #24
	conn->handle = handle;
   14756:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1475a:	f010 f8bd 	bl	248d8 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1475e:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   14762:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14766:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   1476a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1476e:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   14772:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   14776:	78eb      	ldrb	r3, [r5, #3]
   14778:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   1477a:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1477c:	2b01      	cmp	r3, #1
	conn->err = 0U;
   1477e:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14780:	d115      	bne.n	147ae <bt_hci_le_enh_conn_complete+0x182>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   14782:	a904      	add	r1, sp, #16
   14784:	f104 0097 	add.w	r0, r4, #151	; 0x97
   14788:	f010 f8a6 	bl	248d8 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1478c:	f001 f8ba 	bl	15904 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   14790:	7a21      	ldrb	r1, [r4, #8]
   14792:	4d41      	ldr	r5, [pc, #260]	; (14898 <bt_hci_le_enh_conn_complete+0x26c>)
   14794:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   14798:	4429      	add	r1, r5
   1479a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   1479e:	f010 f89b 	bl	248d8 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   147a2:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   147a6:	065d      	lsls	r5, r3, #25
   147a8:	d501      	bpl.n	147ae <bt_hci_le_enh_conn_complete+0x182>
			bt_le_adv_resume();
   147aa:	f001 fa63 	bl	15c74 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   147ae:	2107      	movs	r1, #7
   147b0:	4620      	mov	r0, r4
   147b2:	f001 fec9 	bl	16548 <bt_conn_set_state>
	if (is_disconnected) {
   147b6:	b11e      	cbz	r6, 147c0 <bt_hci_le_enh_conn_complete+0x194>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   147b8:	2101      	movs	r1, #1
   147ba:	4620      	mov	r0, r4
   147bc:	f001 fec4 	bl	16548 <bt_conn_set_state>
	bt_conn_connected(conn);
   147c0:	4620      	mov	r0, r4
   147c2:	f010 fb62 	bl	24e8a <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   147c6:	7b63      	ldrb	r3, [r4, #13]
   147c8:	2b07      	cmp	r3, #7
   147ca:	d155      	bne.n	14878 <bt_hci_le_enh_conn_complete+0x24c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   147cc:	f3bf 8f5b 	dmb	ish
   147d0:	6863      	ldr	r3, [r4, #4]
   147d2:	4e31      	ldr	r6, [pc, #196]	; (14898 <bt_hci_le_enh_conn_complete+0x26c>)
   147d4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   147d8:	f413 6f00 	tst.w	r3, #2048	; 0x800
   147dc:	d11f      	bne.n	1481e <bt_hci_le_enh_conn_complete+0x1f2>
   147de:	78e3      	ldrb	r3, [r4, #3]
   147e0:	b11b      	cbz	r3, 147ea <bt_hci_le_enh_conn_complete+0x1be>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   147e2:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   147e6:	0718      	lsls	r0, r3, #28
   147e8:	d519      	bpl.n	1481e <bt_hci_le_enh_conn_complete+0x1f2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   147ea:	2102      	movs	r1, #2
   147ec:	f242 0016 	movw	r0, #8214	; 0x2016
   147f0:	f7ff fe26 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   147f4:	4605      	mov	r5, r0
   147f6:	2800      	cmp	r0, #0
   147f8:	d042      	beq.n	14880 <bt_hci_le_enh_conn_complete+0x254>
   147fa:	2102      	movs	r1, #2
   147fc:	3008      	adds	r0, #8
   147fe:	f007 f9a5 	bl	1bb4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   14802:	8823      	ldrh	r3, [r4, #0]
   14804:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   14806:	2200      	movs	r2, #0
   14808:	4629      	mov	r1, r5
   1480a:	f242 0016 	movw	r0, #8214	; 0x2016
   1480e:	f7ff fe61 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   14812:	4602      	mov	r2, r0
   14814:	b118      	cbz	r0, 1481e <bt_hci_le_enh_conn_complete+0x1f2>
			BT_ERR("Failed read remote features (%d)", err);
   14816:	4821      	ldr	r0, [pc, #132]	; (1489c <bt_hci_le_enh_conn_complete+0x270>)
   14818:	2145      	movs	r1, #69	; 0x45
   1481a:	f00f f8f3 	bl	23a04 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1481e:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   14822:	07d9      	lsls	r1, r3, #31
   14824:	d50c      	bpl.n	14840 <bt_hci_le_enh_conn_complete+0x214>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   14826:	2100      	movs	r1, #0
   14828:	2302      	movs	r3, #2
   1482a:	461a      	mov	r2, r3
   1482c:	9100      	str	r1, [sp, #0]
   1482e:	4620      	mov	r0, r4
   14830:	f010 f8b9 	bl	249a6 <bt_le_set_phy>
		if (err) {
   14834:	4602      	mov	r2, r0
   14836:	b118      	cbz	r0, 14840 <bt_hci_le_enh_conn_complete+0x214>
			BT_ERR("Failed LE Set PHY (%d)", err);
   14838:	4819      	ldr	r0, [pc, #100]	; (148a0 <bt_hci_le_enh_conn_complete+0x274>)
   1483a:	2145      	movs	r1, #69	; 0x45
   1483c:	f00f f8e2 	bl	23a04 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   14840:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   14844:	069a      	lsls	r2, r3, #26
   14846:	d517      	bpl.n	14878 <bt_hci_le_enh_conn_complete+0x24c>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14848:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   1484c:	689b      	ldr	r3, [r3, #8]
   1484e:	079b      	lsls	r3, r3, #30
   14850:	d512      	bpl.n	14878 <bt_hci_le_enh_conn_complete+0x24c>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14852:	f10d 010e 	add.w	r1, sp, #14
   14856:	a803      	add	r0, sp, #12
   14858:	f7ff fe9c 	bl	14594 <hci_le_read_max_data_len>
			if (!err) {
   1485c:	b960      	cbnz	r0, 14878 <bt_hci_le_enh_conn_complete+0x24c>
				err = bt_le_set_data_len(conn,
   1485e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   14862:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   14866:	4620      	mov	r0, r4
   14868:	f010 f87f 	bl	2496a <bt_le_set_data_len>
				if (err) {
   1486c:	4602      	mov	r2, r0
   1486e:	b118      	cbz	r0, 14878 <bt_hci_le_enh_conn_complete+0x24c>
					BT_ERR("Failed to set data len (%d)", err);
   14870:	480c      	ldr	r0, [pc, #48]	; (148a4 <bt_hci_le_enh_conn_complete+0x278>)
   14872:	2145      	movs	r1, #69	; 0x45
   14874:	f00f f8c6 	bl	23a04 <z_log_minimal_printk>
	bt_conn_unref(conn);
   14878:	4620      	mov	r0, r4
   1487a:	f001 fe2d 	bl	164d8 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1487e:	e73e      	b.n	146fe <bt_hci_le_enh_conn_complete+0xd2>
		return -ENOBUFS;
   14880:	f06f 0268 	mvn.w	r2, #104	; 0x68
   14884:	e7c7      	b.n	14816 <bt_hci_le_enh_conn_complete+0x1ea>
   14886:	bf00      	nop
   14888:	2000255e 	.word	0x2000255e
   1488c:	00028e2c 	.word	0x00028e2c
   14890:	00028e52 	.word	0x00028e52
   14894:	00028e70 	.word	0x00028e70
   14898:	20000380 	.word	0x20000380
   1489c:	00028e91 	.word	0x00028e91
   148a0:	00028eb7 	.word	0x00028eb7
   148a4:	00028ed3 	.word	0x00028ed3

000148a8 <le_legacy_conn_complete>:
{
   148a8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   148aa:	6881      	ldr	r1, [r0, #8]
   148ac:	4c17      	ldr	r4, [pc, #92]	; (1490c <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   148ae:	780b      	ldrb	r3, [r1, #0]
{
   148b0:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   148b2:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   148b4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   148b8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   148bc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   148c0:	78cb      	ldrb	r3, [r1, #3]
   148c2:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   148c6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   148ca:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   148ce:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   148d2:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   148d6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   148da:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   148de:	7c4b      	ldrb	r3, [r1, #17]
   148e0:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   148e4:	3104      	adds	r1, #4
   148e6:	f00f fff7 	bl	248d8 <bt_addr_le_copy>
   148ea:	4621      	mov	r1, r4
   148ec:	2206      	movs	r2, #6
   148ee:	f10d 000b 	add.w	r0, sp, #11
   148f2:	f00f fefc 	bl	246ee <memcpy>
   148f6:	2206      	movs	r2, #6
   148f8:	4621      	mov	r1, r4
   148fa:	f10d 0011 	add.w	r0, sp, #17
   148fe:	f00f fef6 	bl	246ee <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   14902:	4668      	mov	r0, sp
   14904:	f7ff fe92 	bl	1462c <bt_hci_le_enh_conn_complete>
}
   14908:	b008      	add	sp, #32
   1490a:	bd10      	pop	{r4, pc}
   1490c:	000289bf 	.word	0x000289bf

00014910 <bt_security_err_get>:
	switch (hci_err) {
   14910:	2829      	cmp	r0, #41	; 0x29
   14912:	bf9a      	itte	ls
   14914:	4b01      	ldrls	r3, [pc, #4]	; (1491c <bt_security_err_get+0xc>)
   14916:	5c18      	ldrbls	r0, [r3, r0]
{
   14918:	2009      	movhi	r0, #9
}
   1491a:	4770      	bx	lr
   1491c:	00029133 	.word	0x00029133

00014920 <hci_encrypt_key_refresh_complete>:
{
   14920:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   14922:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14924:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   14928:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1492a:	4630      	mov	r0, r6
   1492c:	f001 fe04 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   14930:	4604      	mov	r4, r0
   14932:	b930      	cbnz	r0, 14942 <hci_encrypt_key_refresh_complete+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   14934:	4632      	mov	r2, r6
   14936:	4817      	ldr	r0, [pc, #92]	; (14994 <hci_encrypt_key_refresh_complete+0x74>)
}
   14938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1493c:	2145      	movs	r1, #69	; 0x45
   1493e:	f00f b861 	b.w	23a04 <z_log_minimal_printk>
	if (status) {
   14942:	b165      	cbz	r5, 1495e <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14944:	4628      	mov	r0, r5
   14946:	f7ff ffe3 	bl	14910 <bt_security_err_get>
   1494a:	4629      	mov	r1, r5
   1494c:	4602      	mov	r2, r0
   1494e:	4620      	mov	r0, r4
   14950:	f002 f800 	bl	16954 <bt_conn_security_changed>
	bt_conn_unref(conn);
   14954:	4620      	mov	r0, r4
}
   14956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1495a:	f001 bdbd 	b.w	164d8 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1495e:	7883      	ldrb	r3, [r0, #2]
   14960:	2b01      	cmp	r3, #1
   14962:	d1ef      	bne.n	14944 <hci_encrypt_key_refresh_complete+0x24>
		bt_smp_update_keys(conn);
   14964:	f006 fad2 	bl	1af0c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   14968:	4620      	mov	r0, r4
   1496a:	f00f ff9c 	bl	248a6 <update_sec_level>
   1496e:	2800      	cmp	r0, #0
   14970:	d1e8      	bne.n	14944 <hci_encrypt_key_refresh_complete+0x24>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14972:	2005      	movs	r0, #5
   14974:	f7ff ffcc 	bl	14910 <bt_security_err_get>
   14978:	2105      	movs	r1, #5
   1497a:	4602      	mov	r2, r0
   1497c:	4620      	mov	r0, r4
   1497e:	f001 ffe9 	bl	16954 <bt_conn_security_changed>
		BT_ERR("Failed to set required security level");
   14982:	4805      	ldr	r0, [pc, #20]	; (14998 <hci_encrypt_key_refresh_complete+0x78>)
   14984:	2145      	movs	r1, #69	; 0x45
   14986:	f00f f83d 	bl	23a04 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   1498a:	2105      	movs	r1, #5
   1498c:	4620      	mov	r0, r4
   1498e:	f010 fa85 	bl	24e9c <bt_conn_disconnect>
   14992:	e7df      	b.n	14954 <hci_encrypt_key_refresh_complete+0x34>
   14994:	00028baf 	.word	0x00028baf
   14998:	00028ef4 	.word	0x00028ef4

0001499c <hci_encrypt_change>:
{
   1499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1499e:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   149a0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   149a4:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   149a6:	4638      	mov	r0, r7
   149a8:	f001 fdc6 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   149ac:	4604      	mov	r4, r0
   149ae:	b930      	cbnz	r0, 149be <hci_encrypt_change+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   149b0:	463a      	mov	r2, r7
   149b2:	481c      	ldr	r0, [pc, #112]	; (14a24 <hci_encrypt_change+0x88>)
}
   149b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   149b8:	2145      	movs	r1, #69	; 0x45
   149ba:	f00f b823 	b.w	23a04 <z_log_minimal_printk>
	if (status) {
   149be:	b165      	cbz	r5, 149da <hci_encrypt_change+0x3e>
		bt_conn_security_changed(conn, status,
   149c0:	4628      	mov	r0, r5
   149c2:	f7ff ffa5 	bl	14910 <bt_security_err_get>
   149c6:	4629      	mov	r1, r5
   149c8:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   149ca:	4620      	mov	r0, r4
   149cc:	f001 ffc2 	bl	16954 <bt_conn_security_changed>
	bt_conn_unref(conn);
   149d0:	4620      	mov	r0, r4
}
   149d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   149d6:	f001 bd7f 	b.w	164d8 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   149da:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   149dc:	78f3      	ldrb	r3, [r6, #3]
   149de:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   149e0:	2a01      	cmp	r2, #1
   149e2:	d005      	beq.n	149f0 <hci_encrypt_change+0x54>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   149e4:	2000      	movs	r0, #0
   149e6:	f7ff ff93 	bl	14910 <bt_security_err_get>
   149ea:	2100      	movs	r1, #0
   149ec:	4602      	mov	r2, r0
   149ee:	e7ec      	b.n	149ca <hci_encrypt_change+0x2e>
		if (conn->encrypt) {
   149f0:	b10b      	cbz	r3, 149f6 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   149f2:	f006 fa8b 	bl	1af0c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   149f6:	4620      	mov	r0, r4
   149f8:	f00f ff55 	bl	248a6 <update_sec_level>
   149fc:	2800      	cmp	r0, #0
   149fe:	d1f1      	bne.n	149e4 <hci_encrypt_change+0x48>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14a00:	2005      	movs	r0, #5
   14a02:	f7ff ff85 	bl	14910 <bt_security_err_get>
   14a06:	2105      	movs	r1, #5
   14a08:	4602      	mov	r2, r0
   14a0a:	4620      	mov	r0, r4
   14a0c:	f001 ffa2 	bl	16954 <bt_conn_security_changed>
		BT_ERR("Failed to set required security level");
   14a10:	4805      	ldr	r0, [pc, #20]	; (14a28 <hci_encrypt_change+0x8c>)
   14a12:	2145      	movs	r1, #69	; 0x45
   14a14:	f00e fff6 	bl	23a04 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   14a18:	2105      	movs	r1, #5
   14a1a:	4620      	mov	r0, r4
   14a1c:	f010 fa3e 	bl	24e9c <bt_conn_disconnect>
   14a20:	e7d6      	b.n	149d0 <hci_encrypt_change+0x34>
   14a22:	bf00      	nop
   14a24:	00028baf 	.word	0x00028baf
   14a28:	00028ef4 	.word	0x00028ef4

00014a2c <bt_send>:
	return bt_dev.drv->send(buf);
   14a2c:	4b02      	ldr	r3, [pc, #8]	; (14a38 <bt_send+0xc>)
   14a2e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   14a32:	695b      	ldr	r3, [r3, #20]
   14a34:	4718      	bx	r3
   14a36:	bf00      	nop
   14a38:	20000380 	.word	0x20000380

00014a3c <bt_hci_cmd_send>:
{
   14a3c:	b538      	push	{r3, r4, r5, lr}
   14a3e:	4605      	mov	r5, r0
	if (!buf) {
   14a40:	460c      	mov	r4, r1
   14a42:	b919      	cbnz	r1, 14a4c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   14a44:	f7ff fcfc 	bl	14440 <bt_hci_cmd_create>
		if (!buf) {
   14a48:	4604      	mov	r4, r0
   14a4a:	b1c0      	cbz	r0, 14a7e <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14a4c:	f640 4335 	movw	r3, #3125	; 0xc35
   14a50:	429d      	cmp	r5, r3
   14a52:	d10e      	bne.n	14a72 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   14a54:	4620      	mov	r0, r4
   14a56:	f7ff ffe9 	bl	14a2c <bt_send>
		if (err) {
   14a5a:	4605      	mov	r5, r0
   14a5c:	b168      	cbz	r0, 14a7a <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
   14a5e:	4602      	mov	r2, r0
   14a60:	2145      	movs	r1, #69	; 0x45
   14a62:	4808      	ldr	r0, [pc, #32]	; (14a84 <bt_hci_cmd_send+0x48>)
   14a64:	f00e ffce 	bl	23a04 <z_log_minimal_printk>
			net_buf_unref(buf);
   14a68:	4620      	mov	r0, r4
   14a6a:	f006 ff69 	bl	1b940 <net_buf_unref>
}
   14a6e:	4628      	mov	r0, r5
   14a70:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14a72:	4805      	ldr	r0, [pc, #20]	; (14a88 <bt_hci_cmd_send+0x4c>)
   14a74:	4621      	mov	r1, r4
   14a76:	f006 ff39 	bl	1b8ec <net_buf_put>
	return 0;
   14a7a:	2500      	movs	r5, #0
   14a7c:	e7f7      	b.n	14a6e <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   14a7e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14a82:	e7f4      	b.n	14a6e <bt_hci_cmd_send+0x32>
   14a84:	00028f1f 	.word	0x00028f1f
   14a88:	200004c4 	.word	0x200004c4

00014a8c <le_ltk_request>:
{
   14a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   14a8e:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14a90:	8826      	ldrh	r6, [r4, #0]
   14a92:	b2b7      	uxth	r7, r6
{
   14a94:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   14a96:	4638      	mov	r0, r7
   14a98:	f001 fd4e 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   14a9c:	4605      	mov	r5, r0
   14a9e:	b938      	cbnz	r0, 14ab0 <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14aa0:	4821      	ldr	r0, [pc, #132]	; (14b28 <le_ltk_request+0x9c>)
   14aa2:	463a      	mov	r2, r7
   14aa4:	2145      	movs	r1, #69	; 0x45
}
   14aa6:	b007      	add	sp, #28
   14aa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14aac:	f00e bfaa 	b.w	23a04 <z_log_minimal_printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   14ab0:	af02      	add	r7, sp, #8
   14ab2:	f8d4 2002 	ldr.w	r2, [r4, #2]
   14ab6:	f8d4 3006 	ldr.w	r3, [r4, #6]
   14aba:	9701      	str	r7, [sp, #4]
   14abc:	8961      	ldrh	r1, [r4, #10]
   14abe:	9100      	str	r1, [sp, #0]
   14ac0:	f011 fc32 	bl	26328 <bt_smp_request_ltk>
   14ac4:	b1f8      	cbz	r0, 14b06 <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   14ac6:	2112      	movs	r1, #18
   14ac8:	f242 001a 	movw	r0, #8218	; 0x201a
   14acc:	f7ff fcb8 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   14ad0:	4604      	mov	r4, r0
   14ad2:	b940      	cbnz	r0, 14ae6 <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
   14ad4:	4815      	ldr	r0, [pc, #84]	; (14b2c <le_ltk_request+0xa0>)
   14ad6:	2145      	movs	r1, #69	; 0x45
   14ad8:	f00e ff94 	bl	23a04 <z_log_minimal_printk>
	bt_conn_unref(conn);
   14adc:	4628      	mov	r0, r5
   14ade:	f001 fcfb 	bl	164d8 <bt_conn_unref>
}
   14ae2:	b007      	add	sp, #28
   14ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ae6:	2112      	movs	r1, #18
   14ae8:	3008      	adds	r0, #8
   14aea:	f007 f82f 	bl	1bb4c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   14aee:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   14af0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   14af4:	2210      	movs	r2, #16
   14af6:	f00f fdfa 	bl	246ee <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   14afa:	4621      	mov	r1, r4
   14afc:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14b00:	f7ff ff9c 	bl	14a3c <bt_hci_cmd_send>
   14b04:	e7ea      	b.n	14adc <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   14b06:	2102      	movs	r1, #2
   14b08:	f242 001b 	movw	r0, #8219	; 0x201b
   14b0c:	f7ff fc98 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   14b10:	4604      	mov	r4, r0
   14b12:	2800      	cmp	r0, #0
   14b14:	d0de      	beq.n	14ad4 <le_ltk_request+0x48>
   14b16:	2102      	movs	r1, #2
   14b18:	3008      	adds	r0, #8
   14b1a:	f007 f817 	bl	1bb4c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14b1e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   14b20:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14b22:	f242 001b 	movw	r0, #8219	; 0x201b
   14b26:	e7eb      	b.n	14b00 <le_ltk_request+0x74>
   14b28:	00028bda 	.word	0x00028bda
   14b2c:	00028f46 	.word	0x00028f46

00014b30 <le_conn_param_neg_reply>:
{
   14b30:	b570      	push	{r4, r5, r6, lr}
   14b32:	4606      	mov	r6, r0
   14b34:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   14b36:	f242 0021 	movw	r0, #8225	; 0x2021
   14b3a:	2103      	movs	r1, #3
   14b3c:	f7ff fc80 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   14b40:	4604      	mov	r4, r0
   14b42:	b928      	cbnz	r0, 14b50 <le_conn_param_neg_reply+0x20>
}
   14b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   14b48:	4808      	ldr	r0, [pc, #32]	; (14b6c <le_conn_param_neg_reply+0x3c>)
   14b4a:	2145      	movs	r1, #69	; 0x45
   14b4c:	f00e bf5a 	b.w	23a04 <z_log_minimal_printk>
   14b50:	2103      	movs	r1, #3
   14b52:	3008      	adds	r0, #8
   14b54:	f006 fffa 	bl	1bb4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   14b58:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   14b5a:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14b5c:	4621      	mov	r1, r4
   14b5e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   14b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14b66:	f7ff bf69 	b.w	14a3c <bt_hci_cmd_send>
   14b6a:	bf00      	nop
   14b6c:	00028f62 	.word	0x00028f62

00014b70 <le_conn_param_req>:
{
   14b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   14b72:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14b74:	78d9      	ldrb	r1, [r3, #3]
   14b76:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   14b78:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14b7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14b7e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   14b82:	7959      	ldrb	r1, [r3, #5]
   14b84:	791a      	ldrb	r2, [r3, #4]
   14b86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14b8a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   14b8e:	799a      	ldrb	r2, [r3, #6]
   14b90:	79d9      	ldrb	r1, [r3, #7]
   14b92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14b96:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14b9a:	7a1a      	ldrb	r2, [r3, #8]
   14b9c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   14b9e:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14ba0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   14ba4:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14ba6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   14baa:	f001 fcc5 	bl	16538 <bt_conn_lookup_handle>
	if (!conn) {
   14bae:	4606      	mov	r6, r0
   14bb0:	b950      	cbnz	r0, 14bc8 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14bb2:	481d      	ldr	r0, [pc, #116]	; (14c28 <le_conn_param_req+0xb8>)
   14bb4:	2145      	movs	r1, #69	; 0x45
   14bb6:	4622      	mov	r2, r4
   14bb8:	f00e ff24 	bl	23a04 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   14bbc:	2102      	movs	r1, #2
   14bbe:	4620      	mov	r0, r4
   14bc0:	f7ff ffb6 	bl	14b30 <le_conn_param_neg_reply>
}
   14bc4:	b003      	add	sp, #12
   14bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   14bc8:	4669      	mov	r1, sp
   14bca:	f001 fe3b 	bl	16844 <le_param_req>
   14bce:	b938      	cbnz	r0, 14be0 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   14bd0:	211e      	movs	r1, #30
   14bd2:	4620      	mov	r0, r4
   14bd4:	f7ff ffac 	bl	14b30 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   14bd8:	4630      	mov	r0, r6
   14bda:	f001 fc7d 	bl	164d8 <bt_conn_unref>
   14bde:	e7f1      	b.n	14bc4 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   14be0:	210e      	movs	r1, #14
   14be2:	f242 0020 	movw	r0, #8224	; 0x2020
   14be6:	f7ff fc2b 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   14bea:	4605      	mov	r5, r0
   14bec:	2800      	cmp	r0, #0
   14bee:	d0f3      	beq.n	14bd8 <le_conn_param_req+0x68>
   14bf0:	210e      	movs	r1, #14
   14bf2:	3008      	adds	r0, #8
   14bf4:	f006 ffaa 	bl	1bb4c <net_buf_simple_add>
   14bf8:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   14bfa:	220e      	movs	r2, #14
   14bfc:	2100      	movs	r1, #0
   14bfe:	f00f fd81 	bl	24704 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   14c02:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   14c04:	f8bd 3000 	ldrh.w	r3, [sp]
   14c08:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   14c0a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14c0e:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   14c10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14c14:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   14c16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14c1a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   14c1c:	4629      	mov	r1, r5
   14c1e:	f242 0020 	movw	r0, #8224	; 0x2020
   14c22:	f7ff ff0b 	bl	14a3c <bt_hci_cmd_send>
   14c26:	e7d7      	b.n	14bd8 <le_conn_param_req+0x68>
   14c28:	00028bda 	.word	0x00028bda

00014c2c <hci_tx_thread>:
{
   14c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   14c30:	4f45      	ldr	r7, [pc, #276]	; (14d48 <hci_tx_thread+0x11c>)
		BT_ASSERT(err == 0);
   14c32:	f8df 8118 	ldr.w	r8, [pc, #280]	; 14d4c <hci_tx_thread+0x120>
			ev_count += bt_conn_prepare_events(&events[1]);
   14c36:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   14c3a:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14c3c:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   14c3e:	f36f 3394 	bfc	r3, #14, #7
   14c42:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14c44:	f001 fbe2 	bl	1640c <bt_conn_prepare_events>
   14c48:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   14c4a:	483f      	ldr	r0, [pc, #252]	; (14d48 <hci_tx_thread+0x11c>)
   14c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c54:	4629      	mov	r1, r5
   14c56:	f00d ff97 	bl	22b88 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14c5a:	b158      	cbz	r0, 14c74 <hci_tx_thread+0x48>
   14c5c:	483c      	ldr	r0, [pc, #240]	; (14d50 <hci_tx_thread+0x124>)
   14c5e:	f640 12da 	movw	r2, #2522	; 0x9da
   14c62:	4641      	mov	r1, r8
   14c64:	f00e fec0 	bl	239e8 <assert_print>
   14c68:	4040      	eors	r0, r0
   14c6a:	f380 8811 	msr	BASEPRI, r0
   14c6e:	f04f 0003 	mov.w	r0, #3
   14c72:	df02      	svc	2
{
   14c74:	4e34      	ldr	r6, [pc, #208]	; (14d48 <hci_tx_thread+0x11c>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   14c76:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 14d54 <hci_tx_thread+0x128>
	for (; count; ev++, count--) {
   14c7a:	b915      	cbnz	r5, 14c82 <hci_tx_thread+0x56>
	z_impl_k_yield();
   14c7c:	f00d f85a 	bl	21d34 <z_impl_k_yield>
	while (1) {
   14c80:	e7db      	b.n	14c3a <hci_tx_thread+0xe>
		switch (ev->state) {
   14c82:	68f2      	ldr	r2, [r6, #12]
   14c84:	f3c2 3286 	ubfx	r2, r2, #14, #7
   14c88:	2a01      	cmp	r2, #1
   14c8a:	d94e      	bls.n	14d2a <hci_tx_thread+0xfe>
   14c8c:	2a04      	cmp	r2, #4
   14c8e:	d156      	bne.n	14d3e <hci_tx_thread+0x112>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14c90:	7b33      	ldrb	r3, [r6, #12]
   14c92:	2b00      	cmp	r3, #0
   14c94:	d14c      	bne.n	14d30 <hci_tx_thread+0x104>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14c96:	4830      	ldr	r0, [pc, #192]	; (14d58 <hci_tx_thread+0x12c>)
   14c98:	2200      	movs	r2, #0
   14c9a:	2300      	movs	r3, #0
   14c9c:	f006 fd1e 	bl	1b6dc <net_buf_get>
	BT_ASSERT(buf);
   14ca0:	4604      	mov	r4, r0
   14ca2:	b958      	cbnz	r0, 14cbc <hci_tx_thread+0x90>
   14ca4:	482a      	ldr	r0, [pc, #168]	; (14d50 <hci_tx_thread+0x124>)
   14ca6:	f640 1273 	movw	r2, #2419	; 0x973
   14caa:	4641      	mov	r1, r8
   14cac:	f00e fe9c 	bl	239e8 <assert_print>
   14cb0:	4040      	eors	r0, r0
   14cb2:	f380 8811 	msr	BASEPRI, r0
   14cb6:	f04f 0003 	mov.w	r0, #3
   14cba:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   14cbc:	f8df b09c 	ldr.w	fp, [pc, #156]	; 14d5c <hci_tx_thread+0x130>
	return z_impl_k_sem_take(sem, timeout);
   14cc0:	4827      	ldr	r0, [pc, #156]	; (14d60 <hci_tx_thread+0x134>)
   14cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14cca:	f00b fd3b 	bl	20744 <z_impl_k_sem_take>
   14cce:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   14cd2:	b153      	cbz	r3, 14cea <hci_tx_thread+0xbe>
		BT_ERR("Uncleared pending sent_cmd");
   14cd4:	4823      	ldr	r0, [pc, #140]	; (14d64 <hci_tx_thread+0x138>)
   14cd6:	2145      	movs	r1, #69	; 0x45
   14cd8:	f00e fe94 	bl	23a04 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   14cdc:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   14ce0:	f006 fe2e 	bl	1b940 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14ce4:	2300      	movs	r3, #0
   14ce6:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   14cea:	4620      	mov	r0, r4
   14cec:	f006 fe6a 	bl	1b9c4 <net_buf_ref>
   14cf0:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   14cf4:	4620      	mov	r0, r4
   14cf6:	f7ff fe99 	bl	14a2c <bt_send>
	if (err) {
   14cfa:	4602      	mov	r2, r0
   14cfc:	b1a8      	cbz	r0, 14d2a <hci_tx_thread+0xfe>
		BT_ERR("Unable to send to driver (err %d)", err);
   14cfe:	481a      	ldr	r0, [pc, #104]	; (14d68 <hci_tx_thread+0x13c>)
   14d00:	2145      	movs	r1, #69	; 0x45
   14d02:	f00e fe7f 	bl	23a04 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   14d06:	4816      	ldr	r0, [pc, #88]	; (14d60 <hci_tx_thread+0x134>)
   14d08:	f00b fce2 	bl	206d0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14d0c:	4620      	mov	r0, r4
   14d0e:	f006 fbe3 	bl	1b4d8 <net_buf_id>
   14d12:	4b16      	ldr	r3, [pc, #88]	; (14d6c <hci_tx_thread+0x140>)
   14d14:	220c      	movs	r2, #12
   14d16:	fb02 3000 	mla	r0, r2, r0, r3
   14d1a:	211f      	movs	r1, #31
   14d1c:	8840      	ldrh	r0, [r0, #2]
   14d1e:	4622      	mov	r2, r4
   14d20:	f7ff fa5a 	bl	141d8 <hci_cmd_done>
		net_buf_unref(buf);
   14d24:	4620      	mov	r0, r4
   14d26:	f006 fe0b 	bl	1b940 <net_buf_unref>
	for (; count; ev++, count--) {
   14d2a:	3614      	adds	r6, #20
   14d2c:	3d01      	subs	r5, #1
   14d2e:	e7a4      	b.n	14c7a <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14d30:	2b01      	cmp	r3, #1
   14d32:	d1fa      	bne.n	14d2a <hci_tx_thread+0xfe>
					conn = CONTAINER_OF(ev->fifo,
   14d34:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   14d36:	3838      	subs	r0, #56	; 0x38
   14d38:	f001 ff90 	bl	16c5c <bt_conn_process_tx>
   14d3c:	e7f5      	b.n	14d2a <hci_tx_thread+0xfe>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   14d3e:	2157      	movs	r1, #87	; 0x57
   14d40:	4650      	mov	r0, sl
   14d42:	f00e fe5f 	bl	23a04 <z_log_minimal_printk>
   14d46:	e7f0      	b.n	14d2a <hci_tx_thread+0xfe>
   14d48:	20000638 	.word	0x20000638
   14d4c:	00028c9a 	.word	0x00028c9a
   14d50:	000280bd 	.word	0x000280bd
   14d54:	00028fa1 	.word	0x00028fa1
   14d58:	200004c4 	.word	0x200004c4
   14d5c:	20000380 	.word	0x20000380
   14d60:	200004a0 	.word	0x200004a0
   14d64:	00028f81 	.word	0x00028f81
   14d68:	00028f1f 	.word	0x00028f1f
   14d6c:	2000206c 	.word	0x2000206c

00014d70 <hci_event_prio>:
{
   14d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d74:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   14d76:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   14d7a:	4630      	mov	r0, r6
   14d7c:	f011 fbe2 	bl	26544 <net_buf_simple_headroom>
	state->len = buf->len;
   14d80:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14d84:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14d88:	4605      	mov	r5, r0
   14d8a:	d80b      	bhi.n	14da4 <hci_event_prio+0x34>
   14d8c:	491b      	ldr	r1, [pc, #108]	; (14dfc <hci_event_prio+0x8c>)
   14d8e:	481c      	ldr	r0, [pc, #112]	; (14e00 <hci_event_prio+0x90>)
   14d90:	f640 5277 	movw	r2, #3447	; 0xd77
   14d94:	f00e fe28 	bl	239e8 <assert_print>
   14d98:	4040      	eors	r0, r0
   14d9a:	f380 8811 	msr	BASEPRI, r0
   14d9e:	f04f 0003 	mov.w	r0, #3
   14da2:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   14da4:	4630      	mov	r0, r6
   14da6:	2102      	movs	r1, #2
   14da8:	f006 feb6 	bl	1bb18 <net_buf_simple_pull_mem>
   14dac:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14dae:	7800      	ldrb	r0, [r0, #0]
   14db0:	f00f fd67 	bl	24882 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14db4:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14db6:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14db8:	d40b      	bmi.n	14dd2 <hci_event_prio+0x62>
   14dba:	4910      	ldr	r1, [pc, #64]	; (14dfc <hci_event_prio+0x8c>)
   14dbc:	4810      	ldr	r0, [pc, #64]	; (14e00 <hci_event_prio+0x90>)
   14dbe:	f640 527b 	movw	r2, #3451	; 0xd7b
   14dc2:	f00e fe11 	bl	239e8 <assert_print>
   14dc6:	4040      	eors	r0, r0
   14dc8:	f380 8811 	msr	BASEPRI, r0
   14dcc:	f04f 0003 	mov.w	r0, #3
   14dd0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14dd2:	2305      	movs	r3, #5
   14dd4:	4a0b      	ldr	r2, [pc, #44]	; (14e04 <hci_event_prio+0x94>)
   14dd6:	7838      	ldrb	r0, [r7, #0]
   14dd8:	4621      	mov	r1, r4
   14dda:	f7ff f8f7 	bl	13fcc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14dde:	07b3      	lsls	r3, r6, #30
   14de0:	d507      	bpl.n	14df2 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   14de2:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   14de4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14de8:	fa13 f585 	uxtah	r5, r3, r5
   14dec:	60a5      	str	r5, [r4, #8]
}
   14dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14df2:	4620      	mov	r0, r4
}
   14df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14df8:	f006 bda2 	b.w	1b940 <net_buf_unref>
   14dfc:	00028c9a 	.word	0x00028c9a
   14e00:	000280bd 	.word	0x000280bd
   14e04:	00027798 	.word	0x00027798

00014e08 <bt_recv>:
{
   14e08:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14e0a:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   14e0c:	2a01      	cmp	r2, #1
{
   14e0e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   14e10:	d005      	beq.n	14e1e <bt_recv+0x16>
   14e12:	2a03      	cmp	r2, #3
   14e14:	d111      	bne.n	14e3a <bt_recv+0x32>
			rx_queue_put(buf);
   14e16:	f7ff f869 	bl	13eec <rx_queue_put>
		return 0;
   14e1a:	2000      	movs	r0, #0
}
   14e1c:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14e1e:	6883      	ldr	r3, [r0, #8]
   14e20:	7818      	ldrb	r0, [r3, #0]
   14e22:	f00f fd2e 	bl	24882 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14e26:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14e28:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14e2a:	d502      	bpl.n	14e32 <bt_recv+0x2a>
			hci_event_prio(buf);
   14e2c:	4620      	mov	r0, r4
   14e2e:	f7ff ff9f 	bl	14d70 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14e32:	07ab      	lsls	r3, r5, #30
   14e34:	d5f1      	bpl.n	14e1a <bt_recv+0x12>
			rx_queue_put(buf);
   14e36:	4620      	mov	r0, r4
   14e38:	e7ed      	b.n	14e16 <bt_recv+0xe>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   14e3a:	4805      	ldr	r0, [pc, #20]	; (14e50 <bt_recv+0x48>)
   14e3c:	2145      	movs	r1, #69	; 0x45
   14e3e:	f00e fde1 	bl	23a04 <z_log_minimal_printk>
		net_buf_unref(buf);
   14e42:	4620      	mov	r0, r4
   14e44:	f006 fd7c 	bl	1b940 <net_buf_unref>
		return -EINVAL;
   14e48:	f06f 0015 	mvn.w	r0, #21
   14e4c:	e7e6      	b.n	14e1c <bt_recv+0x14>
   14e4e:	bf00      	nop
   14e50:	00028fc7 	.word	0x00028fc7

00014e54 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14e54:	4a08      	ldr	r2, [pc, #32]	; (14e78 <bt_hci_driver_register+0x24>)
{
   14e56:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   14e58:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   14e5c:	b930      	cbnz	r0, 14e6c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   14e5e:	68d9      	ldr	r1, [r3, #12]
   14e60:	b139      	cbz	r1, 14e72 <bt_hci_driver_register+0x1e>
   14e62:	6959      	ldr	r1, [r3, #20]
   14e64:	b129      	cbz	r1, 14e72 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   14e66:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   14e6a:	4770      	bx	lr
		return -EALREADY;
   14e6c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14e70:	4770      	bx	lr
		return -EINVAL;
   14e72:	f06f 0015 	mvn.w	r0, #21
}
   14e76:	4770      	bx	lr
   14e78:	20000380 	.word	0x20000380

00014e7c <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14e7c:	4801      	ldr	r0, [pc, #4]	; (14e84 <bt_finalize_init+0x8>)
   14e7e:	2104      	movs	r1, #4
   14e80:	f00f bd2d 	b.w	248de <atomic_or>
   14e84:	2000044c 	.word	0x2000044c

00014e88 <init_work>:
{
   14e88:	b510      	push	{r4, lr}
	err = bt_init();
   14e8a:	f7fb fc89 	bl	107a0 <bt_init>
	if (ready_cb) {
   14e8e:	4b03      	ldr	r3, [pc, #12]	; (14e9c <init_work+0x14>)
   14e90:	681b      	ldr	r3, [r3, #0]
   14e92:	b113      	cbz	r3, 14e9a <init_work+0x12>
}
   14e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   14e98:	4718      	bx	r3
}
   14e9a:	bd10      	pop	{r4, pc}
   14e9c:	20002084 	.word	0x20002084

00014ea0 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   14ea0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   14ea2:	4d35      	ldr	r5, [pc, #212]	; (14f78 <bt_enable+0xd8>)
   14ea4:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   14ea8:	b088      	sub	sp, #32
   14eaa:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   14eac:	b943      	cbnz	r3, 14ec0 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
   14eae:	4833      	ldr	r0, [pc, #204]	; (14f7c <bt_enable+0xdc>)
   14eb0:	2145      	movs	r1, #69	; 0x45
   14eb2:	f00e fda7 	bl	23a04 <z_log_minimal_printk>
		return -ENODEV;
   14eb6:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   14eba:	4620      	mov	r0, r4
   14ebc:	b008      	add	sp, #32
   14ebe:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14ec0:	f06f 0102 	mvn.w	r1, #2
   14ec4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   14ec8:	f00f fd18 	bl	248fc <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14ecc:	2101      	movs	r1, #1
   14ece:	f00f fd06 	bl	248de <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14ed2:	07c3      	lsls	r3, r0, #31
   14ed4:	d44d      	bmi.n	14f72 <bt_enable+0xd2>
		err = bt_settings_init();
   14ed6:	f7fe feb5 	bl	13c44 <bt_settings_init>
		if (err) {
   14eda:	4604      	mov	r4, r0
   14edc:	2800      	cmp	r0, #0
   14ede:	d1ec      	bne.n	14eba <bt_enable+0x1a>
	ready_cb = cb;
   14ee0:	4b27      	ldr	r3, [pc, #156]	; (14f80 <bt_enable+0xe0>)
   14ee2:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14ee4:	2201      	movs	r2, #1
   14ee6:	4611      	mov	r1, r2
   14ee8:	f505 7090 	add.w	r0, r5, #288	; 0x120
   14eec:	f011 ff85 	bl	26dfa <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   14ef0:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   14ef4:	f011 ff5f 	bl	26db6 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14ef8:	2200      	movs	r2, #0
   14efa:	2300      	movs	r3, #0
   14efc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14f00:	f06f 0308 	mvn.w	r3, #8
   14f04:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14f08:	e9cd 4400 	strd	r4, r4, [sp]
   14f0c:	4b1d      	ldr	r3, [pc, #116]	; (14f84 <bt_enable+0xe4>)
   14f0e:	491e      	ldr	r1, [pc, #120]	; (14f88 <bt_enable+0xe8>)
   14f10:	9404      	str	r4, [sp, #16]
   14f12:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14f16:	481d      	ldr	r0, [pc, #116]	; (14f8c <bt_enable+0xec>)
   14f18:	f00b f876 	bl	20008 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14f1c:	491c      	ldr	r1, [pc, #112]	; (14f90 <bt_enable+0xf0>)
   14f1e:	481b      	ldr	r0, [pc, #108]	; (14f8c <bt_enable+0xec>)
   14f20:	f011 ff20 	bl	26d64 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   14f24:	481b      	ldr	r0, [pc, #108]	; (14f94 <bt_enable+0xf4>)
   14f26:	f00b ff03 	bl	20d30 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   14f2a:	491b      	ldr	r1, [pc, #108]	; (14f98 <bt_enable+0xf8>)
   14f2c:	4819      	ldr	r0, [pc, #100]	; (14f94 <bt_enable+0xf4>)
   14f2e:	9400      	str	r4, [sp, #0]
   14f30:	f06f 0307 	mvn.w	r3, #7
   14f34:	f640 0298 	movw	r2, #2200	; 0x898
   14f38:	f00b ff10 	bl	20d5c <k_work_queue_start>
   14f3c:	4917      	ldr	r1, [pc, #92]	; (14f9c <bt_enable+0xfc>)
   14f3e:	4815      	ldr	r0, [pc, #84]	; (14f94 <bt_enable+0xf4>)
   14f40:	f011 ff10 	bl	26d64 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   14f44:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   14f48:	68db      	ldr	r3, [r3, #12]
   14f4a:	4798      	blx	r3
	if (err) {
   14f4c:	4604      	mov	r4, r0
   14f4e:	b128      	cbz	r0, 14f5c <bt_enable+0xbc>
		BT_ERR("HCI driver open failed (%d)", err);
   14f50:	4602      	mov	r2, r0
   14f52:	2145      	movs	r1, #69	; 0x45
   14f54:	4812      	ldr	r0, [pc, #72]	; (14fa0 <bt_enable+0x100>)
   14f56:	f00e fd55 	bl	23a04 <z_log_minimal_printk>
		return err;
   14f5a:	e7ae      	b.n	14eba <bt_enable+0x1a>
	if (!cb) {
   14f5c:	b926      	cbnz	r6, 14f68 <bt_enable+0xc8>
}
   14f5e:	b008      	add	sp, #32
   14f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   14f64:	f7fb bc1c 	b.w	107a0 <bt_init>
	k_work_submit(&bt_dev.init);
   14f68:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   14f6c:	f00b feda 	bl	20d24 <k_work_submit>
	return 0;
   14f70:	e7a3      	b.n	14eba <bt_enable+0x1a>
		return -EALREADY;
   14f72:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14f76:	e7a0      	b.n	14eba <bt_enable+0x1a>
   14f78:	20000380 	.word	0x20000380
   14f7c:	000290e8 	.word	0x000290e8
   14f80:	20002084 	.word	0x20002084
   14f84:	00014c2d 	.word	0x00014c2d
   14f88:	20003840 	.word	0x20003840
   14f8c:	20001818 	.word	0x20001818
   14f90:	00029106 	.word	0x00029106
   14f94:	20001898 	.word	0x20001898
   14f98:	20003e80 	.word	0x20003e80
   14f9c:	0002910c 	.word	0x0002910c
   14fa0:	00029112 	.word	0x00029112

00014fa4 <bt_is_ready>:
   14fa4:	4b04      	ldr	r3, [pc, #16]	; (14fb8 <bt_is_ready+0x14>)
   14fa6:	f3bf 8f5b 	dmb	ish
   14faa:	6818      	ldr	r0, [r3, #0]
   14fac:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   14fb0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   14fb4:	4770      	bx	lr
   14fb6:	bf00      	nop
   14fb8:	2000044c 	.word	0x2000044c

00014fbc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14fbc:	4800      	ldr	r0, [pc, #0]	; (14fc0 <bt_get_name+0x4>)
   14fbe:	4770      	bx	lr
   14fc0:	0002806e 	.word	0x0002806e

00014fc4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14fc6:	4f0a      	ldr	r7, [pc, #40]	; (14ff0 <id_find+0x2c>)
{
   14fc8:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14fca:	2500      	movs	r5, #0
   14fcc:	79fb      	ldrb	r3, [r7, #7]
   14fce:	b2ec      	uxtb	r4, r5
   14fd0:	42a3      	cmp	r3, r4
   14fd2:	d802      	bhi.n	14fda <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14fd4:	f06f 0001 	mvn.w	r0, #1
   14fd8:	e009      	b.n	14fee <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   14fda:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   14fde:	4439      	add	r1, r7
   14fe0:	4630      	mov	r0, r6
   14fe2:	f00f fd37 	bl	24a54 <bt_addr_le_eq>
   14fe6:	3501      	adds	r5, #1
   14fe8:	2800      	cmp	r0, #0
   14fea:	d0ef      	beq.n	14fcc <id_find+0x8>
   14fec:	4620      	mov	r0, r4
}
   14fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ff0:	20000380 	.word	0x20000380

00014ff4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14ff6:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14ff8:	460d      	mov	r5, r1
   14ffa:	b1a9      	cbz	r1, 15028 <id_create.constprop.0+0x34>
   14ffc:	4916      	ldr	r1, [pc, #88]	; (15058 <id_create.constprop.0+0x64>)
   14ffe:	4628      	mov	r0, r5
   15000:	f00f fd28 	bl	24a54 <bt_addr_le_eq>
   15004:	b980      	cbnz	r0, 15028 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   15006:	4815      	ldr	r0, [pc, #84]	; (1505c <id_create.constprop.0+0x68>)
   15008:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1500c:	4629      	mov	r1, r5
   1500e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15010:	f00f fd28 	bl	24a64 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15014:	4812      	ldr	r0, [pc, #72]	; (15060 <id_create.constprop.0+0x6c>)
   15016:	f00f fd28 	bl	24a6a <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1501a:	0743      	lsls	r3, r0, #29
   1501c:	d501      	bpl.n	15022 <id_create.constprop.0+0x2e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   1501e:	f7fe fdcb 	bl	13bb8 <bt_settings_save_id>
	}

	return 0;
   15022:	2000      	movs	r0, #0
}
   15024:	b003      	add	sp, #12
   15026:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   15028:	4668      	mov	r0, sp
   1502a:	f00f fc1c 	bl	24866 <bt_addr_le_create_static>
			if (err) {
   1502e:	2800      	cmp	r0, #0
   15030:	d1f8      	bne.n	15024 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   15032:	4668      	mov	r0, sp
   15034:	f7ff ffc6 	bl	14fc4 <id_find>
   15038:	2800      	cmp	r0, #0
   1503a:	daf5      	bge.n	15028 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1503c:	4b07      	ldr	r3, [pc, #28]	; (1505c <id_create.constprop.0+0x68>)
   1503e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15042:	441c      	add	r4, r3
   15044:	4669      	mov	r1, sp
   15046:	4620      	mov	r0, r4
   15048:	f00f fd0c 	bl	24a64 <bt_addr_le_copy>
		if (addr) {
   1504c:	2d00      	cmp	r5, #0
   1504e:	d0e1      	beq.n	15014 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15050:	4621      	mov	r1, r4
   15052:	4628      	mov	r0, r5
   15054:	e7dc      	b.n	15010 <id_create.constprop.0+0x1c>
   15056:	bf00      	nop
   15058:	000289b2 	.word	0x000289b2
   1505c:	20000380 	.word	0x20000380
   15060:	2000044c 	.word	0x2000044c

00015064 <set_random_address>:
{
   15064:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   15066:	4913      	ldr	r1, [pc, #76]	; (150b4 <set_random_address+0x50>)
   15068:	2206      	movs	r2, #6
   1506a:	4605      	mov	r5, r0
   1506c:	f00f fb2f 	bl	246ce <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15070:	b1d8      	cbz	r0, 150aa <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   15072:	2106      	movs	r1, #6
   15074:	f242 0005 	movw	r0, #8197	; 0x2005
   15078:	f7ff f9e2 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   1507c:	4604      	mov	r4, r0
   1507e:	b1b0      	cbz	r0, 150ae <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15080:	2206      	movs	r2, #6
   15082:	4629      	mov	r1, r5
   15084:	3008      	adds	r0, #8
   15086:	f011 fa69 	bl	2655c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1508a:	2200      	movs	r2, #0
   1508c:	4621      	mov	r1, r4
   1508e:	f242 0005 	movw	r0, #8197	; 0x2005
   15092:	f7ff fa1f 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   15096:	b948      	cbnz	r0, 150ac <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   15098:	2206      	movs	r2, #6
   1509a:	4806      	ldr	r0, [pc, #24]	; (150b4 <set_random_address+0x50>)
   1509c:	4629      	mov	r1, r5
   1509e:	f00f fb26 	bl	246ee <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   150a2:	4b05      	ldr	r3, [pc, #20]	; (150b8 <set_random_address+0x54>)
   150a4:	2201      	movs	r2, #1
   150a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   150aa:	2000      	movs	r0, #0
}
   150ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   150ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   150b2:	e7fb      	b.n	150ac <set_random_address+0x48>
   150b4:	200003e1 	.word	0x200003e1
   150b8:	20000380 	.word	0x20000380

000150bc <find_rl_conflict>:
{
   150bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150c0:	4605      	mov	r5, r0
   150c2:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   150c4:	460c      	mov	r4, r1
   150c6:	b951      	cbnz	r1, 150de <find_rl_conflict+0x22>
   150c8:	4929      	ldr	r1, [pc, #164]	; (15170 <find_rl_conflict+0xb4>)
   150ca:	482a      	ldr	r0, [pc, #168]	; (15174 <find_rl_conflict+0xb8>)
   150cc:	f240 325b 	movw	r2, #859	; 0x35b
   150d0:	f00e fc8a 	bl	239e8 <assert_print>
   150d4:	f240 315b 	movw	r1, #859	; 0x35b
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   150d8:	4825      	ldr	r0, [pc, #148]	; (15170 <find_rl_conflict+0xb4>)
   150da:	f00e fc7e 	bl	239da <assert_post_action>
   150de:	6808      	ldr	r0, [r1, #0]
   150e0:	b940      	cbnz	r0, 150f4 <find_rl_conflict+0x38>
   150e2:	4923      	ldr	r1, [pc, #140]	; (15170 <find_rl_conflict+0xb4>)
   150e4:	4823      	ldr	r0, [pc, #140]	; (15174 <find_rl_conflict+0xb8>)
   150e6:	f44f 7257 	mov.w	r2, #860	; 0x35c
   150ea:	f00e fc7d 	bl	239e8 <assert_print>
   150ee:	f44f 7157 	mov.w	r1, #860	; 0x35c
   150f2:	e7f1      	b.n	150d8 <find_rl_conflict+0x1c>
	__ASSERT_NO_MSG(resident != NULL);
   150f4:	b945      	cbnz	r5, 15108 <find_rl_conflict+0x4c>
   150f6:	491e      	ldr	r1, [pc, #120]	; (15170 <find_rl_conflict+0xb4>)
   150f8:	481e      	ldr	r0, [pc, #120]	; (15174 <find_rl_conflict+0xb8>)
   150fa:	f240 325d 	movw	r2, #861	; 0x35d
   150fe:	f00e fc73 	bl	239e8 <assert_print>
   15102:	f240 315d 	movw	r1, #861	; 0x35d
   15106:	e7e7      	b.n	150d8 <find_rl_conflict+0x1c>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   15108:	7a03      	ldrb	r3, [r0, #8]
   1510a:	075a      	lsls	r2, r3, #29
   1510c:	d508      	bpl.n	15120 <find_rl_conflict+0x64>
   1510e:	4918      	ldr	r1, [pc, #96]	; (15170 <find_rl_conflict+0xb4>)
   15110:	4818      	ldr	r0, [pc, #96]	; (15174 <find_rl_conflict+0xb8>)
   15112:	f240 325f 	movw	r2, #863	; 0x35f
   15116:	f00e fc67 	bl	239e8 <assert_print>
   1511a:	f240 315f 	movw	r1, #863	; 0x35f
   1511e:	e7db      	b.n	150d8 <find_rl_conflict+0x1c>
	if (conflict->found) {
   15120:	684f      	ldr	r7, [r1, #4]
   15122:	b9f7      	cbnz	r7, 15162 <find_rl_conflict+0xa6>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   15124:	7a2b      	ldrb	r3, [r5, #8]
   15126:	075b      	lsls	r3, r3, #29
   15128:	d51b      	bpl.n	15162 <find_rl_conflict+0xa6>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1512a:	1c69      	adds	r1, r5, #1
   1512c:	3001      	adds	r0, #1
   1512e:	f00f fc91 	bl	24a54 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   15132:	f8d4 8000 	ldr.w	r8, [r4]
   15136:	2216      	movs	r2, #22
   15138:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1513a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1513c:	4668      	mov	r0, sp
   1513e:	f00f fae1 	bl	24704 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   15142:	2210      	movs	r2, #16
   15144:	4669      	mov	r1, sp
   15146:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1514a:	f00f fac0 	bl	246ce <memcmp>
   1514e:	b158      	cbz	r0, 15168 <find_rl_conflict+0xac>
   15150:	6820      	ldr	r0, [r4, #0]
   15152:	2210      	movs	r2, #16
   15154:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   15158:	302a      	adds	r0, #42	; 0x2a
   1515a:	f00f fab8 	bl	246ce <memcmp>
   1515e:	b918      	cbnz	r0, 15168 <find_rl_conflict+0xac>
		conflict->found = resident;
   15160:	6065      	str	r5, [r4, #4]
}
   15162:	b006      	add	sp, #24
   15164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   15168:	2e00      	cmp	r6, #0
   1516a:	d1f9      	bne.n	15160 <find_rl_conflict+0xa4>
   1516c:	e7f9      	b.n	15162 <find_rl_conflict+0xa6>
   1516e:	bf00      	nop
   15170:	00029169 	.word	0x00029169
   15174:	000280bd 	.word	0x000280bd

00015178 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15178:	4b0a      	ldr	r3, [pc, #40]	; (151a4 <bt_id_pending_keys_update+0x2c>)
   1517a:	f3bf 8f5b 	dmb	ish
   1517e:	e853 2f00 	ldrex	r2, [r3]
   15182:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   15186:	e843 1000 	strex	r0, r1, [r3]
   1518a:	2800      	cmp	r0, #0
   1518c:	d1f7      	bne.n	1517e <bt_id_pending_keys_update+0x6>
   1518e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   15192:	0413      	lsls	r3, r2, #16
   15194:	d504      	bpl.n	151a0 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   15196:	4904      	ldr	r1, [pc, #16]	; (151a8 <bt_id_pending_keys_update+0x30>)
   15198:	2200      	movs	r2, #0
   1519a:	2002      	movs	r0, #2
   1519c:	f005 bfac 	b.w	1b0f8 <bt_keys_foreach_type>
}
   151a0:	4770      	bx	lr
   151a2:	bf00      	nop
   151a4:	2000044c 	.word	0x2000044c
   151a8:	00024bdf 	.word	0x00024bdf

000151ac <bt_id_find_conflict>:
{
   151ac:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   151ae:	2300      	movs	r3, #0
   151b0:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   151b4:	4904      	ldr	r1, [pc, #16]	; (151c8 <bt_id_find_conflict+0x1c>)
   151b6:	466a      	mov	r2, sp
   151b8:	2002      	movs	r0, #2
   151ba:	f005 ff9d 	bl	1b0f8 <bt_keys_foreach_type>
}
   151be:	9801      	ldr	r0, [sp, #4]
   151c0:	b003      	add	sp, #12
   151c2:	f85d fb04 	ldr.w	pc, [sp], #4
   151c6:	bf00      	nop
   151c8:	000150bd 	.word	0x000150bd

000151cc <bt_id_add>:
{
   151cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   151ce:	4605      	mov	r5, r0
   151d0:	b170      	cbz	r0, 151f0 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   151d2:	4c4f      	ldr	r4, [pc, #316]	; (15310 <bt_id_add+0x144>)
   151d4:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   151d8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   151dc:	b10a      	cbz	r2, 151e2 <bt_id_add+0x16>
   151de:	429a      	cmp	r2, r3
   151e0:	d208      	bcs.n	151f4 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   151e2:	3301      	adds	r3, #1
   151e4:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   151e8:	7a2b      	ldrb	r3, [r5, #8]
   151ea:	f043 0304 	orr.w	r3, r3, #4
   151ee:	722b      	strb	r3, [r5, #8]
}
   151f0:	b003      	add	sp, #12
   151f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   151f4:	2100      	movs	r1, #0
   151f6:	2206      	movs	r2, #6
   151f8:	4608      	mov	r0, r1
   151fa:	f001 fc33 	bl	16a64 <bt_conn_lookup_state_le>
	if (conn) {
   151fe:	4606      	mov	r6, r0
   15200:	b1a8      	cbz	r0, 1522e <bt_id_add+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15202:	f3bf 8f5b 	dmb	ish
   15206:	34cc      	adds	r4, #204	; 0xcc
   15208:	e854 3f00 	ldrex	r3, [r4]
   1520c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   15210:	e844 3200 	strex	r2, r3, [r4]
   15214:	2a00      	cmp	r2, #0
   15216:	d1f7      	bne.n	15208 <bt_id_add+0x3c>
   15218:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   1521c:	7a2b      	ldrb	r3, [r5, #8]
   1521e:	f043 0301 	orr.w	r3, r3, #1
   15222:	722b      	strb	r3, [r5, #8]
}
   15224:	b003      	add	sp, #12
   15226:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1522a:	f001 b955 	b.w	164d8 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1522e:	4601      	mov	r1, r0
   15230:	4838      	ldr	r0, [pc, #224]	; (15314 <bt_id_add+0x148>)
   15232:	f000 fb61 	bl	158f8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   15236:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1523a:	b143      	cbz	r3, 1524e <bt_id_add+0x82>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1523c:	4630      	mov	r0, r6
   1523e:	f00f fc54 	bl	24aea <addr_res_enable>
		if (err) {
   15242:	b120      	cbz	r0, 1524e <bt_id_add+0x82>
			BT_WARN("Failed to disable address resolution");
   15244:	4834      	ldr	r0, [pc, #208]	; (15318 <bt_id_add+0x14c>)
   15246:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Failed to set privacy mode");
   15248:	f00e fbdc 	bl	23a04 <z_log_minimal_printk>
		goto done;
   1524c:	e01c      	b.n	15288 <bt_id_add+0xbc>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1524e:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   15252:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   15256:	429a      	cmp	r2, r3
   15258:	d120      	bne.n	1529c <bt_id_add+0xd0>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   1525a:	4830      	ldr	r0, [pc, #192]	; (1531c <bt_id_add+0x150>)
   1525c:	2157      	movs	r1, #87	; 0x57
   1525e:	f00e fbd1 	bl	23a04 <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   15262:	2200      	movs	r2, #0
   15264:	4611      	mov	r1, r2
   15266:	f242 0029 	movw	r0, #8233	; 0x2029
   1526a:	f7ff f933 	bl	144d4 <bt_hci_cmd_send_sync>
		if (err) {
   1526e:	b110      	cbz	r0, 15276 <bt_id_add+0xaa>
			BT_ERR("Failed to clear resolution list");
   15270:	482b      	ldr	r0, [pc, #172]	; (15320 <bt_id_add+0x154>)
   15272:	2145      	movs	r1, #69	; 0x45
   15274:	e7e8      	b.n	15248 <bt_id_add+0x7c>
		bt_dev.le.rl_entries++;
   15276:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1527a:	3301      	adds	r3, #1
   1527c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   15280:	7a2b      	ldrb	r3, [r5, #8]
   15282:	f043 0304 	orr.w	r3, r3, #4
   15286:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   15288:	2001      	movs	r0, #1
   1528a:	f00f fc2e 	bl	24aea <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1528e:	4825      	ldr	r0, [pc, #148]	; (15324 <bt_id_add+0x158>)
   15290:	2100      	movs	r1, #0
}
   15292:	b003      	add	sp, #12
   15294:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   15298:	f000 bb2e 	b.w	158f8 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1529c:	462a      	mov	r2, r5
   1529e:	1c6f      	adds	r7, r5, #1
   152a0:	f812 0b2a 	ldrb.w	r0, [r2], #42
   152a4:	4639      	mov	r1, r7
   152a6:	f00f fbe6 	bl	24a76 <hci_id_add>
	if (err) {
   152aa:	4606      	mov	r6, r0
   152ac:	b110      	cbz	r0, 152b4 <bt_id_add+0xe8>
		BT_ERR("Failed to add IRK to controller");
   152ae:	481e      	ldr	r0, [pc, #120]	; (15328 <bt_id_add+0x15c>)
   152b0:	2145      	movs	r1, #69	; 0x45
   152b2:	e7c9      	b.n	15248 <bt_id_add+0x7c>
	bt_dev.le.rl_entries++;
   152b4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   152b8:	3301      	adds	r3, #1
   152ba:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   152be:	7a2b      	ldrb	r3, [r5, #8]
   152c0:	f043 0304 	orr.w	r3, r3, #4
   152c4:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   152c6:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   152ca:	075b      	lsls	r3, r3, #29
   152cc:	d402      	bmi.n	152d4 <bt_id_add+0x108>
		BT_WARN("Set privacy mode command is not supported");
   152ce:	4817      	ldr	r0, [pc, #92]	; (1532c <bt_id_add+0x160>)
   152d0:	2157      	movs	r1, #87	; 0x57
   152d2:	e7b9      	b.n	15248 <bt_id_add+0x7c>
	bt_addr_le_copy(&cp.id_addr, addr);
   152d4:	4639      	mov	r1, r7
   152d6:	4668      	mov	r0, sp
   152d8:	f00f fbc4 	bl	24a64 <bt_addr_le_copy>
	cp.mode = mode;
   152dc:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   152de:	2108      	movs	r1, #8
   152e0:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   152e4:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   152e8:	f7ff f8aa 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   152ec:	4604      	mov	r4, r0
   152ee:	b160      	cbz	r0, 1530a <bt_id_add+0x13e>
   152f0:	2208      	movs	r2, #8
   152f2:	4669      	mov	r1, sp
   152f4:	4410      	add	r0, r2
   152f6:	f011 f931 	bl	2655c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   152fa:	4632      	mov	r2, r6
   152fc:	4621      	mov	r1, r4
   152fe:	f242 004e 	movw	r0, #8270	; 0x204e
   15302:	f7ff f8e7 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   15306:	2800      	cmp	r0, #0
   15308:	d0be      	beq.n	15288 <bt_id_add+0xbc>
		BT_ERR("Failed to set privacy mode");
   1530a:	4809      	ldr	r0, [pc, #36]	; (15330 <bt_id_add+0x164>)
   1530c:	2145      	movs	r1, #69	; 0x45
   1530e:	e79b      	b.n	15248 <bt_id_add+0x7c>
   15310:	20000380 	.word	0x20000380
   15314:	00024b49 	.word	0x00024b49
   15318:	00029197 	.word	0x00029197
   1531c:	000291c1 	.word	0x000291c1
   15320:	000291f7 	.word	0x000291f7
   15324:	00024b1b 	.word	0x00024b1b
   15328:	0002921c 	.word	0x0002921c
   1532c:	00029241 	.word	0x00029241
   15330:	00029270 	.word	0x00029270

00015334 <bt_id_del>:
{
   15334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   15338:	4605      	mov	r5, r0
   1533a:	b3b8      	cbz	r0, 153ac <bt_id_del+0x78>
	if (!bt_dev.le.rl_size ||
   1533c:	4c46      	ldr	r4, [pc, #280]	; (15458 <bt_id_del+0x124>)
   1533e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   15342:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   15346:	b1f2      	cbz	r2, 15386 <bt_id_del+0x52>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   15348:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1534a:	4293      	cmp	r3, r2
   1534c:	dc27      	bgt.n	1539e <bt_id_del+0x6a>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1534e:	2100      	movs	r1, #0
   15350:	2206      	movs	r2, #6
   15352:	4608      	mov	r0, r1
   15354:	f001 fb86 	bl	16a64 <bt_conn_lookup_state_le>
	if (conn) {
   15358:	4606      	mov	r6, r0
   1535a:	b348      	cbz	r0, 153b0 <bt_id_del+0x7c>
   1535c:	f3bf 8f5b 	dmb	ish
   15360:	34cc      	adds	r4, #204	; 0xcc
   15362:	e854 3f00 	ldrex	r3, [r4]
   15366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1536a:	e844 3200 	strex	r2, r3, [r4]
   1536e:	2a00      	cmp	r2, #0
   15370:	d1f7      	bne.n	15362 <bt_id_del+0x2e>
   15372:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   15376:	7a2b      	ldrb	r3, [r5, #8]
   15378:	f043 0302 	orr.w	r3, r3, #2
   1537c:	722b      	strb	r3, [r5, #8]
}
   1537e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   15382:	f001 b8a9 	b.w	164d8 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   15386:	b953      	cbnz	r3, 1539e <bt_id_del+0x6a>
   15388:	4934      	ldr	r1, [pc, #208]	; (1545c <bt_id_del+0x128>)
   1538a:	4835      	ldr	r0, [pc, #212]	; (15460 <bt_id_del+0x12c>)
   1538c:	f240 4222 	movw	r2, #1058	; 0x422
   15390:	f00e fb2a 	bl	239e8 <assert_print>
   15394:	4831      	ldr	r0, [pc, #196]	; (1545c <bt_id_del+0x128>)
   15396:	f240 4122 	movw	r1, #1058	; 0x422
   1539a:	f00e fb1e 	bl	239da <assert_post_action>
			bt_dev.le.rl_entries--;
   1539e:	3b01      	subs	r3, #1
   153a0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   153a4:	7a2b      	ldrb	r3, [r5, #8]
   153a6:	f023 0304 	bic.w	r3, r3, #4
   153aa:	722b      	strb	r3, [r5, #8]
}
   153ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   153b0:	4601      	mov	r1, r0
   153b2:	482c      	ldr	r0, [pc, #176]	; (15464 <bt_id_del+0x130>)
   153b4:	f000 faa0 	bl	158f8 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   153b8:	4630      	mov	r0, r6
   153ba:	f00f fb96 	bl	24aea <addr_res_enable>
	if (err) {
   153be:	4606      	mov	r6, r0
   153c0:	b180      	cbz	r0, 153e4 <bt_id_del+0xb0>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   153c2:	4602      	mov	r2, r0
   153c4:	2145      	movs	r1, #69	; 0x45
   153c6:	4828      	ldr	r0, [pc, #160]	; (15468 <bt_id_del+0x134>)
   153c8:	f00e fb1c 	bl	23a04 <z_log_minimal_printk>
	if (bt_dev.le.rl_entries) {
   153cc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   153d0:	b113      	cbz	r3, 153d8 <bt_id_del+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   153d2:	2001      	movs	r0, #1
   153d4:	f00f fb89 	bl	24aea <addr_res_enable>
}
   153d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   153dc:	4823      	ldr	r0, [pc, #140]	; (1546c <bt_id_del+0x138>)
   153de:	2100      	movs	r1, #0
   153e0:	f000 ba8a 	b.w	158f8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   153e4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   153e8:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   153ec:	429a      	cmp	r2, r3
   153ee:	d20c      	bcs.n	1540a <bt_id_del+0xd6>
		bt_dev.le.rl_entries--;
   153f0:	3b01      	subs	r3, #1
   153f2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   153f6:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   153f8:	491d      	ldr	r1, [pc, #116]	; (15470 <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   153fa:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   153fe:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   15400:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   15402:	2002      	movs	r0, #2
   15404:	f005 fe78 	bl	1b0f8 <bt_keys_foreach_type>
		goto done;
   15408:	e7e0      	b.n	153cc <bt_id_del+0x98>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1540a:	2107      	movs	r1, #7
   1540c:	f242 0028 	movw	r0, #8232	; 0x2028
   15410:	f7ff f816 	bl	14440 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   15414:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   15418:	4607      	mov	r7, r0
   1541a:	b920      	cbnz	r0, 15426 <bt_id_del+0xf2>
		BT_ERR("Failed to remove IRK from controller");
   1541c:	4815      	ldr	r0, [pc, #84]	; (15474 <bt_id_del+0x140>)
   1541e:	2145      	movs	r1, #69	; 0x45
   15420:	f00e faf0 	bl	23a04 <z_log_minimal_printk>
		goto done;
   15424:	e7d2      	b.n	153cc <bt_id_del+0x98>
	return net_buf_simple_add(&buf->b, len);
   15426:	2107      	movs	r1, #7
   15428:	3008      	adds	r0, #8
   1542a:	f006 fb8f 	bl	1bb4c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1542e:	4641      	mov	r1, r8
   15430:	f00f fb18 	bl	24a64 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   15434:	4632      	mov	r2, r6
   15436:	4639      	mov	r1, r7
   15438:	f242 0028 	movw	r0, #8232	; 0x2028
   1543c:	f7ff f84a 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   15440:	2800      	cmp	r0, #0
   15442:	d1eb      	bne.n	1541c <bt_id_del+0xe8>
	bt_dev.le.rl_entries--;
   15444:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   15448:	3b01      	subs	r3, #1
   1544a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1544e:	7a2b      	ldrb	r3, [r5, #8]
   15450:	f023 0304 	bic.w	r3, r3, #4
   15454:	722b      	strb	r3, [r5, #8]
   15456:	e7b9      	b.n	153cc <bt_id_del+0x98>
   15458:	20000380 	.word	0x20000380
   1545c:	00029169 	.word	0x00029169
   15460:	000280bd 	.word	0x000280bd
   15464:	00024b49 	.word	0x00024b49
   15468:	00029290 	.word	0x00029290
   1546c:	00024b1b 	.word	0x00024b1b
   15470:	00024ad5 	.word	0x00024ad5
   15474:	000292c2 	.word	0x000292c2

00015478 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15478:	b570      	push	{r4, r5, r6, lr}
   1547a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1547c:	4604      	mov	r4, r0
   1547e:	b918      	cbnz	r0, 15488 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   15480:	b1e5      	cbz	r5, 154bc <bt_id_create+0x44>
			return -EINVAL;
   15482:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   15486:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15488:	491d      	ldr	r1, [pc, #116]	; (15500 <bt_id_create+0x88>)
   1548a:	f00f fae3 	bl	24a54 <bt_addr_le_eq>
   1548e:	2800      	cmp	r0, #0
   15490:	d1f6      	bne.n	15480 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15492:	7823      	ldrb	r3, [r4, #0]
   15494:	2b01      	cmp	r3, #1
   15496:	d104      	bne.n	154a2 <bt_id_create+0x2a>
   15498:	79a3      	ldrb	r3, [r4, #6]
   1549a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1549e:	2bc0      	cmp	r3, #192	; 0xc0
   154a0:	d004      	beq.n	154ac <bt_id_create+0x34>
			BT_ERR("Only static random identity address supported");
   154a2:	4818      	ldr	r0, [pc, #96]	; (15504 <bt_id_create+0x8c>)
   154a4:	2145      	movs	r1, #69	; 0x45
   154a6:	f00e faad 	bl	23a04 <z_log_minimal_printk>
			return -EINVAL;
   154aa:	e7ea      	b.n	15482 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   154ac:	4620      	mov	r0, r4
   154ae:	f7ff fd89 	bl	14fc4 <id_find>
   154b2:	2800      	cmp	r0, #0
   154b4:	dbe4      	blt.n	15480 <bt_id_create+0x8>
			return -EALREADY;
   154b6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   154ba:	e7e4      	b.n	15486 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   154bc:	4d12      	ldr	r5, [pc, #72]	; (15508 <bt_id_create+0x90>)
   154be:	79eb      	ldrb	r3, [r5, #7]
   154c0:	2b01      	cmp	r3, #1
   154c2:	d01a      	beq.n	154fa <bt_id_create+0x82>
   154c4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   154c8:	f00f facf 	bl	24a6a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   154cc:	07c3      	lsls	r3, r0, #31
   154ce:	d50b      	bpl.n	154e8 <bt_id_create+0x70>
	new_id = bt_dev.id_count;
   154d0:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   154d2:	4621      	mov	r1, r4
   154d4:	4630      	mov	r0, r6
   154d6:	f7ff fd8d 	bl	14ff4 <id_create.constprop.0>
	if (err) {
   154da:	2800      	cmp	r0, #0
   154dc:	d1d3      	bne.n	15486 <bt_id_create+0xe>
		bt_dev.id_count++;
   154de:	79eb      	ldrb	r3, [r5, #7]
   154e0:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   154e2:	4630      	mov	r0, r6
		bt_dev.id_count++;
   154e4:	71eb      	strb	r3, [r5, #7]
	return new_id;
   154e6:	e7ce      	b.n	15486 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   154e8:	2c00      	cmp	r4, #0
   154ea:	d0ca      	beq.n	15482 <bt_id_create+0xa>
   154ec:	4904      	ldr	r1, [pc, #16]	; (15500 <bt_id_create+0x88>)
   154ee:	4620      	mov	r0, r4
   154f0:	f00f fab0 	bl	24a54 <bt_addr_le_eq>
   154f4:	2800      	cmp	r0, #0
   154f6:	d0eb      	beq.n	154d0 <bt_id_create+0x58>
   154f8:	e7c3      	b.n	15482 <bt_id_create+0xa>
		return -ENOMEM;
   154fa:	f06f 000b 	mvn.w	r0, #11
   154fe:	e7c2      	b.n	15486 <bt_id_create+0xe>
   15500:	000289b2 	.word	0x000289b2
   15504:	000292ec 	.word	0x000292ec
   15508:	20000380 	.word	0x20000380

0001550c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1550c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1550e:	4604      	mov	r4, r0
   15510:	b930      	cbnz	r0, 15520 <bt_id_read_public_addr+0x14>
		BT_WARN("Invalid input parameters");
   15512:	4818      	ldr	r0, [pc, #96]	; (15574 <bt_id_read_public_addr+0x68>)
   15514:	2157      	movs	r1, #87	; 0x57
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read public address");
   15516:	f00e fa75 	bl	23a04 <z_log_minimal_printk>
		return 0U;
   1551a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1551c:	b002      	add	sp, #8
   1551e:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   15520:	aa01      	add	r2, sp, #4
   15522:	2100      	movs	r1, #0
   15524:	f241 0009 	movw	r0, #4105	; 0x1009
   15528:	f7fe ffd4 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   1552c:	4606      	mov	r6, r0
   1552e:	b110      	cbz	r0, 15536 <bt_id_read_public_addr+0x2a>
		BT_WARN("Failed to read public address");
   15530:	4811      	ldr	r0, [pc, #68]	; (15578 <bt_id_read_public_addr+0x6c>)
   15532:	2157      	movs	r1, #87	; 0x57
   15534:	e7ef      	b.n	15516 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   15536:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   15538:	4910      	ldr	r1, [pc, #64]	; (1557c <bt_id_read_public_addr+0x70>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1553a:	689d      	ldr	r5, [r3, #8]
   1553c:	3501      	adds	r5, #1
   1553e:	2206      	movs	r2, #6
   15540:	4628      	mov	r0, r5
   15542:	f00f f8c4 	bl	246ce <memcmp>
   15546:	b918      	cbnz	r0, 15550 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   15548:	9801      	ldr	r0, [sp, #4]
   1554a:	f006 f9f9 	bl	1b940 <net_buf_unref>
		return 0U;
   1554e:	e7e4      	b.n	1551a <bt_id_read_public_addr+0xe>
   15550:	490b      	ldr	r1, [pc, #44]	; (15580 <bt_id_read_public_addr+0x74>)
   15552:	2206      	movs	r2, #6
   15554:	4628      	mov	r0, r5
   15556:	f00f f8ba 	bl	246ce <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1555a:	2800      	cmp	r0, #0
   1555c:	d0f4      	beq.n	15548 <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   1555e:	2206      	movs	r2, #6
   15560:	4629      	mov	r1, r5
   15562:	1c60      	adds	r0, r4, #1
   15564:	f00f f8c3 	bl	246ee <memcpy>
	net_buf_unref(rsp);
   15568:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1556a:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1556c:	f006 f9e8 	bl	1b940 <net_buf_unref>
	return 1U;
   15570:	2001      	movs	r0, #1
   15572:	e7d3      	b.n	1551c <bt_id_read_public_addr+0x10>
   15574:	0002931f 	.word	0x0002931f
   15578:	0002933d 	.word	0x0002933d
   1557c:	000289bf 	.word	0x000289bf
   15580:	000289b9 	.word	0x000289b9

00015584 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   15584:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   15586:	4668      	mov	r0, sp
   15588:	f7ff ffc0 	bl	1550c <bt_id_read_public_addr>
   1558c:	4b04      	ldr	r3, [pc, #16]	; (155a0 <bt_setup_public_id_addr+0x1c>)
   1558e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   15590:	b118      	cbz	r0, 1559a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   15592:	4669      	mov	r1, sp
   15594:	2000      	movs	r0, #0
   15596:	f7ff fd2d 	bl	14ff4 <id_create.constprop.0>
}
   1559a:	b003      	add	sp, #12
   1559c:	f85d fb04 	ldr.w	pc, [sp], #4
   155a0:	20000380 	.word	0x20000380

000155a4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   155a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   155a8:	4b1c      	ldr	r3, [pc, #112]	; (1561c <bt_read_static_addr+0x78>)
   155aa:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   155ae:	07db      	lsls	r3, r3, #31
{
   155b0:	4607      	mov	r7, r0
   155b2:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   155b4:	d408      	bmi.n	155c8 <bt_read_static_addr+0x24>
		BT_WARN("Read Static Addresses command not available");
   155b6:	481a      	ldr	r0, [pc, #104]	; (15620 <bt_read_static_addr+0x7c>)
   155b8:	2157      	movs	r1, #87	; 0x57
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
   155ba:	f00e fa23 	bl	23a04 <z_log_minimal_printk>
		return 0;
   155be:	2500      	movs	r5, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   155c0:	4628      	mov	r0, r5
   155c2:	b002      	add	sp, #8
   155c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   155c8:	aa01      	add	r2, sp, #4
   155ca:	2100      	movs	r1, #0
   155cc:	f64f 4009 	movw	r0, #64521	; 0xfc09
   155d0:	f7fe ff80 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   155d4:	4604      	mov	r4, r0
   155d6:	b110      	cbz	r0, 155de <bt_read_static_addr+0x3a>
		BT_WARN("Failed to read static addresses");
   155d8:	4812      	ldr	r0, [pc, #72]	; (15624 <bt_read_static_addr+0x80>)
   155da:	2157      	movs	r1, #87	; 0x57
   155dc:	e7ed      	b.n	155ba <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   155de:	9b01      	ldr	r3, [sp, #4]
   155e0:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   155e2:	7875      	ldrb	r5, [r6, #1]
   155e4:	4545      	cmp	r5, r8
   155e6:	bf28      	it	cs
   155e8:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   155ea:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   155ec:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   155f0:	42a5      	cmp	r5, r4
   155f2:	dc09      	bgt.n	15608 <bt_read_static_addr+0x64>
	net_buf_unref(rsp);
   155f4:	9801      	ldr	r0, [sp, #4]
   155f6:	f006 f9a3 	bl	1b940 <net_buf_unref>
	if (!cnt) {
   155fa:	2d00      	cmp	r5, #0
   155fc:	d1e0      	bne.n	155c0 <bt_read_static_addr+0x1c>
		BT_WARN("No static addresses stored in controller");
   155fe:	480a      	ldr	r0, [pc, #40]	; (15628 <bt_read_static_addr+0x84>)
   15600:	2157      	movs	r1, #87	; 0x57
   15602:	f00e f9ff 	bl	23a04 <z_log_minimal_printk>
   15606:	e7db      	b.n	155c0 <bt_read_static_addr+0x1c>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   15608:	4631      	mov	r1, r6
   1560a:	fb08 7004 	mla	r0, r8, r4, r7
   1560e:	2216      	movs	r2, #22
   15610:	f00f f86d 	bl	246ee <memcpy>
	for (i = 0; i < cnt; i++) {
   15614:	3401      	adds	r4, #1
   15616:	3616      	adds	r6, #22
   15618:	e7ea      	b.n	155f0 <bt_read_static_addr+0x4c>
   1561a:	bf00      	nop
   1561c:	20000380 	.word	0x20000380
   15620:	00029360 	.word	0x00029360
   15624:	00029391 	.word	0x00029391
   15628:	000293b6 	.word	0x000293b6

0001562c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1562c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1562e:	4e15      	ldr	r6, [pc, #84]	; (15684 <bt_setup_random_id_addr+0x58>)
   15630:	79f4      	ldrb	r4, [r6, #7]
{
   15632:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   15634:	b92c      	cbnz	r4, 15642 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   15636:	2101      	movs	r1, #1
   15638:	a802      	add	r0, sp, #8
   1563a:	f7ff ffb3 	bl	155a4 <bt_read_static_addr>
   1563e:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   15640:	b9c8      	cbnz	r0, 15676 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   15642:	2100      	movs	r1, #0
   15644:	4608      	mov	r0, r1
}
   15646:	b009      	add	sp, #36	; 0x24
   15648:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   1564c:	f7ff bf14 	b.w	15478 <bt_id_create>
   15650:	ab02      	add	r3, sp, #8
   15652:	fb07 3105 	mla	r1, r7, r5, r3
   15656:	2206      	movs	r2, #6
   15658:	f10d 0001 	add.w	r0, sp, #1
   1565c:	f00f f847 	bl	246ee <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   15660:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   15662:	4669      	mov	r1, sp
   15664:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   15666:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1566a:	f7ff fcc3 	bl	14ff4 <id_create.constprop.0>
				if (err) {
   1566e:	3401      	adds	r4, #1
   15670:	b110      	cbz	r0, 15678 <bt_setup_random_id_addr+0x4c>
}
   15672:	b009      	add	sp, #36	; 0x24
   15674:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   15676:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15678:	79f3      	ldrb	r3, [r6, #7]
   1567a:	b2e5      	uxtb	r5, r4
   1567c:	42ab      	cmp	r3, r5
   1567e:	d8e7      	bhi.n	15650 <bt_setup_random_id_addr+0x24>
			return 0;
   15680:	2000      	movs	r0, #0
   15682:	e7f6      	b.n	15672 <bt_setup_random_id_addr+0x46>
   15684:	20000380 	.word	0x20000380

00015688 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   15688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1568c:	4690      	mov	r8, r2
   1568e:	460e      	mov	r6, r1
   15690:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   15692:	4602      	mov	r2, r0
   15694:	2800      	cmp	r0, #0
   15696:	d04b      	beq.n	15730 <bt_id_set_adv_own_addr+0xa8>
   15698:	2b00      	cmp	r3, #0
   1569a:	d049      	beq.n	15730 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1569c:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1569e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   156a0:	d531      	bpl.n	15706 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   156a2:	4f25      	ldr	r7, [pc, #148]	; (15738 <bt_id_set_adv_own_addr+0xb0>)
   156a4:	f1b8 0f00 	cmp.w	r8, #0
   156a8:	d013      	beq.n	156d2 <bt_id_set_adv_own_addr+0x4a>
   156aa:	0688      	lsls	r0, r1, #26
   156ac:	d40a      	bmi.n	156c4 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   156ae:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   156b2:	5cfb      	ldrb	r3, [r7, r3]
   156b4:	2b01      	cmp	r3, #1
   156b6:	d015      	beq.n	156e4 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   156b8:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   156ba:	06b2      	lsls	r2, r6, #26
   156bc:	d50f      	bpl.n	156de <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   156be:	f043 0302 	orr.w	r3, r3, #2
   156c2:	e00b      	b.n	156dc <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   156c4:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   156c8:	0659      	lsls	r1, r3, #25
   156ca:	d4f0      	bmi.n	156ae <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   156cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   156d0:	e006      	b.n	156e0 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   156d2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   156d6:	5cfb      	ldrb	r3, [r7, r3]
   156d8:	2b01      	cmp	r3, #1
   156da:	d003      	beq.n	156e4 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   156dc:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   156de:	2000      	movs	r0, #0
}
   156e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   156e4:	2107      	movs	r1, #7
   156e6:	fb01 7104 	mla	r1, r1, r4, r7
   156ea:	3101      	adds	r1, #1
   156ec:	4610      	mov	r0, r2
   156ee:	f00f fa53 	bl	24b98 <bt_id_set_adv_random_addr>
				if (err) {
   156f2:	2800      	cmp	r0, #0
   156f4:	d1f4      	bne.n	156e0 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   156f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   156fa:	5d3b      	ldrb	r3, [r7, r4]
   156fc:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   156fe:	f1b8 0f00 	cmp.w	r8, #0
   15702:	d0ec      	beq.n	156de <bt_id_set_adv_own_addr+0x56>
   15704:	e7d9      	b.n	156ba <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   15706:	074b      	lsls	r3, r1, #29
   15708:	d50e      	bpl.n	15728 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1570a:	4e0b      	ldr	r6, [pc, #44]	; (15738 <bt_id_set_adv_own_addr+0xb0>)
   1570c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   15710:	5df3      	ldrb	r3, [r6, r7]
   15712:	2b01      	cmp	r3, #1
   15714:	d1e2      	bne.n	156dc <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   15716:	2107      	movs	r1, #7
   15718:	fb11 3104 	smlabb	r1, r1, r4, r3
   1571c:	4431      	add	r1, r6
   1571e:	f00f fa3b 	bl	24b98 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   15722:	5df3      	ldrb	r3, [r6, r7]
   15724:	702b      	strb	r3, [r5, #0]
		if (err) {
   15726:	e7db      	b.n	156e0 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   15728:	f00f fa3e 	bl	24ba8 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1572c:	2301      	movs	r3, #1
   1572e:	e7f9      	b.n	15724 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   15730:	f06f 0015 	mvn.w	r0, #21
   15734:	e7d4      	b.n	156e0 <bt_id_set_adv_own_addr+0x58>
   15736:	bf00      	nop
   15738:	20000380 	.word	0x20000380

0001573c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1573c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15740:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15742:	2120      	movs	r1, #32
{
   15744:	9000      	str	r0, [sp, #0]
   15746:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15748:	f7fe fe7a 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   1574c:	4605      	mov	r5, r0
   1574e:	2800      	cmp	r0, #0
   15750:	d054      	beq.n	157fc <hci_set_ad+0xc0>
   15752:	2120      	movs	r1, #32
   15754:	3008      	adds	r0, #8
   15756:	f006 f9f9 	bl	1bb4c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   1575a:	2220      	movs	r2, #32
   1575c:	2100      	movs	r1, #0
   1575e:	4681      	mov	r9, r0
   15760:	f00e ffd0 	bl	24704 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   15764:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   15768:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   1576c:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1576e:	f8d4 8000 	ldr.w	r8, [r4]
   15772:	2300      	movs	r3, #0
   15774:	6862      	ldr	r2, [r4, #4]
   15776:	4293      	cmp	r3, r2
   15778:	d30c      	bcc.n	15794 <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   1577a:	3408      	adds	r4, #8
   1577c:	45a2      	cmp	sl, r4
   1577e:	d1f6      	bne.n	1576e <hci_set_ad+0x32>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15780:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   15782:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15786:	2200      	movs	r2, #0
   15788:	4629      	mov	r1, r5
}
   1578a:	b003      	add	sp, #12
   1578c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15790:	f7fe bea0 	b.w	144d4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   15794:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   15798:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1579c:	1cb0      	adds	r0, r6, #2
   1579e:	1811      	adds	r1, r2, r0
   157a0:	291f      	cmp	r1, #31
   157a2:	d914      	bls.n	157ce <hci_set_ad+0x92>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   157a4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   157a8:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   157ac:	d101      	bne.n	157b2 <hci_set_ad+0x76>
   157ae:	2a00      	cmp	r2, #0
   157b0:	dc0b      	bgt.n	157ca <hci_set_ad+0x8e>
					BT_ERR("Too big advertising data");
   157b2:	4814      	ldr	r0, [pc, #80]	; (15804 <hci_set_ad+0xc8>)
   157b4:	2145      	movs	r1, #69	; 0x45
   157b6:	f00e f925 	bl	23a04 <z_log_minimal_printk>
		net_buf_unref(buf);
   157ba:	4628      	mov	r0, r5
   157bc:	f006 f8c0 	bl	1b940 <net_buf_unref>
					return -EINVAL;
   157c0:	f06f 0015 	mvn.w	r0, #21
}
   157c4:	b003      	add	sp, #12
   157c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   157ca:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   157ce:	b2d7      	uxtb	r7, r2
   157d0:	1c79      	adds	r1, r7, #1
   157d2:	f80b 1006 	strb.w	r1, [fp, r6]
   157d6:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   157d8:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   157da:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   157de:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   157e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   157e6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   157e8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   157ea:	f00e ff80 	bl	246ee <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   157ee:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   157f0:	4437      	add	r7, r6
   157f2:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   157f4:	3301      	adds	r3, #1
   157f6:	f108 0808 	add.w	r8, r8, #8
   157fa:	e7bb      	b.n	15774 <hci_set_ad+0x38>
		return -ENOBUFS;
   157fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15800:	e7e0      	b.n	157c4 <hci_set_ad+0x88>
   15802:	bf00      	nop
   15804:	000293ea 	.word	0x000293ea

00015808 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   15808:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1580a:	4605      	mov	r5, r0
   1580c:	4b16      	ldr	r3, [pc, #88]	; (15868 <le_adv_start_add_conn+0x60>)
   1580e:	f815 2b09 	ldrb.w	r2, [r5], #9
   15812:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   15816:	4604      	mov	r4, r0
   15818:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   1581a:	2207      	movs	r2, #7
   1581c:	4913      	ldr	r1, [pc, #76]	; (1586c <le_adv_start_add_conn+0x64>)
   1581e:	4628      	mov	r0, r5
   15820:	f00e ff55 	bl	246ce <memcmp>
   15824:	4603      	mov	r3, r0
   15826:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15828:	b96b      	cbnz	r3, 15846 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1582a:	4911      	ldr	r1, [pc, #68]	; (15870 <le_adv_start_add_conn+0x68>)
   1582c:	f001 f8c8 	bl	169c0 <bt_conn_add_le>
		if (!conn) {
   15830:	4604      	mov	r4, r0
   15832:	b910      	cbnz	r0, 1583a <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   15834:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   15838:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1583a:	2104      	movs	r1, #4
   1583c:	f000 fe84 	bl	16548 <bt_conn_set_state>
		*out_conn = conn;
   15840:	6034      	str	r4, [r6, #0]
		return 0;
   15842:	2000      	movs	r0, #0
   15844:	e7f8      	b.n	15838 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   15846:	4629      	mov	r1, r5
   15848:	f001 f8f0 	bl	16a2c <bt_conn_exists_le>
   1584c:	b940      	cbnz	r0, 15860 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1584e:	7820      	ldrb	r0, [r4, #0]
   15850:	4629      	mov	r1, r5
   15852:	f001 f8b5 	bl	169c0 <bt_conn_add_le>
	if (!conn) {
   15856:	4604      	mov	r4, r0
   15858:	2800      	cmp	r0, #0
   1585a:	d0eb      	beq.n	15834 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1585c:	2105      	movs	r1, #5
   1585e:	e7ed      	b.n	1583c <le_adv_start_add_conn+0x34>
		return -EINVAL;
   15860:	f06f 0015 	mvn.w	r0, #21
   15864:	e7e8      	b.n	15838 <le_adv_start_add_conn+0x30>
   15866:	bf00      	nop
   15868:	20000380 	.word	0x20000380
   1586c:	000289b2 	.word	0x000289b2
   15870:	000289ab 	.word	0x000289ab

00015874 <valid_adv_param>:
{
   15874:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15876:	6843      	ldr	r3, [r0, #4]
{
   15878:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1587a:	0558      	lsls	r0, r3, #21
   1587c:	d501      	bpl.n	15882 <valid_adv_param+0xe>
		return false;
   1587e:	2000      	movs	r0, #0
}
   15880:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15882:	6922      	ldr	r2, [r4, #16]
   15884:	b10a      	cbz	r2, 1588a <valid_adv_param+0x16>
   15886:	07d9      	lsls	r1, r3, #31
   15888:	d5f9      	bpl.n	1587e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1588a:	4d19      	ldr	r5, [pc, #100]	; (158f0 <valid_adv_param+0x7c>)
   1588c:	7820      	ldrb	r0, [r4, #0]
   1588e:	79eb      	ldrb	r3, [r5, #7]
   15890:	4283      	cmp	r3, r0
   15892:	d9f4      	bls.n	1587e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   15894:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15898:	4916      	ldr	r1, [pc, #88]	; (158f4 <valid_adv_param+0x80>)
   1589a:	2207      	movs	r2, #7
   1589c:	4428      	add	r0, r5
   1589e:	f00e ff16 	bl	246ce <memcmp>
	if (param->id >= bt_dev.id_count ||
   158a2:	2800      	cmp	r0, #0
   158a4:	d0eb      	beq.n	1587e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   158a6:	6860      	ldr	r0, [r4, #4]
   158a8:	07c2      	lsls	r2, r0, #31
   158aa:	d406      	bmi.n	158ba <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   158ac:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   158b0:	2b08      	cmp	r3, #8
   158b2:	d802      	bhi.n	158ba <valid_adv_param+0x46>
   158b4:	68a3      	ldr	r3, [r4, #8]
   158b6:	2b9f      	cmp	r3, #159	; 0x9f
   158b8:	d9e1      	bls.n	1587e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   158ba:	f010 0f30 	tst.w	r0, #48	; 0x30
   158be:	d002      	beq.n	158c6 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   158c0:	6923      	ldr	r3, [r4, #16]
   158c2:	2b00      	cmp	r3, #0
   158c4:	d0db      	beq.n	1587e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   158c6:	06c3      	lsls	r3, r0, #27
   158c8:	d401      	bmi.n	158ce <valid_adv_param+0x5a>
   158ca:	6923      	ldr	r3, [r4, #16]
   158cc:	b943      	cbnz	r3, 158e0 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   158ce:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   158d2:	429a      	cmp	r2, r3
   158d4:	d8d3      	bhi.n	1587e <valid_adv_param+0xa>
   158d6:	2a1f      	cmp	r2, #31
   158d8:	d9d1      	bls.n	1587e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   158da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   158de:	d8ce      	bhi.n	1587e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   158e0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   158e4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   158e8:	bf18      	it	ne
   158ea:	2001      	movne	r0, #1
   158ec:	e7c8      	b.n	15880 <valid_adv_param+0xc>
   158ee:	bf00      	nop
   158f0:	20000380 	.word	0x20000380
   158f4:	000289b2 	.word	0x000289b2

000158f8 <bt_le_ext_adv_foreach>:
{
   158f8:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   158fa:	4801      	ldr	r0, [pc, #4]	; (15900 <bt_le_ext_adv_foreach+0x8>)
   158fc:	4718      	bx	r3
   158fe:	bf00      	nop
   15900:	20000398 	.word	0x20000398

00015904 <bt_le_adv_lookup_legacy>:
}
   15904:	4800      	ldr	r0, [pc, #0]	; (15908 <bt_le_adv_lookup_legacy+0x4>)
   15906:	4770      	bx	lr
   15908:	20000398 	.word	0x20000398

0001590c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   15910:	f8d1 9010 	ldr.w	r9, [r1, #16]
{
   15914:	b08d      	sub	sp, #52	; 0x34
   15916:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   15918:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1591a:	ebb9 0603 	subs.w	r6, r9, r3
{
   1591e:	4605      	mov	r5, r0
   15920:	4890      	ldr	r0, [pc, #576]	; (15b64 <bt_le_adv_start_legacy+0x258>)
   15922:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   15924:	bf18      	it	ne
   15926:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   15928:	9307      	str	r3, [sp, #28]
   1592a:	f00f f979 	bl	24c20 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1592e:	0742      	lsls	r2, r0, #29
{
   15930:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15932:	f140 810b 	bpl.w	15b4c <bt_le_adv_start_legacy+0x240>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15936:	4608      	mov	r0, r1
   15938:	f7ff ff9c 	bl	15874 <valid_adv_param>
   1593c:	b928      	cbnz	r0, 1594a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1593e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   15942:	4658      	mov	r0, fp
   15944:	b00d      	add	sp, #52	; 0x34
   15946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1594a:	4620      	mov	r0, r4
   1594c:	f00f f943 	bl	24bd6 <bt_id_adv_random_addr_check>
   15950:	4680      	mov	r8, r0
   15952:	2800      	cmp	r0, #0
   15954:	d0f3      	beq.n	1593e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15956:	f105 0710 	add.w	r7, r5, #16
   1595a:	4638      	mov	r0, r7
   1595c:	f00f f960 	bl	24c20 <atomic_get>
   15960:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15962:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   15966:	f100 80f4 	bmi.w	15b52 <bt_le_adv_start_legacy+0x246>
	(void)memset(&set_param, 0, sizeof(set_param));
   1596a:	220f      	movs	r2, #15
   1596c:	4659      	mov	r1, fp
   1596e:	a808      	add	r0, sp, #32
   15970:	f00e fec8 	bl	24704 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15974:	68a3      	ldr	r3, [r4, #8]
   15976:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1597a:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1597c:	68e3      	ldr	r3, [r4, #12]
   1597e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   15982:	f00f f93e 	bl	24c02 <get_adv_channel_map>
	if (adv->id != param->id) {
   15986:	782a      	ldrb	r2, [r5, #0]
   15988:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1598a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1598e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   15990:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   15994:	d004      	beq.n	159a0 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15996:	4873      	ldr	r0, [pc, #460]	; (15b64 <bt_le_adv_start_legacy+0x258>)
   15998:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1599c:	f00f f946 	bl	24c2c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   159a0:	4a71      	ldr	r2, [pc, #452]	; (15b68 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   159a2:	7823      	ldrb	r3, [r4, #0]
   159a4:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   159a6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   159aa:	6861      	ldr	r1, [r4, #4]
   159ac:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   159b0:	4632      	mov	r2, r6
   159b2:	4628      	mov	r0, r5
   159b4:	f7ff fe68 	bl	15688 <bt_id_set_adv_own_addr>
	if (err) {
   159b8:	4683      	mov	fp, r0
   159ba:	2800      	cmp	r0, #0
   159bc:	d1c1      	bne.n	15942 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   159be:	f105 0009 	add.w	r0, r5, #9
	memcpy(dst, src, sizeof(*dst));
   159c2:	2207      	movs	r2, #7
	if (dir_adv) {
   159c4:	f1b9 0f00 	cmp.w	r9, #0
   159c8:	d013      	beq.n	159f2 <bt_le_adv_start_legacy+0xe6>
   159ca:	6921      	ldr	r1, [r4, #16]
   159cc:	f00e fe8f 	bl	246ee <memcpy>
	name_type = get_adv_name_type_param(param);
   159d0:	4620      	mov	r0, r4
   159d2:	f00f f9c8 	bl	24d66 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   159d6:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
   159d8:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   159da:	07d0      	lsls	r0, r2, #31
   159dc:	d416      	bmi.n	15a0c <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   159de:	0592      	lsls	r2, r2, #22
   159e0:	d403      	bmi.n	159ea <bt_le_adv_start_legacy+0xde>
   159e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   159e4:	b90b      	cbnz	r3, 159ea <bt_le_adv_start_legacy+0xde>
   159e6:	2e02      	cmp	r6, #2
   159e8:	d152      	bne.n	15a90 <bt_le_adv_start_legacy+0x184>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   159ea:	2302      	movs	r3, #2
   159ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   159f0:	e01a      	b.n	15a28 <bt_le_adv_start_legacy+0x11c>
   159f2:	495e      	ldr	r1, [pc, #376]	; (15b6c <bt_le_adv_start_legacy+0x260>)
   159f4:	f00e fe7b 	bl	246ee <memcpy>
	name_type = get_adv_name_type_param(param);
   159f8:	4620      	mov	r0, r4
   159fa:	f00f f9b4 	bl	24d66 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   159fe:	6862      	ldr	r2, [r4, #4]
   15a00:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
   15a02:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15a04:	d5eb      	bpl.n	159de <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   15a06:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
   15a0a:	e00d      	b.n	15a28 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   15a0c:	f012 0f10 	tst.w	r2, #16
   15a10:	bf0c      	ite	eq
   15a12:	2201      	moveq	r2, #1
   15a14:	2204      	movne	r2, #4
   15a16:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   15a1a:	6921      	ldr	r1, [r4, #16]
   15a1c:	2207      	movs	r2, #7
   15a1e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   15a22:	f00e fe64 	bl	246ee <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   15a26:	46d8      	mov	r8, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15a28:	210f      	movs	r1, #15
   15a2a:	f242 0006 	movw	r0, #8198	; 0x2006
   15a2e:	f7fe fd07 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   15a32:	4683      	mov	fp, r0
   15a34:	2800      	cmp	r0, #0
   15a36:	f000 808f 	beq.w	15b58 <bt_le_adv_start_legacy+0x24c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15a3a:	220f      	movs	r2, #15
   15a3c:	a908      	add	r1, sp, #32
   15a3e:	3008      	adds	r0, #8
   15a40:	f010 fd8c 	bl	2655c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   15a44:	2200      	movs	r2, #0
   15a46:	4659      	mov	r1, fp
   15a48:	f242 0006 	movw	r0, #8198	; 0x2006
   15a4c:	f7fe fd42 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   15a50:	2800      	cmp	r0, #0
   15a52:	f040 8084 	bne.w	15b5e <bt_le_adv_start_legacy+0x252>
	if (!dir_adv) {
   15a56:	f1b9 0f00 	cmp.w	r9, #0
   15a5a:	d01f      	beq.n	15a9c <bt_le_adv_start_legacy+0x190>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15a5c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15a5e:	07db      	lsls	r3, r3, #31
   15a60:	d42a      	bmi.n	15ab8 <bt_le_adv_start_legacy+0x1ac>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15a62:	4628      	mov	r0, r5
   15a64:	2101      	movs	r1, #1
   15a66:	f00f f98e 	bl	24d86 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15a6a:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   15a6c:	4683      	mov	fp, r0
   15a6e:	2800      	cmp	r0, #0
   15a70:	d064      	beq.n	15b3c <bt_le_adv_start_legacy+0x230>
		BT_ERR("Failed to start advertiser");
   15a72:	483f      	ldr	r0, [pc, #252]	; (15b70 <bt_le_adv_start_legacy+0x264>)
   15a74:	2145      	movs	r1, #69	; 0x45
   15a76:	f00d ffc5 	bl	23a04 <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15a7a:	2d00      	cmp	r5, #0
   15a7c:	f43f af61 	beq.w	15942 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15a80:	4628      	mov	r0, r5
   15a82:	2100      	movs	r1, #0
   15a84:	f000 fd60 	bl	16548 <bt_conn_set_state>
			bt_conn_unref(conn);
   15a88:	4628      	mov	r0, r5
   15a8a:	f000 fd25 	bl	164d8 <bt_conn_unref>
   15a8e:	e758      	b.n	15942 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15a90:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   15a92:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15a96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   15a9a:	e7c5      	b.n	15a28 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15a9e:	9300      	str	r3, [sp, #0]
   15aa0:	e9cd 8601 	strd	r8, r6, [sp, #4]
   15aa4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15aa6:	9905      	ldr	r1, [sp, #20]
   15aa8:	4652      	mov	r2, sl
   15aaa:	4628      	mov	r0, r5
   15aac:	f00f f8e4 	bl	24c78 <le_adv_update.constprop.0>
		if (err) {
   15ab0:	4683      	mov	fp, r0
   15ab2:	2800      	cmp	r0, #0
   15ab4:	d0d2      	beq.n	15a5c <bt_le_adv_start_legacy+0x150>
   15ab6:	e744      	b.n	15942 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   15ab8:	a907      	add	r1, sp, #28
   15aba:	4628      	mov	r0, r5
   15abc:	f7ff fea4 	bl	15808 <le_adv_start_add_conn>
		if (err) {
   15ac0:	4683      	mov	fp, r0
   15ac2:	2800      	cmp	r0, #0
   15ac4:	d0cd      	beq.n	15a62 <bt_le_adv_start_legacy+0x156>
			if (err == -ENOMEM && !dir_adv &&
   15ac6:	f110 0f0c 	cmn.w	r0, #12
   15aca:	f47f af3a 	bne.w	15942 <bt_le_adv_start_legacy+0x36>
   15ace:	f1b9 0f00 	cmp.w	r9, #0
   15ad2:	f47f af36 	bne.w	15942 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   15ad6:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   15ad8:	0790      	lsls	r0, r2, #30
   15ada:	f53f af32 	bmi.w	15942 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15ade:	6863      	ldr	r3, [r4, #4]
   15ae0:	f083 0302 	eor.w	r3, r3, #2
   15ae4:	f3c3 0b40 	ubfx	fp, r3, #1, #1
   15ae8:	f00b 0201 	and.w	r2, fp, #1
   15aec:	210e      	movs	r1, #14
   15aee:	4638      	mov	r0, r7
   15af0:	f00f f8ab 	bl	24c4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   15af4:	1e73      	subs	r3, r6, #1
   15af6:	425a      	negs	r2, r3
   15af8:	415a      	adcs	r2, r3
   15afa:	2108      	movs	r1, #8
   15afc:	4638      	mov	r0, r7
   15afe:	f00f f8a4 	bl	24c4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   15b02:	1eb1      	subs	r1, r6, #2
   15b04:	424a      	negs	r2, r1
   15b06:	414a      	adcs	r2, r1
   15b08:	4638      	mov	r0, r7
   15b0a:	2109      	movs	r1, #9
   15b0c:	f00f f89d 	bl	24c4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   15b10:	6862      	ldr	r2, [r4, #4]
   15b12:	210a      	movs	r1, #10
   15b14:	f002 0201 	and.w	r2, r2, #1
   15b18:	4638      	mov	r0, r7
   15b1a:	f00f f896 	bl	24c4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   15b1e:	4642      	mov	r2, r8
   15b20:	210b      	movs	r1, #11
   15b22:	4638      	mov	r0, r7
   15b24:	f00f f891 	bl	24c4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   15b28:	6862      	ldr	r2, [r4, #4]
   15b2a:	210d      	movs	r1, #13
   15b2c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15b30:	4638      	mov	r0, r7
   15b32:	f00f f88a 	bl	24c4a <atomic_set_bit_to>
	return 0;
   15b36:	f04f 0b00 	mov.w	fp, #0
   15b3a:	e702      	b.n	15942 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15b3c:	b115      	cbz	r5, 15b44 <bt_le_adv_start_legacy+0x238>
		bt_conn_unref(conn);
   15b3e:	4628      	mov	r0, r5
   15b40:	f000 fcca 	bl	164d8 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15b44:	f1b9 0f00 	cmp.w	r9, #0
   15b48:	d1ce      	bne.n	15ae8 <bt_le_adv_start_legacy+0x1dc>
   15b4a:	e7c8      	b.n	15ade <bt_le_adv_start_legacy+0x1d2>
		return -EAGAIN;
   15b4c:	f06f 0b0a 	mvn.w	fp, #10
   15b50:	e6f7      	b.n	15942 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   15b52:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   15b56:	e6f4      	b.n	15942 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   15b58:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   15b5c:	e6f1      	b.n	15942 <bt_le_adv_start_legacy+0x36>
   15b5e:	4683      	mov	fp, r0
   15b60:	e6ef      	b.n	15942 <bt_le_adv_start_legacy+0x36>
   15b62:	bf00      	nop
   15b64:	2000044c 	.word	0x2000044c
   15b68:	20000380 	.word	0x20000380
   15b6c:	000289b2 	.word	0x000289b2
   15b70:	00029408 	.word	0x00029408

00015b74 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15b76:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15b78:	9a06      	ldr	r2, [sp, #24]
{
   15b7a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15b7c:	e9cd 3200 	strd	r3, r2, [sp]
   15b80:	462b      	mov	r3, r5
   15b82:	460a      	mov	r2, r1
   15b84:	4601      	mov	r1, r0
   15b86:	4811      	ldr	r0, [pc, #68]	; (15bcc <bt_le_adv_start+0x58>)
   15b88:	f7ff fec0 	bl	1590c <bt_le_adv_start_legacy>
   15b8c:	4621      	mov	r1, r4
   15b8e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   15b90:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   15b92:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   15b96:	429d      	cmp	r5, r3
   15b98:	d102      	bne.n	15ba0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   15b9a:	4630      	mov	r0, r6
   15b9c:	b002      	add	sp, #8
   15b9e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   15ba0:	880a      	ldrh	r2, [r1, #0]
   15ba2:	4282      	cmp	r2, r0
   15ba4:	d104      	bne.n	15bb0 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   15ba6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   15ba8:	b112      	cbz	r2, 15bb0 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   15baa:	7812      	ldrb	r2, [r2, #0]
   15bac:	07d2      	lsls	r2, r2, #31
   15bae:	d402      	bmi.n	15bb6 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   15bb0:	3301      	adds	r3, #1
   15bb2:	3108      	adds	r1, #8
   15bb4:	e7ef      	b.n	15b96 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   15bb6:	4906      	ldr	r1, [pc, #24]	; (15bd0 <bt_le_adv_start+0x5c>)
   15bb8:	4806      	ldr	r0, [pc, #24]	; (15bd4 <bt_le_adv_start+0x60>)
   15bba:	f00b f92f 	bl	20e1c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   15bbe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15bc2:	2300      	movs	r3, #0
   15bc4:	4803      	ldr	r0, [pc, #12]	; (15bd4 <bt_le_adv_start+0x60>)
   15bc6:	f00b fa13 	bl	20ff0 <k_work_reschedule>
   15bca:	e7e6      	b.n	15b9a <bt_le_adv_start+0x26>
   15bcc:	20000398 	.word	0x20000398
   15bd0:	00015c5d 	.word	0x00015c5d
   15bd4:	200003b0 	.word	0x200003b0

00015bd8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   15bd8:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   15bda:	481a      	ldr	r0, [pc, #104]	; (15c44 <bt_le_adv_stop+0x6c>)
   15bdc:	f00f f8fa 	bl	24dd4 <bt_le_lim_adv_cancel_timeout>
   15be0:	4819      	ldr	r0, [pc, #100]	; (15c48 <bt_le_adv_stop+0x70>)
   15be2:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   15be6:	f00f f821 	bl	24c2c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15bea:	4817      	ldr	r0, [pc, #92]	; (15c48 <bt_le_adv_stop+0x70>)
   15bec:	f00f f818 	bl	24c20 <atomic_get>
   15bf0:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15bf2:	061a      	lsls	r2, r3, #24
   15bf4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   15bf8:	d523      	bpl.n	15c42 <bt_le_adv_stop+0x6a>
   15bfa:	4813      	ldr	r0, [pc, #76]	; (15c48 <bt_le_adv_stop+0x70>)
   15bfc:	f00f f810 	bl	24c20 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c00:	0543      	lsls	r3, r0, #21
   15c02:	d514      	bpl.n	15c2e <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
   15c04:	4911      	ldr	r1, [pc, #68]	; (15c4c <bt_le_adv_stop+0x74>)
   15c06:	4812      	ldr	r0, [pc, #72]	; (15c50 <bt_le_adv_stop+0x78>)
   15c08:	2207      	movs	r2, #7
   15c0a:	f00e fd60 	bl	246ce <memcmp>
   15c0e:	4b11      	ldr	r3, [pc, #68]	; (15c54 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15c10:	b998      	cbnz	r0, 15c3a <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   15c12:	4911      	ldr	r1, [pc, #68]	; (15c58 <bt_le_adv_stop+0x80>)
   15c14:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15c16:	7e18      	ldrb	r0, [r3, #24]
   15c18:	f000 ff24 	bl	16a64 <bt_conn_lookup_state_le>
   15c1c:	4604      	mov	r4, r0
	if (conn) {
   15c1e:	b130      	cbz	r0, 15c2e <bt_le_adv_stop+0x56>
		conn->err = status;
   15c20:	2100      	movs	r1, #0
   15c22:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15c24:	f000 fc90 	bl	16548 <bt_conn_set_state>
		bt_conn_unref(conn);
   15c28:	4620      	mov	r0, r4
   15c2a:	f000 fc55 	bl	164d8 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   15c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   15c32:	4804      	ldr	r0, [pc, #16]	; (15c44 <bt_le_adv_stop+0x6c>)
   15c34:	2100      	movs	r1, #0
   15c36:	f00f b8a6 	b.w	24d86 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15c3a:	2205      	movs	r2, #5
   15c3c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   15c40:	e7e9      	b.n	15c16 <bt_le_adv_stop+0x3e>
}
   15c42:	bd10      	pop	{r4, pc}
   15c44:	20000398 	.word	0x20000398
   15c48:	200003a8 	.word	0x200003a8
   15c4c:	000289b2 	.word	0x000289b2
   15c50:	200003a1 	.word	0x200003a1
   15c54:	20000380 	.word	0x20000380
   15c58:	000289ab 	.word	0x000289ab

00015c5c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   15c5c:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   15c5e:	f7ff ffbb 	bl	15bd8 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
}
   15c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_le_adv_stop();
   15c66:	4602      	mov	r2, r0
	BT_WARN("Failed to stop advertising: %d", err);
   15c68:	2157      	movs	r1, #87	; 0x57
   15c6a:	4801      	ldr	r0, [pc, #4]	; (15c70 <adv_timeout+0x14>)
   15c6c:	f00d beca 	b.w	23a04 <z_log_minimal_printk>
   15c70:	00029428 	.word	0x00029428

00015c74 <bt_le_adv_resume>:
{
   15c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15c76:	4c20      	ldr	r4, [pc, #128]	; (15cf8 <bt_le_adv_resume+0x84>)
   15c78:	4620      	mov	r0, r4
   15c7a:	f00e ffd1 	bl	24c20 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   15c7e:	0440      	lsls	r0, r0, #17
   15c80:	d538      	bpl.n	15cf4 <bt_le_adv_resume+0x80>
   15c82:	4620      	mov	r0, r4
   15c84:	f00e ffcc 	bl	24c20 <atomic_get>
   15c88:	0601      	lsls	r1, r0, #24
   15c8a:	d433      	bmi.n	15cf4 <bt_le_adv_resume+0x80>
   15c8c:	4620      	mov	r0, r4
   15c8e:	f00e ffc7 	bl	24c20 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   15c92:	0542      	lsls	r2, r0, #21
   15c94:	d52e      	bpl.n	15cf4 <bt_le_adv_resume+0x80>
	err = le_adv_start_add_conn(adv, &conn);
   15c96:	a901      	add	r1, sp, #4
   15c98:	f1a4 0010 	sub.w	r0, r4, #16
   15c9c:	f7ff fdb4 	bl	15808 <le_adv_start_add_conn>
	if (err) {
   15ca0:	4605      	mov	r5, r0
   15ca2:	bb38      	cbnz	r0, 15cf4 <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15ca4:	2101      	movs	r1, #1
   15ca6:	f1a4 0010 	sub.w	r0, r4, #16
   15caa:	f00f f86c 	bl	24d86 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   15cae:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   15cb0:	b928      	cbnz	r0, 15cbe <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   15cb2:	4630      	mov	r0, r6
}
   15cb4:	b002      	add	sp, #8
   15cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15cba:	f000 bc0d 	b.w	164d8 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15cbe:	4629      	mov	r1, r5
   15cc0:	4630      	mov	r0, r6
   15cc2:	f000 fc41 	bl	16548 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15cc6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   15cca:	4620      	mov	r0, r4
   15ccc:	f00e ffae 	bl	24c2c <atomic_and>
   15cd0:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   15cd2:	4630      	mov	r0, r6
   15cd4:	f000 fc00 	bl	164d8 <bt_conn_unref>
	if (persist_paused) {
   15cd8:	046b      	lsls	r3, r5, #17
   15cda:	d50b      	bpl.n	15cf4 <bt_le_adv_resume+0x80>
   15cdc:	f3bf 8f5b 	dmb	ish
   15ce0:	e854 3f00 	ldrex	r3, [r4]
   15ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   15ce8:	e844 3200 	strex	r2, r3, [r4]
   15cec:	2a00      	cmp	r2, #0
   15cee:	d1f7      	bne.n	15ce0 <bt_le_adv_resume+0x6c>
   15cf0:	f3bf 8f5b 	dmb	ish
}
   15cf4:	b002      	add	sp, #8
   15cf6:	bd70      	pop	{r4, r5, r6, pc}
   15cf8:	200003a8 	.word	0x200003a8

00015cfc <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   15cfc:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   15cfe:	4904      	ldr	r1, [pc, #16]	; (15d10 <bt_pub_key_is_debug+0x14>)
   15d00:	2240      	movs	r2, #64	; 0x40
   15d02:	f00e fce4 	bl	246ce <memcmp>
}
   15d06:	fab0 f080 	clz	r0, r0
   15d0a:	0940      	lsrs	r0, r0, #5
   15d0c:	bd08      	pop	{r3, pc}
   15d0e:	bf00      	nop
   15d10:	000294ee 	.word	0x000294ee

00015d14 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   15d14:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   15d16:	4b37      	ldr	r3, [pc, #220]	; (15df4 <bt_pub_key_gen+0xe0>)
   15d18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   15d1c:	f003 0306 	and.w	r3, r3, #6
   15d20:	2b06      	cmp	r3, #6
   15d22:	d007      	beq.n	15d34 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   15d24:	4834      	ldr	r0, [pc, #208]	; (15df8 <bt_pub_key_gen+0xe4>)
   15d26:	2157      	movs	r1, #87	; 0x57
   15d28:	f00d fe6c 	bl	23a04 <z_log_minimal_printk>
		return -ENOTSUP;
   15d2c:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   15d30:	4628      	mov	r0, r5
   15d32:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   15d34:	2800      	cmp	r0, #0
   15d36:	d05a      	beq.n	15dee <bt_pub_key_gen+0xda>
	return list->head;
   15d38:	4e30      	ldr	r6, [pc, #192]	; (15dfc <bt_pub_key_gen+0xe8>)
   15d3a:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15d3c:	b16a      	cbz	r2, 15d5a <bt_pub_key_gen+0x46>
   15d3e:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   15d40:	4283      	cmp	r3, r0
   15d42:	d106      	bne.n	15d52 <bt_pub_key_gen+0x3e>
			BT_WARN("Callback already registered");
   15d44:	482e      	ldr	r0, [pc, #184]	; (15e00 <bt_pub_key_gen+0xec>)
   15d46:	2157      	movs	r1, #87	; 0x57
   15d48:	f00d fe5c 	bl	23a04 <z_log_minimal_printk>
			return -EALREADY;
   15d4c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   15d50:	e7ee      	b.n	15d30 <bt_pub_key_gen+0x1c>
	return node->next;
   15d52:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15d54:	b10b      	cbz	r3, 15d5a <bt_pub_key_gen+0x46>
   15d56:	3b04      	subs	r3, #4
   15d58:	e7f2      	b.n	15d40 <bt_pub_key_gen+0x2c>
	parent->next = child;
   15d5a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   15d5c:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   15d5e:	1d03      	adds	r3, r0, #4
	list->head = node;
   15d60:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   15d62:	b902      	cbnz	r2, 15d66 <bt_pub_key_gen+0x52>
	list->tail = node;
   15d64:	6073      	str	r3, [r6, #4]
   15d66:	4c27      	ldr	r4, [pc, #156]	; (15e04 <bt_pub_key_gen+0xf0>)
   15d68:	f3bf 8f5b 	dmb	ish
   15d6c:	e854 2f00 	ldrex	r2, [r4]
   15d70:	f042 0320 	orr.w	r3, r2, #32
   15d74:	e844 3100 	strex	r1, r3, [r4]
   15d78:	2900      	cmp	r1, #0
   15d7a:	d1f7      	bne.n	15d6c <bt_pub_key_gen+0x58>
   15d7c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15d80:	f012 0220 	ands.w	r2, r2, #32
   15d84:	d001      	beq.n	15d8a <bt_pub_key_gen+0x76>
	return 0;
   15d86:	2500      	movs	r5, #0
   15d88:	e7d2      	b.n	15d30 <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15d8a:	f3bf 8f5b 	dmb	ish
   15d8e:	e854 3f00 	ldrex	r3, [r4]
   15d92:	f023 0310 	bic.w	r3, r3, #16
   15d96:	e844 3100 	strex	r1, r3, [r4]
   15d9a:	2900      	cmp	r1, #0
   15d9c:	d1f7      	bne.n	15d8e <bt_pub_key_gen+0x7a>
   15d9e:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   15da2:	4611      	mov	r1, r2
   15da4:	f242 0025 	movw	r0, #8229	; 0x2025
   15da8:	f7fe fb94 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   15dac:	4605      	mov	r5, r0
   15dae:	2800      	cmp	r0, #0
   15db0:	d0e9      	beq.n	15d86 <bt_pub_key_gen+0x72>
		BT_ERR("Sending LE P256 Public Key command failed");
   15db2:	4815      	ldr	r0, [pc, #84]	; (15e08 <bt_pub_key_gen+0xf4>)
   15db4:	2145      	movs	r1, #69	; 0x45
   15db6:	f00d fe25 	bl	23a04 <z_log_minimal_printk>
   15dba:	f3bf 8f5b 	dmb	ish
   15dbe:	e854 3f00 	ldrex	r3, [r4]
   15dc2:	f023 0320 	bic.w	r3, r3, #32
   15dc6:	e844 3200 	strex	r2, r3, [r4]
   15dca:	2a00      	cmp	r2, #0
   15dcc:	d1f7      	bne.n	15dbe <bt_pub_key_gen+0xaa>
   15dce:	f3bf 8f5b 	dmb	ish
	return list->head;
   15dd2:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15dd4:	b13c      	cbz	r4, 15de6 <bt_pub_key_gen+0xd2>
			if (cb->func) {
   15dd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15dda:	3c04      	subs	r4, #4
			if (cb->func) {
   15ddc:	b10b      	cbz	r3, 15de2 <bt_pub_key_gen+0xce>
				cb->func(NULL);
   15dde:	2000      	movs	r0, #0
   15de0:	4798      	blx	r3
	return node->next;
   15de2:	6864      	ldr	r4, [r4, #4]
   15de4:	e7f6      	b.n	15dd4 <bt_pub_key_gen+0xc0>
	list->head = NULL;
   15de6:	2300      	movs	r3, #0
	list->tail = NULL;
   15de8:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   15dec:	e7a0      	b.n	15d30 <bt_pub_key_gen+0x1c>
		return -EINVAL;
   15dee:	f06f 0515 	mvn.w	r5, #21
   15df2:	e79d      	b.n	15d30 <bt_pub_key_gen+0x1c>
   15df4:	20000380 	.word	0x20000380
   15df8:	00029453 	.word	0x00029453
   15dfc:	2000208c 	.word	0x2000208c
   15e00:	00029477 	.word	0x00029477
   15e04:	2000044c 	.word	0x2000044c
   15e08:	00029498 	.word	0x00029498

00015e0c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15e0c:	4b05      	ldr	r3, [pc, #20]	; (15e24 <bt_pub_key_get+0x18>)
   15e0e:	f3bf 8f5b 	dmb	ish
   15e12:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   15e14:	4804      	ldr	r0, [pc, #16]	; (15e28 <bt_pub_key_get+0x1c>)
   15e16:	f3bf 8f5b 	dmb	ish
	return NULL;
   15e1a:	f013 0f10 	tst.w	r3, #16
}
   15e1e:	bf08      	it	eq
   15e20:	2000      	moveq	r0, #0
   15e22:	4770      	bx	lr
   15e24:	2000044c 	.word	0x2000044c
   15e28:	2000261e 	.word	0x2000261e

00015e2c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   15e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   15e2e:	4d22      	ldr	r5, [pc, #136]	; (15eb8 <bt_dh_key_gen+0x8c>)
   15e30:	682b      	ldr	r3, [r5, #0]
   15e32:	428b      	cmp	r3, r1
{
   15e34:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   15e36:	d039      	beq.n	15eac <bt_dh_key_gen+0x80>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15e38:	b11b      	cbz	r3, 15e42 <bt_dh_key_gen+0x16>
		return -EBUSY;
   15e3a:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   15e3e:	4620      	mov	r0, r4
   15e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e42:	4b1e      	ldr	r3, [pc, #120]	; (15ebc <bt_dh_key_gen+0x90>)
   15e44:	f3bf 8f5b 	dmb	ish
   15e48:	681a      	ldr	r2, [r3, #0]
   15e4a:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15e4e:	f3c2 1740 	ubfx	r7, r2, #5, #1
   15e52:	0692      	lsls	r2, r2, #26
   15e54:	d4f1      	bmi.n	15e3a <bt_dh_key_gen+0xe>
   15e56:	f3bf 8f5b 	dmb	ish
   15e5a:	681b      	ldr	r3, [r3, #0]
   15e5c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   15e60:	06db      	lsls	r3, r3, #27
   15e62:	d526      	bpl.n	15eb2 <bt_dh_key_gen+0x86>
	dh_key_cb = cb;
   15e64:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   15e66:	f242 0026 	movw	r0, #8230	; 0x2026
   15e6a:	2140      	movs	r1, #64	; 0x40
   15e6c:	f7fe fae8 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   15e70:	4604      	mov	r4, r0
   15e72:	b1c0      	cbz	r0, 15ea6 <bt_dh_key_gen+0x7a>
	return net_buf_simple_add(&buf->b, len);
   15e74:	2140      	movs	r1, #64	; 0x40
   15e76:	3008      	adds	r0, #8
   15e78:	f005 fe68 	bl	1bb4c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   15e7c:	2240      	movs	r2, #64	; 0x40
   15e7e:	4631      	mov	r1, r6
   15e80:	f00e fc35 	bl	246ee <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   15e84:	4621      	mov	r1, r4
   15e86:	463a      	mov	r2, r7
   15e88:	f242 0026 	movw	r0, #8230	; 0x2026
   15e8c:	f7fe fb22 	bl	144d4 <bt_hci_cmd_send_sync>
	if (err) {
   15e90:	4604      	mov	r4, r0
   15e92:	2800      	cmp	r0, #0
   15e94:	d0d3      	beq.n	15e3e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   15e96:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   15e98:	4809      	ldr	r0, [pc, #36]	; (15ec0 <bt_dh_key_gen+0x94>)
		dh_key_cb = NULL;
   15e9a:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   15e9c:	4622      	mov	r2, r4
   15e9e:	2157      	movs	r1, #87	; 0x57
   15ea0:	f00d fdb0 	bl	23a04 <z_log_minimal_printk>
		return err;
   15ea4:	e7cb      	b.n	15e3e <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   15ea6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15eaa:	e7f4      	b.n	15e96 <bt_dh_key_gen+0x6a>
		return -EALREADY;
   15eac:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15eb0:	e7c5      	b.n	15e3e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   15eb2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   15eb6:	e7c2      	b.n	15e3e <bt_dh_key_gen+0x12>
   15eb8:	20002088 	.word	0x20002088
   15ebc:	2000044c 	.word	0x2000044c
   15ec0:	000294c7 	.word	0x000294c7

00015ec4 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   15ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15ec6:	4c1b      	ldr	r4, [pc, #108]	; (15f34 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   15ec8:	6886      	ldr	r6, [r0, #8]
   15eca:	f3bf 8f5b 	dmb	ish
   15ece:	e854 3f00 	ldrex	r3, [r4]
   15ed2:	f023 0320 	bic.w	r3, r3, #32
   15ed6:	e844 3200 	strex	r2, r3, [r4]
   15eda:	2a00      	cmp	r2, #0
   15edc:	d1f7      	bne.n	15ece <bt_hci_evt_le_pkey_complete+0xa>
   15ede:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   15ee2:	7833      	ldrb	r3, [r6, #0]
   15ee4:	b983      	cbnz	r3, 15f08 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   15ee6:	4814      	ldr	r0, [pc, #80]	; (15f38 <bt_hci_evt_le_pkey_complete+0x74>)
   15ee8:	2240      	movs	r2, #64	; 0x40
   15eea:	1c71      	adds	r1, r6, #1
   15eec:	f00e fbff 	bl	246ee <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15ef0:	f3bf 8f5b 	dmb	ish
   15ef4:	e854 3f00 	ldrex	r3, [r4]
   15ef8:	f043 0310 	orr.w	r3, r3, #16
   15efc:	e844 3200 	strex	r2, r3, [r4]
   15f00:	2a00      	cmp	r2, #0
   15f02:	d1f7      	bne.n	15ef4 <bt_hci_evt_le_pkey_complete+0x30>
   15f04:	f3bf 8f5b 	dmb	ish
	return list->head;
   15f08:	4d0c      	ldr	r5, [pc, #48]	; (15f3c <bt_hci_evt_le_pkey_complete+0x78>)
   15f0a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15f0c:	b16c      	cbz	r4, 15f2a <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   15f0e:	4f0a      	ldr	r7, [pc, #40]	; (15f38 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15f10:	3c04      	subs	r4, #4
		if (cb->func) {
   15f12:	6823      	ldr	r3, [r4, #0]
   15f14:	b12b      	cbz	r3, 15f22 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   15f16:	7832      	ldrb	r2, [r6, #0]
   15f18:	2a00      	cmp	r2, #0
   15f1a:	bf0c      	ite	eq
   15f1c:	4638      	moveq	r0, r7
   15f1e:	2000      	movne	r0, #0
   15f20:	4798      	blx	r3
	return node->next;
   15f22:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15f24:	b10c      	cbz	r4, 15f2a <bt_hci_evt_le_pkey_complete+0x66>
   15f26:	3c04      	subs	r4, #4
   15f28:	e7f3      	b.n	15f12 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   15f2a:	2300      	movs	r3, #0
	list->tail = NULL;
   15f2c:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   15f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f32:	bf00      	nop
   15f34:	2000044c 	.word	0x2000044c
   15f38:	2000261e 	.word	0x2000261e
   15f3c:	2000208c 	.word	0x2000208c

00015f40 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   15f40:	4905      	ldr	r1, [pc, #20]	; (15f58 <bt_hci_evt_le_dhkey_complete+0x18>)
   15f42:	680b      	ldr	r3, [r1, #0]
   15f44:	b133      	cbz	r3, 15f54 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   15f46:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   15f48:	2000      	movs	r0, #0
   15f4a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   15f4c:	7811      	ldrb	r1, [r2, #0]
   15f4e:	b901      	cbnz	r1, 15f52 <bt_hci_evt_le_dhkey_complete+0x12>
   15f50:	1c50      	adds	r0, r2, #1
   15f52:	4718      	bx	r3
	}
}
   15f54:	4770      	bx	lr
   15f56:	bf00      	nop
   15f58:	20002088 	.word	0x20002088

00015f5c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   15f5c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   15f5e:	4b11      	ldr	r3, [pc, #68]	; (15fa4 <notify_connected+0x48>)
   15f60:	681d      	ldr	r5, [r3, #0]
{
   15f62:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   15f64:	b975      	cbnz	r5, 15f84 <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15f66:	4d10      	ldr	r5, [pc, #64]	; (15fa8 <notify_connected+0x4c>)
   15f68:	4e10      	ldr	r6, [pc, #64]	; (15fac <notify_connected+0x50>)
   15f6a:	42b5      	cmp	r5, r6
   15f6c:	d918      	bls.n	15fa0 <notify_connected+0x44>
   15f6e:	4910      	ldr	r1, [pc, #64]	; (15fb0 <notify_connected+0x54>)
   15f70:	4810      	ldr	r0, [pc, #64]	; (15fb4 <notify_connected+0x58>)
   15f72:	f44f 62ab 	mov.w	r2, #1368	; 0x558
   15f76:	f00d fd37 	bl	239e8 <assert_print>
   15f7a:	480d      	ldr	r0, [pc, #52]	; (15fb0 <notify_connected+0x54>)
   15f7c:	f44f 61ab 	mov.w	r1, #1368	; 0x558
   15f80:	f00d fd2b 	bl	239da <assert_post_action>
		if (cb->connected) {
   15f84:	682b      	ldr	r3, [r5, #0]
   15f86:	b113      	cbz	r3, 15f8e <notify_connected+0x32>
			cb->connected(conn, conn->err);
   15f88:	7b21      	ldrb	r1, [r4, #12]
   15f8a:	4620      	mov	r0, r4
   15f8c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15f8e:	69ad      	ldr	r5, [r5, #24]
   15f90:	e7e8      	b.n	15f64 <notify_connected+0x8>
		if (cb->connected) {
   15f92:	682b      	ldr	r3, [r5, #0]
   15f94:	b113      	cbz	r3, 15f9c <notify_connected+0x40>
			cb->connected(conn, conn->err);
   15f96:	7b21      	ldrb	r1, [r4, #12]
   15f98:	4620      	mov	r0, r4
   15f9a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15f9c:	351c      	adds	r5, #28
   15f9e:	e7e4      	b.n	15f6a <notify_connected+0xe>
   15fa0:	d3f7      	bcc.n	15f92 <notify_connected+0x36>
		}
	}
}
   15fa2:	bd70      	pop	{r4, r5, r6, pc}
   15fa4:	200020c4 	.word	0x200020c4
   15fa8:	00027400 	.word	0x00027400
   15fac:	0002741c 	.word	0x0002741c
   15fb0:	00029535 	.word	0x00029535
   15fb4:	000280bd 	.word	0x000280bd

00015fb8 <tx_notify>:
{
   15fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   15fbc:	4f15      	ldr	r7, [pc, #84]	; (16014 <tx_notify+0x5c>)
{
   15fbe:	4604      	mov	r4, r0
	tx->cb = NULL;
   15fc0:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   15fc4:	f04f 0240 	mov.w	r2, #64	; 0x40
   15fc8:	f3ef 8311 	mrs	r3, BASEPRI
   15fcc:	f382 8812 	msr	BASEPRI_MAX, r2
   15fd0:	f3bf 8f6f 	isb	sy
	return list->head;
   15fd4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   15fd6:	b929      	cbnz	r1, 15fe4 <tx_notify+0x2c>
	__asm__ volatile(
   15fd8:	f383 8811 	msr	BASEPRI, r3
   15fdc:	f3bf 8f6f 	isb	sy
}
   15fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15fe4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   15fe6:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   15fe8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15fea:	4281      	cmp	r1, r0
	list->tail = node;
   15fec:	bf08      	it	eq
   15fee:	6262      	streq	r2, [r4, #36]	; 0x24
   15ff0:	f383 8811 	msr	BASEPRI, r3
   15ff4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   15ff8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   15ffc:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   16000:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   16004:	4638      	mov	r0, r7
   16006:	f010 fee3 	bl	26dd0 <k_queue_append>
		cb(conn, user_data, 0);
   1600a:	2200      	movs	r2, #0
   1600c:	4631      	mov	r1, r6
   1600e:	4620      	mov	r0, r4
   16010:	47a8      	blx	r5
	while (1) {
   16012:	e7d7      	b.n	15fc4 <tx_notify+0xc>
   16014:	20000944 	.word	0x20000944

00016018 <conn_tx_destroy>:
{
   16018:	b570      	push	{r4, r5, r6, lr}
   1601a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   1601c:	b941      	cbnz	r1, 16030 <conn_tx_destroy+0x18>
   1601e:	490d      	ldr	r1, [pc, #52]	; (16054 <conn_tx_destroy+0x3c>)
   16020:	480d      	ldr	r0, [pc, #52]	; (16058 <conn_tx_destroy+0x40>)
   16022:	2238      	movs	r2, #56	; 0x38
   16024:	f00d fce0 	bl	239e8 <assert_print>
   16028:	480a      	ldr	r0, [pc, #40]	; (16054 <conn_tx_destroy+0x3c>)
   1602a:	2138      	movs	r1, #56	; 0x38
   1602c:	f00d fcd5 	bl	239da <assert_post_action>
	void *user_data = tx->user_data;
   16030:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   16034:	2200      	movs	r2, #0
	tx->user_data = NULL;
   16036:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   1603a:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1603c:	4807      	ldr	r0, [pc, #28]	; (1605c <conn_tx_destroy+0x44>)
   1603e:	f010 fec7 	bl	26dd0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   16042:	4631      	mov	r1, r6
   16044:	4620      	mov	r0, r4
   16046:	462b      	mov	r3, r5
   16048:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   1604c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   16050:	4718      	bx	r3
   16052:	bf00      	nop
   16054:	00029535 	.word	0x00029535
   16058:	000280bd 	.word	0x000280bd
   1605c:	20000944 	.word	0x20000944

00016060 <send_frag>:
{
   16060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16064:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   16066:	694d      	ldr	r5, [r1, #20]
{
   16068:	460e      	mov	r6, r1
   1606a:	4617      	mov	r7, r2
   1606c:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   1606e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16072:	4846      	ldr	r0, [pc, #280]	; (1618c <send_frag+0x12c>)
   16074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16078:	f00a fb64 	bl	20744 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1607c:	7b63      	ldrb	r3, [r4, #13]
   1607e:	2b07      	cmp	r3, #7
   16080:	d178      	bne.n	16174 <send_frag+0x114>
	__asm__ volatile(
   16082:	f04f 0340 	mov.w	r3, #64	; 0x40
   16086:	f3ef 8211 	mrs	r2, BASEPRI
   1608a:	f383 8812 	msr	BASEPRI_MAX, r3
   1608e:	f3bf 8f6f 	isb	sy
	if (tx) {
   16092:	2d00      	cmp	r5, #0
   16094:	d043      	beq.n	1611e <send_frag+0xbe>
	parent->next = child;
   16096:	2300      	movs	r3, #0
   16098:	602b      	str	r3, [r5, #0]
	return list->tail;
   1609a:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1609c:	2b00      	cmp	r3, #0
   1609e:	d13b      	bne.n	16118 <send_frag+0xb8>
	list->head = node;
   160a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   160a4:	f382 8811 	msr	BASEPRI, r2
   160a8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   160ac:	2104      	movs	r1, #4
   160ae:	f106 0008 	add.w	r0, r6, #8
   160b2:	f005 fcfb 	bl	1baac <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   160b6:	8823      	ldrh	r3, [r4, #0]
   160b8:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   160bc:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   160c0:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   160c2:	89b3      	ldrh	r3, [r6, #12]
   160c4:	3b04      	subs	r3, #4
   160c6:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   160c8:	2302      	movs	r3, #2
   160ca:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   160cc:	4630      	mov	r0, r6
   160ce:	f7fe fcad 	bl	14a2c <bt_send>
	if (err) {
   160d2:	4602      	mov	r2, r0
   160d4:	2800      	cmp	r0, #0
   160d6:	d057      	beq.n	16188 <send_frag+0x128>
		BT_ERR("Unable to send to driver (err %d)", err);
   160d8:	482d      	ldr	r0, [pc, #180]	; (16190 <send_frag+0x130>)
   160da:	2145      	movs	r1, #69	; 0x45
   160dc:	f00d fc92 	bl	23a04 <z_log_minimal_printk>
	__asm__ volatile(
   160e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   160e4:	f3ef 8711 	mrs	r7, BASEPRI
   160e8:	f383 8812 	msr	BASEPRI_MAX, r3
   160ec:	f3bf 8f6f 	isb	sy
		if (tx) {
   160f0:	b315      	cbz	r5, 16138 <send_frag+0xd8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   160f2:	4629      	mov	r1, r5
   160f4:	f104 0014 	add.w	r0, r4, #20
   160f8:	f00e fe6f 	bl	24dda <sys_slist_find_and_remove>
	__asm__ volatile(
   160fc:	f387 8811 	msr	BASEPRI, r7
   16100:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   16104:	4821      	ldr	r0, [pc, #132]	; (1618c <send_frag+0x12c>)
   16106:	f00a fae3 	bl	206d0 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1610a:	2300      	movs	r3, #0
   1610c:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   1610e:	4629      	mov	r1, r5
   16110:	4620      	mov	r0, r4
   16112:	f7ff ff81 	bl	16018 <conn_tx_destroy>
   16116:	e027      	b.n	16168 <send_frag+0x108>
	parent->next = child;
   16118:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1611a:	61a5      	str	r5, [r4, #24]
}
   1611c:	e7c2      	b.n	160a4 <send_frag+0x44>
	return list->tail;
   1611e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   16120:	b133      	cbz	r3, 16130 <send_frag+0xd0>
			pending_no_cb = &tail_tx->pending_no_cb;
   16122:	f103 080c 	add.w	r8, r3, #12
   16126:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   16128:	3301      	adds	r3, #1
   1612a:	f8c8 3000 	str.w	r3, [r8]
   1612e:	e7b9      	b.n	160a4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   16130:	69e3      	ldr	r3, [r4, #28]
   16132:	f104 081c 	add.w	r8, r4, #28
   16136:	e7f7      	b.n	16128 <send_frag+0xc8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   16138:	f8d8 2000 	ldr.w	r2, [r8]
   1613c:	b952      	cbnz	r2, 16154 <send_frag+0xf4>
   1613e:	4915      	ldr	r1, [pc, #84]	; (16194 <send_frag+0x134>)
   16140:	4815      	ldr	r0, [pc, #84]	; (16198 <send_frag+0x138>)
   16142:	f240 2229 	movw	r2, #553	; 0x229
   16146:	f00d fc4f 	bl	239e8 <assert_print>
   1614a:	4812      	ldr	r0, [pc, #72]	; (16194 <send_frag+0x134>)
   1614c:	f240 2129 	movw	r1, #553	; 0x229
   16150:	f00d fc43 	bl	239da <assert_post_action>
			(*pending_no_cb)--;
   16154:	3a01      	subs	r2, #1
   16156:	f8c8 2000 	str.w	r2, [r8]
   1615a:	f387 8811 	msr	BASEPRI, r7
   1615e:	f3bf 8f6f 	isb	sy
   16162:	480a      	ldr	r0, [pc, #40]	; (1618c <send_frag+0x12c>)
   16164:	f00a fab4 	bl	206d0 <z_impl_k_sem_give>
	if (always_consume) {
   16168:	f1b9 0f00 	cmp.w	r9, #0
   1616c:	d108      	bne.n	16180 <send_frag+0x120>
	return false;
   1616e:	2000      	movs	r0, #0
}
   16170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16174:	4805      	ldr	r0, [pc, #20]	; (1618c <send_frag+0x12c>)
   16176:	f00a faab 	bl	206d0 <z_impl_k_sem_give>
	if (tx) {
   1617a:	2d00      	cmp	r5, #0
   1617c:	d1c5      	bne.n	1610a <send_frag+0xaa>
   1617e:	e7f3      	b.n	16168 <send_frag+0x108>
		net_buf_unref(buf);
   16180:	4630      	mov	r0, r6
   16182:	f005 fbdd 	bl	1b940 <net_buf_unref>
   16186:	e7f2      	b.n	1616e <send_frag+0x10e>
	return true;
   16188:	2001      	movs	r0, #1
   1618a:	e7f1      	b.n	16170 <send_frag+0x110>
   1618c:	20000480 	.word	0x20000480
   16190:	00028f1f 	.word	0x00028f1f
   16194:	00029535 	.word	0x00029535
   16198:	000280bd 	.word	0x000280bd

0001619c <bt_conn_get_pkts>:
}
   1619c:	4800      	ldr	r0, [pc, #0]	; (161a0 <bt_conn_get_pkts+0x4>)
   1619e:	4770      	bx	lr
   161a0:	20000480 	.word	0x20000480

000161a4 <bt_conn_new>:
{
   161a4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   161a6:	2200      	movs	r2, #0
   161a8:	4604      	mov	r4, r0
   161aa:	428a      	cmp	r2, r1
   161ac:	d102      	bne.n	161b4 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   161ae:	2400      	movs	r4, #0
}
   161b0:	4620      	mov	r0, r4
   161b2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   161b4:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   161b8:	2001      	movs	r0, #1
   161ba:	f3bf 8f5b 	dmb	ish
   161be:	e853 5f00 	ldrex	r5, [r3]
   161c2:	2d00      	cmp	r5, #0
   161c4:	d104      	bne.n	161d0 <bt_conn_new+0x2c>
   161c6:	e843 0c00 	strex	ip, r0, [r3]
   161ca:	f1bc 0f00 	cmp.w	ip, #0
   161ce:	d1f6      	bne.n	161be <bt_conn_new+0x1a>
   161d0:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   161d4:	d002      	beq.n	161dc <bt_conn_new+0x38>
   161d6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   161d8:	4402      	add	r2, r0
   161da:	e7e6      	b.n	161aa <bt_conn_new+0x6>
	if (!conn) {
   161dc:	2c00      	cmp	r4, #0
   161de:	d0e6      	beq.n	161ae <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   161e0:	22c0      	movs	r2, #192	; 0xc0
   161e2:	2100      	movs	r1, #0
   161e4:	4620      	mov	r0, r4
   161e6:	f00e fa8d 	bl	24704 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   161ea:	f104 0060 	add.w	r0, r4, #96	; 0x60
   161ee:	4904      	ldr	r1, [pc, #16]	; (16200 <bt_conn_new+0x5c>)
   161f0:	f00a fe14 	bl	20e1c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   161f4:	4903      	ldr	r1, [pc, #12]	; (16204 <bt_conn_new+0x60>)
   161f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   161fa:	f00a fcf9 	bl	20bf0 <k_work_init>
	return conn;
   161fe:	e7d7      	b.n	161b0 <bt_conn_new+0xc>
   16200:	00016b15 	.word	0x00016b15
   16204:	00024e2f 	.word	0x00024e2f

00016208 <conn_cleanup>:
{
   16208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1620c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1620e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   16210:	f104 0638 	add.w	r6, r4, #56	; 0x38
   16214:	2300      	movs	r3, #0
   16216:	2200      	movs	r2, #0
   16218:	4630      	mov	r0, r6
   1621a:	f005 fa5f 	bl	1b6dc <net_buf_get>
   1621e:	4603      	mov	r3, r0
   16220:	b960      	cbnz	r0, 1623c <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   16222:	6963      	ldr	r3, [r4, #20]
   16224:	b1ab      	cbz	r3, 16252 <conn_cleanup+0x4a>
   16226:	4916      	ldr	r1, [pc, #88]	; (16280 <conn_cleanup+0x78>)
   16228:	4816      	ldr	r0, [pc, #88]	; (16284 <conn_cleanup+0x7c>)
   1622a:	f240 22b6 	movw	r2, #694	; 0x2b6
   1622e:	f00d fbdb 	bl	239e8 <assert_print>
   16232:	f240 21b6 	movw	r1, #694	; 0x2b6
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   16236:	4812      	ldr	r0, [pc, #72]	; (16280 <conn_cleanup+0x78>)
   16238:	f00d fbcf 	bl	239da <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1623c:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   1623e:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   16240:	f005 fb7e 	bl	1b940 <net_buf_unref>
		if (tx) {
   16244:	2d00      	cmp	r5, #0
   16246:	d0e5      	beq.n	16214 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   16248:	4629      	mov	r1, r5
   1624a:	4620      	mov	r0, r4
   1624c:	f7ff fee4 	bl	16018 <conn_tx_destroy>
   16250:	e7de      	b.n	16210 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   16252:	69e3      	ldr	r3, [r4, #28]
   16254:	b143      	cbz	r3, 16268 <conn_cleanup+0x60>
   16256:	490a      	ldr	r1, [pc, #40]	; (16280 <conn_cleanup+0x78>)
   16258:	480a      	ldr	r0, [pc, #40]	; (16284 <conn_cleanup+0x7c>)
   1625a:	f240 22b7 	movw	r2, #695	; 0x2b7
   1625e:	f00d fbc3 	bl	239e8 <assert_print>
   16262:	f240 21b7 	movw	r1, #695	; 0x2b7
   16266:	e7e6      	b.n	16236 <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
   16268:	4620      	mov	r0, r4
   1626a:	f00e fde3 	bl	24e34 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1626e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   16272:	2200      	movs	r2, #0
}
   16274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   16278:	2300      	movs	r3, #0
   1627a:	f00a beb9 	b.w	20ff0 <k_work_reschedule>
   1627e:	bf00      	nop
   16280:	00029535 	.word	0x00029535
   16284:	000280bd 	.word	0x000280bd

00016288 <bt_conn_recv>:
{
   16288:	b570      	push	{r4, r5, r6, lr}
   1628a:	4616      	mov	r6, r2
   1628c:	4604      	mov	r4, r0
   1628e:	460d      	mov	r5, r1
	tx_notify(conn);
   16290:	f7ff fe92 	bl	15fb8 <tx_notify>
	switch (flags) {
   16294:	2e01      	cmp	r6, #1
   16296:	d01f      	beq.n	162d8 <bt_conn_recv+0x50>
   16298:	2e02      	cmp	r6, #2
   1629a:	d149      	bne.n	16330 <bt_conn_recv+0xa8>
		if (conn->rx) {
   1629c:	6923      	ldr	r3, [r4, #16]
   1629e:	b133      	cbz	r3, 162ae <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   162a0:	482b      	ldr	r0, [pc, #172]	; (16350 <bt_conn_recv+0xc8>)
   162a2:	2145      	movs	r1, #69	; 0x45
   162a4:	f00d fbae 	bl	23a04 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   162a8:	4620      	mov	r0, r4
   162aa:	f00e fdc3 	bl	24e34 <bt_conn_reset_rx_state>
		conn->rx = buf;
   162ae:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   162b0:	6921      	ldr	r1, [r4, #16]
   162b2:	898a      	ldrh	r2, [r1, #12]
   162b4:	2a01      	cmp	r2, #1
   162b6:	d949      	bls.n	1634c <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   162b8:	688b      	ldr	r3, [r1, #8]
   162ba:	881b      	ldrh	r3, [r3, #0]
   162bc:	3304      	adds	r3, #4
   162be:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   162c0:	429a      	cmp	r2, r3
   162c2:	d343      	bcc.n	1634c <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   162c4:	d93a      	bls.n	1633c <bt_conn_recv+0xb4>
		BT_ERR("ACL len mismatch (%u > %u)",
   162c6:	4823      	ldr	r0, [pc, #140]	; (16354 <bt_conn_recv+0xcc>)
   162c8:	2145      	movs	r1, #69	; 0x45
   162ca:	f00d fb9b 	bl	23a04 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   162ce:	4620      	mov	r0, r4
}
   162d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   162d4:	f00e bdae 	b.w	24e34 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   162d8:	6920      	ldr	r0, [r4, #16]
   162da:	b938      	cbnz	r0, 162ec <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   162dc:	481e      	ldr	r0, [pc, #120]	; (16358 <bt_conn_recv+0xd0>)
   162de:	2145      	movs	r1, #69	; 0x45
   162e0:	f00d fb90 	bl	23a04 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   162e4:	4620      	mov	r0, r4
   162e6:	f00e fda5 	bl	24e34 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   162ea:	e001      	b.n	162f0 <bt_conn_recv+0x68>
		if (!buf->len) {
   162ec:	89ae      	ldrh	r6, [r5, #12]
   162ee:	b926      	cbnz	r6, 162fa <bt_conn_recv+0x72>
			net_buf_unref(buf);
   162f0:	4628      	mov	r0, r5
}
   162f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   162f6:	f005 bb23 	b.w	1b940 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   162fa:	3008      	adds	r0, #8
   162fc:	f010 f926 	bl	2654c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   16300:	4286      	cmp	r6, r0
   16302:	d90b      	bls.n	1631c <bt_conn_recv+0x94>
			BT_ERR("Not enough buffer space for L2CAP data");
   16304:	4815      	ldr	r0, [pc, #84]	; (1635c <bt_conn_recv+0xd4>)
   16306:	2145      	movs	r1, #69	; 0x45
   16308:	f00d fb7c 	bl	23a04 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   1630c:	6921      	ldr	r1, [r4, #16]
   1630e:	2200      	movs	r2, #0
   16310:	4620      	mov	r0, r4
   16312:	f000 fe43 	bl	16f9c <bt_l2cap_recv>
			conn->rx = NULL;
   16316:	2300      	movs	r3, #0
   16318:	6123      	str	r3, [r4, #16]
   1631a:	e7e9      	b.n	162f0 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1631c:	6920      	ldr	r0, [r4, #16]
   1631e:	89aa      	ldrh	r2, [r5, #12]
   16320:	68a9      	ldr	r1, [r5, #8]
   16322:	3008      	adds	r0, #8
   16324:	f010 f91a 	bl	2655c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   16328:	4628      	mov	r0, r5
   1632a:	f005 fb09 	bl	1b940 <net_buf_unref>
		break;
   1632e:	e7bf      	b.n	162b0 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   16330:	480b      	ldr	r0, [pc, #44]	; (16360 <bt_conn_recv+0xd8>)
   16332:	4632      	mov	r2, r6
   16334:	2145      	movs	r1, #69	; 0x45
   16336:	f00d fb65 	bl	23a04 <z_log_minimal_printk>
   1633a:	e7d3      	b.n	162e4 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   1633c:	2300      	movs	r3, #0
   1633e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16340:	4620      	mov	r0, r4
   16342:	2201      	movs	r2, #1
}
   16344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   16348:	f000 be28 	b.w	16f9c <bt_l2cap_recv>
}
   1634c:	bd70      	pop	{r4, r5, r6, pc}
   1634e:	bf00      	nop
   16350:	00029565 	.word	0x00029565
   16354:	000295f9 	.word	0x000295f9
   16358:	00029587 	.word	0x00029587
   1635c:	000295aa 	.word	0x000295aa
   16360:	000295d6 	.word	0x000295d6

00016364 <bt_conn_send_cb>:
{
   16364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16368:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1636a:	7b43      	ldrb	r3, [r0, #13]
   1636c:	2b07      	cmp	r3, #7
{
   1636e:	4605      	mov	r5, r0
   16370:	460f      	mov	r7, r1
   16372:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   16374:	d006      	beq.n	16384 <bt_conn_send_cb+0x20>
		BT_ERR("not connected!");
   16376:	4820      	ldr	r0, [pc, #128]	; (163f8 <bt_conn_send_cb+0x94>)
   16378:	2145      	movs	r1, #69	; 0x45
   1637a:	f00d fb43 	bl	23a04 <z_log_minimal_printk>
		return -ENOTCONN;
   1637e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16382:	e017      	b.n	163b4 <bt_conn_send_cb+0x50>
	if (cb) {
   16384:	2a00      	cmp	r2, #0
   16386:	d035      	beq.n	163f4 <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   16388:	f00b fdfe 	bl	21f88 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1638c:	4b1b      	ldr	r3, [pc, #108]	; (163fc <bt_conn_send_cb+0x98>)
   1638e:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   16390:	481b      	ldr	r0, [pc, #108]	; (16400 <bt_conn_send_cb+0x9c>)
   16392:	bf07      	ittee	eq
   16394:	2200      	moveq	r2, #0
   16396:	2300      	moveq	r3, #0
   16398:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   1639c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   163a0:	f00a f93e 	bl	20620 <z_impl_k_queue_get>
   163a4:	4604      	mov	r4, r0
		if (!tx) {
   163a6:	b938      	cbnz	r0, 163b8 <bt_conn_send_cb+0x54>
			BT_ERR("Unable to allocate TX context");
   163a8:	4816      	ldr	r0, [pc, #88]	; (16404 <bt_conn_send_cb+0xa0>)
   163aa:	2145      	movs	r1, #69	; 0x45
   163ac:	f00d fb2a 	bl	23a04 <z_log_minimal_printk>
			return -ENOBUFS;
   163b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   163b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   163b8:	7b6b      	ldrb	r3, [r5, #13]
   163ba:	2b07      	cmp	r3, #7
   163bc:	f04f 0800 	mov.w	r8, #0
   163c0:	d00c      	beq.n	163dc <bt_conn_send_cb+0x78>
			BT_WARN("Disconnected while allocating context");
   163c2:	4811      	ldr	r0, [pc, #68]	; (16408 <bt_conn_send_cb+0xa4>)
   163c4:	2157      	movs	r1, #87	; 0x57
   163c6:	f00d fb1d 	bl	23a04 <z_log_minimal_printk>
	tx->user_data = NULL;
   163ca:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   163ce:	480c      	ldr	r0, [pc, #48]	; (16400 <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   163d0:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   163d4:	4621      	mov	r1, r4
   163d6:	f010 fcfb 	bl	26dd0 <k_queue_append>
}
   163da:	e7d0      	b.n	1637e <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   163dc:	e9c0 6901 	strd	r6, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   163e0:	f8c0 800c 	str.w	r8, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   163e4:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   163e8:	617c      	str	r4, [r7, #20]
	net_buf_put(&conn->tx_queue, buf);
   163ea:	4639      	mov	r1, r7
   163ec:	f005 fa7e 	bl	1b8ec <net_buf_put>
	return 0;
   163f0:	2000      	movs	r0, #0
   163f2:	e7df      	b.n	163b4 <bt_conn_send_cb+0x50>
   163f4:	4614      	mov	r4, r2
   163f6:	e7f5      	b.n	163e4 <bt_conn_send_cb+0x80>
   163f8:	00029619 	.word	0x00029619
   163fc:	20001f30 	.word	0x20001f30
   16400:	20000944 	.word	0x20000944
   16404:	0002962d 	.word	0x0002962d
   16408:	00029650 	.word	0x00029650

0001640c <bt_conn_prepare_events>:
{
   1640c:	b570      	push	{r4, r5, r6, lr}
   1640e:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   16410:	4818      	ldr	r0, [pc, #96]	; (16474 <bt_conn_prepare_events+0x68>)
   16412:	f010 fe79 	bl	27108 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16416:	4b17      	ldr	r3, [pc, #92]	; (16474 <bt_conn_prepare_events+0x68>)
   16418:	2200      	movs	r2, #0
   1641a:	2101      	movs	r1, #1
   1641c:	4620      	mov	r0, r4
   1641e:	f00c fb89 	bl	22b34 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16422:	f3bf 8f5b 	dmb	ish
   16426:	4b14      	ldr	r3, [pc, #80]	; (16478 <bt_conn_prepare_events+0x6c>)
   16428:	681a      	ldr	r2, [r3, #0]
   1642a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1642e:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   16432:	b90a      	cbnz	r2, 16438 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16434:	2001      	movs	r0, #1
}
   16436:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16438:	f1a3 05c0 	sub.w	r5, r3, #192	; 0xc0
   1643c:	f813 3cb3 	ldrb.w	r3, [r3, #-179]
   16440:	b953      	cbnz	r3, 16458 <bt_conn_prepare_events+0x4c>
   16442:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16446:	1d28      	adds	r0, r5, #4
   16448:	f00e fce2 	bl	24e10 <atomic_and>
   1644c:	0643      	lsls	r3, r0, #25
   1644e:	d503      	bpl.n	16458 <bt_conn_prepare_events+0x4c>
		conn_cleanup(conn);
   16450:	4628      	mov	r0, r5
   16452:	f7ff fed9 	bl	16208 <conn_cleanup>
		return -ENOTCONN;
   16456:	e7ed      	b.n	16434 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   16458:	7b6b      	ldrb	r3, [r5, #13]
   1645a:	2b07      	cmp	r3, #7
   1645c:	d1ea      	bne.n	16434 <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   1645e:	4b07      	ldr	r3, [pc, #28]	; (1647c <bt_conn_prepare_events+0x70>)
   16460:	4630      	mov	r0, r6
   16462:	2200      	movs	r2, #0
   16464:	2104      	movs	r1, #4
   16466:	f00c fb65 	bl	22b34 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1646a:	2301      	movs	r3, #1
   1646c:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   16470:	2002      	movs	r0, #2
	return ev_count;
   16472:	e7e0      	b.n	16436 <bt_conn_prepare_events+0x2a>
   16474:	20000684 	.word	0x20000684
   16478:	200019f8 	.word	0x200019f8
   1647c:	20001970 	.word	0x20001970

00016480 <bt_conn_ref>:
{
   16480:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   16482:	b950      	cbnz	r0, 1649a <bt_conn_ref+0x1a>
   16484:	4912      	ldr	r1, [pc, #72]	; (164d0 <bt_conn_ref+0x50>)
   16486:	4813      	ldr	r0, [pc, #76]	; (164d4 <bt_conn_ref+0x54>)
   16488:	f44f 628f 	mov.w	r2, #1144	; 0x478
   1648c:	f00d faac 	bl	239e8 <assert_print>
   16490:	480f      	ldr	r0, [pc, #60]	; (164d0 <bt_conn_ref+0x50>)
   16492:	f44f 618f 	mov.w	r1, #1144	; 0x478
   16496:	f00d faa0 	bl	239da <assert_post_action>
   1649a:	f3bf 8f5b 	dmb	ish
   1649e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   164a2:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   164a6:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
		if (!old) {
   164aa:	b17b      	cbz	r3, 164cc <bt_conn_ref+0x4c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   164ac:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   164b0:	1c59      	adds	r1, r3, #1
   164b2:	e852 4f00 	ldrex	r4, [r2]
   164b6:	429c      	cmp	r4, r3
   164b8:	d104      	bne.n	164c4 <bt_conn_ref+0x44>
   164ba:	e842 1c00 	strex	ip, r1, [r2]
   164be:	f1bc 0f00 	cmp.w	ip, #0
   164c2:	d1f6      	bne.n	164b2 <bt_conn_ref+0x32>
   164c4:	f3bf 8f5b 	dmb	ish
   164c8:	d1e7      	bne.n	1649a <bt_conn_ref+0x1a>
}
   164ca:	bd10      	pop	{r4, pc}
			return NULL;
   164cc:	4618      	mov	r0, r3
   164ce:	e7fc      	b.n	164ca <bt_conn_ref+0x4a>
   164d0:	00029535 	.word	0x00029535
   164d4:	000280bd 	.word	0x000280bd

000164d8 <bt_conn_unref>:
{
   164d8:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   164da:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   164de:	f3bf 8f5b 	dmb	ish
   164e2:	e853 2f00 	ldrex	r2, [r3]
   164e6:	1e51      	subs	r1, r2, #1
   164e8:	e843 1400 	strex	r4, r1, [r3]
   164ec:	2c00      	cmp	r4, #0
   164ee:	d1f8      	bne.n	164e2 <bt_conn_unref+0xa>
   164f0:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   164f4:	2a00      	cmp	r2, #0
   164f6:	dc0a      	bgt.n	1650e <bt_conn_unref+0x36>
   164f8:	490d      	ldr	r1, [pc, #52]	; (16530 <bt_conn_unref+0x58>)
   164fa:	480e      	ldr	r0, [pc, #56]	; (16534 <bt_conn_unref+0x5c>)
   164fc:	f240 4295 	movw	r2, #1173	; 0x495
   16500:	f00d fa72 	bl	239e8 <assert_print>
   16504:	480a      	ldr	r0, [pc, #40]	; (16530 <bt_conn_unref+0x58>)
   16506:	f240 4195 	movw	r1, #1173	; 0x495
   1650a:	f00d fa66 	bl	239da <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1650e:	8842      	ldrh	r2, [r0, #2]
   16510:	f240 1301 	movw	r3, #257	; 0x101
   16514:	429a      	cmp	r2, r3
   16516:	d10a      	bne.n	1652e <bt_conn_unref+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16518:	f3bf 8f5b 	dmb	ish
   1651c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   16520:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   16524:	b91b      	cbnz	r3, 1652e <bt_conn_unref+0x56>
}
   16526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1652a:	f7ff bba3 	b.w	15c74 <bt_le_adv_resume>
}
   1652e:	bd10      	pop	{r4, pc}
   16530:	00029535 	.word	0x00029535
   16534:	000280bd 	.word	0x000280bd

00016538 <bt_conn_lookup_handle>:
{
   16538:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1653a:	2101      	movs	r1, #1
   1653c:	4801      	ldr	r0, [pc, #4]	; (16544 <bt_conn_lookup_handle+0xc>)
   1653e:	f00e bc82 	b.w	24e46 <conn_lookup_handle>
   16542:	bf00      	nop
   16544:	20001938 	.word	0x20001938

00016548 <bt_conn_set_state>:
{
   16548:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1654a:	7b46      	ldrb	r6, [r0, #13]
   1654c:	428e      	cmp	r6, r1
{
   1654e:	4604      	mov	r4, r0
   16550:	460d      	mov	r5, r1
	if (conn->state == state) {
   16552:	d10b      	bne.n	1656c <bt_conn_set_state+0x24>
	switch (state) {
   16554:	2e08      	cmp	r6, #8
   16556:	bf96      	itet	ls
   16558:	4b61      	ldrls	r3, [pc, #388]	; (166e0 <bt_conn_set_state+0x198>)
	if (conn->state == state) {
   1655a:	4a62      	ldrhi	r2, [pc, #392]	; (166e4 <bt_conn_set_state+0x19c>)
   1655c:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   16560:	4861      	ldr	r0, [pc, #388]	; (166e8 <bt_conn_set_state+0x1a0>)
   16562:	2157      	movs	r1, #87	; 0x57
}
   16564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   16568:	f00d ba4c 	b.w	23a04 <z_log_minimal_printk>
	conn->state = state;
   1656c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1656e:	b926      	cbnz	r6, 1657a <bt_conn_set_state+0x32>
		if (conn->type != BT_CONN_TYPE_ISO) {
   16570:	7883      	ldrb	r3, [r0, #2]
   16572:	2b08      	cmp	r3, #8
   16574:	d001      	beq.n	1657a <bt_conn_set_state+0x32>
			bt_conn_ref(conn);
   16576:	f7ff ff83 	bl	16480 <bt_conn_ref>
	switch (conn->state) {
   1657a:	7b63      	ldrb	r3, [r4, #13]
   1657c:	2b08      	cmp	r3, #8
   1657e:	f200 80aa 	bhi.w	166d6 <bt_conn_set_state+0x18e>
   16582:	e8df f003 	tbb	[pc, r3]
   16586:	0536      	.short	0x0536
   16588:	8a8a8a8a 	.word	0x8a8a8a8a
   1658c:	1c8a      	.short	0x1c8a
   1658e:	8a          	.byte	0x8a
   1658f:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   16590:	4d56      	ldr	r5, [pc, #344]	; (166ec <bt_conn_set_state+0x1a4>)
		tx->pending_no_cb = 0U;
   16592:	2600      	movs	r6, #0
	__asm__ volatile(
   16594:	f04f 0240 	mov.w	r2, #64	; 0x40
   16598:	f3ef 8311 	mrs	r3, BASEPRI
   1659c:	f382 8812 	msr	BASEPRI_MAX, r2
   165a0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   165a4:	69e2      	ldr	r2, [r4, #28]
   165a6:	2a00      	cmp	r2, #0
   165a8:	d071      	beq.n	1668e <bt_conn_set_state+0x146>
			conn->pending_no_cb--;
   165aa:	3a01      	subs	r2, #1
   165ac:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   165ae:	f383 8811 	msr	BASEPRI, r3
   165b2:	f3bf 8f6f 	isb	sy
   165b6:	4628      	mov	r0, r5
   165b8:	f00a f88a 	bl	206d0 <z_impl_k_sem_give>
}
   165bc:	e7ea      	b.n	16594 <bt_conn_set_state+0x4c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   165be:	78a3      	ldrb	r3, [r4, #2]
   165c0:	2b04      	cmp	r3, #4
   165c2:	d06a      	beq.n	1669a <bt_conn_set_state+0x152>
	z_impl_k_queue_init(queue);
   165c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   165c8:	f010 fbf5 	bl	26db6 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   165cc:	4848      	ldr	r0, [pc, #288]	; (166f0 <bt_conn_set_state+0x1a8>)
   165ce:	2100      	movs	r1, #0
   165d0:	f00c fb8c 	bl	22cec <z_impl_k_poll_signal_raise>
	list->head = NULL;
   165d4:	2300      	movs	r3, #0
	list->tail = NULL;
   165d6:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   165da:	78e3      	ldrb	r3, [r4, #3]
   165dc:	2b01      	cmp	r3, #1
   165de:	d15c      	bne.n	1669a <bt_conn_set_state+0x152>
			k_work_schedule(&conn->deferred_work,
   165e0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   165e4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   165e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   165ec:	2300      	movs	r3, #0
   165ee:	f00a bc9b 	b.w	20f28 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   165f2:	78a3      	ldrb	r3, [r4, #2]
   165f4:	2b04      	cmp	r3, #4
   165f6:	d104      	bne.n	16602 <bt_conn_set_state+0xba>
			bt_conn_unref(conn);
   165f8:	4620      	mov	r0, r4
}
   165fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   165fe:	f7ff bf6b 	b.w	164d8 <bt_conn_unref>
		switch (old_state) {
   16602:	2e08      	cmp	r6, #8
   16604:	d849      	bhi.n	1669a <bt_conn_set_state+0x152>
   16606:	a301      	add	r3, pc, #4	; (adr r3, 1660c <bt_conn_set_state+0xc4>)
   16608:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1660c:	00016687 	.word	0x00016687
   16610:	00016631 	.word	0x00016631
   16614:	00016679 	.word	0x00016679
   16618:	000165f9 	.word	0x000165f9
   1661c:	000165f9 	.word	0x000165f9
   16620:	00016679 	.word	0x00016679
   16624:	00016679 	.word	0x00016679
   16628:	0001669b 	.word	0x0001669b
   1662c:	00016687 	.word	0x00016687
			tx_notify(conn);
   16630:	4620      	mov	r0, r4
   16632:	f7ff fcc1 	bl	15fb8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   16636:	78a3      	ldrb	r3, [r4, #2]
   16638:	2b01      	cmp	r3, #1
   1663a:	d10a      	bne.n	16652 <bt_conn_set_state+0x10a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1663c:	f104 0560 	add.w	r5, r4, #96	; 0x60
   16640:	4628      	mov	r0, r5
   16642:	f010 fc4e 	bl	26ee2 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   16646:	f010 0f0c 	tst.w	r0, #12
   1664a:	d002      	beq.n	16652 <bt_conn_set_state+0x10a>
				k_work_cancel_delayable(&conn->deferred_work);
   1664c:	4628      	mov	r0, r5
   1664e:	f00a fcd5 	bl	20ffc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16652:	f3bf 8f5b 	dmb	ish
   16656:	3404      	adds	r4, #4
   16658:	e854 3f00 	ldrex	r3, [r4]
   1665c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16660:	e844 3200 	strex	r2, r3, [r4]
   16664:	2a00      	cmp	r2, #0
   16666:	d1f7      	bne.n	16658 <bt_conn_set_state+0x110>
   16668:	f3bf 8f5b 	dmb	ish
   1666c:	4820      	ldr	r0, [pc, #128]	; (166f0 <bt_conn_set_state+0x1a8>)
}
   1666e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16672:	2100      	movs	r1, #0
   16674:	f00c bb3a 	b.w	22cec <z_impl_k_poll_signal_raise>
			if (conn->err) {
   16678:	7b23      	ldrb	r3, [r4, #12]
   1667a:	2b00      	cmp	r3, #0
   1667c:	d0bc      	beq.n	165f8 <bt_conn_set_state+0xb0>
				notify_connected(conn);
   1667e:	4620      	mov	r0, r4
   16680:	f7ff fc6c 	bl	15f5c <notify_connected>
   16684:	e7b8      	b.n	165f8 <bt_conn_set_state+0xb0>
			BT_WARN("Invalid (%u) old state", state);
   16686:	481b      	ldr	r0, [pc, #108]	; (166f4 <bt_conn_set_state+0x1ac>)
   16688:	462a      	mov	r2, r5
   1668a:	2157      	movs	r1, #87	; 0x57
   1668c:	e76a      	b.n	16564 <bt_conn_set_state+0x1c>
	return list->head;
   1668e:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   16690:	b921      	cbnz	r1, 1669c <bt_conn_set_state+0x154>
   16692:	f383 8811 	msr	BASEPRI, r3
   16696:	f3bf 8f6f 	isb	sy
}
   1669a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1669c:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1669e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   166a0:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   166a2:	4281      	cmp	r1, r0
	list->tail = node;
   166a4:	bf08      	it	eq
   166a6:	61a2      	streq	r2, [r4, #24]
   166a8:	f383 8811 	msr	BASEPRI, r3
   166ac:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   166b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   166b4:	f3ef 8311 	mrs	r3, BASEPRI
   166b8:	f382 8812 	msr	BASEPRI_MAX, r2
   166bc:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   166c0:	68ca      	ldr	r2, [r1, #12]
   166c2:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   166c4:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   166c6:	f383 8811 	msr	BASEPRI, r3
   166ca:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   166ce:	4620      	mov	r0, r4
   166d0:	f7ff fca2 	bl	16018 <conn_tx_destroy>
   166d4:	e76f      	b.n	165b6 <bt_conn_set_state+0x6e>
		BT_WARN("no valid (%u) state was set", state);
   166d6:	4808      	ldr	r0, [pc, #32]	; (166f8 <bt_conn_set_state+0x1b0>)
   166d8:	462a      	mov	r2, r5
   166da:	2157      	movs	r1, #87	; 0x57
   166dc:	e742      	b.n	16564 <bt_conn_set_state+0x1c>
   166de:	bf00      	nop
   166e0:	00027850 	.word	0x00027850
   166e4:	0002967b 	.word	0x0002967b
   166e8:	00029685 	.word	0x00029685
   166ec:	20000480 	.word	0x20000480
   166f0:	20000684 	.word	0x20000684
   166f4:	0002969b 	.word	0x0002969b
   166f8:	000296b7 	.word	0x000296b7

000166fc <bt_conn_index>:
		index = conn - acl_conns;
   166fc:	4a0a      	ldr	r2, [pc, #40]	; (16728 <bt_conn_index+0x2c>)
   166fe:	490b      	ldr	r1, [pc, #44]	; (1672c <bt_conn_index+0x30>)
{
   16700:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   16702:	1a83      	subs	r3, r0, r2
   16704:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   16706:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   16708:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1670c:	d00a      	beq.n	16724 <bt_conn_index+0x28>
   1670e:	4908      	ldr	r1, [pc, #32]	; (16730 <bt_conn_index+0x34>)
   16710:	4808      	ldr	r0, [pc, #32]	; (16734 <bt_conn_index+0x38>)
   16712:	f240 42b3 	movw	r2, #1203	; 0x4b3
   16716:	f00d f967 	bl	239e8 <assert_print>
   1671a:	4805      	ldr	r0, [pc, #20]	; (16730 <bt_conn_index+0x34>)
   1671c:	f240 41b3 	movw	r1, #1203	; 0x4b3
   16720:	f00d f95b 	bl	239da <assert_post_action>
}
   16724:	b2d8      	uxtb	r0, r3
   16726:	bd08      	pop	{r3, pc}
   16728:	20001938 	.word	0x20001938
   1672c:	c28f5c29 	.word	0xc28f5c29
   16730:	00029535 	.word	0x00029535
   16734:	000280bd 	.word	0x000280bd

00016738 <bt_conn_create_pdu_timeout>:
{
   16738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1673a:	4604      	mov	r4, r0
   1673c:	460d      	mov	r5, r1
   1673e:	4617      	mov	r7, r2
   16740:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   16742:	f010 fb09 	bl	26d58 <k_is_in_isr>
   16746:	b150      	cbz	r0, 1675e <bt_conn_create_pdu_timeout+0x26>
   16748:	4910      	ldr	r1, [pc, #64]	; (1678c <bt_conn_create_pdu_timeout+0x54>)
   1674a:	4811      	ldr	r0, [pc, #68]	; (16790 <bt_conn_create_pdu_timeout+0x58>)
   1674c:	f240 42cf 	movw	r2, #1231	; 0x4cf
   16750:	f00d f94a 	bl	239e8 <assert_print>
   16754:	480d      	ldr	r0, [pc, #52]	; (1678c <bt_conn_create_pdu_timeout+0x54>)
   16756:	f240 41cf 	movw	r1, #1231	; 0x4cf
   1675a:	f00d f93e 	bl	239da <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1675e:	490d      	ldr	r1, [pc, #52]	; (16794 <bt_conn_create_pdu_timeout+0x5c>)
   16760:	463a      	mov	r2, r7
   16762:	2c00      	cmp	r4, #0
   16764:	bf14      	ite	ne
   16766:	4620      	movne	r0, r4
   16768:	4608      	moveq	r0, r1
   1676a:	4633      	mov	r3, r6
   1676c:	f00f fedd 	bl	2652a <net_buf_alloc_fixed>
	if (!buf) {
   16770:	4604      	mov	r4, r0
   16772:	b928      	cbnz	r0, 16780 <bt_conn_create_pdu_timeout+0x48>
		BT_WARN("Unable to allocate buffer within timeout");
   16774:	4808      	ldr	r0, [pc, #32]	; (16798 <bt_conn_create_pdu_timeout+0x60>)
   16776:	2157      	movs	r1, #87	; 0x57
   16778:	f00d f944 	bl	23a04 <z_log_minimal_printk>
}
   1677c:	4620      	mov	r0, r4
   1677e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   16780:	1d29      	adds	r1, r5, #4
   16782:	3008      	adds	r0, #8
   16784:	f004 ffd4 	bl	1b730 <net_buf_simple_reserve>
	return buf;
   16788:	e7f8      	b.n	1677c <bt_conn_create_pdu_timeout+0x44>
   1678a:	bf00      	nop
   1678c:	00029535 	.word	0x00029535
   16790:	000280bd 	.word	0x000280bd
   16794:	20000960 	.word	0x20000960
   16798:	000296d8 	.word	0x000296d8

0001679c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1679e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   167a0:	f3bf 8f5b 	dmb	ish
   167a4:	6863      	ldr	r3, [r4, #4]
   167a6:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   167aa:	05db      	lsls	r3, r3, #23
   167ac:	f100 0004 	add.w	r0, r0, #4
   167b0:	d511      	bpl.n	167d6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   167b2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   167b6:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   167ba:	429a      	cmp	r2, r3
   167bc:	d80b      	bhi.n	167d6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   167be:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   167c2:	429a      	cmp	r2, r3
   167c4:	d307      	bcc.n	167d6 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   167c6:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   167ca:	429a      	cmp	r2, r3
   167cc:	d103      	bne.n	167d6 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   167ce:	f46f 7180 	mvn.w	r1, #256	; 0x100
   167d2:	f00e fb1d 	bl	24e10 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   167d6:	4b16      	ldr	r3, [pc, #88]	; (16830 <notify_le_param_updated+0x94>)
   167d8:	681d      	ldr	r5, [r3, #0]
   167da:	b975      	cbnz	r5, 167fa <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   167dc:	4d15      	ldr	r5, [pc, #84]	; (16834 <notify_le_param_updated+0x98>)
   167de:	4f16      	ldr	r7, [pc, #88]	; (16838 <notify_le_param_updated+0x9c>)
   167e0:	42bd      	cmp	r5, r7
   167e2:	d922      	bls.n	1682a <notify_le_param_updated+0x8e>
   167e4:	4915      	ldr	r1, [pc, #84]	; (1683c <notify_le_param_updated+0xa0>)
   167e6:	4816      	ldr	r0, [pc, #88]	; (16840 <notify_le_param_updated+0xa4>)
   167e8:	f240 52a2 	movw	r2, #1442	; 0x5a2
   167ec:	f00d f8fc 	bl	239e8 <assert_print>
   167f0:	4812      	ldr	r0, [pc, #72]	; (1683c <notify_le_param_updated+0xa0>)
   167f2:	f240 51a2 	movw	r1, #1442	; 0x5a2
   167f6:	f00d f8f0 	bl	239da <assert_post_action>
		if (cb->le_param_updated) {
   167fa:	68ee      	ldr	r6, [r5, #12]
   167fc:	b13e      	cbz	r6, 1680e <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   167fe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   16802:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   16806:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1680a:	4620      	mov	r0, r4
   1680c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1680e:	69ad      	ldr	r5, [r5, #24]
   16810:	e7e3      	b.n	167da <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   16812:	68ee      	ldr	r6, [r5, #12]
   16814:	b13e      	cbz	r6, 16826 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   16816:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1681a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1681e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   16822:	4620      	mov	r0, r4
   16824:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16826:	351c      	adds	r5, #28
   16828:	e7da      	b.n	167e0 <notify_le_param_updated+0x44>
   1682a:	d3f2      	bcc.n	16812 <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1682c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1682e:	bf00      	nop
   16830:	200020c4 	.word	0x200020c4
   16834:	00027400 	.word	0x00027400
   16838:	0002741c 	.word	0x0002741c
   1683c:	00029535 	.word	0x00029535
   16840:	000280bd 	.word	0x000280bd

00016844 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   16844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16848:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1684a:	4608      	mov	r0, r1
{
   1684c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1684e:	f00e f8d5 	bl	249fc <bt_le_conn_params_valid>
   16852:	4605      	mov	r5, r0
   16854:	b918      	cbnz	r0, 1685e <le_param_req+0x1a>
		return false;
   16856:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   16858:	4628      	mov	r0, r5
   1685a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1685e:	4b19      	ldr	r3, [pc, #100]	; (168c4 <le_param_req+0x80>)
   16860:	681e      	ldr	r6, [r3, #0]
   16862:	b97e      	cbnz	r6, 16884 <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16864:	4e18      	ldr	r6, [pc, #96]	; (168c8 <le_param_req+0x84>)
   16866:	f8df 8064 	ldr.w	r8, [pc, #100]	; 168cc <le_param_req+0x88>
   1686a:	4546      	cmp	r6, r8
   1686c:	d923      	bls.n	168b6 <le_param_req+0x72>
   1686e:	4918      	ldr	r1, [pc, #96]	; (168d0 <le_param_req+0x8c>)
   16870:	4818      	ldr	r0, [pc, #96]	; (168d4 <le_param_req+0x90>)
   16872:	f240 52ea 	movw	r2, #1514	; 0x5ea
   16876:	f00d f8b7 	bl	239e8 <assert_print>
   1687a:	4815      	ldr	r0, [pc, #84]	; (168d0 <le_param_req+0x8c>)
   1687c:	f240 51ea 	movw	r1, #1514	; 0x5ea
   16880:	f00d f8ab 	bl	239da <assert_post_action>
		if (!cb->le_param_req) {
   16884:	68b3      	ldr	r3, [r6, #8]
   16886:	b90b      	cbnz	r3, 1688c <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
   16888:	69b6      	ldr	r6, [r6, #24]
   1688a:	e7ea      	b.n	16862 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1688c:	4621      	mov	r1, r4
   1688e:	4638      	mov	r0, r7
   16890:	4798      	blx	r3
   16892:	2800      	cmp	r0, #0
   16894:	d0df      	beq.n	16856 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   16896:	4620      	mov	r0, r4
   16898:	f00e f8b0 	bl	249fc <bt_le_conn_params_valid>
   1689c:	2800      	cmp	r0, #0
   1689e:	d1f3      	bne.n	16888 <le_param_req+0x44>
   168a0:	e7d9      	b.n	16856 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   168a2:	4621      	mov	r1, r4
   168a4:	4638      	mov	r0, r7
   168a6:	4798      	blx	r3
   168a8:	2800      	cmp	r0, #0
   168aa:	d0d4      	beq.n	16856 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   168ac:	4620      	mov	r0, r4
   168ae:	f00e f8a5 	bl	249fc <bt_le_conn_params_valid>
   168b2:	b920      	cbnz	r0, 168be <le_param_req+0x7a>
   168b4:	e7cf      	b.n	16856 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   168b6:	d2cf      	bcs.n	16858 <le_param_req+0x14>
		if (!cb->le_param_req) {
   168b8:	68b3      	ldr	r3, [r6, #8]
   168ba:	2b00      	cmp	r3, #0
   168bc:	d1f1      	bne.n	168a2 <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   168be:	361c      	adds	r6, #28
   168c0:	e7d3      	b.n	1686a <le_param_req+0x26>
   168c2:	bf00      	nop
   168c4:	200020c4 	.word	0x200020c4
   168c8:	00027400 	.word	0x00027400
   168cc:	0002741c 	.word	0x0002741c
   168d0:	00029535 	.word	0x00029535
   168d4:	000280bd 	.word	0x000280bd

000168d8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   168d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   168dc:	78c3      	ldrb	r3, [r0, #3]
{
   168de:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   168e0:	b9bb      	cbnz	r3, 16912 <bt_conn_identity_resolved+0x3a>
		rpa = &conn->le.resp_addr;
   168e2:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   168e6:	4b16      	ldr	r3, [pc, #88]	; (16940 <bt_conn_identity_resolved+0x68>)
   168e8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   168ea:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   168ee:	b99d      	cbnz	r5, 16918 <bt_conn_identity_resolved+0x40>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   168f0:	4d14      	ldr	r5, [pc, #80]	; (16944 <bt_conn_identity_resolved+0x6c>)
   168f2:	4f15      	ldr	r7, [pc, #84]	; (16948 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   168f4:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   168f8:	42bd      	cmp	r5, r7
   168fa:	d91d      	bls.n	16938 <bt_conn_identity_resolved+0x60>
   168fc:	4913      	ldr	r1, [pc, #76]	; (1694c <bt_conn_identity_resolved+0x74>)
   168fe:	4814      	ldr	r0, [pc, #80]	; (16950 <bt_conn_identity_resolved+0x78>)
   16900:	f240 72a7 	movw	r2, #1959	; 0x7a7
   16904:	f00d f870 	bl	239e8 <assert_print>
   16908:	4810      	ldr	r0, [pc, #64]	; (1694c <bt_conn_identity_resolved+0x74>)
   1690a:	f240 71a7 	movw	r1, #1959	; 0x7a7
   1690e:	f00d f864 	bl	239da <assert_post_action>
		rpa = &conn->le.init_addr;
   16912:	f100 0697 	add.w	r6, r0, #151	; 0x97
   16916:	e7e6      	b.n	168e6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   16918:	692b      	ldr	r3, [r5, #16]
   1691a:	b11b      	cbz	r3, 16924 <bt_conn_identity_resolved+0x4c>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1691c:	463a      	mov	r2, r7
   1691e:	4631      	mov	r1, r6
   16920:	4620      	mov	r0, r4
   16922:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16924:	69ad      	ldr	r5, [r5, #24]
   16926:	e7e2      	b.n	168ee <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   16928:	692b      	ldr	r3, [r5, #16]
   1692a:	b11b      	cbz	r3, 16934 <bt_conn_identity_resolved+0x5c>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1692c:	4642      	mov	r2, r8
   1692e:	4631      	mov	r1, r6
   16930:	4620      	mov	r0, r4
   16932:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16934:	351c      	adds	r5, #28
   16936:	e7df      	b.n	168f8 <bt_conn_identity_resolved+0x20>
   16938:	d3f6      	bcc.n	16928 <bt_conn_identity_resolved+0x50>
		}
	}
}
   1693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1693e:	bf00      	nop
   16940:	200020c4 	.word	0x200020c4
   16944:	00027400 	.word	0x00027400
   16948:	0002741c 	.word	0x0002741c
   1694c:	00029535 	.word	0x00029535
   16950:	000280bd 	.word	0x000280bd

00016954 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   16954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   16956:	7a43      	ldrb	r3, [r0, #9]
   16958:	7283      	strb	r3, [r0, #10]
{
   1695a:	4604      	mov	r4, r0
   1695c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1695e:	f00e fb68 	bl	25032 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   16962:	4b12      	ldr	r3, [pc, #72]	; (169ac <bt_conn_security_changed+0x58>)
   16964:	681d      	ldr	r5, [r3, #0]
   16966:	b975      	cbnz	r5, 16986 <bt_conn_security_changed+0x32>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16968:	4d11      	ldr	r5, [pc, #68]	; (169b0 <bt_conn_security_changed+0x5c>)
   1696a:	4f12      	ldr	r7, [pc, #72]	; (169b4 <bt_conn_security_changed+0x60>)
   1696c:	42bd      	cmp	r5, r7
   1696e:	d91a      	bls.n	169a6 <bt_conn_security_changed+0x52>
   16970:	4911      	ldr	r1, [pc, #68]	; (169b8 <bt_conn_security_changed+0x64>)
   16972:	4812      	ldr	r0, [pc, #72]	; (169bc <bt_conn_security_changed+0x68>)
   16974:	f640 0213 	movw	r2, #2067	; 0x813
   16978:	f00d f836 	bl	239e8 <assert_print>
   1697c:	480e      	ldr	r0, [pc, #56]	; (169b8 <bt_conn_security_changed+0x64>)
   1697e:	f640 0113 	movw	r1, #2067	; 0x813
   16982:	f00d f82a 	bl	239da <assert_post_action>
		if (cb->security_changed) {
   16986:	696b      	ldr	r3, [r5, #20]
   16988:	b11b      	cbz	r3, 16992 <bt_conn_security_changed+0x3e>
			cb->security_changed(conn, conn->sec_level, err);
   1698a:	7a61      	ldrb	r1, [r4, #9]
   1698c:	4632      	mov	r2, r6
   1698e:	4620      	mov	r0, r4
   16990:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16992:	69ad      	ldr	r5, [r5, #24]
   16994:	e7e7      	b.n	16966 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   16996:	696b      	ldr	r3, [r5, #20]
   16998:	b11b      	cbz	r3, 169a2 <bt_conn_security_changed+0x4e>
			cb->security_changed(conn, conn->sec_level, err);
   1699a:	7a61      	ldrb	r1, [r4, #9]
   1699c:	4632      	mov	r2, r6
   1699e:	4620      	mov	r0, r4
   169a0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   169a2:	351c      	adds	r5, #28
   169a4:	e7e2      	b.n	1696c <bt_conn_security_changed+0x18>
   169a6:	d3f6      	bcc.n	16996 <bt_conn_security_changed+0x42>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   169a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   169aa:	bf00      	nop
   169ac:	200020c4 	.word	0x200020c4
   169b0:	00027400 	.word	0x00027400
   169b4:	0002741c 	.word	0x0002741c
   169b8:	00029535 	.word	0x00029535
   169bc:	000280bd 	.word	0x000280bd

000169c0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   169c0:	b570      	push	{r4, r5, r6, lr}
   169c2:	4606      	mov	r6, r0
   169c4:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   169c6:	480a      	ldr	r0, [pc, #40]	; (169f0 <bt_conn_add_le+0x30>)
   169c8:	2101      	movs	r1, #1
   169ca:	f7ff fbeb 	bl	161a4 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   169ce:	4604      	mov	r4, r0
   169d0:	b160      	cbz	r0, 169ec <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   169d2:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   169d4:	2207      	movs	r2, #7
   169d6:	4629      	mov	r1, r5
   169d8:	3090      	adds	r0, #144	; 0x90
   169da:	f00d fe88 	bl	246ee <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   169de:	2301      	movs	r3, #1
   169e0:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   169e2:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   169e4:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   169e6:	4b03      	ldr	r3, [pc, #12]	; (169f4 <bt_conn_add_le+0x34>)
   169e8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   169ec:	4620      	mov	r0, r4
   169ee:	bd70      	pop	{r4, r5, r6, pc}
   169f0:	20001938 	.word	0x20001938
   169f4:	00280018 	.word	0x00280018

000169f8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   169f8:	b570      	push	{r4, r5, r6, lr}
   169fa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   169fc:	480a      	ldr	r0, [pc, #40]	; (16a28 <bt_conn_lookup_addr_le+0x30>)
{
   169fe:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16a00:	f7ff fd3e 	bl	16480 <bt_conn_ref>
   16a04:	4604      	mov	r4, r0

		if (!conn) {
   16a06:	b120      	cbz	r0, 16a12 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16a08:	7883      	ldrb	r3, [r0, #2]
   16a0a:	2b01      	cmp	r3, #1
   16a0c:	d004      	beq.n	16a18 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   16a0e:	f7ff fd63 	bl	164d8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   16a12:	2400      	movs	r4, #0
}
   16a14:	4620      	mov	r0, r4
   16a16:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   16a18:	4632      	mov	r2, r6
   16a1a:	4629      	mov	r1, r5
   16a1c:	f00e fa90 	bl	24f40 <bt_conn_is_peer_addr_le>
   16a20:	2800      	cmp	r0, #0
   16a22:	d1f7      	bne.n	16a14 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   16a24:	4620      	mov	r0, r4
   16a26:	e7f2      	b.n	16a0e <bt_conn_lookup_addr_le+0x16>
   16a28:	20001938 	.word	0x20001938

00016a2c <bt_conn_exists_le>:
{
   16a2c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   16a2e:	f7ff ffe3 	bl	169f8 <bt_conn_lookup_addr_le>
	if (conn) {
   16a32:	4604      	mov	r4, r0
   16a34:	b170      	cbz	r0, 16a54 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   16a36:	7b43      	ldrb	r3, [r0, #13]
   16a38:	4807      	ldr	r0, [pc, #28]	; (16a58 <bt_conn_exists_le+0x2c>)
   16a3a:	2b08      	cmp	r3, #8
   16a3c:	bf96      	itet	ls
   16a3e:	4a07      	ldrls	r2, [pc, #28]	; (16a5c <bt_conn_exists_le+0x30>)
   16a40:	4a07      	ldrhi	r2, [pc, #28]	; (16a60 <bt_conn_exists_le+0x34>)
   16a42:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   16a46:	2157      	movs	r1, #87	; 0x57
   16a48:	f00c ffdc 	bl	23a04 <z_log_minimal_printk>
		bt_conn_unref(conn);
   16a4c:	4620      	mov	r0, r4
   16a4e:	f7ff fd43 	bl	164d8 <bt_conn_unref>
		return true;
   16a52:	2001      	movs	r0, #1
}
   16a54:	bd10      	pop	{r4, pc}
   16a56:	bf00      	nop
   16a58:	00029706 	.word	0x00029706
   16a5c:	00027850 	.word	0x00027850
   16a60:	0002967b 	.word	0x0002967b

00016a64 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a66:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16a68:	480e      	ldr	r0, [pc, #56]	; (16aa4 <bt_conn_lookup_state_le+0x40>)
{
   16a6a:	460e      	mov	r6, r1
   16a6c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16a6e:	f7ff fd07 	bl	16480 <bt_conn_ref>

		if (!conn) {
   16a72:	4604      	mov	r4, r0
   16a74:	b120      	cbz	r0, 16a80 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16a76:	7883      	ldrb	r3, [r0, #2]
   16a78:	2b01      	cmp	r3, #1
   16a7a:	d003      	beq.n	16a84 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   16a7c:	f7ff fd2c 	bl	164d8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   16a80:	2400      	movs	r4, #0
   16a82:	e00d      	b.n	16aa0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   16a84:	b136      	cbz	r6, 16a94 <bt_conn_lookup_state_le+0x30>
   16a86:	4632      	mov	r2, r6
   16a88:	4629      	mov	r1, r5
   16a8a:	f00e fa59 	bl	24f40 <bt_conn_is_peer_addr_le>
   16a8e:	b908      	cbnz	r0, 16a94 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   16a90:	4620      	mov	r0, r4
   16a92:	e7f3      	b.n	16a7c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   16a94:	7b63      	ldrb	r3, [r4, #13]
   16a96:	42bb      	cmp	r3, r7
   16a98:	d1fa      	bne.n	16a90 <bt_conn_lookup_state_le+0x2c>
   16a9a:	7a23      	ldrb	r3, [r4, #8]
   16a9c:	42ab      	cmp	r3, r5
   16a9e:	d1f7      	bne.n	16a90 <bt_conn_lookup_state_le+0x2c>
}
   16aa0:	4620      	mov	r0, r4
   16aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16aa4:	20001938 	.word	0x20001938

00016aa8 <send_conn_le_param_update>:
{
   16aa8:	b538      	push	{r3, r4, r5, lr}
   16aaa:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   16aac:	4608      	mov	r0, r1
{
   16aae:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   16ab0:	f00d ffa4 	bl	249fc <bt_le_conn_params_valid>
   16ab4:	b348      	cbz	r0, 16b0a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16ab6:	4b16      	ldr	r3, [pc, #88]	; (16b10 <send_conn_le_param_update+0x68>)
   16ab8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   16abc:	0799      	lsls	r1, r3, #30
   16abe:	d407      	bmi.n	16ad0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   16ac0:	78e3      	ldrb	r3, [r4, #3]
   16ac2:	b183      	cbz	r3, 16ae6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   16ac4:	4629      	mov	r1, r5
   16ac6:	4620      	mov	r0, r4
}
   16ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   16acc:	f000 ba8e 	b.w	16fec <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16ad0:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   16ad4:	079a      	lsls	r2, r3, #30
   16ad6:	d5f3      	bpl.n	16ac0 <send_conn_le_param_update+0x18>
   16ad8:	f3bf 8f5b 	dmb	ish
   16adc:	6863      	ldr	r3, [r4, #4]
   16ade:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   16ae2:	059b      	lsls	r3, r3, #22
   16ae4:	d4ec      	bmi.n	16ac0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   16ae6:	4629      	mov	r1, r5
   16ae8:	4620      	mov	r0, r4
   16aea:	f00e fa4b 	bl	24f84 <bt_conn_le_conn_update>
		if (rc == 0) {
   16aee:	b958      	cbnz	r0, 16b08 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   16af0:	882b      	ldrh	r3, [r5, #0]
   16af2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   16af6:	886b      	ldrh	r3, [r5, #2]
   16af8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   16afc:	88ab      	ldrh	r3, [r5, #4]
   16afe:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   16b02:	88eb      	ldrh	r3, [r5, #6]
   16b04:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   16b08:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16b0a:	f06f 0015 	mvn.w	r0, #21
   16b0e:	e7fb      	b.n	16b08 <send_conn_le_param_update+0x60>
   16b10:	20000380 	.word	0x20000380

00016b14 <deferred_work>:
{
   16b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   16b16:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   16b1a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   16b1c:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   16b20:	bb5b      	cbnz	r3, 16b7a <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
   16b22:	4628      	mov	r0, r5
   16b24:	f00e fa6d 	bl	25002 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   16b28:	4b28      	ldr	r3, [pc, #160]	; (16bcc <deferred_work+0xb8>)
   16b2a:	681e      	ldr	r6, [r3, #0]
   16b2c:	b976      	cbnz	r6, 16b4c <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b2e:	4e28      	ldr	r6, [pc, #160]	; (16bd0 <deferred_work+0xbc>)
   16b30:	4f28      	ldr	r7, [pc, #160]	; (16bd4 <deferred_work+0xc0>)
   16b32:	42be      	cmp	r6, r7
   16b34:	d91a      	bls.n	16b6c <deferred_work+0x58>
   16b36:	4928      	ldr	r1, [pc, #160]	; (16bd8 <deferred_work+0xc4>)
   16b38:	4828      	ldr	r0, [pc, #160]	; (16bdc <deferred_work+0xc8>)
   16b3a:	f240 5269 	movw	r2, #1385	; 0x569
   16b3e:	f00c ff53 	bl	239e8 <assert_print>
   16b42:	4825      	ldr	r0, [pc, #148]	; (16bd8 <deferred_work+0xc4>)
   16b44:	f240 5169 	movw	r1, #1385	; 0x569
   16b48:	f00c ff47 	bl	239da <assert_post_action>
		if (cb->disconnected) {
   16b4c:	6873      	ldr	r3, [r6, #4]
   16b4e:	b11b      	cbz	r3, 16b58 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   16b50:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   16b54:	4628      	mov	r0, r5
   16b56:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16b58:	69b6      	ldr	r6, [r6, #24]
   16b5a:	e7e7      	b.n	16b2c <deferred_work+0x18>
		if (cb->disconnected) {
   16b5c:	6873      	ldr	r3, [r6, #4]
   16b5e:	b11b      	cbz	r3, 16b68 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   16b60:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   16b64:	4628      	mov	r0, r5
   16b66:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b68:	361c      	adds	r6, #28
   16b6a:	e7e2      	b.n	16b32 <deferred_work+0x1e>
   16b6c:	d3f6      	bcc.n	16b5c <deferred_work+0x48>
		bt_conn_unref(conn);
   16b6e:	4628      	mov	r0, r5
}
   16b70:	b003      	add	sp, #12
   16b72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   16b76:	f7ff bcaf 	b.w	164d8 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   16b7a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   16b7e:	2b01      	cmp	r3, #1
   16b80:	d11c      	bne.n	16bbc <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   16b82:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16b86:	f46f 7180 	mvn.w	r1, #256	; 0x100
   16b8a:	4630      	mov	r0, r6
   16b8c:	f00e f940 	bl	24e10 <atomic_and>
   16b90:	05c3      	lsls	r3, r0, #23
   16b92:	d515      	bpl.n	16bc0 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16b94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16b96:	9300      	str	r3, [sp, #0]
   16b98:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16b9a:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   16b9c:	4669      	mov	r1, sp
   16b9e:	4628      	mov	r0, r5
   16ba0:	f7ff ff82 	bl	16aa8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16ba4:	f3bf 8f5b 	dmb	ish
   16ba8:	e856 3f00 	ldrex	r3, [r6]
   16bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16bb0:	e846 3200 	strex	r2, r3, [r6]
   16bb4:	2a00      	cmp	r2, #0
   16bb6:	d1f7      	bne.n	16ba8 <deferred_work+0x94>
   16bb8:	f3bf 8f5b 	dmb	ish
}
   16bbc:	b003      	add	sp, #12
   16bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   16bc0:	4a07      	ldr	r2, [pc, #28]	; (16be0 <deferred_work+0xcc>)
   16bc2:	6810      	ldr	r0, [r2, #0]
   16bc4:	6851      	ldr	r1, [r2, #4]
   16bc6:	466b      	mov	r3, sp
   16bc8:	c303      	stmia	r3!, {r0, r1}
   16bca:	e7e7      	b.n	16b9c <deferred_work+0x88>
   16bcc:	200020c4 	.word	0x200020c4
   16bd0:	00027400 	.word	0x00027400
   16bd4:	0002741c 	.word	0x0002741c
   16bd8:	00029535 	.word	0x00029535
   16bdc:	000280bd 	.word	0x000280bd
   16be0:	0002760c 	.word	0x0002760c

00016be4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   16be4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   16be6:	4801      	ldr	r0, [pc, #4]	; (16bec <bt_conn_create_frag_timeout+0x8>)
   16be8:	f7ff bda6 	b.w	16738 <bt_conn_create_pdu_timeout>
   16bec:	200009c8 	.word	0x200009c8

00016bf0 <create_frag>:
{
   16bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16bf4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   16bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16bfe:	2000      	movs	r0, #0
{
   16c00:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   16c02:	f7ff ffef 	bl	16be4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   16c06:	7b73      	ldrb	r3, [r6, #13]
   16c08:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   16c0a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16c0c:	f04f 0600 	mov.w	r6, #0
   16c10:	d005      	beq.n	16c1e <create_frag+0x2e>
		net_buf_unref(frag);
   16c12:	f004 fe95 	bl	1b940 <net_buf_unref>
		return NULL;
   16c16:	4635      	mov	r5, r6
}
   16c18:	4628      	mov	r0, r5
   16c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   16c1e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   16c20:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   16c24:	4e0c      	ldr	r6, [pc, #48]	; (16c58 <create_frag+0x68>)
   16c26:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16c28:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   16c2c:	f00f fc8e 	bl	2654c <net_buf_simple_tailroom>
   16c30:	4580      	cmp	r8, r0
   16c32:	d20c      	bcs.n	16c4e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   16c34:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16c38:	f854 1f08 	ldr.w	r1, [r4, #8]!
   16c3c:	4632      	mov	r2, r6
   16c3e:	4638      	mov	r0, r7
   16c40:	f00f fc8c 	bl	2655c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16c44:	4631      	mov	r1, r6
   16c46:	4620      	mov	r0, r4
   16c48:	f004 ff4c 	bl	1bae4 <net_buf_simple_pull>
   16c4c:	e7e4      	b.n	16c18 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   16c4e:	4638      	mov	r0, r7
   16c50:	f00f fc7c 	bl	2654c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16c54:	b286      	uxth	r6, r0
   16c56:	e7ef      	b.n	16c38 <create_frag+0x48>
   16c58:	20000380 	.word	0x20000380

00016c5c <bt_conn_process_tx>:
{
   16c5c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16c5e:	7b43      	ldrb	r3, [r0, #13]
{
   16c60:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   16c62:	b95b      	cbnz	r3, 16c7c <bt_conn_process_tx+0x20>
   16c64:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16c68:	3004      	adds	r0, #4
   16c6a:	f00e f8d1 	bl	24e10 <atomic_and>
   16c6e:	0643      	lsls	r3, r0, #25
   16c70:	d504      	bpl.n	16c7c <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   16c72:	4620      	mov	r0, r4
}
   16c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   16c78:	f7ff bac6 	b.w	16208 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16c7c:	2200      	movs	r2, #0
   16c7e:	2300      	movs	r3, #0
   16c80:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16c84:	f004 fd2a 	bl	1b6dc <net_buf_get>
	BT_ASSERT(buf);
   16c88:	4605      	mov	r5, r0
   16c8a:	b958      	cbnz	r0, 16ca4 <bt_conn_process_tx+0x48>
   16c8c:	4923      	ldr	r1, [pc, #140]	; (16d1c <bt_conn_process_tx+0xc0>)
   16c8e:	4824      	ldr	r0, [pc, #144]	; (16d20 <bt_conn_process_tx+0xc4>)
   16c90:	f44f 7247 	mov.w	r2, #796	; 0x31c
   16c94:	f00c fea8 	bl	239e8 <assert_print>
   16c98:	4040      	eors	r0, r0
   16c9a:	f380 8811 	msr	BASEPRI, r0
   16c9e:	f04f 0003 	mov.w	r0, #3
   16ca2:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   16ca4:	4e1f      	ldr	r6, [pc, #124]	; (16d24 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   16ca6:	89aa      	ldrh	r2, [r5, #12]
   16ca8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   16cac:	429a      	cmp	r2, r3
   16cae:	d807      	bhi.n	16cc0 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   16cb0:	2300      	movs	r3, #0
   16cb2:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   16cb4:	4629      	mov	r1, r5
   16cb6:	4620      	mov	r0, r4
   16cb8:	f7ff f9d2 	bl	16060 <send_frag>
	if (!send_buf(conn, buf)) {
   16cbc:	b968      	cbnz	r0, 16cda <bt_conn_process_tx+0x7e>
   16cbe:	e005      	b.n	16ccc <bt_conn_process_tx+0x70>
	frag = create_frag(conn, buf);
   16cc0:	4629      	mov	r1, r5
   16cc2:	4620      	mov	r0, r4
   16cc4:	f7ff ff94 	bl	16bf0 <create_frag>
	if (!frag) {
   16cc8:	4601      	mov	r1, r0
   16cca:	b938      	cbnz	r0, 16cdc <bt_conn_process_tx+0x80>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   16ccc:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   16cce:	2300      	movs	r3, #0
   16cd0:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   16cd2:	4628      	mov	r0, r5
   16cd4:	f004 fe34 	bl	1b940 <net_buf_unref>
		if (tx) {
   16cd8:	b9ce      	cbnz	r6, 16d0e <bt_conn_process_tx+0xb2>
}
   16cda:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   16cdc:	2301      	movs	r3, #1
   16cde:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16ce0:	4620      	mov	r0, r4
   16ce2:	f7ff f9bd 	bl	16060 <send_frag>
   16ce6:	2800      	cmp	r0, #0
   16ce8:	d0f0      	beq.n	16ccc <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   16cea:	89aa      	ldrh	r2, [r5, #12]
   16cec:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   16cf0:	429a      	cmp	r2, r3
   16cf2:	d802      	bhi.n	16cfa <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   16cf4:	2300      	movs	r3, #0
   16cf6:	2203      	movs	r2, #3
   16cf8:	e7dc      	b.n	16cb4 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   16cfa:	4629      	mov	r1, r5
   16cfc:	4620      	mov	r0, r4
   16cfe:	f7ff ff77 	bl	16bf0 <create_frag>
		if (!frag) {
   16d02:	4601      	mov	r1, r0
   16d04:	2800      	cmp	r0, #0
   16d06:	d0e1      	beq.n	16ccc <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16d08:	2301      	movs	r3, #1
   16d0a:	461a      	mov	r2, r3
   16d0c:	e7e8      	b.n	16ce0 <bt_conn_process_tx+0x84>
			conn_tx_destroy(conn, tx);
   16d0e:	4631      	mov	r1, r6
   16d10:	4620      	mov	r0, r4
}
   16d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   16d16:	f7ff b97f 	b.w	16018 <conn_tx_destroy>
   16d1a:	bf00      	nop
   16d1c:	00029535 	.word	0x00029535
   16d20:	000280bd 	.word	0x000280bd
   16d24:	20000380 	.word	0x20000380

00016d28 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   16d28:	4b0b      	ldr	r3, [pc, #44]	; (16d58 <bt_conn_auth_cb_register+0x30>)
   16d2a:	b158      	cbz	r0, 16d44 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   16d2c:	681a      	ldr	r2, [r3, #0]
   16d2e:	b962      	cbnz	r2, 16d4a <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   16d30:	6902      	ldr	r2, [r0, #16]
   16d32:	b93a      	cbnz	r2, 16d44 <bt_conn_auth_cb_register+0x1c>
   16d34:	6802      	ldr	r2, [r0, #0]
   16d36:	b95a      	cbnz	r2, 16d50 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   16d38:	6842      	ldr	r2, [r0, #4]
   16d3a:	b94a      	cbnz	r2, 16d50 <bt_conn_auth_cb_register+0x28>
   16d3c:	6882      	ldr	r2, [r0, #8]
   16d3e:	b93a      	cbnz	r2, 16d50 <bt_conn_auth_cb_register+0x28>
   16d40:	6942      	ldr	r2, [r0, #20]
   16d42:	b92a      	cbnz	r2, 16d50 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   16d44:	6018      	str	r0, [r3, #0]
		return 0;
   16d46:	2000      	movs	r0, #0
   16d48:	4770      	bx	lr
		return -EALREADY;
   16d4a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16d4e:	4770      	bx	lr
		return -EINVAL;
   16d50:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   16d54:	4770      	bx	lr
   16d56:	bf00      	nop
   16d58:	200020d0 	.word	0x200020d0

00016d5c <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   16d5c:	b168      	cbz	r0, 16d7a <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   16d5e:	2300      	movs	r3, #0
   16d60:	60c3      	str	r3, [r0, #12]
	return list->tail;
   16d62:	4b07      	ldr	r3, [pc, #28]	; (16d80 <bt_conn_auth_info_cb_register+0x24>)
   16d64:	6859      	ldr	r1, [r3, #4]
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   16d66:	f100 020c 	add.w	r2, r0, #12
Z_GENLIST_APPEND(slist, snode)
   16d6a:	b919      	cbnz	r1, 16d74 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   16d6c:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   16d70:	2000      	movs	r0, #0
   16d72:	4770      	bx	lr
	parent->next = child;
   16d74:	600a      	str	r2, [r1, #0]
	list->tail = node;
   16d76:	605a      	str	r2, [r3, #4]
}
   16d78:	e7fa      	b.n	16d70 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   16d7a:	f06f 0015 	mvn.w	r0, #21
}
   16d7e:	4770      	bx	lr
   16d80:	200020c8 	.word	0x200020c8

00016d84 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16d84:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   16d86:	480c      	ldr	r0, [pc, #48]	; (16db8 <bt_conn_init+0x34>)
   16d88:	f010 f815 	bl	26db6 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   16d8c:	490b      	ldr	r1, [pc, #44]	; (16dbc <bt_conn_init+0x38>)
   16d8e:	480a      	ldr	r0, [pc, #40]	; (16db8 <bt_conn_init+0x34>)
   16d90:	f010 f81e 	bl	26dd0 <k_queue_append>
   16d94:	490a      	ldr	r1, [pc, #40]	; (16dc0 <bt_conn_init+0x3c>)
   16d96:	4808      	ldr	r0, [pc, #32]	; (16db8 <bt_conn_init+0x34>)
   16d98:	f010 f81a 	bl	26dd0 <k_queue_append>
   16d9c:	4909      	ldr	r1, [pc, #36]	; (16dc4 <bt_conn_init+0x40>)
   16d9e:	4806      	ldr	r0, [pc, #24]	; (16db8 <bt_conn_init+0x34>)
   16da0:	f010 f816 	bl	26dd0 <k_queue_append>
	}

	bt_att_init();
   16da4:	f001 f826 	bl	17df4 <bt_att_init>

	err = bt_smp_init();
   16da8:	f004 f940 	bl	1b02c <bt_smp_init>
	if (err) {
   16dac:	4604      	mov	r4, r0
   16dae:	b908      	cbnz	r0, 16db4 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   16db0:	f00e f98c 	bl	250cc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   16db4:	4620      	mov	r0, r4
   16db6:	bd10      	pop	{r4, pc}
   16db8:	20000944 	.word	0x20000944
   16dbc:	20002094 	.word	0x20002094
   16dc0:	200020a4 	.word	0x200020a4
   16dc4:	200020b4 	.word	0x200020b4

00016dc8 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   16dc8:	b508      	push	{r3, lr}
   16dca:	4602      	mov	r2, r0
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   16dcc:	4807      	ldr	r0, [pc, #28]	; (16dec <l2cap_accept+0x24>)
   16dce:	6803      	ldr	r3, [r0, #0]
   16dd0:	b923      	cbnz	r3, 16ddc <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   16dd2:	4a07      	ldr	r2, [pc, #28]	; (16df0 <l2cap_accept+0x28>)
   16dd4:	6042      	str	r2, [r0, #4]
		*chan = &l2cap->chan.chan;
   16dd6:	6008      	str	r0, [r1, #0]

		return 0;
   16dd8:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   16dda:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   16ddc:	4805      	ldr	r0, [pc, #20]	; (16df4 <l2cap_accept+0x2c>)
   16dde:	2145      	movs	r1, #69	; 0x45
   16de0:	f00c fe10 	bl	23a04 <z_log_minimal_printk>
   16de4:	f06f 000b 	mvn.w	r0, #11
   16de8:	e7f7      	b.n	16dda <l2cap_accept+0x12>
   16dea:	bf00      	nop
   16dec:	200020d4 	.word	0x200020d4
   16df0:	00027894 	.word	0x00027894
   16df4:	000297a7 	.word	0x000297a7

00016df8 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   16df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16dfa:	4605      	mov	r5, r0
   16dfc:	460f      	mov	r7, r1
   16dfe:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   16e00:	2300      	movs	r3, #0
   16e02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16e06:	2104      	movs	r1, #4
   16e08:	2000      	movs	r0, #0
   16e0a:	f7ff fc95 	bl	16738 <bt_conn_create_pdu_timeout>
	if (!buf) {
   16e0e:	4604      	mov	r4, r0
   16e10:	b930      	cbnz	r0, 16e20 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   16e12:	4807      	ldr	r0, [pc, #28]	; (16e30 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   16e14:	462a      	mov	r2, r5
   16e16:	2145      	movs	r1, #69	; 0x45
   16e18:	f00c fdf4 	bl	23a04 <z_log_minimal_printk>
}
   16e1c:	4620      	mov	r0, r4
   16e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   16e20:	2104      	movs	r1, #4
   16e22:	3008      	adds	r0, #8
   16e24:	f004 fe92 	bl	1bb4c <net_buf_simple_add>
	hdr->code = code;
   16e28:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   16e2a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   16e2c:	8046      	strh	r6, [r0, #2]
	return buf;
   16e2e:	e7f5      	b.n	16e1c <l2cap_create_le_sig_pdu.constprop.0+0x24>
   16e30:	000297d3 	.word	0x000297d3

00016e34 <bt_l2cap_connected>:
{
   16e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16e36:	4d2a      	ldr	r5, [pc, #168]	; (16ee0 <bt_l2cap_connected+0xac>)
   16e38:	4f2a      	ldr	r7, [pc, #168]	; (16ee4 <bt_l2cap_connected+0xb0>)
{
   16e3a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16e3c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16e3e:	42bd      	cmp	r5, r7
   16e40:	d94a      	bls.n	16ed8 <bt_l2cap_connected+0xa4>
   16e42:	4929      	ldr	r1, [pc, #164]	; (16ee8 <bt_l2cap_connected+0xb4>)
   16e44:	4829      	ldr	r0, [pc, #164]	; (16eec <bt_l2cap_connected+0xb8>)
   16e46:	f240 1281 	movw	r2, #385	; 0x181
   16e4a:	f00c fdcd 	bl	239e8 <assert_print>
   16e4e:	4826      	ldr	r0, [pc, #152]	; (16ee8 <bt_l2cap_connected+0xb4>)
   16e50:	f240 1181 	movw	r1, #385	; 0x181
   16e54:	f00c fdc1 	bl	239da <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   16e58:	686b      	ldr	r3, [r5, #4]
   16e5a:	a901      	add	r1, sp, #4
   16e5c:	4620      	mov	r0, r4
   16e5e:	4798      	blx	r3
   16e60:	2800      	cmp	r0, #0
   16e62:	db34      	blt.n	16ece <bt_l2cap_connected+0x9a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   16e64:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   16e66:	882a      	ldrh	r2, [r5, #0]
   16e68:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   16e6a:	849a      	strh	r2, [r3, #36]	; 0x24
   16e6c:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   16e70:	68a8      	ldr	r0, [r5, #8]
   16e72:	f3bf 8f5b 	dmb	ish
   16e76:	e852 1f00 	ldrex	r1, [r2]
   16e7a:	e842 6c00 	strex	ip, r6, [r2]
   16e7e:	f1bc 0f00 	cmp.w	ip, #0
   16e82:	d1f8      	bne.n	16e76 <bt_l2cap_connected+0x42>
   16e84:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   16e88:	609e      	str	r6, [r3, #8]
	return list->tail;
   16e8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   16e8c:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   16e90:	b9f9      	cbnz	r1, 16ed2 <bt_l2cap_connected+0x9e>
	list->head = node;
   16e92:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   16e96:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   16e98:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   16e9a:	9801      	ldr	r0, [sp, #4]
   16e9c:	6843      	ldr	r3, [r0, #4]
   16e9e:	681b      	ldr	r3, [r3, #0]
   16ea0:	b103      	cbz	r3, 16ea4 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   16ea2:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16ea4:	9b01      	ldr	r3, [sp, #4]
   16ea6:	f3bf 8f5b 	dmb	ish
   16eaa:	3310      	adds	r3, #16
   16eac:	e853 1f00 	ldrex	r1, [r3]
   16eb0:	f041 0101 	orr.w	r1, r1, #1
   16eb4:	e843 1200 	strex	r2, r1, [r3]
   16eb8:	2a00      	cmp	r2, #0
   16eba:	d1f7      	bne.n	16eac <bt_l2cap_connected+0x78>
   16ebc:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   16ec0:	9801      	ldr	r0, [sp, #4]
   16ec2:	6843      	ldr	r3, [r0, #4]
   16ec4:	69db      	ldr	r3, [r3, #28]
   16ec6:	b113      	cbz	r3, 16ece <bt_l2cap_connected+0x9a>
			chan->ops->status(chan, chan->status);
   16ec8:	f100 0110 	add.w	r1, r0, #16
   16ecc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16ece:	350c      	adds	r5, #12
   16ed0:	e7b5      	b.n	16e3e <bt_l2cap_connected+0xa>
	parent->next = child;
   16ed2:	600a      	str	r2, [r1, #0]
	list->tail = node;
   16ed4:	65a2      	str	r2, [r4, #88]	; 0x58
}
   16ed6:	e7de      	b.n	16e96 <bt_l2cap_connected+0x62>
   16ed8:	d3be      	bcc.n	16e58 <bt_l2cap_connected+0x24>
}
   16eda:	b003      	add	sp, #12
   16edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ede:	bf00      	nop
   16ee0:	000273dc 	.word	0x000273dc
   16ee4:	00027400 	.word	0x00027400
   16ee8:	00029800 	.word	0x00029800
   16eec:	000280bd 	.word	0x000280bd

00016ef0 <l2cap_recv>:
{
   16ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   16ef2:	898b      	ldrh	r3, [r1, #12]
   16ef4:	2b03      	cmp	r3, #3
{
   16ef6:	4606      	mov	r6, r0
   16ef8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16efa:	d804      	bhi.n	16f06 <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
   16efc:	4822      	ldr	r0, [pc, #136]	; (16f88 <l2cap_recv+0x98>)
   16efe:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   16f00:	f00c fd80 	bl	23a04 <z_log_minimal_printk>
		return 0;
   16f04:	e00d      	b.n	16f22 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   16f06:	2104      	movs	r1, #4
   16f08:	f105 0008 	add.w	r0, r5, #8
   16f0c:	f004 fe04 	bl	1bb18 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   16f10:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   16f12:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   16f14:	4293      	cmp	r3, r2
   16f16:	4604      	mov	r4, r0
   16f18:	d006      	beq.n	16f28 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   16f1a:	481c      	ldr	r0, [pc, #112]	; (16f8c <l2cap_recv+0x9c>)
   16f1c:	2145      	movs	r1, #69	; 0x45
   16f1e:	f00c fd71 	bl	23a04 <z_log_minimal_printk>
}
   16f22:	2000      	movs	r0, #0
   16f24:	b002      	add	sp, #8
   16f26:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   16f28:	7842      	ldrb	r2, [r0, #1]
   16f2a:	b912      	cbnz	r2, 16f32 <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   16f2c:	4818      	ldr	r0, [pc, #96]	; (16f90 <l2cap_recv+0xa0>)
   16f2e:	2145      	movs	r1, #69	; 0x45
   16f30:	e7e6      	b.n	16f00 <l2cap_recv+0x10>
	switch (hdr->code) {
   16f32:	7802      	ldrb	r2, [r0, #0]
   16f34:	2a01      	cmp	r2, #1
   16f36:	d0f4      	beq.n	16f22 <l2cap_recv+0x32>
   16f38:	2a13      	cmp	r2, #19
   16f3a:	d104      	bne.n	16f46 <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   16f3c:	2b01      	cmp	r3, #1
   16f3e:	d8f0      	bhi.n	16f22 <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
   16f40:	4814      	ldr	r0, [pc, #80]	; (16f94 <l2cap_recv+0xa4>)
   16f42:	2145      	movs	r1, #69	; 0x45
   16f44:	e7dc      	b.n	16f00 <l2cap_recv+0x10>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   16f46:	4814      	ldr	r0, [pc, #80]	; (16f98 <l2cap_recv+0xa8>)
   16f48:	2157      	movs	r1, #87	; 0x57
   16f4a:	f00c fd5b 	bl	23a04 <z_log_minimal_printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   16f4e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   16f50:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   16f52:	2202      	movs	r2, #2
   16f54:	2001      	movs	r0, #1
   16f56:	f7ff ff4f 	bl	16df8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   16f5a:	4604      	mov	r4, r0
   16f5c:	2800      	cmp	r0, #0
   16f5e:	d0e0      	beq.n	16f22 <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
   16f60:	2102      	movs	r1, #2
   16f62:	3008      	adds	r0, #8
   16f64:	f004 fdf2 	bl	1bb4c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   16f68:	2300      	movs	r3, #0
   16f6a:	7003      	strb	r3, [r0, #0]
   16f6c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   16f6e:	4622      	mov	r2, r4
   16f70:	9300      	str	r3, [sp, #0]
   16f72:	2105      	movs	r1, #5
   16f74:	4628      	mov	r0, r5
   16f76:	f00e f87c 	bl	25072 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   16f7a:	2800      	cmp	r0, #0
   16f7c:	d0d1      	beq.n	16f22 <l2cap_recv+0x32>
		net_buf_unref(buf);
   16f7e:	4620      	mov	r0, r4
   16f80:	f004 fcde 	bl	1b940 <net_buf_unref>
   16f84:	e7cd      	b.n	16f22 <l2cap_recv+0x32>
   16f86:	bf00      	nop
   16f88:	00029831 	.word	0x00029831
   16f8c:	00029854 	.word	0x00029854
   16f90:	0002987a 	.word	0x0002987a
   16f94:	000298a0 	.word	0x000298a0
   16f98:	000298c1 	.word	0x000298c1

00016f9c <bt_l2cap_recv>:
{
   16f9c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   16f9e:	898b      	ldrh	r3, [r1, #12]
   16fa0:	2b03      	cmp	r3, #3
{
   16fa2:	4605      	mov	r5, r0
   16fa4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   16fa6:	d808      	bhi.n	16fba <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   16fa8:	480e      	ldr	r0, [pc, #56]	; (16fe4 <bt_l2cap_recv+0x48>)
   16faa:	2145      	movs	r1, #69	; 0x45
   16fac:	f00c fd2a 	bl	23a04 <z_log_minimal_printk>
	net_buf_unref(buf);
   16fb0:	4620      	mov	r0, r4
}
   16fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   16fb6:	f004 bcc3 	b.w	1b940 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   16fba:	2104      	movs	r1, #4
   16fbc:	f104 0008 	add.w	r0, r4, #8
   16fc0:	f004 fdaa 	bl	1bb18 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   16fc4:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   16fc6:	4628      	mov	r0, r5
   16fc8:	4611      	mov	r1, r2
   16fca:	f00e f875 	bl	250b8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16fce:	b920      	cbnz	r0, 16fda <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   16fd0:	4805      	ldr	r0, [pc, #20]	; (16fe8 <bt_l2cap_recv+0x4c>)
   16fd2:	2157      	movs	r1, #87	; 0x57
   16fd4:	f00c fd16 	bl	23a04 <z_log_minimal_printk>
		net_buf_unref(buf);
   16fd8:	e7ea      	b.n	16fb0 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   16fda:	6843      	ldr	r3, [r0, #4]
   16fdc:	4621      	mov	r1, r4
   16fde:	695b      	ldr	r3, [r3, #20]
   16fe0:	4798      	blx	r3
   16fe2:	e7e5      	b.n	16fb0 <bt_l2cap_recv+0x14>
   16fe4:	000298ee 	.word	0x000298ee
   16fe8:	00029910 	.word	0x00029910

00016fec <bt_l2cap_update_conn_param>:
{
   16fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   16fee:	4b17      	ldr	r3, [pc, #92]	; (1704c <bt_l2cap_update_conn_param+0x60>)
{
   16ff0:	460e      	mov	r6, r1
	ident++;
   16ff2:	7819      	ldrb	r1, [r3, #0]
   16ff4:	3101      	adds	r1, #1
   16ff6:	b2c9      	uxtb	r1, r1
   16ff8:	2901      	cmp	r1, #1
   16ffa:	bf38      	it	cc
   16ffc:	2101      	movcc	r1, #1
{
   16ffe:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   17000:	2208      	movs	r2, #8
   17002:	2012      	movs	r0, #18
	ident++;
   17004:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   17006:	f7ff fef7 	bl	16df8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1700a:	4604      	mov	r4, r0
   1700c:	b1d0      	cbz	r0, 17044 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1700e:	2108      	movs	r1, #8
   17010:	4408      	add	r0, r1
   17012:	f004 fd9b 	bl	1bb4c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   17016:	8833      	ldrh	r3, [r6, #0]
   17018:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1701a:	8873      	ldrh	r3, [r6, #2]
   1701c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1701e:	88b3      	ldrh	r3, [r6, #4]
   17020:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   17022:	88f3      	ldrh	r3, [r6, #6]
   17024:	80c3      	strh	r3, [r0, #6]
   17026:	2300      	movs	r3, #0
   17028:	4628      	mov	r0, r5
   1702a:	9300      	str	r3, [sp, #0]
   1702c:	4622      	mov	r2, r4
   1702e:	2105      	movs	r1, #5
   17030:	f00e f81f 	bl	25072 <bt_l2cap_send_cb>
	if (err) {
   17034:	4605      	mov	r5, r0
   17036:	b110      	cbz	r0, 1703e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   17038:	4620      	mov	r0, r4
   1703a:	f004 fc81 	bl	1b940 <net_buf_unref>
}
   1703e:	4628      	mov	r0, r5
   17040:	b002      	add	sp, #8
   17042:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   17044:	f06f 050b 	mvn.w	r5, #11
   17048:	e7f9      	b.n	1703e <bt_l2cap_update_conn_param+0x52>
   1704a:	bf00      	nop
   1704c:	2000265e 	.word	0x2000265e

00017050 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   17050:	2823      	cmp	r0, #35	; 0x23
   17052:	d81f      	bhi.n	17094 <att_op_get_type+0x44>
   17054:	281a      	cmp	r0, #26
   17056:	d804      	bhi.n	17062 <att_op_get_type+0x12>
   17058:	1e43      	subs	r3, r0, #1
   1705a:	2b18      	cmp	r3, #24
   1705c:	d90e      	bls.n	1707c <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1705e:	2006      	movs	r0, #6
   17060:	4770      	bx	lr
	switch (op) {
   17062:	f1a0 031b 	sub.w	r3, r0, #27
   17066:	2b08      	cmp	r3, #8
   17068:	d81e      	bhi.n	170a8 <att_op_get_type+0x58>
   1706a:	e8df f003 	tbb	[pc, r3]
   1706e:	1d05      	.short	0x1d05
   17070:	191d231b 	.word	0x191d231b
   17074:	1d25      	.short	0x1d25
   17076:	05          	.byte	0x05
   17077:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   17078:	2003      	movs	r0, #3
   1707a:	4770      	bx	lr
	switch (op) {
   1707c:	4a0f      	ldr	r2, [pc, #60]	; (170bc <att_op_get_type+0x6c>)
   1707e:	2301      	movs	r3, #1
   17080:	4083      	lsls	r3, r0
   17082:	401a      	ands	r2, r3
   17084:	b9c2      	cbnz	r2, 170b8 <att_op_get_type+0x68>
   17086:	4a0e      	ldr	r2, [pc, #56]	; (170c0 <att_op_get_type+0x70>)
   17088:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1708a:	2a00      	cmp	r2, #0
   1708c:	bf14      	ite	ne
   1708e:	2001      	movne	r0, #1
   17090:	2006      	moveq	r0, #6
   17092:	4770      	bx	lr
	switch (op) {
   17094:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   17098:	2b52      	cmp	r3, #82	; 0x52
   1709a:	d105      	bne.n	170a8 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1709c:	2000      	movs	r0, #0
}
   1709e:	4770      	bx	lr
		return ATT_REQUEST;
   170a0:	2001      	movs	r0, #1
   170a2:	4770      	bx	lr
		return ATT_INDICATION;
   170a4:	2005      	movs	r0, #5
   170a6:	4770      	bx	lr
		return ATT_COMMAND;
   170a8:	f010 0f40 	tst.w	r0, #64	; 0x40
   170ac:	bf0c      	ite	eq
   170ae:	2006      	moveq	r0, #6
   170b0:	2000      	movne	r0, #0
   170b2:	4770      	bx	lr
	switch (op) {
   170b4:	2004      	movs	r0, #4
   170b6:	4770      	bx	lr
		return ATT_RESPONSE;
   170b8:	2002      	movs	r0, #2
   170ba:	4770      	bx	lr
   170bc:	028aaaaa 	.word	0x028aaaaa
   170c0:	01455554 	.word	0x01455554

000170c4 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   170c4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   170c6:	7b43      	ldrb	r3, [r0, #13]
   170c8:	2b07      	cmp	r3, #7
   170ca:	d005      	beq.n	170d8 <att_get+0x14>
		BT_WARN("Not connected");
   170cc:	4810      	ldr	r0, [pc, #64]	; (17110 <att_get+0x4c>)
   170ce:	2157      	movs	r1, #87	; 0x57
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
	if (!chan) {
		BT_ERR("Unable to find ATT channel");
   170d0:	f00c fc98 	bl	23a04 <z_log_minimal_printk>
		return NULL;
   170d4:	2000      	movs	r0, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   170d6:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   170d8:	2104      	movs	r1, #4
   170da:	f00d ffed 	bl	250b8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   170de:	4603      	mov	r3, r0
   170e0:	b910      	cbnz	r0, 170e8 <att_get+0x24>
		BT_ERR("Unable to find ATT channel");
   170e2:	480c      	ldr	r0, [pc, #48]	; (17114 <att_get+0x50>)
   170e4:	2145      	movs	r1, #69	; 0x45
   170e6:	e7f3      	b.n	170d0 <att_get+0xc>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   170e8:	2102      	movs	r1, #2
   170ea:	3094      	adds	r0, #148	; 0x94
   170ec:	f00e f813 	bl	25116 <atomic_test_bit>
   170f0:	b950      	cbnz	r0, 17108 <att_get+0x44>
   170f2:	4909      	ldr	r1, [pc, #36]	; (17118 <att_get+0x54>)
   170f4:	4809      	ldr	r0, [pc, #36]	; (1711c <att_get+0x58>)
   170f6:	f640 322e 	movw	r2, #2862	; 0xb2e
   170fa:	f00c fc75 	bl	239e8 <assert_print>
   170fe:	4806      	ldr	r0, [pc, #24]	; (17118 <att_get+0x54>)
   17100:	f640 312e 	movw	r1, #2862	; 0xb2e
   17104:	f00c fc69 	bl	239da <assert_post_action>
	return att_chan->att;
   17108:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1710c:	e7e3      	b.n	170d6 <att_get+0x12>
   1710e:	bf00      	nop
   17110:	00029951 	.word	0x00029951
   17114:	00029964 	.word	0x00029964
   17118:	00029984 	.word	0x00029984
   1711c:	000280bd 	.word	0x000280bd

00017120 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   17120:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17122:	3804      	subs	r0, #4
   17124:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   17126:	a901      	add	r1, sp, #4
   17128:	4802      	ldr	r0, [pc, #8]	; (17134 <bt_att_released+0x14>)
   1712a:	f008 fed1 	bl	1fed0 <k_mem_slab_free>
}
   1712e:	b003      	add	sp, #12
   17130:	f85d fb04 	ldr.w	pc, [sp], #4
   17134:	200008a8 	.word	0x200008a8

00017138 <find_type_cb>:
{
   17138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1713c:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   1713e:	f8d2 9000 	ldr.w	r9, [r2]
{
   17142:	4607      	mov	r7, r0
   17144:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17146:	2500      	movs	r5, #0
   17148:	f642 0301 	movw	r3, #10241	; 0x2801
   1714c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1714e:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17152:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   17156:	a90b      	add	r1, sp, #44	; 0x2c
{
   17158:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1715a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1715e:	f00d fb39 	bl	247d4 <bt_uuid_cmp>
   17162:	2800      	cmp	r0, #0
   17164:	d060      	beq.n	17228 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   17166:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1716a:	6838      	ldr	r0, [r7, #0]
   1716c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   17170:	a90b      	add	r1, sp, #44	; 0x2c
   17172:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   17176:	f00d fb2d 	bl	247d4 <bt_uuid_cmp>
   1717a:	b138      	cbz	r0, 1718c <find_type_cb+0x54>
		if (data->group &&
   1717c:	68a3      	ldr	r3, [r4, #8]
   1717e:	b11b      	cbz	r3, 17188 <find_type_cb+0x50>
   17180:	885a      	ldrh	r2, [r3, #2]
   17182:	42b2      	cmp	r2, r6
   17184:	d200      	bcs.n	17188 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   17186:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17188:	2001      	movs	r0, #1
   1718a:	e009      	b.n	171a0 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1718c:	6861      	ldr	r1, [r4, #4]
   1718e:	4608      	mov	r0, r1
   17190:	f00d ffa7 	bl	250e2 <net_buf_frags_len>
   17194:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   17198:	1a1b      	subs	r3, r3, r0
   1719a:	2b03      	cmp	r3, #3
   1719c:	d803      	bhi.n	171a6 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1719e:	2000      	movs	r0, #0
}
   171a0:	b011      	add	sp, #68	; 0x44
   171a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   171a6:	4608      	mov	r0, r1
   171a8:	f004 fc22 	bl	1b9f0 <net_buf_frag_last>
   171ac:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   171ae:	6860      	ldr	r0, [r4, #4]
   171b0:	f00d ff97 	bl	250e2 <net_buf_frags_len>
   171b4:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   171b8:	f105 0b08 	add.w	fp, r5, #8
   171bc:	ebaa 0a00 	sub.w	sl, sl, r0
   171c0:	4658      	mov	r0, fp
   171c2:	f00f f9c3 	bl	2654c <net_buf_simple_tailroom>
   171c6:	4582      	cmp	sl, r0
   171c8:	d231      	bcs.n	1722e <find_type_cb+0xf6>
   171ca:	6860      	ldr	r0, [r4, #4]
   171cc:	f00d ff89 	bl	250e2 <net_buf_frags_len>
   171d0:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   171d4:	1a18      	subs	r0, r3, r0
	if (!len) {
   171d6:	b970      	cbnz	r0, 171f6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   171d8:	6863      	ldr	r3, [r4, #4]
   171da:	7998      	ldrb	r0, [r3, #6]
   171dc:	f004 f974 	bl	1b4c8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   171e0:	2200      	movs	r2, #0
   171e2:	2300      	movs	r3, #0
   171e4:	f00f f9a1 	bl	2652a <net_buf_alloc_fixed>
		if (!frag) {
   171e8:	4605      	mov	r5, r0
   171ea:	2800      	cmp	r0, #0
   171ec:	d0d7      	beq.n	1719e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   171ee:	4601      	mov	r1, r0
   171f0:	6860      	ldr	r0, [r4, #4]
   171f2:	f004 fc3b 	bl	1ba6c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   171f6:	2300      	movs	r3, #0
   171f8:	9300      	str	r3, [sp, #0]
   171fa:	f8d7 9004 	ldr.w	r9, [r7, #4]
   171fe:	4639      	mov	r1, r7
   17200:	2310      	movs	r3, #16
   17202:	aa02      	add	r2, sp, #8
   17204:	4640      	mov	r0, r8
   17206:	47c8      	blx	r9
	if (read < 0) {
   17208:	1e07      	subs	r7, r0, #0
   1720a:	db0d      	blt.n	17228 <find_type_cb+0xf0>
	if (read != data->value_len) {
   1720c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1720e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   17210:	42ba      	cmp	r2, r7
   17212:	d02b      	beq.n	1726c <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   17214:	4601      	mov	r1, r0
   17216:	a80b      	add	r0, sp, #44	; 0x2c
   17218:	f00d fb0a 	bl	24830 <bt_uuid_create>
   1721c:	b958      	cbnz	r0, 17236 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1721e:	7c22      	ldrb	r2, [r4, #16]
   17220:	4814      	ldr	r0, [pc, #80]	; (17274 <find_type_cb+0x13c>)
   17222:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   17224:	f00c fbee 	bl	23a04 <z_log_minimal_printk>
	data->group = NULL;
   17228:	2300      	movs	r3, #0
   1722a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1722c:	e7ac      	b.n	17188 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1722e:	4658      	mov	r0, fp
   17230:	f00f f98c 	bl	2654c <net_buf_simple_tailroom>
   17234:	e7cf      	b.n	171d6 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   17236:	b2fa      	uxtb	r2, r7
   17238:	a902      	add	r1, sp, #8
   1723a:	a806      	add	r0, sp, #24
   1723c:	f00d faf8 	bl	24830 <bt_uuid_create>
   17240:	b918      	cbnz	r0, 1724a <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   17242:	480d      	ldr	r0, [pc, #52]	; (17278 <find_type_cb+0x140>)
   17244:	463a      	mov	r2, r7
   17246:	2157      	movs	r1, #87	; 0x57
   17248:	e7ec      	b.n	17224 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1724a:	a906      	add	r1, sp, #24
   1724c:	a80b      	add	r0, sp, #44	; 0x2c
   1724e:	f00d fac1 	bl	247d4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   17252:	2800      	cmp	r0, #0
   17254:	d1e8      	bne.n	17228 <find_type_cb+0xf0>
	data->err = 0x00;
   17256:	2300      	movs	r3, #0
   17258:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1725a:	2104      	movs	r1, #4
   1725c:	f105 0008 	add.w	r0, r5, #8
   17260:	f004 fc74 	bl	1bb4c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   17264:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17266:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17268:	68a3      	ldr	r3, [r4, #8]
   1726a:	e78c      	b.n	17186 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   1726c:	a902      	add	r1, sp, #8
   1726e:	f00d fa2e 	bl	246ce <memcmp>
   17272:	e7ee      	b.n	17252 <find_type_cb+0x11a>
   17274:	000299b3 	.word	0x000299b3
   17278:	000299d7 	.word	0x000299d7

0001727c <tx_meta_data_free>:
{
   1727c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   1727e:	4604      	mov	r4, r0
   17280:	b940      	cbnz	r0, 17294 <tx_meta_data_free+0x18>
   17282:	4909      	ldr	r1, [pc, #36]	; (172a8 <tx_meta_data_free+0x2c>)
   17284:	4809      	ldr	r0, [pc, #36]	; (172ac <tx_meta_data_free+0x30>)
   17286:	22a5      	movs	r2, #165	; 0xa5
   17288:	f00c fbae 	bl	239e8 <assert_print>
   1728c:	4806      	ldr	r0, [pc, #24]	; (172a8 <tx_meta_data_free+0x2c>)
   1728e:	21a5      	movs	r1, #165	; 0xa5
   17290:	f00c fba3 	bl	239da <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   17294:	2100      	movs	r1, #0
   17296:	2214      	movs	r2, #20
   17298:	f00d fa34 	bl	24704 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1729c:	4621      	mov	r1, r4
   1729e:	4804      	ldr	r0, [pc, #16]	; (172b0 <tx_meta_data_free+0x34>)
}
   172a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   172a4:	f00f bd94 	b.w	26dd0 <k_queue_append>
   172a8:	00029984 	.word	0x00029984
   172ac:	000280bd 	.word	0x000280bd
   172b0:	20000928 	.word	0x20000928

000172b4 <chan_send>:
{
   172b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   172b8:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   172ba:	f8d1 8014 	ldr.w	r8, [r1, #20]
	hdr = (void *)buf->data;
   172be:	688b      	ldr	r3, [r1, #8]
{
   172c0:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   172c2:	3098      	adds	r0, #152	; 0x98
   172c4:	2102      	movs	r1, #2
   172c6:	f00d ff26 	bl	25116 <atomic_test_bit>
   172ca:	2800      	cmp	r0, #0
   172cc:	d047      	beq.n	1735e <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   172ce:	781b      	ldrb	r3, [r3, #0]
   172d0:	2bd2      	cmp	r3, #210	; 0xd2
   172d2:	d114      	bne.n	172fe <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   172d4:	6833      	ldr	r3, [r6, #0]
   172d6:	4621      	mov	r1, r4
   172d8:	6818      	ldr	r0, [r3, #0]
   172da:	f00f f8af 	bl	2643c <bt_smp_sign>
		if (err) {
   172de:	4605      	mov	r5, r0
   172e0:	b168      	cbz	r0, 172fe <chan_send+0x4a>
			BT_ERR("Error signing data");
   172e2:	4820      	ldr	r0, [pc, #128]	; (17364 <chan_send+0xb0>)
   172e4:	2145      	movs	r1, #69	; 0x45
   172e6:	f00c fb8d 	bl	23a04 <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   172ea:	6960      	ldr	r0, [r4, #20]
   172ec:	f7ff ffc6 	bl	1727c <tx_meta_data_free>
			net_buf_unref(buf);
   172f0:	4620      	mov	r0, r4
   172f2:	f004 fb25 	bl	1b940 <net_buf_unref>
}
   172f6:	4628      	mov	r0, r5
   172f8:	b003      	add	sp, #12
   172fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   172fe:	f104 0008 	add.w	r0, r4, #8
   17302:	f00f f91f 	bl	26544 <net_buf_simple_headroom>
	state->len = buf->len;
   17306:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	data->att_chan = chan;
   1730a:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1730e:	6833      	ldr	r3, [r6, #0]
   17310:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   17312:	68a3      	ldr	r3, [r4, #8]
	state->offset = net_buf_simple_headroom(buf);
   17314:	4607      	mov	r7, r0
   17316:	7818      	ldrb	r0, [r3, #0]
   17318:	f7ff fe9a 	bl	17050 <att_op_get_type>
	switch (op_type) {
   1731c:	2805      	cmp	r0, #5
   1731e:	d813      	bhi.n	17348 <chan_send+0x94>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17320:	4b11      	ldr	r3, [pc, #68]	; (17368 <chan_send+0xb4>)
   17322:	f8cd 8000 	str.w	r8, [sp]
   17326:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1732a:	4622      	mov	r2, r4
   1732c:	4628      	mov	r0, r5
   1732e:	2104      	movs	r1, #4
   17330:	f00d fe9f 	bl	25072 <bt_l2cap_send_cb>
	if (err) {
   17334:	4605      	mov	r5, r0
   17336:	2800      	cmp	r0, #0
   17338:	d0dd      	beq.n	172f6 <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   1733a:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   1733c:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   17340:	fa13 f787 	uxtah	r7, r3, r7
   17344:	60a7      	str	r7, [r4, #8]
}
   17346:	e7d6      	b.n	172f6 <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   17348:	4908      	ldr	r1, [pc, #32]	; (1736c <chan_send+0xb8>)
   1734a:	4809      	ldr	r0, [pc, #36]	; (17370 <chan_send+0xbc>)
   1734c:	f240 2257 	movw	r2, #599	; 0x257
   17350:	f00c fb4a 	bl	239e8 <assert_print>
   17354:	4805      	ldr	r0, [pc, #20]	; (1736c <chan_send+0xb8>)
   17356:	f240 2157 	movw	r1, #599	; 0x257
   1735a:	f00c fb3e 	bl	239da <assert_post_action>
		return -EINVAL;
   1735e:	f06f 0515 	mvn.w	r5, #21
   17362:	e7c8      	b.n	172f6 <chan_send+0x42>
   17364:	000299fb 	.word	0x000299fb
   17368:	000278bc 	.word	0x000278bc
   1736c:	00029984 	.word	0x00029984
   17370:	000280bd 	.word	0x000280bd

00017374 <bt_att_chan_req_send>:
{
   17374:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   17376:	b950      	cbnz	r0, 1738e <bt_att_chan_req_send+0x1a>
   17378:	4917      	ldr	r1, [pc, #92]	; (173d8 <bt_att_chan_req_send+0x64>)
   1737a:	4818      	ldr	r0, [pc, #96]	; (173dc <bt_att_chan_req_send+0x68>)
   1737c:	f44f 7246 	mov.w	r2, #792	; 0x318
   17380:	f00c fb32 	bl	239e8 <assert_print>
   17384:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   17388:	4813      	ldr	r0, [pc, #76]	; (173d8 <bt_att_chan_req_send+0x64>)
   1738a:	f00c fb26 	bl	239da <assert_post_action>
   1738e:	b941      	cbnz	r1, 173a2 <bt_att_chan_req_send+0x2e>
   17390:	4911      	ldr	r1, [pc, #68]	; (173d8 <bt_att_chan_req_send+0x64>)
   17392:	4812      	ldr	r0, [pc, #72]	; (173dc <bt_att_chan_req_send+0x68>)
   17394:	f240 3219 	movw	r2, #793	; 0x319
   17398:	f00c fb26 	bl	239e8 <assert_print>
   1739c:	f240 3119 	movw	r1, #793	; 0x319
   173a0:	e7f2      	b.n	17388 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
   173a2:	684a      	ldr	r2, [r1, #4]
   173a4:	b942      	cbnz	r2, 173b8 <bt_att_chan_req_send+0x44>
   173a6:	490c      	ldr	r1, [pc, #48]	; (173d8 <bt_att_chan_req_send+0x64>)
   173a8:	480c      	ldr	r0, [pc, #48]	; (173dc <bt_att_chan_req_send+0x68>)
   173aa:	f240 321a 	movw	r2, #794	; 0x31a
   173ae:	f00c fb1b 	bl	239e8 <assert_print>
   173b2:	f240 311a 	movw	r1, #794	; 0x31a
   173b6:	e7e7      	b.n	17388 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
   173b8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   173bc:	b143      	cbz	r3, 173d0 <bt_att_chan_req_send+0x5c>
   173be:	4906      	ldr	r1, [pc, #24]	; (173d8 <bt_att_chan_req_send+0x64>)
   173c0:	4806      	ldr	r0, [pc, #24]	; (173dc <bt_att_chan_req_send+0x68>)
   173c2:	f240 321b 	movw	r2, #795	; 0x31b
   173c6:	f00c fb0f 	bl	239e8 <assert_print>
   173ca:	f240 311b 	movw	r1, #795	; 0x31b
   173ce:	e7db      	b.n	17388 <bt_att_chan_req_send+0x14>
}
   173d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   173d4:	f00d bf73 	b.w	252be <chan_req_send>
   173d8:	00029984 	.word	0x00029984
   173dc:	000280bd 	.word	0x000280bd

000173e0 <bt_att_connected>:
{
   173e0:	b510      	push	{r4, lr}
   173e2:	f100 0394 	add.w	r3, r0, #148	; 0x94
   173e6:	4604      	mov	r4, r0
   173e8:	f3bf 8f5b 	dmb	ish
   173ec:	e853 1f00 	ldrex	r1, [r3]
   173f0:	f041 0104 	orr.w	r1, r1, #4
   173f4:	e843 1200 	strex	r2, r1, [r3]
   173f8:	2a00      	cmp	r2, #0
   173fa:	d1f7      	bne.n	173ec <bt_att_connected+0xc>
   173fc:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   17400:	2317      	movs	r3, #23
   17402:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   17404:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   17406:	1f20      	subs	r0, r4, #4
   17408:	f00d ff16 	bl	25238 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1740c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   17410:	4903      	ldr	r1, [pc, #12]	; (17420 <bt_att_connected+0x40>)
   17412:	f009 fd03 	bl	20e1c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   17416:	6820      	ldr	r0, [r4, #0]
}
   17418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1741c:	f002 b91a 	b.w	19654 <bt_gatt_connected>
   17420:	00017fe5 	.word	0x00017fe5

00017424 <read_group_cb>:
{
   17424:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17428:	4605      	mov	r5, r0
   1742a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1742c:	f04f 0800 	mov.w	r8, #0
   17430:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17434:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   17436:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17438:	f88d 8008 	strb.w	r8, [sp, #8]
   1743c:	a902      	add	r1, sp, #8
{
   1743e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17440:	f8ad 300a 	strh.w	r3, [sp, #10]
   17444:	f00d f9c6 	bl	247d4 <bt_uuid_cmp>
   17448:	b1a0      	cbz	r0, 17474 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1744a:	f642 0301 	movw	r3, #10241	; 0x2801
   1744e:	6828      	ldr	r0, [r5, #0]
   17450:	f88d 800c 	strb.w	r8, [sp, #12]
   17454:	a903      	add	r1, sp, #12
   17456:	f8ad 300e 	strh.w	r3, [sp, #14]
   1745a:	f00d f9bb 	bl	247d4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1745e:	b148      	cbz	r0, 17474 <read_group_cb+0x50>
		if (data->group &&
   17460:	6923      	ldr	r3, [r4, #16]
   17462:	b11b      	cbz	r3, 1746c <read_group_cb+0x48>
   17464:	885a      	ldrh	r2, [r3, #2]
   17466:	42b2      	cmp	r2, r6
   17468:	d200      	bcs.n	1746c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1746a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1746c:	2001      	movs	r0, #1
}
   1746e:	b004      	add	sp, #16
   17470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   17474:	6861      	ldr	r1, [r4, #4]
   17476:	6828      	ldr	r0, [r5, #0]
   17478:	f00d f9ac 	bl	247d4 <bt_uuid_cmp>
   1747c:	b110      	cbz	r0, 17484 <read_group_cb+0x60>
		data->group = NULL;
   1747e:	2300      	movs	r3, #0
   17480:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   17482:	e7f3      	b.n	1746c <read_group_cb+0x48>
	if (data->rsp->len &&
   17484:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   17486:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   17488:	781a      	ldrb	r2, [r3, #0]
   1748a:	b132      	cbz	r2, 1749a <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1748c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1748e:	8981      	ldrh	r1, [r0, #12]
   17490:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   17492:	4293      	cmp	r3, r2
   17494:	da01      	bge.n	1749a <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   17496:	2000      	movs	r0, #0
   17498:	e7e9      	b.n	1746e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1749a:	2104      	movs	r1, #4
   1749c:	3008      	adds	r0, #8
   1749e:	f004 fb55 	bl	1bb4c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   174a2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   174a4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   174a6:	6923      	ldr	r3, [r4, #16]
   174a8:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   174aa:	4b08      	ldr	r3, [pc, #32]	; (174cc <read_group_cb+0xa8>)
   174ac:	9300      	str	r3, [sp, #0]
   174ae:	9401      	str	r4, [sp, #4]
   174b0:	68a2      	ldr	r2, [r4, #8]
   174b2:	2300      	movs	r3, #0
   174b4:	4629      	mov	r1, r5
   174b6:	4638      	mov	r0, r7
   174b8:	f00d ff42 	bl	25340 <att_chan_read>
	if (read < 0) {
   174bc:	2800      	cmp	r0, #0
   174be:	dbea      	blt.n	17496 <read_group_cb+0x72>
	if (!data->group) {
   174c0:	6920      	ldr	r0, [r4, #16]
   174c2:	3800      	subs	r0, #0
   174c4:	bf18      	it	ne
   174c6:	2001      	movne	r0, #1
   174c8:	e7d1      	b.n	1746e <read_group_cb+0x4a>
   174ca:	bf00      	nop
   174cc:	0002529f 	.word	0x0002529f

000174d0 <read_type_cb>:
{
   174d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   174d4:	6817      	ldr	r7, [r2, #0]
{
   174d6:	4605      	mov	r5, r0
   174d8:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   174da:	6800      	ldr	r0, [r0, #0]
   174dc:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   174de:	687e      	ldr	r6, [r7, #4]
{
   174e0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   174e2:	f00d f977 	bl	247d4 <bt_uuid_cmp>
   174e6:	4681      	mov	r9, r0
   174e8:	2800      	cmp	r0, #0
   174ea:	d13c      	bne.n	17566 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   174ec:	4630      	mov	r0, r6
   174ee:	2295      	movs	r2, #149	; 0x95
   174f0:	4629      	mov	r1, r5
   174f2:	f00e fc40 	bl	25d76 <bt_gatt_check_perm>
   174f6:	4606      	mov	r6, r0
   174f8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   174fa:	b140      	cbz	r0, 1750e <read_type_cb+0x3e>
		if (data->rsp->len) {
   174fc:	68e3      	ldr	r3, [r4, #12]
   174fe:	781b      	ldrb	r3, [r3, #0]
   17500:	b10b      	cbz	r3, 17506 <read_type_cb+0x36>
			data->err = 0x00;
   17502:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   17506:	2000      	movs	r0, #0
}
   17508:	b003      	add	sp, #12
   1750a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1750e:	68a0      	ldr	r0, [r4, #8]
   17510:	f004 fa6e 	bl	1b9f0 <net_buf_frag_last>
   17514:	2102      	movs	r1, #2
   17516:	3008      	adds	r0, #8
   17518:	f004 fb18 	bl	1bb4c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1751c:	4b13      	ldr	r3, [pc, #76]	; (1756c <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1751e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   17520:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   17524:	9300      	str	r3, [sp, #0]
   17526:	9401      	str	r4, [sp, #4]
   17528:	68a2      	ldr	r2, [r4, #8]
   1752a:	4633      	mov	r3, r6
   1752c:	4629      	mov	r1, r5
   1752e:	4638      	mov	r0, r7
   17530:	f00d ff06 	bl	25340 <att_chan_read>
	if (read < 0) {
   17534:	2800      	cmp	r0, #0
   17536:	da07      	bge.n	17548 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   17538:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1753c:	bf26      	itte	cs
   1753e:	4240      	negcs	r0, r0
   17540:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   17542:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   17544:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   17546:	e7de      	b.n	17506 <read_type_cb+0x36>
	if (!data->item) {
   17548:	6923      	ldr	r3, [r4, #16]
   1754a:	2b00      	cmp	r3, #0
   1754c:	d0db      	beq.n	17506 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1754e:	68a0      	ldr	r0, [r4, #8]
   17550:	f00d fdc7 	bl	250e2 <net_buf_frags_len>
   17554:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   17556:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17558:	68e3      	ldr	r3, [r4, #12]
   1755a:	781b      	ldrb	r3, [r3, #0]
   1755c:	4298      	cmp	r0, r3
   1755e:	bf94      	ite	ls
   17560:	2000      	movls	r0, #0
   17562:	2001      	movhi	r0, #1
   17564:	e7d0      	b.n	17508 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   17566:	2001      	movs	r0, #1
   17568:	e7ce      	b.n	17508 <read_type_cb+0x38>
   1756a:	bf00      	nop
   1756c:	000250f3 	.word	0x000250f3

00017570 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   17570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   17572:	2300      	movs	r3, #0
{
   17574:	4604      	mov	r4, r0
   17576:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   17578:	482e      	ldr	r0, [pc, #184]	; (17634 <bt_att_accept+0xc4>)
   1757a:	2200      	movs	r2, #0
   1757c:	4669      	mov	r1, sp
   1757e:	f008 fc4f 	bl	1fe20 <k_mem_slab_alloc>
   17582:	4605      	mov	r5, r0
   17584:	b148      	cbz	r0, 1759a <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   17586:	482c      	ldr	r0, [pc, #176]	; (17638 <bt_att_accept+0xc8>)
   17588:	4622      	mov	r2, r4
   1758a:	2145      	movs	r1, #69	; 0x45
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1758c:	f00c fa3a 	bl	23a04 <z_log_minimal_printk>
		return -ENOMEM;
   17590:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   17594:	4628      	mov	r0, r5
   17596:	b003      	add	sp, #12
   17598:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   1759a:	f00a fcf5 	bl	21f88 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1759e:	4b27      	ldr	r3, [pc, #156]	; (1763c <bt_att_accept+0xcc>)
	(void)memset(att, 0, sizeof(*att));
   175a0:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   175a2:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   175a4:	2230      	movs	r2, #48	; 0x30
   175a6:	9800      	ldr	r0, [sp, #0]
   175a8:	f00d f8ac 	bl	24704 <memset>
	att->conn = conn;
   175ac:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   175ae:	4824      	ldr	r0, [pc, #144]	; (17640 <bt_att_accept+0xd0>)
	att->conn = conn;
   175b0:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   175b2:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   175b4:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   175b6:	e9c4 5501 	strd	r5, r5, [r4, #4]
   175ba:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   175be:	2200      	movs	r2, #0
   175c0:	2300      	movs	r3, #0
   175c2:	a901      	add	r1, sp, #4
   175c4:	f008 fc2c 	bl	1fe20 <k_mem_slab_alloc>
   175c8:	4605      	mov	r5, r0
   175ca:	b118      	cbz	r0, 175d4 <bt_att_accept+0x64>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   175cc:	6822      	ldr	r2, [r4, #0]
   175ce:	481d      	ldr	r0, [pc, #116]	; (17644 <bt_att_accept+0xd4>)
   175d0:	2157      	movs	r1, #87	; 0x57
   175d2:	e7db      	b.n	1758c <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   175d4:	4601      	mov	r1, r0
   175d6:	22f8      	movs	r2, #248	; 0xf8
   175d8:	9801      	ldr	r0, [sp, #4]
   175da:	f00d f893 	bl	24704 <memset>
	chan->chan.chan.ops = &ops;
   175de:	9801      	ldr	r0, [sp, #4]
   175e0:	4b19      	ldr	r3, [pc, #100]	; (17648 <bt_att_accept+0xd8>)
   175e2:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   175e4:	30a0      	adds	r0, #160	; 0xa0
   175e6:	f00f fbe6 	bl	26db6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   175ea:	9b01      	ldr	r3, [sp, #4]
   175ec:	f3bf 8f5b 	dmb	ish
   175f0:	3398      	adds	r3, #152	; 0x98
   175f2:	e853 2f00 	ldrex	r2, [r3]
   175f6:	e843 5100 	strex	r1, r5, [r3]
   175fa:	2900      	cmp	r1, #0
   175fc:	d1f9      	bne.n	175f2 <bt_att_accept+0x82>
   175fe:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   17602:	9b01      	ldr	r3, [sp, #4]
   17604:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   17606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   17608:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1760a:	b91b      	cbnz	r3, 17614 <bt_att_accept+0xa4>
   1760c:	f104 000c 	add.w	r0, r4, #12
   17610:	f00f fbd1 	bl	26db6 <z_impl_k_queue_init>
	return list->head;
   17614:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   17616:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   1761a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   1761c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   17620:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   17622:	b902      	cbnz	r2, 17626 <bt_att_accept+0xb6>
	list->tail = node;
   17624:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   17626:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   17628:	2b00      	cmp	r3, #0
   1762a:	d0b1      	beq.n	17590 <bt_att_accept+0x20>
	*ch = &chan->chan.chan;
   1762c:	3304      	adds	r3, #4
   1762e:	6033      	str	r3, [r6, #0]
	return 0;
   17630:	e7b0      	b.n	17594 <bt_att_accept+0x24>
   17632:	bf00      	nop
   17634:	20000888 	.word	0x20000888
   17638:	00029a13 	.word	0x00029a13
   1763c:	200021a4 	.word	0x200021a4
   17640:	200008a8 	.word	0x200008a8
   17644:	00029a3d 	.word	0x00029a3d
   17648:	20000694 	.word	0x20000694

0001764c <bt_att_chan_create_pdu>:
{
   1764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1764e:	1c53      	adds	r3, r2, #1
   17650:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   17652:	4293      	cmp	r3, r2
{
   17654:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   17656:	d906      	bls.n	17666 <bt_att_chan_create_pdu+0x1a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   17658:	481c      	ldr	r0, [pc, #112]	; (176cc <bt_att_chan_create_pdu+0x80>)
   1765a:	2157      	movs	r1, #87	; 0x57
   1765c:	f00c f9d2 	bl	23a04 <z_log_minimal_printk>
		return NULL;
   17660:	2400      	movs	r4, #0
}
   17662:	4620      	mov	r0, r4
   17664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   17666:	4608      	mov	r0, r1
   17668:	f7ff fcf2 	bl	17050 <att_op_get_type>
   1766c:	2802      	cmp	r0, #2
   1766e:	d013      	beq.n	17698 <bt_att_chan_create_pdu+0x4c>
   17670:	2804      	cmp	r0, #4
   17672:	d011      	beq.n	17698 <bt_att_chan_create_pdu+0x4c>
		timeout = K_FOREVER;
   17674:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17678:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1767c:	2100      	movs	r1, #0
   1767e:	4632      	mov	r2, r6
   17680:	463b      	mov	r3, r7
   17682:	4608      	mov	r0, r1
   17684:	f00d fcf2 	bl	2506c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   17688:	4604      	mov	r4, r0
   1768a:	b948      	cbnz	r0, 176a0 <bt_att_chan_create_pdu+0x54>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1768c:	4810      	ldr	r0, [pc, #64]	; (176d0 <bt_att_chan_create_pdu+0x84>)
   1768e:	462a      	mov	r2, r5
   17690:	2145      	movs	r1, #69	; 0x45
   17692:	f00c f9b7 	bl	23a04 <z_log_minimal_printk>
		return NULL;
   17696:	e7e3      	b.n	17660 <bt_att_chan_create_pdu+0x14>
	switch (att_op_get_type(op)) {
   17698:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1769c:	2700      	movs	r7, #0
   1769e:	e7ed      	b.n	1767c <bt_att_chan_create_pdu+0x30>
	return z_impl_k_queue_get(queue, timeout);
   176a0:	480c      	ldr	r0, [pc, #48]	; (176d4 <bt_att_chan_create_pdu+0x88>)
   176a2:	4632      	mov	r2, r6
   176a4:	463b      	mov	r3, r7
   176a6:	f008 ffbb 	bl	20620 <z_impl_k_queue_get>
	if (!data) {
   176aa:	b938      	cbnz	r0, 176bc <bt_att_chan_create_pdu+0x70>
		BT_WARN("Unable to allocate ATT TX meta");
   176ac:	480a      	ldr	r0, [pc, #40]	; (176d8 <bt_att_chan_create_pdu+0x8c>)
   176ae:	2157      	movs	r1, #87	; 0x57
   176b0:	f00c f9a8 	bl	23a04 <z_log_minimal_printk>
		net_buf_unref(buf);
   176b4:	4620      	mov	r0, r4
   176b6:	f004 f943 	bl	1b940 <net_buf_unref>
		return NULL;
   176ba:	e7d1      	b.n	17660 <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   176bc:	6160      	str	r0, [r4, #20]
   176be:	2101      	movs	r1, #1
   176c0:	f104 0008 	add.w	r0, r4, #8
   176c4:	f004 fa42 	bl	1bb4c <net_buf_simple_add>
	hdr->code = op;
   176c8:	7005      	strb	r5, [r0, #0]
	return buf;
   176ca:	e7ca      	b.n	17662 <bt_att_chan_create_pdu+0x16>
   176cc:	00029a67 	.word	0x00029a67
   176d0:	000297d3 	.word	0x000297d3
   176d4:	20000928 	.word	0x20000928
   176d8:	00029a91 	.word	0x00029a91

000176dc <bt_att_recv>:
{
   176dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   176e0:	898b      	ldrh	r3, [r1, #12]
{
   176e2:	4607      	mov	r7, r0
   176e4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   176e6:	b933      	cbnz	r3, 176f6 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   176e8:	4835      	ldr	r0, [pc, #212]	; (177c0 <bt_att_recv+0xe4>)
   176ea:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected request");
   176ec:	f00c f98a 	bl	23a04 <z_log_minimal_printk>
}
   176f0:	2000      	movs	r0, #0
   176f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   176f6:	2101      	movs	r1, #1
   176f8:	f105 0008 	add.w	r0, r5, #8
   176fc:	f004 fa0c 	bl	1bb18 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   17700:	f857 3c04 	ldr.w	r3, [r7, #-4]
   17704:	4604      	mov	r4, r0
   17706:	2b00      	cmp	r3, #0
   17708:	d0f2      	beq.n	176f0 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   1770a:	7802      	ldrb	r2, [r0, #0]
   1770c:	4e2d      	ldr	r6, [pc, #180]	; (177c4 <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1770e:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17712:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   17714:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   17718:	4290      	cmp	r0, r2
   1771a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   1771e:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   17722:	d10d      	bne.n	17740 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   17724:	f891 9002 	ldrb.w	r9, [r1, #2]
   17728:	f1b9 0f01 	cmp.w	r9, #1
   1772c:	d11f      	bne.n	1776e <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1772e:	2100      	movs	r1, #0
   17730:	f107 0094 	add.w	r0, r7, #148	; 0x94
   17734:	f00d feaa 	bl	2548c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   17738:	b328      	cbz	r0, 17786 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected request");
   1773a:	4823      	ldr	r0, [pc, #140]	; (177c8 <bt_att_recv+0xec>)
   1773c:	2157      	movs	r1, #87	; 0x57
   1773e:	e7d5      	b.n	176ec <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17740:	3301      	adds	r3, #1
   17742:	2b0e      	cmp	r3, #14
   17744:	d1e6      	bne.n	17714 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   17746:	4821      	ldr	r0, [pc, #132]	; (177cc <bt_att_recv+0xf0>)
   17748:	2157      	movs	r1, #87	; 0x57
   1774a:	f00c f95b 	bl	23a04 <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1774e:	7821      	ldrb	r1, [r4, #0]
   17750:	4608      	mov	r0, r1
   17752:	f7ff fc7d 	bl	17050 <att_op_get_type>
   17756:	2800      	cmp	r0, #0
   17758:	d0ca      	beq.n	176f0 <bt_att_recv+0x14>
   1775a:	2805      	cmp	r0, #5
   1775c:	d0c8      	beq.n	176f0 <bt_att_recv+0x14>
	if (!req) {
   1775e:	2900      	cmp	r1, #0
   17760:	d0c6      	beq.n	176f0 <bt_att_recv+0x14>
   17762:	2306      	movs	r3, #6
   17764:	2200      	movs	r2, #0
   17766:	4640      	mov	r0, r8
   17768:	f00e f804 	bl	25774 <send_err_rsp.part.0>
   1776c:	e7c0      	b.n	176f0 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   1776e:	f1b9 0f05 	cmp.w	r9, #5
   17772:	d108      	bne.n	17786 <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   17774:	2101      	movs	r1, #1
   17776:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1777a:	f00d fe87 	bl	2548c <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1777e:	b110      	cbz	r0, 17786 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected indication");
   17780:	4813      	ldr	r0, [pc, #76]	; (177d0 <bt_att_recv+0xf4>)
   17782:	2157      	movs	r1, #87	; 0x57
   17784:	e7b2      	b.n	176ec <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   17786:	4456      	add	r6, sl
   17788:	89aa      	ldrh	r2, [r5, #12]
   1778a:	7873      	ldrb	r3, [r6, #1]
   1778c:	4293      	cmp	r3, r2
   1778e:	d909      	bls.n	177a4 <bt_att_recv+0xc8>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   17790:	7823      	ldrb	r3, [r4, #0]
   17792:	4810      	ldr	r0, [pc, #64]	; (177d4 <bt_att_recv+0xf8>)
   17794:	2145      	movs	r1, #69	; 0x45
   17796:	f00c f935 	bl	23a04 <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   1779a:	f1b9 0f01 	cmp.w	r9, #1
   1779e:	d1a7      	bne.n	176f0 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   177a0:	2304      	movs	r3, #4
   177a2:	e009      	b.n	177b8 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   177a4:	6873      	ldr	r3, [r6, #4]
   177a6:	4629      	mov	r1, r5
   177a8:	4640      	mov	r0, r8
   177aa:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   177ac:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   177b0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   177b2:	d19d      	bne.n	176f0 <bt_att_recv+0x14>
   177b4:	2800      	cmp	r0, #0
   177b6:	d09b      	beq.n	176f0 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   177b8:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   177ba:	2900      	cmp	r1, #0
   177bc:	d098      	beq.n	176f0 <bt_att_recv+0x14>
   177be:	e7d1      	b.n	17764 <bt_att_recv+0x88>
   177c0:	00029ab5 	.word	0x00029ab5
   177c4:	000278d4 	.word	0x000278d4
   177c8:	00029af4 	.word	0x00029af4
   177cc:	00029ad5 	.word	0x00029ad5
   177d0:	00029b15 	.word	0x00029b15
   177d4:	00029b39 	.word	0x00029b39

000177d8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   177d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   177da:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   177dc:	6803      	ldr	r3, [r0, #0]
   177de:	460d      	mov	r5, r1
   177e0:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   177e2:	b087      	sub	sp, #28
   177e4:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   177e6:	bf18      	it	ne
   177e8:	2101      	movne	r1, #1
   177ea:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   177ec:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   177ee:	f00e faf6 	bl	25dde <bt_gatt_change_aware>
   177f2:	b948      	cbnz	r0, 17808 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   177f4:	2105      	movs	r1, #5
   177f6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   177fa:	f00d fe47 	bl	2548c <atomic_test_and_set_bit>
   177fe:	2800      	cmp	r0, #0
   17800:	d048      	beq.n	17894 <att_write_rsp.constprop.0+0xbc>
			return 0;
   17802:	2000      	movs	r0, #0
}
   17804:	b007      	add	sp, #28
   17806:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   17808:	2e00      	cmp	r6, #0
   1780a:	d045      	beq.n	17898 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1780c:	2218      	movs	r2, #24
   1780e:	2100      	movs	r1, #0
   17810:	4668      	mov	r0, sp
   17812:	f00c ff77 	bl	24704 <memset>
	if (rsp) {
   17816:	bb67      	cbnz	r7, 17872 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   17818:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1781a:	4a20      	ldr	r2, [pc, #128]	; (1789c <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   1781c:	681b      	ldr	r3, [r3, #0]
   1781e:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   17820:	2300      	movs	r3, #0
   17822:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   17826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17828:	9303      	str	r3, [sp, #12]
	data.len = len;
   1782a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1782e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17832:	2301      	movs	r3, #1
   17834:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17838:	4631      	mov	r1, r6
   1783a:	466b      	mov	r3, sp
   1783c:	4630      	mov	r0, r6
	data.req = req;
   1783e:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17842:	f00d fca2 	bl	2518a <bt_gatt_foreach_attr>
	if (data.err) {
   17846:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1784a:	b1e3      	cbz	r3, 17886 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1784c:	2f00      	cmp	r7, #0
   1784e:	d0d8      	beq.n	17802 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17850:	9b01      	ldr	r3, [sp, #4]
   17852:	6958      	ldr	r0, [r3, #20]
   17854:	f7ff fd12 	bl	1727c <tx_meta_data_free>
			net_buf_unref(data.buf);
   17858:	9801      	ldr	r0, [sp, #4]
   1785a:	f004 f871 	bl	1b940 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1785e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   17862:	2d00      	cmp	r5, #0
   17864:	d0cd      	beq.n	17802 <att_write_rsp.constprop.0+0x2a>
   17866:	4632      	mov	r2, r6
   17868:	4629      	mov	r1, r5
   1786a:	4620      	mov	r0, r4
   1786c:	f00d ff82 	bl	25774 <send_err_rsp.part.0>
   17870:	e7c7      	b.n	17802 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   17872:	2200      	movs	r2, #0
   17874:	4639      	mov	r1, r7
   17876:	4620      	mov	r0, r4
   17878:	f7ff fee8 	bl	1764c <bt_att_chan_create_pdu>
   1787c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1787e:	2800      	cmp	r0, #0
   17880:	d1ca      	bne.n	17818 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   17882:	200e      	movs	r0, #14
   17884:	e7be      	b.n	17804 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   17886:	9901      	ldr	r1, [sp, #4]
   17888:	2900      	cmp	r1, #0
   1788a:	d0ba      	beq.n	17802 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1788c:	4620      	mov	r0, r4
   1788e:	f00d fd30 	bl	252f2 <bt_att_chan_send_rsp>
   17892:	e7b6      	b.n	17802 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17894:	2012      	movs	r0, #18
   17896:	e7b5      	b.n	17804 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   17898:	2001      	movs	r0, #1
   1789a:	e7b3      	b.n	17804 <att_write_rsp.constprop.0+0x2c>
   1789c:	00025129 	.word	0x00025129

000178a0 <bt_att_create_pdu>:
{
   178a0:	b570      	push	{r4, r5, r6, lr}
   178a2:	460e      	mov	r6, r1
   178a4:	4615      	mov	r5, r2
	att = att_get(conn);
   178a6:	f7ff fc0d 	bl	170c4 <att_get>
	if (!att) {
   178aa:	b190      	cbz	r0, 178d2 <bt_att_create_pdu+0x32>
	return list->head;
   178ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   178ae:	4618      	mov	r0, r3
   178b0:	b11b      	cbz	r3, 178ba <bt_att_create_pdu+0x1a>
	return node->next;
   178b2:	f850 39f0 	ldr.w	r3, [r0], #-240
   178b6:	b103      	cbz	r3, 178ba <bt_att_create_pdu+0x1a>
   178b8:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   178ba:	1c6c      	adds	r4, r5, #1
   178bc:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   178be:	b118      	cbz	r0, 178c8 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   178c0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   178c2:	42a1      	cmp	r1, r4
   178c4:	d210      	bcs.n	178e8 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   178c6:	b933      	cbnz	r3, 178d6 <bt_att_create_pdu+0x36>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   178c8:	480b      	ldr	r0, [pc, #44]	; (178f8 <bt_att_create_pdu+0x58>)
   178ca:	4622      	mov	r2, r4
   178cc:	2157      	movs	r1, #87	; 0x57
   178ce:	f00c f899 	bl	23a04 <z_log_minimal_printk>
}
   178d2:	2000      	movs	r0, #0
   178d4:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   178d6:	4618      	mov	r0, r3
   178d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   178dc:	b153      	cbz	r3, 178f4 <bt_att_create_pdu+0x54>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   178de:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   178e0:	4291      	cmp	r1, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   178e2:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   178e6:	d3f6      	bcc.n	178d6 <bt_att_create_pdu+0x36>
		return bt_att_chan_create_pdu(chan, op, len);
   178e8:	462a      	mov	r2, r5
   178ea:	4631      	mov	r1, r6
}
   178ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   178f0:	f7ff beac 	b.w	1764c <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   178f4:	4614      	mov	r4, r2
   178f6:	e7e3      	b.n	178c0 <bt_att_create_pdu+0x20>
   178f8:	00029b5d 	.word	0x00029b5d

000178fc <att_read_group_req>:
{
   178fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17900:	898e      	ldrh	r6, [r1, #12]
   17902:	3e04      	subs	r6, #4
   17904:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   17906:	2e02      	cmp	r6, #2
{
   17908:	4604      	mov	r4, r0
   1790a:	b08c      	sub	sp, #48	; 0x30
   1790c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1790e:	d001      	beq.n	17914 <att_read_group_req+0x18>
   17910:	2e10      	cmp	r6, #16
   17912:	d16a      	bne.n	179ea <att_read_group_req+0xee>
   17914:	2104      	movs	r1, #4
   17916:	3008      	adds	r0, #8
   17918:	f004 f8fe 	bl	1bb18 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1791c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   17920:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17922:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17924:	1d01      	adds	r1, r0, #4
   17926:	4632      	mov	r2, r6
   17928:	4640      	mov	r0, r8
   1792a:	f00c ff81 	bl	24830 <bt_uuid_create>
   1792e:	2800      	cmp	r0, #0
   17930:	d05d      	beq.n	179ee <att_read_group_req+0xf2>
	if (!start || !end) {
   17932:	2d00      	cmp	r5, #0
   17934:	d03a      	beq.n	179ac <att_read_group_req+0xb0>
   17936:	2600      	movs	r6, #0
   17938:	2f00      	cmp	r7, #0
   1793a:	d036      	beq.n	179aa <att_read_group_req+0xae>
	if (start > end) {
   1793c:	42bd      	cmp	r5, r7
   1793e:	d835      	bhi.n	179ac <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17940:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17944:	a901      	add	r1, sp, #4
   17946:	4640      	mov	r0, r8
   17948:	f88d 6004 	strb.w	r6, [sp, #4]
   1794c:	f8ad 3006 	strh.w	r3, [sp, #6]
   17950:	f00c ff40 	bl	247d4 <bt_uuid_cmp>
   17954:	bb70      	cbnz	r0, 179b4 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   17956:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17958:	2214      	movs	r2, #20
   1795a:	2100      	movs	r1, #0
   1795c:	a807      	add	r0, sp, #28
   1795e:	f00c fed1 	bl	24704 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   17962:	2201      	movs	r2, #1
   17964:	2111      	movs	r1, #17
   17966:	4630      	mov	r0, r6
   17968:	f7ff ff9a 	bl	178a0 <bt_att_create_pdu>
   1796c:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1796e:	2800      	cmp	r0, #0
   17970:	d03d      	beq.n	179ee <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   17972:	2101      	movs	r1, #1
   17974:	3008      	adds	r0, #8
	data.uuid = uuid;
   17976:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1797a:	f004 f8e7 	bl	1bb4c <net_buf_simple_add>
	data.rsp->len = 0U;
   1797e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17980:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17982:	4a1c      	ldr	r2, [pc, #112]	; (179f4 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   17984:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17986:	4639      	mov	r1, r7
	data.group = NULL;
   17988:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1798a:	4628      	mov	r0, r5
   1798c:	ab07      	add	r3, sp, #28
   1798e:	f00d fbfc 	bl	2518a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   17992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17994:	781b      	ldrb	r3, [r3, #0]
   17996:	bb1b      	cbnz	r3, 179e0 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17998:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1799a:	6958      	ldr	r0, [r3, #20]
   1799c:	f7ff fc6e 	bl	1727c <tx_meta_data_free>
		net_buf_unref(data.buf);
   179a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   179a2:	f003 ffcd 	bl	1b940 <net_buf_unref>
	if (!req) {
   179a6:	230a      	movs	r3, #10
   179a8:	e001      	b.n	179ae <att_read_group_req+0xb2>
			*err = 0U;
   179aa:	463d      	mov	r5, r7
	if (!req) {
   179ac:	2301      	movs	r3, #1
   179ae:	462a      	mov	r2, r5
   179b0:	2110      	movs	r1, #16
   179b2:	e00e      	b.n	179d2 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   179b4:	f642 0301 	movw	r3, #10241	; 0x2801
   179b8:	a907      	add	r1, sp, #28
   179ba:	4640      	mov	r0, r8
   179bc:	f88d 601c 	strb.w	r6, [sp, #28]
   179c0:	f8ad 301e 	strh.w	r3, [sp, #30]
   179c4:	f00c ff06 	bl	247d4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   179c8:	2800      	cmp	r0, #0
   179ca:	d0c4      	beq.n	17956 <att_read_group_req+0x5a>
	if (!req) {
   179cc:	2310      	movs	r3, #16
   179ce:	462a      	mov	r2, r5
   179d0:	4619      	mov	r1, r3
   179d2:	4620      	mov	r0, r4
   179d4:	f00d fece 	bl	25774 <send_err_rsp.part.0>
		return 0;
   179d8:	2000      	movs	r0, #0
}
   179da:	b00c      	add	sp, #48	; 0x30
   179dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   179e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   179e2:	4620      	mov	r0, r4
   179e4:	f00d fc85 	bl	252f2 <bt_att_chan_send_rsp>
	return 0;
   179e8:	e7f6      	b.n	179d8 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   179ea:	2004      	movs	r0, #4
   179ec:	e7f5      	b.n	179da <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   179ee:	200e      	movs	r0, #14
   179f0:	e7f3      	b.n	179da <att_read_group_req+0xde>
   179f2:	bf00      	nop
   179f4:	00017425 	.word	0x00017425

000179f8 <att_read_mult_vl_req>:
{
   179f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   179fc:	6846      	ldr	r6, [r0, #4]
{
   179fe:	b085      	sub	sp, #20
   17a00:	4604      	mov	r4, r0
   17a02:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17a04:	4630      	mov	r0, r6
   17a06:	2101      	movs	r1, #1
   17a08:	f00e f9e9 	bl	25dde <bt_gatt_change_aware>
   17a0c:	b950      	cbnz	r0, 17a24 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17a0e:	2105      	movs	r1, #5
   17a10:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17a14:	f00d fd3a 	bl	2548c <atomic_test_and_set_bit>
   17a18:	2800      	cmp	r0, #0
   17a1a:	d13b      	bne.n	17a94 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17a1c:	2012      	movs	r0, #18
}
   17a1e:	b005      	add	sp, #20
   17a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17a24:	2210      	movs	r2, #16
   17a26:	2100      	movs	r1, #0
   17a28:	4668      	mov	r0, sp
   17a2a:	f00c fe6b 	bl	24704 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   17a2e:	2200      	movs	r2, #0
   17a30:	2121      	movs	r1, #33	; 0x21
   17a32:	4630      	mov	r0, r6
   17a34:	f7ff ff34 	bl	178a0 <bt_att_create_pdu>
   17a38:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17a3a:	b368      	cbz	r0, 17a98 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17a3c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17a9c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   17a40:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   17a42:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17a46:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   17a4a:	89ab      	ldrh	r3, [r5, #12]
   17a4c:	2b01      	cmp	r3, #1
   17a4e:	d804      	bhi.n	17a5a <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   17a50:	9902      	ldr	r1, [sp, #8]
   17a52:	4620      	mov	r0, r4
   17a54:	f00d fc4d 	bl	252f2 <bt_att_chan_send_rsp>
	return 0;
   17a58:	e01c      	b.n	17a94 <att_read_mult_vl_req+0x9c>
   17a5a:	4638      	mov	r0, r7
   17a5c:	f00e fd6a 	bl	26534 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17a60:	466b      	mov	r3, sp
   17a62:	464a      	mov	r2, r9
   17a64:	4601      	mov	r1, r0
   17a66:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17a68:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17a6c:	f00d fb8d 	bl	2518a <bt_gatt_foreach_attr>
		if (data.err) {
   17a70:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17a74:	2b00      	cmp	r3, #0
   17a76:	d0e8      	beq.n	17a4a <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17a78:	9b02      	ldr	r3, [sp, #8]
   17a7a:	6958      	ldr	r0, [r3, #20]
   17a7c:	f7ff fbfe 	bl	1727c <tx_meta_data_free>
			net_buf_unref(data.buf);
   17a80:	9802      	ldr	r0, [sp, #8]
   17a82:	f003 ff5d 	bl	1b940 <net_buf_unref>
	if (!req) {
   17a86:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17a8a:	4632      	mov	r2, r6
   17a8c:	2120      	movs	r1, #32
   17a8e:	4620      	mov	r0, r4
   17a90:	f00d fe70 	bl	25774 <send_err_rsp.part.0>
			return 0;
   17a94:	2000      	movs	r0, #0
   17a96:	e7c2      	b.n	17a1e <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   17a98:	200e      	movs	r0, #14
   17a9a:	e7c0      	b.n	17a1e <att_read_mult_vl_req+0x26>
   17a9c:	000254fd 	.word	0x000254fd

00017aa0 <att_read_mult_req>:
{
   17aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17aa4:	6846      	ldr	r6, [r0, #4]
{
   17aa6:	b085      	sub	sp, #20
   17aa8:	4604      	mov	r4, r0
   17aaa:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17aac:	4630      	mov	r0, r6
   17aae:	2101      	movs	r1, #1
   17ab0:	f00e f995 	bl	25dde <bt_gatt_change_aware>
   17ab4:	b950      	cbnz	r0, 17acc <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17ab6:	2105      	movs	r1, #5
   17ab8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17abc:	f00d fce6 	bl	2548c <atomic_test_and_set_bit>
   17ac0:	2800      	cmp	r0, #0
   17ac2:	d13b      	bne.n	17b3c <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17ac4:	2012      	movs	r0, #18
}
   17ac6:	b005      	add	sp, #20
   17ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17acc:	2210      	movs	r2, #16
   17ace:	2100      	movs	r1, #0
   17ad0:	4668      	mov	r0, sp
   17ad2:	f00c fe17 	bl	24704 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   17ad6:	2200      	movs	r2, #0
   17ad8:	210f      	movs	r1, #15
   17ada:	4630      	mov	r0, r6
   17adc:	f7ff fee0 	bl	178a0 <bt_att_create_pdu>
   17ae0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17ae2:	b368      	cbz	r0, 17b40 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17ae4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17b44 <att_read_mult_req+0xa4>
	data.chan = chan;
   17ae8:	9400      	str	r4, [sp, #0]
   17aea:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17aee:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   17af2:	89ab      	ldrh	r3, [r5, #12]
   17af4:	2b01      	cmp	r3, #1
   17af6:	d804      	bhi.n	17b02 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   17af8:	9902      	ldr	r1, [sp, #8]
   17afa:	4620      	mov	r0, r4
   17afc:	f00d fbf9 	bl	252f2 <bt_att_chan_send_rsp>
	return 0;
   17b00:	e01c      	b.n	17b3c <att_read_mult_req+0x9c>
   17b02:	4638      	mov	r0, r7
   17b04:	f00e fd16 	bl	26534 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17b08:	466b      	mov	r3, sp
   17b0a:	464a      	mov	r2, r9
   17b0c:	4601      	mov	r1, r0
   17b0e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17b10:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17b14:	f00d fb39 	bl	2518a <bt_gatt_foreach_attr>
		if (data.err) {
   17b18:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17b1c:	2b00      	cmp	r3, #0
   17b1e:	d0e8      	beq.n	17af2 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17b20:	9b02      	ldr	r3, [sp, #8]
   17b22:	6958      	ldr	r0, [r3, #20]
   17b24:	f7ff fbaa 	bl	1727c <tx_meta_data_free>
			net_buf_unref(data.buf);
   17b28:	9802      	ldr	r0, [sp, #8]
   17b2a:	f003 ff09 	bl	1b940 <net_buf_unref>
	if (!req) {
   17b2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17b32:	4632      	mov	r2, r6
   17b34:	210e      	movs	r1, #14
   17b36:	4620      	mov	r0, r4
   17b38:	f00d fe1c 	bl	25774 <send_err_rsp.part.0>
			return 0;
   17b3c:	2000      	movs	r0, #0
   17b3e:	e7c2      	b.n	17ac6 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   17b40:	200e      	movs	r0, #14
   17b42:	e7c0      	b.n	17ac6 <att_read_mult_req+0x26>
   17b44:	000254b7 	.word	0x000254b7

00017b48 <att_read_rsp>:
{
   17b48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17b4c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   17b50:	4604      	mov	r4, r0
   17b52:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17b54:	4640      	mov	r0, r8
   17b56:	2101      	movs	r1, #1
{
   17b58:	4617      	mov	r7, r2
   17b5a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   17b5c:	f00e f93f 	bl	25dde <bt_gatt_change_aware>
   17b60:	b948      	cbnz	r0, 17b76 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17b62:	2105      	movs	r1, #5
   17b64:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17b68:	f00d fc90 	bl	2548c <atomic_test_and_set_bit>
   17b6c:	bb78      	cbnz	r0, 17bce <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17b6e:	2012      	movs	r0, #18
}
   17b70:	b004      	add	sp, #16
   17b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   17b76:	b38d      	cbz	r5, 17bdc <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   17b78:	2210      	movs	r2, #16
   17b7a:	2100      	movs	r1, #0
   17b7c:	4668      	mov	r0, sp
   17b7e:	f00c fdc1 	bl	24704 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   17b82:	2200      	movs	r2, #0
   17b84:	4639      	mov	r1, r7
   17b86:	4640      	mov	r0, r8
   17b88:	f7ff fe8a 	bl	178a0 <bt_att_create_pdu>
   17b8c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17b8e:	b338      	cbz	r0, 17be0 <att_read_rsp+0x98>
	data.offset = offset;
   17b90:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17b94:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17b98:	2301      	movs	r3, #1
   17b9a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17b9e:	4a11      	ldr	r2, [pc, #68]	; (17be4 <att_read_rsp+0x9c>)
	data.chan = chan;
   17ba0:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17ba2:	466b      	mov	r3, sp
   17ba4:	4629      	mov	r1, r5
   17ba6:	4628      	mov	r0, r5
   17ba8:	f00d faef 	bl	2518a <bt_gatt_foreach_attr>
	if (data.err) {
   17bac:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17bb0:	b17b      	cbz	r3, 17bd2 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17bb2:	9b02      	ldr	r3, [sp, #8]
   17bb4:	6958      	ldr	r0, [r3, #20]
   17bb6:	f7ff fb61 	bl	1727c <tx_meta_data_free>
		net_buf_unref(data.buf);
   17bba:	9802      	ldr	r0, [sp, #8]
   17bbc:	f003 fec0 	bl	1b940 <net_buf_unref>
	if (!req) {
   17bc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17bc4:	462a      	mov	r2, r5
   17bc6:	4631      	mov	r1, r6
   17bc8:	4620      	mov	r0, r4
   17bca:	f00d fdd3 	bl	25774 <send_err_rsp.part.0>
			return 0;
   17bce:	2000      	movs	r0, #0
   17bd0:	e7ce      	b.n	17b70 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   17bd2:	9902      	ldr	r1, [sp, #8]
   17bd4:	4620      	mov	r0, r4
   17bd6:	f00d fb8c 	bl	252f2 <bt_att_chan_send_rsp>
	return 0;
   17bda:	e7f8      	b.n	17bce <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   17bdc:	2001      	movs	r0, #1
   17bde:	e7c7      	b.n	17b70 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   17be0:	200e      	movs	r0, #14
   17be2:	e7c5      	b.n	17b70 <att_read_rsp+0x28>
   17be4:	000254b7 	.word	0x000254b7

00017be8 <att_read_type_req>:
{
   17be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17bec:	898d      	ldrh	r5, [r1, #12]
   17bee:	3d04      	subs	r5, #4
   17bf0:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   17bf2:	2d02      	cmp	r5, #2
{
   17bf4:	4604      	mov	r4, r0
   17bf6:	b08c      	sub	sp, #48	; 0x30
   17bf8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17bfa:	d001      	beq.n	17c00 <att_read_type_req+0x18>
   17bfc:	2d10      	cmp	r5, #16
   17bfe:	d150      	bne.n	17ca2 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   17c00:	2104      	movs	r1, #4
   17c02:	3008      	adds	r0, #8
   17c04:	f003 ff88 	bl	1bb18 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17c08:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   17c0c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17c0e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17c10:	1d01      	adds	r1, r0, #4
   17c12:	462a      	mov	r2, r5
   17c14:	4640      	mov	r0, r8
   17c16:	f00c fe0b 	bl	24830 <bt_uuid_create>
   17c1a:	b188      	cbz	r0, 17c40 <att_read_type_req+0x58>
	if (!start || !end) {
   17c1c:	b19e      	cbz	r6, 17c46 <att_read_type_req+0x5e>
   17c1e:	b18f      	cbz	r7, 17c44 <att_read_type_req+0x5c>
	if (start > end) {
   17c20:	42b7      	cmp	r7, r6
   17c22:	d310      	bcc.n	17c46 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   17c24:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   17c26:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17c28:	2100      	movs	r1, #0
   17c2a:	eb0d 0002 	add.w	r0, sp, r2
   17c2e:	f00c fd69 	bl	24704 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   17c32:	2201      	movs	r2, #1
   17c34:	2109      	movs	r1, #9
   17c36:	4628      	mov	r0, r5
   17c38:	f7ff fe32 	bl	178a0 <bt_att_create_pdu>
   17c3c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   17c3e:	b960      	cbnz	r0, 17c5a <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   17c40:	200e      	movs	r0, #14
   17c42:	e007      	b.n	17c54 <att_read_type_req+0x6c>
			*err = 0U;
   17c44:	463e      	mov	r6, r7
	if (!req) {
   17c46:	2301      	movs	r3, #1
   17c48:	4632      	mov	r2, r6
   17c4a:	2108      	movs	r1, #8
   17c4c:	4620      	mov	r0, r4
   17c4e:	f00d fd91 	bl	25774 <send_err_rsp.part.0>
		return 0;
   17c52:	2000      	movs	r0, #0
}
   17c54:	b00c      	add	sp, #48	; 0x30
   17c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   17c5a:	2101      	movs	r1, #1
   17c5c:	3008      	adds	r0, #8
	data.uuid = uuid;
   17c5e:	e9cd 4806 	strd	r4, r8, [sp, #24]
   17c62:	f003 ff73 	bl	1bb4c <net_buf_simple_add>
	data.rsp->len = 0U;
   17c66:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17c68:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   17c6a:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17c6c:	230a      	movs	r3, #10
   17c6e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17c72:	4a0d      	ldr	r2, [pc, #52]	; (17ca8 <att_read_type_req+0xc0>)
   17c74:	ab06      	add	r3, sp, #24
   17c76:	4639      	mov	r1, r7
   17c78:	4630      	mov	r0, r6
   17c7a:	f00d fa86 	bl	2518a <bt_gatt_foreach_attr>
	if (data.err) {
   17c7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   17c82:	b14b      	cbz	r3, 17c98 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17c84:	9b08      	ldr	r3, [sp, #32]
   17c86:	6958      	ldr	r0, [r3, #20]
   17c88:	f7ff faf8 	bl	1727c <tx_meta_data_free>
		net_buf_unref(data.buf);
   17c8c:	9808      	ldr	r0, [sp, #32]
   17c8e:	f003 fe57 	bl	1b940 <net_buf_unref>
	if (!req) {
   17c92:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   17c96:	e7d7      	b.n	17c48 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   17c98:	9908      	ldr	r1, [sp, #32]
   17c9a:	4620      	mov	r0, r4
   17c9c:	f00d fb29 	bl	252f2 <bt_att_chan_send_rsp>
	return 0;
   17ca0:	e7d7      	b.n	17c52 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   17ca2:	2004      	movs	r0, #4
   17ca4:	e7d6      	b.n	17c54 <att_read_type_req+0x6c>
   17ca6:	bf00      	nop
   17ca8:	000174d1 	.word	0x000174d1

00017cac <att_find_type_req>:
{
   17cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17cb0:	460f      	mov	r7, r1
   17cb2:	b086      	sub	sp, #24
   17cb4:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   17cb6:	2106      	movs	r1, #6
   17cb8:	f107 0008 	add.w	r0, r7, #8
   17cbc:	f003 ff2c 	bl	1bb18 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   17cc0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17cc2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   17cc6:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   17cc8:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   17ccc:	b1c5      	cbz	r5, 17d00 <att_find_type_req+0x54>
   17cce:	2300      	movs	r3, #0
   17cd0:	f1b8 0f00 	cmp.w	r8, #0
   17cd4:	d013      	beq.n	17cfe <att_find_type_req+0x52>
	if (start > end) {
   17cd6:	4545      	cmp	r5, r8
   17cd8:	d812      	bhi.n	17d00 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   17cda:	f88d 3000 	strb.w	r3, [sp]
   17cde:	f88d 3004 	strb.w	r3, [sp, #4]
   17ce2:	a901      	add	r1, sp, #4
   17ce4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17ce8:	4668      	mov	r0, sp
   17cea:	f8ad 2002 	strh.w	r2, [sp, #2]
   17cee:	f8ad 3006 	strh.w	r3, [sp, #6]
   17cf2:	f00c fd6f 	bl	247d4 <bt_uuid_cmp>
   17cf6:	4606      	mov	r6, r0
   17cf8:	b160      	cbz	r0, 17d14 <att_find_type_req+0x68>
	if (!req) {
   17cfa:	230a      	movs	r3, #10
   17cfc:	e001      	b.n	17d02 <att_find_type_req+0x56>
			*err = 0U;
   17cfe:	4645      	mov	r5, r8
	if (!req) {
   17d00:	2301      	movs	r3, #1
   17d02:	462a      	mov	r2, r5
   17d04:	2106      	movs	r1, #6
   17d06:	4620      	mov	r0, r4
   17d08:	f00d fd34 	bl	25774 <send_err_rsp.part.0>
		return 0;
   17d0c:	2000      	movs	r0, #0
}
   17d0e:	b006      	add	sp, #24
   17d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   17d14:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17d18:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   17d1a:	4601      	mov	r1, r0
   17d1c:	2214      	movs	r2, #20
   17d1e:	a801      	add	r0, sp, #4
   17d20:	f00c fcf0 	bl	24704 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   17d24:	4632      	mov	r2, r6
   17d26:	2107      	movs	r1, #7
   17d28:	4650      	mov	r0, sl
   17d2a:	f7ff fdb9 	bl	178a0 <bt_att_create_pdu>
   17d2e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17d30:	b1f8      	cbz	r0, 17d72 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17d32:	230a      	movs	r3, #10
   17d34:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17d38:	4a0f      	ldr	r2, [pc, #60]	; (17d78 <att_find_type_req+0xcc>)
	data.chan = chan;
   17d3a:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17d3c:	ab01      	add	r3, sp, #4
   17d3e:	4641      	mov	r1, r8
   17d40:	4628      	mov	r0, r5
	data.value = value;
   17d42:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   17d46:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17d4a:	f00d fa1e 	bl	2518a <bt_gatt_foreach_attr>
	if (data.err) {
   17d4e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   17d52:	b14b      	cbz	r3, 17d68 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17d54:	9b02      	ldr	r3, [sp, #8]
   17d56:	6958      	ldr	r0, [r3, #20]
   17d58:	f7ff fa90 	bl	1727c <tx_meta_data_free>
		net_buf_unref(data.buf);
   17d5c:	9802      	ldr	r0, [sp, #8]
   17d5e:	f003 fdef 	bl	1b940 <net_buf_unref>
	if (!req) {
   17d62:	f89d 3015 	ldrb.w	r3, [sp, #21]
   17d66:	e7cc      	b.n	17d02 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   17d68:	9902      	ldr	r1, [sp, #8]
   17d6a:	4620      	mov	r0, r4
   17d6c:	f00d fac1 	bl	252f2 <bt_att_chan_send_rsp>
	return 0;
   17d70:	e7cc      	b.n	17d0c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   17d72:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17d74:	e7cb      	b.n	17d0e <att_find_type_req+0x62>
   17d76:	bf00      	nop
   17d78:	00017139 	.word	0x00017139

00017d7c <att_find_info_req>:
{
   17d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   17d7e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   17d80:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17d82:	885e      	ldrh	r6, [r3, #2]
{
   17d84:	b085      	sub	sp, #20
   17d86:	4604      	mov	r4, r0
	if (!start || !end) {
   17d88:	b195      	cbz	r5, 17db0 <att_find_info_req+0x34>
   17d8a:	b186      	cbz	r6, 17dae <att_find_info_req+0x32>
	if (start > end) {
   17d8c:	42b5      	cmp	r5, r6
   17d8e:	d80f      	bhi.n	17db0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   17d90:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   17d92:	2210      	movs	r2, #16
   17d94:	2100      	movs	r1, #0
   17d96:	4668      	mov	r0, sp
   17d98:	f00c fcb4 	bl	24704 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   17d9c:	2200      	movs	r2, #0
   17d9e:	2105      	movs	r1, #5
   17da0:	4638      	mov	r0, r7
   17da2:	f7ff fd7d 	bl	178a0 <bt_att_create_pdu>
   17da6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   17da8:	b958      	cbnz	r0, 17dc2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   17daa:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   17dac:	e007      	b.n	17dbe <att_find_info_req+0x42>
			*err = 0U;
   17dae:	4635      	mov	r5, r6
	if (!req) {
   17db0:	2301      	movs	r3, #1
   17db2:	462a      	mov	r2, r5
   17db4:	2104      	movs	r1, #4
   17db6:	4620      	mov	r0, r4
   17db8:	f00d fcdc 	bl	25774 <send_err_rsp.part.0>
		return 0;
   17dbc:	2000      	movs	r0, #0
}
   17dbe:	b005      	add	sp, #20
   17dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17dc2:	466b      	mov	r3, sp
   17dc4:	4a0a      	ldr	r2, [pc, #40]	; (17df0 <att_find_info_req+0x74>)
	data.chan = chan;
   17dc6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17dc8:	4631      	mov	r1, r6
   17dca:	4628      	mov	r0, r5
   17dcc:	f00d f9dd 	bl	2518a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   17dd0:	9b02      	ldr	r3, [sp, #8]
   17dd2:	b943      	cbnz	r3, 17de6 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17dd4:	9b01      	ldr	r3, [sp, #4]
   17dd6:	6958      	ldr	r0, [r3, #20]
   17dd8:	f7ff fa50 	bl	1727c <tx_meta_data_free>
		net_buf_unref(data.buf);
   17ddc:	9801      	ldr	r0, [sp, #4]
   17dde:	f003 fdaf 	bl	1b940 <net_buf_unref>
	if (!req) {
   17de2:	230a      	movs	r3, #10
   17de4:	e7e5      	b.n	17db2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   17de6:	9901      	ldr	r1, [sp, #4]
   17de8:	4620      	mov	r0, r4
   17dea:	f00d fa82 	bl	252f2 <bt_att_chan_send_rsp>
	return 0;
   17dee:	e7e5      	b.n	17dbc <att_find_info_req+0x40>
   17df0:	000251a1 	.word	0x000251a1

00017df4 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   17df4:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   17df6:	4c0b      	ldr	r4, [pc, #44]	; (17e24 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   17df8:	4d0b      	ldr	r5, [pc, #44]	; (17e28 <bt_att_init+0x34>)
   17dfa:	4620      	mov	r0, r4
   17dfc:	f00e ffdb 	bl	26db6 <z_impl_k_queue_init>
   17e00:	4629      	mov	r1, r5
   17e02:	4620      	mov	r0, r4
   17e04:	f00e ffe4 	bl	26dd0 <k_queue_append>
   17e08:	f105 0114 	add.w	r1, r5, #20
   17e0c:	4620      	mov	r0, r4
   17e0e:	f00e ffdf 	bl	26dd0 <k_queue_append>
   17e12:	f105 0128 	add.w	r1, r5, #40	; 0x28
   17e16:	4620      	mov	r0, r4
   17e18:	f00e ffda 	bl	26dd0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   17e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   17e20:	f000 bdc4 	b.w	189ac <bt_gatt_init>
   17e24:	20000928 	.word	0x20000928
   17e28:	20002168 	.word	0x20002168

00017e2c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   17e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   17e2e:	2300      	movs	r3, #0
{
   17e30:	4605      	mov	r5, r0
   17e32:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   17e34:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   17e36:	f00a f8a7 	bl	21f88 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   17e3a:	4b0b      	ldr	r3, [pc, #44]	; (17e68 <bt_att_req_alloc+0x3c>)
   17e3c:	681b      	ldr	r3, [r3, #0]
   17e3e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   17e40:	bf04      	itt	eq
   17e42:	2500      	moveq	r5, #0
   17e44:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17e46:	a901      	add	r1, sp, #4
   17e48:	4808      	ldr	r0, [pc, #32]	; (17e6c <bt_att_req_alloc+0x40>)
   17e4a:	462a      	mov	r2, r5
   17e4c:	4623      	mov	r3, r4
   17e4e:	f007 ffe7 	bl	1fe20 <k_mem_slab_alloc>
   17e52:	4601      	mov	r1, r0
   17e54:	b930      	cbnz	r0, 17e64 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   17e56:	9801      	ldr	r0, [sp, #4]
   17e58:	221c      	movs	r2, #28
   17e5a:	f00c fc53 	bl	24704 <memset>

	return req;
   17e5e:	9801      	ldr	r0, [sp, #4]
}
   17e60:	b003      	add	sp, #12
   17e62:	bd30      	pop	{r4, r5, pc}
		return NULL;
   17e64:	2000      	movs	r0, #0
   17e66:	e7fb      	b.n	17e60 <bt_att_req_alloc+0x34>
   17e68:	200021a4 	.word	0x200021a4
   17e6c:	200008c8 	.word	0x200008c8

00017e70 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   17e70:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   17e72:	6883      	ldr	r3, [r0, #8]
{
   17e74:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   17e76:	b14b      	cbz	r3, 17e8c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   17e78:	6958      	ldr	r0, [r3, #20]
   17e7a:	f7ff f9ff 	bl	1727c <tx_meta_data_free>
		net_buf_unref(req->buf);
   17e7e:	9b01      	ldr	r3, [sp, #4]
   17e80:	6898      	ldr	r0, [r3, #8]
   17e82:	f003 fd5d 	bl	1b940 <net_buf_unref>
		req->buf = NULL;
   17e86:	9b01      	ldr	r3, [sp, #4]
   17e88:	2200      	movs	r2, #0
   17e8a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   17e8c:	4803      	ldr	r0, [pc, #12]	; (17e9c <bt_att_req_free+0x2c>)
   17e8e:	a901      	add	r1, sp, #4
   17e90:	f008 f81e 	bl	1fed0 <k_mem_slab_free>
}
   17e94:	b003      	add	sp, #12
   17e96:	f85d fb04 	ldr.w	pc, [sp], #4
   17e9a:	bf00      	nop
   17e9c:	200008c8 	.word	0x200008c8

00017ea0 <att_handle_rsp>:
{
   17ea0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17ea4:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   17ea6:	30c0      	adds	r0, #192	; 0xc0
{
   17ea8:	460e      	mov	r6, r1
   17eaa:	4617      	mov	r7, r2
   17eac:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   17eae:	f009 f8a5 	bl	20ffc <k_work_cancel_delayable>
	if (!chan->req) {
   17eb2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   17eb6:	b950      	cbnz	r0, 17ece <att_handle_rsp+0x2e>
		BT_WARN("No pending ATT request");
   17eb8:	4816      	ldr	r0, [pc, #88]	; (17f14 <att_handle_rsp+0x74>)
   17eba:	2157      	movs	r1, #87	; 0x57
   17ebc:	f00b fda2 	bl	23a04 <z_log_minimal_printk>
	att_req_send_process(chan->att);
   17ec0:	6820      	ldr	r0, [r4, #0]
   17ec2:	f00d fb87 	bl	255d4 <att_req_send_process>
}
   17ec6:	2000      	movs	r0, #0
   17ec8:	b002      	add	sp, #8
   17eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   17ece:	4b12      	ldr	r3, [pc, #72]	; (17f18 <att_handle_rsp+0x78>)
   17ed0:	4298      	cmp	r0, r3
   17ed2:	f04f 0800 	mov.w	r8, #0
   17ed6:	d102      	bne.n	17ede <att_handle_rsp+0x3e>
		chan->req = NULL;
   17ed8:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   17edc:	e7f0      	b.n	17ec0 <att_handle_rsp+0x20>
	func = chan->req->func;
   17ede:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   17ee2:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   17ee6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   17eea:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   17eee:	f7ff ffbf 	bl	17e70 <bt_att_req_free>
	att_req_send_process(chan->att);
   17ef2:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   17ef4:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   17ef8:	f00d fb6c 	bl	255d4 <att_req_send_process>
	if (func) {
   17efc:	f1b9 0f00 	cmp.w	r9, #0
   17f00:	d0e1      	beq.n	17ec6 <att_handle_rsp+0x26>
		func(chan->att->conn, err, pdu, len, params);
   17f02:	6820      	ldr	r0, [r4, #0]
   17f04:	f8cd a000 	str.w	sl, [sp]
   17f08:	6800      	ldr	r0, [r0, #0]
   17f0a:	463b      	mov	r3, r7
   17f0c:	4632      	mov	r2, r6
   17f0e:	4629      	mov	r1, r5
   17f10:	47c8      	blx	r9
   17f12:	e7d8      	b.n	17ec6 <att_handle_rsp+0x26>
   17f14:	00029b7d 	.word	0x00029b7d
   17f18:	200021a8 	.word	0x200021a8

00017f1c <bt_att_disconnected>:
{
   17f1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   17f20:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   17f24:	4604      	mov	r4, r0
	if (!att_chan->att) {
   17f26:	2e00      	cmp	r6, #0
   17f28:	d056      	beq.n	17fd8 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   17f2a:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   17f2e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   17f32:	f00d fa90 	bl	25456 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   17f36:	1f27      	subs	r7, r4, #4
   17f38:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   17f3c:	2200      	movs	r2, #0
   17f3e:	2300      	movs	r3, #0
   17f40:	4640      	mov	r0, r8
   17f42:	f003 fbcb 	bl	1b6dc <net_buf_get>
   17f46:	4605      	mov	r5, r0
   17f48:	bb28      	cbnz	r0, 17f96 <bt_att_disconnected+0x7a>
	if (chan->req) {
   17f4a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   17f4e:	b12b      	cbz	r3, 17f5c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   17f50:	4602      	mov	r2, r0
   17f52:	4601      	mov	r1, r0
   17f54:	230e      	movs	r3, #14
   17f56:	4638      	mov	r0, r7
   17f58:	f7ff ffa2 	bl	17ea0 <att_handle_rsp>
	chan->att = NULL;
   17f5c:	2300      	movs	r3, #0
   17f5e:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   17f62:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   17f64:	2b00      	cmp	r3, #0
   17f66:	d137      	bne.n	17fd8 <bt_att_disconnected+0xbc>
	att_reset(att);
   17f68:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   17f6a:	9803      	ldr	r0, [sp, #12]
   17f6c:	2200      	movs	r2, #0
   17f6e:	2300      	movs	r3, #0
   17f70:	300c      	adds	r0, #12
   17f72:	f003 fbb3 	bl	1b6dc <net_buf_get>
   17f76:	4605      	mov	r5, r0
   17f78:	b9a0      	cbnz	r0, 17fa4 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   17f7a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   17f7c:	6845      	ldr	r5, [r0, #4]
   17f7e:	b9c5      	cbnz	r5, 17fb2 <bt_att_disconnected+0x96>
	att->conn = NULL;
   17f80:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   17f82:	a903      	add	r1, sp, #12
   17f84:	4816      	ldr	r0, [pc, #88]	; (17fe0 <bt_att_disconnected+0xc4>)
   17f86:	f007 ffa3 	bl	1fed0 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   17f8a:	6820      	ldr	r0, [r4, #0]
}
   17f8c:	b004      	add	sp, #16
   17f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   17f92:	f001 bc01 	b.w	19798 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   17f96:	6968      	ldr	r0, [r5, #20]
   17f98:	f7ff f970 	bl	1727c <tx_meta_data_free>
		net_buf_unref(buf);
   17f9c:	4628      	mov	r0, r5
   17f9e:	f003 fccf 	bl	1b940 <net_buf_unref>
   17fa2:	e7cb      	b.n	17f3c <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   17fa4:	6968      	ldr	r0, [r5, #20]
   17fa6:	f7ff f969 	bl	1727c <tx_meta_data_free>
		net_buf_unref(buf);
   17faa:	4628      	mov	r0, r5
   17fac:	f003 fcc8 	bl	1b940 <net_buf_unref>
   17fb0:	e7db      	b.n	17f6a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17fb2:	6882      	ldr	r2, [r0, #8]
	return node->next;
   17fb4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   17fb6:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17fb8:	4295      	cmp	r5, r2
	list->tail = node;
   17fba:	bf08      	it	eq
   17fbc:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   17fbe:	686e      	ldr	r6, [r5, #4]
   17fc0:	b136      	cbz	r6, 17fd0 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   17fc2:	69ab      	ldr	r3, [r5, #24]
   17fc4:	9300      	str	r3, [sp, #0]
   17fc6:	2300      	movs	r3, #0
   17fc8:	6800      	ldr	r0, [r0, #0]
   17fca:	461a      	mov	r2, r3
   17fcc:	210e      	movs	r1, #14
   17fce:	47b0      	blx	r6
		bt_att_req_free(req);
   17fd0:	4628      	mov	r0, r5
   17fd2:	f7ff ff4d 	bl	17e70 <bt_att_req_free>
   17fd6:	e7d0      	b.n	17f7a <bt_att_disconnected+0x5e>
}
   17fd8:	b004      	add	sp, #16
   17fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17fde:	bf00      	nop
   17fe0:	20000888 	.word	0x20000888

00017fe4 <att_timeout>:
{
   17fe4:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
   17fe6:	2145      	movs	r1, #69	; 0x45
{
   17fe8:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   17fea:	4804      	ldr	r0, [pc, #16]	; (17ffc <att_timeout+0x18>)
   17fec:	f00b fd0a 	bl	23a04 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   17ff0:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   17ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   17ff8:	f7ff bf90 	b.w	17f1c <bt_att_disconnected>
   17ffc:	00029b99 	.word	0x00029b99

00018000 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   18000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18002:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   18004:	b950      	cbnz	r0, 1801c <bt_att_send+0x1c>
   18006:	4928      	ldr	r1, [pc, #160]	; (180a8 <bt_att_send+0xa8>)
   18008:	4828      	ldr	r0, [pc, #160]	; (180ac <bt_att_send+0xac>)
   1800a:	f640 62a8 	movw	r2, #3752	; 0xea8
   1800e:	f00b fceb 	bl	239e8 <assert_print>
   18012:	f640 61a8 	movw	r1, #3752	; 0xea8
	__ASSERT_NO_MSG(buf);
   18016:	4824      	ldr	r0, [pc, #144]	; (180a8 <bt_att_send+0xa8>)
   18018:	f00b fcdf 	bl	239da <assert_post_action>
   1801c:	b941      	cbnz	r1, 18030 <bt_att_send+0x30>
   1801e:	4922      	ldr	r1, [pc, #136]	; (180a8 <bt_att_send+0xa8>)
   18020:	4822      	ldr	r0, [pc, #136]	; (180ac <bt_att_send+0xac>)
   18022:	f640 62a9 	movw	r2, #3753	; 0xea9
   18026:	f00b fcdf 	bl	239e8 <assert_print>
   1802a:	f640 61a9 	movw	r1, #3753	; 0xea9
   1802e:	e7f2      	b.n	18016 <bt_att_send+0x16>

	att = att_get(conn);
   18030:	f7ff f848 	bl	170c4 <att_get>
	if (!att) {
   18034:	4605      	mov	r5, r0
   18036:	b940      	cbnz	r0, 1804a <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18038:	6960      	ldr	r0, [r4, #20]
   1803a:	f7ff f91f 	bl	1727c <tx_meta_data_free>
		net_buf_unref(buf);
   1803e:	4620      	mov	r0, r4
   18040:	f003 fc7e 	bl	1b940 <net_buf_unref>
		return -ENOTCONN;
   18044:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   18048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1804a:	f100 060c 	add.w	r6, r0, #12
   1804e:	4621      	mov	r1, r4
   18050:	4630      	mov	r0, r6
   18052:	f003 fc4b 	bl	1b8ec <net_buf_put>
	return list->head;
   18056:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18058:	b14d      	cbz	r5, 1806e <bt_att_send+0x6e>
	return node->next;
   1805a:	f855 49f0 	ldr.w	r4, [r5], #-240
   1805e:	b104      	cbz	r4, 18062 <bt_att_send+0x62>
   18060:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   18062:	4631      	mov	r1, r6
   18064:	4628      	mov	r0, r5
   18066:	f00d f952 	bl	2530e <process_queue>
		if (!err) {
   1806a:	4603      	mov	r3, r0
   1806c:	b980      	cbnz	r0, 18090 <bt_att_send+0x90>
	return 0;
   1806e:	2000      	movs	r0, #0
   18070:	e7ea      	b.n	18048 <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   18072:	2103      	movs	r1, #3
   18074:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18078:	f00d f84d 	bl	25116 <atomic_test_bit>
   1807c:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1807e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   18082:	f00d f848 	bl	25116 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   18086:	4287      	cmp	r7, r0
   18088:	f06f 0301 	mvn.w	r3, #1
   1808c:	d107      	bne.n	1809e <bt_att_send+0x9e>
   1808e:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18090:	2c00      	cmp	r4, #0
   18092:	d0ec      	beq.n	1806e <bt_att_send+0x6e>
   18094:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   18098:	b922      	cbnz	r2, 180a4 <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
   1809a:	3302      	adds	r3, #2
   1809c:	d0e9      	beq.n	18072 <bt_att_send+0x72>
{
   1809e:	4625      	mov	r5, r4
   180a0:	4614      	mov	r4, r2
   180a2:	e7de      	b.n	18062 <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   180a4:	3af0      	subs	r2, #240	; 0xf0
   180a6:	e7f8      	b.n	1809a <bt_att_send+0x9a>
   180a8:	00029984 	.word	0x00029984
   180ac:	000280bd 	.word	0x000280bd

000180b0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   180b0:	b510      	push	{r4, lr}
   180b2:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   180b4:	b950      	cbnz	r0, 180cc <bt_att_req_send+0x1c>
   180b6:	4914      	ldr	r1, [pc, #80]	; (18108 <bt_att_req_send+0x58>)
   180b8:	4814      	ldr	r0, [pc, #80]	; (1810c <bt_att_req_send+0x5c>)
   180ba:	f640 62be 	movw	r2, #3774	; 0xebe
   180be:	f00b fc93 	bl	239e8 <assert_print>
   180c2:	f640 61be 	movw	r1, #3774	; 0xebe
	__ASSERT_NO_MSG(req);
   180c6:	4810      	ldr	r0, [pc, #64]	; (18108 <bt_att_req_send+0x58>)
   180c8:	f00b fc87 	bl	239da <assert_post_action>
   180cc:	b941      	cbnz	r1, 180e0 <bt_att_req_send+0x30>
   180ce:	490e      	ldr	r1, [pc, #56]	; (18108 <bt_att_req_send+0x58>)
   180d0:	480e      	ldr	r0, [pc, #56]	; (1810c <bt_att_req_send+0x5c>)
   180d2:	f640 62bf 	movw	r2, #3775	; 0xebf
   180d6:	f00b fc87 	bl	239e8 <assert_print>
   180da:	f640 61bf 	movw	r1, #3775	; 0xebf
   180de:	e7f2      	b.n	180c6 <bt_att_req_send+0x16>

	att = att_get(conn);
   180e0:	f7fe fff0 	bl	170c4 <att_get>
	if (!att) {
   180e4:	b160      	cbz	r0, 18100 <bt_att_req_send+0x50>
	parent->next = child;
   180e6:	2300      	movs	r3, #0
   180e8:	6023      	str	r3, [r4, #0]
	return list->tail;
   180ea:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   180ec:	b92b      	cbnz	r3, 180fa <bt_att_req_send+0x4a>
	list->head = node;
   180ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   180f2:	f00d fa6f 	bl	255d4 <att_req_send_process>

	return 0;
   180f6:	2000      	movs	r0, #0
}
   180f8:	bd10      	pop	{r4, pc}
	parent->next = child;
   180fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   180fc:	6084      	str	r4, [r0, #8]
}
   180fe:	e7f8      	b.n	180f2 <bt_att_req_send+0x42>
		return -ENOTCONN;
   18100:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18104:	e7f8      	b.n	180f8 <bt_att_req_send+0x48>
   18106:	bf00      	nop
   18108:	00029984 	.word	0x00029984
   1810c:	000280bd 	.word	0x000280bd

00018110 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   18110:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   18112:	4908      	ldr	r1, [pc, #32]	; (18134 <db_hash_set+0x24>)
{
   18114:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   18116:	4618      	mov	r0, r3
   18118:	2210      	movs	r2, #16
   1811a:	47a0      	blx	r4
	if (len < 0) {
   1811c:	1e04      	subs	r4, r0, #0
   1811e:	da06      	bge.n	1812e <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   18120:	4805      	ldr	r0, [pc, #20]	; (18138 <db_hash_set+0x28>)
   18122:	4622      	mov	r2, r4
   18124:	2145      	movs	r1, #69	; 0x45
   18126:	f00b fc6d 	bl	23a04 <z_log_minimal_printk>
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   1812a:	4620      	mov	r0, r4
   1812c:	bd10      	pop	{r4, pc}
	return 0;
   1812e:	2400      	movs	r4, #0
   18130:	e7fb      	b.n	1812a <db_hash_set+0x1a>
   18132:	bf00      	nop
   18134:	20001a48 	.word	0x20001a48
   18138:	00029bb1 	.word	0x00029bb1

0001813c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1813c:	2210      	movs	r2, #16
{
   1813e:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   18140:	4906      	ldr	r1, [pc, #24]	; (1815c <db_hash_store+0x20>)
   18142:	4807      	ldr	r0, [pc, #28]	; (18160 <db_hash_store+0x24>)
   18144:	f7fa fa16 	bl	12574 <settings_save_one>
	if (err) {
   18148:	4602      	mov	r2, r0
   1814a:	b128      	cbz	r0, 18158 <db_hash_store+0x1c>
}
   1814c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   18150:	4804      	ldr	r0, [pc, #16]	; (18164 <db_hash_store+0x28>)
   18152:	2145      	movs	r1, #69	; 0x45
   18154:	f00b bc56 	b.w	23a04 <z_log_minimal_printk>
}
   18158:	bd08      	pop	{r3, pc}
   1815a:	bf00      	nop
   1815c:	20001a38 	.word	0x20001a38
   18160:	00029bd7 	.word	0x00029bd7
   18164:	00029bdf 	.word	0x00029bdf

00018168 <find_cf_cfg>:
{
   18168:	b570      	push	{r4, r5, r6, lr}
   1816a:	4d14      	ldr	r5, [pc, #80]	; (181bc <find_cf_cfg+0x54>)
		if (!conn) {
   1816c:	4606      	mov	r6, r0
   1816e:	b140      	cbz	r0, 18182 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18170:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   18174:	462a      	mov	r2, r5
   18176:	1e6c      	subs	r4, r5, #1
   18178:	f00c fee2 	bl	24f40 <bt_conn_is_peer_addr_le>
   1817c:	b198      	cbz	r0, 181a6 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1817e:	4620      	mov	r0, r4
   18180:	e00c      	b.n	1819c <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18182:	490f      	ldr	r1, [pc, #60]	; (181c0 <find_cf_cfg+0x58>)
   18184:	4628      	mov	r0, r5
   18186:	f00d fc6f 	bl	25a68 <bt_addr_le_eq>
   1818a:	b940      	cbnz	r0, 1819e <find_cf_cfg+0x36>
   1818c:	490c      	ldr	r1, [pc, #48]	; (181c0 <find_cf_cfg+0x58>)
   1818e:	f105 0010 	add.w	r0, r5, #16
   18192:	f00d fc69 	bl	25a68 <bt_addr_le_eq>
   18196:	b120      	cbz	r0, 181a2 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   18198:	f105 000f 	add.w	r0, r5, #15
}
   1819c:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1819e:	1e68      	subs	r0, r5, #1
   181a0:	e7fc      	b.n	1819c <find_cf_cfg+0x34>
	return NULL;
   181a2:	2000      	movs	r0, #0
   181a4:	e7fa      	b.n	1819c <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   181a6:	7c21      	ldrb	r1, [r4, #16]
   181a8:	f104 0211 	add.w	r2, r4, #17
   181ac:	4630      	mov	r0, r6
   181ae:	f00c fec7 	bl	24f40 <bt_conn_is_peer_addr_le>
   181b2:	2800      	cmp	r0, #0
   181b4:	d0f5      	beq.n	181a2 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   181b6:	f104 0010 	add.w	r0, r4, #16
   181ba:	e7ef      	b.n	1819c <find_cf_cfg+0x34>
   181bc:	200021dd 	.word	0x200021dd
   181c0:	000289b2 	.word	0x000289b2

000181c4 <find_sc_cfg>:
{
   181c4:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   181c6:	4c0e      	ldr	r4, [pc, #56]	; (18200 <find_sc_cfg+0x3c>)
   181c8:	7823      	ldrb	r3, [r4, #0]
   181ca:	4283      	cmp	r3, r0
{
   181cc:	4605      	mov	r5, r0
   181ce:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   181d0:	d00c      	beq.n	181ec <find_sc_cfg+0x28>
   181d2:	7b23      	ldrb	r3, [r4, #12]
   181d4:	42ab      	cmp	r3, r5
   181d6:	d110      	bne.n	181fa <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   181d8:	480a      	ldr	r0, [pc, #40]	; (18204 <find_sc_cfg+0x40>)
   181da:	4631      	mov	r1, r6
   181dc:	f00d fc44 	bl	25a68 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   181e0:	b158      	cbz	r0, 181fa <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   181e2:	2301      	movs	r3, #1
			return &sc_cfg[i];
   181e4:	220c      	movs	r2, #12
   181e6:	fb02 4003 	mla	r0, r2, r3, r4
   181ea:	e007      	b.n	181fc <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   181ec:	1c60      	adds	r0, r4, #1
   181ee:	f00d fc3b 	bl	25a68 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   181f2:	2800      	cmp	r0, #0
   181f4:	d0ed      	beq.n	181d2 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   181f6:	2300      	movs	r3, #0
   181f8:	e7f4      	b.n	181e4 <find_sc_cfg+0x20>
	return NULL;
   181fa:	2000      	movs	r0, #0
}
   181fc:	bd70      	pop	{r4, r5, r6, pc}
   181fe:	bf00      	nop
   18200:	20002560 	.word	0x20002560
   18204:	2000256d 	.word	0x2000256d

00018208 <find_ccc_cfg>:
{
   18208:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   1820a:	1c4a      	adds	r2, r1, #1
{
   1820c:	460c      	mov	r4, r1
		if (conn) {
   1820e:	b138      	cbz	r0, 18220 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   18210:	7809      	ldrb	r1, [r1, #0]
   18212:	f00c fe95 	bl	24f40 <bt_conn_is_peer_addr_le>
   18216:	b108      	cbz	r0, 1821c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   18218:	4620      	mov	r0, r4
}
   1821a:	bd10      	pop	{r4, pc}
	return NULL;
   1821c:	2000      	movs	r0, #0
   1821e:	e7fc      	b.n	1821a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18220:	4902      	ldr	r1, [pc, #8]	; (1822c <find_ccc_cfg+0x24>)
   18222:	4610      	mov	r0, r2
   18224:	f00d fc20 	bl	25a68 <bt_addr_le_eq>
   18228:	e7f5      	b.n	18216 <find_ccc_cfg+0xe>
   1822a:	bf00      	nop
   1822c:	000289b2 	.word	0x000289b2

00018230 <find_cf_cfg_by_addr>:
{
   18230:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   18232:	4c0e      	ldr	r4, [pc, #56]	; (1826c <find_cf_cfg_by_addr+0x3c>)
   18234:	7823      	ldrb	r3, [r4, #0]
   18236:	4283      	cmp	r3, r0
{
   18238:	4606      	mov	r6, r0
   1823a:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1823c:	d00b      	beq.n	18256 <find_cf_cfg_by_addr+0x26>
   1823e:	7c23      	ldrb	r3, [r4, #16]
   18240:	42b3      	cmp	r3, r6
   18242:	d110      	bne.n	18266 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   18244:	490a      	ldr	r1, [pc, #40]	; (18270 <find_cf_cfg_by_addr+0x40>)
   18246:	4628      	mov	r0, r5
   18248:	f00d fc0e 	bl	25a68 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1824c:	b158      	cbz	r0, 18266 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1824e:	2301      	movs	r3, #1
				return &cf_cfg[i];
   18250:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   18254:	e008      	b.n	18268 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   18256:	1c61      	adds	r1, r4, #1
   18258:	4628      	mov	r0, r5
   1825a:	f00d fc05 	bl	25a68 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1825e:	2800      	cmp	r0, #0
   18260:	d0ed      	beq.n	1823e <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18262:	2300      	movs	r3, #0
   18264:	e7f4      	b.n	18250 <find_cf_cfg_by_addr+0x20>
	return NULL;
   18266:	2000      	movs	r0, #0
}
   18268:	bd70      	pop	{r4, r5, r6, pc}
   1826a:	bf00      	nop
   1826c:	200021dc 	.word	0x200021dc
   18270:	200021ed 	.word	0x200021ed

00018274 <cf_write>:
{
   18274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18278:	461f      	mov	r7, r3
   1827a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1827e:	2b01      	cmp	r3, #1
{
   18280:	4606      	mov	r6, r0
   18282:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   18284:	d835      	bhi.n	182f2 <cf_write+0x7e>
	if (offset + len > sizeof(cfg->data)) {
   18286:	443b      	add	r3, r7
   18288:	2b01      	cmp	r3, #1
   1828a:	463d      	mov	r5, r7
   1828c:	dc34      	bgt.n	182f8 <cf_write+0x84>
	cfg = find_cf_cfg(conn);
   1828e:	f7ff ff6b 	bl	18168 <find_cf_cfg>
	if (!cfg) {
   18292:	4604      	mov	r4, r0
   18294:	b960      	cbnz	r0, 182b0 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
   18296:	f7ff ff67 	bl	18168 <find_cf_cfg>
	if (!cfg) {
   1829a:	4604      	mov	r4, r0
   1829c:	b940      	cbnz	r0, 182b0 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
   1829e:	4819      	ldr	r0, [pc, #100]	; (18304 <cf_write+0x90>)
   182a0:	2157      	movs	r1, #87	; 0x57
   182a2:	f00b fbaf 	bl	23a04 <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   182a6:	f06f 0510 	mvn.w	r5, #16
}
   182aa:	4628      	mov	r0, r5
   182ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   182b0:	b197      	cbz	r7, 182d8 <cf_write+0x64>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   182b2:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   182b4:	f898 2000 	ldrb.w	r2, [r8]
   182b8:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   182ba:	fa21 f003 	lsr.w	r0, r1, r3
   182be:	07c7      	lsls	r7, r0, #31
   182c0:	d503      	bpl.n	182ca <cf_write+0x56>
		    !(value[i / 8] & BIT(i % 8))) {
   182c2:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   182c6:	07c0      	lsls	r0, r0, #31
   182c8:	d519      	bpl.n	182fe <cf_write+0x8a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   182ca:	3301      	adds	r3, #1
   182cc:	2b03      	cmp	r3, #3
   182ce:	d1f4      	bne.n	182ba <cf_write+0x46>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   182d0:	f002 0207 	and.w	r2, r2, #7
   182d4:	4311      	orrs	r1, r2
   182d6:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   182d8:	f106 0190 	add.w	r1, r6, #144	; 0x90
   182dc:	1c60      	adds	r0, r4, #1
   182de:	f00d fbed 	bl	25abc <bt_addr_le_copy>
	cfg->id = conn->id;
   182e2:	4620      	mov	r0, r4
   182e4:	7a33      	ldrb	r3, [r6, #8]
   182e6:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   182ea:	2101      	movs	r1, #1
   182ec:	f00d fbd7 	bl	25a9e <atomic_or>
}
   182f0:	e7db      	b.n	182aa <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   182f2:	f06f 0506 	mvn.w	r5, #6
   182f6:	e7d8      	b.n	182aa <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   182f8:	f06f 050c 	mvn.w	r5, #12
   182fc:	e7d5      	b.n	182aa <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   182fe:	f06f 0512 	mvn.w	r5, #18
   18302:	e7d2      	b.n	182aa <cf_write+0x36>
   18304:	00029c0a 	.word	0x00029c0a

00018308 <ccc_load>:
{
   18308:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1830a:	4b20      	ldr	r3, [pc, #128]	; (1838c <ccc_load+0x84>)
{
   1830c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1830e:	6882      	ldr	r2, [r0, #8]
   18310:	429a      	cmp	r2, r3
   18312:	d10f      	bne.n	18334 <ccc_load+0x2c>
	if (!load->entry) {
   18314:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   18316:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   18318:	b975      	cbnz	r5, 18338 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   1831a:	7922      	ldrb	r2, [r4, #4]
   1831c:	6821      	ldr	r1, [r4, #0]
   1831e:	4630      	mov	r0, r6
   18320:	f00d fbaa 	bl	25a78 <ccc_find_cfg>
	if (!cfg) {
   18324:	4604      	mov	r4, r0
   18326:	b128      	cbz	r0, 18334 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18328:	4919      	ldr	r1, [pc, #100]	; (18390 <ccc_load+0x88>)
   1832a:	3001      	adds	r0, #1
   1832c:	f00d fbc6 	bl	25abc <bt_addr_le_copy>
	cfg->id = 0U;
   18330:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   18332:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   18334:	2001      	movs	r0, #1
}
   18336:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   18338:	68e0      	ldr	r0, [r4, #12]
   1833a:	2800      	cmp	r0, #0
   1833c:	d0fb      	beq.n	18336 <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1833e:	882b      	ldrh	r3, [r5, #0]
   18340:	428b      	cmp	r3, r1
   18342:	d00a      	beq.n	1835a <ccc_load+0x52>
		if (load->entry->handle < handle) {
   18344:	d2f6      	bcs.n	18334 <ccc_load+0x2c>
	load->count--;
   18346:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   18348:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1834a:	3801      	subs	r0, #1
	load->entry++;
   1834c:	3304      	adds	r3, #4
	load->count--;
   1834e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18350:	3800      	subs	r0, #0
	load->entry++;
   18352:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18354:	bf18      	it	ne
   18356:	2001      	movne	r0, #1
   18358:	e7ed      	b.n	18336 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1835a:	7922      	ldrb	r2, [r4, #4]
   1835c:	6821      	ldr	r1, [r4, #0]
   1835e:	4630      	mov	r0, r6
   18360:	f00d fb8a 	bl	25a78 <ccc_find_cfg>
	if (!cfg) {
   18364:	4605      	mov	r5, r0
   18366:	b968      	cbnz	r0, 18384 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   18368:	4602      	mov	r2, r0
   1836a:	4909      	ldr	r1, [pc, #36]	; (18390 <ccc_load+0x88>)
   1836c:	4630      	mov	r0, r6
   1836e:	f00d fb83 	bl	25a78 <ccc_find_cfg>
		if (!cfg) {
   18372:	4605      	mov	r5, r0
   18374:	2800      	cmp	r0, #0
   18376:	d0e6      	beq.n	18346 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   18378:	6821      	ldr	r1, [r4, #0]
   1837a:	3001      	adds	r0, #1
   1837c:	f00d fb9e 	bl	25abc <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   18380:	7923      	ldrb	r3, [r4, #4]
   18382:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   18384:	68a3      	ldr	r3, [r4, #8]
   18386:	885b      	ldrh	r3, [r3, #2]
   18388:	812b      	strh	r3, [r5, #8]
   1838a:	e7dc      	b.n	18346 <ccc_load+0x3e>
   1838c:	00018831 	.word	0x00018831
   18390:	000289b2 	.word	0x000289b2

00018394 <sc_store>:
{
   18394:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   18396:	4605      	mov	r5, r0
{
   18398:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1839a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1839e:	4604      	mov	r4, r0
	if (cfg->id) {
   183a0:	b1ca      	cbz	r2, 183d6 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   183a2:	ae02      	add	r6, sp, #8
   183a4:	2104      	movs	r1, #4
   183a6:	4630      	mov	r0, r6
   183a8:	f00b f888 	bl	234bc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   183ac:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   183ae:	4a0b      	ldr	r2, [pc, #44]	; (183dc <sc_store+0x48>)
   183b0:	462b      	mov	r3, r5
   183b2:	2124      	movs	r1, #36	; 0x24
   183b4:	a803      	add	r0, sp, #12
   183b6:	f7fb fbcf 	bl	13b58 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   183ba:	2204      	movs	r2, #4
   183bc:	f104 0108 	add.w	r1, r4, #8
   183c0:	a803      	add	r0, sp, #12
   183c2:	f7fa f8d7 	bl	12574 <settings_save_one>
	if (err) {
   183c6:	4602      	mov	r2, r0
   183c8:	b118      	cbz	r0, 183d2 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   183ca:	4805      	ldr	r0, [pc, #20]	; (183e0 <sc_store+0x4c>)
   183cc:	2145      	movs	r1, #69	; 0x45
   183ce:	f00b fb19 	bl	23a04 <z_log_minimal_printk>
}
   183d2:	b00c      	add	sp, #48	; 0x30
   183d4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   183d6:	9200      	str	r2, [sp, #0]
   183d8:	e7e9      	b.n	183ae <sc_store+0x1a>
   183da:	bf00      	nop
   183dc:	00029f93 	.word	0x00029f93
   183e0:	00029c3b 	.word	0x00029c3b

000183e4 <sc_save>:
{
   183e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183e8:	4680      	mov	r8, r0
   183ea:	460f      	mov	r7, r1
   183ec:	4616      	mov	r6, r2
   183ee:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   183f0:	f7ff fee8 	bl	181c4 <find_sc_cfg>
	if (!cfg) {
   183f4:	4604      	mov	r4, r0
   183f6:	b978      	cbnz	r0, 18418 <sc_save+0x34>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   183f8:	4915      	ldr	r1, [pc, #84]	; (18450 <sc_save+0x6c>)
   183fa:	f7ff fee3 	bl	181c4 <find_sc_cfg>
		if (!cfg) {
   183fe:	4604      	mov	r4, r0
   18400:	b928      	cbnz	r0, 1840e <sc_save+0x2a>
}
   18402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("unable to save SC: no cfg left");
   18406:	4813      	ldr	r0, [pc, #76]	; (18454 <sc_save+0x70>)
   18408:	2145      	movs	r1, #69	; 0x45
   1840a:	f00b bafb 	b.w	23a04 <z_log_minimal_printk>
		cfg->id = id;
   1840e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   18412:	4639      	mov	r1, r7
   18414:	f00d fb52 	bl	25abc <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   18418:	8922      	ldrh	r2, [r4, #8]
   1841a:	8963      	ldrh	r3, [r4, #10]
   1841c:	b96a      	cbnz	r2, 1843a <sc_save+0x56>
   1841e:	b973      	cbnz	r3, 1843e <sc_save+0x5a>
		cfg->data.start = start;
   18420:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   18422:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   18424:	4621      	mov	r1, r4
   18426:	f811 0b01 	ldrb.w	r0, [r1], #1
   1842a:	f00c fb0a 	bl	24a42 <bt_addr_le_is_bonded>
   1842e:	b140      	cbz	r0, 18442 <sc_save+0x5e>
		sc_store(cfg);
   18430:	4620      	mov	r0, r4
}
   18432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   18436:	f7ff bfad 	b.w	18394 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1843a:	4296      	cmp	r6, r2
   1843c:	d303      	bcc.n	18446 <sc_save+0x62>
   1843e:	42ab      	cmp	r3, r5
   18440:	d3ef      	bcc.n	18422 <sc_save+0x3e>
}
   18442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   18446:	42ab      	cmp	r3, r5
		*start = new_start;
   18448:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1844a:	d2eb      	bcs.n	18424 <sc_save+0x40>
   1844c:	e7e9      	b.n	18422 <sc_save+0x3e>
   1844e:	bf00      	nop
   18450:	000289b2 	.word	0x000289b2
   18454:	00029c5c 	.word	0x00029c5c

00018458 <sc_set>:
{
   18458:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1845c:	460e      	mov	r6, r1
   1845e:	4617      	mov	r7, r2
   18460:	4698      	mov	r8, r3
	if (!name) {
   18462:	4604      	mov	r4, r0
   18464:	b948      	cbnz	r0, 1847a <sc_set+0x22>
		BT_ERR("Insufficient number of arguments");
   18466:	4829      	ldr	r0, [pc, #164]	; (1850c <sc_set+0xb4>)
   18468:	2145      	movs	r1, #69	; 0x45
   1846a:	f00b facb 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   1846e:	f06f 0515 	mvn.w	r5, #21
}
   18472:	4628      	mov	r0, r5
   18474:	b004      	add	sp, #16
   18476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1847a:	a902      	add	r1, sp, #8
   1847c:	f00c f986 	bl	2478c <bt_settings_decode_key>
	if (err) {
   18480:	4605      	mov	r5, r0
   18482:	b128      	cbz	r0, 18490 <sc_set+0x38>
		BT_ERR("Unable to decode address %s", name);
   18484:	4822      	ldr	r0, [pc, #136]	; (18510 <sc_set+0xb8>)
   18486:	4622      	mov	r2, r4
   18488:	2145      	movs	r1, #69	; 0x45
   1848a:	f00b fabb 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   1848e:	e7ee      	b.n	1846e <sc_set+0x16>
	settings_name_next(name, &next);
   18490:	a901      	add	r1, sp, #4
   18492:	4620      	mov	r0, r4
   18494:	f00b fd62 	bl	23f5c <settings_name_next>
	if (!next) {
   18498:	9801      	ldr	r0, [sp, #4]
   1849a:	b140      	cbz	r0, 184ae <sc_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   1849c:	220a      	movs	r2, #10
   1849e:	4629      	mov	r1, r5
   184a0:	f00c f864 	bl	2456c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   184a4:	4602      	mov	r2, r0
   184a6:	b110      	cbz	r0, 184ae <sc_set+0x56>
			BT_ERR("Invalid local identity %lu", next_id);
   184a8:	481a      	ldr	r0, [pc, #104]	; (18514 <sc_set+0xbc>)
   184aa:	2145      	movs	r1, #69	; 0x45
   184ac:	e7ed      	b.n	1848a <sc_set+0x32>
	cfg = find_sc_cfg(id, &addr);
   184ae:	a902      	add	r1, sp, #8
   184b0:	2000      	movs	r0, #0
   184b2:	f7ff fe87 	bl	181c4 <find_sc_cfg>
	if (!cfg && len_rd) {
   184b6:	4604      	mov	r4, r0
   184b8:	bb08      	cbnz	r0, 184fe <sc_set+0xa6>
   184ba:	2e00      	cmp	r6, #0
   184bc:	d0d9      	beq.n	18472 <sc_set+0x1a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   184be:	4916      	ldr	r1, [pc, #88]	; (18518 <sc_set+0xc0>)
   184c0:	f7ff fe80 	bl	181c4 <find_sc_cfg>
		if (!cfg) {
   184c4:	4604      	mov	r4, r0
   184c6:	b930      	cbnz	r0, 184d6 <sc_set+0x7e>
			BT_ERR("Unable to restore SC: no cfg left");
   184c8:	4814      	ldr	r0, [pc, #80]	; (1851c <sc_set+0xc4>)
   184ca:	2145      	movs	r1, #69	; 0x45
   184cc:	f00b fa9a 	bl	23a04 <z_log_minimal_printk>
			return -ENOMEM;
   184d0:	f06f 050b 	mvn.w	r5, #11
   184d4:	e7cd      	b.n	18472 <sc_set+0x1a>
		cfg->id = id;
   184d6:	2300      	movs	r3, #0
   184d8:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   184dc:	a902      	add	r1, sp, #8
   184de:	f00d faed 	bl	25abc <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   184e2:	f104 0108 	add.w	r1, r4, #8
   184e6:	2204      	movs	r2, #4
   184e8:	4640      	mov	r0, r8
   184ea:	47b8      	blx	r7
		if (len < 0) {
   184ec:	1e04      	subs	r4, r0, #0
   184ee:	dac0      	bge.n	18472 <sc_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
   184f0:	480b      	ldr	r0, [pc, #44]	; (18520 <sc_set+0xc8>)
   184f2:	4622      	mov	r2, r4
   184f4:	2145      	movs	r1, #69	; 0x45
   184f6:	f00b fa85 	bl	23a04 <z_log_minimal_printk>
			return len;
   184fa:	4625      	mov	r5, r4
   184fc:	e7b9      	b.n	18472 <sc_set+0x1a>
	if (len_rd) {
   184fe:	2e00      	cmp	r6, #0
   18500:	d1ef      	bne.n	184e2 <sc_set+0x8a>
		memset(cfg, 0, sizeof(*cfg));
   18502:	220c      	movs	r2, #12
   18504:	4631      	mov	r1, r6
   18506:	f00c f8fd 	bl	24704 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1850a:	e7b2      	b.n	18472 <sc_set+0x1a>
   1850c:	00028a12 	.word	0x00028a12
   18510:	00029c80 	.word	0x00029c80
   18514:	00029ca1 	.word	0x00029ca1
   18518:	000289b2 	.word	0x000289b2
   1851c:	00029cc1 	.word	0x00029cc1
   18520:	00029bb1 	.word	0x00029bb1

00018524 <db_hash_commit>:

static int db_hash_commit(void)
{
   18524:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18526:	2108      	movs	r1, #8
   18528:	4809      	ldr	r0, [pc, #36]	; (18550 <db_hash_commit+0x2c>)
   1852a:	f00d fab8 	bl	25a9e <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1852e:	4809      	ldr	r0, [pc, #36]	; (18554 <db_hash_commit+0x30>)
   18530:	2200      	movs	r2, #0
   18532:	2300      	movs	r3, #0
   18534:	f7fb fbb6 	bl	13ca4 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   18538:	1e04      	subs	r4, r0, #0
   1853a:	da06      	bge.n	1854a <db_hash_commit+0x26>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   1853c:	4806      	ldr	r0, [pc, #24]	; (18558 <db_hash_commit+0x34>)
   1853e:	4622      	mov	r2, r4
   18540:	2145      	movs	r1, #69	; 0x45
   18542:	f00b fa5f 	bl	23a04 <z_log_minimal_printk>
	}

	return err;
}
   18546:	4620      	mov	r0, r4
   18548:	bd10      	pop	{r4, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1854a:	2400      	movs	r4, #0
	return err;
   1854c:	e7fb      	b.n	18546 <db_hash_commit+0x22>
   1854e:	bf00      	nop
   18550:	20001b00 	.word	0x20001b00
   18554:	20001a58 	.word	0x20001a58
   18558:	00029ce8 	.word	0x00029ce8

0001855c <clear_cf_cfg>:
{
   1855c:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1855e:	490c      	ldr	r1, [pc, #48]	; (18590 <clear_cf_cfg+0x34>)
{
   18560:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18562:	3001      	adds	r0, #1
   18564:	f00d faaa 	bl	25abc <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   18568:	f104 0008 	add.w	r0, r4, #8
   1856c:	2201      	movs	r2, #1
   1856e:	2100      	movs	r1, #0
   18570:	f00c f8c8 	bl	24704 <memset>
   18574:	f3bf 8f5b 	dmb	ish
   18578:	340c      	adds	r4, #12
   1857a:	2300      	movs	r3, #0
   1857c:	e854 2f00 	ldrex	r2, [r4]
   18580:	e844 3100 	strex	r1, r3, [r4]
   18584:	2900      	cmp	r1, #0
   18586:	d1f9      	bne.n	1857c <clear_cf_cfg+0x20>
   18588:	f3bf 8f5b 	dmb	ish
}
   1858c:	bd10      	pop	{r4, pc}
   1858e:	bf00      	nop
   18590:	000289b2 	.word	0x000289b2

00018594 <cf_set>:
{
   18594:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18598:	4688      	mov	r8, r1
   1859a:	4616      	mov	r6, r2
   1859c:	461f      	mov	r7, r3
	if (!name) {
   1859e:	4604      	mov	r4, r0
   185a0:	b948      	cbnz	r0, 185b6 <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
   185a2:	4828      	ldr	r0, [pc, #160]	; (18644 <cf_set+0xb0>)
   185a4:	2145      	movs	r1, #69	; 0x45
   185a6:	f00b fa2d 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   185aa:	f06f 0515 	mvn.w	r5, #21
}
   185ae:	4628      	mov	r0, r5
   185b0:	b004      	add	sp, #16
   185b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   185b6:	a902      	add	r1, sp, #8
   185b8:	f00c f8e8 	bl	2478c <bt_settings_decode_key>
	if (err) {
   185bc:	4605      	mov	r5, r0
   185be:	b128      	cbz	r0, 185cc <cf_set+0x38>
		BT_ERR("Unable to decode address %s", name);
   185c0:	4821      	ldr	r0, [pc, #132]	; (18648 <cf_set+0xb4>)
   185c2:	4622      	mov	r2, r4
   185c4:	2145      	movs	r1, #69	; 0x45
   185c6:	f00b fa1d 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   185ca:	e7ee      	b.n	185aa <cf_set+0x16>
	settings_name_next(name, &next);
   185cc:	a901      	add	r1, sp, #4
   185ce:	4620      	mov	r0, r4
   185d0:	f00b fcc4 	bl	23f5c <settings_name_next>
	if (!next) {
   185d4:	9801      	ldr	r0, [sp, #4]
   185d6:	b140      	cbz	r0, 185ea <cf_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   185d8:	220a      	movs	r2, #10
   185da:	4629      	mov	r1, r5
   185dc:	f00b ffc6 	bl	2456c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   185e0:	4602      	mov	r2, r0
   185e2:	b110      	cbz	r0, 185ea <cf_set+0x56>
			BT_ERR("Invalid local identity %lu", next_id);
   185e4:	4819      	ldr	r0, [pc, #100]	; (1864c <cf_set+0xb8>)
   185e6:	2145      	movs	r1, #69	; 0x45
   185e8:	e7ed      	b.n	185c6 <cf_set+0x32>
	cfg = find_cf_cfg_by_addr(id, &addr);
   185ea:	a902      	add	r1, sp, #8
   185ec:	2000      	movs	r0, #0
   185ee:	f7ff fe1f 	bl	18230 <find_cf_cfg_by_addr>
	if (!cfg) {
   185f2:	4604      	mov	r4, r0
   185f4:	b980      	cbnz	r0, 18618 <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
   185f6:	f7ff fdb7 	bl	18168 <find_cf_cfg>
		if (!cfg) {
   185fa:	4604      	mov	r4, r0
   185fc:	b930      	cbnz	r0, 1860c <cf_set+0x78>
			BT_ERR("Unable to restore CF: no cfg left");
   185fe:	4814      	ldr	r0, [pc, #80]	; (18650 <cf_set+0xbc>)
   18600:	2145      	movs	r1, #69	; 0x45
   18602:	f00b f9ff 	bl	23a04 <z_log_minimal_printk>
			return -ENOMEM;
   18606:	f06f 050b 	mvn.w	r5, #11
   1860a:	e7d0      	b.n	185ae <cf_set+0x1a>
		cfg->id = id;
   1860c:	2300      	movs	r3, #0
   1860e:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   18612:	a902      	add	r1, sp, #8
   18614:	f00d fa52 	bl	25abc <bt_addr_le_copy>
	if (len_rd) {
   18618:	f1b8 0f00 	cmp.w	r8, #0
   1861c:	d00d      	beq.n	1863a <cf_set+0xa6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1861e:	f104 0108 	add.w	r1, r4, #8
   18622:	2201      	movs	r2, #1
   18624:	4638      	mov	r0, r7
   18626:	47b0      	blx	r6
		if (len < 0) {
   18628:	1e04      	subs	r4, r0, #0
   1862a:	dac0      	bge.n	185ae <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
   1862c:	4809      	ldr	r0, [pc, #36]	; (18654 <cf_set+0xc0>)
   1862e:	4622      	mov	r2, r4
   18630:	2145      	movs	r1, #69	; 0x45
   18632:	f00b f9e7 	bl	23a04 <z_log_minimal_printk>
			return len;
   18636:	4625      	mov	r5, r4
   18638:	e7b9      	b.n	185ae <cf_set+0x1a>
		clear_cf_cfg(cfg);
   1863a:	4620      	mov	r0, r4
   1863c:	f7ff ff8e 	bl	1855c <clear_cf_cfg>
   18640:	e7b5      	b.n	185ae <cf_set+0x1a>
   18642:	bf00      	nop
   18644:	00028a12 	.word	0x00028a12
   18648:	00029c80 	.word	0x00029c80
   1864c:	00029ca1 	.word	0x00029ca1
   18650:	00029d21 	.word	0x00029d21
   18654:	00029bb1 	.word	0x00029bb1

00018658 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   18658:	b508      	push	{r3, lr}
   1865a:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1865c:	6881      	ldr	r1, [r0, #8]
   1865e:	4a07      	ldr	r2, [pc, #28]	; (1867c <remove_peer_from_attr+0x24>)
   18660:	4291      	cmp	r1, r2
   18662:	d109      	bne.n	18678 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   18664:	791a      	ldrb	r2, [r3, #4]
   18666:	6819      	ldr	r1, [r3, #0]
   18668:	68c0      	ldr	r0, [r0, #12]
   1866a:	f00d fa05 	bl	25a78 <ccc_find_cfg>
	if (cfg) {
   1866e:	b118      	cbz	r0, 18678 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   18670:	220a      	movs	r2, #10
   18672:	2100      	movs	r1, #0
   18674:	f00c f846 	bl	24704 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   18678:	2001      	movs	r0, #1
   1867a:	bd08      	pop	{r3, pc}
   1867c:	00018831 	.word	0x00018831

00018680 <ccc_save>:
{
   18680:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18682:	4b0c      	ldr	r3, [pc, #48]	; (186b4 <ccc_save+0x34>)
{
   18684:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18686:	6882      	ldr	r2, [r0, #8]
   18688:	429a      	cmp	r2, r3
{
   1868a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1868c:	d10f      	bne.n	186ae <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1868e:	7922      	ldrb	r2, [r4, #4]
   18690:	6821      	ldr	r1, [r4, #0]
   18692:	68c0      	ldr	r0, [r0, #12]
   18694:	f00d f9f0 	bl	25a78 <ccc_find_cfg>
	if (!cfg) {
   18698:	b148      	cbz	r0, 186ae <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1869a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1869e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   186a2:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   186a4:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   186a6:	8901      	ldrh	r1, [r0, #8]
   186a8:	8151      	strh	r1, [r2, #10]
	save->count++;
   186aa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   186ae:	2001      	movs	r0, #1
   186b0:	bd38      	pop	{r3, r4, r5, pc}
   186b2:	bf00      	nop
   186b4:	00018831 	.word	0x00018831

000186b8 <bt_gatt_clear_sc>:
{
   186b8:	b570      	push	{r4, r5, r6, lr}
   186ba:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   186bc:	f7ff fd82 	bl	181c4 <find_sc_cfg>
	if (!cfg) {
   186c0:	4604      	mov	r4, r0
   186c2:	b1e8      	cbz	r0, 18700 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   186c4:	4605      	mov	r5, r0
   186c6:	f815 2b01 	ldrb.w	r2, [r5], #1
   186ca:	b1e2      	cbz	r2, 18706 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   186cc:	ae02      	add	r6, sp, #8
   186ce:	2104      	movs	r1, #4
   186d0:	4630      	mov	r0, r6
   186d2:	f00a fef3 	bl	234bc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   186d6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   186d8:	4a0c      	ldr	r2, [pc, #48]	; (1870c <bt_gatt_clear_sc+0x54>)
   186da:	462b      	mov	r3, r5
   186dc:	2124      	movs	r1, #36	; 0x24
   186de:	a803      	add	r0, sp, #12
   186e0:	f7fb fa3a 	bl	13b58 <bt_settings_encode_key>
		err = settings_delete(key);
   186e4:	a803      	add	r0, sp, #12
   186e6:	f00b fc11 	bl	23f0c <settings_delete>
		if (err) {
   186ea:	4602      	mov	r2, r0
   186ec:	b118      	cbz	r0, 186f6 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   186ee:	4808      	ldr	r0, [pc, #32]	; (18710 <bt_gatt_clear_sc+0x58>)
   186f0:	2145      	movs	r1, #69	; 0x45
   186f2:	f00b f987 	bl	23a04 <z_log_minimal_printk>
	memset(cfg, 0, sizeof(*cfg));
   186f6:	220c      	movs	r2, #12
   186f8:	2100      	movs	r1, #0
   186fa:	4620      	mov	r0, r4
   186fc:	f00c f802 	bl	24704 <memset>
}
   18700:	2000      	movs	r0, #0
   18702:	b00c      	add	sp, #48	; 0x30
   18704:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   18706:	9200      	str	r2, [sp, #0]
   18708:	e7e6      	b.n	186d8 <bt_gatt_clear_sc+0x20>
   1870a:	bf00      	nop
   1870c:	00029f93 	.word	0x00029f93
   18710:	00029d48 	.word	0x00029d48

00018714 <sc_clear>:
{
   18714:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18716:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1871a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1871c:	4631      	mov	r1, r6
   1871e:	7a00      	ldrb	r0, [r0, #8]
   18720:	f00c f98f 	bl	24a42 <bt_addr_le_is_bonded>
   18724:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   18726:	4631      	mov	r1, r6
   18728:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1872a:	b14d      	cbz	r5, 18740 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1872c:	f7ff ffc4 	bl	186b8 <bt_gatt_clear_sc>
		if (err) {
   18730:	4602      	mov	r2, r0
   18732:	b170      	cbz	r0, 18752 <sc_clear+0x3e>
}
   18734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   18738:	4806      	ldr	r0, [pc, #24]	; (18754 <sc_clear+0x40>)
   1873a:	2145      	movs	r1, #69	; 0x45
   1873c:	f00b b962 	b.w	23a04 <z_log_minimal_printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18740:	f7ff fd40 	bl	181c4 <find_sc_cfg>
		if (cfg) {
   18744:	b128      	cbz	r0, 18752 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   18746:	4629      	mov	r1, r5
   18748:	220c      	movs	r2, #12
}
   1874a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1874e:	f00b bfd9 	b.w	24704 <memset>
}
   18752:	bd70      	pop	{r4, r5, r6, pc}
   18754:	00029d6a 	.word	0x00029d6a

00018758 <read_ppcp>:
{
   18758:	b513      	push	{r0, r1, r4, lr}
   1875a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1875e:	4c0b      	ldr	r4, [pc, #44]	; (1878c <read_ppcp+0x34>)
{
   18760:	4610      	mov	r0, r2
	if (offset > value_len) {
   18762:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   18764:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   18768:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1876c:	d80b      	bhi.n	18786 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1876e:	f1c1 0408 	rsb	r4, r1, #8
   18772:	429c      	cmp	r4, r3
   18774:	bfa8      	it	ge
   18776:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   18778:	4622      	mov	r2, r4
   1877a:	4469      	add	r1, sp
   1877c:	f00b ffb7 	bl	246ee <memcpy>
}
   18780:	4620      	mov	r0, r4
   18782:	b002      	add	sp, #8
   18784:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18786:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1878a:	e7f9      	b.n	18780 <read_ppcp+0x28>
   1878c:	00280018 	.word	0x00280018

00018790 <disconnected_cb>:
{
   18790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18794:	4b23      	ldr	r3, [pc, #140]	; (18824 <disconnected_cb+0x94>)
{
   18796:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18798:	6882      	ldr	r2, [r0, #8]
   1879a:	429a      	cmp	r2, r3
{
   1879c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1879e:	d102      	bne.n	187a6 <disconnected_cb+0x16>
	ccc = attr->user_data;
   187a0:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   187a2:	8963      	ldrh	r3, [r4, #10]
   187a4:	bb33      	cbnz	r3, 187f4 <disconnected_cb+0x64>
}
   187a6:	2001      	movs	r0, #1
   187a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   187ac:	f7fd fe94 	bl	164d8 <bt_conn_unref>
		if (ccc->cfg_changed) {
   187b0:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   187b2:	2100      	movs	r1, #0
   187b4:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   187b6:	2b00      	cmp	r3, #0
   187b8:	d0f5      	beq.n	187a6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   187ba:	4638      	mov	r0, r7
   187bc:	4798      	blx	r3
   187be:	e7f2      	b.n	187a6 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   187c0:	f105 0890 	add.w	r8, r5, #144	; 0x90
   187c4:	7a28      	ldrb	r0, [r5, #8]
   187c6:	4641      	mov	r1, r8
   187c8:	f00c f93b 	bl	24a42 <bt_addr_le_is_bonded>
   187cc:	b968      	cbnz	r0, 187ea <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   187ce:	4b16      	ldr	r3, [pc, #88]	; (18828 <disconnected_cb+0x98>)
   187d0:	429c      	cmp	r4, r3
   187d2:	d102      	bne.n	187da <disconnected_cb+0x4a>
					sc_clear(conn);
   187d4:	4628      	mov	r0, r5
   187d6:	f7ff ff9d 	bl	18714 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   187da:	4914      	ldr	r1, [pc, #80]	; (1882c <disconnected_cb+0x9c>)
   187dc:	4630      	mov	r0, r6
   187de:	f00d f96d 	bl	25abc <bt_addr_le_copy>
	cfg->id = 0U;
   187e2:	2300      	movs	r3, #0
   187e4:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   187e6:	8123      	strh	r3, [r4, #8]
}
   187e8:	e7e2      	b.n	187b0 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   187ea:	4641      	mov	r1, r8
   187ec:	4630      	mov	r0, r6
   187ee:	f00d f965 	bl	25abc <bt_addr_le_copy>
   187f2:	e7dd      	b.n	187b0 <disconnected_cb+0x20>
		if (!cfg->value) {
   187f4:	8923      	ldrh	r3, [r4, #8]
   187f6:	2b00      	cmp	r3, #0
   187f8:	d0da      	beq.n	187b0 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   187fa:	4626      	mov	r6, r4
   187fc:	4628      	mov	r0, r5
   187fe:	f816 1b01 	ldrb.w	r1, [r6], #1
   18802:	4632      	mov	r2, r6
   18804:	f00c fb9c 	bl	24f40 <bt_conn_is_peer_addr_le>
   18808:	2800      	cmp	r0, #0
   1880a:	d1d9      	bne.n	187c0 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1880c:	7820      	ldrb	r0, [r4, #0]
   1880e:	4631      	mov	r1, r6
   18810:	f7fe f8f2 	bl	169f8 <bt_conn_lookup_addr_le>
			if (tmp) {
   18814:	2800      	cmp	r0, #0
   18816:	d0cb      	beq.n	187b0 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   18818:	7b43      	ldrb	r3, [r0, #13]
   1881a:	2b07      	cmp	r3, #7
   1881c:	d1c6      	bne.n	187ac <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1881e:	f7fd fe5b 	bl	164d8 <bt_conn_unref>
	if (!value_used) {
   18822:	e7c0      	b.n	187a6 <disconnected_cb+0x16>
   18824:	00018831 	.word	0x00018831
   18828:	200006d4 	.word	0x200006d4
   1882c:	000289b2 	.word	0x000289b2

00018830 <bt_gatt_attr_write_ccc>:
{
   18830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18834:	461f      	mov	r7, r3
   18836:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1883a:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1883e:	4605      	mov	r5, r0
   18840:	4688      	mov	r8, r1
	if (offset) {
   18842:	2b00      	cmp	r3, #0
   18844:	d166      	bne.n	18914 <bt_gatt_attr_write_ccc+0xe4>
	if (!len || len > sizeof(uint16_t)) {
   18846:	1e7b      	subs	r3, r7, #1
   18848:	2b01      	cmp	r3, #1
   1884a:	d866      	bhi.n	1891a <bt_gatt_attr_write_ccc+0xea>
	if (len < sizeof(uint16_t)) {
   1884c:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1884e:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   18850:	7816      	ldrb	r6, [r2, #0]
   18852:	bf18      	it	ne
   18854:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   18856:	f7ff fcd7 	bl	18208 <find_ccc_cfg>
	if (!cfg) {
   1885a:	4604      	mov	r4, r0
   1885c:	b9b0      	cbnz	r0, 1888c <bt_gatt_attr_write_ccc+0x5c>
		if (!value) {
   1885e:	b916      	cbnz	r6, 18866 <bt_gatt_attr_write_ccc+0x36>
			return len;
   18860:	4638      	mov	r0, r7
}
   18862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   18866:	4649      	mov	r1, r9
   18868:	f7ff fcce 	bl	18208 <find_ccc_cfg>
		if (!cfg) {
   1886c:	4604      	mov	r4, r0
   1886e:	b930      	cbnz	r0, 1887e <bt_gatt_attr_write_ccc+0x4e>
			BT_WARN("No space to store CCC cfg");
   18870:	482b      	ldr	r0, [pc, #172]	; (18920 <bt_gatt_attr_write_ccc+0xf0>)
   18872:	2157      	movs	r1, #87	; 0x57
   18874:	f00b f8c6 	bl	23a04 <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18878:	f06f 0010 	mvn.w	r0, #16
   1887c:	e7f1      	b.n	18862 <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1887e:	f105 0190 	add.w	r1, r5, #144	; 0x90
   18882:	3001      	adds	r0, #1
   18884:	f00d f91a 	bl	25abc <bt_addr_le_copy>
		cfg->id = conn->id;
   18888:	7a2b      	ldrb	r3, [r5, #8]
   1888a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1888c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   18890:	bba3      	cbnz	r3, 188fc <bt_gatt_attr_write_ccc+0xcc>
	value_changed = cfg->value != value;
   18892:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   18896:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   18898:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   1889c:	42b3      	cmp	r3, r6
   1889e:	d003      	beq.n	188a8 <bt_gatt_attr_write_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
   188a0:	4649      	mov	r1, r9
   188a2:	4640      	mov	r0, r8
   188a4:	f00d f86a 	bl	2597c <gatt_ccc_changed>
	if (value_changed) {
   188a8:	45b2      	cmp	sl, r6
   188aa:	d01e      	beq.n	188ea <bt_gatt_attr_write_ccc+0xba>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   188ac:	4628      	mov	r0, r5
   188ae:	f7fd ff25 	bl	166fc <bt_conn_index>
   188b2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 18924 <bt_gatt_attr_write_ccc+0xf4>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   188b6:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   188ba:	429d      	cmp	r5, r3
   188bc:	d015      	beq.n	188ea <bt_gatt_attr_write_ccc+0xba>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   188be:	7a28      	ldrb	r0, [r5, #8]
   188c0:	f105 0190 	add.w	r1, r5, #144	; 0x90
   188c4:	f00c f8bd 	bl	24a42 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   188c8:	b178      	cbz	r0, 188ea <bt_gatt_attr_write_ccc+0xba>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   188ca:	4628      	mov	r0, r5
   188cc:	f7fd ff16 	bl	166fc <bt_conn_index>
   188d0:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   188d2:	4628      	mov	r0, r5
   188d4:	f7fd fdd4 	bl	16480 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   188d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   188dc:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   188e0:	2300      	movs	r3, #0
   188e2:	f108 0008 	add.w	r0, r8, #8
   188e6:	f008 fb83 	bl	20ff0 <k_work_reschedule>
	if (!value) {
   188ea:	2e00      	cmp	r6, #0
   188ec:	d1b8      	bne.n	18860 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   188ee:	490e      	ldr	r1, [pc, #56]	; (18928 <bt_gatt_attr_write_ccc+0xf8>)
   188f0:	1c60      	adds	r0, r4, #1
   188f2:	f00d f8e3 	bl	25abc <bt_addr_le_copy>
	cfg->id = 0U;
   188f6:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   188f8:	8126      	strh	r6, [r4, #8]
}
   188fa:	e7b1      	b.n	18860 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   188fc:	4632      	mov	r2, r6
   188fe:	4641      	mov	r1, r8
   18900:	4628      	mov	r0, r5
   18902:	4798      	blx	r3
		if (write < 0) {
   18904:	2800      	cmp	r0, #0
   18906:	dbac      	blt.n	18862 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   18908:	3801      	subs	r0, #1
   1890a:	2801      	cmp	r0, #1
   1890c:	d9c1      	bls.n	18892 <bt_gatt_attr_write_ccc+0x62>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1890e:	f06f 000d 	mvn.w	r0, #13
   18912:	e7a6      	b.n	18862 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18914:	f06f 0006 	mvn.w	r0, #6
   18918:	e7a3      	b.n	18862 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1891a:	f06f 000c 	mvn.w	r0, #12
   1891e:	e7a0      	b.n	18862 <bt_gatt_attr_write_ccc+0x32>
   18920:	00029d85 	.word	0x00029d85
   18924:	20001a00 	.word	0x20001a00
   18928:	000289b2 	.word	0x000289b2

0001892c <sc_commit>:
{
   1892c:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1892e:	4809      	ldr	r0, [pc, #36]	; (18954 <sc_commit+0x28>)
   18930:	f06f 0102 	mvn.w	r1, #2
   18934:	f00d f8c5 	bl	25ac2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18938:	4806      	ldr	r0, [pc, #24]	; (18954 <sc_commit+0x28>)
   1893a:	f00d f8aa 	bl	25a92 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1893e:	07c3      	lsls	r3, r0, #31
   18940:	d505      	bpl.n	1894e <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   18942:	4805      	ldr	r0, [pc, #20]	; (18958 <sc_commit+0x2c>)
   18944:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18948:	2300      	movs	r3, #0
   1894a:	f008 fb51 	bl	20ff0 <k_work_reschedule>
}
   1894e:	2000      	movs	r0, #0
   18950:	bd08      	pop	{r3, pc}
   18952:	bf00      	nop
   18954:	20001b00 	.word	0x20001b00
   18958:	20001ad0 	.word	0x20001ad0

0001895c <sc_indicate_rsp>:
{
   1895c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1895e:	f06f 0102 	mvn.w	r1, #2
   18962:	4604      	mov	r4, r0
   18964:	480f      	ldr	r0, [pc, #60]	; (189a4 <sc_indicate_rsp+0x48>)
   18966:	f00d f8ac 	bl	25ac2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1896a:	480e      	ldr	r0, [pc, #56]	; (189a4 <sc_indicate_rsp+0x48>)
   1896c:	f00d f891 	bl	25a92 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18970:	07c2      	lsls	r2, r0, #31
   18972:	d504      	bpl.n	1897e <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   18974:	480c      	ldr	r0, [pc, #48]	; (189a8 <sc_indicate_rsp+0x4c>)
   18976:	2200      	movs	r2, #0
   18978:	2300      	movs	r3, #0
   1897a:	f008 fb39 	bl	20ff0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1897e:	4620      	mov	r0, r4
   18980:	f00c ffcb 	bl	2591a <bt_att_fixed_chan_only>
   18984:	b160      	cbz	r0, 189a0 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   18986:	4620      	mov	r0, r4
   18988:	f7ff fbee 	bl	18168 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1898c:	b140      	cbz	r0, 189a0 <sc_indicate_rsp+0x44>
   1898e:	7a03      	ldrb	r3, [r0, #8]
   18990:	07db      	lsls	r3, r3, #31
   18992:	d505      	bpl.n	189a0 <sc_indicate_rsp+0x44>
}
   18994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18998:	2101      	movs	r1, #1
   1899a:	300c      	adds	r0, #12
   1899c:	f00d b87f 	b.w	25a9e <atomic_or>
   189a0:	bd10      	pop	{r4, pc}
   189a2:	bf00      	nop
   189a4:	20001b00 	.word	0x20001b00
   189a8:	20001ad0 	.word	0x20001ad0

000189ac <bt_gatt_init>:
{
   189ac:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   189ae:	4b2b      	ldr	r3, [pc, #172]	; (18a5c <bt_gatt_init+0xb0>)
   189b0:	f3bf 8f5b 	dmb	ish
   189b4:	2201      	movs	r2, #1
   189b6:	e853 1f00 	ldrex	r1, [r3]
   189ba:	2900      	cmp	r1, #0
   189bc:	d103      	bne.n	189c6 <bt_gatt_init+0x1a>
   189be:	e843 2000 	strex	r0, r2, [r3]
   189c2:	2800      	cmp	r0, #0
   189c4:	d1f7      	bne.n	189b6 <bt_gatt_init+0xa>
   189c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   189ca:	d146      	bne.n	18a5a <bt_gatt_init+0xae>
   189cc:	f3bf 8f5b 	dmb	ish
   189d0:	4b23      	ldr	r3, [pc, #140]	; (18a60 <bt_gatt_init+0xb4>)
   189d2:	e853 1f00 	ldrex	r1, [r3]
   189d6:	2900      	cmp	r1, #0
   189d8:	d103      	bne.n	189e2 <bt_gatt_init+0x36>
   189da:	e843 2000 	strex	r0, r2, [r3]
   189de:	2800      	cmp	r0, #0
   189e0:	d1f7      	bne.n	189d2 <bt_gatt_init+0x26>
   189e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   189e6:	d11c      	bne.n	18a22 <bt_gatt_init+0x76>
   189e8:	491e      	ldr	r1, [pc, #120]	; (18a64 <bt_gatt_init+0xb8>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   189ea:	4a1f      	ldr	r2, [pc, #124]	; (18a68 <bt_gatt_init+0xbc>)
   189ec:	880b      	ldrh	r3, [r1, #0]
   189ee:	4c1f      	ldr	r4, [pc, #124]	; (18a6c <bt_gatt_init+0xc0>)
	if (!atomic_cas(&service_init, 0, 1)) {
   189f0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   189f2:	42a2      	cmp	r2, r4
   189f4:	d912      	bls.n	18a1c <bt_gatt_init+0x70>
   189f6:	b100      	cbz	r0, 189fa <bt_gatt_init+0x4e>
   189f8:	800b      	strh	r3, [r1, #0]
   189fa:	491d      	ldr	r1, [pc, #116]	; (18a70 <bt_gatt_init+0xc4>)
   189fc:	481d      	ldr	r0, [pc, #116]	; (18a74 <bt_gatt_init+0xc8>)
   189fe:	f240 520e 	movw	r2, #1294	; 0x50e
   18a02:	f00a fff1 	bl	239e8 <assert_print>
   18a06:	481a      	ldr	r0, [pc, #104]	; (18a70 <bt_gatt_init+0xc4>)
   18a08:	f240 510e 	movw	r1, #1294	; 0x50e
   18a0c:	f00a ffe5 	bl	239da <assert_post_action>
		last_static_handle += svc->attr_count;
   18a10:	6850      	ldr	r0, [r2, #4]
   18a12:	4403      	add	r3, r0
   18a14:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   18a16:	3208      	adds	r2, #8
   18a18:	2001      	movs	r0, #1
   18a1a:	e7ea      	b.n	189f2 <bt_gatt_init+0x46>
   18a1c:	d3f8      	bcc.n	18a10 <bt_gatt_init+0x64>
   18a1e:	b100      	cbz	r0, 18a22 <bt_gatt_init+0x76>
   18a20:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   18a22:	4b15      	ldr	r3, [pc, #84]	; (18a78 <bt_gatt_init+0xcc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   18a24:	4915      	ldr	r1, [pc, #84]	; (18a7c <bt_gatt_init+0xd0>)
   18a26:	4816      	ldr	r0, [pc, #88]	; (18a80 <bt_gatt_init+0xd4>)
   18a28:	2200      	movs	r2, #0
	list->tail = NULL;
   18a2a:	e9c3 2200 	strd	r2, r2, [r3]
   18a2e:	f008 f9f5 	bl	20e1c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   18a32:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18a36:	2300      	movs	r3, #0
   18a38:	4811      	ldr	r0, [pc, #68]	; (18a80 <bt_gatt_init+0xd4>)
   18a3a:	f7fb f92d 	bl	13c98 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   18a3e:	4911      	ldr	r1, [pc, #68]	; (18a84 <bt_gatt_init+0xd8>)
   18a40:	4811      	ldr	r0, [pc, #68]	; (18a88 <bt_gatt_init+0xdc>)
   18a42:	f008 f9eb 	bl	20e1c <k_work_init_delayable>
   18a46:	2102      	movs	r1, #2
   18a48:	4810      	ldr	r0, [pc, #64]	; (18a8c <bt_gatt_init+0xe0>)
   18a4a:	f00d f828 	bl	25a9e <atomic_or>
}
   18a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   18a52:	490f      	ldr	r1, [pc, #60]	; (18a90 <bt_gatt_init+0xe4>)
   18a54:	480f      	ldr	r0, [pc, #60]	; (18a94 <bt_gatt_init+0xe8>)
   18a56:	f008 b9e1 	b.w	20e1c <k_work_init_delayable>
}
   18a5a:	bd10      	pop	{r4, pc}
   18a5c:	20002200 	.word	0x20002200
   18a60:	200021fc 	.word	0x200021fc
   18a64:	20002578 	.word	0x20002578
   18a68:	0002741c 	.word	0x0002741c
   18a6c:	00027434 	.word	0x00027434
   18a70:	00029da4 	.word	0x00029da4
   18a74:	000280bd 	.word	0x000280bd
   18a78:	20002204 	.word	0x20002204
   18a7c:	00018ce9 	.word	0x00018ce9
   18a80:	20001a58 	.word	0x20001a58
   18a84:	00019201 	.word	0x00019201
   18a88:	20001ad0 	.word	0x20001ad0
   18a8c:	20001b00 	.word	0x20001b00
   18a90:	00025e47 	.word	0x00025e47
   18a94:	20001a08 	.word	0x20001a08

00018a98 <bt_gatt_attr_get_handle>:
{
   18a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   18a9c:	4603      	mov	r3, r0
   18a9e:	b378      	cbz	r0, 18b00 <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
   18aa0:	8a00      	ldrh	r0, [r0, #16]
   18aa2:	bb68      	cbnz	r0, 18b00 <bt_gatt_attr_get_handle+0x68>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18aa4:	4918      	ldr	r1, [pc, #96]	; (18b08 <bt_gatt_attr_get_handle+0x70>)
   18aa6:	f8df e064 	ldr.w	lr, [pc, #100]	; 18b0c <bt_gatt_attr_get_handle+0x74>
	uint16_t handle = 1;
   18aaa:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18aac:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18ab0:	4571      	cmp	r1, lr
   18ab2:	d924      	bls.n	18afe <bt_gatt_attr_get_handle+0x66>
   18ab4:	4916      	ldr	r1, [pc, #88]	; (18b10 <bt_gatt_attr_get_handle+0x78>)
   18ab6:	4817      	ldr	r0, [pc, #92]	; (18b14 <bt_gatt_attr_get_handle+0x7c>)
   18ab8:	f240 6265 	movw	r2, #1637	; 0x665
   18abc:	f00a ff94 	bl	239e8 <assert_print>
   18ac0:	4813      	ldr	r0, [pc, #76]	; (18b10 <bt_gatt_attr_get_handle+0x78>)
   18ac2:	f240 6165 	movw	r1, #1637	; 0x665
   18ac6:	f00a ff88 	bl	239da <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18aca:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   18ace:	42bb      	cmp	r3, r7
   18ad0:	d304      	bcc.n	18adc <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18ad2:	fb0c 7206 	mla	r2, ip, r6, r7
   18ad6:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   18ad8:	4293      	cmp	r3, r2
   18ada:	d90e      	bls.n	18afa <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
   18adc:	4434      	add	r4, r6
   18ade:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18ae0:	3108      	adds	r1, #8
   18ae2:	4614      	mov	r4, r2
   18ae4:	e7e4      	b.n	18ab0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   18ae6:	fb0c 7805 	mla	r8, ip, r5, r7
   18aea:	4543      	cmp	r3, r8
   18aec:	d00a      	beq.n	18b04 <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   18aee:	3501      	adds	r5, #1
   18af0:	1962      	adds	r2, r4, r5
   18af2:	42b5      	cmp	r5, r6
   18af4:	b292      	uxth	r2, r2
   18af6:	d1f6      	bne.n	18ae6 <bt_gatt_attr_get_handle+0x4e>
   18af8:	e7f2      	b.n	18ae0 <bt_gatt_attr_get_handle+0x48>
   18afa:	2500      	movs	r5, #0
   18afc:	e7f8      	b.n	18af0 <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18afe:	d3e4      	bcc.n	18aca <bt_gatt_attr_get_handle+0x32>
}
   18b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b04:	4610      	mov	r0, r2
   18b06:	e7fb      	b.n	18b00 <bt_gatt_attr_get_handle+0x68>
   18b08:	0002741c 	.word	0x0002741c
   18b0c:	00027434 	.word	0x00027434
   18b10:	00029da4 	.word	0x00029da4
   18b14:	000280bd 	.word	0x000280bd

00018b18 <bt_gatt_foreach_attr_type>:
{
   18b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b1c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   18b20:	9100      	str	r1, [sp, #0]
   18b22:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   18b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18b28:	2d00      	cmp	r5, #0
   18b2a:	bf08      	it	eq
   18b2c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   18b2e:	4b29      	ldr	r3, [pc, #164]	; (18bd4 <bt_gatt_foreach_attr_type+0xbc>)
   18b30:	881b      	ldrh	r3, [r3, #0]
   18b32:	4283      	cmp	r3, r0
{
   18b34:	4607      	mov	r7, r0
   18b36:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   18b38:	d232      	bcs.n	18ba0 <bt_gatt_foreach_attr_type+0x88>
}
   18b3a:	b003      	add	sp, #12
   18b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   18b40:	5889      	ldr	r1, [r1, r2]
   18b42:	9301      	str	r3, [sp, #4]
   18b44:	4640      	mov	r0, r8
   18b46:	f00b fe45 	bl	247d4 <bt_uuid_cmp>
   18b4a:	9b01      	ldr	r3, [sp, #4]
   18b4c:	b190      	cbz	r0, 18b74 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   18b4e:	3401      	adds	r4, #1
   18b50:	f10a 0a01 	add.w	sl, sl, #1
   18b54:	b2a4      	uxth	r4, r4
   18b56:	6873      	ldr	r3, [r6, #4]
   18b58:	4553      	cmp	r3, sl
   18b5a:	d92c      	bls.n	18bb6 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   18b5c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18b5e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   18b60:	429c      	cmp	r4, r3
   18b62:	d8ea      	bhi.n	18b3a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   18b64:	42bc      	cmp	r4, r7
   18b66:	d3f2      	bcc.n	18b4e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18b68:	fb0b f20a 	mul.w	r2, fp, sl
   18b6c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   18b6e:	f1b8 0f00 	cmp.w	r8, #0
   18b72:	d1e5      	bne.n	18b40 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   18b74:	f1b9 0f00 	cmp.w	r9, #0
   18b78:	d10b      	bne.n	18b92 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   18b7a:	3d01      	subs	r5, #1
   18b7c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   18b7e:	4618      	mov	r0, r3
   18b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18b84:	4621      	mov	r1, r4
   18b86:	4798      	blx	r3
	if (!*num_matches) {
   18b88:	2d00      	cmp	r5, #0
   18b8a:	d0d6      	beq.n	18b3a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18b8c:	2800      	cmp	r0, #0
   18b8e:	d1de      	bne.n	18b4e <bt_gatt_foreach_attr_type+0x36>
   18b90:	e7d3      	b.n	18b3a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   18b92:	68da      	ldr	r2, [r3, #12]
   18b94:	4591      	cmp	r9, r2
   18b96:	d1da      	bne.n	18b4e <bt_gatt_foreach_attr_type+0x36>
   18b98:	e7ef      	b.n	18b7a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   18b9a:	f04f 0a00 	mov.w	sl, #0
   18b9e:	e7da      	b.n	18b56 <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18ba0:	4e0d      	ldr	r6, [pc, #52]	; (18bd8 <bt_gatt_foreach_attr_type+0xc0>)
		uint16_t handle = 1;
   18ba2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18ba4:	f04f 0b14 	mov.w	fp, #20
   18ba8:	e006      	b.n	18bb8 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18baa:	d2c6      	bcs.n	18b3a <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   18bac:	6873      	ldr	r3, [r6, #4]
   18bae:	4423      	add	r3, r4
   18bb0:	42bb      	cmp	r3, r7
   18bb2:	d2f2      	bcs.n	18b9a <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   18bb4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18bb6:	3608      	adds	r6, #8
   18bb8:	4b08      	ldr	r3, [pc, #32]	; (18bdc <bt_gatt_foreach_attr_type+0xc4>)
   18bba:	429e      	cmp	r6, r3
   18bbc:	d9f5      	bls.n	18baa <bt_gatt_foreach_attr_type+0x92>
   18bbe:	4908      	ldr	r1, [pc, #32]	; (18be0 <bt_gatt_foreach_attr_type+0xc8>)
   18bc0:	4808      	ldr	r0, [pc, #32]	; (18be4 <bt_gatt_foreach_attr_type+0xcc>)
   18bc2:	f240 7229 	movw	r2, #1833	; 0x729
   18bc6:	f00a ff0f 	bl	239e8 <assert_print>
   18bca:	4805      	ldr	r0, [pc, #20]	; (18be0 <bt_gatt_foreach_attr_type+0xc8>)
   18bcc:	f240 7129 	movw	r1, #1833	; 0x729
   18bd0:	f00a ff03 	bl	239da <assert_post_action>
   18bd4:	20002578 	.word	0x20002578
   18bd8:	0002741c 	.word	0x0002741c
   18bdc:	00027434 	.word	0x00027434
   18be0:	00029da4 	.word	0x00029da4
   18be4:	000280bd 	.word	0x000280bd

00018be8 <db_hash_gen>:
{
   18be8:	b530      	push	{r4, r5, lr}
   18bea:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   18bec:	2300      	movs	r3, #0
{
   18bee:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   18bf0:	aa1c      	add	r2, sp, #112	; 0x70
   18bf2:	4669      	mov	r1, sp
   18bf4:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   18bf6:	e9cd 3300 	strd	r3, r3, [sp]
   18bfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   18bfe:	f00b fbdc 	bl	243ba <tc_cmac_setup>
   18c02:	b928      	cbnz	r0, 18c10 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   18c04:	4814      	ldr	r0, [pc, #80]	; (18c58 <db_hash_gen+0x70>)
   18c06:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   18c08:	f00a fefc 	bl	23a04 <z_log_minimal_printk>
}
   18c0c:	b049      	add	sp, #292	; 0x124
   18c0e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   18c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18c14:	2001      	movs	r0, #1
   18c16:	4a11      	ldr	r2, [pc, #68]	; (18c5c <db_hash_gen+0x74>)
   18c18:	ab04      	add	r3, sp, #16
   18c1a:	f00d f8a1 	bl	25d60 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   18c1e:	4810      	ldr	r0, [pc, #64]	; (18c60 <db_hash_gen+0x78>)
   18c20:	a904      	add	r1, sp, #16
   18c22:	f00b fc5f 	bl	244e4 <tc_cmac_final>
   18c26:	b910      	cbnz	r0, 18c2e <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   18c28:	480e      	ldr	r0, [pc, #56]	; (18c64 <db_hash_gen+0x7c>)
   18c2a:	2145      	movs	r1, #69	; 0x45
   18c2c:	e7ec      	b.n	18c08 <db_hash_gen+0x20>
   18c2e:	4b0c      	ldr	r3, [pc, #48]	; (18c60 <db_hash_gen+0x78>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   18c30:	2208      	movs	r2, #8
   18c32:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   18c36:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   18c38:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
   18c3c:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   18c40:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   18c42:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   18c44:	d1f7      	bne.n	18c36 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   18c46:	b10c      	cbz	r4, 18c4c <db_hash_gen+0x64>
		db_hash_store();
   18c48:	f7ff fa78 	bl	1813c <db_hash_store>
   18c4c:	2104      	movs	r1, #4
   18c4e:	4806      	ldr	r0, [pc, #24]	; (18c68 <db_hash_gen+0x80>)
   18c50:	f00c ff25 	bl	25a9e <atomic_or>
   18c54:	e7da      	b.n	18c0c <db_hash_gen+0x24>
   18c56:	bf00      	nop
   18c58:	00029dd4 	.word	0x00029dd4
   18c5c:	000259c3 	.word	0x000259c3
   18c60:	20001a38 	.word	0x20001a38
   18c64:	00029df2 	.word	0x00029df2
   18c68:	20001b00 	.word	0x20001b00

00018c6c <db_hash_read>:
{
   18c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18c6e:	491b      	ldr	r1, [pc, #108]	; (18cdc <db_hash_read+0x70>)
{
   18c70:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   18c74:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18c76:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   18c7a:	4615      	mov	r5, r2
   18c7c:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18c7e:	f008 fa03 	bl	21088 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18c82:	4817      	ldr	r0, [pc, #92]	; (18ce0 <db_hash_read+0x74>)
   18c84:	f00c ff05 	bl	25a92 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   18c88:	0741      	lsls	r1, r0, #29
   18c8a:	d402      	bmi.n	18c92 <db_hash_read+0x26>
		db_hash_gen(true);
   18c8c:	2001      	movs	r0, #1
   18c8e:	f7ff ffab 	bl	18be8 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   18c92:	4620      	mov	r0, r4
   18c94:	f7ff fa68 	bl	18168 <find_cf_cfg>
	if (cfg &&
   18c98:	b168      	cbz	r0, 18cb6 <db_hash_read+0x4a>
   18c9a:	7a03      	ldrb	r3, [r0, #8]
   18c9c:	07da      	lsls	r2, r3, #31
   18c9e:	d50a      	bpl.n	18cb6 <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   18ca0:	f100 040c 	add.w	r4, r0, #12
   18ca4:	4620      	mov	r0, r4
   18ca6:	f00c fef4 	bl	25a92 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   18caa:	07c3      	lsls	r3, r0, #31
   18cac:	d403      	bmi.n	18cb6 <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18cae:	2102      	movs	r1, #2
   18cb0:	4620      	mov	r0, r4
   18cb2:	f00c fef4 	bl	25a9e <atomic_or>
	if (offset > value_len) {
   18cb6:	2e10      	cmp	r6, #16
   18cb8:	d80c      	bhi.n	18cd4 <db_hash_read+0x68>
	len = MIN(buf_len, value_len - offset);
   18cba:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   18cbe:	4909      	ldr	r1, [pc, #36]	; (18ce4 <db_hash_read+0x78>)
	len = MIN(buf_len, value_len - offset);
   18cc0:	42bc      	cmp	r4, r7
   18cc2:	bfa8      	it	ge
   18cc4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18cc6:	4622      	mov	r2, r4
   18cc8:	4431      	add	r1, r6
   18cca:	4628      	mov	r0, r5
   18ccc:	f00b fd0f 	bl	246ee <memcpy>
}
   18cd0:	4620      	mov	r0, r4
   18cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18cd4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   18cd8:	e7fa      	b.n	18cd0 <db_hash_read+0x64>
   18cda:	bf00      	nop
   18cdc:	20001a88 	.word	0x20001a88
   18ce0:	20001b00 	.word	0x20001b00
   18ce4:	20001a38 	.word	0x20001a38

00018ce8 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18ce8:	f06f 0108 	mvn.w	r1, #8
{
   18cec:	b508      	push	{r3, lr}
   18cee:	4826      	ldr	r0, [pc, #152]	; (18d88 <db_hash_process+0xa0>)
   18cf0:	f00c fee7 	bl	25ac2 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   18cf4:	0701      	lsls	r1, r0, #28
   18cf6:	d542      	bpl.n	18d7e <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18cf8:	4823      	ldr	r0, [pc, #140]	; (18d88 <db_hash_process+0xa0>)
   18cfa:	f00c feca 	bl	25a92 <atomic_get>
   18cfe:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   18d00:	075a      	lsls	r2, r3, #29
   18d02:	f3c0 0080 	ubfx	r0, r0, #2, #1
   18d06:	d401      	bmi.n	18d0c <db_hash_process+0x24>
			db_hash_gen(false);
   18d08:	f7ff ff6e 	bl	18be8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   18d0c:	491f      	ldr	r1, [pc, #124]	; (18d8c <db_hash_process+0xa4>)
   18d0e:	2210      	movs	r2, #16
   18d10:	1888      	adds	r0, r1, r2
   18d12:	f00b fcdc 	bl	246ce <memcmp>
   18d16:	b948      	cbnz	r0, 18d2c <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   18d18:	481d      	ldr	r0, [pc, #116]	; (18d90 <db_hash_process+0xa8>)
   18d1a:	f008 f96f 	bl	20ffc <k_work_cancel_delayable>
}
   18d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18d22:	4819      	ldr	r0, [pc, #100]	; (18d88 <db_hash_process+0xa0>)
   18d24:	f06f 0101 	mvn.w	r1, #1
   18d28:	f00c becb 	b.w	25ac2 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   18d2c:	4816      	ldr	r0, [pc, #88]	; (18d88 <db_hash_process+0xa0>)
   18d2e:	2101      	movs	r1, #1
   18d30:	f00c feb5 	bl	25a9e <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18d34:	f010 0f01 	tst.w	r0, #1
   18d38:	4b16      	ldr	r3, [pc, #88]	; (18d94 <db_hash_process+0xac>)
   18d3a:	d110      	bne.n	18d5e <db_hash_process+0x76>
		gatt_sc.start = start;
   18d3c:	4a16      	ldr	r2, [pc, #88]	; (18d98 <db_hash_process+0xb0>)
   18d3e:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18d40:	4811      	ldr	r0, [pc, #68]	; (18d88 <db_hash_process+0xa0>)
   18d42:	f00c fea6 	bl	25a92 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   18d46:	0783      	lsls	r3, r0, #30
   18d48:	d405      	bmi.n	18d56 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   18d4a:	4811      	ldr	r0, [pc, #68]	; (18d90 <db_hash_process+0xa8>)
   18d4c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18d50:	2300      	movs	r3, #0
   18d52:	f008 f94d 	bl	20ff0 <k_work_reschedule>
}
   18d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   18d5a:	f7ff b9ef 	b.w	1813c <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   18d5e:	8b1a      	ldrh	r2, [r3, #24]
   18d60:	8b58      	ldrh	r0, [r3, #26]
   18d62:	2a01      	cmp	r2, #1
   18d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18d68:	d805      	bhi.n	18d76 <db_hash_process+0x8e>
   18d6a:	4290      	cmp	r0, r2
   18d6c:	d0f3      	beq.n	18d56 <db_hash_process+0x6e>
		*end = new_end;
   18d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18d72:	835a      	strh	r2, [r3, #26]
   18d74:	e7e4      	b.n	18d40 <db_hash_process+0x58>
	if (*end < new_end) {
   18d76:	4290      	cmp	r0, r2
		*start = new_start;
   18d78:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   18d7a:	d0e1      	beq.n	18d40 <db_hash_process+0x58>
   18d7c:	e7f7      	b.n	18d6e <db_hash_process+0x86>
}
   18d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   18d82:	2001      	movs	r0, #1
   18d84:	f7ff bf30 	b.w	18be8 <db_hash_gen>
   18d88:	20001b00 	.word	0x20001b00
   18d8c:	20001a38 	.word	0x20001a38
   18d90:	20001ad0 	.word	0x20001ad0
   18d94:	20001ab0 	.word	0x20001ab0
   18d98:	ffff0001 	.word	0xffff0001

00018d9c <ccc_set_direct>:
{
   18d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18da0:	b0b9      	sub	sp, #228	; 0xe4
   18da2:	460c      	mov	r4, r1
   18da4:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   18da6:	492c      	ldr	r1, [pc, #176]	; (18e58 <ccc_set_direct+0xbc>)
   18da8:	9840      	ldr	r0, [sp, #256]	; 0x100
   18daa:	466a      	mov	r2, sp
{
   18dac:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   18dae:	f00b f8b1 	bl	23f14 <settings_name_steq>
   18db2:	b948      	cbnz	r0, 18dc8 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   18db4:	4829      	ldr	r0, [pc, #164]	; (18e5c <ccc_set_direct+0xc0>)
   18db6:	2145      	movs	r1, #69	; 0x45
   18db8:	f00a fe24 	bl	23a04 <z_log_minimal_printk>
   18dbc:	f06f 0515 	mvn.w	r5, #21
}
   18dc0:	4628      	mov	r0, r5
   18dc2:	b039      	add	sp, #228	; 0xe4
   18dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   18dc8:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   18dca:	a901      	add	r1, sp, #4
   18dcc:	4630      	mov	r0, r6
   18dce:	f00b f8c5 	bl	23f5c <settings_name_next>
		if (!name) {
   18dd2:	b936      	cbnz	r6, 18de2 <ccc_set_direct+0x46>
			BT_ERR("Insufficient number of arguments");
   18dd4:	4822      	ldr	r0, [pc, #136]	; (18e60 <ccc_set_direct+0xc4>)
   18dd6:	2145      	movs	r1, #69	; 0x45
   18dd8:	f00a fe14 	bl	23a04 <z_log_minimal_printk>
			return -EINVAL;
   18ddc:	f06f 0415 	mvn.w	r4, #21
   18de0:	e02a      	b.n	18e38 <ccc_set_direct+0x9c>
		} else if (!next) {
   18de2:	9801      	ldr	r0, [sp, #4]
   18de4:	b970      	cbnz	r0, 18e04 <ccc_set_direct+0x68>
		err = bt_settings_decode_key(name, &addr);
   18de6:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   18dea:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   18dec:	4649      	mov	r1, r9
   18dee:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   18df0:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   18df4:	f00b fcca 	bl	2478c <bt_settings_decode_key>
		if (err) {
   18df8:	4605      	mov	r5, r0
   18dfa:	b178      	cbz	r0, 18e1c <ccc_set_direct+0x80>
			BT_ERR("Unable to decode address %s", name);
   18dfc:	4819      	ldr	r0, [pc, #100]	; (18e64 <ccc_set_direct+0xc8>)
   18dfe:	4632      	mov	r2, r6
   18e00:	2145      	movs	r1, #69	; 0x45
   18e02:	e008      	b.n	18e16 <ccc_set_direct+0x7a>
			unsigned long next_id = strtoul(next, NULL, 10);
   18e04:	220a      	movs	r2, #10
   18e06:	2100      	movs	r1, #0
   18e08:	f00b fbb0 	bl	2456c <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   18e0c:	4602      	mov	r2, r0
   18e0e:	2800      	cmp	r0, #0
   18e10:	d0e9      	beq.n	18de6 <ccc_set_direct+0x4a>
				BT_ERR("Invalid local identity %lu", next_id);
   18e12:	4815      	ldr	r0, [pc, #84]	; (18e68 <ccc_set_direct+0xcc>)
   18e14:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to decode address %s", name);
   18e16:	f00a fdf5 	bl	23a04 <z_log_minimal_printk>
			return -EINVAL;
   18e1a:	e7df      	b.n	18ddc <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   18e1c:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   18e20:	b1c4      	cbz	r4, 18e54 <ccc_set_direct+0xb8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   18e22:	22c0      	movs	r2, #192	; 0xc0
   18e24:	a908      	add	r1, sp, #32
   18e26:	4640      	mov	r0, r8
   18e28:	47b8      	blx	r7
			if (len < 0) {
   18e2a:	1e04      	subs	r4, r0, #0
   18e2c:	da06      	bge.n	18e3c <ccc_set_direct+0xa0>
				BT_ERR("Failed to decode value (err %zd)", len);
   18e2e:	480f      	ldr	r0, [pc, #60]	; (18e6c <ccc_set_direct+0xd0>)
   18e30:	4622      	mov	r2, r4
   18e32:	2145      	movs	r1, #69	; 0x45
   18e34:	f00a fde6 	bl	23a04 <z_log_minimal_printk>
			return -EINVAL;
   18e38:	4625      	mov	r5, r4
   18e3a:	e7c1      	b.n	18dc0 <ccc_set_direct+0x24>
			load.count = len / sizeof(*ccc_store);
   18e3c:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   18e3e:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   18e40:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   18e44:	4a0a      	ldr	r2, [pc, #40]	; (18e70 <ccc_set_direct+0xd4>)
   18e46:	ab04      	add	r3, sp, #16
   18e48:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e4c:	2001      	movs	r0, #1
   18e4e:	f00c ff87 	bl	25d60 <bt_gatt_foreach_attr>
	return 0;
   18e52:	e7b5      	b.n	18dc0 <ccc_set_direct+0x24>
   18e54:	4623      	mov	r3, r4
   18e56:	e7f3      	b.n	18e40 <ccc_set_direct+0xa4>
   18e58:	00029e10 	.word	0x00029e10
   18e5c:	00029e17 	.word	0x00029e17
   18e60:	00028a12 	.word	0x00028a12
   18e64:	00029c80 	.word	0x00029c80
   18e68:	00029ca1 	.word	0x00029ca1
   18e6c:	00029bb1 	.word	0x00029bb1
   18e70:	00018309 	.word	0x00018309

00018e74 <bt_gatt_attr_next>:
{
   18e74:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   18e76:	2300      	movs	r3, #0
   18e78:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   18e7a:	f7ff fe0d 	bl	18a98 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   18e7e:	1c41      	adds	r1, r0, #1
   18e80:	b289      	uxth	r1, r1
   18e82:	4608      	mov	r0, r1
   18e84:	4a03      	ldr	r2, [pc, #12]	; (18e94 <bt_gatt_attr_next+0x20>)
   18e86:	ab01      	add	r3, sp, #4
   18e88:	f00c ff6a 	bl	25d60 <bt_gatt_foreach_attr>
}
   18e8c:	9801      	ldr	r0, [sp, #4]
   18e8e:	b003      	add	sp, #12
   18e90:	f85d fb04 	ldr.w	pc, [sp], #4
   18e94:	00025977 	.word	0x00025977

00018e98 <bt_gatt_is_subscribed>:
{
   18e98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18e9c:	460c      	mov	r4, r1
   18e9e:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   18ea0:	4605      	mov	r5, r0
   18ea2:	b950      	cbnz	r0, 18eba <bt_gatt_is_subscribed+0x22>
   18ea4:	4953      	ldr	r1, [pc, #332]	; (18ff4 <bt_gatt_is_subscribed+0x15c>)
   18ea6:	4854      	ldr	r0, [pc, #336]	; (18ff8 <bt_gatt_is_subscribed+0x160>)
   18ea8:	f640 424b 	movw	r2, #3147	; 0xc4b
   18eac:	f00a fd9c 	bl	239e8 <assert_print>
   18eb0:	f640 414b 	movw	r1, #3147	; 0xc4b
	__ASSERT(attr, "invalid parameter\n");
   18eb4:	484f      	ldr	r0, [pc, #316]	; (18ff4 <bt_gatt_is_subscribed+0x15c>)
   18eb6:	f00a fd90 	bl	239da <assert_post_action>
   18eba:	b941      	cbnz	r1, 18ece <bt_gatt_is_subscribed+0x36>
   18ebc:	494d      	ldr	r1, [pc, #308]	; (18ff4 <bt_gatt_is_subscribed+0x15c>)
   18ebe:	484e      	ldr	r0, [pc, #312]	; (18ff8 <bt_gatt_is_subscribed+0x160>)
   18ec0:	f640 424c 	movw	r2, #3148	; 0xc4c
   18ec4:	f00a fd90 	bl	239e8 <assert_print>
   18ec8:	f640 414c 	movw	r1, #3148	; 0xc4c
   18ecc:	e7f2      	b.n	18eb4 <bt_gatt_is_subscribed+0x1c>
	if (conn->state != BT_CONN_CONNECTED) {
   18ece:	7b43      	ldrb	r3, [r0, #13]
   18ed0:	2b07      	cmp	r3, #7
   18ed2:	d110      	bne.n	18ef6 <bt_gatt_is_subscribed+0x5e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   18ed4:	2300      	movs	r3, #0
   18ed6:	f88d 300c 	strb.w	r3, [sp, #12]
   18eda:	6820      	ldr	r0, [r4, #0]
   18edc:	f642 0303 	movw	r3, #10243	; 0x2803
   18ee0:	a903      	add	r1, sp, #12
   18ee2:	f8ad 300e 	strh.w	r3, [sp, #14]
   18ee6:	f00b fc75 	bl	247d4 <bt_uuid_cmp>
   18eea:	b9b0      	cbnz	r0, 18f1a <bt_gatt_is_subscribed+0x82>
		if (!(chrc->properties &
   18eec:	68e3      	ldr	r3, [r4, #12]
   18eee:	799b      	ldrb	r3, [r3, #6]
   18ef0:	f013 0f30 	tst.w	r3, #48	; 0x30
   18ef4:	d103      	bne.n	18efe <bt_gatt_is_subscribed+0x66>
		return false;
   18ef6:	2000      	movs	r0, #0
}
   18ef8:	b004      	add	sp, #16
   18efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   18efe:	4620      	mov	r0, r4
   18f00:	f7ff ffb8 	bl	18e74 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   18f04:	4604      	mov	r4, r0
   18f06:	b940      	cbnz	r0, 18f1a <bt_gatt_is_subscribed+0x82>
   18f08:	493a      	ldr	r1, [pc, #232]	; (18ff4 <bt_gatt_is_subscribed+0x15c>)
   18f0a:	483b      	ldr	r0, [pc, #236]	; (18ff8 <bt_gatt_is_subscribed+0x160>)
   18f0c:	f640 425d 	movw	r2, #3165	; 0xc5d
   18f10:	f00a fd6a 	bl	239e8 <assert_print>
   18f14:	f640 415d 	movw	r1, #3165	; 0xc5d
   18f18:	e7cc      	b.n	18eb4 <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   18f1a:	2300      	movs	r3, #0
   18f1c:	6820      	ldr	r0, [r4, #0]
   18f1e:	f88d 300c 	strb.w	r3, [sp, #12]
   18f22:	a903      	add	r1, sp, #12
   18f24:	f642 1302 	movw	r3, #10498	; 0x2902
   18f28:	f8ad 300e 	strh.w	r3, [sp, #14]
   18f2c:	f00b fc52 	bl	247d4 <bt_uuid_cmp>
   18f30:	b168      	cbz	r0, 18f4e <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   18f32:	4620      	mov	r0, r4
   18f34:	f7ff ff9e 	bl	18e74 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   18f38:	4604      	mov	r4, r0
   18f3a:	b940      	cbnz	r0, 18f4e <bt_gatt_is_subscribed+0xb6>
   18f3c:	492d      	ldr	r1, [pc, #180]	; (18ff4 <bt_gatt_is_subscribed+0x15c>)
   18f3e:	482e      	ldr	r0, [pc, #184]	; (18ff8 <bt_gatt_is_subscribed+0x160>)
   18f40:	f640 4263 	movw	r2, #3171	; 0xc63
   18f44:	f00a fd50 	bl	239e8 <assert_print>
   18f48:	f640 4163 	movw	r1, #3171	; 0xc63
   18f4c:	e7b2      	b.n	18eb4 <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   18f4e:	2600      	movs	r6, #0
   18f50:	f642 1802 	movw	r8, #10498	; 0x2902
   18f54:	6820      	ldr	r0, [r4, #0]
   18f56:	f88d 6000 	strb.w	r6, [sp]
   18f5a:	4669      	mov	r1, sp
   18f5c:	f8ad 8002 	strh.w	r8, [sp, #2]
   18f60:	f00b fc38 	bl	247d4 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18f64:	b9d8      	cbnz	r0, 18f9e <bt_gatt_is_subscribed+0x106>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   18f66:	2300      	movs	r3, #0
   18f68:	6820      	ldr	r0, [r4, #0]
   18f6a:	f88d 300c 	strb.w	r3, [sp, #12]
   18f6e:	a903      	add	r1, sp, #12
   18f70:	f642 1302 	movw	r3, #10498	; 0x2902
   18f74:	f8ad 300e 	strh.w	r3, [sp, #14]
   18f78:	f00b fc2c 	bl	247d4 <bt_uuid_cmp>
   18f7c:	2800      	cmp	r0, #0
   18f7e:	d1ba      	bne.n	18ef6 <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   18f80:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   18f82:	4622      	mov	r2, r4
   18f84:	4628      	mov	r0, r5
   18f86:	f812 1b01 	ldrb.w	r1, [r2], #1
   18f8a:	f00b ffd9 	bl	24f40 <bt_conn_is_peer_addr_le>
   18f8e:	2800      	cmp	r0, #0
   18f90:	d0b1      	beq.n	18ef6 <bt_gatt_is_subscribed+0x5e>
   18f92:	8923      	ldrh	r3, [r4, #8]
   18f94:	421f      	tst	r7, r3
   18f96:	bf14      	ite	ne
   18f98:	2001      	movne	r0, #1
   18f9a:	2000      	moveq	r0, #0
   18f9c:	e7ac      	b.n	18ef8 <bt_gatt_is_subscribed+0x60>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   18f9e:	6820      	ldr	r0, [r4, #0]
   18fa0:	f88d 6004 	strb.w	r6, [sp, #4]
   18fa4:	f642 0303 	movw	r3, #10243	; 0x2803
   18fa8:	a901      	add	r1, sp, #4
   18faa:	f8ad 3006 	strh.w	r3, [sp, #6]
   18fae:	f00b fc11 	bl	247d4 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   18fb2:	2800      	cmp	r0, #0
   18fb4:	d0d7      	beq.n	18f66 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18fb6:	6820      	ldr	r0, [r4, #0]
   18fb8:	f88d 6008 	strb.w	r6, [sp, #8]
   18fbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18fc0:	a902      	add	r1, sp, #8
   18fc2:	f8ad 300a 	strh.w	r3, [sp, #10]
   18fc6:	f00b fc05 	bl	247d4 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   18fca:	2800      	cmp	r0, #0
   18fcc:	d0cb      	beq.n	18f66 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18fce:	6820      	ldr	r0, [r4, #0]
   18fd0:	f88d 600c 	strb.w	r6, [sp, #12]
   18fd4:	f642 0301 	movw	r3, #10241	; 0x2801
   18fd8:	a903      	add	r1, sp, #12
   18fda:	f8ad 300e 	strh.w	r3, [sp, #14]
   18fde:	f00b fbf9 	bl	247d4 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18fe2:	2800      	cmp	r0, #0
   18fe4:	d0bf      	beq.n	18f66 <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   18fe6:	4620      	mov	r0, r4
   18fe8:	f7ff ff44 	bl	18e74 <bt_gatt_attr_next>
		if (!attr) {
   18fec:	4604      	mov	r4, r0
   18fee:	2800      	cmp	r0, #0
   18ff0:	d1b0      	bne.n	18f54 <bt_gatt_is_subscribed+0xbc>
   18ff2:	e780      	b.n	18ef6 <bt_gatt_is_subscribed+0x5e>
   18ff4:	00029da4 	.word	0x00029da4
   18ff8:	000280bd 	.word	0x000280bd

00018ffc <gatt_indicate>:
{
   18ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19000:	4615      	mov	r5, r2
   19002:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19004:	2294      	movs	r2, #148	; 0x94
   19006:	6869      	ldr	r1, [r5, #4]
{
   19008:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1900a:	f00c feb4 	bl	25d76 <bt_gatt_check_perm>
   1900e:	4680      	mov	r8, r0
   19010:	b140      	cbz	r0, 19024 <gatt_indicate+0x28>
		BT_WARN("Link is not encrypted");
   19012:	482d      	ldr	r0, [pc, #180]	; (190c8 <gatt_indicate+0xcc>)
   19014:	2157      	movs	r1, #87	; 0x57
   19016:	f00a fcf5 	bl	23a04 <z_log_minimal_printk>
		return -EPERM;
   1901a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   1901e:	4628      	mov	r0, r5
   19020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   19024:	6869      	ldr	r1, [r5, #4]
   19026:	2202      	movs	r2, #2
   19028:	4630      	mov	r0, r6
   1902a:	f7ff ff35 	bl	18e98 <bt_gatt_is_subscribed>
   1902e:	b930      	cbnz	r0, 1903e <gatt_indicate+0x42>
			BT_WARN("Device is not subscribed to characteristic");
   19030:	4826      	ldr	r0, [pc, #152]	; (190cc <gatt_indicate+0xd0>)
   19032:	2157      	movs	r1, #87	; 0x57
   19034:	f00a fce6 	bl	23a04 <z_log_minimal_printk>
			return -EINVAL;
   19038:	f06f 0515 	mvn.w	r5, #21
   1903c:	e7ef      	b.n	1901e <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1903e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   19042:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   19044:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19046:	f7fe fef1 	bl	17e2c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1904a:	3702      	adds	r7, #2
	if (!req) {
   1904c:	4604      	mov	r4, r0
   1904e:	b1a0      	cbz	r0, 1907a <gatt_indicate+0x7e>
	req->func = func;
   19050:	4b1f      	ldr	r3, [pc, #124]	; (190d0 <gatt_indicate+0xd4>)
	req->len = len;
   19052:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   19054:	211d      	movs	r1, #29
   19056:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   19058:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1905c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1905e:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   19060:	463a      	mov	r2, r7
   19062:	4630      	mov	r0, r6
   19064:	f7fe fc1c 	bl	178a0 <bt_att_create_pdu>
	if (!buf) {
   19068:	4607      	mov	r7, r0
   1906a:	b948      	cbnz	r0, 19080 <gatt_indicate+0x84>
		BT_WARN("No buffer available to send indication");
   1906c:	4819      	ldr	r0, [pc, #100]	; (190d4 <gatt_indicate+0xd8>)
   1906e:	2157      	movs	r1, #87	; 0x57
   19070:	f00a fcc8 	bl	23a04 <z_log_minimal_printk>
		bt_att_req_free(req);
   19074:	4620      	mov	r0, r4
   19076:	f7fe fefb 	bl	17e70 <bt_att_req_free>
		return -ENOMEM;
   1907a:	f06f 050b 	mvn.w	r5, #11
   1907e:	e7ce      	b.n	1901e <gatt_indicate+0x22>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   19080:	2301      	movs	r3, #1
   19082:	4642      	mov	r2, r8
   19084:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   19086:	f107 0a08 	add.w	sl, r7, #8
   1908a:	f00c fc6d 	bl	25968 <bt_att_set_tx_meta_data>
   1908e:	2102      	movs	r1, #2
   19090:	4650      	mov	r0, sl
   19092:	f002 fd5b 	bl	1bb4c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   19096:	4680      	mov	r8, r0
   19098:	4650      	mov	r0, sl
   1909a:	f828 9b02 	strh.w	r9, [r8], #2
   1909e:	8aa9      	ldrh	r1, [r5, #20]
   190a0:	f002 fd54 	bl	1bb4c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   190a4:	8aaa      	ldrh	r2, [r5, #20]
   190a6:	6929      	ldr	r1, [r5, #16]
   190a8:	4640      	mov	r0, r8
   190aa:	f00b fb20 	bl	246ee <memcpy>
	req->buf = buf;
   190ae:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   190b0:	4621      	mov	r1, r4
   190b2:	4630      	mov	r0, r6
   190b4:	f7fe fffc 	bl	180b0 <bt_att_req_send>
	if (err) {
   190b8:	4605      	mov	r5, r0
   190ba:	2800      	cmp	r0, #0
   190bc:	d0af      	beq.n	1901e <gatt_indicate+0x22>
		bt_att_req_free(req);
   190be:	4620      	mov	r0, r4
   190c0:	f7fe fed6 	bl	17e70 <bt_att_req_free>
   190c4:	e7ab      	b.n	1901e <gatt_indicate+0x22>
   190c6:	bf00      	nop
   190c8:	00029e28 	.word	0x00029e28
   190cc:	00029e43 	.word	0x00029e43
   190d0:	00025991 	.word	0x00025991
   190d4:	00029e73 	.word	0x00029e73

000190d8 <bt_gatt_indicate>:
{
   190d8:	b530      	push	{r4, r5, lr}
   190da:	4605      	mov	r5, r0
   190dc:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   190de:	460c      	mov	r4, r1
   190e0:	b951      	cbnz	r1, 190f8 <bt_gatt_indicate+0x20>
   190e2:	4942      	ldr	r1, [pc, #264]	; (191ec <bt_gatt_indicate+0x114>)
   190e4:	4842      	ldr	r0, [pc, #264]	; (191f0 <bt_gatt_indicate+0x118>)
   190e6:	f640 320b 	movw	r2, #2827	; 0xb0b
   190ea:	f00a fc7d 	bl	239e8 <assert_print>
   190ee:	f640 310b 	movw	r1, #2827	; 0xb0b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   190f2:	483e      	ldr	r0, [pc, #248]	; (191ec <bt_gatt_indicate+0x114>)
   190f4:	f00a fc71 	bl	239da <assert_post_action>
   190f8:	684b      	ldr	r3, [r1, #4]
   190fa:	b953      	cbnz	r3, 19112 <bt_gatt_indicate+0x3a>
   190fc:	680b      	ldr	r3, [r1, #0]
   190fe:	b943      	cbnz	r3, 19112 <bt_gatt_indicate+0x3a>
   19100:	493a      	ldr	r1, [pc, #232]	; (191ec <bt_gatt_indicate+0x114>)
   19102:	483b      	ldr	r0, [pc, #236]	; (191f0 <bt_gatt_indicate+0x118>)
   19104:	f640 320c 	movw	r2, #2828	; 0xb0c
   19108:	f00a fc6e 	bl	239e8 <assert_print>
   1910c:	f640 310c 	movw	r1, #2828	; 0xb0c
   19110:	e7ef      	b.n	190f2 <bt_gatt_indicate+0x1a>
   19112:	4838      	ldr	r0, [pc, #224]	; (191f4 <bt_gatt_indicate+0x11c>)
   19114:	f00c fcbd 	bl	25a92 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19118:	0742      	lsls	r2, r0, #29
   1911a:	d561      	bpl.n	191e0 <bt_gatt_indicate+0x108>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1911c:	b115      	cbz	r5, 19124 <bt_gatt_indicate+0x4c>
   1911e:	7b6b      	ldrb	r3, [r5, #13]
   19120:	2b07      	cmp	r3, #7
   19122:	d160      	bne.n	191e6 <bt_gatt_indicate+0x10e>
	data.attr = params->attr;
   19124:	6860      	ldr	r0, [r4, #4]
   19126:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19128:	f7ff fcb6 	bl	18a98 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1912c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1912e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   19132:	b33a      	cbz	r2, 19184 <bt_gatt_indicate+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19134:	a905      	add	r1, sp, #20
   19136:	9102      	str	r1, [sp, #8]
   19138:	492f      	ldr	r1, [pc, #188]	; (191f8 <bt_gatt_indicate+0x120>)
   1913a:	9101      	str	r1, [sp, #4]
   1913c:	2101      	movs	r1, #1
	found->attr = NULL;
   1913e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19140:	9100      	str	r1, [sp, #0]
   19142:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   19146:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19148:	f7ff fce6 	bl	18b18 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1914c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1914e:	b91b      	cbnz	r3, 19158 <bt_gatt_indicate+0x80>
			return -ENOENT;
   19150:	f06f 0001 	mvn.w	r0, #1
}
   19154:	b00b      	add	sp, #44	; 0x2c
   19156:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   19158:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1915a:	9b05      	ldr	r3, [sp, #20]
   1915c:	6818      	ldr	r0, [r3, #0]
   1915e:	2300      	movs	r3, #0
   19160:	f88d 3010 	strb.w	r3, [sp, #16]
   19164:	a904      	add	r1, sp, #16
   19166:	f642 0303 	movw	r3, #10243	; 0x2803
   1916a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1916e:	f00b fb31 	bl	247d4 <bt_uuid_cmp>
   19172:	b970      	cbnz	r0, 19192 <bt_gatt_indicate+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19174:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   19176:	68c3      	ldr	r3, [r0, #12]
   19178:	799b      	ldrb	r3, [r3, #6]
   1917a:	069b      	lsls	r3, r3, #26
   1917c:	d405      	bmi.n	1918a <bt_gatt_indicate+0xb2>
			return -EINVAL;
   1917e:	f06f 0015 	mvn.w	r0, #21
   19182:	e7e7      	b.n	19154 <bt_gatt_indicate+0x7c>
		if (!data.handle) {
   19184:	2800      	cmp	r0, #0
   19186:	d1e8      	bne.n	1915a <bt_gatt_indicate+0x82>
   19188:	e7e2      	b.n	19150 <bt_gatt_indicate+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1918a:	f00c fd9b 	bl	25cc4 <bt_gatt_attr_value_handle>
   1918e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   19192:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   19196:	b13d      	cbz	r5, 191a8 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   19198:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1919a:	4601      	mov	r1, r0
		params->_ref = 1;
   1919c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1919e:	4622      	mov	r2, r4
   191a0:	4628      	mov	r0, r5
   191a2:	f7ff ff2b 	bl	18ffc <gatt_indicate>
   191a6:	e7d5      	b.n	19154 <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
   191a8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   191ac:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   191ae:	2302      	movs	r3, #2
   191b0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   191b4:	f642 1302 	movw	r3, #10498	; 0x2902
   191b8:	f8ad 3012 	strh.w	r3, [sp, #18]
   191bc:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   191be:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   191c0:	9302      	str	r3, [sp, #8]
   191c2:	4b0e      	ldr	r3, [pc, #56]	; (191fc <bt_gatt_indicate+0x124>)
   191c4:	9301      	str	r3, [sp, #4]
   191c6:	2301      	movs	r3, #1
   191c8:	9300      	str	r3, [sp, #0]
   191ca:	aa04      	add	r2, sp, #16
   191cc:	462b      	mov	r3, r5
   191ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   191d2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   191d4:	f88d 5010 	strb.w	r5, [sp, #16]
   191d8:	f7ff fc9e 	bl	18b18 <bt_gatt_foreach_attr_type>
	return data.err;
   191dc:	9807      	ldr	r0, [sp, #28]
   191de:	e7b9      	b.n	19154 <bt_gatt_indicate+0x7c>
		return -EAGAIN;
   191e0:	f06f 000a 	mvn.w	r0, #10
   191e4:	e7b6      	b.n	19154 <bt_gatt_indicate+0x7c>
		return -ENOTCONN;
   191e6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   191ea:	e7b3      	b.n	19154 <bt_gatt_indicate+0x7c>
   191ec:	00029da4 	.word	0x00029da4
   191f0:	000280bd 	.word	0x000280bd
   191f4:	2000044c 	.word	0x2000044c
   191f8:	000259b7 	.word	0x000259b7
   191fc:	0001953d 	.word	0x0001953d

00019200 <sc_process>:
{
   19200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   19202:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   19206:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   19208:	f1a0 0720 	sub.w	r7, r0, #32
   1920c:	4628      	mov	r0, r5
   1920e:	f00c fc40 	bl	25a92 <atomic_get>
   19212:	0783      	lsls	r3, r0, #30
   19214:	f3c0 0640 	ubfx	r6, r0, #1, #1
   19218:	d50a      	bpl.n	19230 <sc_process+0x30>
   1921a:	4917      	ldr	r1, [pc, #92]	; (19278 <sc_process+0x78>)
   1921c:	4817      	ldr	r0, [pc, #92]	; (1927c <sc_process+0x7c>)
   1921e:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   19222:	f00a fbe1 	bl	239e8 <assert_print>
   19226:	4814      	ldr	r0, [pc, #80]	; (19278 <sc_process+0x78>)
   19228:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   1922c:	f00a fbd5 	bl	239da <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19230:	f854 3c08 	ldr.w	r3, [r4, #-8]
   19234:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19236:	f06f 0101 	mvn.w	r1, #1
   1923a:	4628      	mov	r0, r5
   1923c:	f00c fc41 	bl	25ac2 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   19240:	4b0f      	ldr	r3, [pc, #60]	; (19280 <sc_process+0x80>)
   19242:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   19246:	4b0f      	ldr	r3, [pc, #60]	; (19284 <sc_process+0x84>)
   19248:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1924c:	ab01      	add	r3, sp, #4
   1924e:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   19252:	2304      	movs	r3, #4
	sc->start = 0U;
   19254:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   19258:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1925c:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   19260:	4639      	mov	r1, r7
   19262:	4630      	mov	r0, r6
   19264:	f7ff ff38 	bl	190d8 <bt_gatt_indicate>
   19268:	b918      	cbnz	r0, 19272 <sc_process+0x72>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1926a:	2102      	movs	r1, #2
   1926c:	4628      	mov	r0, r5
   1926e:	f00c fc16 	bl	25a9e <atomic_or>
}
   19272:	b003      	add	sp, #12
   19274:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19276:	bf00      	nop
   19278:	00029da4 	.word	0x00029da4
   1927c:	000280bd 	.word	0x000280bd
   19280:	0002796c 	.word	0x0002796c
   19284:	0001895d 	.word	0x0001895d

00019288 <update_ccc>:
{
   19288:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1928c:	4b33      	ldr	r3, [pc, #204]	; (1935c <update_ccc+0xd4>)
	struct bt_conn *conn = data->conn;
   1928e:	6814      	ldr	r4, [r2, #0]
{
   19290:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19292:	6882      	ldr	r2, [r0, #8]
   19294:	429a      	cmp	r2, r3
{
   19296:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19298:	d116      	bne.n	192c8 <update_ccc+0x40>
	ccc = attr->user_data;
   1929a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1929c:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1929e:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   192a0:	b193      	cbz	r3, 192c8 <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   192a2:	7831      	ldrb	r1, [r6, #0]
   192a4:	4620      	mov	r0, r4
   192a6:	f00b fe4b 	bl	24f40 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   192aa:	b168      	cbz	r0, 192c8 <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   192ac:	f44f 7295 	mov.w	r2, #298	; 0x12a
   192b0:	4629      	mov	r1, r5
   192b2:	4620      	mov	r0, r4
   192b4:	f00c fd5f 	bl	25d76 <bt_gatt_check_perm>
		if (err) {
   192b8:	b1d8      	cbz	r0, 192f2 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   192ba:	2803      	cmp	r0, #3
   192bc:	d108      	bne.n	192d0 <update_ccc+0x48>
				BT_WARN("CCC %p not writable", attr);
   192be:	4828      	ldr	r0, [pc, #160]	; (19360 <update_ccc+0xd8>)
   192c0:	462a      	mov	r2, r5
   192c2:	2157      	movs	r1, #87	; 0x57
   192c4:	f00a fb9e 	bl	23a04 <z_log_minimal_printk>
}
   192c8:	2001      	movs	r0, #1
   192ca:	b002      	add	sp, #8
   192cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			sec = BT_SECURITY_L2;
   192d0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   192d2:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   192d4:	bf0c      	ite	eq
   192d6:	f04f 0803 	moveq.w	r8, #3
   192da:	f04f 0802 	movne.w	r8, #2
			    bt_conn_get_security(conn) < sec) {
   192de:	f00b fe2d 	bl	24f3c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   192e2:	4580      	cmp	r8, r0
   192e4:	d905      	bls.n	192f2 <update_ccc+0x6a>
				if (data->sec < sec) {
   192e6:	793b      	ldrb	r3, [r7, #4]
   192e8:	4543      	cmp	r3, r8
   192ea:	d2ed      	bcs.n	192c8 <update_ccc+0x40>
					data->sec = sec;
   192ec:	f887 8004 	strb.w	r8, [r7, #4]
   192f0:	e7ea      	b.n	192c8 <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
   192f2:	4631      	mov	r1, r6
   192f4:	4628      	mov	r0, r5
   192f6:	f00c fb41 	bl	2597c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   192fa:	4b1a      	ldr	r3, [pc, #104]	; (19364 <update_ccc+0xdc>)
   192fc:	429e      	cmp	r6, r3
   192fe:	d1e3      	bne.n	192c8 <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19300:	7a20      	ldrb	r0, [r4, #8]
   19302:	f104 0190 	add.w	r1, r4, #144	; 0x90
   19306:	f7fe ff5d 	bl	181c4 <find_sc_cfg>
	if (!cfg) {
   1930a:	2800      	cmp	r0, #0
   1930c:	d0dc      	beq.n	192c8 <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
   1930e:	8902      	ldrh	r2, [r0, #8]
   19310:	8943      	ldrh	r3, [r0, #10]
   19312:	ea52 0103 	orrs.w	r1, r2, r3
   19316:	d0d7      	beq.n	192c8 <update_ccc+0x40>
	index = bt_conn_index(conn);
   19318:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1931a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1931e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   19322:	f7fd f9eb 	bl	166fc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   19326:	4910      	ldr	r1, [pc, #64]	; (19368 <update_ccc+0xe0>)
   19328:	4a10      	ldr	r2, [pc, #64]	; (1936c <update_ccc+0xe4>)
   1932a:	2318      	movs	r3, #24
   1932c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19330:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   19332:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   19334:	4a0e      	ldr	r2, [pc, #56]	; (19370 <update_ccc+0xe8>)
   19336:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   19338:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1933a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1933e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   19340:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19342:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   19346:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19348:	4620      	mov	r0, r4
   1934a:	f7ff fec5 	bl	190d8 <bt_gatt_indicate>
   1934e:	2800      	cmp	r0, #0
   19350:	d0ba      	beq.n	192c8 <update_ccc+0x40>
		BT_ERR("SC restore indication failed");
   19352:	4808      	ldr	r0, [pc, #32]	; (19374 <update_ccc+0xec>)
   19354:	2145      	movs	r1, #69	; 0x45
   19356:	f00a fb55 	bl	23a04 <z_log_minimal_printk>
   1935a:	e7b5      	b.n	192c8 <update_ccc+0x40>
   1935c:	00018831 	.word	0x00018831
   19360:	00029e9f 	.word	0x00029e9f
   19364:	200006d4 	.word	0x200006d4
   19368:	200021c4 	.word	0x200021c4
   1936c:	0002796c 	.word	0x0002796c
   19370:	00025c4f 	.word	0x00025c4f
   19374:	00029eb8 	.word	0x00029eb8

00019378 <gatt_notify>:
{
   19378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1937c:	4614      	mov	r4, r2
   1937e:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19380:	2294      	movs	r2, #148	; 0x94
   19382:	6861      	ldr	r1, [r4, #4]
{
   19384:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19386:	f00c fcf6 	bl	25d76 <bt_gatt_check_perm>
   1938a:	b138      	cbz	r0, 1939c <gatt_notify+0x24>
		BT_WARN("Link is not encrypted");
   1938c:	4820      	ldr	r0, [pc, #128]	; (19410 <gatt_notify+0x98>)
   1938e:	2157      	movs	r1, #87	; 0x57
   19390:	f00a fb38 	bl	23a04 <z_log_minimal_printk>
		return -EPERM;
   19394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1939c:	6861      	ldr	r1, [r4, #4]
   1939e:	2201      	movs	r2, #1
   193a0:	4630      	mov	r0, r6
   193a2:	f7ff fd79 	bl	18e98 <bt_gatt_is_subscribed>
   193a6:	b930      	cbnz	r0, 193b6 <gatt_notify+0x3e>
			BT_WARN("Device is not subscribed to characteristic");
   193a8:	481a      	ldr	r0, [pc, #104]	; (19414 <gatt_notify+0x9c>)
   193aa:	2157      	movs	r1, #87	; 0x57
   193ac:	f00a fb2a 	bl	23a04 <z_log_minimal_printk>
			return -EINVAL;
   193b0:	f06f 0015 	mvn.w	r0, #21
   193b4:	e7f0      	b.n	19398 <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   193b6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   193b8:	211b      	movs	r1, #27
   193ba:	3202      	adds	r2, #2
   193bc:	4630      	mov	r0, r6
   193be:	f7fe fa6f 	bl	178a0 <bt_att_create_pdu>
	if (!buf) {
   193c2:	4605      	mov	r5, r0
   193c4:	b930      	cbnz	r0, 193d4 <gatt_notify+0x5c>
		BT_WARN("No buffer available to send notification");
   193c6:	4814      	ldr	r0, [pc, #80]	; (19418 <gatt_notify+0xa0>)
   193c8:	2157      	movs	r1, #87	; 0x57
   193ca:	f00a fb1b 	bl	23a04 <z_log_minimal_printk>
		return -ENOMEM;
   193ce:	f06f 000b 	mvn.w	r0, #11
   193d2:	e7e1      	b.n	19398 <gatt_notify+0x20>
   193d4:	f100 0908 	add.w	r9, r0, #8
   193d8:	2102      	movs	r1, #2
   193da:	4648      	mov	r0, r9
   193dc:	f002 fbb6 	bl	1bb4c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   193e0:	4607      	mov	r7, r0
   193e2:	4648      	mov	r0, r9
   193e4:	f827 8b02 	strh.w	r8, [r7], #2
   193e8:	89a1      	ldrh	r1, [r4, #12]
   193ea:	f002 fbaf 	bl	1bb4c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   193ee:	89a2      	ldrh	r2, [r4, #12]
   193f0:	68a1      	ldr	r1, [r4, #8]
   193f2:	4638      	mov	r0, r7
   193f4:	f00b f97b 	bl	246ee <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   193f8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   193fc:	4628      	mov	r0, r5
   193fe:	2301      	movs	r3, #1
   19400:	f00c fab2 	bl	25968 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   19404:	4629      	mov	r1, r5
   19406:	4630      	mov	r0, r6
}
   19408:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1940c:	f7fe bdf8 	b.w	18000 <bt_att_send>
   19410:	00029e28 	.word	0x00029e28
   19414:	00029e43 	.word	0x00029e43
   19418:	00029eda 	.word	0x00029eda

0001941c <bt_gatt_notify_cb>:
{
   1941c:	b530      	push	{r4, r5, lr}
   1941e:	4605      	mov	r5, r0
   19420:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   19422:	460c      	mov	r4, r1
   19424:	b951      	cbnz	r1, 1943c <bt_gatt_notify_cb+0x20>
   19426:	4940      	ldr	r1, [pc, #256]	; (19528 <bt_gatt_notify_cb+0x10c>)
   19428:	4840      	ldr	r0, [pc, #256]	; (1952c <bt_gatt_notify_cb+0x110>)
   1942a:	f640 222b 	movw	r2, #2603	; 0xa2b
   1942e:	f00a fadb 	bl	239e8 <assert_print>
   19432:	f640 212b 	movw	r1, #2603	; 0xa2b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   19436:	483c      	ldr	r0, [pc, #240]	; (19528 <bt_gatt_notify_cb+0x10c>)
   19438:	f00a facf 	bl	239da <assert_post_action>
   1943c:	684b      	ldr	r3, [r1, #4]
   1943e:	b953      	cbnz	r3, 19456 <bt_gatt_notify_cb+0x3a>
   19440:	680b      	ldr	r3, [r1, #0]
   19442:	b943      	cbnz	r3, 19456 <bt_gatt_notify_cb+0x3a>
   19444:	4938      	ldr	r1, [pc, #224]	; (19528 <bt_gatt_notify_cb+0x10c>)
   19446:	4839      	ldr	r0, [pc, #228]	; (1952c <bt_gatt_notify_cb+0x110>)
   19448:	f640 222c 	movw	r2, #2604	; 0xa2c
   1944c:	f00a facc 	bl	239e8 <assert_print>
   19450:	f640 212c 	movw	r1, #2604	; 0xa2c
   19454:	e7ef      	b.n	19436 <bt_gatt_notify_cb+0x1a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19456:	4836      	ldr	r0, [pc, #216]	; (19530 <bt_gatt_notify_cb+0x114>)
   19458:	f00c fb1b 	bl	25a92 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1945c:	0742      	lsls	r2, r0, #29
   1945e:	d55d      	bpl.n	1951c <bt_gatt_notify_cb+0x100>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19460:	b115      	cbz	r5, 19468 <bt_gatt_notify_cb+0x4c>
   19462:	7b6b      	ldrb	r3, [r5, #13]
   19464:	2b07      	cmp	r3, #7
   19466:	d15c      	bne.n	19522 <bt_gatt_notify_cb+0x106>
	data.attr = params->attr;
   19468:	6860      	ldr	r0, [r4, #4]
   1946a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1946c:	f7ff fb14 	bl	18a98 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   19470:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19472:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   19476:	b33a      	cbz	r2, 194c8 <bt_gatt_notify_cb+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19478:	a905      	add	r1, sp, #20
   1947a:	9102      	str	r1, [sp, #8]
   1947c:	492d      	ldr	r1, [pc, #180]	; (19534 <bt_gatt_notify_cb+0x118>)
   1947e:	9101      	str	r1, [sp, #4]
   19480:	2101      	movs	r1, #1
	found->attr = NULL;
   19482:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19484:	9100      	str	r1, [sp, #0]
   19486:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1948a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1948c:	f7ff fb44 	bl	18b18 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19490:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19492:	b91b      	cbnz	r3, 1949c <bt_gatt_notify_cb+0x80>
			return -ENOENT;
   19494:	f06f 0001 	mvn.w	r0, #1
}
   19498:	b00b      	add	sp, #44	; 0x2c
   1949a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1949c:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1949e:	9b05      	ldr	r3, [sp, #20]
   194a0:	6818      	ldr	r0, [r3, #0]
   194a2:	2300      	movs	r3, #0
   194a4:	f88d 3010 	strb.w	r3, [sp, #16]
   194a8:	a904      	add	r1, sp, #16
   194aa:	f642 0303 	movw	r3, #10243	; 0x2803
   194ae:	f8ad 3012 	strh.w	r3, [sp, #18]
   194b2:	f00b f98f 	bl	247d4 <bt_uuid_cmp>
   194b6:	b970      	cbnz	r0, 194d6 <bt_gatt_notify_cb+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   194b8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   194ba:	68c3      	ldr	r3, [r0, #12]
   194bc:	799b      	ldrb	r3, [r3, #6]
   194be:	06db      	lsls	r3, r3, #27
   194c0:	d405      	bmi.n	194ce <bt_gatt_notify_cb+0xb2>
			return -EINVAL;
   194c2:	f06f 0015 	mvn.w	r0, #21
   194c6:	e7e7      	b.n	19498 <bt_gatt_notify_cb+0x7c>
		if (!data.handle) {
   194c8:	2800      	cmp	r0, #0
   194ca:	d1e8      	bne.n	1949e <bt_gatt_notify_cb+0x82>
   194cc:	e7e2      	b.n	19494 <bt_gatt_notify_cb+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   194ce:	f00c fbf9 	bl	25cc4 <bt_gatt_attr_value_handle>
   194d2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   194d6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   194da:	b12d      	cbz	r5, 194e8 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   194dc:	4601      	mov	r1, r0
   194de:	4622      	mov	r2, r4
   194e0:	4628      	mov	r0, r5
   194e2:	f7ff ff49 	bl	19378 <gatt_notify>
   194e6:	e7d7      	b.n	19498 <bt_gatt_notify_cb+0x7c>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   194e8:	f642 1202 	movw	r2, #10498	; 0x2902
   194ec:	f8ad 2012 	strh.w	r2, [sp, #18]
   194f0:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   194f2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   194f6:	9202      	str	r2, [sp, #8]
   194f8:	4a0f      	ldr	r2, [pc, #60]	; (19538 <bt_gatt_notify_cb+0x11c>)
	data.err = -ENOTCONN;
   194fa:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   194fc:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   194fe:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   19502:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19506:	aa04      	add	r2, sp, #16
   19508:	462b      	mov	r3, r5
   1950a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1950e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19510:	f88d 5010 	strb.w	r5, [sp, #16]
   19514:	f7ff fb00 	bl	18b18 <bt_gatt_foreach_attr_type>
	return data.err;
   19518:	9807      	ldr	r0, [sp, #28]
   1951a:	e7bd      	b.n	19498 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   1951c:	f06f 000a 	mvn.w	r0, #10
   19520:	e7ba      	b.n	19498 <bt_gatt_notify_cb+0x7c>
		return -ENOTCONN;
   19522:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19526:	e7b7      	b.n	19498 <bt_gatt_notify_cb+0x7c>
   19528:	00029da4 	.word	0x00029da4
   1952c:	000280bd 	.word	0x000280bd
   19530:	2000044c 	.word	0x2000044c
   19534:	000259b7 	.word	0x000259b7
   19538:	0001953d 	.word	0x0001953d

0001953c <notify_cb>:
{
   1953c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19540:	4b3f      	ldr	r3, [pc, #252]	; (19640 <notify_cb+0x104>)
{
   19542:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19544:	6882      	ldr	r2, [r0, #8]
   19546:	429a      	cmp	r2, r3
{
   19548:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1954a:	d003      	beq.n	19554 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   1954c:	2701      	movs	r7, #1
}
   1954e:	4638      	mov	r0, r7
   19550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   19554:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   19556:	4b3b      	ldr	r3, [pc, #236]	; (19644 <notify_cb+0x108>)
   19558:	429e      	cmp	r6, r3
   1955a:	d011      	beq.n	19580 <notify_cb+0x44>
		if (cfg->value != data->type) {
   1955c:	8932      	ldrh	r2, [r6, #8]
   1955e:	89ab      	ldrh	r3, [r5, #12]
   19560:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19562:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   19566:	d1f1      	bne.n	1954c <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19568:	7830      	ldrb	r0, [r6, #0]
   1956a:	f7fd fa45 	bl	169f8 <bt_conn_lookup_addr_le>
		if (!conn) {
   1956e:	4604      	mov	r4, r0
   19570:	2800      	cmp	r0, #0
   19572:	d0eb      	beq.n	1954c <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   19574:	7b43      	ldrb	r3, [r0, #13]
   19576:	2b07      	cmp	r3, #7
   19578:	d026      	beq.n	195c8 <notify_cb+0x8c>
			bt_conn_unref(conn);
   1957a:	f7fc ffad 	bl	164d8 <bt_conn_unref>
			continue;
   1957e:	e7e5      	b.n	1954c <notify_cb+0x10>
   19580:	4c31      	ldr	r4, [pc, #196]	; (19648 <notify_cb+0x10c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19582:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1964c <notify_cb+0x110>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19586:	f04f 0800 	mov.w	r8, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1958a:	4649      	mov	r1, r9
   1958c:	4620      	mov	r0, r4
   1958e:	f00c fa6b 	bl	25a68 <bt_addr_le_eq>
   19592:	b978      	cbnz	r0, 195b4 <notify_cb+0x78>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   19594:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   19598:	2207      	movs	r2, #7
   1959a:	4621      	mov	r1, r4
   1959c:	f7fd fa62 	bl	16a64 <bt_conn_lookup_state_le>
			if (!conn) {
   195a0:	b978      	cbnz	r0, 195c2 <notify_cb+0x86>
				sc = (struct sc_data *)data->ind_params->data;
   195a2:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   195a4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   195a8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   195aa:	4621      	mov	r1, r4
   195ac:	8853      	ldrh	r3, [r2, #2]
   195ae:	8812      	ldrh	r2, [r2, #0]
   195b0:	f7fe ff18 	bl	183e4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   195b4:	340c      	adds	r4, #12
   195b6:	f1b8 0f00 	cmp.w	r8, #0
   195ba:	d1cf      	bne.n	1955c <notify_cb+0x20>
   195bc:	f04f 0801 	mov.w	r8, #1
   195c0:	e7e3      	b.n	1958a <notify_cb+0x4e>
			bt_conn_unref(conn);
   195c2:	f7fc ff89 	bl	164d8 <bt_conn_unref>
   195c6:	e7f5      	b.n	195b4 <notify_cb+0x78>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   195c8:	6973      	ldr	r3, [r6, #20]
   195ca:	b123      	cbz	r3, 195d6 <notify_cb+0x9a>
   195cc:	4639      	mov	r1, r7
   195ce:	4798      	blx	r3
   195d0:	b908      	cbnz	r0, 195d6 <notify_cb+0x9a>
			bt_conn_unref(conn);
   195d2:	4620      	mov	r0, r4
   195d4:	e7d1      	b.n	1957a <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   195d6:	4639      	mov	r1, r7
   195d8:	2294      	movs	r2, #148	; 0x94
   195da:	4620      	mov	r0, r4
   195dc:	f00c fbcb 	bl	25d76 <bt_gatt_check_perm>
   195e0:	4607      	mov	r7, r0
   195e2:	b120      	cbz	r0, 195ee <notify_cb+0xb2>
			BT_WARN("Link is not encrypted");
   195e4:	481a      	ldr	r0, [pc, #104]	; (19650 <notify_cb+0x114>)
   195e6:	2157      	movs	r1, #87	; 0x57
   195e8:	f00a fa0c 	bl	23a04 <z_log_minimal_printk>
   195ec:	e7f1      	b.n	195d2 <notify_cb+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   195ee:	89ab      	ldrh	r3, [r5, #12]
   195f0:	2b02      	cmp	r3, #2
   195f2:	d114      	bne.n	1961e <notify_cb+0xe2>
   195f4:	8933      	ldrh	r3, [r6, #8]
   195f6:	079a      	lsls	r2, r3, #30
   195f8:	d405      	bmi.n	19606 <notify_cb+0xca>
		bt_conn_unref(conn);
   195fa:	4620      	mov	r0, r4
   195fc:	f7fc ff6c 	bl	164d8 <bt_conn_unref>
		data->err = 0;
   19600:	2300      	movs	r3, #0
   19602:	60ab      	str	r3, [r5, #8]
   19604:	e7a2      	b.n	1954c <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   19606:	692a      	ldr	r2, [r5, #16]
   19608:	88a9      	ldrh	r1, [r5, #4]
   1960a:	4620      	mov	r0, r4
   1960c:	f7ff fcf6 	bl	18ffc <gatt_indicate>
			if (err == 0) {
   19610:	4606      	mov	r6, r0
   19612:	b978      	cbnz	r0, 19634 <notify_cb+0xf8>
				data->ind_params->_ref++;
   19614:	692a      	ldr	r2, [r5, #16]
   19616:	7d93      	ldrb	r3, [r2, #22]
   19618:	3301      	adds	r3, #1
   1961a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1961c:	e7ed      	b.n	195fa <notify_cb+0xbe>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1961e:	2b01      	cmp	r3, #1
   19620:	d1eb      	bne.n	195fa <notify_cb+0xbe>
   19622:	8933      	ldrh	r3, [r6, #8]
   19624:	07db      	lsls	r3, r3, #31
   19626:	d5e8      	bpl.n	195fa <notify_cb+0xbe>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   19628:	692a      	ldr	r2, [r5, #16]
   1962a:	88a9      	ldrh	r1, [r5, #4]
   1962c:	4620      	mov	r0, r4
   1962e:	f7ff fea3 	bl	19378 <gatt_notify>
   19632:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   19634:	4620      	mov	r0, r4
   19636:	f7fc ff4f 	bl	164d8 <bt_conn_unref>
		if (err < 0) {
   1963a:	2e00      	cmp	r6, #0
   1963c:	db87      	blt.n	1954e <notify_cb+0x12>
   1963e:	e7df      	b.n	19600 <notify_cb+0xc4>
   19640:	00018831 	.word	0x00018831
   19644:	200006d4 	.word	0x200006d4
   19648:	20002561 	.word	0x20002561
   1964c:	000289b2 	.word	0x000289b2
   19650:	00029e28 	.word	0x00029e28

00019654 <bt_gatt_connected>:
{
   19654:	b570      	push	{r4, r5, r6, lr}
   19656:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19658:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1965c:	4604      	mov	r4, r0
	data.conn = conn;
   1965e:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   19660:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19662:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   19664:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19668:	4629      	mov	r1, r5
   1966a:	f00b f9ea 	bl	24a42 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1966e:	b190      	cbz	r0, 19696 <bt_gatt_connected+0x42>
		if (conn->id) {
   19670:	7a22      	ldrb	r2, [r4, #8]
   19672:	b34a      	cbz	r2, 196c8 <bt_gatt_connected+0x74>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   19674:	ae02      	add	r6, sp, #8
   19676:	2104      	movs	r1, #4
   19678:	4630      	mov	r0, r6
   1967a:	f009 ff1f 	bl	234bc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1967e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   19680:	4a12      	ldr	r2, [pc, #72]	; (196cc <bt_gatt_connected+0x78>)
   19682:	2124      	movs	r1, #36	; 0x24
   19684:	a805      	add	r0, sp, #20
   19686:	462b      	mov	r3, r5
   19688:	f7fa fa66 	bl	13b58 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1968c:	aa05      	add	r2, sp, #20
   1968e:	4910      	ldr	r1, [pc, #64]	; (196d0 <bt_gatt_connected+0x7c>)
   19690:	4610      	mov	r0, r2
   19692:	f7f8 ffcf 	bl	12634 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19696:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1969a:	4a0e      	ldr	r2, [pc, #56]	; (196d4 <bt_gatt_connected+0x80>)
   1969c:	ab03      	add	r3, sp, #12
   1969e:	2001      	movs	r0, #1
   196a0:	f00c fb5e 	bl	25d60 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   196a4:	4620      	mov	r0, r4
   196a6:	f00b fc49 	bl	24f3c <bt_conn_get_security>
   196aa:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   196ae:	4288      	cmp	r0, r1
   196b0:	d208      	bcs.n	196c4 <bt_gatt_connected+0x70>
		int err = bt_conn_set_security(conn, data.sec);
   196b2:	4620      	mov	r0, r4
   196b4:	f00b fc12 	bl	24edc <bt_conn_set_security>
		if (err) {
   196b8:	4602      	mov	r2, r0
   196ba:	b118      	cbz	r0, 196c4 <bt_gatt_connected+0x70>
			BT_WARN("Failed to set security for bonded peer (%d)",
   196bc:	4806      	ldr	r0, [pc, #24]	; (196d8 <bt_gatt_connected+0x84>)
   196be:	2157      	movs	r1, #87	; 0x57
   196c0:	f00a f9a0 	bl	23a04 <z_log_minimal_printk>
}
   196c4:	b00e      	add	sp, #56	; 0x38
   196c6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   196c8:	9200      	str	r2, [sp, #0]
   196ca:	e7d9      	b.n	19680 <bt_gatt_connected+0x2c>
   196cc:	00029e13 	.word	0x00029e13
   196d0:	00018d9d 	.word	0x00018d9d
   196d4:	00019289 	.word	0x00019289
   196d8:	00029f08 	.word	0x00029f08

000196dc <bt_gatt_att_max_mtu_changed>:
{
   196dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   196de:	4b08      	ldr	r3, [pc, #32]	; (19700 <bt_gatt_att_max_mtu_changed+0x24>)
   196e0:	681c      	ldr	r4, [r3, #0]
   196e2:	4605      	mov	r5, r0
   196e4:	460e      	mov	r6, r1
   196e6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   196e8:	b14c      	cbz	r4, 196fe <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   196ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   196ee:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   196f0:	b11b      	cbz	r3, 196fa <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   196f2:	463a      	mov	r2, r7
   196f4:	4631      	mov	r1, r6
   196f6:	4628      	mov	r0, r5
   196f8:	4798      	blx	r3
	return node->next;
   196fa:	6864      	ldr	r4, [r4, #4]
   196fc:	e7f4      	b.n	196e8 <bt_gatt_att_max_mtu_changed+0xc>
}
   196fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19700:	20002204 	.word	0x20002204

00019704 <bt_gatt_encrypt_change>:
{
   19704:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19706:	4a06      	ldr	r2, [pc, #24]	; (19720 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   19708:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1970a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1970c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1970e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   19712:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19716:	f00c fb23 	bl	25d60 <bt_gatt_foreach_attr>
}
   1971a:	b003      	add	sp, #12
   1971c:	f85d fb04 	ldr.w	pc, [sp], #4
   19720:	00019289 	.word	0x00019289

00019724 <bt_gatt_store_ccc>:
{
   19724:	b570      	push	{r4, r5, r6, lr}
   19726:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   19728:	2300      	movs	r3, #0
{
   1972a:	4604      	mov	r4, r0
   1972c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1972e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   19730:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   19734:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   19736:	4a15      	ldr	r2, [pc, #84]	; (1978c <bt_gatt_store_ccc+0x68>)
   19738:	ab0d      	add	r3, sp, #52	; 0x34
   1973a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1973e:	2001      	movs	r0, #1
   19740:	f00c fb0e 	bl	25d60 <bt_gatt_foreach_attr>
	if (id) {
   19744:	b1ec      	cbz	r4, 19782 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   19746:	ae03      	add	r6, sp, #12
   19748:	4622      	mov	r2, r4
   1974a:	2104      	movs	r1, #4
   1974c:	4630      	mov	r0, r6
   1974e:	f009 feb5 	bl	234bc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   19752:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   19754:	4a0e      	ldr	r2, [pc, #56]	; (19790 <bt_gatt_store_ccc+0x6c>)
   19756:	462b      	mov	r3, r5
   19758:	2124      	movs	r1, #36	; 0x24
   1975a:	a804      	add	r0, sp, #16
   1975c:	f7fa f9fc 	bl	13b58 <bt_settings_encode_key>
	if (save.count) {
   19760:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   19762:	b182      	cbz	r2, 19786 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   19764:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   19766:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   19768:	a804      	add	r0, sp, #16
   1976a:	f7f8 ff03 	bl	12574 <settings_save_one>
	if (err) {
   1976e:	4604      	mov	r4, r0
   19770:	b120      	cbz	r0, 1977c <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   19772:	4602      	mov	r2, r0
   19774:	2145      	movs	r1, #69	; 0x45
   19776:	4807      	ldr	r0, [pc, #28]	; (19794 <bt_gatt_store_ccc+0x70>)
   19778:	f00a f944 	bl	23a04 <z_log_minimal_printk>
}
   1977c:	4620      	mov	r0, r4
   1977e:	b040      	add	sp, #256	; 0x100
   19780:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   19782:	9400      	str	r4, [sp, #0]
   19784:	e7e6      	b.n	19754 <bt_gatt_store_ccc+0x30>
		str = NULL;
   19786:	4611      	mov	r1, r2
   19788:	e7ee      	b.n	19768 <bt_gatt_store_ccc+0x44>
   1978a:	bf00      	nop
   1978c:	00018681 	.word	0x00018681
   19790:	00029e13 	.word	0x00029e13
   19794:	00029f39 	.word	0x00029f39

00019798 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   19798:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1979a:	4603      	mov	r3, r0
   1979c:	4a3d      	ldr	r2, [pc, #244]	; (19894 <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1979e:	4e3e      	ldr	r6, [pc, #248]	; (19898 <bt_gatt_disconnected+0x100>)
{
   197a0:	b08d      	sub	sp, #52	; 0x34
   197a2:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   197a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   197a8:	2001      	movs	r0, #1
   197aa:	f00c fad9 	bl	25d60 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   197ae:	4620      	mov	r0, r4
   197b0:	f7fc ffa4 	bl	166fc <bt_conn_index>
   197b4:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   197b6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   197ba:	b120      	cbz	r0, 197c6 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   197bc:	f7fc fe8c 	bl	164d8 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   197c0:	2300      	movs	r3, #0
   197c2:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   197c6:	4835      	ldr	r0, [pc, #212]	; (1989c <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   197c8:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   197cc:	f007 fc16 	bl	20ffc <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   197d0:	7a20      	ldrb	r0, [r4, #8]
   197d2:	4629      	mov	r1, r5
   197d4:	f00b f935 	bl	24a42 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   197d8:	b378      	cbz	r0, 1983a <bt_gatt_disconnected+0xa2>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   197da:	4629      	mov	r1, r5
   197dc:	7a20      	ldrb	r0, [r4, #8]
   197de:	f7ff ffa1 	bl	19724 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   197e2:	4620      	mov	r0, r4
   197e4:	f7fe fcc0 	bl	18168 <find_cf_cfg>
	if (!cfg) {
   197e8:	4606      	mov	r6, r0
   197ea:	2800      	cmp	r0, #0
   197ec:	d045      	beq.n	1987a <bt_gatt_disconnected+0xe2>
		if (conn->id) {
   197ee:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   197f0:	3608      	adds	r6, #8
		if (conn->id) {
   197f2:	b172      	cbz	r2, 19812 <bt_gatt_disconnected+0x7a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   197f4:	af02      	add	r7, sp, #8
   197f6:	2104      	movs	r1, #4
   197f8:	4638      	mov	r0, r7
   197fa:	f009 fe5f 	bl	234bc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   197fe:	462b      	mov	r3, r5
   19800:	4a27      	ldr	r2, [pc, #156]	; (198a0 <bt_gatt_disconnected+0x108>)
   19802:	9700      	str	r7, [sp, #0]
   19804:	2124      	movs	r1, #36	; 0x24
   19806:	a803      	add	r0, sp, #12
   19808:	f7fa f9a6 	bl	13b58 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1980c:	7a23      	ldrb	r3, [r4, #8]
   1980e:	2b00      	cmp	r3, #0
   19810:	d135      	bne.n	1987e <bt_gatt_disconnected+0xe6>
		len = 0;
   19812:	2701      	movs	r7, #1
		bt_settings_encode_key(key, sizeof(key), "cf",
   19814:	2300      	movs	r3, #0
   19816:	9300      	str	r3, [sp, #0]
   19818:	4a21      	ldr	r2, [pc, #132]	; (198a0 <bt_gatt_disconnected+0x108>)
   1981a:	462b      	mov	r3, r5
   1981c:	2124      	movs	r1, #36	; 0x24
   1981e:	a803      	add	r0, sp, #12
   19820:	f7fa f99a 	bl	13b58 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   19824:	463a      	mov	r2, r7
   19826:	4631      	mov	r1, r6
   19828:	a803      	add	r0, sp, #12
   1982a:	f7f8 fea3 	bl	12574 <settings_save_one>
	if (err) {
   1982e:	4602      	mov	r2, r0
   19830:	b118      	cbz	r0, 1983a <bt_gatt_disconnected+0xa2>
		BT_ERR("Failed to store Client Features (err %d)", err);
   19832:	481c      	ldr	r0, [pc, #112]	; (198a4 <bt_gatt_disconnected+0x10c>)
   19834:	2145      	movs	r1, #69	; 0x45
   19836:	f00a f8e5 	bl	23a04 <z_log_minimal_printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1983a:	7a20      	ldrb	r0, [r4, #8]
   1983c:	4629      	mov	r1, r5
   1983e:	f00b f900 	bl	24a42 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   19842:	b150      	cbz	r0, 1985a <bt_gatt_disconnected+0xc2>
		struct addr_with_id addr_with_id = {
   19844:	7a23      	ldrb	r3, [r4, #8]
   19846:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1984a:	4a17      	ldr	r2, [pc, #92]	; (198a8 <bt_gatt_disconnected+0x110>)
		struct addr_with_id addr_with_id = {
   1984c:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1984e:	ab03      	add	r3, sp, #12
   19850:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19854:	2001      	movs	r0, #1
   19856:	f00c fa83 	bl	25d60 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1985a:	4620      	mov	r0, r4
   1985c:	f7fe fc84 	bl	18168 <find_cf_cfg>
	if (!cfg) {
   19860:	4606      	mov	r6, r0
   19862:	b1a8      	cbz	r0, 19890 <bt_gatt_disconnected+0xf8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19864:	7a20      	ldrb	r0, [r4, #8]
   19866:	4629      	mov	r1, r5
   19868:	f00b f8eb 	bl	24a42 <bt_addr_le_is_bonded>
   1986c:	b948      	cbnz	r0, 19882 <bt_gatt_disconnected+0xea>
		clear_cf_cfg(cfg);
   1986e:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19870:	b00d      	add	sp, #52	; 0x34
   19872:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   19876:	f7fe be71 	b.w	1855c <clear_cf_cfg>
		len = 0;
   1987a:	4607      	mov	r7, r0
   1987c:	e7ca      	b.n	19814 <bt_gatt_disconnected+0x7c>
   1987e:	2701      	movs	r7, #1
   19880:	e7d0      	b.n	19824 <bt_gatt_disconnected+0x8c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19882:	4629      	mov	r1, r5
   19884:	1c70      	adds	r0, r6, #1
}
   19886:	b00d      	add	sp, #52	; 0x34
   19888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1988c:	f00c b916 	b.w	25abc <bt_addr_le_copy>
}
   19890:	b00d      	add	sp, #52	; 0x34
   19892:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19894:	00018791 	.word	0x00018791
   19898:	20001a00 	.word	0x20001a00
   1989c:	20001a08 	.word	0x20001a08
   198a0:	00029f8d 	.word	0x00029f8d
   198a4:	00029f5c 	.word	0x00029f5c
   198a8:	00018659 	.word	0x00018659

000198ac <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   198ac:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   198ae:	4b05      	ldr	r3, [pc, #20]	; (198c4 <smp_find+0x18>)
{
   198b0:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   198b2:	4618      	mov	r0, r3
   198b4:	f00c fae0 	bl	25e78 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   198b8:	3b04      	subs	r3, #4
   198ba:	2800      	cmp	r0, #0
}
   198bc:	bf14      	ite	ne
   198be:	4618      	movne	r0, r3
   198c0:	2000      	moveq	r0, #0
   198c2:	bd08      	pop	{r3, pc}
   198c4:	20001b0c 	.word	0x20001b0c

000198c8 <latch_auth_cb>:
{
   198c8:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   198ca:	4a0c      	ldr	r2, [pc, #48]	; (198fc <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   198cc:	6811      	ldr	r1, [r2, #0]
   198ce:	4a0c      	ldr	r2, [pc, #48]	; (19900 <latch_auth_cb+0x38>)
   198d0:	f3bf 8f5b 	dmb	ish
   198d4:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   198d8:	e853 4f00 	ldrex	r4, [r3]
   198dc:	4294      	cmp	r4, r2
   198de:	d104      	bne.n	198ea <latch_auth_cb+0x22>
   198e0:	e843 1c00 	strex	ip, r1, [r3]
   198e4:	f1bc 0f00 	cmp.w	ip, #0
   198e8:	d1f6      	bne.n	198d8 <latch_auth_cb+0x10>
   198ea:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198ee:	f3bf 8f5b 	dmb	ish
   198f2:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   198f6:	f3bf 8f5b 	dmb	ish
}
   198fa:	bd10      	pop	{r4, pc}
   198fc:	200020d0 	.word	0x200020d0
   19900:	20001b08 	.word	0x20001b08

00019904 <get_io_capa>:
{
   19904:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19906:	f7ff ffdf 	bl	198c8 <latch_auth_cb>
	if (!smp_auth_cb) {
   1990a:	4603      	mov	r3, r0
   1990c:	b1c8      	cbz	r0, 19942 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1990e:	e9d0 1200 	ldrd	r1, r2, [r0]
   19912:	b921      	cbnz	r1, 1991e <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   19914:	2a00      	cmp	r2, #0
   19916:	bf0c      	ite	eq
   19918:	2003      	moveq	r0, #3
   1991a:	2002      	movne	r0, #2
   1991c:	e010      	b.n	19940 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1991e:	b132      	cbz	r2, 1992e <get_io_capa+0x2a>
   19920:	6883      	ldr	r3, [r0, #8]
   19922:	b913      	cbnz	r3, 1992a <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   19924:	4b09      	ldr	r3, [pc, #36]	; (1994c <get_io_capa+0x48>)
   19926:	781b      	ldrb	r3, [r3, #0]
   19928:	b933      	cbnz	r3, 19938 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1992a:	2004      	movs	r0, #4
   1992c:	e008      	b.n	19940 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1992e:	4907      	ldr	r1, [pc, #28]	; (1994c <get_io_capa+0x48>)
   19930:	7808      	ldrb	r0, [r1, #0]
   19932:	b128      	cbz	r0, 19940 <get_io_capa+0x3c>
   19934:	689b      	ldr	r3, [r3, #8]
   19936:	b933      	cbnz	r3, 19946 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   19938:	3a00      	subs	r2, #0
   1993a:	bf18      	it	ne
   1993c:	2201      	movne	r2, #1
   1993e:	0050      	lsls	r0, r2, #1
}
   19940:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   19942:	2003      	movs	r0, #3
   19944:	e7fc      	b.n	19940 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   19946:	2001      	movs	r0, #1
   19948:	e7fa      	b.n	19940 <get_io_capa+0x3c>
   1994a:	bf00      	nop
   1994c:	2000265f 	.word	0x2000265f

00019950 <get_auth>:
{
   19950:	b510      	push	{r4, lr}
	if (sc_supported) {
   19952:	4b0c      	ldr	r3, [pc, #48]	; (19984 <get_auth+0x34>)
   19954:	781b      	ldrb	r3, [r3, #0]
   19956:	b17b      	cbz	r3, 19978 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   19958:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1995c:	f7ff ffd2 	bl	19904 <get_io_capa>
	if (bondable) {
   19960:	4b09      	ldr	r3, [pc, #36]	; (19988 <get_auth+0x38>)
   19962:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   19964:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   19966:	bf0c      	ite	eq
   19968:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1996c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   19970:	b12b      	cbz	r3, 1997e <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   19972:	f044 0001 	orr.w	r0, r4, #1
}
   19976:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   19978:	f001 0407 	and.w	r4, r1, #7
   1997c:	e7ee      	b.n	1995c <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1997e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   19982:	e7f8      	b.n	19976 <get_auth+0x26>
   19984:	2000265f 	.word	0x2000265f
   19988:	20000876 	.word	0x20000876

0001998c <smp_chan_get>:
{
   1998c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1998e:	2106      	movs	r1, #6
   19990:	f00b fb92 	bl	250b8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19994:	4604      	mov	r4, r0
   19996:	b928      	cbnz	r0, 199a4 <smp_chan_get+0x18>
		BT_ERR("Unable to find SMP channel");
   19998:	4804      	ldr	r0, [pc, #16]	; (199ac <smp_chan_get+0x20>)
   1999a:	2145      	movs	r1, #69	; 0x45
   1999c:	f00a f832 	bl	23a04 <z_log_minimal_printk>
}
   199a0:	4620      	mov	r0, r4
   199a2:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   199a4:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   199a8:	e7fa      	b.n	199a0 <smp_chan_get+0x14>
   199aa:	bf00      	nop
   199ac:	00029f9e 	.word	0x00029f9e

000199b0 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   199b0:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   199b2:	4c09      	ldr	r4, [pc, #36]	; (199d8 <bt_smp_accept+0x28>)
{
   199b4:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   199b6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   199ba:	b928      	cbnz	r0, 199c8 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   199bc:	4a07      	ldr	r2, [pc, #28]	; (199dc <bt_smp_accept+0x2c>)
   199be:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0

		*chan = &smp->chan.chan;
   199c2:	34ec      	adds	r4, #236	; 0xec
   199c4:	600c      	str	r4, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   199c6:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   199c8:	4805      	ldr	r0, [pc, #20]	; (199e0 <bt_smp_accept+0x30>)
   199ca:	2145      	movs	r1, #69	; 0x45
   199cc:	f00a f81a 	bl	23a04 <z_log_minimal_printk>
   199d0:	f06f 000b 	mvn.w	r0, #11
   199d4:	e7f7      	b.n	199c6 <bt_smp_accept+0x16>
   199d6:	bf00      	nop
   199d8:	20001b08 	.word	0x20001b08
   199dc:	00027a70 	.word	0x00027a70
   199e0:	00029fbe 	.word	0x00029fbe

000199e4 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   199e4:	4288      	cmp	r0, r1
{
   199e6:	b510      	push	{r4, lr}
   199e8:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   199ec:	d90d      	bls.n	19a0a <sys_memcpy_swap+0x26>
   199ee:	188c      	adds	r4, r1, r2
   199f0:	42a0      	cmp	r0, r4
   199f2:	d20d      	bcs.n	19a10 <sys_memcpy_swap+0x2c>
   199f4:	490b      	ldr	r1, [pc, #44]	; (19a24 <sys_memcpy_swap+0x40>)
   199f6:	480c      	ldr	r0, [pc, #48]	; (19a28 <sys_memcpy_swap+0x44>)
   199f8:	f240 2215 	movw	r2, #533	; 0x215
   199fc:	f009 fff4 	bl	239e8 <assert_print>
   19a00:	4808      	ldr	r0, [pc, #32]	; (19a24 <sys_memcpy_swap+0x40>)
   19a02:	f240 2115 	movw	r1, #533	; 0x215
   19a06:	f009 ffe8 	bl	239da <assert_post_action>
   19a0a:	d0f3      	beq.n	199f4 <sys_memcpy_swap+0x10>
   19a0c:	4299      	cmp	r1, r3
   19a0e:	e7f0      	b.n	199f2 <sys_memcpy_swap+0xe>
	psrc += length - 1;
   19a10:	3a01      	subs	r2, #1
   19a12:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   19a14:	f811 2901 	ldrb.w	r2, [r1], #-1
   19a18:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   19a1c:	4283      	cmp	r3, r0
   19a1e:	d1f9      	bne.n	19a14 <sys_memcpy_swap+0x30>
}
   19a20:	bd10      	pop	{r4, pc}
   19a22:	bf00      	nop
   19a24:	00029fe8 	.word	0x00029fe8
   19a28:	000280bd 	.word	0x000280bd

00019a2c <smp_init>:
{
   19a2c:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   19a2e:	22ec      	movs	r2, #236	; 0xec
{
   19a30:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   19a32:	2100      	movs	r1, #0
   19a34:	f00a fe66 	bl	24704 <memset>
	if (bt_rand(smp->prnd, 16)) {
   19a38:	2110      	movs	r1, #16
   19a3a:	f105 0027 	add.w	r0, r5, #39	; 0x27
   19a3e:	f004 fded 	bl	1e61c <bt_rand>
   19a42:	4604      	mov	r4, r0
   19a44:	b948      	cbnz	r0, 19a5a <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   19a46:	2105      	movs	r1, #5
   19a48:	4628      	mov	r0, r5
   19a4a:	f00c fb0a 	bl	26062 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   19a4e:	f7fc f9dd 	bl	15e0c <bt_pub_key_get>
   19a52:	4b03      	ldr	r3, [pc, #12]	; (19a60 <smp_init+0x34>)
   19a54:	6018      	str	r0, [r3, #0]
}
   19a56:	4620      	mov	r0, r4
   19a58:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   19a5a:	2408      	movs	r4, #8
   19a5c:	e7fb      	b.n	19a56 <smp_init+0x2a>
   19a5e:	bf00      	nop
   19a60:	2000220c 	.word	0x2000220c

00019a64 <smp_dhkey_generate>:
{
   19a64:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   19a66:	1d05      	adds	r5, r0, #4
{
   19a68:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   19a6a:	2108      	movs	r1, #8
   19a6c:	4628      	mov	r0, r5
   19a6e:	f00c faf8 	bl	26062 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   19a72:	4908      	ldr	r1, [pc, #32]	; (19a94 <smp_dhkey_generate+0x30>)
   19a74:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19a78:	f7fc f9d8 	bl	15e2c <bt_dh_key_gen>
	if (err) {
   19a7c:	b140      	cbz	r0, 19a90 <smp_dhkey_generate+0x2c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   19a7e:	2108      	movs	r1, #8
   19a80:	4628      	mov	r0, r5
   19a82:	f00c fa23 	bl	25ecc <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   19a86:	4804      	ldr	r0, [pc, #16]	; (19a98 <smp_dhkey_generate+0x34>)
   19a88:	2145      	movs	r1, #69	; 0x45
   19a8a:	f009 ffbb 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   19a8e:	2008      	movs	r0, #8
}
   19a90:	bd38      	pop	{r3, r4, r5, pc}
   19a92:	bf00      	nop
   19a94:	00026443 	.word	0x00026443
   19a98:	0002a01a 	.word	0x0002a01a

00019a9c <smp_ident_info>:
{
   19a9c:	b570      	push	{r4, r5, r6, lr}
   19a9e:	460b      	mov	r3, r1
   19aa0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19aa2:	210d      	movs	r1, #13
   19aa4:	3004      	adds	r0, #4
   19aa6:	f00c f9e7 	bl	25e78 <atomic_test_bit>
   19aaa:	b1c8      	cbz	r0, 19ae0 <smp_ident_info+0x44>
		struct bt_smp_ident_info *req = (void *)buf->data;
   19aac:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   19aae:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19ab2:	f103 0590 	add.w	r5, r3, #144	; 0x90
   19ab6:	7a19      	ldrb	r1, [r3, #8]
   19ab8:	462a      	mov	r2, r5
   19aba:	2002      	movs	r0, #2
   19abc:	f001 fbf6 	bl	1b2ac <bt_keys_get_type>
		if (!keys) {
   19ac0:	b948      	cbnz	r0, 19ad6 <smp_ident_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   19ac2:	4628      	mov	r0, r5
   19ac4:	f7f9 ff9c 	bl	13a00 <bt_addr_le_str>
   19ac8:	2145      	movs	r1, #69	; 0x45
   19aca:	4602      	mov	r2, r0
   19acc:	4807      	ldr	r0, [pc, #28]	; (19aec <smp_ident_info+0x50>)
   19ace:	f009 ff99 	bl	23a04 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   19ad2:	2008      	movs	r0, #8
}
   19ad4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   19ad6:	2210      	movs	r2, #16
   19ad8:	4631      	mov	r1, r6
   19ada:	302a      	adds	r0, #42	; 0x2a
   19adc:	f00a fe07 	bl	246ee <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   19ae0:	4620      	mov	r0, r4
   19ae2:	2109      	movs	r1, #9
   19ae4:	f00c fabd 	bl	26062 <atomic_set_bit>
	return 0;
   19ae8:	2000      	movs	r0, #0
   19aea:	e7f3      	b.n	19ad4 <smp_ident_info+0x38>
   19aec:	0002a038 	.word	0x0002a038

00019af0 <smp_encrypt_info>:
{
   19af0:	b570      	push	{r4, r5, r6, lr}
   19af2:	460b      	mov	r3, r1
   19af4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19af6:	210d      	movs	r1, #13
   19af8:	3004      	adds	r0, #4
   19afa:	f00c f9bd 	bl	25e78 <atomic_test_bit>
   19afe:	b1c8      	cbz	r0, 19b34 <smp_encrypt_info+0x44>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   19b00:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   19b02:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19b06:	f103 0590 	add.w	r5, r3, #144	; 0x90
   19b0a:	7a19      	ldrb	r1, [r3, #8]
   19b0c:	462a      	mov	r2, r5
   19b0e:	2004      	movs	r0, #4
   19b10:	f001 fbcc 	bl	1b2ac <bt_keys_get_type>
		if (!keys) {
   19b14:	b948      	cbnz	r0, 19b2a <smp_encrypt_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   19b16:	4628      	mov	r0, r5
   19b18:	f7f9 ff72 	bl	13a00 <bt_addr_le_str>
   19b1c:	2145      	movs	r1, #69	; 0x45
   19b1e:	4602      	mov	r2, r0
   19b20:	4807      	ldr	r0, [pc, #28]	; (19b40 <smp_encrypt_info+0x50>)
   19b22:	f009 ff6f 	bl	23a04 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   19b26:	2008      	movs	r0, #8
}
   19b28:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   19b2a:	2210      	movs	r2, #16
   19b2c:	4631      	mov	r1, r6
   19b2e:	301a      	adds	r0, #26
   19b30:	f00a fddd 	bl	246ee <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   19b34:	4620      	mov	r0, r4
   19b36:	2107      	movs	r1, #7
   19b38:	f00c fa93 	bl	26062 <atomic_set_bit>
	return 0;
   19b3c:	2000      	movs	r0, #0
   19b3e:	e7f3      	b.n	19b28 <smp_encrypt_info+0x38>
   19b40:	0002a038 	.word	0x0002a038

00019b44 <smp_send_pairing_confirm>:
{
   19b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   19b46:	7a04      	ldrb	r4, [r0, #8]
   19b48:	2c02      	cmp	r4, #2
{
   19b4a:	4605      	mov	r5, r0
	switch (smp->method) {
   19b4c:	d823      	bhi.n	19b96 <smp_send_pairing_confirm+0x52>
   19b4e:	b144      	cbz	r4, 19b62 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19b50:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   19b54:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   19b58:	40dc      	lsrs	r4, r3
   19b5a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   19b5e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   19b62:	2103      	movs	r1, #3
   19b64:	4628      	mov	r0, r5
   19b66:	f00c fa90 	bl	2608a <smp_create_pdu.constprop.0>
	if (!buf) {
   19b6a:	4606      	mov	r6, r0
   19b6c:	b1d0      	cbz	r0, 19ba4 <smp_send_pairing_confirm+0x60>
   19b6e:	2110      	movs	r1, #16
   19b70:	3008      	adds	r0, #8
   19b72:	f001 ffeb 	bl	1bb4c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   19b76:	9000      	str	r0, [sp, #0]
   19b78:	4812      	ldr	r0, [pc, #72]	; (19bc4 <smp_send_pairing_confirm+0x80>)
   19b7a:	4623      	mov	r3, r4
   19b7c:	6800      	ldr	r0, [r0, #0]
   19b7e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   19b82:	f105 0157 	add.w	r1, r5, #87	; 0x57
   19b86:	f00c fa47 	bl	26018 <smp_f4>
   19b8a:	4604      	mov	r4, r0
   19b8c:	b178      	cbz	r0, 19bae <smp_send_pairing_confirm+0x6a>
		net_buf_unref(buf);
   19b8e:	4630      	mov	r0, r6
   19b90:	f001 fed6 	bl	1b940 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   19b94:	e006      	b.n	19ba4 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   19b96:	2c03      	cmp	r4, #3
   19b98:	d007      	beq.n	19baa <smp_send_pairing_confirm+0x66>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   19b9a:	480b      	ldr	r0, [pc, #44]	; (19bc8 <smp_send_pairing_confirm+0x84>)
   19b9c:	4622      	mov	r2, r4
   19b9e:	2145      	movs	r1, #69	; 0x45
   19ba0:	f009 ff30 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   19ba4:	2008      	movs	r0, #8
}
   19ba6:	b002      	add	sp, #8
   19ba8:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   19baa:	2400      	movs	r4, #0
   19bac:	e7d9      	b.n	19b62 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   19bae:	4602      	mov	r2, r0
   19bb0:	4631      	mov	r1, r6
   19bb2:	4628      	mov	r0, r5
   19bb4:	f00c f9b9 	bl	25f2a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   19bb8:	1d28      	adds	r0, r5, #4
   19bba:	4621      	mov	r1, r4
   19bbc:	f00c f986 	bl	25ecc <atomic_clear_bit>
	return 0;
   19bc0:	4620      	mov	r0, r4
   19bc2:	e7f0      	b.n	19ba6 <smp_send_pairing_confirm+0x62>
   19bc4:	2000220c 	.word	0x2000220c
   19bc8:	0002a057 	.word	0x0002a057

00019bcc <smp_public_key_periph>:
{
   19bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19bd0:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19bd2:	f7ff fe79 	bl	198c8 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   19bd6:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19bd8:	4607      	mov	r7, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   19bda:	210e      	movs	r1, #14
   19bdc:	4630      	mov	r0, r6
   19bde:	f00c f94b 	bl	25e78 <atomic_test_bit>
   19be2:	b968      	cbnz	r0, 19c00 <smp_public_key_periph+0x34>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   19be4:	4b48      	ldr	r3, [pc, #288]	; (19d08 <smp_public_key_periph+0x13c>)
   19be6:	2220      	movs	r2, #32
   19be8:	6819      	ldr	r1, [r3, #0]
   19bea:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19bee:	f00a fd6e 	bl	246ce <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   19bf2:	b928      	cbnz	r0, 19c00 <smp_public_key_periph+0x34>
		BT_WARN("Remote public key rejected");
   19bf4:	4845      	ldr	r0, [pc, #276]	; (19d0c <smp_public_key_periph+0x140>)
   19bf6:	2157      	movs	r1, #87	; 0x57
   19bf8:	f009 ff04 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   19bfc:	2008      	movs	r0, #8
   19bfe:	e02f      	b.n	19c60 <smp_public_key_periph+0x94>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   19c00:	210c      	movs	r1, #12
   19c02:	4620      	mov	r0, r4
   19c04:	f00c fa41 	bl	2608a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   19c08:	4605      	mov	r5, r0
   19c0a:	2800      	cmp	r0, #0
   19c0c:	d0f6      	beq.n	19bfc <smp_public_key_periph+0x30>
   19c0e:	2140      	movs	r1, #64	; 0x40
   19c10:	3008      	adds	r0, #8
   19c12:	f001 ff9b 	bl	1bb4c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   19c16:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 19d08 <smp_public_key_periph+0x13c>
   19c1a:	2220      	movs	r2, #32
   19c1c:	f8d9 1000 	ldr.w	r1, [r9]
   19c20:	4680      	mov	r8, r0
   19c22:	f00a fd64 	bl	246ee <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   19c26:	f8d9 1000 	ldr.w	r1, [r9]
   19c2a:	2220      	movs	r2, #32
   19c2c:	4411      	add	r1, r2
   19c2e:	eb08 0002 	add.w	r0, r8, r2
   19c32:	f00a fd5c 	bl	246ee <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   19c36:	2200      	movs	r2, #0
   19c38:	4629      	mov	r1, r5
   19c3a:	4620      	mov	r0, r4
   19c3c:	f00c f975 	bl	25f2a <smp_send.constprop.0>
	switch (smp->method) {
   19c40:	7a22      	ldrb	r2, [r4, #8]
   19c42:	2a05      	cmp	r2, #5
   19c44:	d859      	bhi.n	19cfa <smp_public_key_periph+0x12e>
   19c46:	e8df f002 	tbb	[pc, r2]
   19c4a:	3903      	.short	0x3903
   19c4c:	5558030d 	.word	0x5558030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19c50:	2104      	movs	r1, #4
   19c52:	4620      	mov	r0, r4
   19c54:	f00c fa05 	bl	26062 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   19c58:	f7ff ff74 	bl	19b44 <smp_send_pairing_confirm>
		if (err) {
   19c5c:	2800      	cmp	r0, #0
   19c5e:	d03c      	beq.n	19cda <smp_public_key_periph+0x10e>
}
   19c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19c64:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   19c66:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19c6a:	f7ff fe2d 	bl	198c8 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   19c6e:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19c70:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   19c72:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   19c76:	f004 fcd1 	bl	1e61c <bt_rand>
   19c7a:	2800      	cmp	r0, #0
   19c7c:	d1be      	bne.n	19bfc <smp_public_key_periph+0x30>
		smp->passkey %= 1000000;
   19c7e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   19c82:	4a23      	ldr	r2, [pc, #140]	; (19d10 <smp_public_key_periph+0x144>)
   19c84:	fbb3 f1f2 	udiv	r1, r3, r2
   19c88:	fb02 3311 	mls	r3, r2, r1, r3
   19c8c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   19c90:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   19c94:	b155      	cbz	r5, 19cac <smp_public_key_periph+0xe0>
   19c96:	682b      	ldr	r3, [r5, #0]
   19c98:	b143      	cbz	r3, 19cac <smp_public_key_periph+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   19c9a:	210b      	movs	r1, #11
   19c9c:	4630      	mov	r0, r6
   19c9e:	f00c f9e0 	bl	26062 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   19ca2:	682b      	ldr	r3, [r5, #0]
   19ca4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   19ca8:	4638      	mov	r0, r7
   19caa:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   19cac:	2103      	movs	r1, #3
   19cae:	4620      	mov	r0, r4
   19cb0:	f00c f9d7 	bl	26062 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   19cb4:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19cb6:	f00c f9d4 	bl	26062 <atomic_set_bit>
		break;
   19cba:	e00e      	b.n	19cda <smp_public_key_periph+0x10e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   19cbc:	4620      	mov	r0, r4
   19cbe:	2103      	movs	r1, #3
   19cc0:	f00c f9cf 	bl	26062 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   19cc4:	210e      	movs	r1, #14
   19cc6:	f00c f9cc 	bl	26062 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19cca:	4630      	mov	r0, r6
   19ccc:	210a      	movs	r1, #10
   19cce:	f00c f9c8 	bl	26062 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   19cd2:	687b      	ldr	r3, [r7, #4]
   19cd4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   19cd8:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   19cda:	4630      	mov	r0, r6
   19cdc:	2107      	movs	r1, #7
   19cde:	f00c f9c0 	bl	26062 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   19ce2:	2008      	movs	r0, #8
   19ce4:	f7ff fde2 	bl	198ac <smp_find>
   19ce8:	b960      	cbnz	r0, 19d04 <smp_public_key_periph+0x138>
		return smp_dhkey_generate(smp);
   19cea:	4620      	mov	r0, r4
}
   19cec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return smp_dhkey_generate(smp);
   19cf0:	f7ff beb8 	b.w	19a64 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19cf4:	2104      	movs	r1, #4
   19cf6:	4620      	mov	r0, r4
   19cf8:	e7dd      	b.n	19cb6 <smp_public_key_periph+0xea>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   19cfa:	4806      	ldr	r0, [pc, #24]	; (19d14 <smp_public_key_periph+0x148>)
   19cfc:	2145      	movs	r1, #69	; 0x45
   19cfe:	f009 fe81 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   19d02:	e77b      	b.n	19bfc <smp_public_key_periph+0x30>
	return 0;
   19d04:	2000      	movs	r0, #0
   19d06:	e7ab      	b.n	19c60 <smp_public_key_periph+0x94>
   19d08:	2000220c 	.word	0x2000220c
   19d0c:	0002a078 	.word	0x0002a078
   19d10:	000f4240 	.word	0x000f4240
   19d14:	0002a057 	.word	0x0002a057

00019d18 <smp_public_key>:
{
   19d18:	b570      	push	{r4, r5, r6, lr}
   19d1a:	460d      	mov	r5, r1
   19d1c:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19d1e:	f7ff fdd3 	bl	198c8 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   19d22:	68ae      	ldr	r6, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   19d24:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19d28:	2220      	movs	r2, #32
   19d2a:	4631      	mov	r1, r6
   19d2c:	4628      	mov	r0, r5
   19d2e:	f00a fcde 	bl	246ee <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   19d32:	2220      	movs	r2, #32
   19d34:	18b1      	adds	r1, r6, r2
   19d36:	f104 0077 	add.w	r0, r4, #119	; 0x77
   19d3a:	f00a fcd8 	bl	246ee <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   19d3e:	4628      	mov	r0, r5
   19d40:	f7fb ffdc 	bl	15cfc <bt_pub_key_is_debug>
   19d44:	b940      	cbnz	r0, 19d58 <smp_public_key+0x40>
	if (!sc_public_key) {
   19d46:	4b18      	ldr	r3, [pc, #96]	; (19da8 <smp_public_key+0x90>)
   19d48:	681d      	ldr	r5, [r3, #0]
   19d4a:	bb3d      	cbnz	r5, 19d9c <smp_public_key+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   19d4c:	1d20      	adds	r0, r4, #4
   19d4e:	2106      	movs	r1, #6
   19d50:	f00c f987 	bl	26062 <atomic_set_bit>
	return 0;
   19d54:	4628      	mov	r0, r5
		return 0;
   19d56:	e020      	b.n	19d9a <smp_public_key+0x82>
		BT_INFO("Remote is using Debug Public key");
   19d58:	4814      	ldr	r0, [pc, #80]	; (19dac <smp_public_key+0x94>)
   19d5a:	2149      	movs	r1, #73	; 0x49
   19d5c:	f009 fe52 	bl	23a04 <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   19d60:	210e      	movs	r1, #14
   19d62:	1d20      	adds	r0, r4, #4
   19d64:	f00c f97d 	bl	26062 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   19d68:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   19d6c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   19d70:	b933      	cbnz	r3, 19d80 <smp_public_key+0x68>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19d72:	7a28      	ldrb	r0, [r5, #8]
   19d74:	f105 0190 	add.w	r1, r5, #144	; 0x90
   19d78:	f001 f9aa 	bl	1b0d0 <bt_keys_get_addr>
   19d7c:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   19d80:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   19d84:	2b00      	cmp	r3, #0
   19d86:	d0de      	beq.n	19d46 <smp_public_key+0x2e>
   19d88:	89da      	ldrh	r2, [r3, #14]
   19d8a:	f002 0224 	and.w	r2, r2, #36	; 0x24
   19d8e:	2a00      	cmp	r2, #0
   19d90:	d0d9      	beq.n	19d46 <smp_public_key+0x2e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   19d92:	7b5b      	ldrb	r3, [r3, #13]
   19d94:	079b      	lsls	r3, r3, #30
   19d96:	d4d6      	bmi.n	19d46 <smp_public_key+0x2e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19d98:	2003      	movs	r0, #3
}
   19d9a:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   19d9c:	4620      	mov	r0, r4
}
   19d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   19da2:	f7ff bf13 	b.w	19bcc <smp_public_key_periph>
   19da6:	bf00      	nop
   19da8:	2000220c 	.word	0x2000220c
   19dac:	0002a098 	.word	0x0002a098

00019db0 <smp_pairing_req>:
{
   19db0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19db4:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   19db6:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   19dba:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19dbc:	f7ff fd84 	bl	198c8 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   19dc0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   19dc4:	f898 3003 	ldrb.w	r3, [r8, #3]
   19dc8:	3b07      	subs	r3, #7
   19dca:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19dcc:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   19dce:	d903      	bls.n	19dd8 <smp_pairing_req+0x28>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   19dd0:	2006      	movs	r0, #6
}
   19dd2:	b002      	add	sp, #8
   19dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   19dd8:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   19ddc:	b15b      	cbz	r3, 19df6 <smp_pairing_req+0x46>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19dde:	1d25      	adds	r5, r4, #4
   19de0:	210f      	movs	r1, #15
   19de2:	4628      	mov	r0, r5
   19de4:	f00c f848 	bl	25e78 <atomic_test_bit>
   19de8:	b980      	cbnz	r0, 19e0c <smp_pairing_req+0x5c>
		int ret = smp_init(smp);
   19dea:	4620      	mov	r0, r4
   19dec:	f7ff fe1e 	bl	19a2c <smp_init>
		if (ret) {
   19df0:	b160      	cbz	r0, 19e0c <smp_pairing_req+0x5c>
			return ret;
   19df2:	b2c0      	uxtb	r0, r0
   19df4:	e7ed      	b.n	19dd2 <smp_pairing_req+0x22>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19df6:	7a30      	ldrb	r0, [r6, #8]
   19df8:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19dfc:	f001 f968 	bl	1b0d0 <bt_keys_get_addr>
   19e00:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   19e04:	2800      	cmp	r0, #0
   19e06:	d1ea      	bne.n	19dde <smp_pairing_req+0x2e>
			return BT_SMP_ERR_UNSPECIFIED;
   19e08:	2008      	movs	r0, #8
   19e0a:	e7e2      	b.n	19dd2 <smp_pairing_req+0x22>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   19e0c:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   19e0e:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   19e10:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   19e12:	4641      	mov	r1, r8
   19e14:	f104 000a 	add.w	r0, r4, #10
   19e18:	f00a fc69 	bl	246ee <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   19e1c:	2302      	movs	r3, #2
   19e1e:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   19e20:	f898 1002 	ldrb.w	r1, [r8, #2]
   19e24:	4620      	mov	r0, r4
   19e26:	f7ff fd93 	bl	19950 <get_auth>
   19e2a:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   19e2c:	4620      	mov	r0, r4
   19e2e:	f7ff fd69 	bl	19904 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   19e32:	4ba3      	ldr	r3, [pc, #652]	; (1a0c0 <smp_pairing_req+0x310>)
	rsp->io_capability = get_io_capa(smp);
   19e34:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   19e36:	781b      	ldrb	r3, [r3, #0]
   19e38:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   19e3a:	2310      	movs	r3, #16
   19e3c:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   19e3e:	f898 3004 	ldrb.w	r3, [r8, #4]
   19e42:	f003 0303 	and.w	r3, r3, #3
   19e46:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   19e48:	f898 3005 	ldrb.w	r3, [r8, #5]
   19e4c:	f003 0301 	and.w	r3, r3, #1
   19e50:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   19e52:	7ce3      	ldrb	r3, [r4, #19]
   19e54:	071b      	lsls	r3, r3, #28
   19e56:	d50d      	bpl.n	19e74 <smp_pairing_req+0xc4>
   19e58:	f898 3002 	ldrb.w	r3, [r8, #2]
   19e5c:	0718      	lsls	r0, r3, #28
   19e5e:	d509      	bpl.n	19e74 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   19e60:	2105      	movs	r1, #5
   19e62:	4628      	mov	r0, r5
   19e64:	f00c f8fd 	bl	26062 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   19e68:	7d63      	ldrb	r3, [r4, #21]
   19e6a:	f003 0302 	and.w	r3, r3, #2
   19e6e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   19e70:	2300      	movs	r3, #0
   19e72:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   19e74:	7ce3      	ldrb	r3, [r4, #19]
   19e76:	0699      	lsls	r1, r3, #26
   19e78:	d507      	bpl.n	19e8a <smp_pairing_req+0xda>
   19e7a:	f898 3002 	ldrb.w	r3, [r8, #2]
   19e7e:	069a      	lsls	r2, r3, #26
   19e80:	d503      	bpl.n	19e8a <smp_pairing_req+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   19e82:	2114      	movs	r1, #20
   19e84:	4628      	mov	r0, r5
   19e86:	f00c f8ec 	bl	26062 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   19e8a:	7da3      	ldrb	r3, [r4, #22]
   19e8c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   19e90:	7d63      	ldrb	r3, [r4, #21]
   19e92:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   19e96:	7ce3      	ldrb	r3, [r4, #19]
   19e98:	07db      	lsls	r3, r3, #31
   19e9a:	d507      	bpl.n	19eac <smp_pairing_req+0xfc>
   19e9c:	f898 3002 	ldrb.w	r3, [r8, #2]
   19ea0:	07d8      	lsls	r0, r3, #31
   19ea2:	d503      	bpl.n	19eac <smp_pairing_req+0xfc>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   19ea4:	210d      	movs	r1, #13
   19ea6:	4628      	mov	r0, r5
   19ea8:	f00c f8db 	bl	26062 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   19eac:	2103      	movs	r1, #3
   19eae:	4628      	mov	r0, r5
   19eb0:	f00c f8d7 	bl	26062 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19eb4:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   19eb6:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19eba:	f00b ffdd 	bl	25e78 <atomic_test_bit>
   19ebe:	bb40      	cbnz	r0, 19f12 <smp_pairing_req+0x162>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19ec0:	f1b8 0f04 	cmp.w	r8, #4
   19ec4:	d845      	bhi.n	19f52 <smp_pairing_req+0x1a2>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   19ec6:	7ae3      	ldrb	r3, [r4, #11]
   19ec8:	7ca2      	ldrb	r2, [r4, #18]
   19eca:	4013      	ands	r3, r2
   19ecc:	07d9      	lsls	r1, r3, #31
   19ece:	d43e      	bmi.n	19f4e <smp_pairing_req+0x19e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19ed0:	7b21      	ldrb	r1, [r4, #12]
   19ed2:	7ce3      	ldrb	r3, [r4, #19]
   19ed4:	4319      	orrs	r1, r3
   19ed6:	f011 0104 	ands.w	r1, r1, #4
   19eda:	d011      	beq.n	19f00 <smp_pairing_req+0x150>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   19edc:	4620      	mov	r0, r4
   19ede:	f7ff fd11 	bl	19904 <get_io_capa>
   19ee2:	4b78      	ldr	r3, [pc, #480]	; (1a0c4 <smp_pairing_req+0x314>)
   19ee4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   19ee8:	4498      	add	r8, r3
   19eea:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   19eee:	2904      	cmp	r1, #4
   19ef0:	d106      	bne.n	19f00 <smp_pairing_req+0x150>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   19ef2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   19ef6:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   19ef8:	2b00      	cmp	r3, #0
   19efa:	bf14      	ite	ne
   19efc:	2101      	movne	r1, #1
   19efe:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   19f00:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   19f02:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   19f06:	4620      	mov	r0, r4
   19f08:	f00b ffbf 	bl	25e8a <update_keys_check>
   19f0c:	bb18      	cbnz	r0, 19f56 <smp_pairing_req+0x1a6>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19f0e:	2003      	movs	r0, #3
   19f10:	e75f      	b.n	19dd2 <smp_pairing_req+0x22>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   19f12:	7b23      	ldrb	r3, [r4, #12]
   19f14:	7ce0      	ldrb	r0, [r4, #19]
   19f16:	ea03 0200 	and.w	r2, r3, r0
   19f1a:	0712      	lsls	r2, r2, #28
   19f1c:	d506      	bpl.n	19f2c <smp_pairing_req+0x17c>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   19f1e:	7ae2      	ldrb	r2, [r4, #11]
   19f20:	f894 c012 	ldrb.w	ip, [r4, #18]
   19f24:	ea42 020c 	orr.w	r2, r2, ip
   19f28:	07d2      	lsls	r2, r2, #31
   19f2a:	d4e9      	bmi.n	19f00 <smp_pairing_req+0x150>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19f2c:	f1b8 0f04 	cmp.w	r8, #4
   19f30:	d80f      	bhi.n	19f52 <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19f32:	ea43 0100 	orr.w	r1, r3, r0
   19f36:	f011 0104 	ands.w	r1, r1, #4
   19f3a:	d0e1      	beq.n	19f00 <smp_pairing_req+0x150>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   19f3c:	4620      	mov	r0, r4
   19f3e:	f7ff fce1 	bl	19904 <get_io_capa>
   19f42:	4b61      	ldr	r3, [pc, #388]	; (1a0c8 <smp_pairing_req+0x318>)
   19f44:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   19f48:	4443      	add	r3, r8
   19f4a:	5c19      	ldrb	r1, [r3, r0]
   19f4c:	e7d8      	b.n	19f00 <smp_pairing_req+0x150>
		return LEGACY_OOB;
   19f4e:	2106      	movs	r1, #6
   19f50:	e7d6      	b.n	19f00 <smp_pairing_req+0x150>
		return JUST_WORKS;
   19f52:	2100      	movs	r1, #0
   19f54:	e7d4      	b.n	19f00 <smp_pairing_req+0x150>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   19f56:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   19f5a:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   19f5c:	2b03      	cmp	r3, #3
   19f5e:	d037      	beq.n	19fd0 <smp_pairing_req+0x220>
   19f60:	d825      	bhi.n	19fae <smp_pairing_req+0x1fe>
   19f62:	3b01      	subs	r3, #1
   19f64:	2b01      	cmp	r3, #1
   19f66:	f63f af4f 	bhi.w	19e08 <smp_pairing_req+0x58>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19f6a:	2105      	movs	r1, #5
   19f6c:	4628      	mov	r0, r5
   19f6e:	f00b ff83 	bl	25e78 <atomic_test_bit>
   19f72:	2800      	cmp	r0, #0
   19f74:	f040 80b0 	bne.w	1a0d8 <smp_pairing_req+0x328>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19f78:	4620      	mov	r0, r4
   19f7a:	f7ff fca5 	bl	198c8 <latch_auth_cb>
   19f7e:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19f80:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   19f82:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19f86:	f7ff fc9f 	bl	198c8 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   19f8a:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19f8e:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   19f90:	f898 0008 	ldrb.w	r0, [r8, #8]
   19f94:	f001 f954 	bl	1b240 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   19f98:	7a22      	ldrb	r2, [r4, #8]
   19f9a:	b1e8      	cbz	r0, 19fd8 <smp_pairing_req+0x228>
   19f9c:	7b43      	ldrb	r3, [r0, #13]
   19f9e:	07db      	lsls	r3, r3, #31
   19fa0:	d51a      	bpl.n	19fd8 <smp_pairing_req+0x228>
   19fa2:	b9ca      	cbnz	r2, 19fd8 <smp_pairing_req+0x228>
		BT_ERR("JustWorks failed, authenticated keys present");
   19fa4:	4849      	ldr	r0, [pc, #292]	; (1a0cc <smp_pairing_req+0x31c>)
   19fa6:	2145      	movs	r1, #69	; 0x45
   19fa8:	f009 fd2c 	bl	23a04 <z_log_minimal_printk>
	if (ret) {
   19fac:	e72c      	b.n	19e08 <smp_pairing_req+0x58>
	switch (sec) {
   19fae:	2b04      	cmp	r3, #4
   19fb0:	f47f af2a 	bne.w	19e08 <smp_pairing_req+0x58>
	return MIN(req->max_key_size, rsp->max_key_size);
   19fb4:	7d23      	ldrb	r3, [r4, #20]
   19fb6:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   19fb8:	4293      	cmp	r3, r2
   19fba:	bf28      	it	cs
   19fbc:	4613      	movcs	r3, r2
   19fbe:	2b10      	cmp	r3, #16
   19fc0:	f47f af06 	bne.w	19dd0 <smp_pairing_req+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19fc4:	2105      	movs	r1, #5
   19fc6:	4628      	mov	r0, r5
   19fc8:	f00b ff56 	bl	25e78 <atomic_test_bit>
   19fcc:	2800      	cmp	r0, #0
   19fce:	d09e      	beq.n	19f0e <smp_pairing_req+0x15e>
		if (smp->method == JUST_WORKS) {
   19fd0:	7a23      	ldrb	r3, [r4, #8]
   19fd2:	2b00      	cmp	r3, #0
   19fd4:	d1c9      	bne.n	19f6a <smp_pairing_req+0x1ba>
   19fd6:	e79a      	b.n	19f0e <smp_pairing_req+0x15e>
	switch (smp->method) {
   19fd8:	2a06      	cmp	r2, #6
   19fda:	d85e      	bhi.n	1a09a <smp_pairing_req+0x2ea>
   19fdc:	e8df f002 	tbb	[pc, r2]
   19fe0:	5d2d5518 	.word	0x5d2d5518
   19fe4:	5d5d      	.short	0x5d5d
   19fe6:	04          	.byte	0x04
   19fe7:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   19fe8:	2e00      	cmp	r6, #0
   19fea:	d05b      	beq.n	1a0a4 <smp_pairing_req+0x2f4>
   19fec:	68f3      	ldr	r3, [r6, #12]
   19fee:	2b00      	cmp	r3, #0
   19ff0:	d058      	beq.n	1a0a4 <smp_pairing_req+0x2f4>
			struct bt_conn_oob_info info = {
   19ff2:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19ff4:	210a      	movs	r1, #10
   19ff6:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   19ff8:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19ffc:	f00c f831 	bl	26062 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1a000:	68f3      	ldr	r3, [r6, #12]
   1a002:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a006:	a901      	add	r1, sp, #4
   1a008:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a00a:	7a23      	ldrb	r3, [r4, #8]
   1a00c:	2b00      	cmp	r3, #0
   1a00e:	d14b      	bne.n	1a0a8 <smp_pairing_req+0x2f8>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a010:	210f      	movs	r1, #15
   1a012:	4628      	mov	r0, r5
   1a014:	f00b ff30 	bl	25e78 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a018:	2800      	cmp	r0, #0
   1a01a:	d145      	bne.n	1a0a8 <smp_pairing_req+0x2f8>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a01c:	2f00      	cmp	r7, #0
   1a01e:	d043      	beq.n	1a0a8 <smp_pairing_req+0x2f8>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1a020:	697b      	ldr	r3, [r7, #20]
   1a022:	2b00      	cmp	r3, #0
   1a024:	d040      	beq.n	1a0a8 <smp_pairing_req+0x2f8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a026:	4628      	mov	r0, r5
   1a028:	210a      	movs	r1, #10
   1a02a:	f00c f81a 	bl	26062 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1a02e:	697b      	ldr	r3, [r7, #20]
   1a030:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1a034:	4798      	blx	r3
		return 0;
   1a036:	2000      	movs	r0, #0
   1a038:	e6cb      	b.n	19dd2 <smp_pairing_req+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1a03a:	2104      	movs	r1, #4
   1a03c:	eb0d 0001 	add.w	r0, sp, r1
   1a040:	f004 faec 	bl	1e61c <bt_rand>
   1a044:	2800      	cmp	r0, #0
   1a046:	f47f aedf 	bne.w	19e08 <smp_pairing_req+0x58>
			passkey %= 1000000;
   1a04a:	9b01      	ldr	r3, [sp, #4]
   1a04c:	4a20      	ldr	r2, [pc, #128]	; (1a0d0 <smp_pairing_req+0x320>)
   1a04e:	fbb3 f1f2 	udiv	r1, r3, r2
   1a052:	fb02 3311 	mls	r3, r2, r1, r3
   1a056:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1a058:	b14e      	cbz	r6, 1a06e <smp_pairing_req+0x2be>
   1a05a:	6833      	ldr	r3, [r6, #0]
   1a05c:	b13b      	cbz	r3, 1a06e <smp_pairing_req+0x2be>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a05e:	210b      	movs	r1, #11
   1a060:	4628      	mov	r0, r5
   1a062:	f00b fffe 	bl	26062 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1a066:	6833      	ldr	r3, [r6, #0]
   1a068:	9901      	ldr	r1, [sp, #4]
   1a06a:	4640      	mov	r0, r8
   1a06c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1a06e:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1a070:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1a074:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1a078:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1a07a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1a07e:	0a1b      	lsrs	r3, r3, #8
   1a080:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1a084:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1a088:	e7bf      	b.n	1a00a <smp_pairing_req+0x25a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a08a:	4628      	mov	r0, r5
   1a08c:	210a      	movs	r1, #10
   1a08e:	f00b ffe8 	bl	26062 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1a092:	6873      	ldr	r3, [r6, #4]
   1a094:	4640      	mov	r0, r8
   1a096:	4798      	blx	r3
	if (ret) {
   1a098:	e7b7      	b.n	1a00a <smp_pairing_req+0x25a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a09a:	480e      	ldr	r0, [pc, #56]	; (1a0d4 <smp_pairing_req+0x324>)
   1a09c:	2145      	movs	r1, #69	; 0x45
   1a09e:	f009 fcb1 	bl	23a04 <z_log_minimal_printk>
	if (ret) {
   1a0a2:	e6b1      	b.n	19e08 <smp_pairing_req+0x58>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1a0a4:	2002      	movs	r0, #2
   1a0a6:	e694      	b.n	19dd2 <smp_pairing_req+0x22>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1a0a8:	2103      	movs	r1, #3
   1a0aa:	4620      	mov	r0, r4
   1a0ac:	f00b ffd9 	bl	26062 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1a0b0:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1a0b2:	f00b ffd6 	bl	26062 <atomic_set_bit>
}
   1a0b6:	b002      	add	sp, #8
   1a0b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   1a0bc:	f00c b804 	b.w	260c8 <send_pairing_rsp>
   1a0c0:	20002660 	.word	0x20002660
   1a0c4:	0002a473 	.word	0x0002a473
   1a0c8:	0002a45a 	.word	0x0002a45a
   1a0cc:	0002a0be 	.word	0x0002a0be
   1a0d0:	000f4240 	.word	0x000f4240
   1a0d4:	0002a057 	.word	0x0002a057
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1a0d8:	7a23      	ldrb	r3, [r4, #8]
   1a0da:	b973      	cbnz	r3, 1a0fa <smp_pairing_req+0x34a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a0dc:	210f      	movs	r1, #15
   1a0de:	4628      	mov	r0, r5
   1a0e0:	f00b feca 	bl	25e78 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a0e4:	b948      	cbnz	r0, 1a0fa <smp_pairing_req+0x34a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a0e6:	b147      	cbz	r7, 1a0fa <smp_pairing_req+0x34a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1a0e8:	697b      	ldr	r3, [r7, #20]
   1a0ea:	b133      	cbz	r3, 1a0fa <smp_pairing_req+0x34a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a0ec:	4628      	mov	r0, r5
   1a0ee:	210a      	movs	r1, #10
   1a0f0:	f00b ffb7 	bl	26062 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1a0f4:	697b      	ldr	r3, [r7, #20]
   1a0f6:	4630      	mov	r0, r6
   1a0f8:	e79c      	b.n	1a034 <smp_pairing_req+0x284>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1a0fa:	210c      	movs	r1, #12
   1a0fc:	4620      	mov	r0, r4
   1a0fe:	e7d8      	b.n	1a0b2 <smp_pairing_req+0x302>

0001a100 <compute_and_check_and_send_periph_dhcheck>:
{
   1a100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1a104:	2210      	movs	r2, #16
{
   1a106:	b0a3      	sub	sp, #140	; 0x8c
   1a108:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1a10a:	2100      	movs	r1, #0
   1a10c:	eb0d 0002 	add.w	r0, sp, r2
   1a110:	f00a faf8 	bl	24704 <memset>
	switch (smp->method) {
   1a114:	7a22      	ldrb	r2, [r4, #8]
   1a116:	2a05      	cmp	r2, #5
   1a118:	d837      	bhi.n	1a18a <compute_and_check_and_send_periph_dhcheck+0x8a>
   1a11a:	e8df f002 	tbb	[pc, r2]
   1a11e:	0309      	.short	0x0309
   1a120:	2e360903 	.word	0x2e360903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1a124:	2204      	movs	r2, #4
   1a126:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1a12a:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1a12c:	f00a fadf 	bl	246ee <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1a130:	4b6a      	ldr	r3, [pc, #424]	; (1a2dc <compute_and_check_and_send_periph_dhcheck+0x1dc>)
		   &smp->chan.chan.conn->le.init_addr,
   1a132:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1a136:	aa14      	add	r2, sp, #80	; 0x50
   1a138:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1a13c:	6818      	ldr	r0, [r3, #0]
   1a13e:	6859      	ldr	r1, [r3, #4]
   1a140:	4615      	mov	r5, r2
   1a142:	c503      	stmia	r5!, {r0, r1}
   1a144:	3308      	adds	r3, #8
   1a146:	42b3      	cmp	r3, r6
   1a148:	462a      	mov	r2, r5
   1a14a:	d1f7      	bne.n	1a13c <compute_and_check_and_send_periph_dhcheck+0x3c>
   1a14c:	6818      	ldr	r0, [r3, #0]
   1a14e:	791b      	ldrb	r3, [r3, #4]
   1a150:	6028      	str	r0, [r5, #0]
   1a152:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1a154:	ad0c      	add	r5, sp, #48	; 0x30
   1a156:	2220      	movs	r2, #32
   1a158:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1a15c:	4628      	mov	r0, r5
   1a15e:	f7ff fc41 	bl	199e4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1a162:	485f      	ldr	r0, [pc, #380]	; (1a2e0 <compute_and_check_and_send_periph_dhcheck+0x1e0>)
   1a164:	ab08      	add	r3, sp, #32
   1a166:	2220      	movs	r2, #32
   1a168:	4629      	mov	r1, r5
   1a16a:	f00b febe 	bl	25eea <bt_smp_aes_cmac>
	if (err) {
   1a16e:	b1a0      	cbz	r0, 1a19a <compute_and_check_and_send_periph_dhcheck+0x9a>
		BT_ERR("Calculate LTK failed");
   1a170:	485c      	ldr	r0, [pc, #368]	; (1a2e4 <compute_and_check_and_send_periph_dhcheck+0x1e4>)
   1a172:	2145      	movs	r1, #69	; 0x45
   1a174:	f009 fc46 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a178:	e00b      	b.n	1a192 <compute_and_check_and_send_periph_dhcheck+0x92>
		if (smp->oobd_remote) {
   1a17a:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1a17e:	2900      	cmp	r1, #0
   1a180:	d0d6      	beq.n	1a130 <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1a182:	2210      	movs	r2, #16
   1a184:	eb0d 0002 	add.w	r0, sp, r2
   1a188:	e7d0      	b.n	1a12c <compute_and_check_and_send_periph_dhcheck+0x2c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a18a:	4857      	ldr	r0, [pc, #348]	; (1a2e8 <compute_and_check_and_send_periph_dhcheck+0x1e8>)
   1a18c:	2145      	movs	r1, #69	; 0x45
   1a18e:	f009 fc39 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a192:	2008      	movs	r0, #8
}
   1a194:	b023      	add	sp, #140	; 0x8c
   1a196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1a19a:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1a19e:	2210      	movs	r2, #16
   1a1a0:	4639      	mov	r1, r7
   1a1a2:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1a1a6:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1a1aa:	f7ff fc1b 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1a1ae:	2210      	movs	r2, #16
   1a1b0:	4641      	mov	r1, r8
   1a1b2:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1a1b6:	f7ff fc15 	bl	199e4 <sys_memcpy_swap>
	m[37] = a1->type;
   1a1ba:	f899 3097 	ldrb.w	r3, [r9, #151]	; 0x97
   1a1be:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a1c2:	2206      	movs	r2, #6
   1a1c4:	f109 0198 	add.w	r1, r9, #152	; 0x98
   1a1c8:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1a1cc:	f7ff fc0a 	bl	199e4 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1a1d0:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1a1d4:	f899 309e 	ldrb.w	r3, [r9, #158]	; 0x9e
   1a1d8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a1dc:	2206      	movs	r2, #6
   1a1de:	f109 019f 	add.w	r1, r9, #159	; 0x9f
   1a1e2:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1a1e6:	f7ff fbfd 	bl	199e4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1a1ea:	4633      	mov	r3, r6
   1a1ec:	2235      	movs	r2, #53	; 0x35
   1a1ee:	a914      	add	r1, sp, #80	; 0x50
   1a1f0:	a808      	add	r0, sp, #32
   1a1f2:	f00b fe7a 	bl	25eea <bt_smp_aes_cmac>
	if (err) {
   1a1f6:	2800      	cmp	r0, #0
   1a1f8:	d1ba      	bne.n	1a170 <compute_and_check_and_send_periph_dhcheck+0x70>
	sys_mem_swap(mackey, 16);
   1a1fa:	4630      	mov	r0, r6
   1a1fc:	f00b feb2 	bl	25f64 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1a200:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   1a204:	2301      	movs	r3, #1
   1a206:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1a20a:	2235      	movs	r2, #53	; 0x35
   1a20c:	464b      	mov	r3, r9
   1a20e:	a914      	add	r1, sp, #80	; 0x50
   1a210:	a808      	add	r0, sp, #32
   1a212:	f00b fe6a 	bl	25eea <bt_smp_aes_cmac>
	if (err) {
   1a216:	2800      	cmp	r0, #0
   1a218:	d1aa      	bne.n	1a170 <compute_and_check_and_send_periph_dhcheck+0x70>
	sys_mem_swap(ltk, 16);
   1a21a:	4648      	mov	r0, r9
   1a21c:	f00b fea2 	bl	25f64 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1a220:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1a224:	aa14      	add	r2, sp, #80	; 0x50
   1a226:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1a228:	f103 0297 	add.w	r2, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
   1a22c:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1a22e:	9301      	str	r3, [sp, #4]
   1a230:	f104 0311 	add.w	r3, r4, #17
   1a234:	9202      	str	r2, [sp, #8]
   1a236:	9300      	str	r3, [sp, #0]
   1a238:	463a      	mov	r2, r7
   1a23a:	ab04      	add	r3, sp, #16
   1a23c:	4641      	mov	r1, r8
   1a23e:	4630      	mov	r0, r6
   1a240:	f00b fe9e 	bl	25f80 <smp_f6>
   1a244:	b110      	cbz	r0, 1a24c <compute_and_check_and_send_periph_dhcheck+0x14c>
		BT_ERR("Calculate local DHKey check failed");
   1a246:	4829      	ldr	r0, [pc, #164]	; (1a2ec <compute_and_check_and_send_periph_dhcheck+0x1ec>)
   1a248:	2145      	movs	r1, #69	; 0x45
   1a24a:	e793      	b.n	1a174 <compute_and_check_and_send_periph_dhcheck+0x74>
	if (smp->method == LE_SC_OOB) {
   1a24c:	7a23      	ldrb	r3, [r4, #8]
   1a24e:	2b05      	cmp	r3, #5
   1a250:	d107      	bne.n	1a262 <compute_and_check_and_send_periph_dhcheck+0x162>
		if (smp->oobd_local) {
   1a252:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1a256:	2210      	movs	r2, #16
   1a258:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   1a25c:	b1b1      	cbz	r1, 1a28c <compute_and_check_and_send_periph_dhcheck+0x18c>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1a25e:	f00a fa46 	bl	246ee <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1a262:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1a266:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1a268:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1a26c:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1a26e:	9301      	str	r3, [sp, #4]
   1a270:	f104 030a 	add.w	r3, r4, #10
   1a274:	9202      	str	r2, [sp, #8]
   1a276:	9300      	str	r3, [sp, #0]
   1a278:	4642      	mov	r2, r8
   1a27a:	ab04      	add	r3, sp, #16
   1a27c:	4639      	mov	r1, r7
   1a27e:	4630      	mov	r0, r6
   1a280:	f00b fe7e 	bl	25f80 <smp_f6>
   1a284:	b128      	cbz	r0, 1a292 <compute_and_check_and_send_periph_dhcheck+0x192>
		BT_ERR("Calculate remote DHKey check failed");
   1a286:	481a      	ldr	r0, [pc, #104]	; (1a2f0 <compute_and_check_and_send_periph_dhcheck+0x1f0>)
   1a288:	2145      	movs	r1, #69	; 0x45
   1a28a:	e773      	b.n	1a174 <compute_and_check_and_send_periph_dhcheck+0x74>
			memset(r, 0, sizeof(r));
   1a28c:	f00a fa3a 	bl	24704 <memset>
   1a290:	e7e7      	b.n	1a262 <compute_and_check_and_send_periph_dhcheck+0x162>
	if (memcmp(smp->e, re, 16)) {
   1a292:	4629      	mov	r1, r5
   1a294:	2210      	movs	r2, #16
   1a296:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1a29a:	f00a fa18 	bl	246ce <memcmp>
   1a29e:	4605      	mov	r5, r0
   1a2a0:	b9d0      	cbnz	r0, 1a2d8 <compute_and_check_and_send_periph_dhcheck+0x1d8>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1a2a2:	210d      	movs	r1, #13
   1a2a4:	4620      	mov	r0, r4
   1a2a6:	f00b fef0 	bl	2608a <smp_create_pdu.constprop.0>
	if (!buf) {
   1a2aa:	4606      	mov	r6, r0
   1a2ac:	2800      	cmp	r0, #0
   1a2ae:	f43f af70 	beq.w	1a192 <compute_and_check_and_send_periph_dhcheck+0x92>
   1a2b2:	2110      	movs	r1, #16
   1a2b4:	3008      	adds	r0, #8
   1a2b6:	f001 fc49 	bl	1bb4c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1a2ba:	2210      	movs	r2, #16
   1a2bc:	a914      	add	r1, sp, #80	; 0x50
   1a2be:	f00a fa16 	bl	246ee <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1a2c2:	462a      	mov	r2, r5
   1a2c4:	4631      	mov	r1, r6
   1a2c6:	4620      	mov	r0, r4
   1a2c8:	f00b fe2f 	bl	25f2a <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1a2cc:	1d20      	adds	r0, r4, #4
   1a2ce:	2101      	movs	r1, #1
   1a2d0:	f00b fec7 	bl	26062 <atomic_set_bit>
	return 0;
   1a2d4:	4628      	mov	r0, r5
   1a2d6:	e75d      	b.n	1a194 <compute_and_check_and_send_periph_dhcheck+0x94>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1a2d8:	200b      	movs	r0, #11
   1a2da:	e75b      	b.n	1a194 <compute_and_check_and_send_periph_dhcheck+0x94>
   1a2dc:	00027614 	.word	0x00027614
   1a2e0:	0002a44a 	.word	0x0002a44a
   1a2e4:	0002a0f0 	.word	0x0002a0f0
   1a2e8:	0002a057 	.word	0x0002a057
   1a2ec:	0002a10a 	.word	0x0002a10a
   1a2f0:	0002a132 	.word	0x0002a132

0001a2f4 <bt_smp_connected>:
{
   1a2f4:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1a2f6:	490b      	ldr	r1, [pc, #44]	; (1a324 <bt_smp_connected+0x30>)
{
   1a2f8:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1a2fa:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1a2fe:	3094      	adds	r0, #148	; 0x94
   1a300:	f006 fd8c 	bl	20e1c <k_work_init_delayable>
	smp_reset(smp);
   1a304:	4628      	mov	r0, r5
   1a306:	f00b ff52 	bl	261ae <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a30a:	f3bf 8f5b 	dmb	ish
   1a30e:	4b06      	ldr	r3, [pc, #24]	; (1a328 <bt_smp_connected+0x34>)
   1a310:	34c4      	adds	r4, #196	; 0xc4
   1a312:	e854 2f00 	ldrex	r2, [r4]
   1a316:	e844 3100 	strex	r1, r3, [r4]
   1a31a:	2900      	cmp	r1, #0
   1a31c:	d1f9      	bne.n	1a312 <bt_smp_connected+0x1e>
   1a31e:	f3bf 8f5b 	dmb	ish
}
   1a322:	bd38      	pop	{r3, r4, r5, pc}
   1a324:	0001ae95 	.word	0x0001ae95
   1a328:	20001b08 	.word	0x20001b08

0001a32c <smp_pairing_confirm>:
{
   1a32c:	b570      	push	{r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a32e:	1d05      	adds	r5, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1a330:	688e      	ldr	r6, [r1, #8]
{
   1a332:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a334:	210b      	movs	r1, #11
   1a336:	4628      	mov	r0, r5
   1a338:	f00b fdc8 	bl	25ecc <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1a33c:	4631      	mov	r1, r6
   1a33e:	2210      	movs	r2, #16
   1a340:	f104 0017 	add.w	r0, r4, #23
   1a344:	f00a f9d3 	bl	246ee <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a348:	2105      	movs	r1, #5
   1a34a:	4628      	mov	r0, r5
   1a34c:	f00b fd94 	bl	25e78 <atomic_test_bit>
   1a350:	b920      	cbnz	r0, 1a35c <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1a352:	4620      	mov	r0, r4
}
   1a354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1a358:	f00b bfa6 	b.w	262a8 <legacy_pairing_confirm>
	switch (smp->method) {
   1a35c:	7a22      	ldrb	r2, [r4, #8]
   1a35e:	2a01      	cmp	r2, #1
   1a360:	d009      	beq.n	1a376 <smp_pairing_confirm+0x4a>
   1a362:	2a02      	cmp	r2, #2
   1a364:	d113      	bne.n	1a38e <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1a366:	4620      	mov	r0, r4
   1a368:	2104      	movs	r1, #4
   1a36a:	f00b fe7a 	bl	26062 <atomic_set_bit>
}
   1a36e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1a372:	f7ff bbe7 	b.w	19b44 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1a376:	210a      	movs	r1, #10
   1a378:	4628      	mov	r0, r5
   1a37a:	f00b fd7d 	bl	25e78 <atomic_test_bit>
   1a37e:	2800      	cmp	r0, #0
   1a380:	d0f1      	beq.n	1a366 <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1a382:	4628      	mov	r0, r5
   1a384:	2100      	movs	r1, #0
   1a386:	f00b fe6c 	bl	26062 <atomic_set_bit>
			return 0;
   1a38a:	2000      	movs	r0, #0
}
   1a38c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a38e:	4803      	ldr	r0, [pc, #12]	; (1a39c <smp_pairing_confirm+0x70>)
   1a390:	2145      	movs	r1, #69	; 0x45
   1a392:	f009 fb37 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a396:	2008      	movs	r0, #8
   1a398:	e7f8      	b.n	1a38c <smp_pairing_confirm+0x60>
   1a39a:	bf00      	nop
   1a39c:	0002a057 	.word	0x0002a057

0001a3a0 <smp_pairing_random>:
{
   1a3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3a4:	b09e      	sub	sp, #120	; 0x78
   1a3a6:	4604      	mov	r4, r0
   1a3a8:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a3aa:	f7ff fa8d 	bl	198c8 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1a3ae:	f104 0737 	add.w	r7, r4, #55	; 0x37
   1a3b2:	68a9      	ldr	r1, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a3b4:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1a3b6:	2210      	movs	r2, #16
   1a3b8:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a3ba:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1a3bc:	f00a f997 	bl	246ee <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a3c0:	2105      	movs	r1, #5
   1a3c2:	4628      	mov	r0, r5
   1a3c4:	f00b fd58 	bl	25e78 <atomic_test_bit>
   1a3c8:	2800      	cmp	r0, #0
   1a3ca:	d140      	bne.n	1a44e <smp_pairing_random+0xae>
	struct bt_conn *conn = smp->chan.chan.conn;
   1a3cc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1a3d0:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1a3d4:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1a3d8:	ae0a      	add	r6, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1a3da:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1a3dc:	9201      	str	r2, [sp, #4]
   1a3de:	9300      	str	r3, [sp, #0]
   1a3e0:	9602      	str	r6, [sp, #8]
   1a3e2:	f104 0310 	add.w	r3, r4, #16
   1a3e6:	f104 0209 	add.w	r2, r4, #9
   1a3ea:	4639      	mov	r1, r7
   1a3ec:	4640      	mov	r0, r8
   1a3ee:	f00b ff01 	bl	261f4 <smp_c1>
	if (err) {
   1a3f2:	2800      	cmp	r0, #0
   1a3f4:	d154      	bne.n	1a4a0 <smp_pairing_random+0x100>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1a3f6:	2210      	movs	r2, #16
   1a3f8:	4631      	mov	r1, r6
   1a3fa:	f104 0017 	add.w	r0, r4, #23
   1a3fe:	f00a f966 	bl	246ce <memcmp>
   1a402:	2800      	cmp	r0, #0
   1a404:	f040 8089 	bne.w	1a51a <smp_pairing_random+0x17a>
	memcpy(out, r2, 8);
   1a408:	2208      	movs	r2, #8
   1a40a:	4639      	mov	r1, r7
   1a40c:	4630      	mov	r0, r6
   1a40e:	f00a f96e 	bl	246ee <memcpy>
	memcpy(out + 8, r1, 8);
   1a412:	2208      	movs	r2, #8
   1a414:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1a418:	a80c      	add	r0, sp, #48	; 0x30
   1a41a:	f00a f968 	bl	246ee <memcpy>
	return bt_encrypt_le(k, out, out);
   1a41e:	4632      	mov	r2, r6
   1a420:	4631      	mov	r1, r6
   1a422:	4640      	mov	r0, r8
   1a424:	f00c fb58 	bl	26ad8 <bt_encrypt_le>
		if (err) {
   1a428:	b120      	cbz	r0, 1a434 <smp_pairing_random+0x94>
			BT_ERR("Calculate STK failed");
   1a42a:	4867      	ldr	r0, [pc, #412]	; (1a5c8 <smp_pairing_random+0x228>)
   1a42c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate confirm failed");
   1a42e:	f009 fae9 	bl	23a04 <z_log_minimal_printk>
		if (err) {
   1a432:	e035      	b.n	1a4a0 <smp_pairing_random+0x100>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1a434:	4631      	mov	r1, r6
   1a436:	2210      	movs	r2, #16
   1a438:	4640      	mov	r0, r8
   1a43a:	f00a f958 	bl	246ee <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1a43e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1a440:	4628      	mov	r0, r5
   1a442:	f00b fe0e 	bl	26062 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1a446:	4620      	mov	r0, r4
   1a448:	f00b fe57 	bl	260fa <smp_send_pairing_random>
   1a44c:	e029      	b.n	1a4a2 <smp_pairing_random+0x102>
	switch (smp->method) {
   1a44e:	7a22      	ldrb	r2, [r4, #8]
   1a450:	2a05      	cmp	r2, #5
   1a452:	f200 80b2 	bhi.w	1a5ba <smp_pairing_random+0x21a>
   1a456:	e8df f002 	tbb	[pc, r2]
   1a45a:	433d      	.short	0x433d
   1a45c:	86b00343 	.word	0x86b00343
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1a460:	4b5a      	ldr	r3, [pc, #360]	; (1a5cc <smp_pairing_random+0x22c>)
   1a462:	f8d3 8000 	ldr.w	r8, [r3]
	sys_memcpy_swap(m, u, 32);
   1a466:	2220      	movs	r2, #32
   1a468:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1a46c:	a80a      	add	r0, sp, #40	; 0x28
   1a46e:	f7ff fab9 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1a472:	2220      	movs	r2, #32
   1a474:	4641      	mov	r1, r8
   1a476:	a812      	add	r0, sp, #72	; 0x48
   1a478:	f7ff fab4 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1a47c:	2210      	movs	r2, #16
   1a47e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1a482:	a81a      	add	r0, sp, #104	; 0x68
   1a484:	f7ff faae 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1a488:	2210      	movs	r2, #16
   1a48a:	4639      	mov	r1, r7
   1a48c:	a806      	add	r0, sp, #24
   1a48e:	f7ff faa9 	bl	199e4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1a492:	ab06      	add	r3, sp, #24
   1a494:	2250      	movs	r2, #80	; 0x50
   1a496:	a90a      	add	r1, sp, #40	; 0x28
   1a498:	4618      	mov	r0, r3
   1a49a:	f00b fd26 	bl	25eea <bt_smp_aes_cmac>
	if (err) {
   1a49e:	b118      	cbz	r0, 1a4a8 <smp_pairing_random+0x108>
			return BT_SMP_ERR_UNSPECIFIED;
   1a4a0:	2008      	movs	r0, #8
}
   1a4a2:	b01e      	add	sp, #120	; 0x78
   1a4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(passkey, xs + 12, 4);
   1a4a8:	2204      	movs	r2, #4
   1a4aa:	a909      	add	r1, sp, #36	; 0x24
   1a4ac:	a805      	add	r0, sp, #20
   1a4ae:	f00a f91e 	bl	246ee <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1a4b2:	9b05      	ldr	r3, [sp, #20]
   1a4b4:	4a46      	ldr	r2, [pc, #280]	; (1a5d0 <smp_pairing_random+0x230>)
   1a4b6:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a4b8:	4628      	mov	r0, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1a4ba:	fbb3 f1f2 	udiv	r1, r3, r2
   1a4be:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a4c2:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1a4c4:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a4c6:	f00b fdcc 	bl	26062 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1a4ca:	68b3      	ldr	r3, [r6, #8]
   1a4cc:	9905      	ldr	r1, [sp, #20]
   1a4ce:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a4d2:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1a4d4:	210d      	movs	r1, #13
   1a4d6:	4620      	mov	r0, r4
   1a4d8:	f00b fdc3 	bl	26062 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1a4dc:	2110      	movs	r1, #16
   1a4de:	e7af      	b.n	1a440 <smp_pairing_random+0xa0>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a4e0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1a4e4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1a4e8:	4938      	ldr	r1, [pc, #224]	; (1a5cc <smp_pairing_random+0x22c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a4ea:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1a4ec:	ae0a      	add	r6, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a4ee:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1a4f2:	9600      	str	r6, [sp, #0]
   1a4f4:	6809      	ldr	r1, [r1, #0]
   1a4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a4fa:	463a      	mov	r2, r7
   1a4fc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1a500:	f00b fd8a 	bl	26018 <smp_f4>
   1a504:	b110      	cbz	r0, 1a50c <smp_pairing_random+0x16c>
		BT_ERR("Calculate confirm failed");
   1a506:	4833      	ldr	r0, [pc, #204]	; (1a5d4 <smp_pairing_random+0x234>)
   1a508:	2145      	movs	r1, #69	; 0x45
   1a50a:	e790      	b.n	1a42e <smp_pairing_random+0x8e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1a50c:	2210      	movs	r2, #16
   1a50e:	4631      	mov	r1, r6
   1a510:	f104 0017 	add.w	r0, r4, #23
   1a514:	f00a f8db 	bl	246ce <memcmp>
   1a518:	b108      	cbz	r0, 1a51e <smp_pairing_random+0x17e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1a51a:	2004      	movs	r0, #4
   1a51c:	e7c1      	b.n	1a4a2 <smp_pairing_random+0x102>
		atomic_set_bit(smp->allowed_cmds,
   1a51e:	2103      	movs	r1, #3
   1a520:	4620      	mov	r0, r4
   1a522:	f00b fd9e 	bl	26062 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1a526:	f00b fde8 	bl	260fa <smp_send_pairing_random>
		if (err) {
   1a52a:	2800      	cmp	r0, #0
   1a52c:	d1b9      	bne.n	1a4a2 <smp_pairing_random+0x102>
		smp->passkey_round++;
   1a52e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1a532:	3301      	adds	r3, #1
   1a534:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1a536:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1a538:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1a53c:	d109      	bne.n	1a552 <smp_pairing_random+0x1b2>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1a53e:	210d      	movs	r1, #13
   1a540:	4620      	mov	r0, r4
   1a542:	f00b fd8e 	bl	26062 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1a546:	2110      	movs	r1, #16
   1a548:	4628      	mov	r0, r5
   1a54a:	f00b fd8a 	bl	26062 <atomic_set_bit>
			return 0;
   1a54e:	2000      	movs	r0, #0
   1a550:	e7a7      	b.n	1a4a2 <smp_pairing_random+0x102>
		if (bt_rand(smp->prnd, 16)) {
   1a552:	2110      	movs	r1, #16
   1a554:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1a558:	f004 f860 	bl	1e61c <bt_rand>
   1a55c:	3800      	subs	r0, #0
   1a55e:	bf18      	it	ne
   1a560:	2001      	movne	r0, #1
   1a562:	00c0      	lsls	r0, r0, #3
   1a564:	e79d      	b.n	1a4a2 <smp_pairing_random+0x102>
		if (bt_rand(smp->prnd, 16)) {
   1a566:	2110      	movs	r1, #16
   1a568:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1a56c:	f004 f856 	bl	1e61c <bt_rand>
   1a570:	2800      	cmp	r0, #0
   1a572:	d195      	bne.n	1a4a0 <smp_pairing_random+0x100>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1a574:	b336      	cbz	r6, 1a5c4 <smp_pairing_random+0x224>
   1a576:	68f3      	ldr	r3, [r6, #12]
   1a578:	b323      	cbz	r3, 1a5c4 <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   1a57a:	4b17      	ldr	r3, [pc, #92]	; (1a5d8 <smp_pairing_random+0x238>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a57c:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1a57e:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1a582:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a586:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1a588:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a58a:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1a58e:	d412      	bmi.n	1a5b6 <smp_pairing_random+0x216>
   1a590:	2b00      	cmp	r3, #0
   1a592:	bf14      	ite	ne
   1a594:	2301      	movne	r3, #1
   1a596:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1a598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
			smp->oobd_local = NULL;
   1a59c:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   1a59e:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1a5a2:	4628      	mov	r0, r5
   1a5a4:	210c      	movs	r1, #12
   1a5a6:	f00b fd5c 	bl	26062 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1a5aa:	68f3      	ldr	r3, [r6, #12]
   1a5ac:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a5b0:	a90a      	add	r1, sp, #40	; 0x28
   1a5b2:	4798      	blx	r3
			return 0;
   1a5b4:	e7cb      	b.n	1a54e <smp_pairing_random+0x1ae>
		if (rsp_oob_present) {
   1a5b6:	005b      	lsls	r3, r3, #1
   1a5b8:	e7ee      	b.n	1a598 <smp_pairing_random+0x1f8>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a5ba:	4808      	ldr	r0, [pc, #32]	; (1a5dc <smp_pairing_random+0x23c>)
   1a5bc:	2145      	movs	r1, #69	; 0x45
   1a5be:	f009 fa21 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a5c2:	e76d      	b.n	1a4a0 <smp_pairing_random+0x100>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1a5c4:	2002      	movs	r0, #2
   1a5c6:	e76c      	b.n	1a4a2 <smp_pairing_random+0x102>
   1a5c8:	0002a15b 	.word	0x0002a15b
   1a5cc:	2000220c 	.word	0x2000220c
   1a5d0:	000f4240 	.word	0x000f4240
   1a5d4:	0002a175 	.word	0x0002a175
   1a5d8:	00027614 	.word	0x00027614
   1a5dc:	0002a057 	.word	0x0002a057

0001a5e0 <bt_smp_start_security>:
{
   1a5e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1a5e4:	78c6      	ldrb	r6, [r0, #3]
   1a5e6:	2e01      	cmp	r6, #1
{
   1a5e8:	4604      	mov	r4, r0
	switch (conn->role) {
   1a5ea:	d005      	beq.n	1a5f8 <bt_smp_start_security+0x18>
		return -EINVAL;
   1a5ec:	f06f 0415 	mvn.w	r4, #21
}
   1a5f0:	4620      	mov	r0, r4
   1a5f2:	b003      	add	sp, #12
   1a5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1a5f8:	f7ff f9c8 	bl	1998c <smp_chan_get>
	if (!smp) {
   1a5fc:	4605      	mov	r5, r0
   1a5fe:	2800      	cmp	r0, #0
   1a600:	f000 80ac 	beq.w	1a75c <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1a604:	1d07      	adds	r7, r0, #4
   1a606:	2104      	movs	r1, #4
   1a608:	4638      	mov	r0, r7
   1a60a:	f00b fc35 	bl	25e78 <atomic_test_bit>
   1a60e:	2800      	cmp	r0, #0
   1a610:	f040 80a7 	bne.w	1a762 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a614:	2103      	movs	r1, #3
   1a616:	4638      	mov	r0, r7
   1a618:	f00b fc2e 	bl	25e78 <atomic_test_bit>
   1a61c:	b110      	cbz	r0, 1a624 <bt_smp_start_security+0x44>
		return -EBUSY;
   1a61e:	f06f 040f 	mvn.w	r4, #15
   1a622:	e7e5      	b.n	1a5f0 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a624:	4631      	mov	r1, r6
   1a626:	4638      	mov	r0, r7
   1a628:	f00b fc26 	bl	25e78 <atomic_test_bit>
   1a62c:	2800      	cmp	r0, #0
   1a62e:	d1f6      	bne.n	1a61e <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a630:	4628      	mov	r0, r5
   1a632:	f7ff f949 	bl	198c8 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1a636:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1a63a:	7a9b      	ldrb	r3, [r3, #10]
   1a63c:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a63e:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1a640:	d042      	beq.n	1a6c8 <bt_smp_start_security+0xe8>
   1a642:	d832      	bhi.n	1a6aa <bt_smp_start_security+0xca>
   1a644:	3b01      	subs	r3, #1
   1a646:	2b01      	cmp	r3, #1
   1a648:	d948      	bls.n	1a6dc <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1a64a:	210a      	movs	r1, #10
   1a64c:	1d20      	adds	r0, r4, #4
   1a64e:	f00b fc13 	bl	25e78 <atomic_test_bit>
   1a652:	2800      	cmp	r0, #0
   1a654:	d1ca      	bne.n	1a5ec <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1a656:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1a65a:	b983      	cbnz	r3, 1a67e <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1a65c:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1a660:	7a21      	ldrb	r1, [r4, #8]
   1a662:	4632      	mov	r2, r6
   1a664:	2020      	movs	r0, #32
   1a666:	f000 fd6d 	bl	1b144 <bt_keys_find>
   1a66a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   1a66e:	b930      	cbnz	r0, 1a67e <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1a670:	7a21      	ldrb	r1, [r4, #8]
   1a672:	4632      	mov	r2, r6
   1a674:	2004      	movs	r0, #4
   1a676:	f000 fd65 	bl	1b144 <bt_keys_find>
   1a67a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   1a67e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1a682:	2b00      	cmp	r3, #0
   1a684:	d0b2      	beq.n	1a5ec <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1a686:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1a688:	f012 0f24 	tst.w	r2, #36	; 0x24
   1a68c:	d0ae      	beq.n	1a5ec <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1a68e:	7aa1      	ldrb	r1, [r4, #10]
   1a690:	2902      	cmp	r1, #2
   1a692:	d923      	bls.n	1a6dc <bt_smp_start_security+0xfc>
   1a694:	7b58      	ldrb	r0, [r3, #13]
   1a696:	07c0      	lsls	r0, r0, #31
   1a698:	d5a8      	bpl.n	1a5ec <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1a69a:	2903      	cmp	r1, #3
   1a69c:	d01e      	beq.n	1a6dc <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1a69e:	0692      	lsls	r2, r2, #26
   1a6a0:	d5a4      	bpl.n	1a5ec <bt_smp_start_security+0xc>
   1a6a2:	7b1b      	ldrb	r3, [r3, #12]
   1a6a4:	2b10      	cmp	r3, #16
   1a6a6:	d1a1      	bne.n	1a5ec <bt_smp_start_security+0xc>
   1a6a8:	e018      	b.n	1a6dc <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1a6aa:	2b04      	cmp	r3, #4
   1a6ac:	d1cd      	bne.n	1a64a <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a6ae:	4628      	mov	r0, r5
   1a6b0:	f7ff f928 	bl	19904 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1a6b4:	2803      	cmp	r0, #3
   1a6b6:	d104      	bne.n	1a6c2 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a6b8:	2e00      	cmp	r6, #0
   1a6ba:	d0c6      	beq.n	1a64a <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1a6bc:	68f3      	ldr	r3, [r6, #12]
   1a6be:	2b00      	cmp	r3, #0
   1a6c0:	d0c3      	beq.n	1a64a <bt_smp_start_security+0x6a>
   1a6c2:	4b29      	ldr	r3, [pc, #164]	; (1a768 <bt_smp_start_security+0x188>)
   1a6c4:	781b      	ldrb	r3, [r3, #0]
   1a6c6:	e007      	b.n	1a6d8 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a6c8:	4628      	mov	r0, r5
   1a6ca:	f7ff f91b 	bl	19904 <get_io_capa>
   1a6ce:	2803      	cmp	r0, #3
   1a6d0:	d104      	bne.n	1a6dc <bt_smp_start_security+0xfc>
   1a6d2:	2e00      	cmp	r6, #0
   1a6d4:	d0b9      	beq.n	1a64a <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1a6d6:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1a6d8:	2b00      	cmp	r3, #0
   1a6da:	d0b6      	beq.n	1a64a <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1a6dc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1a6e0:	b13b      	cbz	r3, 1a6f2 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1a6e2:	4628      	mov	r0, r5
   1a6e4:	f7ff f9a2 	bl	19a2c <smp_init>
   1a6e8:	4680      	mov	r8, r0
   1a6ea:	b170      	cbz	r0, 1a70a <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1a6ec:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1a6f0:	e77e      	b.n	1a5f0 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a6f2:	7a20      	ldrb	r0, [r4, #8]
   1a6f4:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1a6f8:	f000 fcea 	bl	1b0d0 <bt_keys_get_addr>
   1a6fc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   1a700:	2800      	cmp	r0, #0
   1a702:	d1ee      	bne.n	1a6e2 <bt_smp_start_security+0x102>
			return -ENOMEM;
   1a704:	f06f 040b 	mvn.w	r4, #11
   1a708:	e772      	b.n	1a5f0 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1a70a:	210b      	movs	r1, #11
   1a70c:	4628      	mov	r0, r5
   1a70e:	f00b fcbc 	bl	2608a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1a712:	4606      	mov	r6, r0
   1a714:	2800      	cmp	r0, #0
   1a716:	d0e9      	beq.n	1a6ec <bt_smp_start_security+0x10c>
   1a718:	2101      	movs	r1, #1
   1a71a:	3008      	adds	r0, #8
   1a71c:	f001 fa16 	bl	1bb4c <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1a720:	2109      	movs	r1, #9
   1a722:	4681      	mov	r9, r0
   1a724:	4628      	mov	r0, r5
   1a726:	f7ff f913 	bl	19950 <get_auth>
   1a72a:	4643      	mov	r3, r8
   1a72c:	f889 0000 	strb.w	r0, [r9]
   1a730:	4632      	mov	r2, r6
   1a732:	4620      	mov	r0, r4
   1a734:	f8cd 8000 	str.w	r8, [sp]
   1a738:	2106      	movs	r1, #6
   1a73a:	f00a fc9a 	bl	25072 <bt_l2cap_send_cb>
	if (err) {
   1a73e:	4604      	mov	r4, r0
   1a740:	b118      	cbz	r0, 1a74a <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1a742:	4630      	mov	r0, r6
   1a744:	f001 f8fc 	bl	1b940 <net_buf_unref>
		return err;
   1a748:	e752      	b.n	1a5f0 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1a74a:	4638      	mov	r0, r7
   1a74c:	210f      	movs	r1, #15
   1a74e:	f00b fc88 	bl	26062 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1a752:	2101      	movs	r1, #1
   1a754:	4628      	mov	r0, r5
   1a756:	f00b fc84 	bl	26062 <atomic_set_bit>
	return 0;
   1a75a:	e749      	b.n	1a5f0 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1a75c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1a760:	e746      	b.n	1a5f0 <bt_smp_start_security+0x10>
		return -EIO;
   1a762:	f06f 0404 	mvn.w	r4, #4
   1a766:	e743      	b.n	1a5f0 <bt_smp_start_security+0x10>
   1a768:	2000265f 	.word	0x2000265f

0001a76c <smp_pairing_complete>:
{
   1a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a76e:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1a770:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1a774:	1d04      	adds	r4, r0, #4
	if (!status) {
   1a776:	bb61      	cbnz	r1, 1a7d2 <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1a778:	210d      	movs	r1, #13
   1a77a:	4620      	mov	r0, r4
   1a77c:	f00b fb7c 	bl	25e78 <atomic_test_bit>
		if (bond_flag) {
   1a780:	4607      	mov	r7, r0
   1a782:	b118      	cbz	r0, 1a78c <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1a784:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1a788:	f000 fe64 	bl	1b454 <bt_keys_store>
	return list->head;
   1a78c:	4b36      	ldr	r3, [pc, #216]	; (1a868 <smp_pairing_complete+0xfc>)
   1a78e:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1a790:	b19b      	cbz	r3, 1a7ba <smp_pairing_complete+0x4e>
	return node->next;
   1a792:	681c      	ldr	r4, [r3, #0]
   1a794:	b104      	cbz	r4, 1a798 <smp_pairing_complete+0x2c>
   1a796:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1a798:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1a79c:	b113      	cbz	r3, 1a7a4 <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   1a79e:	4639      	mov	r1, r7
   1a7a0:	4628      	mov	r0, r5
   1a7a2:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1a7a4:	b14c      	cbz	r4, 1a7ba <smp_pairing_complete+0x4e>
   1a7a6:	4623      	mov	r3, r4
   1a7a8:	68e4      	ldr	r4, [r4, #12]
   1a7aa:	681b      	ldr	r3, [r3, #0]
   1a7ac:	b11c      	cbz	r4, 1a7b6 <smp_pairing_complete+0x4a>
   1a7ae:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1a7b0:	2b00      	cmp	r3, #0
   1a7b2:	d1f4      	bne.n	1a79e <smp_pairing_complete+0x32>
   1a7b4:	e7f7      	b.n	1a7a6 <smp_pairing_complete+0x3a>
   1a7b6:	2b00      	cmp	r3, #0
   1a7b8:	d1f1      	bne.n	1a79e <smp_pairing_complete+0x32>
	smp_reset(smp);
   1a7ba:	4630      	mov	r0, r6
   1a7bc:	f00b fcf7 	bl	261ae <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1a7c0:	7a6a      	ldrb	r2, [r5, #9]
   1a7c2:	7aab      	ldrb	r3, [r5, #10]
   1a7c4:	429a      	cmp	r2, r3
   1a7c6:	d04d      	beq.n	1a864 <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1a7c8:	4628      	mov	r0, r5
}
   1a7ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1a7ce:	f7ff bf07 	b.w	1a5e0 <bt_smp_start_security>
	switch (smp_err) {
   1a7d2:	3901      	subs	r1, #1
   1a7d4:	b2c9      	uxtb	r1, r1
   1a7d6:	290e      	cmp	r1, #14
   1a7d8:	bf9c      	itt	ls
   1a7da:	4b24      	ldrls	r3, [pc, #144]	; (1a86c <smp_pairing_complete+0x100>)
   1a7dc:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1a7de:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
	if (!status) {
   1a7e2:	bf88      	it	hi
   1a7e4:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1a7e6:	b143      	cbz	r3, 1a7fa <smp_pairing_complete+0x8e>
   1a7e8:	7b1b      	ldrb	r3, [r3, #12]
   1a7ea:	bb2b      	cbnz	r3, 1a838 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1a7ec:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1a7f0:	f000 fd7e 	bl	1b2f0 <bt_keys_clear>
			conn->le.keys = NULL;
   1a7f4:	2300      	movs	r3, #0
   1a7f6:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1a7fa:	2102      	movs	r1, #2
   1a7fc:	4620      	mov	r0, r4
   1a7fe:	f00b fb3b 	bl	25e78 <atomic_test_bit>
   1a802:	b940      	cbnz	r0, 1a816 <smp_pairing_complete+0xaa>
	switch (err) {
   1a804:	2f07      	cmp	r7, #7
   1a806:	bf96      	itet	ls
   1a808:	4b19      	ldrls	r3, [pc, #100]	; (1a870 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1a80a:	211f      	movhi	r1, #31
   1a80c:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1a80e:	463a      	mov	r2, r7
   1a810:	4628      	mov	r0, r5
   1a812:	f7fc f89f 	bl	16954 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a816:	2103      	movs	r1, #3
   1a818:	4620      	mov	r0, r4
   1a81a:	f00b fb2d 	bl	25e78 <atomic_test_bit>
   1a81e:	2800      	cmp	r0, #0
   1a820:	d0cb      	beq.n	1a7ba <smp_pairing_complete+0x4e>
	return list->head;
   1a822:	4b11      	ldr	r3, [pc, #68]	; (1a868 <smp_pairing_complete+0xfc>)
   1a824:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1a826:	2b00      	cmp	r3, #0
   1a828:	d0c7      	beq.n	1a7ba <smp_pairing_complete+0x4e>
	return node->next;
   1a82a:	681c      	ldr	r4, [r3, #0]
   1a82c:	b104      	cbz	r4, 1a830 <smp_pairing_complete+0xc4>
   1a82e:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1a830:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1a834:	b94b      	cbnz	r3, 1a84a <smp_pairing_complete+0xde>
   1a836:	e00b      	b.n	1a850 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1a838:	2102      	movs	r1, #2
   1a83a:	4620      	mov	r0, r4
   1a83c:	f00b fb1c 	bl	25e78 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1a840:	2800      	cmp	r0, #0
   1a842:	d1d3      	bne.n	1a7ec <smp_pairing_complete+0x80>
   1a844:	e7d9      	b.n	1a7fa <smp_pairing_complete+0x8e>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1a846:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1a848:	b123      	cbz	r3, 1a854 <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   1a84a:	4639      	mov	r1, r7
   1a84c:	4628      	mov	r0, r5
   1a84e:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1a850:	2c00      	cmp	r4, #0
   1a852:	d0b2      	beq.n	1a7ba <smp_pairing_complete+0x4e>
   1a854:	4623      	mov	r3, r4
   1a856:	68e4      	ldr	r4, [r4, #12]
   1a858:	685b      	ldr	r3, [r3, #4]
   1a85a:	2c00      	cmp	r4, #0
   1a85c:	d1f3      	bne.n	1a846 <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   1a85e:	2b00      	cmp	r3, #0
   1a860:	d1f3      	bne.n	1a84a <smp_pairing_complete+0xde>
   1a862:	e7aa      	b.n	1a7ba <smp_pairing_complete+0x4e>
}
   1a864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a866:	bf00      	nop
   1a868:	200020c8 	.word	0x200020c8
   1a86c:	0002a43b 	.word	0x0002a43b
   1a870:	0002a42a 	.word	0x0002a42a

0001a874 <smp_error>:
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1a874:	1d03      	adds	r3, r0, #4
{
   1a876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a878:	4606      	mov	r6, r0
   1a87a:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1a87c:	4618      	mov	r0, r3
   1a87e:	2102      	movs	r1, #2
   1a880:	f00b fafa 	bl	25e78 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1a884:	4604      	mov	r4, r0
   1a886:	b120      	cbz	r0, 1a892 <smp_error+0x1e>
   1a888:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1a88c:	fab4 f484 	clz	r4, r4
   1a890:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1a892:	2103      	movs	r1, #3
   1a894:	4618      	mov	r0, r3
   1a896:	f00b faef 	bl	25e78 <atomic_test_bit>
   1a89a:	b180      	cbz	r0, 1a8be <smp_error+0x4a>
		smp_pairing_complete(smp, reason);
   1a89c:	4639      	mov	r1, r7
   1a89e:	4630      	mov	r0, r6
   1a8a0:	f7ff ff64 	bl	1a76c <smp_pairing_complete>
	if (remote_already_completed) {
   1a8a4:	b1c4      	cbz	r4, 1a8d8 <smp_error+0x64>
		BT_WARN("SMP does not allow a pairing failure at this point. Known issue. "
   1a8a6:	481a      	ldr	r0, [pc, #104]	; (1a910 <smp_error+0x9c>)
   1a8a8:	2157      	movs	r1, #87	; 0x57
   1a8aa:	f009 f8ab 	bl	23a04 <z_log_minimal_printk>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1a8ae:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1a8b2:	2105      	movs	r1, #5
   1a8b4:	f00a faf2 	bl	24e9c <bt_conn_disconnect>
		return 0;
   1a8b8:	2000      	movs	r0, #0
}
   1a8ba:	b003      	add	sp, #12
   1a8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1a8be:	2101      	movs	r1, #1
   1a8c0:	4618      	mov	r0, r3
   1a8c2:	f00b fad9 	bl	25e78 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1a8c6:	2800      	cmp	r0, #0
   1a8c8:	d1e8      	bne.n	1a89c <smp_error+0x28>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1a8ca:	210f      	movs	r1, #15
   1a8cc:	4618      	mov	r0, r3
   1a8ce:	f00b fad3 	bl	25e78 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1a8d2:	2800      	cmp	r0, #0
   1a8d4:	d1e2      	bne.n	1a89c <smp_error+0x28>
   1a8d6:	e7e5      	b.n	1a8a4 <smp_error+0x30>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1a8d8:	2105      	movs	r1, #5
   1a8da:	4630      	mov	r0, r6
   1a8dc:	f00b fbd5 	bl	2608a <smp_create_pdu.constprop.0>
	if (!buf) {
   1a8e0:	4605      	mov	r5, r0
   1a8e2:	b190      	cbz	r0, 1a90a <smp_error+0x96>
   1a8e4:	2101      	movs	r1, #1
   1a8e6:	3008      	adds	r0, #8
   1a8e8:	f001 f930 	bl	1bb4c <net_buf_simple_add>
	rsp->reason = reason;
   1a8ec:	7007      	strb	r7, [r0, #0]
   1a8ee:	9400      	str	r4, [sp, #0]
   1a8f0:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1a8f4:	4623      	mov	r3, r4
   1a8f6:	462a      	mov	r2, r5
   1a8f8:	2106      	movs	r1, #6
   1a8fa:	f00a fbba 	bl	25072 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1a8fe:	2800      	cmp	r0, #0
   1a900:	d0da      	beq.n	1a8b8 <smp_error+0x44>
		net_buf_unref(buf);
   1a902:	4628      	mov	r0, r5
   1a904:	f001 f81c 	bl	1b940 <net_buf_unref>
   1a908:	e7d6      	b.n	1a8b8 <smp_error+0x44>
		return -ENOBUFS;
   1a90a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a90e:	e7d4      	b.n	1a8ba <smp_error+0x46>
   1a910:	0002a193 	.word	0x0002a193

0001a914 <bt_smp_recv>:
{
   1a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1a916:	898b      	ldrh	r3, [r1, #12]
{
   1a918:	4607      	mov	r7, r0
   1a91a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1a91c:	b92b      	cbnz	r3, 1a92a <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1a91e:	4828      	ldr	r0, [pc, #160]	; (1a9c0 <bt_smp_recv+0xac>)
   1a920:	2145      	movs	r1, #69	; 0x45
   1a922:	f009 f86f 	bl	23a04 <z_log_minimal_printk>
}
   1a926:	2000      	movs	r0, #0
   1a928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a92a:	2101      	movs	r1, #1
   1a92c:	f105 0008 	add.w	r0, r5, #8
   1a930:	f001 f8f2 	bl	1bb18 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1a934:	2104      	movs	r1, #4
   1a936:	4606      	mov	r6, r0
   1a938:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   1a93c:	f00b fa9c 	bl	25e78 <atomic_test_bit>
   1a940:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   1a944:	7832      	ldrb	r2, [r6, #0]
   1a946:	b120      	cbz	r0, 1a952 <bt_smp_recv+0x3e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1a948:	481e      	ldr	r0, [pc, #120]	; (1a9c4 <bt_smp_recv+0xb0>)
   1a94a:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1a94c:	f009 f85a 	bl	23a04 <z_log_minimal_printk>
		return 0;
   1a950:	e7e9      	b.n	1a926 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1a952:	2a0e      	cmp	r2, #14
   1a954:	d902      	bls.n	1a95c <bt_smp_recv+0x48>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1a956:	481c      	ldr	r0, [pc, #112]	; (1a9c8 <bt_smp_recv+0xb4>)
   1a958:	2157      	movs	r1, #87	; 0x57
   1a95a:	e7f7      	b.n	1a94c <bt_smp_recv+0x38>
	if (!handlers[hdr->code].func) {
   1a95c:	4f1b      	ldr	r7, [pc, #108]	; (1a9cc <bt_smp_recv+0xb8>)
   1a95e:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1a962:	b943      	cbnz	r3, 1a976 <bt_smp_recv+0x62>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1a964:	2157      	movs	r1, #87	; 0x57
   1a966:	481a      	ldr	r0, [pc, #104]	; (1a9d0 <bt_smp_recv+0xbc>)
   1a968:	f009 f84c 	bl	23a04 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1a96c:	2107      	movs	r1, #7
		smp_error(smp, err);
   1a96e:	4620      	mov	r0, r4
   1a970:	f7ff ff80 	bl	1a874 <smp_error>
   1a974:	e7d7      	b.n	1a926 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1a976:	4611      	mov	r1, r2
   1a978:	4620      	mov	r0, r4
   1a97a:	f00b fc02 	bl	26182 <atomic_test_and_clear_bit>
   1a97e:	7833      	ldrb	r3, [r6, #0]
   1a980:	b948      	cbnz	r0, 1a996 <bt_smp_recv+0x82>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1a982:	461a      	mov	r2, r3
   1a984:	4813      	ldr	r0, [pc, #76]	; (1a9d4 <bt_smp_recv+0xc0>)
   1a986:	2157      	movs	r1, #87	; 0x57
   1a988:	f009 f83c 	bl	23a04 <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1a98c:	7833      	ldrb	r3, [r6, #0]
   1a98e:	2b05      	cmp	r3, #5
   1a990:	d0c9      	beq.n	1a926 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a992:	2108      	movs	r1, #8
   1a994:	e7eb      	b.n	1a96e <bt_smp_recv+0x5a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1a996:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1a99a:	89aa      	ldrh	r2, [r5, #12]
   1a99c:	7909      	ldrb	r1, [r1, #4]
   1a99e:	4291      	cmp	r1, r2
   1a9a0:	d005      	beq.n	1a9ae <bt_smp_recv+0x9a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1a9a2:	2145      	movs	r1, #69	; 0x45
   1a9a4:	480c      	ldr	r0, [pc, #48]	; (1a9d8 <bt_smp_recv+0xc4>)
   1a9a6:	f009 f82d 	bl	23a04 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1a9aa:	210a      	movs	r1, #10
   1a9ac:	e7df      	b.n	1a96e <bt_smp_recv+0x5a>
	err = handlers[hdr->code].func(smp, buf);
   1a9ae:	4629      	mov	r1, r5
   1a9b0:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1a9b4:	4620      	mov	r0, r4
   1a9b6:	4798      	blx	r3
	if (err) {
   1a9b8:	4601      	mov	r1, r0
   1a9ba:	2800      	cmp	r0, #0
   1a9bc:	d0b3      	beq.n	1a926 <bt_smp_recv+0x12>
   1a9be:	e7d6      	b.n	1a96e <bt_smp_recv+0x5a>
   1a9c0:	0002a1f0 	.word	0x0002a1f0
   1a9c4:	0002a210 	.word	0x0002a210
   1a9c8:	0002a246 	.word	0x0002a246
   1a9cc:	00027a98 	.word	0x00027a98
   1a9d0:	0002a26d 	.word	0x0002a26d
   1a9d4:	0002a28c 	.word	0x0002a28c
   1a9d8:	00029b39 	.word	0x00029b39

0001a9dc <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1a9dc:	4b0f      	ldr	r3, [pc, #60]	; (1aa1c <bt_smp_pkey_ready+0x40>)
{
   1a9de:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1a9e0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1a9e2:	b928      	cbnz	r0, 1a9f0 <bt_smp_pkey_ready+0x14>
}
   1a9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1a9e8:	480d      	ldr	r0, [pc, #52]	; (1aa20 <bt_smp_pkey_ready+0x44>)
   1a9ea:	2157      	movs	r1, #87	; 0x57
   1a9ec:	f009 b80a 	b.w	23a04 <z_log_minimal_printk>
		err = smp_public_key_periph(smp);
   1a9f0:	4c0c      	ldr	r4, [pc, #48]	; (1aa24 <bt_smp_pkey_ready+0x48>)
	z_impl_k_sem_give(sem);
   1a9f2:	480d      	ldr	r0, [pc, #52]	; (1aa28 <bt_smp_pkey_ready+0x4c>)
   1a9f4:	f005 fe6c 	bl	206d0 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a9f8:	f3bf 8f5b 	dmb	ish
   1a9fc:	f854 3904 	ldr.w	r3, [r4], #-4
   1aa00:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1aa04:	065b      	lsls	r3, r3, #25
   1aa06:	d507      	bpl.n	1aa18 <bt_smp_pkey_ready+0x3c>
		err = smp_public_key_periph(smp);
   1aa08:	4620      	mov	r0, r4
   1aa0a:	f7ff f8df 	bl	19bcc <smp_public_key_periph>
		if (err) {
   1aa0e:	4601      	mov	r1, r0
   1aa10:	b110      	cbz	r0, 1aa18 <bt_smp_pkey_ready+0x3c>
			smp_error(smp, err);
   1aa12:	4620      	mov	r0, r4
   1aa14:	f7ff ff2e 	bl	1a874 <smp_error>
}
   1aa18:	bd10      	pop	{r4, pc}
   1aa1a:	bf00      	nop
   1aa1c:	2000220c 	.word	0x2000220c
   1aa20:	0002a2ac 	.word	0x0002a2ac
   1aa24:	20001b0c 	.word	0x20001b0c
   1aa28:	20000910 	.word	0x20000910

0001aa2c <smp_ident_addr_info>:
{
   1aa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1aa30:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1aa34:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1aa36:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1aa3a:	f023 0302 	bic.w	r3, r3, #2
   1aa3e:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1aa42:	783b      	ldrb	r3, [r7, #0]
{
   1aa44:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1aa46:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1aa4a:	b1bb      	cbz	r3, 1aa7c <smp_ident_addr_info+0x50>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1aa4c:	79bb      	ldrb	r3, [r7, #6]
   1aa4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1aa52:	2bc0      	cmp	r3, #192	; 0xc0
   1aa54:	d012      	beq.n	1aa7c <smp_ident_addr_info+0x50>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1aa56:	4638      	mov	r0, r7
   1aa58:	f7f8 ffd2 	bl	13a00 <bt_addr_le_str>
   1aa5c:	2145      	movs	r1, #69	; 0x45
   1aa5e:	4602      	mov	r2, r0
   1aa60:	484e      	ldr	r0, [pc, #312]	; (1ab9c <smp_ident_addr_info+0x170>)
   1aa62:	f008 ffcf 	bl	23a04 <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1aa66:	4640      	mov	r0, r8
   1aa68:	f7f8 ffca 	bl	13a00 <bt_addr_le_str>
   1aa6c:	2145      	movs	r1, #69	; 0x45
   1aa6e:	4602      	mov	r2, r0
   1aa70:	484b      	ldr	r0, [pc, #300]	; (1aba0 <smp_ident_addr_info+0x174>)
   1aa72:	f008 ffc7 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1aa76:	200a      	movs	r0, #10
}
   1aa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1aa7c:	2207      	movs	r2, #7
   1aa7e:	4639      	mov	r1, r7
   1aa80:	4640      	mov	r0, r8
   1aa82:	f009 fe24 	bl	246ce <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1aa86:	b168      	cbz	r0, 1aaa4 <smp_ident_addr_info+0x78>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1aa88:	7a28      	ldrb	r0, [r5, #8]
   1aa8a:	4639      	mov	r1, r7
   1aa8c:	f000 fbd8 	bl	1b240 <bt_keys_find_addr>
		if (keys) {
   1aa90:	4606      	mov	r6, r0
   1aa92:	b138      	cbz	r0, 1aaa4 <smp_ident_addr_info+0x78>
			if (!update_keys_check(smp, keys)) {
   1aa94:	4601      	mov	r1, r0
   1aa96:	4620      	mov	r0, r4
   1aa98:	f00b f9f7 	bl	25e8a <update_keys_check>
   1aa9c:	b1b8      	cbz	r0, 1aace <smp_ident_addr_info+0xa2>
			bt_keys_clear(keys);
   1aa9e:	4630      	mov	r0, r6
   1aaa0:	f000 fc26 	bl	1b2f0 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1aaa4:	210d      	movs	r1, #13
   1aaa6:	1d20      	adds	r0, r4, #4
   1aaa8:	f00b f9e6 	bl	25e78 <atomic_test_bit>
   1aaac:	2800      	cmp	r0, #0
   1aaae:	d064      	beq.n	1ab7a <smp_ident_addr_info+0x14e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1aab0:	7a29      	ldrb	r1, [r5, #8]
   1aab2:	4642      	mov	r2, r8
   1aab4:	2002      	movs	r0, #2
   1aab6:	f000 fbf9 	bl	1b2ac <bt_keys_get_type>
		if (!keys) {
   1aaba:	4606      	mov	r6, r0
   1aabc:	b948      	cbnz	r0, 1aad2 <smp_ident_addr_info+0xa6>
			BT_ERR("Unable to get keys for %s",
   1aabe:	4640      	mov	r0, r8
   1aac0:	f7f8 ff9e 	bl	13a00 <bt_addr_le_str>
   1aac4:	2145      	movs	r1, #69	; 0x45
   1aac6:	4602      	mov	r2, r0
   1aac8:	4836      	ldr	r0, [pc, #216]	; (1aba4 <smp_ident_addr_info+0x178>)
   1aaca:	f008 ff9b 	bl	23a04 <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1aace:	2008      	movs	r0, #8
   1aad0:	e7d2      	b.n	1aa78 <smp_ident_addr_info+0x4c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1aad2:	78eb      	ldrb	r3, [r5, #3]
   1aad4:	bba3      	cbnz	r3, 1ab40 <smp_ident_addr_info+0x114>
			dst = &conn->le.resp_addr;
   1aad6:	f105 019e 	add.w	r1, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1aada:	780b      	ldrb	r3, [r1, #0]
   1aadc:	2b01      	cmp	r3, #1
   1aade:	d120      	bne.n	1ab22 <smp_ident_addr_info+0xf6>
		if (bt_addr_le_is_rpa(dst)) {
   1aae0:	798b      	ldrb	r3, [r1, #6]
   1aae2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1aae6:	2b40      	cmp	r3, #64	; 0x40
   1aae8:	d11b      	bne.n	1ab22 <smp_ident_addr_info+0xf6>
	memcpy(dst, src, sizeof(*dst));
   1aaea:	2206      	movs	r2, #6
   1aaec:	3101      	adds	r1, #1
   1aaee:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1aaf2:	f009 fdfc 	bl	246ee <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1aaf6:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1aafa:	b193      	cbz	r3, 1ab22 <smp_ident_addr_info+0xf6>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1aafc:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1ab00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ab04:	2bc0      	cmp	r3, #192	; 0xc0
   1ab06:	d00c      	beq.n	1ab22 <smp_ident_addr_info+0xf6>
	memcpy(dst, src, sizeof(*dst));
   1ab08:	2207      	movs	r2, #7
   1ab0a:	4639      	mov	r1, r7
   1ab0c:	1c70      	adds	r0, r6, #1
   1ab0e:	f009 fdee 	bl	246ee <memcpy>
   1ab12:	2207      	movs	r2, #7
   1ab14:	4639      	mov	r1, r7
   1ab16:	4640      	mov	r0, r8
   1ab18:	f009 fde9 	bl	246ee <memcpy>
				bt_conn_identity_resolved(conn);
   1ab1c:	4628      	mov	r0, r5
   1ab1e:	f7fb fedb 	bl	168d8 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1ab22:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ab26:	079a      	lsls	r2, r3, #30
   1ab28:	d50d      	bpl.n	1ab46 <smp_ident_addr_info+0x11a>
   1ab2a:	491f      	ldr	r1, [pc, #124]	; (1aba8 <smp_ident_addr_info+0x17c>)
   1ab2c:	481f      	ldr	r0, [pc, #124]	; (1abac <smp_ident_addr_info+0x180>)
   1ab2e:	f640 727d 	movw	r2, #3965	; 0xf7d
   1ab32:	f008 ff59 	bl	239e8 <assert_print>
   1ab36:	f640 717d 	movw	r1, #3965	; 0xf7d
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1ab3a:	481b      	ldr	r0, [pc, #108]	; (1aba8 <smp_ident_addr_info+0x17c>)
   1ab3c:	f008 ff4d 	bl	239da <assert_post_action>
			dst = &conn->le.init_addr;
   1ab40:	f105 0197 	add.w	r1, r5, #151	; 0x97
   1ab44:	e7c9      	b.n	1aada <smp_ident_addr_info+0xae>
	conflict = bt_id_find_conflict(new_bond);
   1ab46:	4630      	mov	r0, r6
   1ab48:	f7fa fb30 	bl	151ac <bt_id_find_conflict>
	if (conflict) {
   1ab4c:	b128      	cbz	r0, 1ab5a <smp_ident_addr_info+0x12e>
		BT_WARN("Refusing new pairing. The old bond must be unpaired first.");
   1ab4e:	4818      	ldr	r0, [pc, #96]	; (1abb0 <smp_ident_addr_info+0x184>)
   1ab50:	2157      	movs	r1, #87	; 0x57
   1ab52:	f008 ff57 	bl	23a04 <z_log_minimal_printk>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ab56:	2003      	movs	r0, #3
   1ab58:	e78e      	b.n	1aa78 <smp_ident_addr_info+0x4c>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1ab5a:	4630      	mov	r0, r6
   1ab5c:	f7fa fb26 	bl	151ac <bt_id_find_conflict>
   1ab60:	b140      	cbz	r0, 1ab74 <smp_ident_addr_info+0x148>
   1ab62:	4911      	ldr	r1, [pc, #68]	; (1aba8 <smp_ident_addr_info+0x17c>)
   1ab64:	4811      	ldr	r0, [pc, #68]	; (1abac <smp_ident_addr_info+0x180>)
   1ab66:	f640 7299 	movw	r2, #3993	; 0xf99
   1ab6a:	f008 ff3d 	bl	239e8 <assert_print>
   1ab6e:	f640 7199 	movw	r1, #3993	; 0xf99
   1ab72:	e7e2      	b.n	1ab3a <smp_ident_addr_info+0x10e>
	bt_id_add(new_bond);
   1ab74:	4630      	mov	r0, r6
   1ab76:	f7fa fb29 	bl	151cc <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ab7a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ab7e:	075b      	lsls	r3, r3, #29
   1ab80:	d503      	bpl.n	1ab8a <smp_ident_addr_info+0x15e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ab82:	210a      	movs	r1, #10
   1ab84:	4620      	mov	r0, r4
   1ab86:	f00b fa6c 	bl	26062 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ab8a:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1ab8e:	b109      	cbz	r1, 1ab94 <smp_ident_addr_info+0x168>
	return 0;
   1ab90:	2000      	movs	r0, #0
   1ab92:	e771      	b.n	1aa78 <smp_ident_addr_info+0x4c>
		smp_pairing_complete(smp, 0);
   1ab94:	4620      	mov	r0, r4
   1ab96:	f7ff fde9 	bl	1a76c <smp_pairing_complete>
   1ab9a:	e7f9      	b.n	1ab90 <smp_ident_addr_info+0x164>
   1ab9c:	0002a2ca 	.word	0x0002a2ca
   1aba0:	0002a2e3 	.word	0x0002a2e3
   1aba4:	0002a038 	.word	0x0002a038
   1aba8:	0002a2f0 	.word	0x0002a2f0
   1abac:	000280bd 	.word	0x000280bd
   1abb0:	0002a31f 	.word	0x0002a31f

0001abb4 <smp_central_ident>:
{
   1abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abb6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1abb8:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1abbc:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1abbe:	3004      	adds	r0, #4
   1abc0:	210d      	movs	r1, #13
   1abc2:	f00b f959 	bl	25e78 <atomic_test_bit>
   1abc6:	b1f0      	cbz	r0, 1ac06 <smp_central_ident+0x52>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1abc8:	f105 0790 	add.w	r7, r5, #144	; 0x90
   1abcc:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1abce:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1abd0:	463a      	mov	r2, r7
   1abd2:	2004      	movs	r0, #4
   1abd4:	f000 fb6a 	bl	1b2ac <bt_keys_get_type>
		if (!keys) {
   1abd8:	4605      	mov	r5, r0
   1abda:	b948      	cbnz	r0, 1abf0 <smp_central_ident+0x3c>
			BT_ERR("Unable to get keys for %s",
   1abdc:	4638      	mov	r0, r7
   1abde:	f7f8 ff0f 	bl	13a00 <bt_addr_le_str>
   1abe2:	2145      	movs	r1, #69	; 0x45
   1abe4:	4602      	mov	r2, r0
   1abe6:	4814      	ldr	r0, [pc, #80]	; (1ac38 <smp_central_ident+0x84>)
   1abe8:	f008 ff0c 	bl	23a04 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1abec:	2008      	movs	r0, #8
}
   1abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1abf0:	2202      	movs	r2, #2
   1abf2:	4631      	mov	r1, r6
   1abf4:	3018      	adds	r0, #24
   1abf6:	f009 fd7a 	bl	246ee <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1abfa:	2208      	movs	r2, #8
   1abfc:	1cb1      	adds	r1, r6, #2
   1abfe:	f105 0010 	add.w	r0, r5, #16
   1ac02:	f009 fd74 	bl	246ee <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1ac06:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ac0a:	f023 0201 	bic.w	r2, r3, #1
   1ac0e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ac12:	079a      	lsls	r2, r3, #30
   1ac14:	d508      	bpl.n	1ac28 <smp_central_ident+0x74>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ac16:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ac18:	4620      	mov	r0, r4
   1ac1a:	f00b fa22 	bl	26062 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ac1e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1ac22:	b129      	cbz	r1, 1ac30 <smp_central_ident+0x7c>
	return 0;
   1ac24:	2000      	movs	r0, #0
   1ac26:	e7e2      	b.n	1abee <smp_central_ident+0x3a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ac28:	075b      	lsls	r3, r3, #29
   1ac2a:	d5f8      	bpl.n	1ac1e <smp_central_ident+0x6a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ac2c:	210a      	movs	r1, #10
   1ac2e:	e7f3      	b.n	1ac18 <smp_central_ident+0x64>
		smp_pairing_complete(smp, 0);
   1ac30:	4620      	mov	r0, r4
   1ac32:	f7ff fd9b 	bl	1a76c <smp_pairing_complete>
   1ac36:	e7f5      	b.n	1ac24 <smp_central_ident+0x70>
   1ac38:	0002a038 	.word	0x0002a038

0001ac3c <smp_pairing_failed>:
{
   1ac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac40:	460e      	mov	r6, r1
   1ac42:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ac44:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ac48:	f7fe fe3e 	bl	198c8 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1ac4c:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ac4e:	2145      	movs	r1, #69	; 0x45
   1ac50:	7832      	ldrb	r2, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ac52:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ac54:	1d27      	adds	r7, r4, #4
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ac56:	480e      	ldr	r0, [pc, #56]	; (1ac90 <smp_pairing_failed+0x54>)
   1ac58:	f008 fed4 	bl	23a04 <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ac5c:	210a      	movs	r1, #10
   1ac5e:	4638      	mov	r0, r7
   1ac60:	f00b fa8f 	bl	26182 <atomic_test_and_clear_bit>
   1ac64:	b138      	cbz	r0, 1ac76 <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ac66:	b96d      	cbnz	r5, 1ac84 <smp_pairing_failed+0x48>
	smp_pairing_complete(smp, req->reason);
   1ac68:	4620      	mov	r0, r4
   1ac6a:	7831      	ldrb	r1, [r6, #0]
   1ac6c:	f7ff fd7e 	bl	1a76c <smp_pairing_complete>
}
   1ac70:	2000      	movs	r0, #0
   1ac72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1ac76:	210b      	movs	r1, #11
   1ac78:	4638      	mov	r0, r7
   1ac7a:	f00b fa82 	bl	26182 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ac7e:	2800      	cmp	r0, #0
   1ac80:	d1f1      	bne.n	1ac66 <smp_pairing_failed+0x2a>
   1ac82:	e7f1      	b.n	1ac68 <smp_pairing_failed+0x2c>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ac84:	692b      	ldr	r3, [r5, #16]
   1ac86:	2b00      	cmp	r3, #0
   1ac88:	d0ee      	beq.n	1ac68 <smp_pairing_failed+0x2c>
			smp_auth_cb->cancel(conn);
   1ac8a:	4640      	mov	r0, r8
   1ac8c:	4798      	blx	r3
   1ac8e:	e7eb      	b.n	1ac68 <smp_pairing_failed+0x2c>
   1ac90:	0002a35f 	.word	0x0002a35f

0001ac94 <bt_smp_encrypt_change>:
{
   1ac94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1ac98:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ac9a:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1ac9e:	b088      	sub	sp, #32
   1aca0:	4604      	mov	r4, r0
   1aca2:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1aca4:	4630      	mov	r0, r6
   1aca6:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1aca8:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1acac:	f00b fa69 	bl	26182 <atomic_test_and_clear_bit>
   1acb0:	2800      	cmp	r0, #0
   1acb2:	f000 8085 	beq.w	1adc0 <bt_smp_encrypt_change+0x12c>
	if (hci_status) {
   1acb6:	b1d7      	cbz	r7, 1acee <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1acb8:	2103      	movs	r1, #3
   1acba:	4630      	mov	r0, r6
   1acbc:	f00b f8dc 	bl	25e78 <atomic_test_bit>
   1acc0:	2800      	cmp	r0, #0
   1acc2:	d07d      	beq.n	1adc0 <bt_smp_encrypt_change+0x12c>
			uint8_t smp_err = smp_err_get(
   1acc4:	4638      	mov	r0, r7
   1acc6:	f7f9 fe23 	bl	14910 <bt_security_err_get>
	switch (auth_err) {
   1acca:	3801      	subs	r0, #1
   1accc:	b2c0      	uxtb	r0, r0
   1acce:	2808      	cmp	r0, #8
   1acd0:	bf9a      	itte	ls
   1acd2:	4b6a      	ldrls	r3, [pc, #424]	; (1ae7c <bt_smp_encrypt_change+0x1e8>)
   1acd4:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1acd6:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1acd8:	2102      	movs	r1, #2
   1acda:	4630      	mov	r0, r6
   1acdc:	f00b f9c1 	bl	26062 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1ace0:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1ace2:	4628      	mov	r0, r5
}
   1ace4:	b008      	add	sp, #32
   1ace6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1acea:	f7ff bd3f 	b.w	1a76c <smp_pairing_complete>
	if (!conn->encrypt) {
   1acee:	f898 300b 	ldrb.w	r3, [r8, #11]
   1acf2:	2b00      	cmp	r3, #0
   1acf4:	d064      	beq.n	1adc0 <bt_smp_encrypt_change+0x12c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1acf6:	2103      	movs	r1, #3
   1acf8:	4630      	mov	r0, r6
   1acfa:	f00b f8bd 	bl	25e78 <atomic_test_bit>
   1acfe:	b928      	cbnz	r0, 1ad0c <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   1ad00:	4628      	mov	r0, r5
}
   1ad02:	b008      	add	sp, #32
   1ad04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   1ad08:	f00b ba51 	b.w	261ae <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ad0c:	2105      	movs	r1, #5
   1ad0e:	4630      	mov	r0, r6
   1ad10:	f00b f8b2 	bl	25e78 <atomic_test_bit>
   1ad14:	b1b8      	cbz	r0, 1ad46 <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1ad16:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1ad1a:	071b      	lsls	r3, r3, #28
   1ad1c:	d507      	bpl.n	1ad2e <bt_smp_encrypt_change+0x9a>
   1ad1e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1ad22:	071f      	lsls	r7, r3, #28
   1ad24:	d503      	bpl.n	1ad2e <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1ad26:	2111      	movs	r1, #17
   1ad28:	4630      	mov	r0, r6
   1ad2a:	f00b f99a 	bl	26062 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1ad2e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1ad32:	f023 0308 	bic.w	r3, r3, #8
   1ad36:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1ad3a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1ad3e:	f023 0308 	bic.w	r3, r3, #8
   1ad42:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1ad46:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1ad4a:	07d8      	lsls	r0, r3, #31
   1ad4c:	d517      	bpl.n	1ad7e <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1ad4e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ad50:	4628      	mov	r0, r5
   1ad52:	f00b f986 	bl	26062 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ad56:	2102      	movs	r1, #2
   1ad58:	4630      	mov	r0, r6
   1ad5a:	f00b f982 	bl	26062 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1ad5e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1ad60:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   1ad64:	b99a      	cbnz	r2, 1ad8e <bt_smp_encrypt_change+0xfa>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1ad66:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1ad6a:	f7f8 fe49 	bl	13a00 <bt_addr_le_str>
   1ad6e:	4602      	mov	r2, r0
   1ad70:	4843      	ldr	r0, [pc, #268]	; (1ae80 <bt_smp_encrypt_change+0x1ec>)
   1ad72:	2145      	movs	r1, #69	; 0x45
}
   1ad74:	b008      	add	sp, #32
   1ad76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1ad7a:	f008 be43 	b.w	23a04 <z_log_minimal_printk>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ad7e:	0799      	lsls	r1, r3, #30
   1ad80:	d501      	bpl.n	1ad86 <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ad82:	2108      	movs	r1, #8
   1ad84:	e7e4      	b.n	1ad50 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ad86:	075a      	lsls	r2, r3, #29
   1ad88:	d5e5      	bpl.n	1ad56 <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ad8a:	210a      	movs	r1, #10
   1ad8c:	e7e0      	b.n	1ad50 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ad8e:	2105      	movs	r1, #5
   1ad90:	f00b f872 	bl	25e78 <atomic_test_bit>
   1ad94:	b980      	cbnz	r0, 1adb8 <bt_smp_encrypt_change+0x124>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1ad96:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1ad9a:	07db      	lsls	r3, r3, #31
   1ad9c:	d50c      	bpl.n	1adb8 <bt_smp_encrypt_change+0x124>
	struct bt_keys *keys = conn->le.keys;
   1ad9e:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ada0:	211a      	movs	r1, #26
   1ada2:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1ada4:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ada8:	f003 fc38 	bl	1e61c <bt_rand>
   1adac:	4681      	mov	r9, r0
   1adae:	b150      	cbz	r0, 1adc6 <bt_smp_encrypt_change+0x132>
			BT_ERR("Unable to get random bytes");
   1adb0:	4834      	ldr	r0, [pc, #208]	; (1ae84 <bt_smp_encrypt_change+0x1f0>)
   1adb2:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1adb4:	f008 fe26 	bl	23a04 <z_log_minimal_printk>
	if (!smp->local_dist && !smp->remote_dist) {
   1adb8:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1adbc:	2900      	cmp	r1, #0
   1adbe:	d090      	beq.n	1ace2 <bt_smp_encrypt_change+0x4e>
}
   1adc0:	b008      	add	sp, #32
   1adc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1adc6:	2106      	movs	r1, #6
   1adc8:	4628      	mov	r0, r5
   1adca:	f00b f95e 	bl	2608a <smp_create_pdu.constprop.0>
		if (!buf) {
   1adce:	4680      	mov	r8, r0
   1add0:	b910      	cbnz	r0, 1add8 <bt_smp_encrypt_change+0x144>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1add2:	482d      	ldr	r0, [pc, #180]	; (1ae88 <bt_smp_encrypt_change+0x1f4>)
   1add4:	2145      	movs	r1, #69	; 0x45
   1add6:	e7ed      	b.n	1adb4 <bt_smp_encrypt_change+0x120>
	return net_buf_simple_add(&buf->b, len);
   1add8:	2110      	movs	r1, #16
   1adda:	3008      	adds	r0, #8
   1addc:	f000 feb6 	bl	1bb4c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1ade0:	7b3a      	ldrb	r2, [r7, #12]
   1ade2:	a901      	add	r1, sp, #4
   1ade4:	4682      	mov	sl, r0
   1ade6:	f009 fc82 	bl	246ee <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1adea:	7b38      	ldrb	r0, [r7, #12]
   1adec:	280f      	cmp	r0, #15
   1adee:	d805      	bhi.n	1adfc <bt_smp_encrypt_change+0x168>
			(void)memset(info->ltk + keys->enc_size, 0,
   1adf0:	f1c0 0210 	rsb	r2, r0, #16
   1adf4:	4649      	mov	r1, r9
   1adf6:	4450      	add	r0, sl
   1adf8:	f009 fc84 	bl	24704 <memset>
		smp_send(smp, buf, NULL, NULL);
   1adfc:	4641      	mov	r1, r8
   1adfe:	2200      	movs	r2, #0
   1ae00:	4628      	mov	r0, r5
   1ae02:	f00b f892 	bl	25f2a <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1ae06:	2107      	movs	r1, #7
   1ae08:	4628      	mov	r0, r5
   1ae0a:	f00b f93e 	bl	2608a <smp_create_pdu.constprop.0>
		if (!buf) {
   1ae0e:	4680      	mov	r8, r0
   1ae10:	b910      	cbnz	r0, 1ae18 <bt_smp_encrypt_change+0x184>
			BT_ERR("Unable to allocate Central Ident buffer");
   1ae12:	481e      	ldr	r0, [pc, #120]	; (1ae8c <bt_smp_encrypt_change+0x1f8>)
   1ae14:	2145      	movs	r1, #69	; 0x45
   1ae16:	e7cd      	b.n	1adb4 <bt_smp_encrypt_change+0x120>
   1ae18:	210a      	movs	r1, #10
   1ae1a:	3008      	adds	r0, #8
   1ae1c:	f000 fe96 	bl	1bb4c <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1ae20:	2208      	movs	r2, #8
   1ae22:	4681      	mov	r9, r0
   1ae24:	a905      	add	r1, sp, #20
   1ae26:	3002      	adds	r0, #2
   1ae28:	f009 fc61 	bl	246ee <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1ae2c:	2202      	movs	r2, #2
   1ae2e:	a907      	add	r1, sp, #28
   1ae30:	4648      	mov	r0, r9
   1ae32:	f009 fc5c 	bl	246ee <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1ae36:	4641      	mov	r1, r8
   1ae38:	4628      	mov	r0, r5
   1ae3a:	4a15      	ldr	r2, [pc, #84]	; (1ae90 <bt_smp_encrypt_change+0x1fc>)
   1ae3c:	f00b f875 	bl	25f2a <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ae40:	210d      	movs	r1, #13
   1ae42:	4630      	mov	r0, r6
   1ae44:	f00b f818 	bl	25e78 <atomic_test_bit>
   1ae48:	2800      	cmp	r0, #0
   1ae4a:	d0b5      	beq.n	1adb8 <bt_smp_encrypt_change+0x124>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1ae4c:	4638      	mov	r0, r7
   1ae4e:	2101      	movs	r1, #1
   1ae50:	f000 fa16 	bl	1b280 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1ae54:	a901      	add	r1, sp, #4
   1ae56:	2210      	movs	r2, #16
   1ae58:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   1ae5c:	f009 fc47 	bl	246ee <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1ae60:	a905      	add	r1, sp, #20
   1ae62:	2208      	movs	r2, #8
   1ae64:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1ae68:	f009 fc41 	bl	246ee <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1ae6c:	2202      	movs	r2, #2
   1ae6e:	a907      	add	r1, sp, #28
   1ae70:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1ae74:	f009 fc3b 	bl	246ee <memcpy>
   1ae78:	e79e      	b.n	1adb8 <bt_smp_encrypt_change+0x124>
   1ae7a:	bf00      	nop
   1ae7c:	0002a432 	.word	0x0002a432
   1ae80:	0002a386 	.word	0x0002a386
   1ae84:	0002a3a0 	.word	0x0002a3a0
   1ae88:	0002a3c0 	.word	0x0002a3c0
   1ae8c:	0002a3ec 	.word	0x0002a3ec
   1ae90:	0001aebd 	.word	0x0001aebd

0001ae94 <smp_timeout>:
{
   1ae94:	b510      	push	{r4, lr}
	BT_ERR("SMP Timeout");
   1ae96:	2145      	movs	r1, #69	; 0x45
{
   1ae98:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1ae9a:	4807      	ldr	r0, [pc, #28]	; (1aeb8 <smp_timeout+0x24>)
   1ae9c:	f008 fdb2 	bl	23a04 <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1aea0:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1aea4:	2108      	movs	r1, #8
   1aea6:	f7ff fc61 	bl	1a76c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1aeaa:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
   1aeae:	2104      	movs	r1, #4
}
   1aeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1aeb4:	f00b b8d5 	b.w	26062 <atomic_set_bit>
   1aeb8:	0002a419 	.word	0x0002a419

0001aebc <smp_ident_sent>:
{
   1aebc:	b508      	push	{r3, lr}
	if (!err) {
   1aebe:	b9fa      	cbnz	r2, 1af00 <smp_ident_sent+0x44>
	if (conn->type == BT_CONN_TYPE_LE) {
   1aec0:	7883      	ldrb	r3, [r0, #2]
   1aec2:	2b01      	cmp	r3, #1
   1aec4:	d11c      	bne.n	1af00 <smp_ident_sent+0x44>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1aec6:	2106      	movs	r1, #6
   1aec8:	f00a f8ec 	bl	250a4 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1aecc:	b950      	cbnz	r0, 1aee4 <smp_ident_sent+0x28>
   1aece:	490d      	ldr	r1, [pc, #52]	; (1af04 <smp_ident_sent+0x48>)
   1aed0:	480d      	ldr	r0, [pc, #52]	; (1af08 <smp_ident_sent+0x4c>)
   1aed2:	f240 3245 	movw	r2, #837	; 0x345
   1aed6:	f008 fd87 	bl	239e8 <assert_print>
   1aeda:	480a      	ldr	r0, [pc, #40]	; (1af04 <smp_ident_sent+0x48>)
   1aedc:	f240 3145 	movw	r1, #837	; 0x345
   1aee0:	f008 fd7b 	bl	239da <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1aee4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1aee8:	f023 0301 	bic.w	r3, r3, #1
   1aeec:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1aef0:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1aef4:	b921      	cbnz	r1, 1af00 <smp_ident_sent+0x44>
}
   1aef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1aefa:	38ec      	subs	r0, #236	; 0xec
   1aefc:	f7ff bc36 	b.w	1a76c <smp_pairing_complete>
}
   1af00:	bd08      	pop	{r3, pc}
   1af02:	bf00      	nop
   1af04:	0002a2f0 	.word	0x0002a2f0
   1af08:	000280bd 	.word	0x000280bd

0001af0c <bt_smp_update_keys>:
{
   1af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af0e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1af10:	f7fe fd3c 	bl	1998c <smp_chan_get>
	if (!smp) {
   1af14:	4605      	mov	r5, r0
   1af16:	2800      	cmp	r0, #0
   1af18:	f000 8084 	beq.w	1b024 <bt_smp_update_keys+0x118>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1af1c:	1d06      	adds	r6, r0, #4
   1af1e:	2103      	movs	r1, #3
   1af20:	4630      	mov	r0, r6
   1af22:	f00a ffa9 	bl	25e78 <atomic_test_bit>
   1af26:	2800      	cmp	r0, #0
   1af28:	d07c      	beq.n	1b024 <bt_smp_update_keys+0x118>
	if (conn->le.keys) {
   1af2a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1af2e:	b108      	cbz	r0, 1af34 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1af30:	f000 f9de 	bl	1b2f0 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1af34:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1af38:	7a20      	ldrb	r0, [r4, #8]
   1af3a:	4639      	mov	r1, r7
   1af3c:	f000 f8c8 	bl	1b0d0 <bt_keys_get_addr>
   1af40:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1af44:	b968      	cbnz	r0, 1af62 <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
   1af46:	4638      	mov	r0, r7
   1af48:	f7f8 fd5a 	bl	13a00 <bt_addr_le_str>
   1af4c:	2145      	movs	r1, #69	; 0x45
   1af4e:	4602      	mov	r2, r0
   1af50:	4835      	ldr	r0, [pc, #212]	; (1b028 <bt_smp_update_keys+0x11c>)
   1af52:	f008 fd57 	bl	23a04 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1af56:	4628      	mov	r0, r5
   1af58:	2108      	movs	r1, #8
}
   1af5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1af5e:	f7ff bc89 	b.w	1a874 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1af62:	210e      	movs	r1, #14
   1af64:	4630      	mov	r0, r6
   1af66:	f00a ff87 	bl	25e78 <atomic_test_bit>
   1af6a:	b128      	cbz	r0, 1af78 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1af6c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1af70:	7b53      	ldrb	r3, [r2, #13]
   1af72:	f043 0302 	orr.w	r3, r3, #2
   1af76:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1af78:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1af7a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1af7e:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1af80:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1af82:	d83c      	bhi.n	1affe <bt_smp_update_keys+0xf2>
   1af84:	2a00      	cmp	r2, #0
   1af86:	d041      	beq.n	1b00c <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1af88:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1af8c:	7b53      	ldrb	r3, [r2, #13]
   1af8e:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1af92:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1af94:	7d2b      	ldrb	r3, [r5, #20]
   1af96:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1af98:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return MIN(req->max_key_size, rsp->max_key_size);
   1af9c:	428b      	cmp	r3, r1
   1af9e:	bf28      	it	cs
   1afa0:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1afa2:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1afa4:	2105      	movs	r1, #5
   1afa6:	4630      	mov	r0, r6
   1afa8:	f00a ff66 	bl	25e78 <atomic_test_bit>
   1afac:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1afb0:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1afb2:	b3a0      	cbz	r0, 1b01e <bt_smp_update_keys+0x112>
		conn->le.keys->flags |= BT_KEYS_SC;
   1afb4:	f042 0210 	orr.w	r2, r2, #16
   1afb8:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1afba:	210d      	movs	r1, #13
   1afbc:	4630      	mov	r0, r6
   1afbe:	f00a ff5b 	bl	25e78 <atomic_test_bit>
   1afc2:	b378      	cbz	r0, 1b024 <bt_smp_update_keys+0x118>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1afc4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1afc8:	2120      	movs	r1, #32
   1afca:	f000 f959 	bl	1b280 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1afce:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1afd2:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1afd6:	2210      	movs	r2, #16
   1afd8:	301a      	adds	r0, #26
   1afda:	f009 fb88 	bl	246ee <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1afde:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1afe2:	2208      	movs	r2, #8
   1afe4:	2100      	movs	r1, #0
   1afe6:	3010      	adds	r0, #16
   1afe8:	f009 fb8c 	bl	24704 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1afec:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1aff0:	2202      	movs	r2, #2
}
   1aff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1aff6:	2100      	movs	r1, #0
   1aff8:	3018      	adds	r0, #24
   1affa:	f009 bb83 	b.w	24704 <memset>
	switch (smp->method) {
   1affe:	3a05      	subs	r2, #5
   1b000:	2a01      	cmp	r2, #1
   1b002:	d803      	bhi.n	1b00c <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1b004:	f043 0320 	orr.w	r3, r3, #32
   1b008:	734b      	strb	r3, [r1, #13]
   1b00a:	e7bd      	b.n	1af88 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1b00c:	f023 0320 	bic.w	r3, r3, #32
   1b010:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1b012:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1b016:	7b53      	ldrb	r3, [r2, #13]
   1b018:	f023 0301 	bic.w	r3, r3, #1
   1b01c:	e7b9      	b.n	1af92 <bt_smp_update_keys+0x86>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1b01e:	f022 0210 	bic.w	r2, r2, #16
   1b022:	735a      	strb	r2, [r3, #13]
}
   1b024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b026:	bf00      	nop
   1b028:	0002a038 	.word	0x0002a038

0001b02c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1b02c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b02e:	4b07      	ldr	r3, [pc, #28]	; (1b04c <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1b030:	4807      	ldr	r0, [pc, #28]	; (1b050 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b032:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1b036:	f003 0306 	and.w	r3, r3, #6
   1b03a:	1f9a      	subs	r2, r3, #6
   1b03c:	4253      	negs	r3, r2
   1b03e:	4153      	adcs	r3, r2
   1b040:	4a04      	ldr	r2, [pc, #16]	; (1b054 <bt_smp_init+0x28>)
   1b042:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1b044:	f7fa fe66 	bl	15d14 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1b048:	2000      	movs	r0, #0
   1b04a:	bd08      	pop	{r3, pc}
   1b04c:	20000380 	.word	0x20000380
   1b050:	20000704 	.word	0x20000704
   1b054:	2000265f 	.word	0x2000265f

0001b058 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1b058:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1b05a:	b950      	cbnz	r0, 1b072 <id_add+0x1a>
   1b05c:	4907      	ldr	r1, [pc, #28]	; (1b07c <id_add+0x24>)
   1b05e:	4808      	ldr	r0, [pc, #32]	; (1b080 <id_add+0x28>)
   1b060:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
   1b064:	f008 fcc0 	bl	239e8 <assert_print>
   1b068:	4804      	ldr	r0, [pc, #16]	; (1b07c <id_add+0x24>)
   1b06a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   1b06e:	f008 fcb4 	bl	239da <assert_post_action>

	bt_id_add(keys);
}
   1b072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1b076:	f7fa b8a9 	b.w	151cc <bt_id_add>
   1b07a:	bf00      	nop
   1b07c:	0002a493 	.word	0x0002a493
   1b080:	000280bd 	.word	0x000280bd

0001b084 <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1b084:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b086:	4c0f      	ldr	r4, [pc, #60]	; (1b0c4 <bt_keys_get_addr.part.0+0x40>)
   1b088:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b08c:	4283      	cmp	r3, r0
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1b08e:	4605      	mov	r5, r0
   1b090:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b092:	d007      	beq.n	1b0a4 <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1b094:	490c      	ldr	r1, [pc, #48]	; (1b0c8 <bt_keys_get_addr.part.0+0x44>)
   1b096:	480d      	ldr	r0, [pc, #52]	; (1b0cc <bt_keys_get_addr.part.0+0x48>)
   1b098:	2207      	movs	r2, #7
   1b09a:	f009 fb18 	bl	246ce <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1b09e:	b148      	cbz	r0, 1b0b4 <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1b0a0:	2000      	movs	r0, #0
}
   1b0a2:	bd70      	pop	{r4, r5, r6, pc}
   1b0a4:	2207      	movs	r2, #7
   1b0a6:	4620      	mov	r0, r4
   1b0a8:	f009 fb11 	bl	246ce <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b0ac:	2800      	cmp	r0, #0
   1b0ae:	d1f1      	bne.n	1b094 <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1b0b0:	4804      	ldr	r0, [pc, #16]	; (1b0c4 <bt_keys_get_addr.part.0+0x40>)
   1b0b2:	e7f6      	b.n	1b0a2 <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1b0b4:	f804 5c01 	strb.w	r5, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1b0b8:	2207      	movs	r2, #7
   1b0ba:	4631      	mov	r1, r6
   1b0bc:	4803      	ldr	r0, [pc, #12]	; (1b0cc <bt_keys_get_addr.part.0+0x48>)
   1b0be:	f009 fb16 	bl	246ee <memcpy>
		return keys;
   1b0c2:	e7f5      	b.n	1b0b0 <bt_keys_get_addr.part.0+0x2c>
   1b0c4:	20002210 	.word	0x20002210
   1b0c8:	000289b2 	.word	0x000289b2
   1b0cc:	20002211 	.word	0x20002211

0001b0d0 <bt_keys_get_addr>:
{
   1b0d0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1b0d2:	b941      	cbnz	r1, 1b0e6 <bt_keys_get_addr+0x16>
   1b0d4:	4906      	ldr	r1, [pc, #24]	; (1b0f0 <bt_keys_get_addr+0x20>)
   1b0d6:	4807      	ldr	r0, [pc, #28]	; (1b0f4 <bt_keys_get_addr+0x24>)
   1b0d8:	2258      	movs	r2, #88	; 0x58
   1b0da:	f008 fc85 	bl	239e8 <assert_print>
   1b0de:	4804      	ldr	r0, [pc, #16]	; (1b0f0 <bt_keys_get_addr+0x20>)
   1b0e0:	2158      	movs	r1, #88	; 0x58
   1b0e2:	f008 fc7a 	bl	239da <assert_post_action>
}
   1b0e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b0ea:	f7ff bfcb 	b.w	1b084 <bt_keys_get_addr.part.0>
   1b0ee:	bf00      	nop
   1b0f0:	0002a493 	.word	0x0002a493
   1b0f4:	000280bd 	.word	0x000280bd

0001b0f8 <bt_keys_foreach_type>:
{
   1b0f8:	460b      	mov	r3, r1
   1b0fa:	b510      	push	{r4, lr}
   1b0fc:	4611      	mov	r1, r2
   1b0fe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1b100:	b95b      	cbnz	r3, 1b11a <bt_keys_foreach_type+0x22>
   1b102:	4908      	ldr	r1, [pc, #32]	; (1b124 <bt_keys_foreach_type+0x2c>)
   1b104:	4808      	ldr	r0, [pc, #32]	; (1b128 <bt_keys_foreach_type+0x30>)
   1b106:	22b2      	movs	r2, #178	; 0xb2
   1b108:	f008 fc6e 	bl	239e8 <assert_print>
   1b10c:	4805      	ldr	r0, [pc, #20]	; (1b124 <bt_keys_foreach_type+0x2c>)
   1b10e:	21b2      	movs	r1, #178	; 0xb2
   1b110:	f008 fc63 	bl	239da <assert_post_action>
}
   1b114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1b118:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1b11a:	4804      	ldr	r0, [pc, #16]	; (1b12c <bt_keys_foreach_type+0x34>)
   1b11c:	89c2      	ldrh	r2, [r0, #14]
   1b11e:	4222      	tst	r2, r4
   1b120:	d1f8      	bne.n	1b114 <bt_keys_foreach_type+0x1c>
}
   1b122:	bd10      	pop	{r4, pc}
   1b124:	0002a493 	.word	0x0002a493
   1b128:	000280bd 	.word	0x000280bd
   1b12c:	20002210 	.word	0x20002210

0001b130 <keys_commit>:

static int keys_commit(void)
{
   1b130:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1b132:	4903      	ldr	r1, [pc, #12]	; (1b140 <keys_commit+0x10>)
   1b134:	2200      	movs	r2, #0
   1b136:	2002      	movs	r0, #2
   1b138:	f7ff ffde 	bl	1b0f8 <bt_keys_foreach_type>
	}

	return 0;
}
   1b13c:	2000      	movs	r0, #0
   1b13e:	bd08      	pop	{r3, pc}
   1b140:	0001b059 	.word	0x0001b059

0001b144 <bt_keys_find>:
{
   1b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b146:	4605      	mov	r5, r0
   1b148:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1b14a:	4614      	mov	r4, r2
   1b14c:	b9a2      	cbnz	r2, 1b178 <bt_keys_find+0x34>
   1b14e:	490f      	ldr	r1, [pc, #60]	; (1b18c <bt_keys_find+0x48>)
   1b150:	480f      	ldr	r0, [pc, #60]	; (1b190 <bt_keys_find+0x4c>)
   1b152:	22bf      	movs	r2, #191	; 0xbf
   1b154:	f008 fc48 	bl	239e8 <assert_print>
   1b158:	480c      	ldr	r0, [pc, #48]	; (1b18c <bt_keys_find+0x48>)
   1b15a:	21bf      	movs	r1, #191	; 0xbf
   1b15c:	f008 fc3d 	bl	239da <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b160:	b18a      	cbz	r2, 1b186 <bt_keys_find+0x42>
   1b162:	428e      	cmp	r6, r1
   1b164:	d10f      	bne.n	1b186 <bt_keys_find+0x42>
	return memcmp(a, b, sizeof(*a));
   1b166:	480b      	ldr	r0, [pc, #44]	; (1b194 <bt_keys_find+0x50>)
   1b168:	2207      	movs	r2, #7
   1b16a:	4621      	mov	r1, r4
   1b16c:	f009 faaf 	bl	246ce <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b170:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b172:	b918      	cbnz	r0, 1b17c <bt_keys_find+0x38>
			return &key_pool[i];
   1b174:	4808      	ldr	r0, [pc, #32]	; (1b198 <bt_keys_find+0x54>)
   1b176:	e007      	b.n	1b188 <bt_keys_find+0x44>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b178:	4f07      	ldr	r7, [pc, #28]	; (1b198 <bt_keys_find+0x54>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b17a:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b17c:	89fa      	ldrh	r2, [r7, #14]
   1b17e:	7839      	ldrb	r1, [r7, #0]
   1b180:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b182:	2b00      	cmp	r3, #0
   1b184:	d0ec      	beq.n	1b160 <bt_keys_find+0x1c>
	return NULL;
   1b186:	2000      	movs	r0, #0
}
   1b188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b18a:	bf00      	nop
   1b18c:	0002a493 	.word	0x0002a493
   1b190:	000280bd 	.word	0x000280bd
   1b194:	20002211 	.word	0x20002211
   1b198:	20002210 	.word	0x20002210

0001b19c <bt_keys_find_irk>:
{
   1b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b19e:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1b1a0:	460c      	mov	r4, r1
   1b1a2:	b941      	cbnz	r1, 1b1b6 <bt_keys_find_irk+0x1a>
   1b1a4:	4921      	ldr	r1, [pc, #132]	; (1b22c <bt_keys_find_irk+0x90>)
   1b1a6:	4822      	ldr	r0, [pc, #136]	; (1b230 <bt_keys_find_irk+0x94>)
   1b1a8:	22e8      	movs	r2, #232	; 0xe8
   1b1aa:	f008 fc1d 	bl	239e8 <assert_print>
   1b1ae:	481f      	ldr	r0, [pc, #124]	; (1b22c <bt_keys_find_irk+0x90>)
   1b1b0:	21e8      	movs	r1, #232	; 0xe8
   1b1b2:	f008 fc12 	bl	239da <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1b1b6:	780b      	ldrb	r3, [r1, #0]
   1b1b8:	2b01      	cmp	r3, #1
   1b1ba:	d001      	beq.n	1b1c0 <bt_keys_find_irk+0x24>
		return NULL;
   1b1bc:	2000      	movs	r0, #0
}
   1b1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1b1c0:	798b      	ldrb	r3, [r1, #6]
   1b1c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b1c6:	2b40      	cmp	r3, #64	; 0x40
   1b1c8:	d1f8      	bne.n	1b1bc <bt_keys_find_irk+0x20>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1b1ca:	4d1a      	ldr	r5, [pc, #104]	; (1b234 <bt_keys_find_irk+0x98>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b1cc:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1b1ce:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1b1d2:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1b1d4:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b1d6:	f002 0202 	and.w	r2, r2, #2
   1b1da:	b1c3      	cbz	r3, 1b20e <bt_keys_find_irk+0x72>
   1b1dc:	2300      	movs	r3, #0
   1b1de:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1b1e0:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b1e2:	f002 0202 	and.w	r2, r2, #2
   1b1e6:	2b00      	cmp	r3, #0
   1b1e8:	d1e8      	bne.n	1b1bc <bt_keys_find_irk+0x20>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1b1ea:	2a00      	cmp	r2, #0
   1b1ec:	d0e6      	beq.n	1b1bc <bt_keys_find_irk+0x20>
		if (key_pool[i].id != id) {
   1b1ee:	42b1      	cmp	r1, r6
   1b1f0:	d1e4      	bne.n	1b1bc <bt_keys_find_irk+0x20>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1b1f2:	1c67      	adds	r7, r4, #1
   1b1f4:	4810      	ldr	r0, [pc, #64]	; (1b238 <bt_keys_find_irk+0x9c>)
   1b1f6:	4639      	mov	r1, r7
   1b1f8:	f009 faa2 	bl	24740 <bt_rpa_irk_matches>
   1b1fc:	2301      	movs	r3, #1
   1b1fe:	2800      	cmp	r0, #0
   1b200:	d0ed      	beq.n	1b1de <bt_keys_find_irk+0x42>
	memcpy(dst, src, sizeof(*dst));
   1b202:	2206      	movs	r2, #6
   1b204:	4639      	mov	r1, r7
   1b206:	480d      	ldr	r0, [pc, #52]	; (1b23c <bt_keys_find_irk+0xa0>)
   1b208:	f009 fa71 	bl	246ee <memcpy>
}
   1b20c:	e00b      	b.n	1b226 <bt_keys_find_irk+0x8a>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1b20e:	2a00      	cmp	r2, #0
   1b210:	d0e5      	beq.n	1b1de <bt_keys_find_irk+0x42>
		if (key_pool[i].id == id &&
   1b212:	42b0      	cmp	r0, r6
   1b214:	d1e3      	bne.n	1b1de <bt_keys_find_irk+0x42>
	return memcmp(a, b, sizeof(*a));
   1b216:	2206      	movs	r2, #6
   1b218:	4639      	mov	r1, r7
   1b21a:	1c60      	adds	r0, r4, #1
   1b21c:	f009 fa57 	bl	246ce <memcmp>
   1b220:	2301      	movs	r3, #1
   1b222:	2800      	cmp	r0, #0
   1b224:	d1d5      	bne.n	1b1d2 <bt_keys_find_irk+0x36>
			return &key_pool[i];
   1b226:	4803      	ldr	r0, [pc, #12]	; (1b234 <bt_keys_find_irk+0x98>)
   1b228:	e7c9      	b.n	1b1be <bt_keys_find_irk+0x22>
   1b22a:	bf00      	nop
   1b22c:	0002a493 	.word	0x0002a493
   1b230:	000280bd 	.word	0x000280bd
   1b234:	20002210 	.word	0x20002210
   1b238:	2000223a 	.word	0x2000223a
   1b23c:	2000224a 	.word	0x2000224a

0001b240 <bt_keys_find_addr>:
{
   1b240:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1b242:	b951      	cbnz	r1, 1b25a <bt_keys_find_addr+0x1a>
   1b244:	490b      	ldr	r1, [pc, #44]	; (1b274 <bt_keys_find_addr+0x34>)
   1b246:	480c      	ldr	r0, [pc, #48]	; (1b278 <bt_keys_find_addr+0x38>)
   1b248:	f240 121b 	movw	r2, #283	; 0x11b
   1b24c:	f008 fbcc 	bl	239e8 <assert_print>
   1b250:	4808      	ldr	r0, [pc, #32]	; (1b274 <bt_keys_find_addr+0x34>)
   1b252:	f240 111b 	movw	r1, #283	; 0x11b
   1b256:	f008 fbc0 	bl	239da <assert_post_action>
		if (key_pool[i].id == id &&
   1b25a:	4c08      	ldr	r4, [pc, #32]	; (1b27c <bt_keys_find_addr+0x3c>)
   1b25c:	7823      	ldrb	r3, [r4, #0]
   1b25e:	4283      	cmp	r3, r0
   1b260:	d104      	bne.n	1b26c <bt_keys_find_addr+0x2c>
	return memcmp(a, b, sizeof(*a));
   1b262:	2207      	movs	r2, #7
   1b264:	1c60      	adds	r0, r4, #1
   1b266:	f009 fa32 	bl	246ce <memcmp>
   1b26a:	b108      	cbz	r0, 1b270 <bt_keys_find_addr+0x30>
	return NULL;
   1b26c:	2000      	movs	r0, #0
}
   1b26e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1b270:	4620      	mov	r0, r4
   1b272:	e7fc      	b.n	1b26e <bt_keys_find_addr+0x2e>
   1b274:	0002a493 	.word	0x0002a493
   1b278:	000280bd 	.word	0x000280bd
   1b27c:	20002210 	.word	0x20002210

0001b280 <bt_keys_add_type>:
{
   1b280:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1b282:	b950      	cbnz	r0, 1b29a <bt_keys_add_type+0x1a>
   1b284:	4907      	ldr	r1, [pc, #28]	; (1b2a4 <bt_keys_add_type+0x24>)
   1b286:	4808      	ldr	r0, [pc, #32]	; (1b2a8 <bt_keys_add_type+0x28>)
   1b288:	f240 122b 	movw	r2, #299	; 0x12b
   1b28c:	f008 fbac 	bl	239e8 <assert_print>
   1b290:	4804      	ldr	r0, [pc, #16]	; (1b2a4 <bt_keys_add_type+0x24>)
   1b292:	f240 112b 	movw	r1, #299	; 0x12b
   1b296:	f008 fba0 	bl	239da <assert_post_action>
	keys->keys |= type;
   1b29a:	89c3      	ldrh	r3, [r0, #14]
   1b29c:	4319      	orrs	r1, r3
   1b29e:	81c1      	strh	r1, [r0, #14]
}
   1b2a0:	bd08      	pop	{r3, pc}
   1b2a2:	bf00      	nop
   1b2a4:	0002a493 	.word	0x0002a493
   1b2a8:	000280bd 	.word	0x000280bd

0001b2ac <bt_keys_get_type>:
{
   1b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2ae:	4606      	mov	r6, r0
   1b2b0:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1b2b2:	4615      	mov	r5, r2
   1b2b4:	b942      	cbnz	r2, 1b2c8 <bt_keys_get_type+0x1c>
   1b2b6:	490c      	ldr	r1, [pc, #48]	; (1b2e8 <bt_keys_get_type+0x3c>)
   1b2b8:	480c      	ldr	r0, [pc, #48]	; (1b2ec <bt_keys_get_type+0x40>)
   1b2ba:	22d1      	movs	r2, #209	; 0xd1
   1b2bc:	f008 fb94 	bl	239e8 <assert_print>
   1b2c0:	4809      	ldr	r0, [pc, #36]	; (1b2e8 <bt_keys_get_type+0x3c>)
   1b2c2:	21d1      	movs	r1, #209	; 0xd1
   1b2c4:	f008 fb89 	bl	239da <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1b2c8:	f7ff ff3c 	bl	1b144 <bt_keys_find>
	if (keys) {
   1b2cc:	4604      	mov	r4, r0
   1b2ce:	b940      	cbnz	r0, 1b2e2 <bt_keys_get_type+0x36>
	keys = bt_keys_get_addr(id, addr);
   1b2d0:	4629      	mov	r1, r5
   1b2d2:	4638      	mov	r0, r7
   1b2d4:	f7ff fefc 	bl	1b0d0 <bt_keys_get_addr>
	if (!keys) {
   1b2d8:	4604      	mov	r4, r0
   1b2da:	b110      	cbz	r0, 1b2e2 <bt_keys_get_type+0x36>
	bt_keys_add_type(keys, type);
   1b2dc:	4631      	mov	r1, r6
   1b2de:	f7ff ffcf 	bl	1b280 <bt_keys_add_type>
}
   1b2e2:	4620      	mov	r0, r4
   1b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b2e6:	bf00      	nop
   1b2e8:	0002a493 	.word	0x0002a493
   1b2ec:	000280bd 	.word	0x000280bd

0001b2f0 <bt_keys_clear>:
{
   1b2f0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1b2f2:	4604      	mov	r4, r0
{
   1b2f4:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1b2f6:	b950      	cbnz	r0, 1b30e <bt_keys_clear+0x1e>
   1b2f8:	4916      	ldr	r1, [pc, #88]	; (1b354 <bt_keys_clear+0x64>)
   1b2fa:	4817      	ldr	r0, [pc, #92]	; (1b358 <bt_keys_clear+0x68>)
   1b2fc:	f44f 7299 	mov.w	r2, #306	; 0x132
   1b300:	f008 fb72 	bl	239e8 <assert_print>
   1b304:	4813      	ldr	r0, [pc, #76]	; (1b354 <bt_keys_clear+0x64>)
   1b306:	f44f 7199 	mov.w	r1, #306	; 0x132
   1b30a:	f008 fb66 	bl	239da <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1b30e:	7a03      	ldrb	r3, [r0, #8]
   1b310:	075b      	lsls	r3, r3, #29
   1b312:	d501      	bpl.n	1b318 <bt_keys_clear+0x28>
		bt_id_del(keys);
   1b314:	f7fa f80e 	bl	15334 <bt_id_del>
		if (keys->id) {
   1b318:	4625      	mov	r5, r4
   1b31a:	f815 2b01 	ldrb.w	r2, [r5], #1
   1b31e:	b1b2      	cbz	r2, 1b34e <bt_keys_clear+0x5e>
			u8_to_dec(id, sizeof(id), keys->id);
   1b320:	ae02      	add	r6, sp, #8
   1b322:	2104      	movs	r1, #4
   1b324:	4630      	mov	r0, r6
   1b326:	f008 f8c9 	bl	234bc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b32a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b32c:	4a0b      	ldr	r2, [pc, #44]	; (1b35c <bt_keys_clear+0x6c>)
   1b32e:	462b      	mov	r3, r5
   1b330:	2124      	movs	r1, #36	; 0x24
   1b332:	a803      	add	r0, sp, #12
   1b334:	f7f8 fc10 	bl	13b58 <bt_settings_encode_key>
		settings_delete(key);
   1b338:	a803      	add	r0, sp, #12
   1b33a:	f008 fde7 	bl	23f0c <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1b33e:	225c      	movs	r2, #92	; 0x5c
   1b340:	2100      	movs	r1, #0
   1b342:	4620      	mov	r0, r4
}
   1b344:	b00c      	add	sp, #48	; 0x30
   1b346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1b34a:	f009 b9db 	b.w	24704 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b34e:	9200      	str	r2, [sp, #0]
   1b350:	e7ec      	b.n	1b32c <bt_keys_clear+0x3c>
   1b352:	bf00      	nop
   1b354:	0002a493 	.word	0x0002a493
   1b358:	000280bd 	.word	0x000280bd
   1b35c:	0002a57b 	.word	0x0002a57b

0001b360 <keys_set>:
{
   1b360:	b570      	push	{r4, r5, r6, lr}
   1b362:	4605      	mov	r5, r0
   1b364:	b098      	sub	sp, #96	; 0x60
   1b366:	4614      	mov	r4, r2
   1b368:	4618      	mov	r0, r3
	if (!name) {
   1b36a:	b945      	cbnz	r5, 1b37e <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   1b36c:	4832      	ldr	r0, [pc, #200]	; (1b438 <keys_set+0xd8>)
   1b36e:	2145      	movs	r1, #69	; 0x45
   1b370:	f008 fb48 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   1b374:	f06f 0615 	mvn.w	r6, #21
}
   1b378:	4630      	mov	r0, r6
   1b37a:	b018      	add	sp, #96	; 0x60
   1b37c:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1b37e:	2250      	movs	r2, #80	; 0x50
   1b380:	a904      	add	r1, sp, #16
   1b382:	47a0      	blx	r4
	if (len < 0) {
   1b384:	1e04      	subs	r4, r0, #0
   1b386:	da05      	bge.n	1b394 <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   1b388:	482c      	ldr	r0, [pc, #176]	; (1b43c <keys_set+0xdc>)
   1b38a:	4622      	mov	r2, r4
   1b38c:	2145      	movs	r1, #69	; 0x45
   1b38e:	f008 fb39 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   1b392:	e7ef      	b.n	1b374 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1b394:	a902      	add	r1, sp, #8
   1b396:	4628      	mov	r0, r5
   1b398:	f009 f9f8 	bl	2478c <bt_settings_decode_key>
	if (err) {
   1b39c:	4606      	mov	r6, r0
   1b39e:	b118      	cbz	r0, 1b3a8 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   1b3a0:	4827      	ldr	r0, [pc, #156]	; (1b440 <keys_set+0xe0>)
   1b3a2:	462a      	mov	r2, r5
   1b3a4:	2145      	movs	r1, #69	; 0x45
   1b3a6:	e7f2      	b.n	1b38e <keys_set+0x2e>
	settings_name_next(name, &next);
   1b3a8:	a901      	add	r1, sp, #4
   1b3aa:	4628      	mov	r0, r5
   1b3ac:	f008 fdd6 	bl	23f5c <settings_name_next>
	if (!next) {
   1b3b0:	9801      	ldr	r0, [sp, #4]
   1b3b2:	b140      	cbz	r0, 1b3c6 <keys_set+0x66>
		unsigned long next_id = strtoul(next, NULL, 10);
   1b3b4:	220a      	movs	r2, #10
   1b3b6:	4631      	mov	r1, r6
   1b3b8:	f009 f8d8 	bl	2456c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1b3bc:	4602      	mov	r2, r0
   1b3be:	b110      	cbz	r0, 1b3c6 <keys_set+0x66>
			BT_ERR("Invalid local identity %lu", next_id);
   1b3c0:	4820      	ldr	r0, [pc, #128]	; (1b444 <keys_set+0xe4>)
   1b3c2:	2145      	movs	r1, #69	; 0x45
   1b3c4:	e7e3      	b.n	1b38e <keys_set+0x2e>
	if (!len) {
   1b3c6:	b99c      	cbnz	r4, 1b3f0 <keys_set+0x90>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1b3c8:	aa02      	add	r2, sp, #8
   1b3ca:	4621      	mov	r1, r4
   1b3cc:	203f      	movs	r0, #63	; 0x3f
   1b3ce:	f7ff feb9 	bl	1b144 <bt_keys_find>
		if (keys) {
   1b3d2:	b120      	cbz	r0, 1b3de <keys_set+0x7e>
			(void)memset(keys, 0, sizeof(*keys));
   1b3d4:	225c      	movs	r2, #92	; 0x5c
   1b3d6:	4621      	mov	r1, r4
   1b3d8:	f009 f994 	bl	24704 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1b3dc:	e7cc      	b.n	1b378 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   1b3de:	a802      	add	r0, sp, #8
   1b3e0:	f7f8 fb0e 	bl	13a00 <bt_addr_le_str>
   1b3e4:	2157      	movs	r1, #87	; 0x57
   1b3e6:	4602      	mov	r2, r0
   1b3e8:	4817      	ldr	r0, [pc, #92]	; (1b448 <keys_set+0xe8>)
   1b3ea:	f008 fb0b 	bl	23a04 <z_log_minimal_printk>
   1b3ee:	e7c3      	b.n	1b378 <keys_set+0x18>
	__ASSERT_NO_MSG(addr != NULL);
   1b3f0:	a902      	add	r1, sp, #8
   1b3f2:	2000      	movs	r0, #0
   1b3f4:	f7ff fe46 	bl	1b084 <bt_keys_get_addr.part.0>
	if (!keys) {
   1b3f8:	4605      	mov	r5, r0
   1b3fa:	b950      	cbnz	r0, 1b412 <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1b3fc:	a802      	add	r0, sp, #8
   1b3fe:	f7f8 faff 	bl	13a00 <bt_addr_le_str>
   1b402:	2145      	movs	r1, #69	; 0x45
   1b404:	4602      	mov	r2, r0
   1b406:	4811      	ldr	r0, [pc, #68]	; (1b44c <keys_set+0xec>)
   1b408:	f008 fafc 	bl	23a04 <z_log_minimal_printk>
		return -ENOMEM;
   1b40c:	f06f 060b 	mvn.w	r6, #11
   1b410:	e7b2      	b.n	1b378 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1b412:	2c50      	cmp	r4, #80	; 0x50
   1b414:	d009      	beq.n	1b42a <keys_set+0xca>
			BT_ERR("Invalid key length %zd != %zu", len,
   1b416:	480e      	ldr	r0, [pc, #56]	; (1b450 <keys_set+0xf0>)
   1b418:	2350      	movs	r3, #80	; 0x50
   1b41a:	4622      	mov	r2, r4
   1b41c:	2145      	movs	r1, #69	; 0x45
   1b41e:	f008 faf1 	bl	23a04 <z_log_minimal_printk>
			bt_keys_clear(keys);
   1b422:	4628      	mov	r0, r5
   1b424:	f7ff ff64 	bl	1b2f0 <bt_keys_clear>
			return -EINVAL;
   1b428:	e7a4      	b.n	1b374 <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   1b42a:	4622      	mov	r2, r4
   1b42c:	a904      	add	r1, sp, #16
   1b42e:	300c      	adds	r0, #12
   1b430:	f009 f95d 	bl	246ee <memcpy>
	return 0;
   1b434:	e7a0      	b.n	1b378 <keys_set+0x18>
   1b436:	bf00      	nop
   1b438:	00028a12 	.word	0x00028a12
   1b43c:	0002a4c3 	.word	0x0002a4c3
   1b440:	00029c80 	.word	0x00029c80
   1b444:	00029ca1 	.word	0x00029ca1
   1b448:	0002a4e7 	.word	0x0002a4e7
   1b44c:	0002a50f 	.word	0x0002a50f
   1b450:	0002a533 	.word	0x0002a533

0001b454 <bt_keys_store>:
{
   1b454:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1b456:	4604      	mov	r4, r0
{
   1b458:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1b45a:	b950      	cbnz	r0, 1b472 <bt_keys_store+0x1e>
   1b45c:	4916      	ldr	r1, [pc, #88]	; (1b4b8 <bt_keys_store+0x64>)
   1b45e:	4817      	ldr	r0, [pc, #92]	; (1b4bc <bt_keys_store+0x68>)
   1b460:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1b464:	f008 fac0 	bl	239e8 <assert_print>
   1b468:	4813      	ldr	r0, [pc, #76]	; (1b4b8 <bt_keys_store+0x64>)
   1b46a:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1b46e:	f008 fab4 	bl	239da <assert_post_action>
	if (keys->id) {
   1b472:	4605      	mov	r5, r0
   1b474:	f815 2b01 	ldrb.w	r2, [r5], #1
   1b478:	b1da      	cbz	r2, 1b4b2 <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1b47a:	ae02      	add	r6, sp, #8
   1b47c:	2104      	movs	r1, #4
   1b47e:	4630      	mov	r0, r6
   1b480:	f008 f81c 	bl	234bc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b484:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b486:	4a0e      	ldr	r2, [pc, #56]	; (1b4c0 <bt_keys_store+0x6c>)
   1b488:	462b      	mov	r3, r5
   1b48a:	2124      	movs	r1, #36	; 0x24
   1b48c:	a803      	add	r0, sp, #12
   1b48e:	f7f8 fb63 	bl	13b58 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1b492:	f104 010c 	add.w	r1, r4, #12
   1b496:	2250      	movs	r2, #80	; 0x50
   1b498:	a803      	add	r0, sp, #12
   1b49a:	f7f7 f86b 	bl	12574 <settings_save_one>
	if (err) {
   1b49e:	4604      	mov	r4, r0
   1b4a0:	b120      	cbz	r0, 1b4ac <bt_keys_store+0x58>
		BT_ERR("Failed to save keys (err %d)", err);
   1b4a2:	4602      	mov	r2, r0
   1b4a4:	2145      	movs	r1, #69	; 0x45
   1b4a6:	4807      	ldr	r0, [pc, #28]	; (1b4c4 <bt_keys_store+0x70>)
   1b4a8:	f008 faac 	bl	23a04 <z_log_minimal_printk>
}
   1b4ac:	4620      	mov	r0, r4
   1b4ae:	b00c      	add	sp, #48	; 0x30
   1b4b0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b4b2:	9200      	str	r2, [sp, #0]
   1b4b4:	e7e7      	b.n	1b486 <bt_keys_store+0x32>
   1b4b6:	bf00      	nop
   1b4b8:	0002a493 	.word	0x0002a493
   1b4bc:	000280bd 	.word	0x000280bd
   1b4c0:	0002a57b 	.word	0x0002a57b
   1b4c4:	0002a556 	.word	0x0002a556

0001b4c8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b4c8:	4b02      	ldr	r3, [pc, #8]	; (1b4d4 <net_buf_pool_get+0xc>)
   1b4ca:	2234      	movs	r2, #52	; 0x34
   1b4cc:	fb02 3000 	mla	r0, r2, r0, r3
   1b4d0:	4770      	bx	lr
   1b4d2:	bf00      	nop
   1b4d4:	20000960 	.word	0x20000960

0001b4d8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b4d8:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b4da:	4b07      	ldr	r3, [pc, #28]	; (1b4f8 <net_buf_id+0x20>)
   1b4dc:	2134      	movs	r1, #52	; 0x34
   1b4de:	fb01 3302 	mla	r3, r1, r2, r3
   1b4e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b4e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b4e8:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b4ea:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b4ec:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1b4f0:	fbb0 f0f3 	udiv	r0, r0, r3
   1b4f4:	4770      	bx	lr
   1b4f6:	bf00      	nop
   1b4f8:	20000960 	.word	0x20000960

0001b4fc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b4fc:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b4fe:	4b0a      	ldr	r3, [pc, #40]	; (1b528 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b500:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b502:	2434      	movs	r4, #52	; 0x34
   1b504:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1b508:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b50c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b50e:	681a      	ldr	r2, [r3, #0]
   1b510:	4294      	cmp	r4, r2
   1b512:	bf94      	ite	ls
   1b514:	600c      	strls	r4, [r1, #0]
   1b516:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b518:	e9d3 5400 	ldrd	r5, r4, [r3]
   1b51c:	f7ff ffdc 	bl	1b4d8 <net_buf_id>
}
   1b520:	fb05 4000 	mla	r0, r5, r0, r4
   1b524:	bd38      	pop	{r3, r4, r5, pc}
   1b526:	bf00      	nop
   1b528:	20000960 	.word	0x20000960

0001b52c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b530:	b085      	sub	sp, #20
   1b532:	4605      	mov	r5, r0
   1b534:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b536:	4610      	mov	r0, r2
   1b538:	4619      	mov	r1, r3
{
   1b53a:	4691      	mov	r9, r2
   1b53c:	4698      	mov	r8, r3
   1b53e:	4617      	mov	r7, r2
   1b540:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b542:	f00b fd09 	bl	26f58 <sys_clock_timeout_end_calc>
   1b546:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1b54a:	b93d      	cbnz	r5, 1b55c <net_buf_alloc_len+0x30>
   1b54c:	495e      	ldr	r1, [pc, #376]	; (1b6c8 <net_buf_alloc_len+0x19c>)
   1b54e:	485f      	ldr	r0, [pc, #380]	; (1b6cc <net_buf_alloc_len+0x1a0>)
   1b550:	22f4      	movs	r2, #244	; 0xf4
   1b552:	f008 fa49 	bl	239e8 <assert_print>
   1b556:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1b558:	485b      	ldr	r0, [pc, #364]	; (1b6c8 <net_buf_alloc_len+0x19c>)
   1b55a:	e014      	b.n	1b586 <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   1b55c:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1b560:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b564:	f3ef 8b11 	mrs	fp, BASEPRI
   1b568:	f383 8812 	msr	BASEPRI_MAX, r3
   1b56c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b570:	4650      	mov	r0, sl
   1b572:	f004 fdff 	bl	20174 <z_spin_lock_valid>
   1b576:	b940      	cbnz	r0, 1b58a <net_buf_alloc_len+0x5e>
   1b578:	4955      	ldr	r1, [pc, #340]	; (1b6d0 <net_buf_alloc_len+0x1a4>)
   1b57a:	4854      	ldr	r0, [pc, #336]	; (1b6cc <net_buf_alloc_len+0x1a0>)
   1b57c:	2294      	movs	r2, #148	; 0x94
   1b57e:	f008 fa33 	bl	239e8 <assert_print>
   1b582:	2194      	movs	r1, #148	; 0x94
   1b584:	4852      	ldr	r0, [pc, #328]	; (1b6d0 <net_buf_alloc_len+0x1a4>)
   1b586:	f008 fa28 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   1b58a:	4650      	mov	r0, sl
   1b58c:	f004 fe10 	bl	201b0 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1b590:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1b592:	2b00      	cmp	r3, #0
   1b594:	d06a      	beq.n	1b66c <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   1b596:	8c2a      	ldrh	r2, [r5, #32]
   1b598:	429a      	cmp	r2, r3
   1b59a:	d947      	bls.n	1b62c <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   1b59c:	2200      	movs	r2, #0
   1b59e:	2300      	movs	r3, #0
   1b5a0:	4628      	mov	r0, r5
   1b5a2:	f005 f83d 	bl	20620 <z_impl_k_queue_get>
			if (buf) {
   1b5a6:	4604      	mov	r4, r0
   1b5a8:	2800      	cmp	r0, #0
   1b5aa:	d03f      	beq.n	1b62c <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b5ac:	4650      	mov	r0, sl
   1b5ae:	f004 fdef 	bl	20190 <z_spin_unlock_valid>
   1b5b2:	b930      	cbnz	r0, 1b5c2 <net_buf_alloc_len+0x96>
   1b5b4:	4946      	ldr	r1, [pc, #280]	; (1b6d0 <net_buf_alloc_len+0x1a4>)
   1b5b6:	4845      	ldr	r0, [pc, #276]	; (1b6cc <net_buf_alloc_len+0x1a0>)
   1b5b8:	22c2      	movs	r2, #194	; 0xc2
   1b5ba:	f008 fa15 	bl	239e8 <assert_print>
   1b5be:	21c2      	movs	r1, #194	; 0xc2
   1b5c0:	e7e0      	b.n	1b584 <net_buf_alloc_len+0x58>
	__asm__ volatile(
   1b5c2:	f38b 8811 	msr	BASEPRI, fp
   1b5c6:	f3bf 8f6f 	isb	sy
	if (size) {
   1b5ca:	9d03      	ldr	r5, [sp, #12]
   1b5cc:	2d00      	cmp	r5, #0
   1b5ce:	d06f      	beq.n	1b6b0 <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b5d0:	ea58 0309 	orrs.w	r3, r8, r9
   1b5d4:	d010      	beq.n	1b5f8 <net_buf_alloc_len+0xcc>
   1b5d6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1b5da:	bf08      	it	eq
   1b5dc:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1b5e0:	d00a      	beq.n	1b5f8 <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   1b5e2:	f007 f825 	bl	22630 <sys_clock_tick_get>
   1b5e6:	9b01      	ldr	r3, [sp, #4]
   1b5e8:	1a1f      	subs	r7, r3, r0
   1b5ea:	9b02      	ldr	r3, [sp, #8]
   1b5ec:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   1b5f0:	2e00      	cmp	r6, #0
   1b5f2:	bfbc      	itt	lt
   1b5f4:	2700      	movlt	r7, #0
   1b5f6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b5f8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b5fa:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1b6d4 <net_buf_alloc_len+0x1a8>
   1b5fe:	f04f 0934 	mov.w	r9, #52	; 0x34
   1b602:	fb09 8303 	mla	r3, r9, r3, r8
   1b606:	463a      	mov	r2, r7
   1b608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b60a:	681b      	ldr	r3, [r3, #0]
   1b60c:	a903      	add	r1, sp, #12
   1b60e:	f8d3 a000 	ldr.w	sl, [r3]
   1b612:	4620      	mov	r0, r4
   1b614:	4633      	mov	r3, r6
   1b616:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1b618:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1b61a:	2800      	cmp	r0, #0
   1b61c:	d13c      	bne.n	1b698 <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   1b61e:	79a0      	ldrb	r0, [r4, #6]
   1b620:	4621      	mov	r1, r4
   1b622:	fb00 8009 	mla	r0, r0, r9, r8
   1b626:	f00b fbde 	bl	26de6 <k_queue_prepend>
}
   1b62a:	e030      	b.n	1b68e <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   1b62c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1b62e:	1e63      	subs	r3, r4, #1
   1b630:	846b      	strh	r3, [r5, #34]	; 0x22
   1b632:	4650      	mov	r0, sl
   1b634:	f004 fdac 	bl	20190 <z_spin_unlock_valid>
   1b638:	2800      	cmp	r0, #0
   1b63a:	d0bb      	beq.n	1b5b4 <net_buf_alloc_len+0x88>
   1b63c:	f38b 8811 	msr	BASEPRI, fp
   1b640:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b644:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b648:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b64a:	3317      	adds	r3, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b64c:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b64e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b650:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b654:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1b658:	4b1e      	ldr	r3, [pc, #120]	; (1b6d4 <net_buf_alloc_len+0x1a8>)
   1b65a:	4a1f      	ldr	r2, [pc, #124]	; (1b6d8 <net_buf_alloc_len+0x1ac>)
   1b65c:	1aeb      	subs	r3, r5, r3
   1b65e:	109b      	asrs	r3, r3, #2
   1b660:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1b662:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   1b664:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1b668:	71e3      	strb	r3, [r4, #7]
		goto success;
   1b66a:	e7ae      	b.n	1b5ca <net_buf_alloc_len+0x9e>
   1b66c:	4650      	mov	r0, sl
   1b66e:	f004 fd8f 	bl	20190 <z_spin_unlock_valid>
   1b672:	2800      	cmp	r0, #0
   1b674:	d09e      	beq.n	1b5b4 <net_buf_alloc_len+0x88>
   1b676:	f38b 8811 	msr	BASEPRI, fp
   1b67a:	f3bf 8f6f 	isb	sy
   1b67e:	464a      	mov	r2, r9
   1b680:	4643      	mov	r3, r8
   1b682:	4628      	mov	r0, r5
   1b684:	f004 ffcc 	bl	20620 <z_impl_k_queue_get>
	if (!buf) {
   1b688:	4604      	mov	r4, r0
   1b68a:	2800      	cmp	r0, #0
   1b68c:	d19d      	bne.n	1b5ca <net_buf_alloc_len+0x9e>
		return NULL;
   1b68e:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1b690:	4620      	mov	r0, r4
   1b692:	b005      	add	sp, #20
   1b694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1b698:	9b03      	ldr	r3, [sp, #12]
   1b69a:	429d      	cmp	r5, r3
   1b69c:	d909      	bls.n	1b6b2 <net_buf_alloc_len+0x186>
   1b69e:	490a      	ldr	r1, [pc, #40]	; (1b6c8 <net_buf_alloc_len+0x19c>)
   1b6a0:	480a      	ldr	r0, [pc, #40]	; (1b6cc <net_buf_alloc_len+0x1a0>)
   1b6a2:	f240 1255 	movw	r2, #341	; 0x155
   1b6a6:	f008 f99f 	bl	239e8 <assert_print>
   1b6aa:	f240 1155 	movw	r1, #341	; 0x155
   1b6ae:	e753      	b.n	1b558 <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   1b6b0:	6125      	str	r5, [r4, #16]
	buf->frags = NULL;
   1b6b2:	2300      	movs	r3, #0
   1b6b4:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1b6b6:	2201      	movs	r2, #1
   1b6b8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1b6ba:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1b6bc:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1b6be:	6923      	ldr	r3, [r4, #16]
   1b6c0:	81e2      	strh	r2, [r4, #14]
   1b6c2:	60a3      	str	r3, [r4, #8]
}
   1b6c4:	e7e4      	b.n	1b690 <net_buf_alloc_len+0x164>
   1b6c6:	bf00      	nop
   1b6c8:	0002a588 	.word	0x0002a588
   1b6cc:	000280bd 	.word	0x000280bd
   1b6d0:	000280f7 	.word	0x000280f7
   1b6d4:	20000960 	.word	0x20000960
   1b6d8:	c4ec4ec5 	.word	0xc4ec4ec5

0001b6dc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1b6dc:	b570      	push	{r4, r5, r6, lr}
   1b6de:	4606      	mov	r6, r0
   1b6e0:	f004 ff9e 	bl	20620 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1b6e4:	4605      	mov	r5, r0
   1b6e6:	b128      	cbz	r0, 1b6f4 <net_buf_get+0x18>
   1b6e8:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b6ea:	7963      	ldrb	r3, [r4, #5]
   1b6ec:	f013 0301 	ands.w	r3, r3, #1
   1b6f0:	d102      	bne.n	1b6f8 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1b6f2:	6023      	str	r3, [r4, #0]

	return buf;
}
   1b6f4:	4628      	mov	r0, r5
   1b6f6:	bd70      	pop	{r4, r5, r6, pc}
   1b6f8:	2200      	movs	r2, #0
   1b6fa:	2300      	movs	r3, #0
   1b6fc:	4630      	mov	r0, r6
   1b6fe:	f004 ff8f 	bl	20620 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1b702:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1b704:	b950      	cbnz	r0, 1b71c <net_buf_get+0x40>
   1b706:	4908      	ldr	r1, [pc, #32]	; (1b728 <net_buf_get+0x4c>)
   1b708:	4808      	ldr	r0, [pc, #32]	; (1b72c <net_buf_get+0x50>)
   1b70a:	f240 12ad 	movw	r2, #429	; 0x1ad
   1b70e:	f008 f96b 	bl	239e8 <assert_print>
   1b712:	4805      	ldr	r0, [pc, #20]	; (1b728 <net_buf_get+0x4c>)
   1b714:	f240 11ad 	movw	r1, #429	; 0x1ad
   1b718:	f008 f95f 	bl	239da <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1b71c:	7963      	ldrb	r3, [r4, #5]
   1b71e:	f023 0301 	bic.w	r3, r3, #1
   1b722:	7163      	strb	r3, [r4, #5]
   1b724:	4604      	mov	r4, r0
   1b726:	e7e0      	b.n	1b6ea <net_buf_get+0xe>
   1b728:	0002a588 	.word	0x0002a588
   1b72c:	000280bd 	.word	0x000280bd

0001b730 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1b730:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b732:	b950      	cbnz	r0, 1b74a <net_buf_simple_reserve+0x1a>
   1b734:	490c      	ldr	r1, [pc, #48]	; (1b768 <net_buf_simple_reserve+0x38>)
   1b736:	480d      	ldr	r0, [pc, #52]	; (1b76c <net_buf_simple_reserve+0x3c>)
   1b738:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1b73c:	f008 f954 	bl	239e8 <assert_print>
   1b740:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
	__ASSERT_NO_MSG(buf->len == 0U);
   1b744:	4808      	ldr	r0, [pc, #32]	; (1b768 <net_buf_simple_reserve+0x38>)
   1b746:	f008 f948 	bl	239da <assert_post_action>
   1b74a:	8883      	ldrh	r3, [r0, #4]
   1b74c:	b143      	cbz	r3, 1b760 <net_buf_simple_reserve+0x30>
   1b74e:	4906      	ldr	r1, [pc, #24]	; (1b768 <net_buf_simple_reserve+0x38>)
   1b750:	4806      	ldr	r0, [pc, #24]	; (1b76c <net_buf_simple_reserve+0x3c>)
   1b752:	f240 12c5 	movw	r2, #453	; 0x1c5
   1b756:	f008 f947 	bl	239e8 <assert_print>
   1b75a:	f240 11c5 	movw	r1, #453	; 0x1c5
   1b75e:	e7f1      	b.n	1b744 <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1b760:	6883      	ldr	r3, [r0, #8]
   1b762:	440b      	add	r3, r1
   1b764:	6003      	str	r3, [r0, #0]
}
   1b766:	bd08      	pop	{r3, pc}
   1b768:	0002a588 	.word	0x0002a588
   1b76c:	000280bd 	.word	0x000280bd

0001b770 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b772:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b774:	4604      	mov	r4, r0
   1b776:	b950      	cbnz	r0, 1b78e <net_buf_slist_put+0x1e>
   1b778:	4925      	ldr	r1, [pc, #148]	; (1b810 <net_buf_slist_put+0xa0>)
   1b77a:	4826      	ldr	r0, [pc, #152]	; (1b814 <net_buf_slist_put+0xa4>)
   1b77c:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1b780:	f008 f932 	bl	239e8 <assert_print>
   1b784:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(buf);
   1b788:	4821      	ldr	r0, [pc, #132]	; (1b810 <net_buf_slist_put+0xa0>)
   1b78a:	f008 f926 	bl	239da <assert_post_action>
   1b78e:	bb21      	cbnz	r1, 1b7da <net_buf_slist_put+0x6a>
   1b790:	491f      	ldr	r1, [pc, #124]	; (1b810 <net_buf_slist_put+0xa0>)
   1b792:	4820      	ldr	r0, [pc, #128]	; (1b814 <net_buf_slist_put+0xa4>)
   1b794:	f240 12d3 	movw	r2, #467	; 0x1d3
   1b798:	f008 f926 	bl	239e8 <assert_print>
   1b79c:	f240 11d3 	movw	r1, #467	; 0x1d3
   1b7a0:	e7f2      	b.n	1b788 <net_buf_slist_put+0x18>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   1b7a2:	7973      	ldrb	r3, [r6, #5]
   1b7a4:	f043 0301 	orr.w	r3, r3, #1
   1b7a8:	7173      	strb	r3, [r6, #5]
   1b7aa:	4616      	mov	r6, r2
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b7ac:	6832      	ldr	r2, [r6, #0]
   1b7ae:	2a00      	cmp	r2, #0
   1b7b0:	d1f7      	bne.n	1b7a2 <net_buf_slist_put+0x32>
	__asm__ volatile(
   1b7b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7b6:	f3ef 8711 	mrs	r7, BASEPRI
   1b7ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b7c2:	4815      	ldr	r0, [pc, #84]	; (1b818 <net_buf_slist_put+0xa8>)
   1b7c4:	f004 fcd6 	bl	20174 <z_spin_lock_valid>
   1b7c8:	b948      	cbnz	r0, 1b7de <net_buf_slist_put+0x6e>
   1b7ca:	4914      	ldr	r1, [pc, #80]	; (1b81c <net_buf_slist_put+0xac>)
   1b7cc:	4811      	ldr	r0, [pc, #68]	; (1b814 <net_buf_slist_put+0xa4>)
   1b7ce:	2294      	movs	r2, #148	; 0x94
   1b7d0:	f008 f90a 	bl	239e8 <assert_print>
   1b7d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b7d6:	4811      	ldr	r0, [pc, #68]	; (1b81c <net_buf_slist_put+0xac>)
   1b7d8:	e7d7      	b.n	1b78a <net_buf_slist_put+0x1a>
   1b7da:	460e      	mov	r6, r1
   1b7dc:	e7e6      	b.n	1b7ac <net_buf_slist_put+0x3c>
	z_spin_lock_set_owner(l);
   1b7de:	480e      	ldr	r0, [pc, #56]	; (1b818 <net_buf_slist_put+0xa8>)
   1b7e0:	f004 fce6 	bl	201b0 <z_spin_lock_set_owner>
	return list->tail;
   1b7e4:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1b7e6:	b963      	cbnz	r3, 1b802 <net_buf_slist_put+0x92>
	list->head = node;
   1b7e8:	6025      	str	r5, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b7ea:	480b      	ldr	r0, [pc, #44]	; (1b818 <net_buf_slist_put+0xa8>)
	list->tail = node;
   1b7ec:	6066      	str	r6, [r4, #4]
   1b7ee:	f004 fccf 	bl	20190 <z_spin_unlock_valid>
   1b7f2:	b940      	cbnz	r0, 1b806 <net_buf_slist_put+0x96>
   1b7f4:	4909      	ldr	r1, [pc, #36]	; (1b81c <net_buf_slist_put+0xac>)
   1b7f6:	4807      	ldr	r0, [pc, #28]	; (1b814 <net_buf_slist_put+0xa4>)
   1b7f8:	22c2      	movs	r2, #194	; 0xc2
   1b7fa:	f008 f8f5 	bl	239e8 <assert_print>
   1b7fe:	21c2      	movs	r1, #194	; 0xc2
   1b800:	e7e9      	b.n	1b7d6 <net_buf_slist_put+0x66>
	parent->next = child;
   1b802:	601d      	str	r5, [r3, #0]
}
   1b804:	e7f1      	b.n	1b7ea <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1b806:	f387 8811 	msr	BASEPRI, r7
   1b80a:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1b80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b810:	0002a588 	.word	0x0002a588
   1b814:	000280bd 	.word	0x000280bd
   1b818:	2000226c 	.word	0x2000226c
   1b81c:	000280f7 	.word	0x000280f7

0001b820 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1b820:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b822:	4604      	mov	r4, r0
   1b824:	b948      	cbnz	r0, 1b83a <net_buf_slist_get+0x1a>
   1b826:	492d      	ldr	r1, [pc, #180]	; (1b8dc <net_buf_slist_get+0xbc>)
   1b828:	482d      	ldr	r0, [pc, #180]	; (1b8e0 <net_buf_slist_get+0xc0>)
   1b82a:	f240 12e3 	movw	r2, #483	; 0x1e3
   1b82e:	f008 f8db 	bl	239e8 <assert_print>
   1b832:	f240 11e3 	movw	r1, #483	; 0x1e3

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   1b836:	4829      	ldr	r0, [pc, #164]	; (1b8dc <net_buf_slist_get+0xbc>)
   1b838:	e012      	b.n	1b860 <net_buf_slist_get+0x40>
	__asm__ volatile(
   1b83a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b83e:	f3ef 8611 	mrs	r6, BASEPRI
   1b842:	f383 8812 	msr	BASEPRI_MAX, r3
   1b846:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b84a:	4826      	ldr	r0, [pc, #152]	; (1b8e4 <net_buf_slist_get+0xc4>)
   1b84c:	f004 fc92 	bl	20174 <z_spin_lock_valid>
   1b850:	b940      	cbnz	r0, 1b864 <net_buf_slist_get+0x44>
   1b852:	4925      	ldr	r1, [pc, #148]	; (1b8e8 <net_buf_slist_get+0xc8>)
   1b854:	4822      	ldr	r0, [pc, #136]	; (1b8e0 <net_buf_slist_get+0xc0>)
   1b856:	2294      	movs	r2, #148	; 0x94
   1b858:	f008 f8c6 	bl	239e8 <assert_print>
   1b85c:	2194      	movs	r1, #148	; 0x94
   1b85e:	4822      	ldr	r0, [pc, #136]	; (1b8e8 <net_buf_slist_get+0xc8>)
   1b860:	f008 f8bb 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   1b864:	481f      	ldr	r0, [pc, #124]	; (1b8e4 <net_buf_slist_get+0xc4>)
   1b866:	f004 fca3 	bl	201b0 <z_spin_lock_set_owner>
	return list->head;
   1b86a:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1b86c:	b15d      	cbz	r5, 1b886 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b86e:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1b870:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b872:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b874:	4295      	cmp	r5, r2
	list->tail = node;
   1b876:	bf08      	it	eq
   1b878:	6063      	streq	r3, [r4, #4]
{
   1b87a:	462b      	mov	r3, r5
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b87c:	795a      	ldrb	r2, [r3, #5]
   1b87e:	f012 0201 	ands.w	r2, r2, #1
   1b882:	d10b      	bne.n	1b89c <net_buf_slist_get+0x7c>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1b884:	601a      	str	r2, [r3, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b886:	4817      	ldr	r0, [pc, #92]	; (1b8e4 <net_buf_slist_get+0xc4>)
   1b888:	f004 fc82 	bl	20190 <z_spin_unlock_valid>
   1b88c:	b9f8      	cbnz	r0, 1b8ce <net_buf_slist_get+0xae>
   1b88e:	4916      	ldr	r1, [pc, #88]	; (1b8e8 <net_buf_slist_get+0xc8>)
   1b890:	4813      	ldr	r0, [pc, #76]	; (1b8e0 <net_buf_slist_get+0xc0>)
   1b892:	22c2      	movs	r2, #194	; 0xc2
   1b894:	f008 f8a8 	bl	239e8 <assert_print>
   1b898:	21c2      	movs	r1, #194	; 0xc2
   1b89a:	e7e0      	b.n	1b85e <net_buf_slist_get+0x3e>
	return list->head;
   1b89c:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1b89e:	b162      	cbz	r2, 1b8ba <net_buf_slist_get+0x9a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b8a0:	6860      	ldr	r0, [r4, #4]
	return node->next;
   1b8a2:	6811      	ldr	r1, [r2, #0]
	list->head = node;
   1b8a4:	6021      	str	r1, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b8a6:	4282      	cmp	r2, r0
   1b8a8:	d100      	bne.n	1b8ac <net_buf_slist_get+0x8c>
	list->tail = node;
   1b8aa:	6061      	str	r1, [r4, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   1b8ac:	7959      	ldrb	r1, [r3, #5]
			frag->frags = (void *)sys_slist_get(list);
   1b8ae:	601a      	str	r2, [r3, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   1b8b0:	f021 0101 	bic.w	r1, r1, #1
   1b8b4:	7159      	strb	r1, [r3, #5]
   1b8b6:	4613      	mov	r3, r2
   1b8b8:	e7e0      	b.n	1b87c <net_buf_slist_get+0x5c>
			__ASSERT_NO_MSG(frag->frags);
   1b8ba:	4908      	ldr	r1, [pc, #32]	; (1b8dc <net_buf_slist_get+0xbc>)
			frag->frags = (void *)sys_slist_get(list);
   1b8bc:	601a      	str	r2, [r3, #0]
			__ASSERT_NO_MSG(frag->frags);
   1b8be:	4808      	ldr	r0, [pc, #32]	; (1b8e0 <net_buf_slist_get+0xc0>)
   1b8c0:	f240 12ed 	movw	r2, #493	; 0x1ed
   1b8c4:	f008 f890 	bl	239e8 <assert_print>
   1b8c8:	f240 11ed 	movw	r1, #493	; 0x1ed
   1b8cc:	e7b3      	b.n	1b836 <net_buf_slist_get+0x16>
	__asm__ volatile(
   1b8ce:	f386 8811 	msr	BASEPRI, r6
   1b8d2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1b8d6:	4628      	mov	r0, r5
   1b8d8:	bd70      	pop	{r4, r5, r6, pc}
   1b8da:	bf00      	nop
   1b8dc:	0002a588 	.word	0x0002a588
   1b8e0:	000280bd 	.word	0x000280bd
   1b8e4:	2000226c 	.word	0x2000226c
   1b8e8:	000280f7 	.word	0x000280f7

0001b8ec <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1b8ec:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1b8ee:	b950      	cbnz	r0, 1b906 <net_buf_put+0x1a>
   1b8f0:	4911      	ldr	r1, [pc, #68]	; (1b938 <net_buf_put+0x4c>)
   1b8f2:	4812      	ldr	r0, [pc, #72]	; (1b93c <net_buf_put+0x50>)
   1b8f4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b8f8:	f008 f876 	bl	239e8 <assert_print>
   1b8fc:	f44f 7100 	mov.w	r1, #512	; 0x200
	__ASSERT_NO_MSG(buf);
   1b900:	480d      	ldr	r0, [pc, #52]	; (1b938 <net_buf_put+0x4c>)
   1b902:	f008 f86a 	bl	239da <assert_post_action>
   1b906:	b9a1      	cbnz	r1, 1b932 <net_buf_put+0x46>
   1b908:	490b      	ldr	r1, [pc, #44]	; (1b938 <net_buf_put+0x4c>)
   1b90a:	480c      	ldr	r0, [pc, #48]	; (1b93c <net_buf_put+0x50>)
   1b90c:	f240 2201 	movw	r2, #513	; 0x201
   1b910:	f008 f86a 	bl	239e8 <assert_print>
   1b914:	f240 2101 	movw	r1, #513	; 0x201
   1b918:	e7f2      	b.n	1b900 <net_buf_put+0x14>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   1b91a:	7953      	ldrb	r3, [r2, #5]
   1b91c:	f043 0301 	orr.w	r3, r3, #1
   1b920:	7153      	strb	r3, [r2, #5]
   1b922:	4622      	mov	r2, r4
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b924:	6814      	ldr	r4, [r2, #0]
   1b926:	2c00      	cmp	r4, #0
   1b928:	d1f7      	bne.n	1b91a <net_buf_put+0x2e>
	}

	k_fifo_put_list(fifo, buf, tail);
}
   1b92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put_list(fifo, buf, tail);
   1b92e:	f004 be23 	b.w	20578 <k_queue_append_list>
   1b932:	460a      	mov	r2, r1
   1b934:	e7f6      	b.n	1b924 <net_buf_put+0x38>
   1b936:	bf00      	nop
   1b938:	0002a588 	.word	0x0002a588
   1b93c:	000280bd 	.word	0x000280bd

0001b940 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1b940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1b944:	4605      	mov	r5, r0
   1b946:	b328      	cbz	r0, 1b994 <net_buf_unref+0x54>
   1b948:	4e1b      	ldr	r6, [pc, #108]	; (1b9b8 <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1b94a:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1b94c:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1b950:	462c      	mov	r4, r5
   1b952:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1b954:	7923      	ldrb	r3, [r4, #4]
   1b956:	3b01      	subs	r3, #1
   1b958:	b2db      	uxtb	r3, r3
   1b95a:	7123      	strb	r3, [r4, #4]
   1b95c:	b9c3      	cbnz	r3, 1b990 <net_buf_unref+0x50>
		if (buf->__buf) {
   1b95e:	6921      	ldr	r1, [r4, #16]
   1b960:	b159      	cbz	r1, 1b97a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1b962:	7963      	ldrb	r3, [r4, #5]
   1b964:	079b      	lsls	r3, r3, #30
   1b966:	d407      	bmi.n	1b978 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b968:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1b96a:	fb08 6303 	mla	r3, r8, r3, r6
   1b96e:	4620      	mov	r0, r4
   1b970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b972:	681b      	ldr	r3, [r3, #0]
   1b974:	689b      	ldr	r3, [r3, #8]
   1b976:	4798      	blx	r3
			buf->__buf = NULL;
   1b978:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1b97a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1b97c:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1b97e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1b982:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1b984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b986:	b183      	cbz	r3, 1b9aa <net_buf_unref+0x6a>
			pool->destroy(buf);
   1b988:	4620      	mov	r0, r4
   1b98a:	4798      	blx	r3
	while (buf) {
   1b98c:	2d00      	cmp	r5, #0
   1b98e:	d1df      	bne.n	1b950 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1b990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1b994:	4909      	ldr	r1, [pc, #36]	; (1b9bc <net_buf_unref+0x7c>)
   1b996:	480a      	ldr	r0, [pc, #40]	; (1b9c0 <net_buf_unref+0x80>)
   1b998:	f44f 7204 	mov.w	r2, #528	; 0x210
   1b99c:	f008 f824 	bl	239e8 <assert_print>
   1b9a0:	4806      	ldr	r0, [pc, #24]	; (1b9bc <net_buf_unref+0x7c>)
   1b9a2:	f44f 7104 	mov.w	r1, #528	; 0x210
   1b9a6:	f008 f818 	bl	239da <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1b9aa:	4621      	mov	r1, r4
   1b9ac:	fb00 6008 	mla	r0, r0, r8, r6
   1b9b0:	f00b fa19 	bl	26de6 <k_queue_prepend>
}
   1b9b4:	e7ea      	b.n	1b98c <net_buf_unref+0x4c>
   1b9b6:	bf00      	nop
   1b9b8:	20000960 	.word	0x20000960
   1b9bc:	0002a588 	.word	0x0002a588
   1b9c0:	000280bd 	.word	0x000280bd

0001b9c4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1b9c4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b9c6:	b950      	cbnz	r0, 1b9de <net_buf_ref+0x1a>
   1b9c8:	4907      	ldr	r1, [pc, #28]	; (1b9e8 <net_buf_ref+0x24>)
   1b9ca:	4808      	ldr	r0, [pc, #32]	; (1b9ec <net_buf_ref+0x28>)
   1b9cc:	f240 223f 	movw	r2, #575	; 0x23f
   1b9d0:	f008 f80a 	bl	239e8 <assert_print>
   1b9d4:	4804      	ldr	r0, [pc, #16]	; (1b9e8 <net_buf_ref+0x24>)
   1b9d6:	f240 213f 	movw	r1, #575	; 0x23f
   1b9da:	f007 fffe 	bl	239da <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b9de:	7902      	ldrb	r2, [r0, #4]
   1b9e0:	3201      	adds	r2, #1
   1b9e2:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1b9e4:	bd08      	pop	{r3, pc}
   1b9e6:	bf00      	nop
   1b9e8:	0002a588 	.word	0x0002a588
   1b9ec:	000280bd 	.word	0x000280bd

0001b9f0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1b9f0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b9f2:	4603      	mov	r3, r0
   1b9f4:	b950      	cbnz	r0, 1ba0c <net_buf_frag_last+0x1c>
   1b9f6:	4908      	ldr	r1, [pc, #32]	; (1ba18 <net_buf_frag_last+0x28>)
   1b9f8:	4808      	ldr	r0, [pc, #32]	; (1ba1c <net_buf_frag_last+0x2c>)
   1b9fa:	f44f 721f 	mov.w	r2, #636	; 0x27c
   1b9fe:	f007 fff3 	bl	239e8 <assert_print>
   1ba02:	4805      	ldr	r0, [pc, #20]	; (1ba18 <net_buf_frag_last+0x28>)
   1ba04:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1ba08:	f007 ffe7 	bl	239da <assert_post_action>

	while (buf->frags) {
   1ba0c:	4618      	mov	r0, r3
   1ba0e:	681b      	ldr	r3, [r3, #0]
   1ba10:	2b00      	cmp	r3, #0
   1ba12:	d1fb      	bne.n	1ba0c <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1ba14:	bd08      	pop	{r3, pc}
   1ba16:	bf00      	nop
   1ba18:	0002a588 	.word	0x0002a588
   1ba1c:	000280bd 	.word	0x000280bd

0001ba20 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1ba20:	b570      	push	{r4, r5, r6, lr}
   1ba22:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1ba24:	4604      	mov	r4, r0
   1ba26:	b950      	cbnz	r0, 1ba3e <net_buf_frag_insert+0x1e>
   1ba28:	490e      	ldr	r1, [pc, #56]	; (1ba64 <net_buf_frag_insert+0x44>)
   1ba2a:	480f      	ldr	r0, [pc, #60]	; (1ba68 <net_buf_frag_insert+0x48>)
   1ba2c:	f240 2287 	movw	r2, #647	; 0x287
   1ba30:	f007 ffda 	bl	239e8 <assert_print>
   1ba34:	f240 2187 	movw	r1, #647	; 0x287
	__ASSERT_NO_MSG(frag);
   1ba38:	480a      	ldr	r0, [pc, #40]	; (1ba64 <net_buf_frag_insert+0x44>)
   1ba3a:	f007 ffce 	bl	239da <assert_post_action>
   1ba3e:	b941      	cbnz	r1, 1ba52 <net_buf_frag_insert+0x32>
   1ba40:	4908      	ldr	r1, [pc, #32]	; (1ba64 <net_buf_frag_insert+0x44>)
   1ba42:	4809      	ldr	r0, [pc, #36]	; (1ba68 <net_buf_frag_insert+0x48>)
   1ba44:	f44f 7222 	mov.w	r2, #648	; 0x288
   1ba48:	f007 ffce 	bl	239e8 <assert_print>
   1ba4c:	f44f 7122 	mov.w	r1, #648	; 0x288
   1ba50:	e7f2      	b.n	1ba38 <net_buf_frag_insert+0x18>

	if (parent->frags) {
   1ba52:	6806      	ldr	r6, [r0, #0]
   1ba54:	b11e      	cbz	r6, 1ba5e <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ba56:	4608      	mov	r0, r1
   1ba58:	f7ff ffca 	bl	1b9f0 <net_buf_frag_last>
   1ba5c:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ba5e:	6025      	str	r5, [r4, #0]
}
   1ba60:	bd70      	pop	{r4, r5, r6, pc}
   1ba62:	bf00      	nop
   1ba64:	0002a588 	.word	0x0002a588
   1ba68:	000280bd 	.word	0x000280bd

0001ba6c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ba6c:	b538      	push	{r3, r4, r5, lr}
   1ba6e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1ba70:	460c      	mov	r4, r1
   1ba72:	b951      	cbnz	r1, 1ba8a <net_buf_frag_add+0x1e>
   1ba74:	490b      	ldr	r1, [pc, #44]	; (1baa4 <net_buf_frag_add+0x38>)
   1ba76:	480c      	ldr	r0, [pc, #48]	; (1baa8 <net_buf_frag_add+0x3c>)
   1ba78:	f240 2293 	movw	r2, #659	; 0x293
   1ba7c:	f007 ffb4 	bl	239e8 <assert_print>
   1ba80:	4808      	ldr	r0, [pc, #32]	; (1baa4 <net_buf_frag_add+0x38>)
   1ba82:	f240 2193 	movw	r1, #659	; 0x293
   1ba86:	f007 ffa8 	bl	239da <assert_post_action>

	if (!head) {
   1ba8a:	b920      	cbnz	r0, 1ba96 <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1ba8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1ba90:	4608      	mov	r0, r1
   1ba92:	f7ff bf97 	b.w	1b9c4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1ba96:	f7ff ffab 	bl	1b9f0 <net_buf_frag_last>
   1ba9a:	4621      	mov	r1, r4
   1ba9c:	f7ff ffc0 	bl	1ba20 <net_buf_frag_insert>
}
   1baa0:	4628      	mov	r0, r5
   1baa2:	bd38      	pop	{r3, r4, r5, pc}
   1baa4:	0002a588 	.word	0x0002a588
   1baa8:	000280bd 	.word	0x000280bd

0001baac <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1baac:	b508      	push	{r3, lr}
   1baae:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1bab0:	6800      	ldr	r0, [r0, #0]
   1bab2:	689a      	ldr	r2, [r3, #8]
   1bab4:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1bab6:	4291      	cmp	r1, r2
   1bab8:	d90a      	bls.n	1bad0 <net_buf_simple_push+0x24>
   1baba:	4908      	ldr	r1, [pc, #32]	; (1badc <net_buf_simple_push+0x30>)
   1babc:	4808      	ldr	r0, [pc, #32]	; (1bae0 <net_buf_simple_push+0x34>)
   1babe:	f240 4217 	movw	r2, #1047	; 0x417
   1bac2:	f007 ff91 	bl	239e8 <assert_print>
   1bac6:	4805      	ldr	r0, [pc, #20]	; (1badc <net_buf_simple_push+0x30>)
   1bac8:	f240 4117 	movw	r1, #1047	; 0x417
   1bacc:	f007 ff85 	bl	239da <assert_post_action>
	buf->len += len;
   1bad0:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1bad2:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1bad4:	4411      	add	r1, r2
	buf->data -= len;
   1bad6:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1bad8:	8099      	strh	r1, [r3, #4]
}
   1bada:	bd08      	pop	{r3, pc}
   1badc:	0002a588 	.word	0x0002a588
   1bae0:	000280bd 	.word	0x000280bd

0001bae4 <net_buf_simple_pull>:
{
   1bae4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1bae6:	8882      	ldrh	r2, [r0, #4]
   1bae8:	428a      	cmp	r2, r1
{
   1baea:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1baec:	d20a      	bcs.n	1bb04 <net_buf_simple_pull+0x20>
   1baee:	4908      	ldr	r1, [pc, #32]	; (1bb10 <net_buf_simple_pull+0x2c>)
   1baf0:	4808      	ldr	r0, [pc, #32]	; (1bb14 <net_buf_simple_pull+0x30>)
   1baf2:	f240 4277 	movw	r2, #1143	; 0x477
   1baf6:	f007 ff77 	bl	239e8 <assert_print>
   1bafa:	4805      	ldr	r0, [pc, #20]	; (1bb10 <net_buf_simple_pull+0x2c>)
   1bafc:	f240 4177 	movw	r1, #1143	; 0x477
   1bb00:	f007 ff6b 	bl	239da <assert_post_action>
	buf->len -= len;
   1bb04:	1a52      	subs	r2, r2, r1
   1bb06:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1bb08:	6800      	ldr	r0, [r0, #0]
   1bb0a:	4408      	add	r0, r1
   1bb0c:	6018      	str	r0, [r3, #0]
}
   1bb0e:	bd08      	pop	{r3, pc}
   1bb10:	0002a588 	.word	0x0002a588
   1bb14:	000280bd 	.word	0x000280bd

0001bb18 <net_buf_simple_pull_mem>:
{
   1bb18:	b508      	push	{r3, lr}
   1bb1a:	4603      	mov	r3, r0
	void *data = buf->data;
   1bb1c:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1bb1e:	889a      	ldrh	r2, [r3, #4]
   1bb20:	428a      	cmp	r2, r1
   1bb22:	d20a      	bcs.n	1bb3a <net_buf_simple_pull_mem+0x22>
   1bb24:	4907      	ldr	r1, [pc, #28]	; (1bb44 <net_buf_simple_pull_mem+0x2c>)
   1bb26:	4808      	ldr	r0, [pc, #32]	; (1bb48 <net_buf_simple_pull_mem+0x30>)
   1bb28:	f240 4283 	movw	r2, #1155	; 0x483
   1bb2c:	f007 ff5c 	bl	239e8 <assert_print>
   1bb30:	4804      	ldr	r0, [pc, #16]	; (1bb44 <net_buf_simple_pull_mem+0x2c>)
   1bb32:	f240 4183 	movw	r1, #1155	; 0x483
   1bb36:	f007 ff50 	bl	239da <assert_post_action>
	buf->len -= len;
   1bb3a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1bb3c:	4401      	add	r1, r0
	buf->len -= len;
   1bb3e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1bb40:	6019      	str	r1, [r3, #0]
}
   1bb42:	bd08      	pop	{r3, pc}
   1bb44:	0002a588 	.word	0x0002a588
   1bb48:	000280bd 	.word	0x000280bd

0001bb4c <net_buf_simple_add>:
{
   1bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1bb4e:	8885      	ldrh	r5, [r0, #4]
   1bb50:	6803      	ldr	r3, [r0, #0]
   1bb52:	460e      	mov	r6, r1
   1bb54:	4604      	mov	r4, r0
   1bb56:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1bb58:	f00a fcf8 	bl	2654c <net_buf_simple_tailroom>
   1bb5c:	42b0      	cmp	r0, r6
   1bb5e:	d20a      	bcs.n	1bb76 <net_buf_simple_add+0x2a>
   1bb60:	4907      	ldr	r1, [pc, #28]	; (1bb80 <net_buf_simple_add+0x34>)
   1bb62:	4808      	ldr	r0, [pc, #32]	; (1bb84 <net_buf_simple_add+0x38>)
   1bb64:	f44f 724a 	mov.w	r2, #808	; 0x328
   1bb68:	f007 ff3e 	bl	239e8 <assert_print>
   1bb6c:	4804      	ldr	r0, [pc, #16]	; (1bb80 <net_buf_simple_add+0x34>)
   1bb6e:	f44f 714a 	mov.w	r1, #808	; 0x328
   1bb72:	f007 ff32 	bl	239da <assert_post_action>
	buf->len += len;
   1bb76:	4435      	add	r5, r6
   1bb78:	80a5      	strh	r5, [r4, #4]
}
   1bb7a:	4638      	mov	r0, r7
   1bb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb7e:	bf00      	nop
   1bb80:	0002a588 	.word	0x0002a588
   1bb84:	000280bd 	.word	0x000280bd

0001bb88 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1bb88:	b508      	push	{r3, lr}
   1bb8a:	4804      	ldr	r0, [pc, #16]	; (1bb9c <xoshiro128_initialize+0x14>)
   1bb8c:	f00b f8b7 	bl	26cfe <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1bb90:	2800      	cmp	r0, #0
}
   1bb92:	bf0c      	ite	eq
   1bb94:	f06f 0012 	mvneq.w	r0, #18
   1bb98:	2000      	movne	r0, #0
   1bb9a:	bd08      	pop	{r3, pc}
   1bb9c:	00027200 	.word	0x00027200

0001bba0 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1bba0:	4b05      	ldr	r3, [pc, #20]	; (1bbb8 <adc_context_start_sampling+0x18>)
   1bba2:	2201      	movs	r2, #1
   1bba4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1bba8:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
   1bbac:	b109      	cbz	r1, 1bbb2 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbae:	60da      	str	r2, [r3, #12]
}
   1bbb0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbb2:	601a      	str	r2, [r3, #0]
   1bbb4:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1bbb6:	4770      	bx	lr
   1bbb8:	40007000 	.word	0x40007000

0001bbbc <adc_nrfx_channel_setup>:
{
   1bbbc:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1bbbe:	7908      	ldrb	r0, [r1, #4]
   1bbc0:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1bbc4:	2c07      	cmp	r4, #7
   1bbc6:	d81d      	bhi.n	1bc04 <adc_nrfx_channel_setup+0x48>
	switch (channel_cfg->gain) {
   1bbc8:	780b      	ldrb	r3, [r1, #0]
   1bbca:	2b0b      	cmp	r3, #11
   1bbcc:	d816      	bhi.n	1bbfc <adc_nrfx_channel_setup+0x40>
   1bbce:	e8df f003 	tbb	[pc, r3]
   1bbd2:	0707      	.short	0x0707
   1bbd4:	06150707 	.word	0x06150707
   1bbd8:	110f1515 	.word	0x110f1515
   1bbdc:	1315      	.short	0x1315
		config.gain = NRF_SAADC_GAIN1_2;
   1bbde:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   1bbe0:	784a      	ldrb	r2, [r1, #1]
   1bbe2:	2a03      	cmp	r2, #3
   1bbe4:	d011      	beq.n	1bc0a <adc_nrfx_channel_setup+0x4e>
   1bbe6:	2a04      	cmp	r2, #4
   1bbe8:	d022      	beq.n	1bc30 <adc_nrfx_channel_setup+0x74>
		LOG_ERR("Selected ADC reference is not valid");
   1bbea:	482e      	ldr	r0, [pc, #184]	; (1bca4 <adc_nrfx_channel_setup+0xe8>)
   1bbec:	2145      	movs	r1, #69	; 0x45
   1bbee:	e007      	b.n	1bc00 <adc_nrfx_channel_setup+0x44>
		config.gain = NRF_SAADC_GAIN1;
   1bbf0:	2305      	movs	r3, #5
		break;
   1bbf2:	e7f5      	b.n	1bbe0 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   1bbf4:	2306      	movs	r3, #6
		break;
   1bbf6:	e7f3      	b.n	1bbe0 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   1bbf8:	2307      	movs	r3, #7
		break;
   1bbfa:	e7f1      	b.n	1bbe0 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   1bbfc:	482a      	ldr	r0, [pc, #168]	; (1bca8 <adc_nrfx_channel_setup+0xec>)
   1bbfe:	2145      	movs	r1, #69	; 0x45
   1bc00:	f007 ff00 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   1bc04:	f06f 0015 	mvn.w	r0, #21
}
   1bc08:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   1bc0a:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1bc0c:	884a      	ldrh	r2, [r1, #2]
   1bc0e:	f244 060a 	movw	r6, #16394	; 0x400a
   1bc12:	42b2      	cmp	r2, r6
   1bc14:	d040      	beq.n	1bc98 <adc_nrfx_channel_setup+0xdc>
   1bc16:	d80d      	bhi.n	1bc34 <adc_nrfx_channel_setup+0x78>
   1bc18:	f244 0603 	movw	r6, #16387	; 0x4003
   1bc1c:	42b2      	cmp	r2, r6
   1bc1e:	d017      	beq.n	1bc50 <adc_nrfx_channel_setup+0x94>
   1bc20:	f244 0605 	movw	r6, #16389	; 0x4005
   1bc24:	42b2      	cmp	r2, r6
   1bc26:	d035      	beq.n	1bc94 <adc_nrfx_channel_setup+0xd8>
   1bc28:	b3b2      	cbz	r2, 1bc98 <adc_nrfx_channel_setup+0xdc>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1bc2a:	4820      	ldr	r0, [pc, #128]	; (1bcac <adc_nrfx_channel_setup+0xf0>)
   1bc2c:	2145      	movs	r1, #69	; 0x45
   1bc2e:	e7e7      	b.n	1bc00 <adc_nrfx_channel_setup+0x44>
	nrf_saadc_channel_config_t config = {
   1bc30:	2500      	movs	r5, #0
   1bc32:	e7eb      	b.n	1bc0c <adc_nrfx_channel_setup+0x50>
	switch (channel_cfg->acquisition_time) {
   1bc34:	f244 0614 	movw	r6, #16404	; 0x4014
   1bc38:	42b2      	cmp	r2, r6
   1bc3a:	d02f      	beq.n	1bc9c <adc_nrfx_channel_setup+0xe0>
   1bc3c:	f244 0628 	movw	r6, #16424	; 0x4028
   1bc40:	42b2      	cmp	r2, r6
   1bc42:	d02d      	beq.n	1bca0 <adc_nrfx_channel_setup+0xe4>
   1bc44:	f244 060f 	movw	r6, #16399	; 0x400f
   1bc48:	42b2      	cmp	r2, r6
   1bc4a:	d1ee      	bne.n	1bc2a <adc_nrfx_channel_setup+0x6e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1bc4c:	2203      	movs	r2, #3
   1bc4e:	e000      	b.n	1bc52 <adc_nrfx_channel_setup+0x96>
	nrf_saadc_channel_config_t config = {
   1bc50:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1bc52:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1bc56:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1bc58:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   1bc5c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1bc60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1bc64:	0122      	lsls	r2, r4, #4
   1bc66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1bc6a:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   1bc6e:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   1bc70:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1bc74:	0123      	lsls	r3, r4, #4
   1bc76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bc7a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   1bc7e:	798a      	ldrb	r2, [r1, #6]
   1bc80:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1bc84:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1bc88:	4b09      	ldr	r3, [pc, #36]	; (1bcb0 <adc_nrfx_channel_setup+0xf4>)
   1bc8a:	794a      	ldrb	r2, [r1, #5]
   1bc8c:	4423      	add	r3, r4
   1bc8e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return 0;
   1bc92:	e7b9      	b.n	1bc08 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->acquisition_time) {
   1bc94:	2201      	movs	r2, #1
   1bc96:	e7dc      	b.n	1bc52 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1bc98:	2202      	movs	r2, #2
   1bc9a:	e7da      	b.n	1bc52 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1bc9c:	2204      	movs	r2, #4
   1bc9e:	e7d8      	b.n	1bc52 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1bca0:	2205      	movs	r2, #5
   1bca2:	e7d6      	b.n	1bc52 <adc_nrfx_channel_setup+0x96>
   1bca4:	0002a5d8 	.word	0x0002a5d8
   1bca8:	0002a5b4 	.word	0x0002a5b4
   1bcac:	0002a601 	.word	0x0002a601
   1bcb0:	200004e8 	.word	0x200004e8

0001bcb4 <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
   1bcb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
   1bcb6:	6846      	ldr	r6, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   1bcb8:	1e73      	subs	r3, r6, #1
   1bcba:	2bfe      	cmp	r3, #254	; 0xfe
static int start_read(const struct device *dev,
   1bcbc:	4605      	mov	r5, r0
	if (!selected_channels ||
   1bcbe:	d904      	bls.n	1bcca <start_read.constprop.0+0x16>
	    (selected_channels & ~BIT_MASK(SAADC_CH_NUM))) {
		LOG_ERR("Invalid selection of channels");
   1bcc0:	485e      	ldr	r0, [pc, #376]	; (1be3c <start_read.constprop.0+0x188>)
   1bcc2:	2145      	movs	r1, #69	; 0x45
		LOG_ERR(
   1bcc4:	f007 fe9e 	bl	23a04 <z_log_minimal_printk>
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
	if (error) {
   1bcc8:	e011      	b.n	1bcee <start_read.constprop.0+0x3a>
   1bcca:	2200      	movs	r2, #0
    p_reg->CH[channel].PSELP = pselp;
   1bccc:	485c      	ldr	r0, [pc, #368]	; (1be40 <start_read.constprop.0+0x18c>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1bcce:	4f5d      	ldr	r7, [pc, #372]	; (1be44 <start_read.constprop.0+0x190>)
	active_channels = 0U;
   1bcd0:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   1bcd2:	fa26 f302 	lsr.w	r3, r6, r2
   1bcd6:	f013 0301 	ands.w	r3, r3, #1
   1bcda:	d02f      	beq.n	1bd3c <start_read.constprop.0+0x88>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1bcdc:	f817 c002 	ldrb.w	ip, [r7, r2]
   1bce0:	f1bc 0f00 	cmp.w	ip, #0
   1bce4:	d107      	bne.n	1bcf6 <start_read.constprop.0+0x42>
				LOG_ERR("Channel %u not configured",
   1bce6:	4858      	ldr	r0, [pc, #352]	; (1be48 <start_read.constprop.0+0x194>)
   1bce8:	2145      	movs	r1, #69	; 0x45
   1bcea:	f007 fe8b 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   1bcee:	f06f 0015 	mvn.w	r0, #21

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   1bcf2:	b003      	add	sp, #12
   1bcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1bcf6:	eb00 1e02 	add.w	lr, r0, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1bcfa:	7c6c      	ldrb	r4, [r5, #17]
   1bcfc:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   1bd00:	3c00      	subs	r4, #0
   1bd02:	bf18      	it	ne
   1bd04:	2401      	movne	r4, #1
   1bd06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1bd0a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1bd0e:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1bd12:	f102 0351 	add.w	r3, r2, #81	; 0x51
   1bd16:	011b      	lsls	r3, r3, #4
			++active_channels;
   1bd18:	3101      	adds	r1, #1
   1bd1a:	f840 c003 	str.w	ip, [r0, r3]
   1bd1e:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   1bd20:	3201      	adds	r2, #1
   1bd22:	2a08      	cmp	r2, #8
   1bd24:	d1d5      	bne.n	1bcd2 <start_read.constprop.0+0x1e>
	error = set_resolution(sequence);
   1bd26:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
   1bd28:	f1a2 0308 	sub.w	r3, r2, #8
   1bd2c:	2b06      	cmp	r3, #6
   1bd2e:	d817      	bhi.n	1bd60 <start_read.constprop.0+0xac>
   1bd30:	e8df f003 	tbb	[pc, r3]
   1bd34:	161b1619 	.word	0x161b1619
   1bd38:	1609      	.short	0x1609
   1bd3a:	14          	.byte	0x14
   1bd3b:	00          	.byte	0x00
   1bd3c:	f102 0451 	add.w	r4, r2, #81	; 0x51
   1bd40:	0124      	lsls	r4, r4, #4
   1bd42:	5103      	str	r3, [r0, r4]
}
   1bd44:	e7ec      	b.n	1bd20 <start_read.constprop.0+0x6c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1bd46:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1bd48:	483d      	ldr	r0, [pc, #244]	; (1be40 <start_read.constprop.0+0x18c>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1bd4a:	2901      	cmp	r1, #1
   1bd4c:	f8c0 35f0 	str.w	r3, [r0, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1bd50:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1bd52:	d90c      	bls.n	1bd6e <start_read.constprop.0+0xba>
   1bd54:	b16a      	cbz	r2, 1bd72 <start_read.constprop.0+0xbe>
		LOG_ERR(
   1bd56:	483d      	ldr	r0, [pc, #244]	; (1be4c <start_read.constprop.0+0x198>)
   1bd58:	2145      	movs	r1, #69	; 0x45
   1bd5a:	e7b3      	b.n	1bcc4 <start_read.constprop.0+0x10>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1bd5c:	2303      	movs	r3, #3
		break;
   1bd5e:	e7f3      	b.n	1bd48 <start_read.constprop.0+0x94>
		LOG_ERR("ADC resolution value %d is not valid",
   1bd60:	483b      	ldr	r0, [pc, #236]	; (1be50 <start_read.constprop.0+0x19c>)
   1bd62:	2145      	movs	r1, #69	; 0x45
   1bd64:	e7c1      	b.n	1bcea <start_read.constprop.0+0x36>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1bd66:	2300      	movs	r3, #0
   1bd68:	e7ee      	b.n	1bd48 <start_read.constprop.0+0x94>
	switch (sequence->resolution) {
   1bd6a:	2301      	movs	r3, #1
   1bd6c:	e7ec      	b.n	1bd48 <start_read.constprop.0+0x94>
	switch (sequence->oversampling) {
   1bd6e:	2a08      	cmp	r2, #8
   1bd70:	d80e      	bhi.n	1bd90 <start_read.constprop.0+0xdc>
    p_reg->OVERSAMPLE = oversample;
   1bd72:	f8c0 25f4 	str.w	r2, [r0, #1524]	; 0x5f4
	if (sequence->options) {
   1bd76:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1bd78:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   1bd7a:	b962      	cbnz	r2, 1bd96 <start_read.constprop.0+0xe2>
	if (sequence->buffer_size < needed_buffer_size) {
   1bd7c:	68ea      	ldr	r2, [r5, #12]
   1bd7e:	429a      	cmp	r2, r3
   1bd80:	d20d      	bcs.n	1bd9e <start_read.constprop.0+0xea>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1bd82:	4834      	ldr	r0, [pc, #208]	; (1be54 <start_read.constprop.0+0x1a0>)
   1bd84:	2145      	movs	r1, #69	; 0x45
   1bd86:	f007 fe3d 	bl	23a04 <z_log_minimal_printk>
		return -ENOMEM;
   1bd8a:	f06f 000b 	mvn.w	r0, #11
   1bd8e:	e7b0      	b.n	1bcf2 <start_read.constprop.0+0x3e>
		LOG_ERR("Oversampling value %d is not valid",
   1bd90:	4831      	ldr	r0, [pc, #196]	; (1be58 <start_read.constprop.0+0x1a4>)
   1bd92:	2145      	movs	r1, #69	; 0x45
   1bd94:	e7a9      	b.n	1bcea <start_read.constprop.0+0x36>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1bd96:	8992      	ldrh	r2, [r2, #12]
   1bd98:	fb02 3303 	mla	r3, r2, r3, r3
   1bd9c:	e7ee      	b.n	1bd7c <start_read.constprop.0+0xc8>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1bd9e:	4b28      	ldr	r3, [pc, #160]	; (1be40 <start_read.constprop.0+0x18c>)
   1bda0:	68aa      	ldr	r2, [r5, #8]
   1bda2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1bda6:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   1bda8:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   1bdac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1bdae:	4c2b      	ldr	r4, [pc, #172]	; (1be5c <start_read.constprop.0+0x1a8>)
   1bdb0:	f104 067c 	add.w	r6, r4, #124	; 0x7c
   1bdb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1bdb6:	683b      	ldr	r3, [r7, #0]
   1bdb8:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   1bdba:	2600      	movs	r6, #0
   1bdbc:	6726      	str	r6, [r4, #112]	; 0x70

	if (sequence->options) {
   1bdbe:	682b      	ldr	r3, [r5, #0]
   1bdc0:	4627      	mov	r7, r4
   1bdc2:	b3a3      	cbz	r3, 1be2e <start_read.constprop.0+0x17a>
		ctx->options = *sequence->options;
   1bdc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bdc6:	f104 0590 	add.w	r5, r4, #144	; 0x90
   1bdca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1bdce:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
   1bdd0:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   1bdd4:	b358      	cbz	r0, 1be2e <start_read.constprop.0+0x17a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bdd6:	f3bf 8f5b 	dmb	ish
   1bdda:	e857 3f00 	ldrex	r3, [r7]
   1bdde:	e847 6200 	strex	r2, r6, [r7]
   1bde2:	2a00      	cmp	r2, #0
   1bde4:	d1f9      	bne.n	1bdda <start_read.constprop.0+0x126>
   1bde6:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1bdea:	491d      	ldr	r1, [pc, #116]	; (1be60 <start_read.constprop.0+0x1ac>)
   1bdec:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   1bdf0:	4a1c      	ldr	r2, [pc, #112]	; (1be64 <start_read.constprop.0+0x1b0>)
   1bdf2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1bdf6:	460f      	mov	r7, r1
   1bdf8:	4631      	mov	r1, r6
   1bdfa:	fbe5 7100 	umlal	r7, r1, r5, r0
   1bdfe:	2300      	movs	r3, #0
   1be00:	4638      	mov	r0, r7
   1be02:	f7e4 f96d 	bl	e0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1be06:	2200      	movs	r2, #0
   1be08:	e9cd 0100 	strd	r0, r1, [sp]
   1be0c:	2300      	movs	r3, #0
   1be0e:	f104 0008 	add.w	r0, r4, #8
   1be12:	f006 fce5 	bl	227e0 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
   1be16:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1be1a:	b963      	cbnz	r3, 1be36 <start_read.constprop.0+0x182>
	return z_impl_k_sem_take(sem, timeout);
   1be1c:	4812      	ldr	r0, [pc, #72]	; (1be68 <start_read.constprop.0+0x1b4>)
   1be1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1be22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1be26:	f004 fc8d 	bl	20744 <z_impl_k_sem_take>
	return ctx->status;
   1be2a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1be2c:	e761      	b.n	1bcf2 <start_read.constprop.0+0x3e>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1be2e:	480b      	ldr	r0, [pc, #44]	; (1be5c <start_read.constprop.0+0x1a8>)
   1be30:	f7ff feb6 	bl	1bba0 <adc_context_start_sampling>
   1be34:	e7ef      	b.n	1be16 <start_read.constprop.0+0x162>
		return 0;
   1be36:	2000      	movs	r0, #0
	return error;
   1be38:	e75b      	b.n	1bcf2 <start_read.constprop.0+0x3e>
   1be3a:	bf00      	nop
   1be3c:	0002a631 	.word	0x0002a631
   1be40:	40007000 	.word	0x40007000
   1be44:	20000590 	.word	0x20000590
   1be48:	0002a654 	.word	0x0002a654
   1be4c:	0002a69d 	.word	0x0002a69d
   1be50:	0002a673 	.word	0x0002a673
   1be54:	0002a6fc 	.word	0x0002a6fc
   1be58:	0002a6d4 	.word	0x0002a6d4
   1be5c:	200004e8 	.word	0x200004e8
   1be60:	000f423f 	.word	0x000f423f
   1be64:	000f4240 	.word	0x000f4240
   1be68:	20000540 	.word	0x20000540

0001be6c <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   1be6c:	b570      	push	{r4, r5, r6, lr}
   1be6e:	460c      	mov	r4, r1
   1be70:	4616      	mov	r6, r2
	ctx->asynchronous = asynchronous;
   1be72:	4d0c      	ldr	r5, [pc, #48]	; (1bea4 <adc_nrfx_read_async+0x38>)
   1be74:	480c      	ldr	r0, [pc, #48]	; (1bea8 <adc_nrfx_read_async+0x3c>)
   1be76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1be7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1be7e:	f004 fc61 	bl	20744 <z_impl_k_sem_take>
   1be82:	2301      	movs	r3, #1
   1be84:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
   1be88:	4620      	mov	r0, r4
	ctx->signal = signal;
   1be8a:	676e      	str	r6, [r5, #116]	; 0x74
   1be8c:	f7ff ff12 	bl	1bcb4 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   1be90:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   1be94:	4604      	mov	r4, r0
   1be96:	b103      	cbz	r3, 1be9a <adc_nrfx_read_async+0x2e>
   1be98:	b110      	cbz	r0, 1bea0 <adc_nrfx_read_async+0x34>
	z_impl_k_sem_give(sem);
   1be9a:	4803      	ldr	r0, [pc, #12]	; (1bea8 <adc_nrfx_read_async+0x3c>)
   1be9c:	f004 fc18 	bl	206d0 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1bea0:	4620      	mov	r0, r4
   1bea2:	bd70      	pop	{r4, r5, r6, pc}
   1bea4:	200004e8 	.word	0x200004e8
   1bea8:	20000528 	.word	0x20000528

0001beac <adc_nrfx_read>:
{
   1beac:	b538      	push	{r3, r4, r5, lr}
   1beae:	460c      	mov	r4, r1
	ctx->asynchronous = asynchronous;
   1beb0:	4d0c      	ldr	r5, [pc, #48]	; (1bee4 <adc_nrfx_read+0x38>)
	return z_impl_k_sem_take(sem, timeout);
   1beb2:	480d      	ldr	r0, [pc, #52]	; (1bee8 <adc_nrfx_read+0x3c>)
   1beb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1beb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bebc:	f004 fc42 	bl	20744 <z_impl_k_sem_take>
   1bec0:	2300      	movs	r3, #0
   1bec2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   1bec6:	676b      	str	r3, [r5, #116]	; 0x74
	error = start_read(dev, sequence);
   1bec8:	4620      	mov	r0, r4
   1beca:	f7ff fef3 	bl	1bcb4 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   1bece:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   1bed2:	4604      	mov	r4, r0
   1bed4:	b103      	cbz	r3, 1bed8 <adc_nrfx_read+0x2c>
   1bed6:	b110      	cbz	r0, 1bede <adc_nrfx_read+0x32>
	z_impl_k_sem_give(sem);
   1bed8:	4803      	ldr	r0, [pc, #12]	; (1bee8 <adc_nrfx_read+0x3c>)
   1beda:	f004 fbf9 	bl	206d0 <z_impl_k_sem_give>
}
   1bede:	4620      	mov	r0, r4
   1bee0:	bd38      	pop	{r3, r4, r5, pc}
   1bee2:	bf00      	nop
   1bee4:	200004e8 	.word	0x200004e8
   1bee8:	20000528 	.word	0x20000528

0001beec <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1beec:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1beee:	4b0e      	ldr	r3, [pc, #56]	; (1bf28 <init_saadc+0x3c>)
   1bef0:	2400      	movs	r4, #0
   1bef2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1bef6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1befa:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1befe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1bf02:	2212      	movs	r2, #18
   1bf04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1bf08:	2007      	movs	r0, #7
   1bf0a:	f7f6 fff5 	bl	12ef8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bf0e:	4622      	mov	r2, r4
   1bf10:	2101      	movs	r1, #1
   1bf12:	2007      	movs	r0, #7
   1bf14:	f7f7 f820 	bl	12f58 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1bf18:	4804      	ldr	r0, [pc, #16]	; (1bf2c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1bf1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1bf1c:	b913      	cbnz	r3, 1bf24 <init_saadc+0x38>
   1bf1e:	3040      	adds	r0, #64	; 0x40
   1bf20:	f004 fbd6 	bl	206d0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1bf24:	2000      	movs	r0, #0
   1bf26:	bd10      	pop	{r4, pc}
   1bf28:	40007000 	.word	0x40007000
   1bf2c:	200004e8 	.word	0x200004e8

0001bf30 <saadc_irq_handler>:
{
   1bf30:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf32:	4b34      	ldr	r3, [pc, #208]	; (1c004 <saadc_irq_handler+0xd4>)
   1bf34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1bf38:	2a00      	cmp	r2, #0
   1bf3a:	d056      	beq.n	1bfea <saadc_irq_handler+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bf3c:	2200      	movs	r2, #0
   1bf3e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1bf42:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1bf46:	4c30      	ldr	r4, [pc, #192]	; (1c008 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bf48:	2101      	movs	r1, #1
   1bf4a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1bf4c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1bf50:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1bf52:	4625      	mov	r5, r4
   1bf54:	b3d3      	cbz	r3, 1bfcc <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
   1bf56:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1bf5a:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		if (callback) {
   1bf5e:	b133      	cbz	r3, 1bf6e <saadc_irq_handler+0x3e>
			action = callback(dev,
   1bf60:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   1bf64:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1bf66:	2801      	cmp	r0, #1
   1bf68:	d014      	beq.n	1bf94 <saadc_irq_handler+0x64>
   1bf6a:	2802      	cmp	r0, #2
   1bf6c:	d028      	beq.n	1bfc0 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1bf6e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1bf72:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
   1bf76:	429a      	cmp	r2, r3
   1bf78:	d922      	bls.n	1bfc0 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1bf7a:	3301      	adds	r3, #1
   1bf7c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1bf80:	4b20      	ldr	r3, [pc, #128]	; (1c004 <saadc_irq_handler+0xd4>)
   1bf82:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1bf86:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1bf8a:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1bf8c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1bf90:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1bf94:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1bf98:	b923      	cbnz	r3, 1bfa4 <saadc_irq_handler+0x74>
}
   1bf9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1bf9e:	481a      	ldr	r0, [pc, #104]	; (1c008 <saadc_irq_handler+0xd8>)
   1bfa0:	f7ff bdfe 	b.w	1bba0 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1bfa4:	f3bf 8f5b 	dmb	ish
   1bfa8:	e855 3f00 	ldrex	r3, [r5]
   1bfac:	1e5a      	subs	r2, r3, #1
   1bfae:	e845 2100 	strex	r1, r2, [r5]
   1bfb2:	2900      	cmp	r1, #0
   1bfb4:	d1f8      	bne.n	1bfa8 <saadc_irq_handler+0x78>
   1bfb6:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1bfba:	2b01      	cmp	r3, #1
   1bfbc:	dced      	bgt.n	1bf9a <saadc_irq_handler+0x6a>
   1bfbe:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1bfc0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1bfc4:	b113      	cbz	r3, 1bfcc <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
   1bfc6:	4811      	ldr	r0, [pc, #68]	; (1c00c <saadc_irq_handler+0xdc>)
   1bfc8:	f00a ffe8 	bl	26f9c <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
   1bfcc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1bfd0:	b14b      	cbz	r3, 1bfe6 <saadc_irq_handler+0xb6>
		if (ctx->signal) {
   1bfd2:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1bfd4:	b110      	cbz	r0, 1bfdc <saadc_irq_handler+0xac>
	return z_impl_k_poll_signal_raise(sig, result);
   1bfd6:	2100      	movs	r1, #0
   1bfd8:	f006 fe88 	bl	22cec <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   1bfdc:	480c      	ldr	r0, [pc, #48]	; (1c010 <saadc_irq_handler+0xe0>)
   1bfde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bfe2:	f004 bb75 	b.w	206d0 <z_impl_k_sem_give>
   1bfe6:	480b      	ldr	r0, [pc, #44]	; (1c014 <saadc_irq_handler+0xe4>)
   1bfe8:	e7f9      	b.n	1bfde <saadc_irq_handler+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bfea:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1bfee:	2900      	cmp	r1, #0
   1bff0:	d0e5      	beq.n	1bfbe <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bff2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1bff6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bffa:	2201      	movs	r2, #1
   1bffc:	609a      	str	r2, [r3, #8]
   1bffe:	601a      	str	r2, [r3, #0]
   1c000:	605a      	str	r2, [r3, #4]
}
   1c002:	e7dc      	b.n	1bfbe <saadc_irq_handler+0x8e>
   1c004:	40007000 	.word	0x40007000
   1c008:	200004e8 	.word	0x200004e8
   1c00c:	200004f0 	.word	0x200004f0
   1c010:	20000528 	.word	0x20000528
   1c014:	20000540 	.word	0x20000540

0001c018 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1c018:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c01a:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1c01c:	490a      	ldr	r1, [pc, #40]	; (1c048 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c01e:	4a0b      	ldr	r2, [pc, #44]	; (1c04c <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c020:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c022:	2340      	movs	r3, #64	; 0x40
   1c024:	9300      	str	r3, [sp, #0]
   1c026:	1149      	asrs	r1, r1, #5
{
   1c028:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c02a:	4623      	mov	r3, r4
   1c02c:	4808      	ldr	r0, [pc, #32]	; (1c050 <onoff_start+0x38>)
   1c02e:	f00a fad2 	bl	265d6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1c032:	1e01      	subs	r1, r0, #0
   1c034:	da05      	bge.n	1c042 <onoff_start+0x2a>
		notify(mgr, err);
   1c036:	4628      	mov	r0, r5
   1c038:	4623      	mov	r3, r4
	}
}
   1c03a:	b003      	add	sp, #12
   1c03c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1c040:	4718      	bx	r3
}
   1c042:	b003      	add	sp, #12
   1c044:	bd30      	pop	{r4, r5, pc}
   1c046:	bf00      	nop
   1c048:	20002284 	.word	0x20002284
   1c04c:	00026641 	.word	0x00026641
   1c050:	000271d0 	.word	0x000271d0

0001c054 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c054:	b2c9      	uxtb	r1, r1
   1c056:	2901      	cmp	r1, #1
{
   1c058:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c05a:	d908      	bls.n	1c06e <get_status+0x1a>
   1c05c:	4908      	ldr	r1, [pc, #32]	; (1c080 <get_status+0x2c>)
   1c05e:	4809      	ldr	r0, [pc, #36]	; (1c084 <get_status+0x30>)
   1c060:	227a      	movs	r2, #122	; 0x7a
   1c062:	f007 fcc1 	bl	239e8 <assert_print>
   1c066:	4806      	ldr	r0, [pc, #24]	; (1c080 <get_status+0x2c>)
   1c068:	217a      	movs	r1, #122	; 0x7a
   1c06a:	f007 fcb6 	bl	239da <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c06e:	6903      	ldr	r3, [r0, #16]
   1c070:	220c      	movs	r2, #12
   1c072:	fb01 3302 	mla	r3, r1, r2, r3
   1c076:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1c078:	f000 0007 	and.w	r0, r0, #7
   1c07c:	bd08      	pop	{r3, pc}
   1c07e:	bf00      	nop
   1c080:	0002a742 	.word	0x0002a742
   1c084:	000280bd 	.word	0x000280bd

0001c088 <stop>:
{
   1c088:	b570      	push	{r4, r5, r6, lr}
   1c08a:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c08c:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1c08e:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c090:	d90a      	bls.n	1c0a8 <stop+0x20>
   1c092:	4918      	ldr	r1, [pc, #96]	; (1c0f4 <stop+0x6c>)
   1c094:	4818      	ldr	r0, [pc, #96]	; (1c0f8 <stop+0x70>)
   1c096:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   1c09a:	f007 fca5 	bl	239e8 <assert_print>
   1c09e:	4815      	ldr	r0, [pc, #84]	; (1c0f4 <stop+0x6c>)
   1c0a0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1c0a4:	f007 fc99 	bl	239da <assert_post_action>
	__asm__ volatile(
   1c0a8:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c0ac:	f3ef 8511 	mrs	r5, BASEPRI
   1c0b0:	f384 8812 	msr	BASEPRI_MAX, r4
   1c0b4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c0b8:	260c      	movs	r6, #12
   1c0ba:	fb06 3401 	mla	r4, r6, r1, r3
   1c0be:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c0c0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1c0c4:	d008      	beq.n	1c0d8 <stop+0x50>
   1c0c6:	42a2      	cmp	r2, r4
   1c0c8:	d006      	beq.n	1c0d8 <stop+0x50>
	__asm__ volatile(
   1c0ca:	f385 8811 	msr	BASEPRI, r5
   1c0ce:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1c0d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c0d6:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c0d8:	4371      	muls	r1, r6
   1c0da:	440b      	add	r3, r1
   1c0dc:	2201      	movs	r2, #1
   1c0de:	649a      	str	r2, [r3, #72]	; 0x48
   1c0e0:	f385 8811 	msr	BASEPRI, r5
   1c0e4:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1c0e8:	6843      	ldr	r3, [r0, #4]
   1c0ea:	440b      	add	r3, r1
   1c0ec:	685b      	ldr	r3, [r3, #4]
   1c0ee:	4798      	blx	r3
	return 0;
   1c0f0:	2000      	movs	r0, #0
   1c0f2:	e7f0      	b.n	1c0d6 <stop+0x4e>
   1c0f4:	0002a742 	.word	0x0002a742
   1c0f8:	000280bd 	.word	0x000280bd

0001c0fc <onoff_stop>:
{
   1c0fc:	b570      	push	{r4, r5, r6, lr}
   1c0fe:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1c100:	4906      	ldr	r1, [pc, #24]	; (1c11c <onoff_stop+0x20>)
   1c102:	1a41      	subs	r1, r0, r1
{
   1c104:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c106:	1149      	asrs	r1, r1, #5
   1c108:	4805      	ldr	r0, [pc, #20]	; (1c120 <onoff_stop+0x24>)
   1c10a:	2240      	movs	r2, #64	; 0x40
   1c10c:	f7ff ffbc 	bl	1c088 <stop>
	notify(mgr, res);
   1c110:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c112:	4601      	mov	r1, r0
	notify(mgr, res);
   1c114:	4620      	mov	r0, r4
}
   1c116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1c11a:	4718      	bx	r3
   1c11c:	20002284 	.word	0x20002284
   1c120:	000271d0 	.word	0x000271d0

0001c124 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c124:	2200      	movs	r2, #0
{
   1c126:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c128:	2101      	movs	r1, #1
{
   1c12a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c12c:	4610      	mov	r0, r2
   1c12e:	f7f6 ff13 	bl	12f58 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1c132:	480f      	ldr	r0, [pc, #60]	; (1c170 <clk_init+0x4c>)
   1c134:	f002 fce8 	bl	1eb08 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1c138:	4b0e      	ldr	r3, [pc, #56]	; (1c174 <clk_init+0x50>)
   1c13a:	4298      	cmp	r0, r3
   1c13c:	d115      	bne.n	1c16a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1c13e:	f00a fd2a 	bl	26b96 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1c142:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c144:	490c      	ldr	r1, [pc, #48]	; (1c178 <clk_init+0x54>)
   1c146:	4630      	mov	r0, r6
   1c148:	f007 fbc3 	bl	238d2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c14c:	2800      	cmp	r0, #0
   1c14e:	db0b      	blt.n	1c168 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c150:	2501      	movs	r5, #1
   1c152:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1c154:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c156:	4908      	ldr	r1, [pc, #32]	; (1c178 <clk_init+0x54>)
   1c158:	f104 0020 	add.w	r0, r4, #32
   1c15c:	f007 fbb9 	bl	238d2 <onoff_manager_init>
		if (err < 0) {
   1c160:	2800      	cmp	r0, #0
   1c162:	db01      	blt.n	1c168 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c164:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1c166:	2000      	movs	r0, #0
}
   1c168:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c16a:	f06f 0004 	mvn.w	r0, #4
   1c16e:	e7fb      	b.n	1c168 <clk_init+0x44>
   1c170:	0001c1b1 	.word	0x0001c1b1
   1c174:	0bad0000 	.word	0x0bad0000
   1c178:	00027b2c 	.word	0x00027b2c

0001c17c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c17c:	b570      	push	{r4, r5, r6, lr}
   1c17e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c180:	230c      	movs	r3, #12
   1c182:	4809      	ldr	r0, [pc, #36]	; (1c1a8 <clkstarted_handle.constprop.0+0x2c>)
   1c184:	434b      	muls	r3, r1
   1c186:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1c188:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1c18c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1c18e:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1c190:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1c192:	4418      	add	r0, r3
   1c194:	f00a fa0c 	bl	265b0 <set_on_state>
	if (callback) {
   1c198:	b12d      	cbz	r5, 1c1a6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c19a:	4632      	mov	r2, r6
   1c19c:	462b      	mov	r3, r5
   1c19e:	4803      	ldr	r0, [pc, #12]	; (1c1ac <clkstarted_handle.constprop.0+0x30>)
}
   1c1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c1a4:	4718      	bx	r3
}
   1c1a6:	bd70      	pop	{r4, r5, r6, pc}
   1c1a8:	20002284 	.word	0x20002284
   1c1ac:	000271d0 	.word	0x000271d0

0001c1b0 <clock_event_handler>:
	switch (event) {
   1c1b0:	2801      	cmp	r0, #1
{
   1c1b2:	b508      	push	{r3, lr}
	switch (event) {
   1c1b4:	d006      	beq.n	1c1c4 <clock_event_handler+0x14>
   1c1b6:	2803      	cmp	r0, #3
   1c1b8:	d008      	beq.n	1c1cc <clock_event_handler+0x1c>
   1c1ba:	b990      	cbnz	r0, 1c1e2 <clock_event_handler+0x32>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c1bc:	4b0e      	ldr	r3, [pc, #56]	; (1c1f8 <clock_event_handler+0x48>)
   1c1be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c1c0:	075b      	lsls	r3, r3, #29
   1c1c2:	d117      	bne.n	1c1f4 <clock_event_handler+0x44>
}
   1c1c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c1c8:	f7ff bfd8 	b.w	1c17c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1c1cc:	490b      	ldr	r1, [pc, #44]	; (1c1fc <clock_event_handler+0x4c>)
   1c1ce:	480c      	ldr	r0, [pc, #48]	; (1c200 <clock_event_handler+0x50>)
   1c1d0:	f240 225f 	movw	r2, #607	; 0x25f
   1c1d4:	f007 fc08 	bl	239e8 <assert_print>
   1c1d8:	f240 215f 	movw	r1, #607	; 0x25f
		__ASSERT_NO_MSG(0);
   1c1dc:	4807      	ldr	r0, [pc, #28]	; (1c1fc <clock_event_handler+0x4c>)
   1c1de:	f007 fbfc 	bl	239da <assert_post_action>
   1c1e2:	4906      	ldr	r1, [pc, #24]	; (1c1fc <clock_event_handler+0x4c>)
   1c1e4:	4806      	ldr	r0, [pc, #24]	; (1c200 <clock_event_handler+0x50>)
   1c1e6:	f240 2263 	movw	r2, #611	; 0x263
   1c1ea:	f007 fbfd 	bl	239e8 <assert_print>
   1c1ee:	f240 2163 	movw	r1, #611	; 0x263
   1c1f2:	e7f3      	b.n	1c1dc <clock_event_handler+0x2c>
}
   1c1f4:	bd08      	pop	{r3, pc}
   1c1f6:	bf00      	nop
   1c1f8:	20002284 	.word	0x20002284
   1c1fc:	0002a742 	.word	0x0002a742
   1c200:	000280bd 	.word	0x000280bd

0001c204 <generic_hfclk_start>:
{
   1c204:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c206:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c20a:	f3ef 8111 	mrs	r1, BASEPRI
   1c20e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c212:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c216:	4a12      	ldr	r2, [pc, #72]	; (1c260 <generic_hfclk_start+0x5c>)
   1c218:	6813      	ldr	r3, [r2, #0]
   1c21a:	f043 0002 	orr.w	r0, r3, #2
   1c21e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c220:	07da      	lsls	r2, r3, #31
   1c222:	d408      	bmi.n	1c236 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1c224:	f381 8811 	msr	BASEPRI, r1
   1c228:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c22c:	2001      	movs	r0, #1
}
   1c22e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c232:	f002 bc33 	b.w	1ea9c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c23a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c23e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c242:	07d3      	lsls	r3, r2, #31
   1c244:	d5ee      	bpl.n	1c224 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1c246:	4807      	ldr	r0, [pc, #28]	; (1c264 <generic_hfclk_start+0x60>)
   1c248:	f00a f9b2 	bl	265b0 <set_on_state>
   1c24c:	f381 8811 	msr	BASEPRI, r1
   1c250:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1c254:	2000      	movs	r0, #0
}
   1c256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c25a:	f7ff bf8f 	b.w	1c17c <clkstarted_handle.constprop.0>
   1c25e:	bf00      	nop
   1c260:	200022dc 	.word	0x200022dc
   1c264:	200022cc 	.word	0x200022cc

0001c268 <api_blocking_start>:
{
   1c268:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c26a:	2200      	movs	r2, #0
   1c26c:	2301      	movs	r3, #1
   1c26e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c272:	ab04      	add	r3, sp, #16
   1c274:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c278:	4a09      	ldr	r2, [pc, #36]	; (1c2a0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c27a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c27e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c280:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c284:	f00a f9d5 	bl	26632 <api_start>
	if (err < 0) {
   1c288:	2800      	cmp	r0, #0
   1c28a:	db05      	blt.n	1c298 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c28c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c290:	2300      	movs	r3, #0
   1c292:	4668      	mov	r0, sp
   1c294:	f004 fa56 	bl	20744 <z_impl_k_sem_take>
}
   1c298:	b007      	add	sp, #28
   1c29a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c29e:	bf00      	nop
   1c2a0:	00026653 	.word	0x00026653

0001c2a4 <lfclk_start>:
{
   1c2a4:	b510      	push	{r4, lr}
	if (!once) {
   1c2a6:	4c07      	ldr	r4, [pc, #28]	; (1c2c4 <lfclk_start+0x20>)
   1c2a8:	7823      	ldrb	r3, [r4, #0]
   1c2aa:	b92b      	cbnz	r3, 1c2b8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1c2ac:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1c2b0:	f00a fe4e 	bl	26f50 <z_impl_k_busy_wait>
		once = true;
   1c2b4:	2301      	movs	r3, #1
   1c2b6:	7023      	strb	r3, [r4, #0]
}
   1c2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1c2bc:	2000      	movs	r0, #0
   1c2be:	f002 bbed 	b.w	1ea9c <nrfx_clock_start>
   1c2c2:	bf00      	nop
   1c2c4:	20002661 	.word	0x20002661

0001c2c8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c2c8:	4b09      	ldr	r3, [pc, #36]	; (1c2f0 <generic_hfclk_stop+0x28>)
   1c2ca:	f3bf 8f5b 	dmb	ish
   1c2ce:	e853 2f00 	ldrex	r2, [r3]
   1c2d2:	f022 0102 	bic.w	r1, r2, #2
   1c2d6:	e843 1000 	strex	r0, r1, [r3]
   1c2da:	2800      	cmp	r0, #0
   1c2dc:	d1f7      	bne.n	1c2ce <generic_hfclk_stop+0x6>
   1c2de:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1c2e2:	07d3      	lsls	r3, r2, #31
   1c2e4:	d402      	bmi.n	1c2ec <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c2e6:	2001      	movs	r0, #1
   1c2e8:	f002 bbf8 	b.w	1eadc <nrfx_clock_stop>
}
   1c2ec:	4770      	bx	lr
   1c2ee:	bf00      	nop
   1c2f0:	200022dc 	.word	0x200022dc

0001c2f4 <z_nrf_clock_control_lf_on>:
{
   1c2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c2f8:	4944      	ldr	r1, [pc, #272]	; (1c40c <z_nrf_clock_control_lf_on+0x118>)
   1c2fa:	f3bf 8f5b 	dmb	ish
   1c2fe:	4606      	mov	r6, r0
   1c300:	2201      	movs	r2, #1
   1c302:	e851 3f00 	ldrex	r3, [r1]
   1c306:	e841 2000 	strex	r0, r2, [r1]
   1c30a:	2800      	cmp	r0, #0
   1c30c:	d1f9      	bne.n	1c302 <z_nrf_clock_control_lf_on+0xe>
   1c30e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1c312:	b99b      	cbnz	r3, 1c33c <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c314:	493e      	ldr	r1, [pc, #248]	; (1c410 <z_nrf_clock_control_lf_on+0x11c>)
		err = onoff_request(mgr, &cli);
   1c316:	483f      	ldr	r0, [pc, #252]	; (1c414 <z_nrf_clock_control_lf_on+0x120>)
   1c318:	604b      	str	r3, [r1, #4]
   1c31a:	60cb      	str	r3, [r1, #12]
   1c31c:	608a      	str	r2, [r1, #8]
   1c31e:	f7f5 f90b 	bl	11538 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1c322:	2800      	cmp	r0, #0
   1c324:	da0a      	bge.n	1c33c <z_nrf_clock_control_lf_on+0x48>
   1c326:	493c      	ldr	r1, [pc, #240]	; (1c418 <z_nrf_clock_control_lf_on+0x124>)
   1c328:	483c      	ldr	r0, [pc, #240]	; (1c41c <z_nrf_clock_control_lf_on+0x128>)
   1c32a:	f240 2221 	movw	r2, #545	; 0x221
   1c32e:	f007 fb5b 	bl	239e8 <assert_print>
   1c332:	f240 2121 	movw	r1, #545	; 0x221
		__ASSERT_NO_MSG(false);
   1c336:	4838      	ldr	r0, [pc, #224]	; (1c418 <z_nrf_clock_control_lf_on+0x124>)
   1c338:	f007 fb4f 	bl	239da <assert_post_action>
	switch (start_mode) {
   1c33c:	b376      	cbz	r6, 1c39c <z_nrf_clock_control_lf_on+0xa8>
   1c33e:	1e73      	subs	r3, r6, #1
   1c340:	2b01      	cmp	r3, #1
   1c342:	d859      	bhi.n	1c3f8 <z_nrf_clock_control_lf_on+0x104>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c344:	2e01      	cmp	r6, #1
   1c346:	d107      	bne.n	1c358 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c34c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1c350:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c354:	2b01      	cmp	r3, #1
   1c356:	d021      	beq.n	1c39c <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c358:	f00a fcfe 	bl	26d58 <k_is_in_isr>
   1c35c:	4605      	mov	r5, r0
   1c35e:	b9f8      	cbnz	r0, 1c3a0 <z_nrf_clock_control_lf_on+0xac>
	return !z_sys_post_kernel;
   1c360:	4b2f      	ldr	r3, [pc, #188]	; (1c420 <z_nrf_clock_control_lf_on+0x12c>)
   1c362:	781b      	ldrb	r3, [r3, #0]
   1c364:	b1e3      	cbz	r3, 1c3a0 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENCLR = mask;
   1c366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c36a:	2202      	movs	r2, #2
   1c36c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1c370:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c372:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1c424 <z_nrf_clock_control_lf_on+0x130>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c376:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1c37a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c37e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c382:	03d2      	lsls	r2, r2, #15
   1c384:	d516      	bpl.n	1c3b4 <z_nrf_clock_control_lf_on+0xc0>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c386:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c38a:	2b01      	cmp	r3, #1
   1c38c:	d001      	beq.n	1c392 <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c38e:	2e01      	cmp	r6, #1
   1c390:	d110      	bne.n	1c3b4 <z_nrf_clock_control_lf_on+0xc0>
	if (isr_mode) {
   1c392:	b35d      	cbz	r5, 1c3ec <z_nrf_clock_control_lf_on+0xf8>
   1c394:	f387 8811 	msr	BASEPRI, r7
   1c398:	f3bf 8f6f 	isb	sy
}
   1c39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c3a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3a4:	f3ef 8711 	mrs	r7, BASEPRI
   1c3a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3ac:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c3b0:	2501      	movs	r5, #1
   1c3b2:	e7de      	b.n	1c372 <z_nrf_clock_control_lf_on+0x7e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c3b4:	b1ad      	cbz	r5, 1c3e2 <z_nrf_clock_control_lf_on+0xee>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c3b6:	4638      	mov	r0, r7
   1c3b8:	f7f6 fd66 	bl	12e88 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c3bc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c3c0:	2b00      	cmp	r3, #0
   1c3c2:	d1da      	bne.n	1c37a <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c3c4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c3c8:	2a00      	cmp	r2, #0
   1c3ca:	d0d6      	beq.n	1c37a <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c3cc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1c3d0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c3d4:	2301      	movs	r3, #1
   1c3d6:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1c3da:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c3de:	60a3      	str	r3, [r4, #8]
}
   1c3e0:	e7cb      	b.n	1c37a <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   1c3e2:	2100      	movs	r1, #0
   1c3e4:	2021      	movs	r0, #33	; 0x21
   1c3e6:	f005 fda3 	bl	21f30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c3ea:	e7e7      	b.n	1c3bc <z_nrf_clock_control_lf_on+0xc8>
    p_reg->INTENSET = mask;
   1c3ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c3f0:	2202      	movs	r2, #2
   1c3f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c3f6:	e7d1      	b.n	1c39c <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   1c3f8:	4907      	ldr	r1, [pc, #28]	; (1c418 <z_nrf_clock_control_lf_on+0x124>)
   1c3fa:	4808      	ldr	r0, [pc, #32]	; (1c41c <z_nrf_clock_control_lf_on+0x128>)
   1c3fc:	f240 2233 	movw	r2, #563	; 0x233
   1c400:	f007 faf2 	bl	239e8 <assert_print>
   1c404:	f240 2133 	movw	r1, #563	; 0x233
   1c408:	e795      	b.n	1c336 <z_nrf_clock_control_lf_on+0x42>
   1c40a:	bf00      	nop
   1c40c:	20002280 	.word	0x20002280
   1c410:	20002270 	.word	0x20002270
   1c414:	200022a4 	.word	0x200022a4
   1c418:	0002a742 	.word	0x0002a742
   1c41c:	000280bd 	.word	0x000280bd
   1c420:	200032b2 	.word	0x200032b2
   1c424:	e000e100 	.word	0xe000e100

0001c428 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c428:	b508      	push	{r3, lr}
   1c42a:	4807      	ldr	r0, [pc, #28]	; (1c448 <uart_console_init+0x20>)
   1c42c:	f00a fc67 	bl	26cfe <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1c430:	b138      	cbz	r0, 1c442 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c432:	4806      	ldr	r0, [pc, #24]	; (1c44c <uart_console_init+0x24>)
   1c434:	f7f7 fa84 	bl	13940 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c438:	4804      	ldr	r0, [pc, #16]	; (1c44c <uart_console_init+0x24>)
   1c43a:	f7f4 fd73 	bl	10f24 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c43e:	2000      	movs	r0, #0
}
   1c440:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c442:	f06f 0012 	mvn.w	r0, #18
   1c446:	e7fb      	b.n	1c440 <uart_console_init+0x18>
   1c448:	00027230 	.word	0x00027230
   1c44c:	0001c451 	.word	0x0001c451

0001c450 <console_out>:
	if ('\n' == c) {
   1c450:	280a      	cmp	r0, #10
{
   1c452:	b538      	push	{r3, r4, r5, lr}
   1c454:	4d07      	ldr	r5, [pc, #28]	; (1c474 <console_out+0x24>)
   1c456:	4604      	mov	r4, r0
	if ('\n' == c) {
   1c458:	d104      	bne.n	1c464 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1c45a:	68ab      	ldr	r3, [r5, #8]
   1c45c:	210d      	movs	r1, #13
   1c45e:	685b      	ldr	r3, [r3, #4]
   1c460:	4628      	mov	r0, r5
   1c462:	4798      	blx	r3
   1c464:	68ab      	ldr	r3, [r5, #8]
   1c466:	4803      	ldr	r0, [pc, #12]	; (1c474 <console_out+0x24>)
   1c468:	685b      	ldr	r3, [r3, #4]
   1c46a:	b2e1      	uxtb	r1, r4
   1c46c:	4798      	blx	r3
}
   1c46e:	4620      	mov	r0, r4
   1c470:	bd38      	pop	{r3, r4, r5, pc}
   1c472:	bf00      	nop
   1c474:	00027230 	.word	0x00027230

0001c478 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c478:	b510      	push	{r4, lr}
	return port->data;
   1c47a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c47c:	b941      	cbnz	r1, 1c490 <gpio_nrfx_manage_callback+0x18>
   1c47e:	491c      	ldr	r1, [pc, #112]	; (1c4f0 <gpio_nrfx_manage_callback+0x78>)
   1c480:	481c      	ldr	r0, [pc, #112]	; (1c4f4 <gpio_nrfx_manage_callback+0x7c>)
   1c482:	222a      	movs	r2, #42	; 0x2a
   1c484:	f007 fab0 	bl	239e8 <assert_print>
   1c488:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1c48a:	4819      	ldr	r0, [pc, #100]	; (1c4f0 <gpio_nrfx_manage_callback+0x78>)
   1c48c:	f007 faa5 	bl	239da <assert_post_action>
   1c490:	6848      	ldr	r0, [r1, #4]
   1c492:	b930      	cbnz	r0, 1c4a2 <gpio_nrfx_manage_callback+0x2a>
   1c494:	4916      	ldr	r1, [pc, #88]	; (1c4f0 <gpio_nrfx_manage_callback+0x78>)
   1c496:	4817      	ldr	r0, [pc, #92]	; (1c4f4 <gpio_nrfx_manage_callback+0x7c>)
   1c498:	222b      	movs	r2, #43	; 0x2b
   1c49a:	f007 faa5 	bl	239e8 <assert_print>
   1c49e:	212b      	movs	r1, #43	; 0x2b
   1c4a0:	e7f3      	b.n	1c48a <gpio_nrfx_manage_callback+0x12>
	return list->head;
   1c4a2:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c4a4:	b1f8      	cbz	r0, 1c4e6 <gpio_nrfx_manage_callback+0x6e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c4a6:	4288      	cmp	r0, r1
   1c4a8:	d119      	bne.n	1c4de <gpio_nrfx_manage_callback+0x66>
Z_GENLIST_REMOVE(slist, snode)
   1c4aa:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1c4ac:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1c4ae:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c4b0:	42a1      	cmp	r1, r4
   1c4b2:	d100      	bne.n	1c4b6 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   1c4b4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c4b6:	2000      	movs	r0, #0
   1c4b8:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1c4ba:	b12a      	cbz	r2, 1c4c8 <gpio_nrfx_manage_callback+0x50>
	return list->head;
   1c4bc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c4be:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c4c0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c4c2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c4c4:	b902      	cbnz	r2, 1c4c8 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1c4c6:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c4c8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c4ca:	e010      	b.n	1c4ee <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c4cc:	4281      	cmp	r1, r0
   1c4ce:	d106      	bne.n	1c4de <gpio_nrfx_manage_callback+0x66>
	return node->next;
   1c4d0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1c4d2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c4d4:	6898      	ldr	r0, [r3, #8]
   1c4d6:	4281      	cmp	r1, r0
   1c4d8:	d1ed      	bne.n	1c4b6 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   1c4da:	609c      	str	r4, [r3, #8]
}
   1c4dc:	e7eb      	b.n	1c4b6 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
   1c4de:	4604      	mov	r4, r0
   1c4e0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c4e2:	2800      	cmp	r0, #0
   1c4e4:	d1f2      	bne.n	1c4cc <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1c4e6:	2a00      	cmp	r2, #0
   1c4e8:	d1e8      	bne.n	1c4bc <gpio_nrfx_manage_callback+0x44>
				return -EINVAL;
   1c4ea:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1c4ee:	bd10      	pop	{r4, pc}
   1c4f0:	0002a7a8 	.word	0x0002a7a8
   1c4f4:	000280bd 	.word	0x000280bd

0001c4f8 <gpio_nrfx_pin_interrupt_configure>:
{
   1c4f8:	b530      	push	{r4, r5, lr}
	return port->config;
   1c4fa:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c4fc:	7b05      	ldrb	r5, [r0, #12]
   1c4fe:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c502:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c506:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c508:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c50c:	d105      	bne.n	1c51a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c50e:	4620      	mov	r0, r4
   1c510:	f003 f878 	bl	1f604 <nrfx_gpiote_trigger_disable>
		return 0;
   1c514:	2000      	movs	r0, #0
}
   1c516:	b005      	add	sp, #20
   1c518:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c51a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c51c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c520:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c524:	d114      	bne.n	1c550 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c52a:	bf0c      	ite	eq
   1c52c:	2304      	moveq	r3, #4
   1c52e:	2305      	movne	r3, #5
   1c530:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c534:	2300      	movs	r3, #0
   1c536:	4619      	mov	r1, r3
   1c538:	aa02      	add	r2, sp, #8
   1c53a:	4620      	mov	r0, r4
   1c53c:	f002 fe74 	bl	1f228 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c540:	4b26      	ldr	r3, [pc, #152]	; (1c5dc <gpio_nrfx_pin_interrupt_configure+0xe4>)
   1c542:	4298      	cmp	r0, r3
   1c544:	d147      	bne.n	1c5d6 <gpio_nrfx_pin_interrupt_configure+0xde>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c546:	2101      	movs	r1, #1
   1c548:	4620      	mov	r0, r4
   1c54a:	f002 fff5 	bl	1f538 <nrfx_gpiote_trigger_enable>
	return 0;
   1c54e:	e7e1      	b.n	1c514 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c550:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c554:	d021      	beq.n	1c59a <gpio_nrfx_pin_interrupt_configure+0xa2>
   1c556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c55a:	bf14      	ite	ne
   1c55c:	2301      	movne	r3, #1
   1c55e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c560:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c564:	6883      	ldr	r3, [r0, #8]
   1c566:	40cb      	lsrs	r3, r1
   1c568:	07d9      	lsls	r1, r3, #31
   1c56a:	d4e3      	bmi.n	1c534 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c56c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c570:	d1e0      	bne.n	1c534 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1c572:	0963      	lsrs	r3, r4, #5
   1c574:	d106      	bne.n	1c584 <gpio_nrfx_pin_interrupt_configure+0x8c>
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1c576:	f004 031f 	and.w	r3, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1c57a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c57e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c580:	07d2      	lsls	r2, r2, #31
   1c582:	d40c      	bmi.n	1c59e <gpio_nrfx_pin_interrupt_configure+0xa6>
   1c584:	4916      	ldr	r1, [pc, #88]	; (1c5e0 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1c586:	4817      	ldr	r0, [pc, #92]	; (1c5e4 <gpio_nrfx_pin_interrupt_configure+0xec>)
   1c588:	f240 2247 	movw	r2, #583	; 0x247
   1c58c:	f007 fa2c 	bl	239e8 <assert_print>
   1c590:	4813      	ldr	r0, [pc, #76]	; (1c5e0 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1c592:	f240 2147 	movw	r1, #583	; 0x247
   1c596:	f007 fa20 	bl	239da <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c59a:	2303      	movs	r3, #3
   1c59c:	e7e0      	b.n	1c560 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c59e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c5a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1c5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c5aa:	07db      	lsls	r3, r3, #31
   1c5ac:	d4c2      	bmi.n	1c534 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c5ae:	f10d 0507 	add.w	r5, sp, #7
   1c5b2:	4629      	mov	r1, r5
   1c5b4:	4620      	mov	r0, r4
   1c5b6:	f002 ff5b 	bl	1f470 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c5ba:	4b0b      	ldr	r3, [pc, #44]	; (1c5e8 <gpio_nrfx_pin_interrupt_configure+0xf0>)
   1c5bc:	4298      	cmp	r0, r3
   1c5be:	d001      	beq.n	1c5c4 <gpio_nrfx_pin_interrupt_configure+0xcc>
		trigger_config.p_in_channel = &ch;
   1c5c0:	9503      	str	r5, [sp, #12]
   1c5c2:	e7b7      	b.n	1c534 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c5c4:	4628      	mov	r0, r5
   1c5c6:	f002 ffb1 	bl	1f52c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c5ca:	4b04      	ldr	r3, [pc, #16]	; (1c5dc <gpio_nrfx_pin_interrupt_configure+0xe4>)
   1c5cc:	4298      	cmp	r0, r3
   1c5ce:	d0f7      	beq.n	1c5c0 <gpio_nrfx_pin_interrupt_configure+0xc8>
				return -ENOMEM;
   1c5d0:	f06f 000b 	mvn.w	r0, #11
   1c5d4:	e79f      	b.n	1c516 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c5d6:	f06f 0015 	mvn.w	r0, #21
   1c5da:	e79c      	b.n	1c516 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c5dc:	0bad0000 	.word	0x0bad0000
   1c5e0:	0002a7e4 	.word	0x0002a7e4
   1c5e4:	000280bd 	.word	0x000280bd
   1c5e8:	0bad0004 	.word	0x0bad0004

0001c5ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c5ec:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c5ee:	f002 ff8d 	bl	1f50c <nrfx_gpiote_is_init>
   1c5f2:	4604      	mov	r4, r0
   1c5f4:	b968      	cbnz	r0, 1c612 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c5f6:	f002 ff61 	bl	1f4bc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c5fa:	4b08      	ldr	r3, [pc, #32]	; (1c61c <gpio_nrfx_init+0x30>)
   1c5fc:	4298      	cmp	r0, r3
   1c5fe:	d10a      	bne.n	1c616 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c600:	4807      	ldr	r0, [pc, #28]	; (1c620 <gpio_nrfx_init+0x34>)
   1c602:	4621      	mov	r1, r4
   1c604:	f002 ff2e 	bl	1f464 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c608:	4622      	mov	r2, r4
   1c60a:	2105      	movs	r1, #5
   1c60c:	2006      	movs	r0, #6
   1c60e:	f7f6 fca3 	bl	12f58 <z_arm_irq_priority_set>
		return 0;
   1c612:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c614:	bd10      	pop	{r4, pc}
		return -EIO;
   1c616:	f06f 0004 	mvn.w	r0, #4
   1c61a:	e7fb      	b.n	1c614 <gpio_nrfx_init+0x28>
   1c61c:	0bad0000 	.word	0x0bad0000
   1c620:	0001c625 	.word	0x0001c625

0001c624 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c624:	0943      	lsrs	r3, r0, #5
{
   1c626:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c628:	d107      	bne.n	1c63a <nrfx_gpio_handler+0x16>
	return list->head;
   1c62a:	4b10      	ldr	r3, [pc, #64]	; (1c66c <nrfx_gpio_handler+0x48>)
   1c62c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c62e:	b121      	cbz	r1, 1c63a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1c630:	2501      	movs	r5, #1
	return node->next;
   1c632:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c634:	4e0e      	ldr	r6, [pc, #56]	; (1c670 <nrfx_gpio_handler+0x4c>)
   1c636:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c638:	b901      	cbnz	r1, 1c63c <nrfx_gpio_handler+0x18>
}
   1c63a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1c63c:	688a      	ldr	r2, [r1, #8]
   1c63e:	402a      	ands	r2, r5
   1c640:	d00c      	beq.n	1c65c <nrfx_gpio_handler+0x38>
			__ASSERT(cb->handler, "No callback handler!");
   1c642:	684b      	ldr	r3, [r1, #4]
   1c644:	b943      	cbnz	r3, 1c658 <nrfx_gpio_handler+0x34>
   1c646:	490b      	ldr	r1, [pc, #44]	; (1c674 <nrfx_gpio_handler+0x50>)
   1c648:	480b      	ldr	r0, [pc, #44]	; (1c678 <nrfx_gpio_handler+0x54>)
   1c64a:	224d      	movs	r2, #77	; 0x4d
   1c64c:	f007 f9cc 	bl	239e8 <assert_print>
   1c650:	4808      	ldr	r0, [pc, #32]	; (1c674 <nrfx_gpio_handler+0x50>)
   1c652:	214d      	movs	r1, #77	; 0x4d
   1c654:	f007 f9c1 	bl	239da <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c658:	4630      	mov	r0, r6
   1c65a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c65c:	b11c      	cbz	r4, 1c666 <nrfx_gpio_handler+0x42>
   1c65e:	6823      	ldr	r3, [r4, #0]
   1c660:	4621      	mov	r1, r4
   1c662:	461c      	mov	r4, r3
   1c664:	e7e8      	b.n	1c638 <nrfx_gpio_handler+0x14>
   1c666:	4623      	mov	r3, r4
   1c668:	e7fa      	b.n	1c660 <nrfx_gpio_handler+0x3c>
   1c66a:	bf00      	nop
   1c66c:	200022e0 	.word	0x200022e0
   1c670:	000271e8 	.word	0x000271e8
   1c674:	0002a7a8 	.word	0x0002a7a8
   1c678:	000280bd 	.word	0x000280bd

0001c67c <gpio_nrfx_pin_configure>:
{
   1c67c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c680:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c684:	f898 300c 	ldrb.w	r3, [r8, #12]
   1c688:	f001 051f 	and.w	r5, r1, #31
   1c68c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c690:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c692:	4628      	mov	r0, r5
   1c694:	f10d 0103 	add.w	r1, sp, #3
{
   1c698:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c69a:	f002 fee9 	bl	1f470 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c69e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c6a2:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c6a4:	d114      	bne.n	1c6d0 <gpio_nrfx_pin_configure+0x54>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c6a6:	4628      	mov	r0, r5
   1c6a8:	f002 ffd6 	bl	1f658 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c6ac:	4b48      	ldr	r3, [pc, #288]	; (1c7d0 <gpio_nrfx_pin_configure+0x154>)
   1c6ae:	429e      	cmp	r6, r3
   1c6b0:	d16f      	bne.n	1c792 <gpio_nrfx_pin_configure+0x116>
			err = nrfx_gpiote_channel_free(ch);
   1c6b2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c6b6:	f002 ff33 	bl	1f520 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c6ba:	42b0      	cmp	r0, r6
   1c6bc:	d069      	beq.n	1c792 <gpio_nrfx_pin_configure+0x116>
   1c6be:	4945      	ldr	r1, [pc, #276]	; (1c7d4 <gpio_nrfx_pin_configure+0x158>)
   1c6c0:	4845      	ldr	r0, [pc, #276]	; (1c7d8 <gpio_nrfx_pin_configure+0x15c>)
   1c6c2:	226a      	movs	r2, #106	; 0x6a
   1c6c4:	f007 f990 	bl	239e8 <assert_print>
   1c6c8:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c6ca:	4842      	ldr	r0, [pc, #264]	; (1c7d4 <gpio_nrfx_pin_configure+0x158>)
   1c6cc:	f007 f985 	bl	239da <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c6d0:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c6d2:	4619      	mov	r1, r3
   1c6d4:	aa02      	add	r2, sp, #8
   1c6d6:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c6d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c6dc:	f002 fda4 	bl	1f228 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c6e0:	4b3b      	ldr	r3, [pc, #236]	; (1c7d0 <gpio_nrfx_pin_configure+0x154>)
   1c6e2:	4298      	cmp	r0, r3
   1c6e4:	d004      	beq.n	1c6f0 <gpio_nrfx_pin_configure+0x74>
		return NRF_GPIO_PIN_PULLUP;
   1c6e6:	f06f 0015 	mvn.w	r0, #21
}
   1c6ea:	b004      	add	sp, #16
   1c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c6f0:	4286      	cmp	r6, r0
   1c6f2:	d10c      	bne.n	1c70e <gpio_nrfx_pin_configure+0x92>
		err = nrfx_gpiote_channel_free(ch);
   1c6f4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c6f8:	f002 ff12 	bl	1f520 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c6fc:	42b0      	cmp	r0, r6
   1c6fe:	d006      	beq.n	1c70e <gpio_nrfx_pin_configure+0x92>
   1c700:	4934      	ldr	r1, [pc, #208]	; (1c7d4 <gpio_nrfx_pin_configure+0x158>)
   1c702:	4835      	ldr	r0, [pc, #212]	; (1c7d8 <gpio_nrfx_pin_configure+0x15c>)
   1c704:	227c      	movs	r2, #124	; 0x7c
   1c706:	f007 f96f 	bl	239e8 <assert_print>
   1c70a:	217c      	movs	r1, #124	; 0x7c
   1c70c:	e7dd      	b.n	1c6ca <gpio_nrfx_pin_configure+0x4e>
	if (flags & GPIO_OUTPUT) {
   1c70e:	03a6      	lsls	r6, r4, #14
   1c710:	d54e      	bpl.n	1c7b0 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c712:	f240 3306 	movw	r3, #774	; 0x306
   1c716:	4023      	ands	r3, r4
   1c718:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c71c:	d019      	beq.n	1c752 <gpio_nrfx_pin_configure+0xd6>
   1c71e:	d80c      	bhi.n	1c73a <gpio_nrfx_pin_configure+0xbe>
   1c720:	2b06      	cmp	r3, #6
   1c722:	d017      	beq.n	1c754 <gpio_nrfx_pin_configure+0xd8>
   1c724:	d804      	bhi.n	1c730 <gpio_nrfx_pin_configure+0xb4>
   1c726:	b1ab      	cbz	r3, 1c754 <gpio_nrfx_pin_configure+0xd8>
   1c728:	2b02      	cmp	r3, #2
   1c72a:	d1dc      	bne.n	1c6e6 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_D0S1;
   1c72c:	2304      	movs	r3, #4
   1c72e:	e011      	b.n	1c754 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c734:	d1d7      	bne.n	1c6e6 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_H0S1;
   1c736:	2301      	movs	r3, #1
   1c738:	e00c      	b.n	1c754 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c73a:	f240 2202 	movw	r2, #514	; 0x202
   1c73e:	4293      	cmp	r3, r2
   1c740:	d029      	beq.n	1c796 <gpio_nrfx_pin_configure+0x11a>
   1c742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c746:	d028      	beq.n	1c79a <gpio_nrfx_pin_configure+0x11e>
   1c748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c74c:	d1cb      	bne.n	1c6e6 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_S0H1;
   1c74e:	2302      	movs	r3, #2
   1c750:	e000      	b.n	1c754 <gpio_nrfx_pin_configure+0xd8>
		*drive = NRF_GPIO_PIN_H0D1;
   1c752:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c754:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c758:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c75c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c760:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c762:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1c766:	bf54      	ite	pl
   1c768:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c76c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c76e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c770:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c774:	d513      	bpl.n	1c79e <gpio_nrfx_pin_configure+0x122>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c776:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c77a:	2301      	movs	r3, #1
   1c77c:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1c77e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c782:	2200      	movs	r2, #0
   1c784:	a901      	add	r1, sp, #4
   1c786:	4628      	mov	r0, r5
   1c788:	f002 fdf8 	bl	1f37c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c78c:	4b10      	ldr	r3, [pc, #64]	; (1c7d0 <gpio_nrfx_pin_configure+0x154>)
   1c78e:	4298      	cmp	r0, r3
   1c790:	d1a9      	bne.n	1c6e6 <gpio_nrfx_pin_configure+0x6a>
   1c792:	2000      	movs	r0, #0
   1c794:	e7a9      	b.n	1c6ea <gpio_nrfx_pin_configure+0x6e>
		*drive = NRF_GPIO_PIN_D0H1;
   1c796:	2305      	movs	r3, #5
   1c798:	e7dc      	b.n	1c754 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c79a:	2303      	movs	r3, #3
   1c79c:	e7da      	b.n	1c754 <gpio_nrfx_pin_configure+0xd8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c79e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c7a0:	bf41      	itttt	mi
   1c7a2:	2301      	movmi	r3, #1
   1c7a4:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1c7a8:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1c7aa:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1c7ae:	e7e8      	b.n	1c782 <gpio_nrfx_pin_configure+0x106>
	if (flags & GPIO_PULL_UP) {
   1c7b0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c7b2:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1c7b6:	bf54      	ite	pl
   1c7b8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c7bc:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c7be:	461a      	mov	r2, r3
   1c7c0:	a901      	add	r1, sp, #4
   1c7c2:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1c7c4:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c7c8:	f002 fd2e 	bl	1f228 <nrfx_gpiote_input_configure>
   1c7cc:	e7de      	b.n	1c78c <gpio_nrfx_pin_configure+0x110>
   1c7ce:	bf00      	nop
   1c7d0:	0bad0000 	.word	0x0bad0000
   1c7d4:	0002a817 	.word	0x0002a817
   1c7d8:	000280bd 	.word	0x000280bd

0001c7dc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1c7dc:	4b02      	ldr	r3, [pc, #8]	; (1c7e8 <flash_nrf_pages_layout+0xc>)
   1c7de:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1c7e0:	2301      	movs	r3, #1
   1c7e2:	6013      	str	r3, [r2, #0]
}
   1c7e4:	4770      	bx	lr
   1c7e6:	bf00      	nop
   1c7e8:	200022ec 	.word	0x200022ec

0001c7ec <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1c7ec:	4800      	ldr	r0, [pc, #0]	; (1c7f0 <flash_nrf_get_parameters+0x4>)
   1c7ee:	4770      	bx	lr
   1c7f0:	00027bb4 	.word	0x00027bb4

0001c7f4 <flash_nrf_read>:
{
   1c7f4:	b570      	push	{r4, r5, r6, lr}
   1c7f6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1c7f8:	4628      	mov	r0, r5
   1c7fa:	4619      	mov	r1, r3
{
   1c7fc:	4616      	mov	r6, r2
   1c7fe:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1c800:	f009 ff7d 	bl	266fe <is_regular_addr_valid>
   1c804:	b940      	cbnz	r0, 1c818 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c806:	4808      	ldr	r0, [pc, #32]	; (1c828 <flash_nrf_read+0x34>)
   1c808:	4623      	mov	r3, r4
   1c80a:	462a      	mov	r2, r5
   1c80c:	2145      	movs	r1, #69	; 0x45
   1c80e:	f007 f8f9 	bl	23a04 <z_log_minimal_printk>
   1c812:	f06f 0015 	mvn.w	r0, #21
}
   1c816:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1c818:	b124      	cbz	r4, 1c824 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
   1c81a:	4622      	mov	r2, r4
   1c81c:	4629      	mov	r1, r5
   1c81e:	4630      	mov	r0, r6
   1c820:	f007 ff65 	bl	246ee <memcpy>
		return 0;
   1c824:	2000      	movs	r0, #0
   1c826:	e7f6      	b.n	1c816 <flash_nrf_read+0x22>
   1c828:	0002a851 	.word	0x0002a851

0001c82c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1c82c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c82e:	2201      	movs	r2, #1
   1c830:	4611      	mov	r1, r2
   1c832:	4807      	ldr	r0, [pc, #28]	; (1c850 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c834:	4c07      	ldr	r4, [pc, #28]	; (1c854 <nrf_flash_init+0x28>)
   1c836:	f00a fae0 	bl	26dfa <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1c83a:	f002 f9cb 	bl	1ebd4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c83e:	f00a fa52 	bl	26ce6 <nrfx_nvmc_flash_page_count_get>
   1c842:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1c844:	f00a fa4b 	bl	26cde <nrfx_nvmc_flash_page_size_get>
   1c848:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1c84a:	2000      	movs	r0, #0
   1c84c:	bd10      	pop	{r4, pc}
   1c84e:	bf00      	nop
   1c850:	200022f4 	.word	0x200022f4
   1c854:	200022ec 	.word	0x200022ec

0001c858 <flash_nrf_erase>:
{
   1c858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c85a:	b087      	sub	sp, #28
   1c85c:	460e      	mov	r6, r1
   1c85e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c860:	f00a fa3d 	bl	26cde <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1c864:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c866:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1c868:	4630      	mov	r0, r6
   1c86a:	f009 ff48 	bl	266fe <is_regular_addr_valid>
   1c86e:	b358      	cbz	r0, 1c8c8 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1c870:	fbb6 f3f7 	udiv	r3, r6, r7
   1c874:	fb07 6313 	mls	r3, r7, r3, r6
   1c878:	b923      	cbnz	r3, 1c884 <flash_nrf_erase+0x2c>
   1c87a:	fbb5 f4f7 	udiv	r4, r5, r7
   1c87e:	fb07 5414 	mls	r4, r7, r4, r5
   1c882:	b154      	cbz	r4, 1c89a <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1c884:	481f      	ldr	r0, [pc, #124]	; (1c904 <flash_nrf_erase+0xac>)
   1c886:	462b      	mov	r3, r5
   1c888:	4632      	mov	r2, r6
   1c88a:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c88c:	f007 f8ba 	bl	23a04 <z_log_minimal_printk>
			return -EINVAL;
   1c890:	f06f 0415 	mvn.w	r4, #21
}
   1c894:	4620      	mov	r0, r4
   1c896:	b007      	add	sp, #28
   1c898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1c89a:	42bd      	cmp	r5, r7
   1c89c:	d3fa      	bcc.n	1c894 <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1c89e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c8a6:	4818      	ldr	r0, [pc, #96]	; (1c908 <flash_nrf_erase+0xb0>)
   1c8a8:	f003 ff4c 	bl	20744 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1c8ac:	f00a f976 	bl	26b9c <nrf_flash_sync_is_required>
   1c8b0:	ab02      	add	r3, sp, #8
   1c8b2:	4601      	mov	r1, r0
   1c8b4:	b968      	cbnz	r0, 1c8d2 <flash_nrf_erase+0x7a>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1c8b6:	2210      	movs	r2, #16
   1c8b8:	4618      	mov	r0, r3
   1c8ba:	f007 ff23 	bl	24704 <memset>
   1c8be:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1c8c2:	f009 fef8 	bl	266b6 <erase_op>
   1c8c6:	e017      	b.n	1c8f8 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c8c8:	4810      	ldr	r0, [pc, #64]	; (1c90c <flash_nrf_erase+0xb4>)
   1c8ca:	462b      	mov	r3, r5
   1c8cc:	4632      	mov	r2, r6
   1c8ce:	2145      	movs	r1, #69	; 0x45
   1c8d0:	e7dc      	b.n	1c88c <flash_nrf_erase+0x34>
	struct flash_context context = {
   1c8d2:	2210      	movs	r2, #16
   1c8d4:	4621      	mov	r1, r4
   1c8d6:	4618      	mov	r0, r3
   1c8d8:	f007 ff14 	bl	24704 <memset>
   1c8dc:	2201      	movs	r2, #1
   1c8de:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1c8e2:	4a0b      	ldr	r2, [pc, #44]	; (1c910 <flash_nrf_erase+0xb8>)
   1c8e4:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1c8e8:	480a      	ldr	r0, [pc, #40]	; (1c914 <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1c8ea:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1c8ee:	f002 f979 	bl	1ebe4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1c8f2:	4668      	mov	r0, sp
   1c8f4:	f002 f97c 	bl	1ebf0 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1c8f8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1c8fa:	4803      	ldr	r0, [pc, #12]	; (1c908 <flash_nrf_erase+0xb0>)
   1c8fc:	f003 fee8 	bl	206d0 <z_impl_k_sem_give>
}
   1c900:	e7c8      	b.n	1c894 <flash_nrf_erase+0x3c>
   1c902:	bf00      	nop
   1c904:	0002a873 	.word	0x0002a873
   1c908:	200022f4 	.word	0x200022f4
   1c90c:	0002a851 	.word	0x0002a851
   1c910:	000266b7 	.word	0x000266b7
   1c914:	00015e64 	.word	0x00015e64

0001c918 <write_op>:
{
   1c918:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1c91a:	7b03      	ldrb	r3, [r0, #12]
{
   1c91c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1c91e:	b10b      	cbz	r3, 1c924 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1c920:	f00a f93e 	bl	26ba0 <nrf_flash_sync_get_timestamp_begin>
{
   1c924:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1c926:	68a3      	ldr	r3, [r4, #8]
   1c928:	2b03      	cmp	r3, #3
   1c92a:	d806      	bhi.n	1c93a <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c92c:	4a12      	ldr	r2, [pc, #72]	; (1c978 <write_op+0x60>)
   1c92e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c932:	07db      	lsls	r3, r3, #31
   1c934:	d5fb      	bpl.n	1c92e <write_op+0x16>
	return FLASH_OP_DONE;
   1c936:	2000      	movs	r0, #0
}
   1c938:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1c93a:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1c93c:	6860      	ldr	r0, [r4, #4]
   1c93e:	6819      	ldr	r1, [r3, #0]
   1c940:	f002 ffac 	bl	1f89c <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1c944:	6863      	ldr	r3, [r4, #4]
   1c946:	3304      	adds	r3, #4
   1c948:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1c94a:	6823      	ldr	r3, [r4, #0]
   1c94c:	3304      	adds	r3, #4
   1c94e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1c950:	68a3      	ldr	r3, [r4, #8]
   1c952:	3b04      	subs	r3, #4
   1c954:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1c956:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1c958:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1c95a:	2b00      	cmp	r3, #0
   1c95c:	d0e3      	beq.n	1c926 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1c95e:	4628      	mov	r0, r5
   1c960:	f002 f9f0 	bl	1ed44 <nrf_flash_sync_check_time_limit>
   1c964:	2800      	cmp	r0, #0
   1c966:	d0de      	beq.n	1c926 <write_op+0xe>
   1c968:	4a03      	ldr	r2, [pc, #12]	; (1c978 <write_op+0x60>)
   1c96a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c96e:	07d9      	lsls	r1, r3, #31
   1c970:	d5fb      	bpl.n	1c96a <write_op+0x52>
				return FLASH_OP_ONGOING;
   1c972:	2001      	movs	r0, #1
   1c974:	e7e0      	b.n	1c938 <write_op+0x20>
   1c976:	bf00      	nop
   1c978:	4001e000 	.word	0x4001e000

0001c97c <flash_nrf_write>:
{
   1c97c:	b570      	push	{r4, r5, r6, lr}
   1c97e:	460d      	mov	r5, r1
   1c980:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1c982:	4619      	mov	r1, r3
   1c984:	4628      	mov	r0, r5
{
   1c986:	4616      	mov	r6, r2
   1c988:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1c98a:	f009 feb8 	bl	266fe <is_regular_addr_valid>
   1c98e:	b950      	cbnz	r0, 1c9a6 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c990:	481d      	ldr	r0, [pc, #116]	; (1ca08 <flash_nrf_write+0x8c>)
   1c992:	4623      	mov	r3, r4
   1c994:	462a      	mov	r2, r5
   1c996:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c998:	f007 f834 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   1c99c:	f06f 0415 	mvn.w	r4, #21
}
   1c9a0:	4620      	mov	r0, r4
   1c9a2:	b006      	add	sp, #24
   1c9a4:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1c9a6:	ea45 0304 	orr.w	r3, r5, r4
   1c9aa:	079b      	lsls	r3, r3, #30
   1c9ac:	d004      	beq.n	1c9b8 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c9ae:	4817      	ldr	r0, [pc, #92]	; (1ca0c <flash_nrf_write+0x90>)
   1c9b0:	4623      	mov	r3, r4
   1c9b2:	462a      	mov	r2, r5
   1c9b4:	2145      	movs	r1, #69	; 0x45
   1c9b6:	e7ef      	b.n	1c998 <flash_nrf_write+0x1c>
	if (!len) {
   1c9b8:	2c00      	cmp	r4, #0
   1c9ba:	d0f1      	beq.n	1c9a0 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1c9bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c9c4:	4812      	ldr	r0, [pc, #72]	; (1ca10 <flash_nrf_write+0x94>)
   1c9c6:	f003 febd 	bl	20744 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1c9ca:	f00a f8e7 	bl	26b9c <nrf_flash_sync_is_required>
   1c9ce:	4603      	mov	r3, r0
	struct flash_context context = {
   1c9d0:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1c9d4:	a802      	add	r0, sp, #8
   1c9d6:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1c9d8:	b18b      	cbz	r3, 1c9fe <flash_nrf_write+0x82>
	struct flash_context context = {
   1c9da:	2301      	movs	r3, #1
   1c9dc:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1c9e0:	4b0c      	ldr	r3, [pc, #48]	; (1ca14 <flash_nrf_write+0x98>)
   1c9e2:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1c9e6:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1c9ea:	f002 f8fb 	bl	1ebe4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1c9ee:	4668      	mov	r0, sp
   1c9f0:	f002 f8fe 	bl	1ebf0 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1c9f4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1c9f6:	4806      	ldr	r0, [pc, #24]	; (1ca10 <flash_nrf_write+0x94>)
   1c9f8:	f003 fe6a 	bl	206d0 <z_impl_k_sem_give>
}
   1c9fc:	e7d0      	b.n	1c9a0 <flash_nrf_write+0x24>
	struct flash_context context = {
   1c9fe:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1ca02:	f7ff ff89 	bl	1c918 <write_op>
   1ca06:	e7f5      	b.n	1c9f4 <flash_nrf_write+0x78>
   1ca08:	0002a851 	.word	0x0002a851
   1ca0c:	0002a897 	.word	0x0002a897
   1ca10:	200022f4 	.word	0x200022f4
   1ca14:	0001c919 	.word	0x0001c919

0001ca18 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1ca18:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1ca1a:	794b      	ldrb	r3, [r1, #5]
   1ca1c:	2b01      	cmp	r3, #1
   1ca1e:	d120      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1ca20:	798b      	ldrb	r3, [r1, #6]
   1ca22:	2b03      	cmp	r3, #3
   1ca24:	d11d      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1ca26:	79cd      	ldrb	r5, [r1, #7]
   1ca28:	b10d      	cbz	r5, 1ca2e <uarte_nrfx_configure+0x16>
   1ca2a:	2d01      	cmp	r5, #1
   1ca2c:	d119      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1ca2e:	790a      	ldrb	r2, [r1, #4]
   1ca30:	b112      	cbz	r2, 1ca38 <uarte_nrfx_configure+0x20>
   1ca32:	2a02      	cmp	r2, #2
   1ca34:	d115      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
   1ca36:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1ca38:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1ca3a:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1ca3c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1ca40:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   1ca42:	d064      	beq.n	1cb0e <uarte_nrfx_configure+0xf6>
   1ca44:	d82b      	bhi.n	1ca9e <uarte_nrfx_configure+0x86>
   1ca46:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1ca4a:	d063      	beq.n	1cb14 <uarte_nrfx_configure+0xfc>
   1ca4c:	d814      	bhi.n	1ca78 <uarte_nrfx_configure+0x60>
   1ca4e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1ca52:	d061      	beq.n	1cb18 <uarte_nrfx_configure+0x100>
   1ca54:	d808      	bhi.n	1ca68 <uarte_nrfx_configure+0x50>
   1ca56:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1ca5a:	d060      	beq.n	1cb1e <uarte_nrfx_configure+0x106>
   1ca5c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1ca60:	d060      	beq.n	1cb24 <uarte_nrfx_configure+0x10c>
   1ca62:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ca66:	e051      	b.n	1cb0c <uarte_nrfx_configure+0xf4>
   1ca68:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1ca6c:	d05d      	beq.n	1cb2a <uarte_nrfx_configure+0x112>
   1ca6e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1ca72:	d1f6      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1ca74:	4b37      	ldr	r3, [pc, #220]	; (1cb54 <uarte_nrfx_configure+0x13c>)
   1ca76:	e03c      	b.n	1caf2 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1ca78:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1ca7c:	d058      	beq.n	1cb30 <uarte_nrfx_configure+0x118>
   1ca7e:	d807      	bhi.n	1ca90 <uarte_nrfx_configure+0x78>
   1ca80:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1ca84:	d056      	beq.n	1cb34 <uarte_nrfx_configure+0x11c>
   1ca86:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1ca8a:	d1ea      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1ca8c:	4b32      	ldr	r3, [pc, #200]	; (1cb58 <uarte_nrfx_configure+0x140>)
   1ca8e:	e030      	b.n	1caf2 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1ca90:	f647 2412 	movw	r4, #31250	; 0x7a12
   1ca94:	42a3      	cmp	r3, r4
   1ca96:	d1e4      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1ca98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1ca9c:	e029      	b.n	1caf2 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1ca9e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1caa2:	d049      	beq.n	1cb38 <uarte_nrfx_configure+0x120>
   1caa4:	d813      	bhi.n	1cace <uarte_nrfx_configure+0xb6>
   1caa6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1caaa:	d048      	beq.n	1cb3e <uarte_nrfx_configure+0x126>
   1caac:	d809      	bhi.n	1cac2 <uarte_nrfx_configure+0xaa>
   1caae:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1cab2:	42a3      	cmp	r3, r4
   1cab4:	d045      	beq.n	1cb42 <uarte_nrfx_configure+0x12a>
   1cab6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1caba:	d1d2      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1cabc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1cac0:	e017      	b.n	1caf2 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cac2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1cac6:	d1cc      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1cac8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1cacc:	e011      	b.n	1caf2 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cace:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1cad2:	d039      	beq.n	1cb48 <uarte_nrfx_configure+0x130>
   1cad4:	d808      	bhi.n	1cae8 <uarte_nrfx_configure+0xd0>
   1cad6:	4c21      	ldr	r4, [pc, #132]	; (1cb5c <uarte_nrfx_configure+0x144>)
   1cad8:	42a3      	cmp	r3, r4
   1cada:	d038      	beq.n	1cb4e <uarte_nrfx_configure+0x136>
   1cadc:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1cae0:	d1bf      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1cae2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1cae6:	e004      	b.n	1caf2 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cae8:	4c1d      	ldr	r4, [pc, #116]	; (1cb60 <uarte_nrfx_configure+0x148>)
   1caea:	42a3      	cmp	r3, r4
   1caec:	d1b9      	bne.n	1ca62 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1caee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1caf2:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1caf4:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   1caf8:	6843      	ldr	r3, [r0, #4]
   1cafa:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1cafc:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1cafe:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1cb02:	c903      	ldmia	r1, {r0, r1}
   1cb04:	1d23      	adds	r3, r4, #4
   1cb06:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1cb0a:	2000      	movs	r0, #0
}
   1cb0c:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1cb0e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1cb12:	e7ee      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1cb14:	4b13      	ldr	r3, [pc, #76]	; (1cb64 <uarte_nrfx_configure+0x14c>)
   1cb16:	e7ec      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1cb18:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1cb1c:	e7e9      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1cb1e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1cb22:	e7e6      	b.n	1caf2 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cb24:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1cb28:	e7e3      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1cb2a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1cb2e:	e7e0      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1cb30:	4b0d      	ldr	r3, [pc, #52]	; (1cb68 <uarte_nrfx_configure+0x150>)
   1cb32:	e7de      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1cb34:	4b0d      	ldr	r3, [pc, #52]	; (1cb6c <uarte_nrfx_configure+0x154>)
   1cb36:	e7dc      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1cb38:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1cb3c:	e7d9      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1cb3e:	4b0c      	ldr	r3, [pc, #48]	; (1cb70 <uarte_nrfx_configure+0x158>)
   1cb40:	e7d7      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1cb42:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1cb46:	e7d4      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1cb48:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1cb4c:	e7d1      	b.n	1caf2 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1cb4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1cb52:	e7ce      	b.n	1caf2 <uarte_nrfx_configure+0xda>
   1cb54:	0013b000 	.word	0x0013b000
   1cb58:	004ea000 	.word	0x004ea000
   1cb5c:	0003d090 	.word	0x0003d090
   1cb60:	000f4240 	.word	0x000f4240
   1cb64:	00275000 	.word	0x00275000
   1cb68:	0075c000 	.word	0x0075c000
   1cb6c:	003af000 	.word	0x003af000
   1cb70:	013a9000 	.word	0x013a9000

0001cb74 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1cb74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1cb78:	4680      	mov	r8, r0
   1cb7a:	2200      	movs	r2, #0
   1cb7c:	2101      	movs	r1, #1
   1cb7e:	2002      	movs	r0, #2
   1cb80:	f7f6 f9ea 	bl	12f58 <z_arm_irq_priority_set>
   1cb84:	2002      	movs	r0, #2
   1cb86:	f7f6 f9b7 	bl	12ef8 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1cb8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1cb8e:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1cb92:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1cb94:	2100      	movs	r1, #0
   1cb96:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1cb9a:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1cb9e:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1cba2:	aa01      	add	r2, sp, #4
   1cba4:	4648      	mov	r0, r9
   1cba6:	f009 fe9a 	bl	268de <pinctrl_lookup_state>
	if (ret < 0) {
   1cbaa:	1e05      	subs	r5, r0, #0
   1cbac:	db1e      	blt.n	1cbec <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1cbae:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1cbb0:	f8d9 2000 	ldr.w	r2, [r9]
   1cbb4:	7919      	ldrb	r1, [r3, #4]
   1cbb6:	6818      	ldr	r0, [r3, #0]
   1cbb8:	f009 fea7 	bl	2690a <pinctrl_configure_pins>
	if (err < 0) {
   1cbbc:	1e05      	subs	r5, r0, #0
   1cbbe:	db15      	blt.n	1cbec <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1cbc0:	1d31      	adds	r1, r6, #4
   1cbc2:	4640      	mov	r0, r8
   1cbc4:	f7ff ff28 	bl	1ca18 <uarte_nrfx_configure>
	if (err) {
   1cbc8:	4605      	mov	r5, r0
   1cbca:	b978      	cbnz	r0, 1cbec <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1cbcc:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1cbce:	0799      	lsls	r1, r3, #30
   1cbd0:	d524      	bpl.n	1cc1c <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1cbd2:	f106 0018 	add.w	r0, r6, #24
   1cbd6:	f002 fe91 	bl	1f8fc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1cbda:	4b24      	ldr	r3, [pc, #144]	; (1cc6c <uarte_0_init+0xf8>)
   1cbdc:	4298      	cmp	r0, r3
   1cbde:	d009      	beq.n	1cbf4 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1cbe0:	4823      	ldr	r0, [pc, #140]	; (1cc70 <uarte_0_init+0xfc>)
   1cbe2:	2145      	movs	r1, #69	; 0x45
   1cbe4:	f006 ff0e 	bl	23a04 <z_log_minimal_printk>
		return -EIO;
   1cbe8:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   1cbec:	4628      	mov	r0, r5
   1cbee:	b003      	add	sp, #12
   1cbf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cbf4:	7e33      	ldrb	r3, [r6, #24]
   1cbf6:	00db      	lsls	r3, r3, #3
   1cbf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cbfc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1cc00:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1cc04:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1cc08:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cc0c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1cc10:	7e32      	ldrb	r2, [r6, #24]
   1cc12:	2301      	movs	r3, #1
   1cc14:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1cc16:	4a17      	ldr	r2, [pc, #92]	; (1cc74 <uarte_0_init+0x100>)
   1cc18:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cc1c:	2308      	movs	r3, #8
   1cc1e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1cc22:	7a3b      	ldrb	r3, [r7, #8]
   1cc24:	b953      	cbnz	r3, 1cc3c <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cc26:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1cc2a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1cc2e:	6973      	ldr	r3, [r6, #20]
   1cc30:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1cc34:	2301      	movs	r3, #1
   1cc36:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc3a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1cc3c:	687b      	ldr	r3, [r7, #4]
   1cc3e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1cc40:	bf5c      	itt	pl
   1cc42:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1cc46:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cc4a:	687b      	ldr	r3, [r7, #4]
   1cc4c:	06db      	lsls	r3, r3, #27
   1cc4e:	bf44      	itt	mi
   1cc50:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1cc54:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cc58:	6933      	ldr	r3, [r6, #16]
   1cc5a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cc5e:	2300      	movs	r3, #0
   1cc60:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc64:	2301      	movs	r3, #1
   1cc66:	60a3      	str	r3, [r4, #8]
   1cc68:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1cc6a:	e7bf      	b.n	1cbec <uarte_0_init+0x78>
   1cc6c:	0bad0000 	.word	0x0bad0000
   1cc70:	0002a8de 	.word	0x0002a8de
   1cc74:	4001f000 	.word	0x4001f000

0001cc78 <uarte_nrfx_poll_out>:
{
   1cc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc7a:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1cc7c:	6907      	ldr	r7, [r0, #16]
{
   1cc7e:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1cc80:	f00a f86a 	bl	26d58 <k_is_in_isr>
   1cc84:	b9b0      	cbnz	r0, 1ccb4 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1cc86:	4b2e      	ldr	r3, [pc, #184]	; (1cd40 <uarte_nrfx_poll_out+0xc8>)
   1cc88:	781b      	ldrb	r3, [r3, #0]
   1cc8a:	b19b      	cbz	r3, 1ccb4 <uarte_nrfx_poll_out+0x3c>
{
   1cc8c:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1cc8e:	6860      	ldr	r0, [r4, #4]
   1cc90:	f009 fdca 	bl	26828 <is_tx_ready.isra.0>
   1cc94:	bb00      	cbnz	r0, 1ccd8 <uarte_nrfx_poll_out+0x60>
   1cc96:	2001      	movs	r0, #1
   1cc98:	f009 ff92 	bl	26bc0 <nrfx_busy_wait>
   1cc9c:	3e01      	subs	r6, #1
   1cc9e:	d1f6      	bne.n	1cc8e <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1cca0:	2100      	movs	r1, #0
   1cca2:	2021      	movs	r0, #33	; 0x21
   1cca4:	f005 f944 	bl	21f30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1cca8:	e7f0      	b.n	1cc8c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1ccaa:	f386 8811 	msr	BASEPRI, r6
   1ccae:	f3bf 8f6f 	isb	sy
}
   1ccb2:	e7f5      	b.n	1cca0 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1ccb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccb8:	f3ef 8611 	mrs	r6, BASEPRI
   1ccbc:	f383 8812 	msr	BASEPRI_MAX, r3
   1ccc0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1ccc4:	6860      	ldr	r0, [r4, #4]
   1ccc6:	4631      	mov	r1, r6
   1ccc8:	f009 fdae 	bl	26828 <is_tx_ready.isra.0>
   1cccc:	b990      	cbnz	r0, 1ccf4 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1ccce:	f386 8811 	msr	BASEPRI, r6
   1ccd2:	f3bf 8f6f 	isb	sy
}
   1ccd6:	e7ed      	b.n	1ccb4 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1ccd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccdc:	f3ef 8611 	mrs	r6, BASEPRI
   1cce0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cce4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1cce8:	6860      	ldr	r0, [r4, #4]
   1ccea:	4631      	mov	r1, r6
   1ccec:	f009 fd9c 	bl	26828 <is_tx_ready.isra.0>
   1ccf0:	2800      	cmp	r0, #0
   1ccf2:	d0da      	beq.n	1ccaa <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1ccf4:	693b      	ldr	r3, [r7, #16]
   1ccf6:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1ccf8:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ccfa:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1ccfc:	6813      	ldr	r3, [r2, #0]
   1ccfe:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cd02:	2001      	movs	r0, #1
   1cd04:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cd08:	2000      	movs	r0, #0
   1cd0a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1cd0e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1cd12:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cd16:	6852      	ldr	r2, [r2, #4]
   1cd18:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1cd1c:	06d2      	lsls	r2, r2, #27
   1cd1e:	d508      	bpl.n	1cd32 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   1cd20:	6862      	ldr	r2, [r4, #4]
   1cd22:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cd24:	2008      	movs	r0, #8
   1cd26:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1cd2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1cd2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cd32:	2201      	movs	r2, #1
   1cd34:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1cd36:	f381 8811 	msr	BASEPRI, r1
   1cd3a:	f3bf 8f6f 	isb	sy
}
   1cd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cd40:	200032b2 	.word	0x200032b2

0001cd44 <random_byte_get>:
	__asm__ volatile(
   1cd44:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd48:	f3ef 8211 	mrs	r2, BASEPRI
   1cd4c:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd50:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1cd54:	4b09      	ldr	r3, [pc, #36]	; (1cd7c <random_byte_get+0x38>)
   1cd56:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1cd5a:	b161      	cbz	r1, 1cd76 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cd5c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1cd5e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cd62:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1cd66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1cd6a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1cd6c:	f382 8811 	msr	BASEPRI, r2
   1cd70:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1cd74:	4770      	bx	lr
	int retval = -EAGAIN;
   1cd76:	f06f 000a 	mvn.w	r0, #10
   1cd7a:	e7f7      	b.n	1cd6c <random_byte_get+0x28>
   1cd7c:	4000d000 	.word	0x4000d000

0001cd80 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1cd80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd82:	4603      	mov	r3, r0
   1cd84:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1cd86:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1cd88:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1cd8c:	f04f 0540 	mov.w	r5, #64	; 0x40
   1cd90:	f3ef 8211 	mrs	r2, BASEPRI
   1cd94:	f385 8812 	msr	BASEPRI_MAX, r5
   1cd98:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1cd9c:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1cd9e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1cda2:	1be4      	subs	r4, r4, r7
   1cda4:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1cda8:	42a0      	cmp	r0, r4
		len = available;
   1cdaa:	bf88      	it	hi
   1cdac:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1cdae:	183e      	adds	r6, r7, r0
   1cdb0:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1cdb4:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1cdb6:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1cdb8:	f382 8811 	msr	BASEPRI, r2
   1cdbc:	f3bf 8f6f 	isb	sy
   1cdc0:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1cdc2:	428a      	cmp	r2, r1
   1cdc4:	d117      	bne.n	1cdf6 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1cdc6:	4577      	cmp	r7, lr
   1cdc8:	d10d      	bne.n	1cde6 <rng_pool_get+0x66>
	__asm__ volatile(
   1cdca:	f04f 0140 	mov.w	r1, #64	; 0x40
   1cdce:	f3ef 8211 	mrs	r2, BASEPRI
   1cdd2:	f381 8812 	msr	BASEPRI_MAX, r1
   1cdd6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1cdda:	7819      	ldrb	r1, [r3, #0]
   1cddc:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1cdde:	f382 8811 	msr	BASEPRI, r2
   1cde2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1cde6:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1cde8:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1cdea:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cdec:	bf22      	ittt	cs
   1cdee:	4b06      	ldrcs	r3, [pc, #24]	; (1ce08 <rng_pool_get+0x88>)
   1cdf0:	2201      	movcs	r2, #1
   1cdf2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1cdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1cdf6:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1cdf8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1cdfa:	7976      	ldrb	r6, [r6, #5]
   1cdfc:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1ce00:	ea05 050c 	and.w	r5, r5, ip
   1ce04:	e7dd      	b.n	1cdc2 <rng_pool_get+0x42>
   1ce06:	bf00      	nop
   1ce08:	4000d000 	.word	0x4000d000

0001ce0c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1ce0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1ce10:	4d2b      	ldr	r5, [pc, #172]	; (1cec0 <entropy_nrf5_get_entropy_isr+0xb4>)
   1ce12:	6900      	ldr	r0, [r0, #16]
   1ce14:	42a8      	cmp	r0, r5
{
   1ce16:	460e      	mov	r6, r1
   1ce18:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1ce1a:	d00a      	beq.n	1ce32 <entropy_nrf5_get_entropy_isr+0x26>
   1ce1c:	4929      	ldr	r1, [pc, #164]	; (1cec4 <entropy_nrf5_get_entropy_isr+0xb8>)
   1ce1e:	482a      	ldr	r0, [pc, #168]	; (1cec8 <entropy_nrf5_get_entropy_isr+0xbc>)
   1ce20:	f240 1207 	movw	r2, #263	; 0x107
   1ce24:	f006 fde0 	bl	239e8 <assert_print>
   1ce28:	4826      	ldr	r0, [pc, #152]	; (1cec4 <entropy_nrf5_get_entropy_isr+0xb8>)
   1ce2a:	f240 1107 	movw	r1, #263	; 0x107
   1ce2e:	f006 fdd4 	bl	239da <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ce32:	43db      	mvns	r3, r3
   1ce34:	f013 0501 	ands.w	r5, r3, #1
   1ce38:	d004      	beq.n	1ce44 <entropy_nrf5_get_entropy_isr+0x38>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ce3a:	3030      	adds	r0, #48	; 0x30
   1ce3c:	f7ff ffa0 	bl	1cd80 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ce40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ce44:	b3a2      	cbz	r2, 1ceb0 <entropy_nrf5_get_entropy_isr+0xa4>
	__asm__ volatile(
   1ce46:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce4a:	f3ef 8811 	mrs	r8, BASEPRI
   1ce4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce52:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ce56:	200d      	movs	r0, #13
   1ce58:	f7f6 f870 	bl	12f3c <arch_irq_is_enabled>
   1ce5c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1ce5e:	200d      	movs	r0, #13
   1ce60:	f7f6 f858 	bl	12f14 <arch_irq_disable>
	__asm__ volatile(
   1ce64:	f388 8811 	msr	BASEPRI, r8
   1ce68:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ce6c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1cecc <entropy_nrf5_get_entropy_isr+0xc0>
   1ce70:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1ced0 <entropy_nrf5_get_entropy_isr+0xc4>
   1ce74:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1ce78:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1ce7c:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ce80:	2301      	movs	r3, #1
   1ce82:	f8c8 3000 	str.w	r3, [r8]
   1ce86:	4625      	mov	r5, r4
   1ce88:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ce8c:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ce90:	b183      	cbz	r3, 1ceb4 <entropy_nrf5_get_entropy_isr+0xa8>
			byte = random_byte_get();
   1ce92:	f7ff ff57 	bl	1cd44 <random_byte_get>
			if (byte < 0) {
   1ce96:	1e03      	subs	r3, r0, #0
   1ce98:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1ce9c:	dbf6      	blt.n	1ce8c <entropy_nrf5_get_entropy_isr+0x80>
			buf[--len] = byte;
   1ce9e:	3d01      	subs	r5, #1
   1cea0:	b2ad      	uxth	r5, r5
   1cea2:	5573      	strb	r3, [r6, r5]
		} while (len);
   1cea4:	2d00      	cmp	r5, #0
   1cea6:	d1f1      	bne.n	1ce8c <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   1cea8:	b117      	cbz	r7, 1ceb0 <entropy_nrf5_get_entropy_isr+0xa4>
			irq_enable(IRQN);
   1ceaa:	200d      	movs	r0, #13
   1ceac:	f7f6 f824 	bl	12ef8 <arch_irq_enable>
	return cnt;
   1ceb0:	4620      	mov	r0, r4
   1ceb2:	e7c5      	b.n	1ce40 <entropy_nrf5_get_entropy_isr+0x34>
   1ceb4:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ceb8:	bf20      	wfe
				__SEV();
   1ceba:	bf40      	sev
				__WFE();
   1cebc:	bf20      	wfe
   1cebe:	e7e5      	b.n	1ce8c <entropy_nrf5_get_entropy_isr+0x80>
   1cec0:	2000230c 	.word	0x2000230c
   1cec4:	0002a920 	.word	0x0002a920
   1cec8:	000280bd 	.word	0x000280bd
   1cecc:	4000d000 	.word	0x4000d000
   1ced0:	e000e100 	.word	0xe000e100

0001ced4 <entropy_nrf5_get_entropy>:
{
   1ced4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1ced8:	4b18      	ldr	r3, [pc, #96]	; (1cf3c <entropy_nrf5_get_entropy+0x68>)
   1ceda:	6907      	ldr	r7, [r0, #16]
   1cedc:	429f      	cmp	r7, r3
{
   1cede:	460d      	mov	r5, r1
   1cee0:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cee2:	d105      	bne.n	1cef0 <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1cee4:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1cee8:	b95c      	cbnz	r4, 1cf02 <entropy_nrf5_get_entropy+0x2e>
}
   1ceea:	4620      	mov	r0, r4
   1ceec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cef0:	4913      	ldr	r1, [pc, #76]	; (1cf40 <entropy_nrf5_get_entropy+0x6c>)
   1cef2:	4814      	ldr	r0, [pc, #80]	; (1cf44 <entropy_nrf5_get_entropy+0x70>)
   1cef4:	22e9      	movs	r2, #233	; 0xe9
   1cef6:	f006 fd77 	bl	239e8 <assert_print>
   1cefa:	4811      	ldr	r0, [pc, #68]	; (1cf40 <entropy_nrf5_get_entropy+0x6c>)
   1cefc:	21e9      	movs	r1, #233	; 0xe9
   1cefe:	f006 fd6c 	bl	239da <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1cf02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cf06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cf0a:	4638      	mov	r0, r7
   1cf0c:	f003 fc1a 	bl	20744 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1cf10:	4622      	mov	r2, r4
   1cf12:	4629      	mov	r1, r5
   1cf14:	4640      	mov	r0, r8
   1cf16:	f7ff ff33 	bl	1cd80 <rng_pool_get>
   1cf1a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1cf1c:	4638      	mov	r0, r7
   1cf1e:	f003 fbd7 	bl	206d0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1cf22:	b93e      	cbnz	r6, 1cf34 <entropy_nrf5_get_entropy+0x60>
	return z_impl_k_sem_take(sem, timeout);
   1cf24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cf28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cf2c:	4806      	ldr	r0, [pc, #24]	; (1cf48 <entropy_nrf5_get_entropy+0x74>)
   1cf2e:	f003 fc09 	bl	20744 <z_impl_k_sem_take>
	while (len) {
   1cf32:	e7e6      	b.n	1cf02 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   1cf34:	1ba4      	subs	r4, r4, r6
   1cf36:	b2a4      	uxth	r4, r4
		buf += bytes;
   1cf38:	4435      	add	r5, r6
   1cf3a:	e7d5      	b.n	1cee8 <entropy_nrf5_get_entropy+0x14>
   1cf3c:	2000230c 	.word	0x2000230c
   1cf40:	0002a920 	.word	0x0002a920
   1cf44:	000280bd 	.word	0x000280bd
   1cf48:	20002324 	.word	0x20002324

0001cf4c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1cf4c:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cf4e:	4b20      	ldr	r3, [pc, #128]	; (1cfd0 <entropy_nrf5_init+0x84>)
   1cf50:	6904      	ldr	r4, [r0, #16]
   1cf52:	429c      	cmp	r4, r3
   1cf54:	d00a      	beq.n	1cf6c <entropy_nrf5_init+0x20>
   1cf56:	491f      	ldr	r1, [pc, #124]	; (1cfd4 <entropy_nrf5_init+0x88>)
   1cf58:	481f      	ldr	r0, [pc, #124]	; (1cfd8 <entropy_nrf5_init+0x8c>)
   1cf5a:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1cf5e:	f006 fd43 	bl	239e8 <assert_print>
   1cf62:	481c      	ldr	r0, [pc, #112]	; (1cfd4 <entropy_nrf5_init+0x88>)
   1cf64:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1cf68:	f006 fd37 	bl	239da <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cf6c:	2201      	movs	r2, #1
   1cf6e:	4611      	mov	r1, r2
   1cf70:	4620      	mov	r0, r4
   1cf72:	f009 ff42 	bl	26dfa <z_impl_k_sem_init>
   1cf76:	2201      	movs	r2, #1
   1cf78:	2100      	movs	r1, #0
   1cf7a:	f104 0018 	add.w	r0, r4, #24
   1cf7e:	f009 ff3c 	bl	26dfa <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1cf82:	f240 4307 	movw	r3, #1031	; 0x407
   1cf86:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1cf8a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1cf8e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1cf90:	230c      	movs	r3, #12
   1cf92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1cf96:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1cf98:	4b10      	ldr	r3, [pc, #64]	; (1cfdc <entropy_nrf5_init+0x90>)
   1cf9a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1cf9e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1cfa2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1cfa6:	f022 0201 	bic.w	r2, r2, #1
   1cfaa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1cfae:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cfb0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1cfb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1cfb8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1cfbc:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cfbe:	6019      	str	r1, [r3, #0]
   1cfc0:	200d      	movs	r0, #13
   1cfc2:	f7f5 ffc9 	bl	12f58 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1cfc6:	200d      	movs	r0, #13
   1cfc8:	f7f5 ff96 	bl	12ef8 <arch_irq_enable>

	return 0;
}
   1cfcc:	4628      	mov	r0, r5
   1cfce:	bd38      	pop	{r3, r4, r5, pc}
   1cfd0:	2000230c 	.word	0x2000230c
   1cfd4:	0002a920 	.word	0x0002a920
   1cfd8:	000280bd 	.word	0x000280bd
   1cfdc:	4000d000 	.word	0x4000d000

0001cfe0 <isr>:
{
   1cfe0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1cfe2:	f7ff feaf 	bl	1cd44 <random_byte_get>
	if (byte < 0) {
   1cfe6:	2800      	cmp	r0, #0
   1cfe8:	db20      	blt.n	1d02c <isr+0x4c>
	uint8_t last  = rngp->last;
   1cfea:	4b17      	ldr	r3, [pc, #92]	; (1d048 <isr+0x68>)
   1cfec:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1cff0:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1cff4:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1cff8:	1b14      	subs	r4, r2, r4
   1cffa:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1cffe:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1d000:	d10d      	bne.n	1d01e <isr+0x3e>
	uint8_t last  = rngp->last;
   1d002:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1d006:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1d00a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1d00e:	1b14      	subs	r4, r2, r4
   1d010:	ea31 0404 	bics.w	r4, r1, r4
   1d014:	d10b      	bne.n	1d02e <isr+0x4e>
   1d016:	4b0d      	ldr	r3, [pc, #52]	; (1d04c <isr+0x6c>)
   1d018:	2201      	movs	r2, #1
   1d01a:	605a      	str	r2, [r3, #4]
}
   1d01c:	e00e      	b.n	1d03c <isr+0x5c>
	rngp->buffer[last] = byte;
   1d01e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1d020:	3201      	adds	r2, #1
   1d022:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1d024:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1d028:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1d02c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1d02e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1d030:	3201      	adds	r2, #1
   1d032:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1d034:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1d038:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1d03c:	4804      	ldr	r0, [pc, #16]	; (1d050 <isr+0x70>)
}
   1d03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d042:	f003 bb45 	b.w	206d0 <z_impl_k_sem_give>
   1d046:	bf00      	nop
   1d048:	2000230c 	.word	0x2000230c
   1d04c:	4000d000 	.word	0x4000d000
   1d050:	20002324 	.word	0x20002324

0001d054 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d056:	491b      	ldr	r1, [pc, #108]	; (1d0c4 <sys_clock_timeout_handler+0x70>)
{
   1d058:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1d05a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d05e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1d060:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1d064:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d068:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1d06a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1d06e:	d30f      	bcc.n	1d090 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1d070:	f005 fa50 	bl	22514 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1d074:	00a3      	lsls	r3, r4, #2
   1d076:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d07a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1d07e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1d082:	4295      	cmp	r5, r2
   1d084:	d11d      	bne.n	1d0c2 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1d086:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1d08a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1d08e:	e012      	b.n	1d0b6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1d090:	4b0d      	ldr	r3, [pc, #52]	; (1d0c8 <sys_clock_timeout_handler+0x74>)
   1d092:	681b      	ldr	r3, [r3, #0]
   1d094:	0a1a      	lsrs	r2, r3, #8
   1d096:	061b      	lsls	r3, r3, #24
   1d098:	195e      	adds	r6, r3, r5
   1d09a:	4b0c      	ldr	r3, [pc, #48]	; (1d0cc <sys_clock_timeout_handler+0x78>)
   1d09c:	f142 0700 	adc.w	r7, r2, #0
   1d0a0:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1d0a4:	f005 fa36 	bl	22514 <sys_clock_announce>
    return p_reg->CC[ch];
   1d0a8:	4a09      	ldr	r2, [pc, #36]	; (1d0d0 <sys_clock_timeout_handler+0x7c>)
   1d0aa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1d0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1d0b2:	429d      	cmp	r5, r3
   1d0b4:	d105      	bne.n	1d0c2 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1d0b6:	4a06      	ldr	r2, [pc, #24]	; (1d0d0 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d0b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d0bc:	40a3      	lsls	r3, r4
   1d0be:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1d0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d0c4:	20001cd0 	.word	0x20001cd0
   1d0c8:	20002368 	.word	0x20002368
   1d0cc:	20001cd8 	.word	0x20001cd8
   1d0d0:	40011000 	.word	0x40011000

0001d0d4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1d0d4:	4b0d      	ldr	r3, [pc, #52]	; (1d10c <z_nrf_rtc_timer_read+0x38>)
   1d0d6:	6818      	ldr	r0, [r3, #0]
   1d0d8:	0a01      	lsrs	r1, r0, #8
   1d0da:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1d0dc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1d0e0:	4b0b      	ldr	r3, [pc, #44]	; (1d110 <z_nrf_rtc_timer_read+0x3c>)
   1d0e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1d0e6:	1818      	adds	r0, r3, r0
   1d0e8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1d0ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d0f0:	d20a      	bcs.n	1d108 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1d0f2:	4b08      	ldr	r3, [pc, #32]	; (1d114 <z_nrf_rtc_timer_read+0x40>)
   1d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d0f8:	4290      	cmp	r0, r2
   1d0fa:	eb71 0303 	sbcs.w	r3, r1, r3
   1d0fe:	d203      	bcs.n	1d108 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1d100:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1d104:	f141 0100 	adc.w	r1, r1, #0
}
   1d108:	4770      	bx	lr
   1d10a:	bf00      	nop
   1d10c:	20002368 	.word	0x20002368
   1d110:	40011000 	.word	0x40011000
   1d114:	20001cd8 	.word	0x20001cd8

0001d118 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1d118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1d11c:	4c2b      	ldr	r4, [pc, #172]	; (1d1cc <rtc_nrf_isr+0xb4>)
   1d11e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1d122:	079a      	lsls	r2, r3, #30
   1d124:	d50b      	bpl.n	1d13e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d126:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d12a:	b143      	cbz	r3, 1d13e <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1d12c:	4a28      	ldr	r2, [pc, #160]	; (1d1d0 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d12e:	2300      	movs	r3, #0
   1d130:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d134:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d138:	6813      	ldr	r3, [r2, #0]
   1d13a:	3301      	adds	r3, #1
   1d13c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d13e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d142:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1d144:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1d148:	03db      	lsls	r3, r3, #15
   1d14a:	d522      	bpl.n	1d192 <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d14c:	f3bf 8f5b 	dmb	ish
   1d150:	4b20      	ldr	r3, [pc, #128]	; (1d1d4 <rtc_nrf_isr+0xbc>)
   1d152:	e853 1f00 	ldrex	r1, [r3]
   1d156:	f021 0001 	bic.w	r0, r1, #1
   1d15a:	e843 0500 	strex	r5, r0, [r3]
   1d15e:	2d00      	cmp	r5, #0
   1d160:	d1f7      	bne.n	1d152 <rtc_nrf_isr+0x3a>
   1d162:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1d166:	b911      	cbnz	r1, 1d16e <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d168:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d16c:	b18b      	cbz	r3, 1d192 <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d16e:	2500      	movs	r5, #0
   1d170:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d174:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1d178:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
   1d17c:	f7ff ffaa 	bl	1d0d4 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d180:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d184:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1d186:	4b14      	ldr	r3, [pc, #80]	; (1d1d8 <rtc_nrf_isr+0xc0>)
   1d188:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1d18c:	42b0      	cmp	r0, r6
   1d18e:	41b9      	sbcs	r1, r7
   1d190:	d204      	bcs.n	1d19c <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1d192:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1d196:	b003      	add	sp, #12
   1d198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d19c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1d1a0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   1d1a4:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d1a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   1d1ac:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d1ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d1b2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1d1b6:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1d1ba:	2900      	cmp	r1, #0
   1d1bc:	d0eb      	beq.n	1d196 <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
   1d1be:	9000      	str	r0, [sp, #0]
   1d1c0:	4632      	mov	r2, r6
   1d1c2:	463b      	mov	r3, r7
   1d1c4:	4628      	mov	r0, r5
   1d1c6:	4788      	blx	r1
}
   1d1c8:	e7e5      	b.n	1d196 <rtc_nrf_isr+0x7e>
   1d1ca:	bf00      	nop
   1d1cc:	40011000 	.word	0x40011000
   1d1d0:	20002368 	.word	0x20002368
   1d1d4:	20002360 	.word	0x20002360
   1d1d8:	20001cc0 	.word	0x20001cc0

0001d1dc <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   1d1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1e0:	4f53      	ldr	r7, [pc, #332]	; (1d330 <compare_set.constprop.0.isra.0+0x154>)
   1d1e2:	f3bf 8f5b 	dmb	ish
   1d1e6:	4604      	mov	r4, r0
   1d1e8:	460d      	mov	r5, r1
   1d1ea:	e857 8f00 	ldrex	r8, [r7]
   1d1ee:	f028 0301 	bic.w	r3, r8, #1
   1d1f2:	e847 3200 	strex	r2, r3, [r7]
   1d1f6:	2a00      	cmp	r2, #0
   1d1f8:	d1f7      	bne.n	1d1ea <compare_set.constprop.0.isra.0+0xe>
   1d1fa:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   1d1fe:	f8df 9134 	ldr.w	r9, [pc, #308]	; 1d334 <compare_set.constprop.0.isra.0+0x158>
   1d202:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   1d206:	f8c9 a308 	str.w	sl, [r9, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1d20a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d20e:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1d212:	f7ff ff5f 	bl	1d0d4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1d216:	42a0      	cmp	r0, r4
   1d218:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
   1d21c:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1d220:	d277      	bcs.n	1d312 <compare_set.constprop.0.isra.0+0x136>
		if (target_time - curr_time > COUNTER_SPAN) {
   1d222:	4b45      	ldr	r3, [pc, #276]	; (1d338 <compare_set.constprop.0.isra.0+0x15c>)
   1d224:	1a20      	subs	r0, r4, r0
   1d226:	eb65 0101 	sbc.w	r1, r5, r1
   1d22a:	4298      	cmp	r0, r3
   1d22c:	f171 0100 	sbcs.w	r1, r1, #0
   1d230:	d24a      	bcs.n	1d2c8 <compare_set.constprop.0.isra.0+0xec>
		if (target_time != cc_data[chan].target_time) {
   1d232:	4b42      	ldr	r3, [pc, #264]	; (1d33c <compare_set.constprop.0.isra.0+0x160>)
   1d234:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1d238:	429d      	cmp	r5, r3
   1d23a:	bf08      	it	eq
   1d23c:	4294      	cmpeq	r4, r2
   1d23e:	d03c      	beq.n	1d2ba <compare_set.constprop.0.isra.0+0xde>
	return absolute_time & COUNTER_MAX;
   1d240:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
    return p_reg->CC[ch];
   1d244:	f8d9 3540 	ldr.w	r3, [r9, #1344]	; 0x540
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1d248:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d24a:	2200      	movs	r2, #0
     return p_reg->COUNTER;
   1d24c:	f8d9 1504 	ldr.w	r1, [r9, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d250:	1a5b      	subs	r3, r3, r1
   1d252:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d256:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1d25a:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   1d25c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
   1d260:	d105      	bne.n	1d26e <compare_set.constprop.0.isra.0+0x92>
   1d262:	9101      	str	r1, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   1d264:	2013      	movs	r0, #19
   1d266:	f009 fe73 	bl	26f50 <z_impl_k_busy_wait>
   1d26a:	9901      	ldr	r1, [sp, #4]
   1d26c:	2200      	movs	r2, #0
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1d26e:	1c88      	adds	r0, r1, #2
	return (a - b) & COUNTER_MAX;
   1d270:	1a33      	subs	r3, r6, r0
   1d272:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d276:	f8c9 2140 	str.w	r2, [r9, #320]	; 0x140
			cc_val = now + 2;
   1d27a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1d27e:	bf88      	it	hi
   1d280:	4606      	movhi	r6, r0
   1d282:	f8d9 3140 	ldr.w	r3, [r9, #320]	; 0x140
    p_reg->EVTENSET = mask;
   1d286:	f8c9 a344 	str.w	sl, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d28a:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1d28e:	f8c9 3540 	str.w	r3, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1d292:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
	} while ((now2 != now) &&
   1d296:	4299      	cmp	r1, r3
   1d298:	d006      	beq.n	1d2a8 <compare_set.constprop.0.isra.0+0xcc>
	return (a - b) & COUNTER_MAX;
   1d29a:	1af3      	subs	r3, r6, r3
   1d29c:	3b02      	subs	r3, #2
   1d29e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1d2a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1d2a6:	d832      	bhi.n	1d30e <compare_set.constprop.0.isra.0+0x132>
	return (a - b) & COUNTER_MAX;
   1d2a8:	eba6 060b 	sub.w	r6, r6, fp
   1d2ac:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1d2b0:	1936      	adds	r6, r6, r4
   1d2b2:	f145 0300 	adc.w	r3, r5, #0
   1d2b6:	4634      	mov	r4, r6
   1d2b8:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1d2ba:	4b20      	ldr	r3, [pc, #128]	; (1d33c <compare_set.constprop.0.isra.0+0x160>)
	cc_data[chan].callback = handler;
   1d2bc:	4a20      	ldr	r2, [pc, #128]	; (1d340 <compare_set.constprop.0.isra.0+0x164>)
   1d2be:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   1d2c0:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].user_context = user_data;
   1d2c4:	2200      	movs	r2, #0
   1d2c6:	605a      	str	r2, [r3, #4]
	if (key) {
   1d2c8:	f1b8 0f00 	cmp.w	r8, #0
   1d2cc:	d01c      	beq.n	1d308 <compare_set.constprop.0.isra.0+0x12c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d2ce:	f3bf 8f5b 	dmb	ish
   1d2d2:	e857 3f00 	ldrex	r3, [r7]
   1d2d6:	f043 0301 	orr.w	r3, r3, #1
   1d2da:	e847 3200 	strex	r2, r3, [r7]
   1d2de:	2a00      	cmp	r2, #0
   1d2e0:	d1f7      	bne.n	1d2d2 <compare_set.constprop.0.isra.0+0xf6>
   1d2e2:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1d2e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d2ea:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d2ee:	4b15      	ldr	r3, [pc, #84]	; (1d344 <compare_set.constprop.0.isra.0+0x168>)
   1d2f0:	f3bf 8f5b 	dmb	ish
   1d2f4:	681b      	ldr	r3, [r3, #0]
   1d2f6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1d2fa:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d2fc:	bf42      	ittt	mi
   1d2fe:	4b12      	ldrmi	r3, [pc, #72]	; (1d348 <compare_set.constprop.0.isra.0+0x16c>)
   1d300:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1d304:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1d308:	b003      	add	sp, #12
   1d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d30e:	4633      	mov	r3, r6
   1d310:	e79c      	b.n	1d24c <compare_set.constprop.0.isra.0+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d312:	4b0c      	ldr	r3, [pc, #48]	; (1d344 <compare_set.constprop.0.isra.0+0x168>)
   1d314:	f3bf 8f5b 	dmb	ish
   1d318:	e853 1f00 	ldrex	r1, [r3]
   1d31c:	f041 0101 	orr.w	r1, r1, #1
   1d320:	e843 1200 	strex	r2, r1, [r3]
   1d324:	2a00      	cmp	r2, #0
   1d326:	d1f7      	bne.n	1d318 <compare_set.constprop.0.isra.0+0x13c>
   1d328:	f3bf 8f5b 	dmb	ish
   1d32c:	e7c5      	b.n	1d2ba <compare_set.constprop.0.isra.0+0xde>
   1d32e:	bf00      	nop
   1d330:	20002364 	.word	0x20002364
   1d334:	40011000 	.word	0x40011000
   1d338:	01000001 	.word	0x01000001
   1d33c:	20001cc0 	.word	0x20001cc0
   1d340:	0001d055 	.word	0x0001d055
   1d344:	20002360 	.word	0x20002360
   1d348:	e000e100 	.word	0xe000e100

0001d34c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1d34c:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d34e:	4b16      	ldr	r3, [pc, #88]	; (1d3a8 <sys_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   1d350:	4c16      	ldr	r4, [pc, #88]	; (1d3ac <sys_clock_driver_init+0x60>)
   1d352:	2500      	movs	r5, #0
   1d354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d35c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1d360:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d368:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d36c:	4b10      	ldr	r3, [pc, #64]	; (1d3b0 <sys_clock_driver_init+0x64>)
   1d36e:	2602      	movs	r6, #2
   1d370:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1d374:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d378:	2101      	movs	r1, #1
   1d37a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d37e:	2011      	movs	r0, #17
   1d380:	462a      	mov	r2, r5
   1d382:	f7f5 fde9 	bl	12f58 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d386:	2011      	movs	r0, #17
   1d388:	f7f5 fdb6 	bl	12ef8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d38c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d38e:	4a09      	ldr	r2, [pc, #36]	; (1d3b4 <sys_clock_driver_init+0x68>)
   1d390:	60a3      	str	r3, [r4, #8]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d392:	2100      	movs	r1, #0
   1d394:	6023      	str	r3, [r4, #0]
   1d396:	4808      	ldr	r0, [pc, #32]	; (1d3b8 <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   1d398:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d39a:	f7ff ff1f 	bl	1d1dc <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   1d39e:	4630      	mov	r0, r6
   1d3a0:	f7fe ffa8 	bl	1c2f4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1d3a4:	4628      	mov	r0, r5
   1d3a6:	bd70      	pop	{r4, r5, r6, pc}
   1d3a8:	20001cc0 	.word	0x20001cc0
   1d3ac:	40011000 	.word	0x40011000
   1d3b0:	e000e100 	.word	0xe000e100
   1d3b4:	20002364 	.word	0x20002364
   1d3b8:	007fffff 	.word	0x007fffff

0001d3bc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d3bc:	1c43      	adds	r3, r0, #1
{
   1d3be:	b510      	push	{r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d3c0:	d01c      	beq.n	1d3fc <sys_clock_set_timeout+0x40>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d3c2:	2801      	cmp	r0, #1
   1d3c4:	dd1c      	ble.n	1d400 <sys_clock_set_timeout+0x44>
   1d3c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d3ca:	da1b      	bge.n	1d404 <sys_clock_set_timeout+0x48>
   1d3cc:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d3ce:	f7ff fe81 	bl	1d0d4 <z_nrf_rtc_timer_read>
   1d3d2:	4a0d      	ldr	r2, [pc, #52]	; (1d408 <sys_clock_set_timeout+0x4c>)
   1d3d4:	e9d2 3100 	ldrd	r3, r1, [r2]
   1d3d8:	1ac0      	subs	r0, r0, r3
		ticks = 0;
   1d3da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d3de:	bf28      	it	cs
   1d3e0:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1d3e2:	4a0a      	ldr	r2, [pc, #40]	; (1d40c <sys_clock_set_timeout+0x50>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1d3e4:	3001      	adds	r0, #1
   1d3e6:	4420      	add	r0, r4
	if (cyc > MAX_CYCLES) {
   1d3e8:	4290      	cmp	r0, r2
   1d3ea:	bf28      	it	cs
   1d3ec:	4610      	movcs	r0, r2
	uint64_t target_time = cyc + last_count;
   1d3ee:	18c0      	adds	r0, r0, r3
}
   1d3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1d3f4:	f141 0100 	adc.w	r1, r1, #0
   1d3f8:	f7ff bef0 	b.w	1d1dc <compare_set.constprop.0.isra.0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d3fc:	4803      	ldr	r0, [pc, #12]	; (1d40c <sys_clock_set_timeout+0x50>)
   1d3fe:	e7e5      	b.n	1d3cc <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d400:	2400      	movs	r4, #0
   1d402:	e7e4      	b.n	1d3ce <sys_clock_set_timeout+0x12>
   1d404:	4c01      	ldr	r4, [pc, #4]	; (1d40c <sys_clock_set_timeout+0x50>)
   1d406:	e7e2      	b.n	1d3ce <sys_clock_set_timeout+0x12>
   1d408:	20001cd0 	.word	0x20001cd0
   1d40c:	007fffff 	.word	0x007fffff

0001d410 <sys_clock_elapsed>:
{
   1d410:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1d412:	f7ff fe5f 	bl	1d0d4 <z_nrf_rtc_timer_read>
   1d416:	4b02      	ldr	r3, [pc, #8]	; (1d420 <sys_clock_elapsed+0x10>)
   1d418:	681b      	ldr	r3, [r3, #0]
}
   1d41a:	1ac0      	subs	r0, r0, r3
   1d41c:	bd08      	pop	{r3, pc}
   1d41e:	bf00      	nop
   1d420:	20001cd0 	.word	0x20001cd0

0001d424 <nrf_gpio_pin_port_decode>:
{
   1d424:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d426:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1d428:	0953      	lsrs	r3, r2, #5
   1d42a:	d104      	bne.n	1d436 <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   1d42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d430:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d432:	07db      	lsls	r3, r3, #31
   1d434:	d40a      	bmi.n	1d44c <nrf_gpio_pin_port_decode+0x28>
   1d436:	4907      	ldr	r1, [pc, #28]	; (1d454 <nrf_gpio_pin_port_decode+0x30>)
   1d438:	4807      	ldr	r0, [pc, #28]	; (1d458 <nrf_gpio_pin_port_decode+0x34>)
   1d43a:	f240 2247 	movw	r2, #583	; 0x247
   1d43e:	f006 fad3 	bl	239e8 <assert_print>
   1d442:	4804      	ldr	r0, [pc, #16]	; (1d454 <nrf_gpio_pin_port_decode+0x30>)
   1d444:	f240 2147 	movw	r1, #583	; 0x247
   1d448:	f006 fac7 	bl	239da <assert_post_action>
}
   1d44c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1d450:	bd08      	pop	{r3, pc}
   1d452:	bf00      	nop
   1d454:	0002a7e4 	.word	0x0002a7e4
   1d458:	000280bd 	.word	0x000280bd

0001d45c <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   1d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d460:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   1d464:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1d468:	6906      	ldr	r6, [r0, #16]
{
   1d46a:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d46c:	d00a      	beq.n	1d484 <z_impl_gpio_pin_configure+0x28>
   1d46e:	4935      	ldr	r1, [pc, #212]	; (1d544 <z_impl_gpio_pin_configure+0xe8>)
   1d470:	4835      	ldr	r0, [pc, #212]	; (1d548 <z_impl_gpio_pin_configure+0xec>)
   1d472:	f240 22be 	movw	r2, #702	; 0x2be
   1d476:	f006 fab7 	bl	239e8 <assert_print>
   1d47a:	f240 21be 	movw	r1, #702	; 0x2be
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1d47e:	4831      	ldr	r0, [pc, #196]	; (1d544 <z_impl_gpio_pin_configure+0xe8>)
   1d480:	f006 faab 	bl	239da <assert_post_action>
   1d484:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1d488:	2a30      	cmp	r2, #48	; 0x30
   1d48a:	d108      	bne.n	1d49e <z_impl_gpio_pin_configure+0x42>
   1d48c:	492d      	ldr	r1, [pc, #180]	; (1d544 <z_impl_gpio_pin_configure+0xe8>)
   1d48e:	482e      	ldr	r0, [pc, #184]	; (1d548 <z_impl_gpio_pin_configure+0xec>)
   1d490:	f240 22c1 	movw	r2, #705	; 0x2c1
   1d494:	f006 faa8 	bl	239e8 <assert_print>
   1d498:	f240 21c1 	movw	r1, #705	; 0x2c1
   1d49c:	e7ef      	b.n	1d47e <z_impl_gpio_pin_configure+0x22>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1d49e:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   1d4a2:	2a02      	cmp	r2, #2
   1d4a4:	d108      	bne.n	1d4b8 <z_impl_gpio_pin_configure+0x5c>
   1d4a6:	4927      	ldr	r1, [pc, #156]	; (1d544 <z_impl_gpio_pin_configure+0xe8>)
   1d4a8:	4827      	ldr	r0, [pc, #156]	; (1d548 <z_impl_gpio_pin_configure+0xec>)
   1d4aa:	f240 22c5 	movw	r2, #709	; 0x2c5
   1d4ae:	f006 fa9b 	bl	239e8 <assert_print>
   1d4b2:	f240 21c5 	movw	r1, #709	; 0x2c5
   1d4b6:	e7e2      	b.n	1d47e <z_impl_gpio_pin_configure+0x22>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1d4b8:	f003 0206 	and.w	r2, r3, #6
   1d4bc:	2a04      	cmp	r2, #4
   1d4be:	d108      	bne.n	1d4d2 <z_impl_gpio_pin_configure+0x76>
   1d4c0:	4920      	ldr	r1, [pc, #128]	; (1d544 <z_impl_gpio_pin_configure+0xe8>)
   1d4c2:	4821      	ldr	r0, [pc, #132]	; (1d548 <z_impl_gpio_pin_configure+0xec>)
   1d4c4:	f240 22c9 	movw	r2, #713	; 0x2c9
   1d4c8:	f006 fa8e 	bl	239e8 <assert_print>
   1d4cc:	f240 21c9 	movw	r1, #713	; 0x2c9
   1d4d0:	e7d5      	b.n	1d47e <z_impl_gpio_pin_configure+0x22>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1d4d2:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1d4d6:	d012      	beq.n	1d4fe <z_impl_gpio_pin_configure+0xa2>
   1d4d8:	039d      	lsls	r5, r3, #14
   1d4da:	d408      	bmi.n	1d4ee <z_impl_gpio_pin_configure+0x92>
   1d4dc:	4919      	ldr	r1, [pc, #100]	; (1d544 <z_impl_gpio_pin_configure+0xe8>)
   1d4de:	481a      	ldr	r0, [pc, #104]	; (1d548 <z_impl_gpio_pin_configure+0xec>)
   1d4e0:	f44f 7233 	mov.w	r2, #716	; 0x2cc
   1d4e4:	f006 fa80 	bl	239e8 <assert_print>
   1d4e8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1d4ec:	e7c7      	b.n	1d47e <z_impl_gpio_pin_configure+0x22>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d4ee:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1d4f2:	d014      	beq.n	1d51e <z_impl_gpio_pin_configure+0xc2>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d4f4:	4a15      	ldr	r2, [pc, #84]	; (1d54c <z_impl_gpio_pin_configure+0xf0>)
   1d4f6:	439a      	bics	r2, r3
   1d4f8:	d101      	bne.n	1d4fe <z_impl_gpio_pin_configure+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d4fa:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d4fe:	6824      	ldr	r4, [r4, #0]
   1d500:	2501      	movs	r5, #1
   1d502:	408d      	lsls	r5, r1
   1d504:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d506:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d50a:	d111      	bne.n	1d530 <z_impl_gpio_pin_configure+0xd4>
   1d50c:	490d      	ldr	r1, [pc, #52]	; (1d544 <z_impl_gpio_pin_configure+0xe8>)
   1d50e:	480e      	ldr	r0, [pc, #56]	; (1d548 <z_impl_gpio_pin_configure+0xec>)
   1d510:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   1d514:	f006 fa68 	bl	239e8 <assert_print>
   1d518:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   1d51c:	e7af      	b.n	1d47e <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d51e:	4909      	ldr	r1, [pc, #36]	; (1d544 <z_impl_gpio_pin_configure+0xe8>)
   1d520:	4809      	ldr	r0, [pc, #36]	; (1d548 <z_impl_gpio_pin_configure+0xec>)
   1d522:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   1d526:	f006 fa5f 	bl	239e8 <assert_print>
   1d52a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   1d52e:	e7a6      	b.n	1d47e <z_impl_gpio_pin_configure+0x22>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d530:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d532:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d534:	bf4c      	ite	mi
   1d536:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d538:	43ac      	bicpl	r4, r5
   1d53a:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   1d53c:	683b      	ldr	r3, [r7, #0]
}
   1d53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1d542:	4718      	bx	r3
   1d544:	0002a971 	.word	0x0002a971
   1d548:	000280bd 	.word	0x000280bd
   1d54c:	00100001 	.word	0x00100001

0001d550 <z_impl_gpio_pin_interrupt_configure>:
{
   1d550:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1d552:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   1d556:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
	__unused const struct gpio_driver_config *const cfg =
   1d55a:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
	const struct gpio_driver_data *const data =
   1d55e:	6905      	ldr	r5, [r0, #16]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1d560:	d10a      	bne.n	1d578 <z_impl_gpio_pin_interrupt_configure+0x28>
   1d562:	4920      	ldr	r1, [pc, #128]	; (1d5e4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d564:	4820      	ldr	r0, [pc, #128]	; (1d5e8 <z_impl_gpio_pin_interrupt_configure+0x98>)
   1d566:	f240 226b 	movw	r2, #619	; 0x26b
   1d56a:	f006 fa3d 	bl	239e8 <assert_print>
   1d56e:	f240 216b 	movw	r1, #619	; 0x26b
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1d572:	481c      	ldr	r0, [pc, #112]	; (1d5e4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d574:	f006 fa31 	bl	239da <assert_post_action>
   1d578:	b943      	cbnz	r3, 1d58c <z_impl_gpio_pin_interrupt_configure+0x3c>
   1d57a:	491a      	ldr	r1, [pc, #104]	; (1d5e4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d57c:	481a      	ldr	r0, [pc, #104]	; (1d5e8 <z_impl_gpio_pin_interrupt_configure+0x98>)
   1d57e:	f240 226f 	movw	r2, #623	; 0x26f
   1d582:	f006 fa31 	bl	239e8 <assert_print>
   1d586:	f240 216f 	movw	r1, #623	; 0x26f
   1d58a:	e7f2      	b.n	1d572 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1d58c:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   1d590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d594:	d108      	bne.n	1d5a8 <z_impl_gpio_pin_interrupt_configure+0x58>
   1d596:	4913      	ldr	r1, [pc, #76]	; (1d5e4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d598:	4813      	ldr	r0, [pc, #76]	; (1d5e8 <z_impl_gpio_pin_interrupt_configure+0x98>)
   1d59a:	f240 2279 	movw	r2, #633	; 0x279
   1d59e:	f006 fa23 	bl	239e8 <assert_print>
   1d5a2:	f240 2179 	movw	r1, #633	; 0x279
   1d5a6:	e7e4      	b.n	1d572 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d5a8:	6836      	ldr	r6, [r6, #0]
   1d5aa:	2301      	movs	r3, #1
   1d5ac:	408b      	lsls	r3, r1
   1d5ae:	4233      	tst	r3, r6
   1d5b0:	d108      	bne.n	1d5c4 <z_impl_gpio_pin_interrupt_configure+0x74>
   1d5b2:	490c      	ldr	r1, [pc, #48]	; (1d5e4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d5b4:	480c      	ldr	r0, [pc, #48]	; (1d5e8 <z_impl_gpio_pin_interrupt_configure+0x98>)
   1d5b6:	f240 227e 	movw	r2, #638	; 0x27e
   1d5ba:	f006 fa15 	bl	239e8 <assert_print>
   1d5be:	f240 217e 	movw	r1, #638	; 0x27e
   1d5c2:	e7d6      	b.n	1d572 <z_impl_gpio_pin_interrupt_configure+0x22>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d5c4:	0216      	lsls	r6, r2, #8
   1d5c6:	d504      	bpl.n	1d5d2 <z_impl_gpio_pin_interrupt_configure+0x82>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1d5c8:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d5ca:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1d5cc:	bf18      	it	ne
   1d5ce:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1d5d2:	69a4      	ldr	r4, [r4, #24]
   1d5d4:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1d5d8:	46a4      	mov	ip, r4
   1d5da:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
   1d5de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1d5e2:	4760      	bx	ip
   1d5e4:	0002a971 	.word	0x0002a971
   1d5e8:	000280bd 	.word	0x000280bd

0001d5ec <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   1d5ec:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d5ee:	2301      	movs	r3, #1
   1d5f0:	fa03 f101 	lsl.w	r1, r3, r1
   1d5f4:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1d5f6:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d5f8:	681b      	ldr	r3, [r3, #0]
   1d5fa:	4219      	tst	r1, r3
   1d5fc:	d10a      	bne.n	1d614 <gpio_pin_set+0x28>
   1d5fe:	490c      	ldr	r1, [pc, #48]	; (1d630 <gpio_pin_set+0x44>)
   1d600:	480c      	ldr	r0, [pc, #48]	; (1d634 <gpio_pin_set+0x48>)
   1d602:	f240 5227 	movw	r2, #1319	; 0x527
   1d606:	f006 f9ef 	bl	239e8 <assert_print>
   1d60a:	4809      	ldr	r0, [pc, #36]	; (1d630 <gpio_pin_set+0x44>)
   1d60c:	f240 5127 	movw	r1, #1319	; 0x527
   1d610:	f006 f9e3 	bl	239da <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d614:	6823      	ldr	r3, [r4, #0]
   1d616:	4219      	tst	r1, r3
   1d618:	d003      	beq.n	1d622 <gpio_pin_set+0x36>
	if (value != 0)	{
   1d61a:	b122      	cbz	r2, 1d626 <gpio_pin_set+0x3a>
	return api->port_clear_bits_raw(port, pins);
   1d61c:	6883      	ldr	r3, [r0, #8]
   1d61e:	691b      	ldr	r3, [r3, #16]
   1d620:	e003      	b.n	1d62a <gpio_pin_set+0x3e>
	if (value != 0)	{
   1d622:	2a00      	cmp	r2, #0
   1d624:	d0fa      	beq.n	1d61c <gpio_pin_set+0x30>
	return api->port_set_bits_raw(port, pins);
   1d626:	6883      	ldr	r3, [r0, #8]
   1d628:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1d62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1d62e:	4718      	bx	r3
   1d630:	0002a971 	.word	0x0002a971
   1d634:	000280bd 	.word	0x000280bd

0001d638 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   1d638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   1d63c:	2400      	movs	r4, #0
   1d63e:	4e1c      	ldr	r6, [pc, #112]	; (1d6b0 <get_buttons+0x78>)
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d640:	4625      	mov	r5, r4
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d642:	f04f 0801 	mov.w	r8, #1
	return gpio_pin_get(spec->port, spec->pin);
   1d646:	6830      	ldr	r0, [r6, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d648:	7937      	ldrb	r7, [r6, #4]
   1d64a:	6843      	ldr	r3, [r0, #4]
   1d64c:	681b      	ldr	r3, [r3, #0]
   1d64e:	fa08 f707 	lsl.w	r7, r8, r7
   1d652:	421f      	tst	r7, r3
   1d654:	d10a      	bne.n	1d66c <get_buttons+0x34>
   1d656:	4917      	ldr	r1, [pc, #92]	; (1d6b4 <get_buttons+0x7c>)
   1d658:	4817      	ldr	r0, [pc, #92]	; (1d6b8 <get_buttons+0x80>)
   1d65a:	f240 42ce 	movw	r2, #1230	; 0x4ce
   1d65e:	f006 f9c3 	bl	239e8 <assert_print>
   1d662:	4814      	ldr	r0, [pc, #80]	; (1d6b4 <get_buttons+0x7c>)
   1d664:	f240 41ce 	movw	r1, #1230	; 0x4ce
   1d668:	f006 f9b7 	bl	239da <assert_post_action>
	const struct gpio_driver_data *const data =
   1d66c:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   1d670:	6883      	ldr	r3, [r0, #8]
   1d672:	a901      	add	r1, sp, #4
   1d674:	685b      	ldr	r3, [r3, #4]
   1d676:	4798      	blx	r3
	if (ret == 0) {
   1d678:	2800      	cmp	r0, #0
   1d67a:	d009      	beq.n	1d690 <get_buttons+0x58>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
   1d67c:	db0f      	blt.n	1d69e <get_buttons+0x66>
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if (val) {
			ret |= 1U << i;
   1d67e:	fa08 f305 	lsl.w	r3, r8, r5
   1d682:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d684:	3501      	adds	r5, #1
   1d686:	2d04      	cmp	r5, #4
   1d688:	f106 0608 	add.w	r6, r6, #8
   1d68c:	d1db      	bne.n	1d646 <get_buttons+0xe>
   1d68e:	e00b      	b.n	1d6a8 <get_buttons+0x70>
		*value ^= data->invert;
   1d690:	f8d9 2000 	ldr.w	r2, [r9]
   1d694:	9b01      	ldr	r3, [sp, #4]
   1d696:	4053      	eors	r3, r2
		if (val) {
   1d698:	423b      	tst	r3, r7
   1d69a:	d0f3      	beq.n	1d684 <get_buttons+0x4c>
   1d69c:	e7ef      	b.n	1d67e <get_buttons+0x46>
			LOG_ERR("Cannot read gpio pin");
   1d69e:	4807      	ldr	r0, [pc, #28]	; (1d6bc <get_buttons+0x84>)
   1d6a0:	2145      	movs	r1, #69	; 0x45
   1d6a2:	f006 f9af 	bl	23a04 <z_log_minimal_printk>
   1d6a6:	2400      	movs	r4, #0
		}
	}

	return ret;
}
   1d6a8:	4620      	mov	r0, r4
   1d6aa:	b003      	add	sp, #12
   1d6ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d6b0:	00027c34 	.word	0x00027c34
   1d6b4:	0002a971 	.word	0x0002a971
   1d6b8:	000280bd 	.word	0x000280bd
   1d6bc:	0002a9a2 	.word	0x0002a9a2

0001d6c0 <callback_ctrl>:
{
   1d6c0:	b570      	push	{r4, r5, r6, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1d6c2:	2800      	cmp	r0, #0
   1d6c4:	4c09      	ldr	r4, [pc, #36]	; (1d6ec <callback_ctrl+0x2c>)
   1d6c6:	bf0c      	ite	eq
   1d6c8:	f44f 1600 	moveq.w	r6, #2097152	; 0x200000
   1d6cc:	f04f 6698 	movne.w	r6, #79691776	; 0x4c00000
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1d6d0:	2500      	movs	r5, #0
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1d6d2:	6820      	ldr	r0, [r4, #0]
   1d6d4:	7921      	ldrb	r1, [r4, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1d6d6:	4632      	mov	r2, r6
   1d6d8:	3501      	adds	r5, #1
   1d6da:	f7ff ff39 	bl	1d550 <z_impl_gpio_pin_interrupt_configure>
   1d6de:	2d04      	cmp	r5, #4
   1d6e0:	d002      	beq.n	1d6e8 <callback_ctrl+0x28>
   1d6e2:	3408      	adds	r4, #8
   1d6e4:	2800      	cmp	r0, #0
   1d6e6:	d0f4      	beq.n	1d6d2 <callback_ctrl+0x12>
}
   1d6e8:	bd70      	pop	{r4, r5, r6, pc}
   1d6ea:	bf00      	nop
   1d6ec:	00027c34 	.word	0x00027c34

0001d6f0 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   1d6f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d6f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d6f6:	f3ef 8411 	mrs	r4, BASEPRI
   1d6fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1d6fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d702:	481d      	ldr	r0, [pc, #116]	; (1d778 <button_pressed+0x88>)
   1d704:	f002 fd36 	bl	20174 <z_spin_lock_valid>
   1d708:	b940      	cbnz	r0, 1d71c <button_pressed+0x2c>
   1d70a:	491c      	ldr	r1, [pc, #112]	; (1d77c <button_pressed+0x8c>)
   1d70c:	481c      	ldr	r0, [pc, #112]	; (1d780 <button_pressed+0x90>)
   1d70e:	2294      	movs	r2, #148	; 0x94
   1d710:	f006 f96a 	bl	239e8 <assert_print>
   1d714:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d716:	4819      	ldr	r0, [pc, #100]	; (1d77c <button_pressed+0x8c>)
   1d718:	f006 f95f 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   1d71c:	4816      	ldr	r0, [pc, #88]	; (1d778 <button_pressed+0x88>)
   1d71e:	f002 fd47 	bl	201b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   1d722:	2000      	movs	r0, #0
   1d724:	f7ff ffcc 	bl	1d6c0 <callback_ctrl>

	if (err) {
   1d728:	b118      	cbz	r0, 1d732 <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   1d72a:	4816      	ldr	r0, [pc, #88]	; (1d784 <button_pressed+0x94>)
   1d72c:	2145      	movs	r1, #69	; 0x45
   1d72e:	f006 f969 	bl	23a04 <z_log_minimal_printk>
	}

	switch (state) {
   1d732:	4b15      	ldr	r3, [pc, #84]	; (1d788 <button_pressed+0x98>)
   1d734:	781a      	ldrb	r2, [r3, #0]
   1d736:	b9b2      	cbnz	r2, 1d766 <button_pressed+0x76>
	case STATE_WAITING:
		state = STATE_SCANNING;
   1d738:	2201      	movs	r2, #1
   1d73a:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1d73c:	4813      	ldr	r0, [pc, #76]	; (1d78c <button_pressed+0x9c>)
   1d73e:	2221      	movs	r2, #33	; 0x21
   1d740:	2300      	movs	r3, #0
   1d742:	f003 fc55 	bl	20ff0 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d746:	480c      	ldr	r0, [pc, #48]	; (1d778 <button_pressed+0x88>)
   1d748:	f002 fd22 	bl	20190 <z_spin_unlock_valid>
   1d74c:	b930      	cbnz	r0, 1d75c <button_pressed+0x6c>
   1d74e:	490b      	ldr	r1, [pc, #44]	; (1d77c <button_pressed+0x8c>)
   1d750:	480b      	ldr	r0, [pc, #44]	; (1d780 <button_pressed+0x90>)
   1d752:	22c2      	movs	r2, #194	; 0xc2
   1d754:	f006 f948 	bl	239e8 <assert_print>
   1d758:	21c2      	movs	r1, #194	; 0xc2
   1d75a:	e7dc      	b.n	1d716 <button_pressed+0x26>
	__asm__ volatile(
   1d75c:	f384 8811 	msr	BASEPRI, r4
   1d760:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   1d764:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
   1d766:	490a      	ldr	r1, [pc, #40]	; (1d790 <button_pressed+0xa0>)
   1d768:	4805      	ldr	r0, [pc, #20]	; (1d780 <button_pressed+0x90>)
   1d76a:	22ba      	movs	r2, #186	; 0xba
   1d76c:	f006 f93c 	bl	239e8 <assert_print>
   1d770:	4807      	ldr	r0, [pc, #28]	; (1d790 <button_pressed+0xa0>)
   1d772:	21ba      	movs	r1, #186	; 0xba
   1d774:	e7d0      	b.n	1d718 <button_pressed+0x28>
   1d776:	bf00      	nop
   1d778:	20002390 	.word	0x20002390
   1d77c:	000280f7 	.word	0x000280f7
   1d780:	000280bd 	.word	0x000280bd
   1d784:	0002a9bc 	.word	0x0002a9bc
   1d788:	20002664 	.word	0x20002664
   1d78c:	20001ce0 	.word	0x20001ce0
   1d790:	0002a9da 	.word	0x0002a9da

0001d794 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d798:	4e11      	ldr	r6, [pc, #68]	; (1d7e0 <dk_set_leds_state.part.0+0x4c>)
   1d79a:	4607      	mov	r7, r0
   1d79c:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d79e:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1d7a0:	fa27 f205 	lsr.w	r2, r7, r5
   1d7a4:	f012 0201 	ands.w	r2, r2, #1
   1d7a8:	d110      	bne.n	1d7cc <dk_set_leds_state.part.0+0x38>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1d7aa:	fa28 f305 	lsr.w	r3, r8, r5
   1d7ae:	07db      	lsls	r3, r3, #31
   1d7b0:	d50e      	bpl.n	1d7d0 <dk_set_leds_state.part.0+0x3c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1d7b2:	7931      	ldrb	r1, [r6, #4]
   1d7b4:	6830      	ldr	r0, [r6, #0]
   1d7b6:	f7ff ff19 	bl	1d5ec <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1d7ba:	4604      	mov	r4, r0
   1d7bc:	b140      	cbz	r0, 1d7d0 <dk_set_leds_state.part.0+0x3c>
			LOG_ERR("Cannot write LED gpio");
   1d7be:	4809      	ldr	r0, [pc, #36]	; (1d7e4 <dk_set_leds_state.part.0+0x50>)
   1d7c0:	2145      	movs	r1, #69	; 0x45
   1d7c2:	f006 f91f 	bl	23a04 <z_log_minimal_printk>
			return err;
		}
	}

	return 0;
}
   1d7c6:	4620      	mov	r0, r4
   1d7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1d7cc:	2201      	movs	r2, #1
   1d7ce:	e7f0      	b.n	1d7b2 <dk_set_leds_state.part.0+0x1e>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d7d0:	3501      	adds	r5, #1
   1d7d2:	2d04      	cmp	r5, #4
   1d7d4:	f106 0608 	add.w	r6, r6, #8
   1d7d8:	d1e2      	bne.n	1d7a0 <dk_set_leds_state.part.0+0xc>
	return 0;
   1d7da:	2400      	movs	r4, #0
   1d7dc:	e7f3      	b.n	1d7c6 <dk_set_leds_state.part.0+0x32>
   1d7de:	bf00      	nop
   1d7e0:	00027c14 	.word	0x00027c14
   1d7e4:	0002aa18 	.word	0x0002aa18

0001d7e8 <buttons_scan_fn>:
{
   1d7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
   1d7ec:	f7ff ff24 	bl	1d638 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d7f0:	f3bf 8f5b 	dmb	ish
   1d7f4:	4b3b      	ldr	r3, [pc, #236]	; (1d8e4 <buttons_scan_fn+0xfc>)
   1d7f6:	4604      	mov	r4, r0
   1d7f8:	e853 2f00 	ldrex	r2, [r3]
   1d7fc:	e843 4100 	strex	r1, r4, [r3]
   1d800:	2900      	cmp	r1, #0
   1d802:	d1f9      	bne.n	1d7f8 <buttons_scan_fn+0x10>
   1d804:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1d808:	4b37      	ldr	r3, [pc, #220]	; (1d8e8 <buttons_scan_fn+0x100>)
   1d80a:	4f38      	ldr	r7, [pc, #224]	; (1d8ec <buttons_scan_fn+0x104>)
   1d80c:	781a      	ldrb	r2, [r3, #0]
   1d80e:	bb32      	cbnz	r2, 1d85e <buttons_scan_fn+0x76>
		if (button_scan != last_button_scan) {
   1d810:	683e      	ldr	r6, [r7, #0]
   1d812:	42a6      	cmp	r6, r4
   1d814:	d019      	beq.n	1d84a <buttons_scan_fn+0x62>
	if (button_handler_cb != NULL) {
   1d816:	4b36      	ldr	r3, [pc, #216]	; (1d8f0 <buttons_scan_fn+0x108>)
   1d818:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1d81a:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   1d81c:	b10b      	cbz	r3, 1d822 <buttons_scan_fn+0x3a>
		button_handler_cb(button_state, has_changed);
   1d81e:	4631      	mov	r1, r6
   1d820:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1d822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d826:	4833      	ldr	r0, [pc, #204]	; (1d8f4 <buttons_scan_fn+0x10c>)
   1d828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d82c:	f002 fcf6 	bl	2021c <z_impl_k_mutex_lock>
	return list->head;
   1d830:	4b31      	ldr	r3, [pc, #196]	; (1d8f8 <buttons_scan_fn+0x110>)
   1d832:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1d834:	b135      	cbz	r5, 1d844 <buttons_scan_fn+0x5c>
   1d836:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   1d838:	4631      	mov	r1, r6
   1d83a:	682b      	ldr	r3, [r5, #0]
   1d83c:	4620      	mov	r0, r4
   1d83e:	4798      	blx	r3
	return node->next;
   1d840:	686d      	ldr	r5, [r5, #4]
   1d842:	e7f7      	b.n	1d834 <buttons_scan_fn+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   1d844:	482b      	ldr	r0, [pc, #172]	; (1d8f4 <buttons_scan_fn+0x10c>)
   1d846:	f002 fd9f 	bl	20388 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1d84a:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   1d84c:	b154      	cbz	r4, 1d864 <buttons_scan_fn+0x7c>
}
   1d84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   1d852:	482a      	ldr	r0, [pc, #168]	; (1d8fc <buttons_scan_fn+0x114>)
   1d854:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1d858:	2300      	movs	r3, #0
   1d85a:	f003 bbc9 	b.w	20ff0 <k_work_reschedule>
		initial_run = false;
   1d85e:	2200      	movs	r2, #0
   1d860:	701a      	strb	r2, [r3, #0]
   1d862:	e7f2      	b.n	1d84a <buttons_scan_fn+0x62>
	__asm__ volatile(
   1d864:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d868:	f3ef 8511 	mrs	r5, BASEPRI
   1d86c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d870:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d874:	4822      	ldr	r0, [pc, #136]	; (1d900 <buttons_scan_fn+0x118>)
   1d876:	f002 fc7d 	bl	20174 <z_spin_lock_valid>
   1d87a:	b940      	cbnz	r0, 1d88e <buttons_scan_fn+0xa6>
   1d87c:	4921      	ldr	r1, [pc, #132]	; (1d904 <buttons_scan_fn+0x11c>)
   1d87e:	4822      	ldr	r0, [pc, #136]	; (1d908 <buttons_scan_fn+0x120>)
   1d880:	2294      	movs	r2, #148	; 0x94
   1d882:	f006 f8b1 	bl	239e8 <assert_print>
   1d886:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d888:	481e      	ldr	r0, [pc, #120]	; (1d904 <buttons_scan_fn+0x11c>)
   1d88a:	f006 f8a6 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   1d88e:	481c      	ldr	r0, [pc, #112]	; (1d900 <buttons_scan_fn+0x118>)
   1d890:	f002 fc8e 	bl	201b0 <z_spin_lock_set_owner>
		switch (state) {
   1d894:	4b1d      	ldr	r3, [pc, #116]	; (1d90c <buttons_scan_fn+0x124>)
   1d896:	7818      	ldrb	r0, [r3, #0]
   1d898:	2801      	cmp	r0, #1
   1d89a:	d119      	bne.n	1d8d0 <buttons_scan_fn+0xe8>
			state = STATE_WAITING;
   1d89c:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   1d89e:	f7ff ff0f 	bl	1d6c0 <callback_ctrl>
   1d8a2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d8a4:	4816      	ldr	r0, [pc, #88]	; (1d900 <buttons_scan_fn+0x118>)
   1d8a6:	f002 fc73 	bl	20190 <z_spin_unlock_valid>
   1d8aa:	b930      	cbnz	r0, 1d8ba <buttons_scan_fn+0xd2>
   1d8ac:	4915      	ldr	r1, [pc, #84]	; (1d904 <buttons_scan_fn+0x11c>)
   1d8ae:	4816      	ldr	r0, [pc, #88]	; (1d908 <buttons_scan_fn+0x120>)
   1d8b0:	22c2      	movs	r2, #194	; 0xc2
   1d8b2:	f006 f899 	bl	239e8 <assert_print>
   1d8b6:	21c2      	movs	r1, #194	; 0xc2
   1d8b8:	e7e6      	b.n	1d888 <buttons_scan_fn+0xa0>
	__asm__ volatile(
   1d8ba:	f385 8811 	msr	BASEPRI, r5
   1d8be:	f3bf 8f6f 	isb	sy
		if (err) {
   1d8c2:	b16c      	cbz	r4, 1d8e0 <buttons_scan_fn+0xf8>
}
   1d8c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Cannot enable callbacks");
   1d8c8:	4811      	ldr	r0, [pc, #68]	; (1d910 <buttons_scan_fn+0x128>)
   1d8ca:	2145      	movs	r1, #69	; 0x45
   1d8cc:	f006 b89a 	b.w	23a04 <z_log_minimal_printk>
			__ASSERT_NO_MSG(false);
   1d8d0:	4910      	ldr	r1, [pc, #64]	; (1d914 <buttons_scan_fn+0x12c>)
   1d8d2:	480d      	ldr	r0, [pc, #52]	; (1d908 <buttons_scan_fn+0x120>)
   1d8d4:	228a      	movs	r2, #138	; 0x8a
   1d8d6:	f006 f887 	bl	239e8 <assert_print>
   1d8da:	480e      	ldr	r0, [pc, #56]	; (1d914 <buttons_scan_fn+0x12c>)
   1d8dc:	218a      	movs	r1, #138	; 0x8a
   1d8de:	e7d4      	b.n	1d88a <buttons_scan_fn+0xa2>
}
   1d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d8e4:	200023a0 	.word	0x200023a0
   1d8e8:	20000877 	.word	0x20000877
   1d8ec:	20002370 	.word	0x20002370
   1d8f0:	200023a4 	.word	0x200023a4
   1d8f4:	20002374 	.word	0x20002374
   1d8f8:	20002388 	.word	0x20002388
   1d8fc:	20001ce0 	.word	0x20001ce0
   1d900:	20002390 	.word	0x20002390
   1d904:	000280f7 	.word	0x000280f7
   1d908:	000280bd 	.word	0x000280bd
   1d90c:	20002664 	.word	0x20002664
   1d910:	0002aa33 	.word	0x0002aa33
   1d914:	0002a9da 	.word	0x0002a9da

0001d918 <dk_leds_init>:
{
   1d918:	b570      	push	{r4, r5, r6, lr}
   1d91a:	4c0d      	ldr	r4, [pc, #52]	; (1d950 <dk_leds_init+0x38>)
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d91c:	2600      	movs	r6, #0
				  spec->dt_flags | extra_flags);
   1d91e:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   1d920:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1d922:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   1d924:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1d928:	f7ff fd98 	bl	1d45c <z_impl_gpio_pin_configure>
		if (err) {
   1d92c:	4605      	mov	r5, r0
   1d92e:	b948      	cbnz	r0, 1d944 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d930:	3601      	adds	r6, #1
   1d932:	2e04      	cmp	r6, #4
   1d934:	f104 0408 	add.w	r4, r4, #8
   1d938:	d1f1      	bne.n	1d91e <dk_leds_init+0x6>
}
   1d93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d93e:	210f      	movs	r1, #15
   1d940:	f7ff bf28 	b.w	1d794 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1d944:	4803      	ldr	r0, [pc, #12]	; (1d954 <dk_leds_init+0x3c>)
   1d946:	2145      	movs	r1, #69	; 0x45
   1d948:	f006 f85c 	bl	23a04 <z_log_minimal_printk>
}
   1d94c:	4628      	mov	r0, r5
   1d94e:	bd70      	pop	{r4, r5, r6, pc}
   1d950:	00027c14 	.word	0x00027c14
   1d954:	0002aa50 	.word	0x0002aa50

0001d958 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d958:	4b07      	ldr	r3, [pc, #28]	; (1d978 <dk_read_buttons+0x20>)
   1d95a:	f3bf 8f5b 	dmb	ish
   1d95e:	681b      	ldr	r3, [r3, #0]
   1d960:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   1d964:	b100      	cbz	r0, 1d968 <dk_read_buttons+0x10>
		*button_state = current_state;
   1d966:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1d968:	4804      	ldr	r0, [pc, #16]	; (1d97c <dk_read_buttons+0x24>)
   1d96a:	b111      	cbz	r1, 1d972 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1d96c:	6802      	ldr	r2, [r0, #0]
   1d96e:	405a      	eors	r2, r3
   1d970:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1d972:	6003      	str	r3, [r0, #0]
}
   1d974:	4770      	bx	lr
   1d976:	bf00      	nop
   1d978:	200023a0 	.word	0x200023a0
   1d97c:	2000236c 	.word	0x2000236c

0001d980 <dk_buttons_init>:
{
   1d980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   1d984:	4b3c      	ldr	r3, [pc, #240]	; (1da78 <dk_buttons_init+0xf8>)
   1d986:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1d988:	483c      	ldr	r0, [pc, #240]	; (1da7c <dk_buttons_init+0xfc>)
   1d98a:	4d3d      	ldr	r5, [pc, #244]	; (1da80 <dk_buttons_init+0x100>)
   1d98c:	f009 fa00 	bl	26d90 <z_impl_k_mutex_init>
   1d990:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d992:	f04f 0800 	mov.w	r8, #0
   1d996:	462f      	mov	r7, r5
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   1d998:	88f2      	ldrh	r2, [r6, #6]
   1d99a:	6830      	ldr	r0, [r6, #0]
				  spec->pin,
   1d99c:	7931      	ldrb	r1, [r6, #4]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1d99e:	f012 0f01 	tst.w	r2, #1
   1d9a2:	bf14      	ite	ne
   1d9a4:	2310      	movne	r3, #16
   1d9a6:	2320      	moveq	r3, #32
	return gpio_pin_configure(spec->port,
   1d9a8:	431a      	orrs	r2, r3
   1d9aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   1d9ae:	f7ff fd55 	bl	1d45c <z_impl_gpio_pin_configure>
		if (err) {
   1d9b2:	4604      	mov	r4, r0
   1d9b4:	b130      	cbz	r0, 1d9c4 <dk_buttons_init+0x44>
			LOG_ERR("Cannot configure button gpio");
   1d9b6:	4833      	ldr	r0, [pc, #204]	; (1da84 <dk_buttons_init+0x104>)
   1d9b8:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Cannot disable callbacks()");
   1d9ba:	f006 f823 	bl	23a04 <z_log_minimal_printk>
}
   1d9be:	4620      	mov	r0, r4
   1d9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d9c4:	f108 0801 	add.w	r8, r8, #1
   1d9c8:	f1b8 0f04 	cmp.w	r8, #4
   1d9cc:	f106 0608 	add.w	r6, r6, #8
   1d9d0:	d1e2      	bne.n	1d998 <dk_buttons_init+0x18>
	uint32_t pin_mask = 0;
   1d9d2:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d9d4:	4680      	mov	r8, r0
		pin_mask |= BIT(buttons[i].pin);
   1d9d6:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1d9da:	6828      	ldr	r0, [r5, #0]
   1d9dc:	7929      	ldrb	r1, [r5, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1d9de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d9e2:	f7ff fdb5 	bl	1d550 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1d9e6:	4604      	mov	r4, r0
   1d9e8:	b110      	cbz	r0, 1d9f0 <dk_buttons_init+0x70>
			LOG_ERR("Cannot disable callbacks()");
   1d9ea:	4827      	ldr	r0, [pc, #156]	; (1da88 <dk_buttons_init+0x108>)
   1d9ec:	2145      	movs	r1, #69	; 0x45
   1d9ee:	e7e4      	b.n	1d9ba <dk_buttons_init+0x3a>
		pin_mask |= BIT(buttons[i].pin);
   1d9f0:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d9f2:	f108 0801 	add.w	r8, r8, #1
		pin_mask |= BIT(buttons[i].pin);
   1d9f6:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d9fa:	f1b8 0f04 	cmp.w	r8, #4
		pin_mask |= BIT(buttons[i].pin);
   1d9fe:	ea46 0603 	orr.w	r6, r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1da02:	f105 0508 	add.w	r5, r5, #8
   1da06:	d1e8      	bne.n	1d9da <dk_buttons_init+0x5a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1da08:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1da8c <dk_buttons_init+0x10c>
   1da0c:	4b20      	ldr	r3, [pc, #128]	; (1da90 <dk_buttons_init+0x110>)
	callback->pin_mask = pin_mask;
   1da0e:	e9c8 3601 	strd	r3, r6, [r8, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1da12:	4605      	mov	r5, r0
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   1da14:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1da18:	6883      	ldr	r3, [r0, #8]
   1da1a:	69db      	ldr	r3, [r3, #28]
   1da1c:	b13b      	cbz	r3, 1da2e <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1da1e:	2201      	movs	r2, #1
   1da20:	4641      	mov	r1, r8
   1da22:	4798      	blx	r3
		if (err) {
   1da24:	4604      	mov	r4, r0
   1da26:	b128      	cbz	r0, 1da34 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   1da28:	481a      	ldr	r0, [pc, #104]	; (1da94 <dk_buttons_init+0x114>)
   1da2a:	2145      	movs	r1, #69	; 0x45
   1da2c:	e7c5      	b.n	1d9ba <dk_buttons_init+0x3a>
		return -ENOTSUP;
   1da2e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1da32:	e7f9      	b.n	1da28 <dk_buttons_init+0xa8>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1da34:	3501      	adds	r5, #1
   1da36:	2d04      	cmp	r5, #4
   1da38:	d1ec      	bne.n	1da14 <dk_buttons_init+0x94>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1da3a:	4917      	ldr	r1, [pc, #92]	; (1da98 <dk_buttons_init+0x118>)
   1da3c:	4817      	ldr	r0, [pc, #92]	; (1da9c <dk_buttons_init+0x11c>)
   1da3e:	f003 f9ed 	bl	20e1c <k_work_init_delayable>
	state = STATE_SCANNING;
   1da42:	4b17      	ldr	r3, [pc, #92]	; (1daa0 <dk_buttons_init+0x120>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1da44:	4815      	ldr	r0, [pc, #84]	; (1da9c <dk_buttons_init+0x11c>)
	state = STATE_SCANNING;
   1da46:	2201      	movs	r2, #1
   1da48:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1da4a:	2300      	movs	r3, #0
   1da4c:	2200      	movs	r2, #0
   1da4e:	f003 fa6b 	bl	20f28 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1da52:	4621      	mov	r1, r4
   1da54:	4620      	mov	r0, r4
   1da56:	f7ff ff7f 	bl	1d958 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1da5a:	f7ff fded 	bl	1d638 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1da5e:	f3bf 8f5b 	dmb	ish
   1da62:	4b10      	ldr	r3, [pc, #64]	; (1daa4 <dk_buttons_init+0x124>)
   1da64:	e853 2f00 	ldrex	r2, [r3]
   1da68:	e843 0100 	strex	r1, r0, [r3]
   1da6c:	2900      	cmp	r1, #0
   1da6e:	d1f9      	bne.n	1da64 <dk_buttons_init+0xe4>
   1da70:	f3bf 8f5b 	dmb	ish
   1da74:	e7a3      	b.n	1d9be <dk_buttons_init+0x3e>
   1da76:	bf00      	nop
   1da78:	200023a4 	.word	0x200023a4
   1da7c:	20002374 	.word	0x20002374
   1da80:	00027c34 	.word	0x00027c34
   1da84:	0002aa6f 	.word	0x0002aa6f
   1da88:	0002aa91 	.word	0x0002aa91
   1da8c:	20002394 	.word	0x20002394
   1da90:	0001d6f1 	.word	0x0001d6f1
   1da94:	0002aab1 	.word	0x0002aab1
   1da98:	0001d7e9 	.word	0x0001d7e9
   1da9c:	20001ce0 	.word	0x20001ce0
   1daa0:	20002664 	.word	0x20002664
   1daa4:	200023a0 	.word	0x200023a0

0001daa8 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1daa8:	2803      	cmp	r0, #3
{
   1daaa:	b510      	push	{r4, lr}
   1daac:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1daae:	d907      	bls.n	1dac0 <dk_set_led+0x18>
		LOG_ERR("LED index out of the range");
   1dab0:	480b      	ldr	r0, [pc, #44]	; (1dae0 <dk_set_led+0x38>)
   1dab2:	2145      	movs	r1, #69	; 0x45
   1dab4:	f005 ffa6 	bl	23a04 <z_log_minimal_printk>
   1dab8:	f06f 0415 	mvn.w	r4, #21
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1dabc:	4620      	mov	r0, r4
   1dabe:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1dac0:	4b08      	ldr	r3, [pc, #32]	; (1dae4 <dk_set_led+0x3c>)
   1dac2:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1dac6:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1daca:	7909      	ldrb	r1, [r1, #4]
   1dacc:	f7ff fd8e 	bl	1d5ec <gpio_pin_set>
	if (err) {
   1dad0:	4604      	mov	r4, r0
   1dad2:	2800      	cmp	r0, #0
   1dad4:	d0f2      	beq.n	1dabc <dk_set_led+0x14>
		LOG_ERR("Cannot write LED gpio");
   1dad6:	4804      	ldr	r0, [pc, #16]	; (1dae8 <dk_set_led+0x40>)
   1dad8:	2145      	movs	r1, #69	; 0x45
   1dada:	f005 ff93 	bl	23a04 <z_log_minimal_printk>
   1dade:	e7ed      	b.n	1dabc <dk_set_led+0x14>
   1dae0:	0002aaca 	.word	0x0002aaca
   1dae4:	00027c14 	.word	0x00027c14
   1dae8:	0002aa18 	.word	0x0002aa18

0001daec <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1daec:	4602      	mov	r2, r0
   1daee:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1daf0:	4801      	ldr	r0, [pc, #4]	; (1daf8 <multithreading_lock_acquire+0xc>)
   1daf2:	f002 bb93 	b.w	2021c <z_impl_k_mutex_lock>
   1daf6:	bf00      	nop
   1daf8:	200008e8 	.word	0x200008e8

0001dafc <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1dafc:	4801      	ldr	r0, [pc, #4]	; (1db04 <multithreading_lock_release+0x8>)
   1dafe:	f002 bc43 	b.w	20388 <z_impl_k_mutex_unlock>
   1db02:	bf00      	nop
   1db04:	200008e8 	.word	0x200008e8

0001db08 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1db08:	4803      	ldr	r0, [pc, #12]	; (1db18 <k_sys_fatal_error_handler+0x10>)
{
   1db0a:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   1db0c:	2145      	movs	r1, #69	; 0x45
   1db0e:	f005 ff79 	bl	23a04 <z_log_minimal_printk>
		sys_arch_reboot(0);
   1db12:	2000      	movs	r0, #0
   1db14:	f7f5 ff32 	bl	1397c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1db18:	0002aafe 	.word	0x0002aafe

0001db1c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1db1c:	b508      	push	{r3, lr}
   1db1e:	4602      	mov	r2, r0
   1db20:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1db22:	4805      	ldr	r0, [pc, #20]	; (1db38 <sdc_assertion_handler+0x1c>)
   1db24:	2145      	movs	r1, #69	; 0x45
   1db26:	f005 ff6d 	bl	23a04 <z_log_minimal_printk>
	k_oops();
   1db2a:	4040      	eors	r0, r0
   1db2c:	f380 8811 	msr	BASEPRI, r0
   1db30:	f04f 0003 	mov.w	r0, #3
   1db34:	df02      	svc	2
}
   1db36:	bd08      	pop	{r3, pc}
   1db38:	0002ab20 	.word	0x0002ab20

0001db3c <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   1db3c:	b510      	push	{r4, lr}
	BT_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   1db3e:	4921      	ldr	r1, [pc, #132]	; (1dbc4 <hci_driver_open+0x88>)
   1db40:	4821      	ldr	r0, [pc, #132]	; (1dbc8 <hci_driver_open+0x8c>)
{
   1db42:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   1db44:	f003 f854 	bl	20bf0 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   1db48:	f000 fe9e 	bl	1e888 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   1db4c:	a803      	add	r0, sp, #12
   1db4e:	f7e6 fc19 	bl	4384 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1db52:	4a1e      	ldr	r2, [pc, #120]	; (1dbcc <hci_driver_open+0x90>)
   1db54:	481e      	ldr	r0, [pc, #120]	; (1dbd0 <hci_driver_open+0x94>)
   1db56:	2149      	movs	r1, #73	; 0x49
   1db58:	f005 ff54 	bl	23a04 <z_log_minimal_printk>
   1db5c:	2214      	movs	r2, #20
   1db5e:	a903      	add	r1, sp, #12
   1db60:	2003      	movs	r0, #3
   1db62:	f7f4 f949 	bl	11df8 <z_log_minimal_hexdump_print>
   1db66:	481b      	ldr	r0, [pc, #108]	; (1dbd4 <hci_driver_open+0x98>)
   1db68:	f009 f8c9 	bl	26cfe <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   1db6c:	b940      	cbnz	r0, 1db80 <hci_driver_open+0x44>
		BT_ERR("Entropy source device not ready");
   1db6e:	481a      	ldr	r0, [pc, #104]	; (1dbd8 <hci_driver_open+0x9c>)
   1db70:	2145      	movs	r1, #69	; 0x45
   1db72:	f005 ff47 	bl	23a04 <z_log_minimal_printk>
		return -ENODEV;
   1db76:	f06f 0412 	mvn.w	r4, #18
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   1db7a:	4620      	mov	r0, r4
   1db7c:	b008      	add	sp, #32
   1db7e:	bd10      	pop	{r4, pc}
	sdc_rand_source_t rand_functions = {
   1db80:	4a16      	ldr	r2, [pc, #88]	; (1dbdc <hci_driver_open+0xa0>)
   1db82:	ca07      	ldmia	r2, {r0, r1, r2}
   1db84:	466b      	mov	r3, sp
   1db86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1db8a:	4618      	mov	r0, r3
   1db8c:	f7e6 fda8 	bl	46e0 <sdc_rand_source_register>
	if (err) {
   1db90:	4602      	mov	r2, r0
   1db92:	b130      	cbz	r0, 1dba2 <hci_driver_open+0x66>
		BT_ERR("Failed to register rand source (%d)", err);
   1db94:	4812      	ldr	r0, [pc, #72]	; (1dbe0 <hci_driver_open+0xa4>)
   1db96:	2145      	movs	r1, #69	; 0x45
   1db98:	f005 ff34 	bl	23a04 <z_log_minimal_printk>
		return -EINVAL;
   1db9c:	f06f 0415 	mvn.w	r4, #21
   1dba0:	e7eb      	b.n	1db7a <hci_driver_open+0x3e>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1dba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dbaa:	f7ff ff9f 	bl	1daec <multithreading_lock_acquire>
	if (err) {
   1dbae:	4604      	mov	r4, r0
   1dbb0:	2800      	cmp	r0, #0
   1dbb2:	d1e2      	bne.n	1db7a <hci_driver_open+0x3e>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1dbb4:	490b      	ldr	r1, [pc, #44]	; (1dbe4 <hci_driver_open+0xa8>)
   1dbb6:	480c      	ldr	r0, [pc, #48]	; (1dbe8 <hci_driver_open+0xac>)
   1dbb8:	f7e6 fc56 	bl	4468 <sdc_enable>
	if (err) {
   1dbbc:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1dbbe:	f7ff ff9d 	bl	1dafc <multithreading_lock_release>
	return 0;
   1dbc2:	e7da      	b.n	1db7a <hci_driver_open+0x3e>
   1dbc4:	00026ad5 	.word	0x00026ad5
   1dbc8:	200023a8 	.word	0x200023a8
   1dbcc:	0002ab4a 	.word	0x0002ab4a
   1dbd0:	0002ab71 	.word	0x0002ab71
   1dbd4:	00027200 	.word	0x00027200
   1dbd8:	0002ab79 	.word	0x0002ab79
   1dbdc:	00027600 	.word	0x00027600
   1dbe0:	0002ab9e 	.word	0x0002ab9e
   1dbe4:	200026ae 	.word	0x200026ae
   1dbe8:	0001dd61 	.word	0x0001dd61

0001dbec <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1dbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1dbee:	4835      	ldr	r0, [pc, #212]	; (1dcc4 <hci_driver_init+0xd8>)
   1dbf0:	f7f7 f930 	bl	14e54 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1dbf4:	4834      	ldr	r0, [pc, #208]	; (1dcc8 <hci_driver_init+0xdc>)
   1dbf6:	f7e6 fc5f 	bl	44b8 <sdc_init>
			err = sdc_support_adv();
   1dbfa:	f7e6 fcdb 	bl	45b4 <sdc_support_adv>
			if (err) {
   1dbfe:	b118      	cbz	r0, 1dc08 <hci_driver_init+0x1c>
				return -ENOTSUP;
   1dc00:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1dc04:	b003      	add	sp, #12
   1dc06:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_peripheral();
   1dc08:	f7e6 fd04 	bl	4614 <sdc_support_peripheral>
		if (err) {
   1dc0c:	2800      	cmp	r0, #0
   1dc0e:	d1f7      	bne.n	1dc00 <hci_driver_init+0x14>
			err = sdc_support_dle_peripheral();
   1dc10:	f7e6 fce0 	bl	45d4 <sdc_support_dle_peripheral>
			if (err) {
   1dc14:	2800      	cmp	r0, #0
   1dc16:	d1f3      	bne.n	1dc00 <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   1dc18:	f7e6 fcec 	bl	45f4 <sdc_support_le_2m_phy>
		if (err) {
   1dc1c:	2800      	cmp	r0, #0
   1dc1e:	d1ef      	bne.n	1dc00 <hci_driver_init+0x14>
			err = sdc_support_phy_update_peripheral();
   1dc20:	f7e6 fd08 	bl	4634 <sdc_support_phy_update_peripheral>
			if (err) {
   1dc24:	4604      	mov	r4, r0
   1dc26:	2800      	cmp	r0, #0
   1dc28:	d1ea      	bne.n	1dc00 <hci_driver_init+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc2a:	aa01      	add	r2, sp, #4
   1dc2c:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1dc2e:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc32:	f7e6 fbb5 	bl	43a0 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc36:	2800      	cmp	r0, #0
   1dc38:	dbe4      	blt.n	1dc04 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1dc3a:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc3c:	aa01      	add	r2, sp, #4
   1dc3e:	2102      	movs	r1, #2
   1dc40:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1dc42:	f88d 5004 	strb.w	r5, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc46:	f7e6 fbab 	bl	43a0 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc4a:	2800      	cmp	r0, #0
   1dc4c:	dbda      	blt.n	1dc04 <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1dc4e:	4b1f      	ldr	r3, [pc, #124]	; (1dccc <hci_driver_init+0xe0>)
   1dc50:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc52:	aa01      	add	r2, sp, #4
   1dc54:	2103      	movs	r1, #3
   1dc56:	4620      	mov	r0, r4
   1dc58:	f7e6 fba2 	bl	43a0 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc5c:	2800      	cmp	r0, #0
   1dc5e:	dbd1      	blt.n	1dc04 <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   1dc60:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc64:	aa01      	add	r2, sp, #4
   1dc66:	2104      	movs	r1, #4
   1dc68:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1dc6a:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc6c:	f7e6 fb98 	bl	43a0 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc70:	2800      	cmp	r0, #0
   1dc72:	dbc7      	blt.n	1dc04 <hci_driver_init+0x18>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc74:	aa01      	add	r2, sp, #4
   1dc76:	2105      	movs	r1, #5
   1dc78:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1dc7a:	f88d 5004 	strb.w	r5, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc7e:	f7e6 fb8f 	bl	43a0 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc82:	2800      	cmp	r0, #0
   1dc84:	dbbe      	blt.n	1dc04 <hci_driver_init+0x18>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1dc86:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc88:	aa01      	add	r2, sp, #4
   1dc8a:	2107      	movs	r1, #7
   1dc8c:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1dc8e:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc92:	f7e6 fb85 	bl	43a0 <sdc_cfg_set>
		if (required_memory < 0) {
   1dc96:	2800      	cmp	r0, #0
   1dc98:	dbb4      	blt.n	1dc04 <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   1dc9a:	f240 724d 	movw	r2, #1869	; 0x74d
   1dc9e:	4290      	cmp	r0, r2
   1dca0:	dd0d      	ble.n	1dcbe <hci_driver_init+0xd2>
		BT_ERR("Allocated memory too low: %u < %u",
   1dca2:	4603      	mov	r3, r0
   1dca4:	2145      	movs	r1, #69	; 0x45
   1dca6:	480a      	ldr	r0, [pc, #40]	; (1dcd0 <hci_driver_init+0xe4>)
   1dca8:	f005 feac 	bl	23a04 <z_log_minimal_printk>
		k_panic();
   1dcac:	4040      	eors	r0, r0
   1dcae:	f380 8811 	msr	BASEPRI, r0
   1dcb2:	f04f 0004 	mov.w	r0, #4
   1dcb6:	df02      	svc	2
		return -ENOMEM;
   1dcb8:	f06f 000b 	mvn.w	r0, #11
   1dcbc:	e7a2      	b.n	1dc04 <hci_driver_init+0x18>
	return 0;
   1dcbe:	2000      	movs	r0, #0
	if (err) {
   1dcc0:	e7a0      	b.n	1dc04 <hci_driver_init+0x18>
   1dcc2:	bf00      	nop
   1dcc4:	00027c54 	.word	0x00027c54
   1dcc8:	0001db1d 	.word	0x0001db1d
   1dccc:	02031b1b 	.word	0x02031b1b
   1dcd0:	0002abc7 	.word	0x0002abc7

0001dcd4 <rand_prio_low_vector_get_blocking>:
{
   1dcd4:	b510      	push	{r4, lr}
   1dcd6:	4603      	mov	r3, r0
   1dcd8:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1dcda:	480d      	ldr	r0, [pc, #52]	; (1dd10 <rand_prio_low_vector_get_blocking+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1dcdc:	6881      	ldr	r1, [r0, #8]
   1dcde:	680c      	ldr	r4, [r1, #0]
   1dce0:	b944      	cbnz	r4, 1dcf4 <rand_prio_low_vector_get_blocking+0x20>
   1dce2:	490c      	ldr	r1, [pc, #48]	; (1dd14 <rand_prio_low_vector_get_blocking+0x40>)
   1dce4:	480c      	ldr	r0, [pc, #48]	; (1dd18 <rand_prio_low_vector_get_blocking+0x44>)
   1dce6:	224d      	movs	r2, #77	; 0x4d
   1dce8:	f005 fe7e 	bl	239e8 <assert_print>
   1dcec:	4809      	ldr	r0, [pc, #36]	; (1dd14 <rand_prio_low_vector_get_blocking+0x40>)
   1dcee:	214d      	movs	r1, #77	; 0x4d
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1dcf0:	f005 fe73 	bl	239da <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1dcf4:	4619      	mov	r1, r3
   1dcf6:	47a0      	blx	r4
   1dcf8:	b148      	cbz	r0, 1dd0e <rand_prio_low_vector_get_blocking+0x3a>
   1dcfa:	4908      	ldr	r1, [pc, #32]	; (1dd1c <rand_prio_low_vector_get_blocking+0x48>)
   1dcfc:	4806      	ldr	r0, [pc, #24]	; (1dd18 <rand_prio_low_vector_get_blocking+0x44>)
   1dcfe:	f240 12a9 	movw	r2, #425	; 0x1a9
   1dd02:	f005 fe71 	bl	239e8 <assert_print>
   1dd06:	4805      	ldr	r0, [pc, #20]	; (1dd1c <rand_prio_low_vector_get_blocking+0x48>)
   1dd08:	f240 11a9 	movw	r1, #425	; 0x1a9
   1dd0c:	e7f0      	b.n	1dcf0 <rand_prio_low_vector_get_blocking+0x1c>
}
   1dd0e:	bd10      	pop	{r4, pc}
   1dd10:	00027200 	.word	0x00027200
   1dd14:	0002abee 	.word	0x0002abee
   1dd18:	000280bd 	.word	0x000280bd
   1dd1c:	0002ac22 	.word	0x0002ac22

0001dd20 <rand_prio_low_vector_get>:
{
   1dd20:	b538      	push	{r3, r4, r5, lr}
   1dd22:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1dd24:	480b      	ldr	r0, [pc, #44]	; (1dd54 <rand_prio_low_vector_get+0x34>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1dd26:	6883      	ldr	r3, [r0, #8]
   1dd28:	685d      	ldr	r5, [r3, #4]
   1dd2a:	460a      	mov	r2, r1
   1dd2c:	b955      	cbnz	r5, 1dd44 <rand_prio_low_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1dd2e:	490a      	ldr	r1, [pc, #40]	; (1dd58 <rand_prio_low_vector_get+0x38>)
   1dd30:	480a      	ldr	r0, [pc, #40]	; (1dd5c <rand_prio_low_vector_get+0x3c>)
   1dd32:	f240 1299 	movw	r2, #409	; 0x199
   1dd36:	f005 fe57 	bl	239e8 <assert_print>
   1dd3a:	4807      	ldr	r0, [pc, #28]	; (1dd58 <rand_prio_low_vector_get+0x38>)
   1dd3c:	f240 1199 	movw	r1, #409	; 0x199
   1dd40:	f005 fe4b 	bl	239da <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1dd44:	2300      	movs	r3, #0
   1dd46:	4621      	mov	r1, r4
   1dd48:	47a8      	blx	r5
   1dd4a:	2800      	cmp	r0, #0
   1dd4c:	dbef      	blt.n	1dd2e <rand_prio_low_vector_get+0xe>
}
   1dd4e:	b2c0      	uxtb	r0, r0
   1dd50:	bd38      	pop	{r3, r4, r5, pc}
   1dd52:	bf00      	nop
   1dd54:	00027200 	.word	0x00027200
   1dd58:	0002ac22 	.word	0x0002ac22
   1dd5c:	000280bd 	.word	0x000280bd

0001dd60 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1dd60:	4901      	ldr	r1, [pc, #4]	; (1dd68 <receive_signal_raise+0x8>)
   1dd62:	4802      	ldr	r0, [pc, #8]	; (1dd6c <receive_signal_raise+0xc>)
   1dd64:	f009 b8ac 	b.w	26ec0 <k_work_submit_to_queue>
   1dd68:	200023a8 	.word	0x200023a8
   1dd6c:	20001d90 	.word	0x20001d90

0001dd70 <rand_prio_high_vector_get>:
{
   1dd70:	b538      	push	{r3, r4, r5, lr}
   1dd72:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1dd74:	480b      	ldr	r0, [pc, #44]	; (1dda4 <rand_prio_high_vector_get+0x34>)
	if (unlikely(!api->get_entropy_isr)) {
   1dd76:	6883      	ldr	r3, [r0, #8]
   1dd78:	685d      	ldr	r5, [r3, #4]
   1dd7a:	460a      	mov	r2, r1
   1dd7c:	b955      	cbnz	r5, 1dd94 <rand_prio_high_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1dd7e:	490a      	ldr	r1, [pc, #40]	; (1dda8 <rand_prio_high_vector_get+0x38>)
   1dd80:	480a      	ldr	r0, [pc, #40]	; (1ddac <rand_prio_high_vector_get+0x3c>)
   1dd82:	f240 12a1 	movw	r2, #417	; 0x1a1
   1dd86:	f005 fe2f 	bl	239e8 <assert_print>
   1dd8a:	4807      	ldr	r0, [pc, #28]	; (1dda8 <rand_prio_high_vector_get+0x38>)
   1dd8c:	f240 11a1 	movw	r1, #417	; 0x1a1
   1dd90:	f005 fe23 	bl	239da <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1dd94:	2300      	movs	r3, #0
   1dd96:	4621      	mov	r1, r4
   1dd98:	47a8      	blx	r5
   1dd9a:	2800      	cmp	r0, #0
   1dd9c:	dbef      	blt.n	1dd7e <rand_prio_high_vector_get+0xe>
}
   1dd9e:	b2c0      	uxtb	r0, r0
   1dda0:	bd38      	pop	{r3, r4, r5, pc}
   1dda2:	bf00      	nop
   1dda4:	00027200 	.word	0x00027200
   1dda8:	0002ac22 	.word	0x0002ac22
   1ddac:	000280bd 	.word	0x000280bd

0001ddb0 <hci_driver_receive_process>:
{
   1ddb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ddb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ddb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ddba:	f7ff fe97 	bl	1daec <multithreading_lock_acquire>
	if (!errcode) {
   1ddbe:	2800      	cmp	r0, #0
   1ddc0:	d15b      	bne.n	1de7a <hci_driver_receive_process+0xca>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1ddc2:	4d2f      	ldr	r5, [pc, #188]	; (1de80 <hci_driver_receive_process+0xd0>)
   1ddc4:	f10d 0107 	add.w	r1, sp, #7
   1ddc8:	4628      	mov	r0, r5
   1ddca:	f000 fbed 	bl	1e5a8 <hci_internal_msg_get>
   1ddce:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ddd0:	f7ff fe94 	bl	1dafc <multithreading_lock_release>
	if (errcode) {
   1ddd4:	2c00      	cmp	r4, #0
   1ddd6:	d150      	bne.n	1de7a <hci_driver_receive_process+0xca>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1ddd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dddc:	2b04      	cmp	r3, #4
   1ddde:	d12b      	bne.n	1de38 <hci_driver_receive_process+0x88>
	switch (hdr->evt) {
   1dde0:	7828      	ldrb	r0, [r5, #0]
   1dde2:	283e      	cmp	r0, #62	; 0x3e
   1dde4:	d014      	beq.n	1de10 <hci_driver_receive_process+0x60>
   1dde6:	28ff      	cmp	r0, #255	; 0xff
   1dde8:	d019      	beq.n	1de1e <hci_driver_receive_process+0x6e>
		switch (subevent) {
   1ddea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ddee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ddf2:	4621      	mov	r1, r4
   1ddf4:	f7f5 ffd0 	bl	13d98 <bt_buf_get_evt>
	if (!evt_buf) {
   1ddf8:	4606      	mov	r6, r0
   1ddfa:	b998      	cbnz	r0, 1de24 <hci_driver_receive_process+0x74>
		if (discardable) {
   1ddfc:	b91c      	cbnz	r4, 1de06 <hci_driver_receive_process+0x56>
		BT_ERR("No event buffer available");
   1ddfe:	4821      	ldr	r0, [pc, #132]	; (1de84 <hci_driver_receive_process+0xd4>)
   1de00:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No data buffer available");
   1de02:	f005 fdff 	bl	23a04 <z_log_minimal_printk>
}
   1de06:	b002      	add	sp, #8
   1de08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1de0c:	f7ff bfa8 	b.w	1dd60 <receive_signal_raise>
		switch (me->subevent) {
   1de10:	78ab      	ldrb	r3, [r5, #2]
   1de12:	2b02      	cmp	r3, #2
		switch (subevent) {
   1de14:	d1e9      	bne.n	1ddea <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1de16:	2200      	movs	r2, #0
   1de18:	2300      	movs	r3, #0
			return true;
   1de1a:	2401      	movs	r4, #1
   1de1c:	e7e9      	b.n	1ddf2 <hci_driver_receive_process+0x42>
		switch (subevent) {
   1de1e:	78ab      	ldrb	r3, [r5, #2]
   1de20:	2b80      	cmp	r3, #128	; 0x80
   1de22:	e7f7      	b.n	1de14 <hci_driver_receive_process+0x64>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1de24:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1de26:	4916      	ldr	r1, [pc, #88]	; (1de80 <hci_driver_receive_process+0xd0>)
   1de28:	3202      	adds	r2, #2
   1de2a:	3008      	adds	r0, #8
   1de2c:	f008 fb96 	bl	2655c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1de30:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1de32:	f7f6 ffe9 	bl	14e08 <bt_recv>
   1de36:	e7e6      	b.n	1de06 <hci_driver_receive_process+0x56>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1de38:	2b02      	cmp	r3, #2
   1de3a:	d113      	bne.n	1de64 <hci_driver_receive_process+0xb4>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1de3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1de40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de44:	2003      	movs	r0, #3
   1de46:	f7f5 ff69 	bl	13d1c <bt_buf_get_rx>
	if (!data_buf) {
   1de4a:	4604      	mov	r4, r0
   1de4c:	b910      	cbnz	r0, 1de54 <hci_driver_receive_process+0xa4>
		BT_ERR("No data buffer available");
   1de4e:	480e      	ldr	r0, [pc, #56]	; (1de88 <hci_driver_receive_process+0xd8>)
   1de50:	2145      	movs	r1, #69	; 0x45
   1de52:	e7d6      	b.n	1de02 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1de54:	886a      	ldrh	r2, [r5, #2]
   1de56:	4629      	mov	r1, r5
   1de58:	3204      	adds	r2, #4
   1de5a:	3008      	adds	r0, #8
   1de5c:	f008 fb7e 	bl	2655c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1de60:	4620      	mov	r0, r4
   1de62:	e7e6      	b.n	1de32 <hci_driver_receive_process+0x82>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   1de64:	4909      	ldr	r1, [pc, #36]	; (1de8c <hci_driver_receive_process+0xdc>)
   1de66:	480a      	ldr	r0, [pc, #40]	; (1de90 <hci_driver_receive_process+0xe0>)
   1de68:	f44f 72bb 	mov.w	r2, #374	; 0x176
   1de6c:	f005 fdbc 	bl	239e8 <assert_print>
   1de70:	4806      	ldr	r0, [pc, #24]	; (1de8c <hci_driver_receive_process+0xdc>)
   1de72:	f44f 71bb 	mov.w	r1, #374	; 0x176
   1de76:	f005 fdb0 	bl	239da <assert_post_action>
}
   1de7a:	b002      	add	sp, #8
   1de7c:	bd70      	pop	{r4, r5, r6, pc}
   1de7e:	bf00      	nop
   1de80:	20002665 	.word	0x20002665
   1de84:	0002ac5b 	.word	0x0002ac5b
   1de88:	0002ac7a 	.word	0x0002ac7a
   1de8c:	0002ac22 	.word	0x0002ac22
   1de90:	000280bd 	.word	0x000280bd

0001de94 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1de94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1de96:	4db2      	ldr	r5, [pc, #712]	; (1e160 <hci_internal_cmd_put+0x2cc>)
   1de98:	782b      	ldrb	r3, [r5, #0]
{
   1de9a:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
   1de9c:	2b00      	cmp	r3, #0
   1de9e:	f040 8380 	bne.w	1e5a2 <hci_internal_cmd_put+0x70e>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1dea2:	2304      	movs	r3, #4
   1dea4:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1dea8:	4bae      	ldr	r3, [pc, #696]	; (1e164 <hci_internal_cmd_put+0x2d0>)
   1deaa:	8804      	ldrh	r4, [r0, #0]
   1deac:	681f      	ldr	r7, [r3, #0]
   1deae:	b1a7      	cbz	r7, 1deda <hci_internal_cmd_put+0x46>
		status = user_cmd_handler(cmd_in,
   1deb0:	f10d 0306 	add.w	r3, sp, #6
   1deb4:	f10d 0207 	add.w	r2, sp, #7
   1deb8:	1c69      	adds	r1, r5, #1
   1deba:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1debc:	2801      	cmp	r0, #1
   1debe:	d00c      	beq.n	1deda <hci_internal_cmd_put+0x46>
	if (generate_command_status_event ||
   1dec0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1dec4:	bbab      	cbnz	r3, 1df32 <hci_internal_cmd_put+0x9e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1dec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1deca:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1decc:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1dece:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1ded0:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
   1ded2:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
   1ded4:	80ac      	strh	r4, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1ded6:	71a8      	strb	r0, [r5, #6]
}
   1ded8:	e034      	b.n	1df44 <hci_internal_cmd_put+0xb0>
		switch (BT_OGF(opcode)) {
   1deda:	f5b4 5f10 	cmp.w	r4, #9216	; 0x2400
   1dede:	ea4f 2394 	mov.w	r3, r4, lsr #10
   1dee2:	d20d      	bcs.n	1df00 <hci_internal_cmd_put+0x6c>
   1dee4:	b17b      	cbz	r3, 1df06 <hci_internal_cmd_put+0x72>
   1dee6:	3b01      	subs	r3, #1
   1dee8:	2b07      	cmp	r3, #7
   1deea:	d819      	bhi.n	1df20 <hci_internal_cmd_put+0x8c>
   1deec:	e8df f013 	tbh	[pc, r3, lsl #1]
   1def0:	0018000d 	.word	0x0018000d
   1def4:	0081003f 	.word	0x0081003f
   1def8:	00180018 	.word	0x00180018
   1defc:	01400018 	.word	0x01400018
   1df00:	2b3f      	cmp	r3, #63	; 0x3f
   1df02:	f000 8290 	beq.w	1e426 <hci_internal_cmd_put+0x592>
	switch (opcode)	{
   1df06:	2001      	movs	r0, #1
   1df08:	e013      	b.n	1df32 <hci_internal_cmd_put+0x9e>
	return ((uint16_t)src[1] << 8) | src[0];
   1df0a:	4630      	mov	r0, r6
	switch (opcode)	{
   1df0c:	f240 4206 	movw	r2, #1030	; 0x406
   1df10:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1df14:	4293      	cmp	r3, r2
   1df16:	d005      	beq.n	1df24 <hci_internal_cmd_put+0x90>
   1df18:	f240 421d 	movw	r2, #1053	; 0x41d
   1df1c:	4293      	cmp	r3, r2
   1df1e:	d016      	beq.n	1df4e <hci_internal_cmd_put+0xba>
		switch (BT_OGF(opcode)) {
   1df20:	2001      	movs	r0, #1
   1df22:	e001      	b.n	1df28 <hci_internal_cmd_put+0x94>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1df24:	f7ee ffc5 	bl	ceb2 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1df28:	f240 4306 	movw	r3, #1030	; 0x406
   1df2c:	429c      	cmp	r4, r3
   1df2e:	f040 832b 	bne.w	1e588 <hci_internal_cmd_put+0x6f4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1df32:	230f      	movs	r3, #15
   1df34:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1df36:	2304      	movs	r3, #4
   1df38:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
   1df3a:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1df3c:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
   1df3e:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
   1df40:	f8a5 4005 	strh.w	r4, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1df44:	2301      	movs	r3, #1
   1df46:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   1df48:	2000      	movs	r0, #0
}
   1df4a:	b003      	add	sp, #12
   1df4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1df4e:	f7ee ffb2 	bl	ceb6 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1df52:	f242 030c 	movw	r3, #8204	; 0x200c
   1df56:	429c      	cmp	r4, r3
   1df58:	d9e6      	bls.n	1df28 <hci_internal_cmd_put+0x94>
   1df5a:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
   1df5e:	4a82      	ldr	r2, [pc, #520]	; (1e168 <hci_internal_cmd_put+0x2d4>)
   1df60:	3b0d      	subs	r3, #13
   1df62:	b29b      	uxth	r3, r3
   1df64:	fa22 f303 	lsr.w	r3, r2, r3
   1df68:	07db      	lsls	r3, r3, #31
   1df6a:	d516      	bpl.n	1df9a <hci_internal_cmd_put+0x106>
   1df6c:	e7e1      	b.n	1df32 <hci_internal_cmd_put+0x9e>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1df6e:	4630      	mov	r0, r6
	switch (opcode)	{
   1df70:	f640 4263 	movw	r2, #3171	; 0xc63
   1df74:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1df78:	4293      	cmp	r3, r2
   1df7a:	d02e      	beq.n	1dfda <hci_internal_cmd_put+0x146>
   1df7c:	dc10      	bgt.n	1dfa0 <hci_internal_cmd_put+0x10c>
   1df7e:	f640 4203 	movw	r2, #3075	; 0xc03
   1df82:	4293      	cmp	r3, r2
   1df84:	d01d      	beq.n	1dfc2 <hci_internal_cmd_put+0x12e>
   1df86:	f640 422d 	movw	r2, #3117	; 0xc2d
   1df8a:	4293      	cmp	r3, r2
   1df8c:	d01c      	beq.n	1dfc8 <hci_internal_cmd_put+0x134>
   1df8e:	f640 4201 	movw	r2, #3073	; 0xc01
   1df92:	4293      	cmp	r3, r2
   1df94:	d1b7      	bne.n	1df06 <hci_internal_cmd_put+0x72>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1df96:	f7ee fe74 	bl	cc82 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1df9a:	2801      	cmp	r0, #1
   1df9c:	d0b3      	beq.n	1df06 <hci_internal_cmd_put+0x72>
   1df9e:	e792      	b.n	1dec6 <hci_internal_cmd_put+0x32>
	switch (opcode)	{
   1dfa0:	f640 427b 	movw	r2, #3195	; 0xc7b
   1dfa4:	4293      	cmp	r3, r2
   1dfa6:	d01b      	beq.n	1dfe0 <hci_internal_cmd_put+0x14c>
   1dfa8:	f640 427c 	movw	r2, #3196	; 0xc7c
   1dfac:	4293      	cmp	r3, r2
   1dfae:	d1aa      	bne.n	1df06 <hci_internal_cmd_put+0x72>
		*param_length_out +=
   1dfb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1dfb4:	496d      	ldr	r1, [pc, #436]	; (1e16c <hci_internal_cmd_put+0x2d8>)
		*param_length_out +=
   1dfb6:	3302      	adds	r3, #2
   1dfb8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1dfbc:	f7ee fe6b 	bl	cc96 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1dfc0:	e7eb      	b.n	1df9a <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_reset();
   1dfc2:	f7e6 fc8f 	bl	48e4 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1dfc6:	e7e8      	b.n	1df9a <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1dfc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1dfcc:	4967      	ldr	r1, [pc, #412]	; (1e16c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1dfce:	3303      	adds	r3, #3
   1dfd0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1dfd4:	f7ee fe53 	bl	cc7e <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1dfd8:	e7df      	b.n	1df9a <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1dfda:	f7ee fe57 	bl	cc8c <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1dfde:	e7dc      	b.n	1df9a <hci_internal_cmd_put+0x106>
		*param_length_out +=
   1dfe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1dfe4:	4961      	ldr	r1, [pc, #388]	; (1e16c <hci_internal_cmd_put+0x2d8>)
		*param_length_out +=
   1dfe6:	3304      	adds	r3, #4
   1dfe8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1dfec:	f7ee fe45 	bl	cc7a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1dff0:	e7d3      	b.n	1df9a <hci_internal_cmd_put+0x106>
	switch (opcode)	{
   1dff2:	8833      	ldrh	r3, [r6, #0]
   1dff4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1dff8:	3b01      	subs	r3, #1
   1dffa:	2b08      	cmp	r3, #8
   1dffc:	d883      	bhi.n	1df06 <hci_internal_cmd_put+0x72>
   1dffe:	a201      	add	r2, pc, #4	; (adr r2, 1e004 <hci_internal_cmd_put+0x170>)
   1e000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e004:	0001e029 	.word	0x0001e029
   1e008:	0001e03b 	.word	0x0001e03b
   1e00c:	0001e12b 	.word	0x0001e12b
   1e010:	0001df07 	.word	0x0001df07
   1e014:	0001df07 	.word	0x0001df07
   1e018:	0001df07 	.word	0x0001df07
   1e01c:	0001df07 	.word	0x0001df07
   1e020:	0001df07 	.word	0x0001df07
   1e024:	0001e14d 	.word	0x0001e14d
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1e028:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e02c:	484f      	ldr	r0, [pc, #316]	; (1e16c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1e02e:	3308      	adds	r3, #8
   1e030:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e034:	f7ee fefe 	bl	ce34 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1e038:	e7af      	b.n	1df9a <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e03a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e03e:	484b      	ldr	r0, [pc, #300]	; (1e16c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e040:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e042:	222f      	movs	r2, #47	; 0x2f
   1e044:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e046:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e04a:	f006 fb5b 	bl	24704 <memset>
	cmds->hci_disconnect = 1;
   1e04e:	79eb      	ldrb	r3, [r5, #7]
   1e050:	f043 0320 	orr.w	r3, r3, #32
   1e054:	71eb      	strb	r3, [r5, #7]
	cmds->hci_read_remote_version_information = 1;
   1e056:	7a6b      	ldrb	r3, [r5, #9]
   1e058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e05c:	726b      	strb	r3, [r5, #9]
	cmds->hci_set_event_mask = 1;
   1e05e:	7b2b      	ldrb	r3, [r5, #12]
   1e060:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e064:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_transmit_power_level = 1;
   1e066:	7c6b      	ldrb	r3, [r5, #17]
   1e068:	f043 0304 	orr.w	r3, r3, #4
   1e06c:	746b      	strb	r3, [r5, #17]
	cmds->hci_read_local_version_information = 1;
   1e06e:	7d6b      	ldrb	r3, [r5, #21]
   1e070:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1e074:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1e078:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
   1e07a:	7dab      	ldrb	r3, [r5, #22]
   1e07c:	f043 0302 	orr.w	r3, r3, #2
   1e080:	75ab      	strb	r3, [r5, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1e082:	7f6b      	ldrb	r3, [r5, #29]
   1e084:	f043 0304 	orr.w	r3, r3, #4
   1e088:	776b      	strb	r3, [r5, #29]
	cmds->hci_le_set_event_mask = 1;
   1e08a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1e08e:	f063 0308 	orn	r3, r3, #8
   1e092:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1e096:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1e09a:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1e09e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1e0a2:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1e0a6:	f063 030c 	orn	r3, r3, #12
   1e0aa:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1e0ae:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1e0b2:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1e0b6:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1e0ba:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1e0be:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1e0c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1e0c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1e0ca:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1e0ce:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1e0d2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e0d6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1e0da:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1e0de:	f023 0307 	bic.w	r3, r3, #7
   1e0e2:	f043 0307 	orr.w	r3, r3, #7
   1e0e6:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1e0ea:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   1e0ee:	f063 0307 	orn	r3, r3, #7
   1e0f2:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1e0f6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1e0fa:	f043 0301 	orr.w	r3, r3, #1
   1e0fe:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1e102:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1e106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e10a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1e10e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1e112:	f043 0304 	orr.w	r3, r3, #4
   1e116:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1e11a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   1e11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e122:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
   1e126:	2000      	movs	r0, #0
   1e128:	e6cd      	b.n	1dec6 <hci_internal_cmd_put+0x32>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e12a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e12e:	480f      	ldr	r0, [pc, #60]	; (1e16c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e130:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1e132:	2208      	movs	r2, #8
   1e134:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e136:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e13a:	f006 fae3 	bl	24704 <memset>
	features->bdedr_not_supported = 1;
   1e13e:	7aeb      	ldrb	r3, [r5, #11]
   1e140:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1e144:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1e148:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
   1e14a:	e7ec      	b.n	1e126 <hci_internal_cmd_put+0x292>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e14c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e150:	4806      	ldr	r0, [pc, #24]	; (1e16c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e152:	3306      	adds	r3, #6
   1e154:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e158:	f7ee fe6a 	bl	ce30 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1e15c:	e71d      	b.n	1df9a <hci_internal_cmd_put+0x106>
   1e15e:	bf00      	nop
   1e160:	20002dfb 	.word	0x20002dfb
   1e164:	200023b8 	.word	0x200023b8
   1e168:	03001241 	.word	0x03001241
   1e16c:	20002e02 	.word	0x20002e02
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e170:	4630      	mov	r0, r6
	switch (opcode)	{
   1e172:	f242 014b 	movw	r1, #8267	; 0x204b
   1e176:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e17a:	b21a      	sxth	r2, r3
   1e17c:	428a      	cmp	r2, r1
   1e17e:	dc56      	bgt.n	1e22e <hci_internal_cmd_put+0x39a>
   1e180:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1e184:	f242 0626 	movw	r6, #8230	; 0x2026
   1e188:	dd5c      	ble.n	1e244 <hci_internal_cmd_put+0x3b0>
   1e18a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1e18e:	3b01      	subs	r3, #1
   1e190:	2b4a      	cmp	r3, #74	; 0x4a
   1e192:	d857      	bhi.n	1e244 <hci_internal_cmd_put+0x3b0>
   1e194:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e198:	0061005d 	.word	0x0061005d
   1e19c:	00560084 	.word	0x00560084
   1e1a0:	00a400a1 	.word	0x00a400a1
   1e1a4:	00b000a7 	.word	0x00b000a7
   1e1a8:	00b600b3 	.word	0x00b600b3
   1e1ac:	00560056 	.word	0x00560056
   1e1b0:	00560056 	.word	0x00560056
   1e1b4:	00c500bc 	.word	0x00c500bc
   1e1b8:	00cb00c8 	.word	0x00cb00c8
   1e1bc:	00560056 	.word	0x00560056
   1e1c0:	00d700ce 	.word	0x00d700ce
   1e1c4:	00e300da 	.word	0x00e300da
   1e1c8:	00ec0056 	.word	0x00ec0056
   1e1cc:	00fe00f5 	.word	0x00fe00f5
   1e1d0:	00560056 	.word	0x00560056
   1e1d4:	00560056 	.word	0x00560056
   1e1d8:	01080056 	.word	0x01080056
   1e1dc:	011a0111 	.word	0x011a0111
   1e1e0:	0120011d 	.word	0x0120011d
   1e1e4:	00560056 	.word	0x00560056
   1e1e8:	00560056 	.word	0x00560056
   1e1ec:	00560056 	.word	0x00560056
   1e1f0:	00560056 	.word	0x00560056
   1e1f4:	012f0126 	.word	0x012f0126
   1e1f8:	013b0138 	.word	0x013b0138
   1e1fc:	00560056 	.word	0x00560056
   1e200:	00560056 	.word	0x00560056
   1e204:	00560056 	.word	0x00560056
   1e208:	00560056 	.word	0x00560056
   1e20c:	00560056 	.word	0x00560056
   1e210:	00560056 	.word	0x00560056
   1e214:	00560056 	.word	0x00560056
   1e218:	00560056 	.word	0x00560056
   1e21c:	00560056 	.word	0x00560056
   1e220:	00560056 	.word	0x00560056
   1e224:	00560056 	.word	0x00560056
   1e228:	00560056 	.word	0x00560056
   1e22c:	013e      	.short	0x013e
   1e22e:	f242 035e 	movw	r3, #8286	; 0x205e
   1e232:	429a      	cmp	r2, r3
   1e234:	f242 0626 	movw	r6, #8230	; 0x2026
   1e238:	f000 80d1 	beq.w	1e3de <hci_internal_cmd_put+0x54a>
   1e23c:	f242 037c 	movw	r3, #8316	; 0x207c
   1e240:	429a      	cmp	r2, r3
   1e242:	d062      	beq.n	1e30a <hci_internal_cmd_put+0x476>
	switch (hci_opcode) {
   1e244:	42b4      	cmp	r4, r6
   1e246:	f200 81a8 	bhi.w	1e59a <hci_internal_cmd_put+0x706>
   1e24a:	f242 030c 	movw	r3, #8204	; 0x200c
   1e24e:	2001      	movs	r0, #1
   1e250:	e197      	b.n	1e582 <hci_internal_cmd_put+0x6ee>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1e252:	f7ee fe21 	bl	ce98 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1e256:	42b4      	cmp	r4, r6
   1e258:	e00a      	b.n	1e270 <hci_internal_cmd_put+0x3dc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e25a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e25e:	48c6      	ldr	r0, [pc, #792]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e260:	3303      	adds	r3, #3
   1e262:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e266:	f7ee fdf9 	bl	ce5c <sdc_hci_cmd_le_read_buffer_size>
	switch (hci_opcode) {
   1e26a:	f242 0326 	movw	r3, #8230	; 0x2026
   1e26e:	429c      	cmp	r4, r3
   1e270:	f240 8190 	bls.w	1e594 <hci_internal_cmd_put+0x700>
   1e274:	f242 0377 	movw	r3, #8311	; 0x2077
   1e278:	429c      	cmp	r4, r3
   1e27a:	f43f ae5a 	beq.w	1df32 <hci_internal_cmd_put+0x9e>
   1e27e:	f242 0377 	movw	r3, #8311	; 0x2077
   1e282:	429c      	cmp	r4, r3
   1e284:	f200 8115 	bhi.w	1e4b2 <hci_internal_cmd_put+0x61e>
   1e288:	f242 0332 	movw	r3, #8242	; 0x2032
   1e28c:	429c      	cmp	r4, r3
   1e28e:	f43f ae50 	beq.w	1df32 <hci_internal_cmd_put+0x9e>
   1e292:	f5a4 5301 	sub.w	r3, r4, #8256	; 0x2040
   1e296:	3b03      	subs	r3, #3
   1e298:	2b01      	cmp	r3, #1
   1e29a:	f63f ae7e 	bhi.w	1df9a <hci_internal_cmd_put+0x106>
   1e29e:	e648      	b.n	1df32 <hci_internal_cmd_put+0x9e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e2a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e2a4:	48b4      	ldr	r0, [pc, #720]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e2a6:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1e2a8:	2205      	movs	r2, #5
   1e2aa:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e2ac:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e2b0:	f006 fa28 	bl	24704 <memset>
	features->le_encryption = 1;
   1e2b4:	79eb      	ldrb	r3, [r5, #7]
   1e2b6:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1e2ba:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1e2be:	71eb      	strb	r3, [r5, #7]
	features->le_2m_phy = 1;
   1e2c0:	7a2b      	ldrb	r3, [r5, #8]
   1e2c2:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1e2c6:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1e2ca:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
   1e2cc:	f242 0326 	movw	r3, #8230	; 0x2026
   1e2d0:	429c      	cmp	r4, r3
   1e2d2:	f240 8153 	bls.w	1e57c <hci_internal_cmd_put+0x6e8>
		return 0;
   1e2d6:	2000      	movs	r0, #0
   1e2d8:	e7cc      	b.n	1e274 <hci_internal_cmd_put+0x3e0>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1e2da:	f7ee fde4 	bl	cea6 <sdc_hci_cmd_le_set_random_address>
	switch (hci_opcode) {
   1e2de:	e7ba      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1e2e0:	f7ee fdd2 	bl	ce88 <sdc_hci_cmd_le_set_adv_params>
	switch (hci_opcode) {
   1e2e4:	e7b7      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		*param_length_out +=
   1e2e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e2ea:	48a3      	ldr	r0, [pc, #652]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1e2ec:	3301      	adds	r3, #1
   1e2ee:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e2f2:	f7ee fdb1 	bl	ce58 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
	switch (hci_opcode) {
   1e2f6:	e7b8      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1e2f8:	f7ee fdc2 	bl	ce80 <sdc_hci_cmd_le_set_adv_data>
	switch (hci_opcode) {
   1e2fc:	e7ab      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1e2fe:	f7ee fdd4 	bl	ceaa <sdc_hci_cmd_le_set_scan_response_data>
	switch (hci_opcode) {
   1e302:	e7a8      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1e304:	f7ee fdbe 	bl	ce84 <sdc_hci_cmd_le_set_adv_enable>
	switch (hci_opcode) {
   1e308:	e7a5      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1e30a:	f7ee fdc1 	bl	ce90 <sdc_hci_cmd_le_set_data_related_address_changes>
	switch (hci_opcode) {
   1e30e:	e7a2      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e310:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e314:	4898      	ldr	r0, [pc, #608]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e316:	3301      	adds	r3, #1
   1e318:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e31c:	f7ee fda2 	bl	ce64 <sdc_hci_cmd_le_read_filter_accept_list_size>
	switch (hci_opcode) {
   1e320:	e7a3      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1e322:	f7ee fd8b 	bl	ce3c <sdc_hci_cmd_le_clear_filter_accept_list>
	switch (hci_opcode) {
   1e326:	e796      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1e328:	f7ee fd86 	bl	ce38 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
	switch (hci_opcode) {
   1e32c:	e793      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1e32e:	f7ee fda5 	bl	ce7c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1e332:	e790      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e334:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e338:	498f      	ldr	r1, [pc, #572]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e33a:	3307      	adds	r3, #7
   1e33c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e340:	f7ee fd8e 	bl	ce60 <sdc_hci_cmd_le_read_channel_map>
	switch (hci_opcode) {
   1e344:	e791      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1e346:	f7ee fd93 	bl	ce70 <sdc_hci_cmd_le_read_remote_features>
	switch (hci_opcode) {
   1e34a:	e784      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e34c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e350:	4989      	ldr	r1, [pc, #548]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e352:	3310      	adds	r3, #16
   1e354:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e358:	f7ee fd72 	bl	ce40 <sdc_hci_cmd_le_encrypt>
	switch (hci_opcode) {
   1e35c:	e785      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1e35e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e362:	4885      	ldr	r0, [pc, #532]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1e364:	3308      	adds	r3, #8
   1e366:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e36a:	f7ee fd73 	bl	ce54 <sdc_hci_cmd_le_rand>
	switch (hci_opcode) {
   1e36e:	e77c      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1e370:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e374:	4980      	ldr	r1, [pc, #512]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1e376:	3302      	adds	r3, #2
   1e378:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e37c:	f7ee fd66 	bl	ce4c <sdc_hci_cmd_le_long_term_key_request_reply>
	switch (hci_opcode) {
   1e380:	e773      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		*param_length_out +=
   1e382:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e386:	497c      	ldr	r1, [pc, #496]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1e388:	3302      	adds	r3, #2
   1e38a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e38e:	f7ee fd59 	bl	ce44 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
	switch (hci_opcode) {
   1e392:	e76a      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1e394:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e398:	3308      	adds	r3, #8
   1e39a:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1e39e:	238f      	movs	r3, #143	; 0x8f
   1e3a0:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
   1e3a2:	23c0      	movs	r3, #192	; 0xc0
   1e3a4:	72eb      	strb	r3, [r5, #11]
   1e3a6:	e791      	b.n	1e2cc <hci_internal_cmd_put+0x438>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1e3a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e3ac:	4972      	ldr	r1, [pc, #456]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1e3ae:	3302      	adds	r3, #2
   1e3b0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e3b4:	f7ee fd6a 	bl	ce8c <sdc_hci_cmd_le_set_data_length>
	switch (hci_opcode) {
   1e3b8:	e757      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		*param_length_out +=
   1e3ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e3be:	486e      	ldr	r0, [pc, #440]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1e3c0:	3304      	adds	r3, #4
   1e3c2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e3c6:	f7ee fd55 	bl	ce74 <sdc_hci_cmd_le_read_suggested_default_data_length>
	switch (hci_opcode) {
   1e3ca:	e74e      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1e3cc:	f7ee fd6f 	bl	ceae <sdc_hci_cmd_le_write_suggested_default_data_length>
	switch (hci_opcode) {
   1e3d0:	e741      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_read_local_p256_public_key();
   1e3d2:	f000 fa89 	bl	1e8e8 <hci_cmd_le_read_local_p256_public_key>
	switch (hci_opcode) {
   1e3d6:	e73e      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1e3d8:	f008 fba2 	bl	26b20 <hci_cmd_le_generate_dhkey>
	switch (hci_opcode) {
   1e3dc:	e73b      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1e3de:	f008 fba2 	bl	26b26 <hci_cmd_le_generate_dhkey_v2>
	switch (hci_opcode) {
   1e3e2:	e738      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e3e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e3e8:	4863      	ldr	r0, [pc, #396]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e3ea:	3308      	adds	r3, #8
   1e3ec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e3f0:	f7ee fd3a 	bl	ce68 <sdc_hci_cmd_le_read_max_data_length>
	switch (hci_opcode) {
   1e3f4:	e739      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e3f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e3fa:	495f      	ldr	r1, [pc, #380]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e3fc:	3304      	adds	r3, #4
   1e3fe:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e402:	f7ee fd33 	bl	ce6c <sdc_hci_cmd_le_read_phy>
	switch (hci_opcode) {
   1e406:	e730      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1e408:	f7ee fd44 	bl	ce94 <sdc_hci_cmd_le_set_default_phy>
	switch (hci_opcode) {
   1e40c:	e723      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1e40e:	f7ee fd48 	bl	cea2 <sdc_hci_cmd_le_set_phy>
	switch (hci_opcode) {
   1e412:	e720      	b.n	1e256 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e414:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e418:	4857      	ldr	r0, [pc, #348]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e41a:	3302      	adds	r3, #2
   1e41c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e420:	f7ee fd2a 	bl	ce78 <sdc_hci_cmd_le_read_transmit_power>
	switch (hci_opcode) {
   1e424:	e721      	b.n	1e26a <hci_internal_cmd_put+0x3d6>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e426:	4630      	mov	r0, r6
	switch (opcode)	{
   1e428:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1e42c:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e430:	4293      	cmp	r3, r2
   1e432:	d823      	bhi.n	1e47c <hci_internal_cmd_put+0x5e8>
   1e434:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1e438:	d801      	bhi.n	1e43e <hci_internal_cmd_put+0x5aa>
   1e43a:	2001      	movs	r0, #1
   1e43c:	e039      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
   1e43e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1e442:	3b01      	subs	r3, #1
   1e444:	2b0a      	cmp	r3, #10
   1e446:	d8f8      	bhi.n	1e43a <hci_internal_cmd_put+0x5a6>
   1e448:	a201      	add	r2, pc, #4	; (adr r2, 1e450 <hci_internal_cmd_put+0x5bc>)
   1e44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e44e:	bf00      	nop
   1e450:	0001e4a3 	.word	0x0001e4a3
   1e454:	0001e4bf 	.word	0x0001e4bf
   1e458:	0001e43b 	.word	0x0001e43b
   1e45c:	0001e43b 	.word	0x0001e43b
   1e460:	0001e43b 	.word	0x0001e43b
   1e464:	0001e513 	.word	0x0001e513
   1e468:	0001e43b 	.word	0x0001e43b
   1e46c:	0001e43b 	.word	0x0001e43b
   1e470:	0001e4ef 	.word	0x0001e4ef
   1e474:	0001e501 	.word	0x0001e501
   1e478:	0001e519 	.word	0x0001e519
   1e47c:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1e480:	b292      	uxth	r2, r2
   1e482:	2a0c      	cmp	r2, #12
   1e484:	d8d9      	bhi.n	1e43a <hci_internal_cmd_put+0x5a6>
   1e486:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1e48a:	2b0c      	cmp	r3, #12
   1e48c:	f200 8087 	bhi.w	1e59e <hci_internal_cmd_put+0x70a>
   1e490:	e8df f003 	tbb	[pc, r3]
   1e494:	625f5c4b 	.word	0x625f5c4b
   1e498:	85856865 	.word	0x85856865
   1e49c:	85856b85 	.word	0x85856b85
   1e4a0:	6e          	.byte	0x6e
   1e4a1:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1e4a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e4a6:	4834      	ldr	r0, [pc, #208]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1e4a8:	330c      	adds	r3, #12
   1e4aa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e4ae:	f7e6 fa2d 	bl	490c <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1e4b2:	f024 0308 	bic.w	r3, r4, #8
   1e4b6:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1e4ba:	4293      	cmp	r3, r2
   1e4bc:	e067      	b.n	1e58e <hci_internal_cmd_put+0x6fa>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e4be:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e4c2:	482d      	ldr	r0, [pc, #180]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e4c4:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e4c6:	2202      	movs	r2, #2
   1e4c8:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e4ca:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e4ce:	f006 f919 	bl	24704 <memset>
	cmds->read_version_info = 1;
   1e4d2:	79eb      	ldrb	r3, [r5, #7]
   1e4d4:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1e4d8:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1e4dc:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
   1e4de:	7a2b      	ldrb	r3, [r5, #8]
   1e4e0:	f023 0307 	bic.w	r3, r3, #7
   1e4e4:	f043 0307 	orr.w	r3, r3, #7
   1e4e8:	722b      	strb	r3, [r5, #8]
		return 0;
   1e4ea:	2000      	movs	r0, #0
   1e4ec:	e7e1      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e4ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e4f2:	4821      	ldr	r0, [pc, #132]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e4f4:	3317      	adds	r3, #23
   1e4f6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e4fa:	f7ee fc48 	bl	cd8e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1e4fe:	e7d8      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		*param_length_out +=
   1e500:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e504:	481c      	ldr	r0, [pc, #112]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1e506:	3320      	adds	r3, #32
   1e508:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e50c:	f7ee fbf2 	bl	ccf4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1e510:	e7cf      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1e512:	f7ee fc8b 	bl	ce2c <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1e516:	e7cc      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1e518:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1e51c:	4816      	ldr	r0, [pc, #88]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1e51e:	3301      	adds	r3, #1
   1e520:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1e524:	f7ee fbd2 	bl	cccc <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1e528:	e7c3      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e52a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e52e:	4812      	ldr	r0, [pc, #72]	; (1e578 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e530:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e532:	2202      	movs	r2, #2
   1e534:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e536:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e53a:	f006 f8e3 	bl	24704 <memset>
	cmds->read_supported_vs_commands = 1;
   1e53e:	79eb      	ldrb	r3, [r5, #7]
   1e540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1e544:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1e548:	71eb      	strb	r3, [r5, #7]
}
   1e54a:	e7ce      	b.n	1e4ea <hci_internal_cmd_put+0x656>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1e54c:	f7ee fbb1 	bl	ccb2 <sdc_hci_cmd_vs_llpm_mode_set>
   1e550:	e7af      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1e552:	f7ee fbaa 	bl	ccaa <sdc_hci_cmd_vs_conn_update>
   1e556:	e7ac      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1e558:	f7ee fb9f 	bl	cc9a <sdc_hci_cmd_vs_conn_event_extend>
   1e55c:	e7a9      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1e55e:	f7ee fbae 	bl	ccbe <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1e562:	e7a6      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1e564:	f7ee fba3 	bl	ccae <sdc_hci_cmd_vs_event_length_set>
   1e568:	e7a3      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1e56a:	f7ee fba4 	bl	ccb6 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1e56e:	e7a0      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1e570:	f7ee fbaa 	bl	ccc8 <sdc_hci_cmd_vs_set_adv_randomness>
   1e574:	e79d      	b.n	1e4b2 <hci_internal_cmd_put+0x61e>
   1e576:	bf00      	nop
   1e578:	20002e02 	.word	0x20002e02
	switch (hci_opcode) {
   1e57c:	f242 030c 	movw	r3, #8204	; 0x200c
		return 0;
   1e580:	2000      	movs	r0, #0
	switch (hci_opcode) {
   1e582:	429c      	cmp	r4, r3
   1e584:	f63f ace9 	bhi.w	1df5a <hci_internal_cmd_put+0xc6>
   1e588:	f240 431d 	movw	r3, #1053	; 0x41d
   1e58c:	429c      	cmp	r4, r3
   1e58e:	f47f ad04 	bne.w	1df9a <hci_internal_cmd_put+0x106>
   1e592:	e4ce      	b.n	1df32 <hci_internal_cmd_put+0x9e>
   1e594:	f242 030c 	movw	r3, #8204	; 0x200c
   1e598:	e7f3      	b.n	1e582 <hci_internal_cmd_put+0x6ee>
   1e59a:	2001      	movs	r0, #1
   1e59c:	e66a      	b.n	1e274 <hci_internal_cmd_put+0x3e0>
	switch (opcode)	{
   1e59e:	2001      	movs	r0, #1
   1e5a0:	e66d      	b.n	1e27e <hci_internal_cmd_put+0x3ea>
		return -NRF_EPERM;
   1e5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5a6:	e4d0      	b.n	1df4a <hci_internal_cmd_put+0xb6>

0001e5a8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1e5a8:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1e5aa:	4c09      	ldr	r4, [pc, #36]	; (1e5d0 <hci_internal_msg_get+0x28>)
   1e5ac:	7823      	ldrb	r3, [r4, #0]
{
   1e5ae:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1e5b0:	b91b      	cbnz	r3, 1e5ba <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1e5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1e5b6:	f7ee bb50 	b.w	cc5a <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1e5ba:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1e5bc:	1c61      	adds	r1, r4, #1
   1e5be:	3202      	adds	r2, #2
   1e5c0:	f006 f895 	bl	246ee <memcpy>
		cmd_complete_or_status.occurred = false;
   1e5c4:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e5c6:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1e5c8:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e5ca:	702b      	strb	r3, [r5, #0]
}
   1e5cc:	bd38      	pop	{r3, r4, r5, pc}
   1e5ce:	bf00      	nop
   1e5d0:	20002dfb 	.word	0x20002dfb

0001e5d4 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e5d4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1e5d6:	b508      	push	{r3, lr}
   1e5d8:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e5dc:	d90c      	bls.n	1e5f8 <sys_memcpy_swap.constprop.0+0x24>
   1e5de:	4298      	cmp	r0, r3
   1e5e0:	d20f      	bcs.n	1e602 <sys_memcpy_swap.constprop.0+0x2e>
   1e5e2:	490c      	ldr	r1, [pc, #48]	; (1e614 <sys_memcpy_swap.constprop.0+0x40>)
   1e5e4:	480c      	ldr	r0, [pc, #48]	; (1e618 <sys_memcpy_swap.constprop.0+0x44>)
   1e5e6:	f240 2215 	movw	r2, #533	; 0x215
   1e5ea:	f005 f9fd 	bl	239e8 <assert_print>
   1e5ee:	4809      	ldr	r0, [pc, #36]	; (1e614 <sys_memcpy_swap.constprop.0+0x40>)
   1e5f0:	f240 2115 	movw	r1, #533	; 0x215
   1e5f4:	f005 f9f1 	bl	239da <assert_post_action>
   1e5f8:	d0f3      	beq.n	1e5e2 <sys_memcpy_swap.constprop.0+0xe>
   1e5fa:	f100 0210 	add.w	r2, r0, #16
   1e5fe:	4291      	cmp	r1, r2
   1e600:	e7ee      	b.n	1e5e0 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1e602:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1e604:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e608:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1e60c:	428b      	cmp	r3, r1
   1e60e:	d1f9      	bne.n	1e604 <sys_memcpy_swap.constprop.0+0x30>
}
   1e610:	bd08      	pop	{r3, pc}
   1e612:	bf00      	nop
   1e614:	00029fe8 	.word	0x00029fe8
   1e618:	000280bd 	.word	0x000280bd

0001e61c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1e61c:	b570      	push	{r4, r5, r6, lr}
   1e61e:	4606      	mov	r6, r0
   1e620:	460c      	mov	r4, r1
   1e622:	4d0d      	ldr	r5, [pc, #52]	; (1e658 <bt_rand+0x3c>)
   1e624:	4628      	mov	r0, r5
   1e626:	f008 fb6a 	bl	26cfe <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1e62a:	b188      	cbz	r0, 1e650 <bt_rand+0x34>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1e62c:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   1e62e:	68ab      	ldr	r3, [r5, #8]
   1e630:	681b      	ldr	r3, [r3, #0]
   1e632:	b943      	cbnz	r3, 1e646 <bt_rand+0x2a>
   1e634:	4909      	ldr	r1, [pc, #36]	; (1e65c <bt_rand+0x40>)
   1e636:	480a      	ldr	r0, [pc, #40]	; (1e660 <bt_rand+0x44>)
   1e638:	224d      	movs	r2, #77	; 0x4d
   1e63a:	f005 f9d5 	bl	239e8 <assert_print>
   1e63e:	4807      	ldr	r0, [pc, #28]	; (1e65c <bt_rand+0x40>)
   1e640:	214d      	movs	r1, #77	; 0x4d
   1e642:	f005 f9ca 	bl	239da <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1e646:	4631      	mov	r1, r6
   1e648:	4628      	mov	r0, r5
}
   1e64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e64e:	4718      	bx	r3
   1e650:	f06f 0012 	mvn.w	r0, #18
   1e654:	bd70      	pop	{r4, r5, r6, pc}
   1e656:	bf00      	nop
   1e658:	00027200 	.word	0x00027200
   1e65c:	0002abee 	.word	0x0002abee
   1e660:	000280bd 	.word	0x000280bd

0001e664 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e664:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1e666:	b508      	push	{r3, lr}
   1e668:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e66c:	d90c      	bls.n	1e688 <sys_memcpy_swap.constprop.0+0x24>
   1e66e:	4298      	cmp	r0, r3
   1e670:	d20f      	bcs.n	1e692 <sys_memcpy_swap.constprop.0+0x2e>
   1e672:	490c      	ldr	r1, [pc, #48]	; (1e6a4 <sys_memcpy_swap.constprop.0+0x40>)
   1e674:	480c      	ldr	r0, [pc, #48]	; (1e6a8 <sys_memcpy_swap.constprop.0+0x44>)
   1e676:	f240 2215 	movw	r2, #533	; 0x215
   1e67a:	f005 f9b5 	bl	239e8 <assert_print>
   1e67e:	4809      	ldr	r0, [pc, #36]	; (1e6a4 <sys_memcpy_swap.constprop.0+0x40>)
   1e680:	f240 2115 	movw	r1, #533	; 0x215
   1e684:	f005 f9a9 	bl	239da <assert_post_action>
   1e688:	d0f3      	beq.n	1e672 <sys_memcpy_swap.constprop.0+0xe>
   1e68a:	f100 0220 	add.w	r2, r0, #32
   1e68e:	4291      	cmp	r1, r2
   1e690:	e7ee      	b.n	1e670 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1e692:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1e694:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e698:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1e69c:	428b      	cmp	r3, r1
   1e69e:	d1f9      	bne.n	1e694 <sys_memcpy_swap.constprop.0+0x30>
}
   1e6a0:	bd08      	pop	{r3, pc}
   1e6a2:	bf00      	nop
   1e6a4:	00029fe8 	.word	0x00029fe8
   1e6a8:	000280bd 	.word	0x000280bd

0001e6ac <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e6ac:	4b1e      	ldr	r3, [pc, #120]	; (1e728 <ecdh_p256_common_secret+0x7c>)
   1e6ae:	491f      	ldr	r1, [pc, #124]	; (1e72c <ecdh_p256_common_secret+0x80>)
   1e6b0:	f103 0220 	add.w	r2, r3, #32
   1e6b4:	2800      	cmp	r0, #0
   1e6b6:	bf08      	it	eq
   1e6b8:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1e6ba:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e6bc:	4610      	mov	r0, r2
   1e6be:	f004 fba7 	bl	22e10 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1e6c2:	4602      	mov	r2, r0
   1e6c4:	b348      	cbz	r0, 1e71a <ecdh_p256_common_secret+0x6e>
		BT_ERR("public key is not valid (err %d)", err);
   1e6c6:	481a      	ldr	r0, [pc, #104]	; (1e730 <ecdh_p256_common_secret+0x84>)
   1e6c8:	2145      	movs	r1, #69	; 0x45
   1e6ca:	f005 f99b 	bl	23a04 <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   1e6ce:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e6d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e6d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6d8:	2001      	movs	r0, #1
   1e6da:	f7f5 fb1f 	bl	13d1c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1e6de:	f100 0608 	add.w	r6, r0, #8
   1e6e2:	2102      	movs	r1, #2
   1e6e4:	4605      	mov	r5, r0
   1e6e6:	4630      	mov	r0, r6
   1e6e8:	f7fd fa30 	bl	1bb4c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e6ec:	233e      	movs	r3, #62	; 0x3e
   1e6ee:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e6f0:	2322      	movs	r3, #34	; 0x22
   1e6f2:	7043      	strb	r3, [r0, #1]
   1e6f4:	2101      	movs	r1, #1
   1e6f6:	4630      	mov	r0, r6
   1e6f8:	f7fd fa28 	bl	1bb4c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1e6fc:	2309      	movs	r3, #9
   1e6fe:	7003      	strb	r3, [r0, #0]
   1e700:	2121      	movs	r1, #33	; 0x21
   1e702:	4630      	mov	r0, r6
   1e704:	f7fd fa22 	bl	1bb4c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1e708:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1e70c:	b13c      	cbz	r4, 1e71e <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1e70e:	2220      	movs	r2, #32
   1e710:	21ff      	movs	r1, #255	; 0xff
   1e712:	f005 fff7 	bl	24704 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1e716:	4628      	mov	r0, r5
   1e718:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1e71a:	4604      	mov	r4, r0
   1e71c:	e7d8      	b.n	1e6d0 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1e71e:	4905      	ldr	r1, [pc, #20]	; (1e734 <ecdh_p256_common_secret+0x88>)
   1e720:	f7ff ffa0 	bl	1e664 <sys_memcpy_swap.constprop.0>
   1e724:	e7f7      	b.n	1e716 <ecdh_p256_common_secret+0x6a>
   1e726:	bf00      	nop
   1e728:	20002e42 	.word	0x20002e42
   1e72c:	0002ad21 	.word	0x0002ad21
   1e730:	0002acd9 	.word	0x0002acd9
   1e734:	20002e62 	.word	0x20002e62

0001e738 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e73a:	4c3d      	ldr	r4, [pc, #244]	; (1e830 <ecdh_cmd_process+0xf8>)
   1e73c:	f3bf 8f5b 	dmb	ish
   1e740:	6823      	ldr	r3, [r4, #0]
   1e742:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1e746:	2b02      	cmp	r3, #2
   1e748:	4627      	mov	r7, r4
   1e74a:	d059      	beq.n	1e800 <ecdh_cmd_process+0xc8>
   1e74c:	2b04      	cmp	r3, #4
   1e74e:	d05c      	beq.n	1e80a <ecdh_cmd_process+0xd2>
   1e750:	2b01      	cmp	r3, #1
   1e752:	d15c      	bne.n	1e80e <ecdh_cmd_process+0xd6>
		err = bt_rand(ecdh.private_key_be, 32);
   1e754:	4c37      	ldr	r4, [pc, #220]	; (1e834 <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e756:	4e38      	ldr	r6, [pc, #224]	; (1e838 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   1e758:	2120      	movs	r1, #32
   1e75a:	4620      	mov	r0, r4
   1e75c:	f7ff ff5e 	bl	1e61c <bt_rand>
		if (err) {
   1e760:	2800      	cmp	r0, #0
   1e762:	d142      	bne.n	1e7ea <ecdh_cmd_process+0xb2>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e764:	2220      	movs	r2, #32
   1e766:	4631      	mov	r1, r6
   1e768:	4620      	mov	r0, r4
   1e76a:	f005 ffb0 	bl	246ce <memcmp>
   1e76e:	2800      	cmp	r0, #0
   1e770:	d0f2      	beq.n	1e758 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1e772:	4832      	ldr	r0, [pc, #200]	; (1e83c <ecdh_cmd_process+0x104>)
   1e774:	4621      	mov	r1, r4
   1e776:	f004 fb37 	bl	22de8 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1e77a:	4605      	mov	r5, r0
   1e77c:	2800      	cmp	r0, #0
   1e77e:	d1eb      	bne.n	1e758 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e788:	2001      	movs	r0, #1
   1e78a:	f7f5 fac7 	bl	13d1c <bt_buf_get_rx>
   1e78e:	f100 0608 	add.w	r6, r0, #8
   1e792:	2102      	movs	r1, #2
   1e794:	4604      	mov	r4, r0
   1e796:	4630      	mov	r0, r6
   1e798:	f7fd f9d8 	bl	1bb4c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e79c:	233e      	movs	r3, #62	; 0x3e
   1e79e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e7a0:	2342      	movs	r3, #66	; 0x42
   1e7a2:	7043      	strb	r3, [r0, #1]
   1e7a4:	2101      	movs	r1, #1
   1e7a6:	4630      	mov	r0, r6
   1e7a8:	f7fd f9d0 	bl	1bb4c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1e7ac:	2308      	movs	r3, #8
   1e7ae:	7003      	strb	r3, [r0, #0]
   1e7b0:	2141      	movs	r1, #65	; 0x41
   1e7b2:	4630      	mov	r0, r6
   1e7b4:	f7fd f9ca 	bl	1bb4c <net_buf_simple_add>
   1e7b8:	4606      	mov	r6, r0
	evt->status = status;
   1e7ba:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1e7be:	b1b5      	cbz	r5, 1e7ee <ecdh_cmd_process+0xb6>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1e7c0:	2240      	movs	r2, #64	; 0x40
   1e7c2:	2100      	movs	r1, #0
   1e7c4:	f005 ff9e 	bl	24704 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e7c8:	f3bf 8f5b 	dmb	ish
   1e7cc:	2300      	movs	r3, #0
   1e7ce:	e857 2f00 	ldrex	r2, [r7]
   1e7d2:	e847 3100 	strex	r1, r3, [r7]
   1e7d6:	2900      	cmp	r1, #0
   1e7d8:	d1f9      	bne.n	1e7ce <ecdh_cmd_process+0x96>
   1e7da:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1e7de:	b32c      	cbz	r4, 1e82c <ecdh_cmd_process+0xf4>
		bt_recv(buf);
   1e7e0:	4620      	mov	r0, r4
	}
}
   1e7e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   1e7e6:	f7f6 bb0f 	b.w	14e08 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1e7ea:	251f      	movs	r5, #31
   1e7ec:	e7c8      	b.n	1e780 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1e7ee:	4913      	ldr	r1, [pc, #76]	; (1e83c <ecdh_cmd_process+0x104>)
   1e7f0:	f7ff ff38 	bl	1e664 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1e7f4:	4912      	ldr	r1, [pc, #72]	; (1e840 <ecdh_cmd_process+0x108>)
   1e7f6:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1e7fa:	f7ff ff33 	bl	1e664 <sys_memcpy_swap.constprop.0>
		break;
   1e7fe:	e7e3      	b.n	1e7c8 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   1e800:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1e802:	f7ff ff53 	bl	1e6ac <ecdh_p256_common_secret>
   1e806:	4604      	mov	r4, r0
		break;
   1e808:	e7de      	b.n	1e7c8 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   1e80a:	2001      	movs	r0, #1
   1e80c:	e7f9      	b.n	1e802 <ecdh_cmd_process+0xca>
		BT_WARN("Unknown command");
   1e80e:	480d      	ldr	r0, [pc, #52]	; (1e844 <ecdh_cmd_process+0x10c>)
   1e810:	2157      	movs	r1, #87	; 0x57
   1e812:	f005 f8f7 	bl	23a04 <z_log_minimal_printk>
   1e816:	f3bf 8f5b 	dmb	ish
   1e81a:	2300      	movs	r3, #0
   1e81c:	e854 2f00 	ldrex	r2, [r4]
   1e820:	e844 3100 	strex	r1, r3, [r4]
   1e824:	2900      	cmp	r1, #0
   1e826:	d1f9      	bne.n	1e81c <ecdh_cmd_process+0xe4>
   1e828:	f3bf 8f5b 	dmb	ish
}
   1e82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e82e:	bf00      	nop
   1e830:	200023cc 	.word	0x200023cc
   1e834:	20002e42 	.word	0x20002e42
   1e838:	0002ad21 	.word	0x0002ad21
   1e83c:	20002e62 	.word	0x20002e62
   1e840:	20002e82 	.word	0x20002e82
   1e844:	0002acff 	.word	0x0002acff

0001e848 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1e848:	b510      	push	{r4, lr}
   1e84a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1e84c:	2210      	movs	r2, #16
   1e84e:	2100      	movs	r1, #0
   1e850:	a801      	add	r0, sp, #4
   1e852:	f005 ff57 	bl	24704 <memset>
   1e856:	4c0b      	ldr	r4, [pc, #44]	; (1e884 <ecdh_thread+0x3c>)
   1e858:	9405      	str	r4, [sp, #20]
   1e85a:	2301      	movs	r3, #1
   1e85c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1e860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e868:	2101      	movs	r1, #1
   1e86a:	a801      	add	r0, sp, #4
   1e86c:	f004 f98c 	bl	22b88 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1e870:	4620      	mov	r0, r4
   1e872:	f008 fc4e 	bl	27112 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1e876:	9b04      	ldr	r3, [sp, #16]
   1e878:	f36f 3394 	bfc	r3, #14, #7
   1e87c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1e87e:	f7ff ff5b 	bl	1e738 <ecdh_cmd_process>
	while (true) {
   1e882:	e7ed      	b.n	1e860 <ecdh_thread+0x18>
   1e884:	200023bc 	.word	0x200023bc

0001e888 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1e888:	b510      	push	{r4, lr}
   1e88a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1e88c:	480e      	ldr	r0, [pc, #56]	; (1e8c8 <hci_ecdh_init+0x40>)
   1e88e:	f008 fc3b 	bl	27108 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e892:	4c0e      	ldr	r4, [pc, #56]	; (1e8cc <hci_ecdh_init+0x44>)
   1e894:	490e      	ldr	r1, [pc, #56]	; (1e8d0 <hci_ecdh_init+0x48>)
   1e896:	2200      	movs	r2, #0
   1e898:	2300      	movs	r3, #0
   1e89a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e89e:	2300      	movs	r3, #0
   1e8a0:	220a      	movs	r2, #10
   1e8a2:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1e8a6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1e8aa:	9300      	str	r3, [sp, #0]
   1e8ac:	f44f 7262 	mov.w	r2, #904	; 0x388
   1e8b0:	4b08      	ldr	r3, [pc, #32]	; (1e8d4 <hci_ecdh_init+0x4c>)
   1e8b2:	4620      	mov	r0, r4
   1e8b4:	f001 fba8 	bl	20008 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1e8b8:	4907      	ldr	r1, [pc, #28]	; (1e8d8 <hci_ecdh_init+0x50>)
   1e8ba:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1e8bc:	b008      	add	sp, #32
   1e8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e8c2:	f008 ba4f 	b.w	26d64 <z_impl_k_thread_name_set>
   1e8c6:	bf00      	nop
   1e8c8:	200023bc 	.word	0x200023bc
   1e8cc:	20001d10 	.word	0x20001d10
   1e8d0:	20004780 	.word	0x20004780
   1e8d4:	0001e849 	.word	0x0001e849
   1e8d8:	0002ad14 	.word	0x0002ad14

0001e8dc <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1e8dc:	4801      	ldr	r0, [pc, #4]	; (1e8e4 <hci_ecdh_uninit+0x8>)
   1e8de:	f7f4 bf07 	b.w	136f0 <z_impl_k_thread_abort>
   1e8e2:	bf00      	nop
   1e8e4:	20001d10 	.word	0x20001d10

0001e8e8 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1e8e8:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e8ea:	4b0b      	ldr	r3, [pc, #44]	; (1e918 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1e8ec:	f3bf 8f5b 	dmb	ish
   1e8f0:	2201      	movs	r2, #1
   1e8f2:	e853 1f00 	ldrex	r1, [r3]
   1e8f6:	2900      	cmp	r1, #0
   1e8f8:	d103      	bne.n	1e902 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1e8fa:	e843 2000 	strex	r0, r2, [r3]
   1e8fe:	2800      	cmp	r0, #0
   1e900:	d1f7      	bne.n	1e8f2 <hci_cmd_le_read_local_p256_public_key+0xa>
   1e902:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1e906:	d105      	bne.n	1e914 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1e908:	4804      	ldr	r0, [pc, #16]	; (1e91c <hci_cmd_le_read_local_p256_public_key+0x34>)
   1e90a:	2100      	movs	r1, #0
   1e90c:	f004 f9ee 	bl	22cec <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1e910:	2000      	movs	r0, #0
}
   1e912:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e914:	200c      	movs	r0, #12
   1e916:	e7fc      	b.n	1e912 <hci_cmd_le_read_local_p256_public_key+0x2a>
   1e918:	200023cc 	.word	0x200023cc
   1e91c:	200023bc 	.word	0x200023bc

0001e920 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1e920:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1e922:	2900      	cmp	r1, #0
   1e924:	4b11      	ldr	r3, [pc, #68]	; (1e96c <cmd_le_generate_dhkey+0x4c>)
   1e926:	f3bf 8f5b 	dmb	ish
{
   1e92a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1e92c:	bf0c      	ite	eq
   1e92e:	2202      	moveq	r2, #2
   1e930:	2204      	movne	r2, #4
   1e932:	e853 1f00 	ldrex	r1, [r3]
   1e936:	2900      	cmp	r1, #0
   1e938:	d103      	bne.n	1e942 <cmd_le_generate_dhkey+0x22>
   1e93a:	e843 2000 	strex	r0, r2, [r3]
   1e93e:	2800      	cmp	r0, #0
   1e940:	d1f7      	bne.n	1e932 <cmd_le_generate_dhkey+0x12>
   1e942:	f3bf 8f5b 	dmb	ish
   1e946:	d10e      	bne.n	1e966 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1e948:	4621      	mov	r1, r4
   1e94a:	4809      	ldr	r0, [pc, #36]	; (1e970 <cmd_le_generate_dhkey+0x50>)
   1e94c:	f7ff fe8a 	bl	1e664 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1e950:	4808      	ldr	r0, [pc, #32]	; (1e974 <cmd_le_generate_dhkey+0x54>)
   1e952:	f104 0120 	add.w	r1, r4, #32
   1e956:	f7ff fe85 	bl	1e664 <sys_memcpy_swap.constprop.0>
   1e95a:	4807      	ldr	r0, [pc, #28]	; (1e978 <cmd_le_generate_dhkey+0x58>)
   1e95c:	2100      	movs	r1, #0
   1e95e:	f004 f9c5 	bl	22cec <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1e962:	2000      	movs	r0, #0
}
   1e964:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e966:	200c      	movs	r0, #12
   1e968:	e7fc      	b.n	1e964 <cmd_le_generate_dhkey+0x44>
   1e96a:	bf00      	nop
   1e96c:	200023cc 	.word	0x200023cc
   1e970:	20002e62 	.word	0x20002e62
   1e974:	20002e82 	.word	0x20002e82
   1e978:	200023bc 	.word	0x200023bc

0001e97c <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1e97c:	b508      	push	{r3, lr}
   1e97e:	4602      	mov	r2, r0
   1e980:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1e982:	4805      	ldr	r0, [pc, #20]	; (1e998 <m_assert_handler+0x1c>)
   1e984:	2145      	movs	r1, #69	; 0x45
   1e986:	f005 f83d 	bl	23a04 <z_log_minimal_printk>
	k_oops();
   1e98a:	4040      	eors	r0, r0
   1e98c:	f380 8811 	msr	BASEPRI, r0
   1e990:	f04f 0003 	mov.w	r0, #3
   1e994:	df02      	svc	2
}
   1e996:	bd08      	pop	{r3, pc}
   1e998:	0002ad49 	.word	0x0002ad49

0001e99c <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1e99c:	4901      	ldr	r1, [pc, #4]	; (1e9a4 <mpsl_low_prio_irq_handler+0x8>)
   1e99e:	4802      	ldr	r0, [pc, #8]	; (1e9a8 <mpsl_low_prio_irq_handler+0xc>)
   1e9a0:	f008 ba8e 	b.w	26ec0 <k_work_submit_to_queue>
   1e9a4:	20002400 	.word	0x20002400
   1e9a8:	20001d90 	.word	0x20001d90

0001e9ac <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   1e9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1e9ae:	2332      	movs	r3, #50	; 0x32
   1e9b0:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e9b4:	4a13      	ldr	r2, [pc, #76]	; (1ea04 <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   1e9b6:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1e9b8:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e9ba:	2119      	movs	r1, #25
   1e9bc:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1e9be:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1e9c2:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1e9c6:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e9ca:	f7e5 fb05 	bl	3fd8 <mpsl_init>
	if (err) {
   1e9ce:	4604      	mov	r4, r0
   1e9d0:	b9a0      	cbnz	r0, 1e9fc <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1e9d2:	480d      	ldr	r0, [pc, #52]	; (1ea08 <mpsl_lib_init_sys+0x5c>)
   1e9d4:	4629      	mov	r1, r5
   1e9d6:	f7ed fbbc 	bl	c152 <mpsl_timeslot_session_count_set>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1e9da:	4604      	mov	r4, r0
   1e9dc:	b970      	cbnz	r0, 1e9fc <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e9de:	4601      	mov	r1, r0
   1e9e0:	462a      	mov	r2, r5
   1e9e2:	2008      	movs	r0, #8
   1e9e4:	f7f4 fab8 	bl	12f58 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e9e8:	462a      	mov	r2, r5
   1e9ea:	4621      	mov	r1, r4
   1e9ec:	200b      	movs	r0, #11
   1e9ee:	f7f4 fab3 	bl	12f58 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e9f2:	462a      	mov	r2, r5
   1e9f4:	4621      	mov	r1, r4
   1e9f6:	4628      	mov	r0, r5
   1e9f8:	f7f4 faae 	bl	12f58 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1e9fc:	4620      	mov	r0, r4
   1e9fe:	b003      	add	sp, #12
   1ea00:	bd30      	pop	{r4, r5, pc}
   1ea02:	bf00      	nop
   1ea04:	0001e97d 	.word	0x0001e97d
   1ea08:	200023d0 	.word	0x200023d0

0001ea0c <mpsl_low_prio_work_handler>:
{
   1ea0c:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ea0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ea16:	f7ff f869 	bl	1daec <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ea1a:	b140      	cbz	r0, 1ea2e <mpsl_low_prio_work_handler+0x22>
   1ea1c:	4907      	ldr	r1, [pc, #28]	; (1ea3c <mpsl_low_prio_work_handler+0x30>)
   1ea1e:	4808      	ldr	r0, [pc, #32]	; (1ea40 <mpsl_low_prio_work_handler+0x34>)
   1ea20:	2247      	movs	r2, #71	; 0x47
   1ea22:	f004 ffe1 	bl	239e8 <assert_print>
   1ea26:	4805      	ldr	r0, [pc, #20]	; (1ea3c <mpsl_low_prio_work_handler+0x30>)
   1ea28:	2147      	movs	r1, #71	; 0x47
   1ea2a:	f004 ffd6 	bl	239da <assert_post_action>
	mpsl_low_priority_process();
   1ea2e:	f7ed fcad 	bl	c38c <mpsl_low_priority_process>
}
   1ea32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1ea36:	f7ff b861 	b.w	1dafc <multithreading_lock_release>
   1ea3a:	bf00      	nop
   1ea3c:	0002ad62 	.word	0x0002ad62
   1ea40:	000280bd 	.word	0x000280bd

0001ea44 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1ea44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1ea46:	4d0d      	ldr	r5, [pc, #52]	; (1ea7c <mpsl_low_prio_init+0x38>)
   1ea48:	490d      	ldr	r1, [pc, #52]	; (1ea80 <mpsl_low_prio_init+0x3c>)
   1ea4a:	2400      	movs	r4, #0
   1ea4c:	9400      	str	r4, [sp, #0]
   1ea4e:	f06f 0309 	mvn.w	r3, #9
   1ea52:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ea56:	4628      	mov	r0, r5
   1ea58:	f002 f980 	bl	20d5c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1ea5c:	4909      	ldr	r1, [pc, #36]	; (1ea84 <mpsl_low_prio_init+0x40>)
   1ea5e:	4628      	mov	r0, r5
   1ea60:	f008 f980 	bl	26d64 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1ea64:	4908      	ldr	r1, [pc, #32]	; (1ea88 <mpsl_low_prio_init+0x44>)
   1ea66:	4809      	ldr	r0, [pc, #36]	; (1ea8c <mpsl_low_prio_init+0x48>)
   1ea68:	f002 f8c2 	bl	20bf0 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1ea6c:	4622      	mov	r2, r4
   1ea6e:	2104      	movs	r1, #4
   1ea70:	2019      	movs	r0, #25
   1ea72:	f7f4 fa71 	bl	12f58 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1ea76:	4620      	mov	r0, r4
   1ea78:	b003      	add	sp, #12
   1ea7a:	bd30      	pop	{r4, r5, pc}
   1ea7c:	20001d90 	.word	0x20001d90
   1ea80:	20004b80 	.word	0x20004b80
   1ea84:	0002ad8f 	.word	0x0002ad8f
   1ea88:	0001ea0d 	.word	0x0001ea0d
   1ea8c:	20002400 	.word	0x20002400

0001ea90 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ea90:	4b01      	ldr	r3, [pc, #4]	; (1ea98 <mpsl_hfclk_callback+0x8>)
   1ea92:	2000      	movs	r0, #0
   1ea94:	681b      	ldr	r3, [r3, #0]
   1ea96:	4718      	bx	r3
   1ea98:	20002410 	.word	0x20002410

0001ea9c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1ea9c:	b510      	push	{r4, lr}
	switch (domain) {
   1ea9e:	b130      	cbz	r0, 1eaae <nrfx_clock_start+0x12>
   1eaa0:	2801      	cmp	r0, #1
   1eaa2:	d10a      	bne.n	1eaba <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1eaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1eaa8:	4808      	ldr	r0, [pc, #32]	; (1eacc <nrfx_clock_start+0x30>)
   1eaaa:	f7e5 b90b 	b.w	3cc4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1eaae:	4b08      	ldr	r3, [pc, #32]	; (1ead0 <nrfx_clock_start+0x34>)
}
   1eab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1eab4:	681b      	ldr	r3, [r3, #0]
   1eab6:	2001      	movs	r0, #1
   1eab8:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1eaba:	4906      	ldr	r1, [pc, #24]	; (1ead4 <nrfx_clock_start+0x38>)
   1eabc:	4806      	ldr	r0, [pc, #24]	; (1ead8 <nrfx_clock_start+0x3c>)
   1eabe:	221c      	movs	r2, #28
   1eac0:	f004 ff92 	bl	239e8 <assert_print>
   1eac4:	4803      	ldr	r0, [pc, #12]	; (1ead4 <nrfx_clock_start+0x38>)
   1eac6:	211c      	movs	r1, #28
   1eac8:	f004 ff87 	bl	239da <assert_post_action>
   1eacc:	0001ea91 	.word	0x0001ea91
   1ead0:	20002410 	.word	0x20002410
   1ead4:	0002ada3 	.word	0x0002ada3
   1ead8:	000280bd 	.word	0x000280bd

0001eadc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1eadc:	b508      	push	{r3, lr}
	switch (domain) {
   1eade:	b170      	cbz	r0, 1eafe <nrfx_clock_stop+0x22>
   1eae0:	2801      	cmp	r0, #1
   1eae2:	d103      	bne.n	1eaec <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1eae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1eae8:	f7e5 b8de 	b.w	3ca8 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1eaec:	4904      	ldr	r1, [pc, #16]	; (1eb00 <nrfx_clock_stop+0x24>)
   1eaee:	4805      	ldr	r0, [pc, #20]	; (1eb04 <nrfx_clock_stop+0x28>)
   1eaf0:	222a      	movs	r2, #42	; 0x2a
   1eaf2:	f004 ff79 	bl	239e8 <assert_print>
   1eaf6:	4802      	ldr	r0, [pc, #8]	; (1eb00 <nrfx_clock_stop+0x24>)
   1eaf8:	212a      	movs	r1, #42	; 0x2a
   1eafa:	f004 ff6e 	bl	239da <assert_post_action>
}
   1eafe:	bd08      	pop	{r3, pc}
   1eb00:	0002ada3 	.word	0x0002ada3
   1eb04:	000280bd 	.word	0x000280bd

0001eb08 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1eb08:	4b01      	ldr	r3, [pc, #4]	; (1eb10 <nrfx_clock_init+0x8>)
   1eb0a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1eb0c:	4801      	ldr	r0, [pc, #4]	; (1eb14 <nrfx_clock_init+0xc>)
   1eb0e:	4770      	bx	lr
   1eb10:	20002410 	.word	0x20002410
   1eb14:	0bad0000 	.word	0x0bad0000

0001eb18 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1eb18:	b510      	push	{r4, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1eb1a:	4c28      	ldr	r4, [pc, #160]	; (1ebbc <timeslot_callback+0xa4>)
   1eb1c:	7e23      	ldrb	r3, [r4, #24]
   1eb1e:	4283      	cmp	r3, r0
   1eb20:	d008      	beq.n	1eb34 <timeslot_callback+0x1c>
   1eb22:	4927      	ldr	r1, [pc, #156]	; (1ebc0 <timeslot_callback+0xa8>)
   1eb24:	4827      	ldr	r0, [pc, #156]	; (1ebc4 <timeslot_callback+0xac>)
   1eb26:	2250      	movs	r2, #80	; 0x50
   1eb28:	f004 ff5e 	bl	239e8 <assert_print>
   1eb2c:	2150      	movs	r1, #80	; 0x50
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1eb2e:	4824      	ldr	r0, [pc, #144]	; (1ebc0 <timeslot_callback+0xa8>)
   1eb30:	f004 ff53 	bl	239da <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eb34:	f3bf 8f5b 	dmb	ish
   1eb38:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1eb3a:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   1eb3e:	bb13      	cbnz	r3, 1eb86 <timeslot_callback+0x6e>
		return NULL;
	}

	switch (signal) {
   1eb40:	2909      	cmp	r1, #9
   1eb42:	d834      	bhi.n	1ebae <timeslot_callback+0x96>
   1eb44:	e8df f001 	tbb	[pc, r1]
   1eb48:	33333305 	.word	0x33333305
   1eb4c:	1c212133 	.word	0x1c212133
   1eb50:	1f33      	.short	0x1f33
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   1eb52:	6a23      	ldr	r3, [r4, #32]
   1eb54:	e9d3 2000 	ldrd	r2, r0, [r3]
   1eb58:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1eb5a:	2801      	cmp	r0, #1
   1eb5c:	d005      	beq.n	1eb6a <timeslot_callback+0x52>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
			_context.return_param.callback_action =
   1eb5e:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1eb60:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   1eb62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   1eb66:	4818      	ldr	r0, [pc, #96]	; (1ebc8 <timeslot_callback+0xb0>)
   1eb68:	e00e      	b.n	1eb88 <timeslot_callback+0x70>
			_context.timeslot_request.params.earliest.timeout_us =
   1eb6a:	f247 5330 	movw	r3, #30000	; 0x7530
   1eb6e:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   1eb70:	2303      	movs	r3, #3
   1eb72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1eb76:	4b15      	ldr	r3, [pc, #84]	; (1ebcc <timeslot_callback+0xb4>)
			_context.timeslot_request.params.earliest.priority =
   1eb78:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1eb7c:	63a3      	str	r3, [r4, #56]	; 0x38
   1eb7e:	e7f2      	b.n	1eb66 <timeslot_callback+0x4e>
	z_impl_k_sem_give(sem);
   1eb80:	480e      	ldr	r0, [pc, #56]	; (1ebbc <timeslot_callback+0xa4>)
   1eb82:	f001 fda5 	bl	206d0 <z_impl_k_sem_give>
		return NULL;
   1eb86:	2000      	movs	r0, #0
}
   1eb88:	bd10      	pop	{r4, pc}
	_context.timeslot_request.params.earliest.priority =
   1eb8a:	2300      	movs	r3, #0
   1eb8c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1eb90:	490e      	ldr	r1, [pc, #56]	; (1ebcc <timeslot_callback+0xb4>)
	_context.timeslot_request.params.earliest.timeout_us =
   1eb92:	4b0f      	ldr	r3, [pc, #60]	; (1ebd0 <timeslot_callback+0xb8>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1eb94:	7e20      	ldrb	r0, [r4, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   1eb96:	6323      	str	r3, [r4, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1eb98:	f7ed fa7f 	bl	c09a <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1eb9c:	2800      	cmp	r0, #0
   1eb9e:	d0f2      	beq.n	1eb86 <timeslot_callback+0x6e>
   1eba0:	4907      	ldr	r1, [pc, #28]	; (1ebc0 <timeslot_callback+0xa8>)
   1eba2:	4808      	ldr	r0, [pc, #32]	; (1ebc4 <timeslot_callback+0xac>)
   1eba4:	2248      	movs	r2, #72	; 0x48
   1eba6:	f004 ff1f 	bl	239e8 <assert_print>
   1ebaa:	2148      	movs	r1, #72	; 0x48
   1ebac:	e7bf      	b.n	1eb2e <timeslot_callback+0x16>
		__ASSERT(false, "unexpected signal: %u", signal);
   1ebae:	4904      	ldr	r1, [pc, #16]	; (1ebc0 <timeslot_callback+0xa8>)
   1ebb0:	4804      	ldr	r0, [pc, #16]	; (1ebc4 <timeslot_callback+0xac>)
   1ebb2:	227c      	movs	r2, #124	; 0x7c
   1ebb4:	f004 ff18 	bl	239e8 <assert_print>
   1ebb8:	217c      	movs	r1, #124	; 0x7c
   1ebba:	e7b8      	b.n	1eb2e <timeslot_callback+0x16>
   1ebbc:	20002414 	.word	0x20002414
   1ebc0:	0002ade0 	.word	0x0002ade0
   1ebc4:	000280bd 	.word	0x000280bd
   1ebc8:	20002448 	.word	0x20002448
   1ebcc:	20002438 	.word	0x20002438
   1ebd0:	0f423fff 	.word	0x0f423fff

0001ebd4 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ebd4:	4802      	ldr	r0, [pc, #8]	; (1ebe0 <nrf_flash_sync_init+0xc>)
   1ebd6:	2201      	movs	r2, #1
   1ebd8:	2100      	movs	r1, #0
   1ebda:	f008 b90e 	b.w	26dfa <z_impl_k_sem_init>
   1ebde:	bf00      	nop
   1ebe0:	20002414 	.word	0x20002414

0001ebe4 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1ebe4:	4b01      	ldr	r3, [pc, #4]	; (1ebec <nrf_flash_sync_set_context+0x8>)
   1ebe6:	61d8      	str	r0, [r3, #28]
}
   1ebe8:	4770      	bx	lr
   1ebea:	bf00      	nop
   1ebec:	20002414 	.word	0x20002414

0001ebf0 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1ebf0:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ebf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   1ebf6:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ebf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ebfc:	f7fe ff76 	bl	1daec <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ec00:	4605      	mov	r5, r0
   1ec02:	b140      	cbz	r0, 1ec16 <nrf_flash_sync_exe+0x26>
   1ec04:	4947      	ldr	r1, [pc, #284]	; (1ed24 <nrf_flash_sync_exe+0x134>)
   1ec06:	4848      	ldr	r0, [pc, #288]	; (1ed28 <nrf_flash_sync_exe+0x138>)
   1ec08:	2299      	movs	r2, #153	; 0x99
   1ec0a:	f004 feed 	bl	239e8 <assert_print>
   1ec0e:	2199      	movs	r1, #153	; 0x99

	_context.op_desc = op_desc;
	_context.status = -ETIMEDOUT;
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   1ec10:	4844      	ldr	r0, [pc, #272]	; (1ed24 <nrf_flash_sync_exe+0x134>)
   1ec12:	f004 fee2 	bl	239da <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1ec16:	4945      	ldr	r1, [pc, #276]	; (1ed2c <nrf_flash_sync_exe+0x13c>)
   1ec18:	4845      	ldr	r0, [pc, #276]	; (1ed30 <nrf_flash_sync_exe+0x140>)
   1ec1a:	f7e1 fe69 	bl	8f0 <mpsl_timeslot_session_open>
   1ec1e:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1ec20:	f7fe ff6c 	bl	1dafc <multithreading_lock_release>
	if (ret < 0) {
   1ec24:	2c00      	cmp	r4, #0
   1ec26:	da07      	bge.n	1ec38 <nrf_flash_sync_exe+0x48>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1ec28:	4842      	ldr	r0, [pc, #264]	; (1ed34 <nrf_flash_sync_exe+0x144>)
   1ec2a:	4622      	mov	r2, r4
   1ec2c:	2145      	movs	r1, #69	; 0x45
   1ec2e:	f004 fee9 	bl	23a04 <z_log_minimal_printk>
		return -ENOMEM;
   1ec32:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1ec36:	bd70      	pop	{r4, r5, r6, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1ec38:	4c3f      	ldr	r4, [pc, #252]	; (1ed38 <nrf_flash_sync_exe+0x148>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1ec3a:	f240 1301 	movw	r3, #257	; 0x101
   1ec3e:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1ec40:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1ec42:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1ec44:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1ec46:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   1ec48:	f247 5330 	movw	r3, #30000	; 0x7530
   1ec4c:	6323      	str	r3, [r4, #48]	; 0x30
	_context.status = -ETIMEDOUT;
   1ec4e:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1ec52:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   1ec56:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ec58:	f104 0640 	add.w	r6, r4, #64	; 0x40
   1ec5c:	f3bf 8f5b 	dmb	ish
   1ec60:	e856 3f00 	ldrex	r3, [r6]
   1ec64:	e846 5200 	strex	r2, r5, [r6]
   1ec68:	2a00      	cmp	r2, #0
   1ec6a:	d1f9      	bne.n	1ec60 <nrf_flash_sync_exe+0x70>
   1ec6c:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   1ec70:	68a3      	ldr	r3, [r4, #8]
   1ec72:	b133      	cbz	r3, 1ec82 <nrf_flash_sync_exe+0x92>
   1ec74:	492b      	ldr	r1, [pc, #172]	; (1ed24 <nrf_flash_sync_exe+0x134>)
   1ec76:	482c      	ldr	r0, [pc, #176]	; (1ed28 <nrf_flash_sync_exe+0x138>)
   1ec78:	22af      	movs	r2, #175	; 0xaf
   1ec7a:	f004 feb5 	bl	239e8 <assert_print>
   1ec7e:	21af      	movs	r1, #175	; 0xaf
   1ec80:	e7c6      	b.n	1ec10 <nrf_flash_sync_exe+0x20>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ec82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ec86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ec8a:	f7fe ff2f 	bl	1daec <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ec8e:	b130      	cbz	r0, 1ec9e <nrf_flash_sync_exe+0xae>
   1ec90:	4924      	ldr	r1, [pc, #144]	; (1ed24 <nrf_flash_sync_exe+0x134>)
   1ec92:	4825      	ldr	r0, [pc, #148]	; (1ed28 <nrf_flash_sync_exe+0x138>)
   1ec94:	22b2      	movs	r2, #178	; 0xb2
   1ec96:	f004 fea7 	bl	239e8 <assert_print>
   1ec9a:	21b2      	movs	r1, #178	; 0xb2
   1ec9c:	e7b8      	b.n	1ec10 <nrf_flash_sync_exe+0x20>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1ec9e:	7e20      	ldrb	r0, [r4, #24]
   1eca0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1eca4:	f7ed f9f9 	bl	c09a <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1eca8:	b130      	cbz	r0, 1ecb8 <nrf_flash_sync_exe+0xc8>
   1ecaa:	491e      	ldr	r1, [pc, #120]	; (1ed24 <nrf_flash_sync_exe+0x134>)
   1ecac:	481e      	ldr	r0, [pc, #120]	; (1ed28 <nrf_flash_sync_exe+0x138>)
   1ecae:	22b4      	movs	r2, #180	; 0xb4
   1ecb0:	f004 fe9a 	bl	239e8 <assert_print>
   1ecb4:	21b4      	movs	r1, #180	; 0xb4
   1ecb6:	e7ab      	b.n	1ec10 <nrf_flash_sync_exe+0x20>
	MULTITHREADING_LOCK_RELEASE();
   1ecb8:	f7fe ff20 	bl	1dafc <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1ecbc:	4a1f      	ldr	r2, [pc, #124]	; (1ed3c <nrf_flash_sync_exe+0x14c>)
   1ecbe:	2300      	movs	r3, #0
   1ecc0:	4620      	mov	r0, r4
   1ecc2:	f001 fd3f 	bl	20744 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1ecc6:	2800      	cmp	r0, #0
   1ecc8:	da0e      	bge.n	1ece8 <nrf_flash_sync_exe+0xf8>
		LOG_ERR("timeout");
   1ecca:	481d      	ldr	r0, [pc, #116]	; (1ed40 <nrf_flash_sync_exe+0x150>)
   1eccc:	2145      	movs	r1, #69	; 0x45
   1ecce:	f004 fe99 	bl	23a04 <z_log_minimal_printk>
   1ecd2:	f3bf 8f5b 	dmb	ish
   1ecd6:	2301      	movs	r3, #1
   1ecd8:	e856 2f00 	ldrex	r2, [r6]
   1ecdc:	e846 3100 	strex	r1, r3, [r6]
   1ece0:	2900      	cmp	r1, #0
   1ece2:	d1f9      	bne.n	1ecd8 <nrf_flash_sync_exe+0xe8>
   1ece4:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ece8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ecec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ecf0:	f7fe fefc 	bl	1daec <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ecf4:	b130      	cbz	r0, 1ed04 <nrf_flash_sync_exe+0x114>
   1ecf6:	490b      	ldr	r1, [pc, #44]	; (1ed24 <nrf_flash_sync_exe+0x134>)
   1ecf8:	480b      	ldr	r0, [pc, #44]	; (1ed28 <nrf_flash_sync_exe+0x138>)
   1ecfa:	22bf      	movs	r2, #191	; 0xbf
   1ecfc:	f004 fe74 	bl	239e8 <assert_print>
   1ed00:	21bf      	movs	r1, #191	; 0xbf
   1ed02:	e785      	b.n	1ec10 <nrf_flash_sync_exe+0x20>
	mpsl_timeslot_session_close(_context.session_id);
   1ed04:	7e20      	ldrb	r0, [r4, #24]
   1ed06:	f7ed fa03 	bl	c110 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1ed0a:	f7fe fef7 	bl	1dafc <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ed0e:	f3bf 8f5b 	dmb	ish
   1ed12:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1ed14:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1ed18:	b113      	cbz	r3, 1ed20 <nrf_flash_sync_exe+0x130>
	z_impl_k_sem_reset(sem);
   1ed1a:	4807      	ldr	r0, [pc, #28]	; (1ed38 <nrf_flash_sync_exe+0x148>)
   1ed1c:	f001 fd72 	bl	20804 <z_impl_k_sem_reset>
	return _context.status;
   1ed20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1ed22:	e788      	b.n	1ec36 <nrf_flash_sync_exe+0x46>
   1ed24:	0002ade0 	.word	0x0002ade0
   1ed28:	000280bd 	.word	0x000280bd
   1ed2c:	2000242c 	.word	0x2000242c
   1ed30:	0001eb19 	.word	0x0001eb19
   1ed34:	0002ae1a 	.word	0x0002ae1a
   1ed38:	20002414 	.word	0x20002414
   1ed3c:	000b7b44 	.word	0x000b7b44
   1ed40:	0002ae45 	.word	0x0002ae45

0001ed44 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ed44:	4b07      	ldr	r3, [pc, #28]	; (1ed64 <nrf_flash_sync_check_time_limit+0x20>)
   1ed46:	2201      	movs	r2, #1
   1ed48:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1ed4a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1ed4e:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1ed52:	4418      	add	r0, r3
   1ed54:	4b04      	ldr	r3, [pc, #16]	; (1ed68 <nrf_flash_sync_check_time_limit+0x24>)
   1ed56:	69db      	ldr	r3, [r3, #28]
}
   1ed58:	4298      	cmp	r0, r3
   1ed5a:	bf34      	ite	cc
   1ed5c:	2000      	movcc	r0, #0
   1ed5e:	2001      	movcs	r0, #1
   1ed60:	4770      	bx	lr
   1ed62:	bf00      	nop
   1ed64:	40008000 	.word	0x40008000
   1ed68:	20002414 	.word	0x20002414

0001ed6c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed6c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1ed70:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ed74:	2a06      	cmp	r2, #6
   1ed76:	d109      	bne.n	1ed8c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed78:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1ed7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1ed80:	3b03      	subs	r3, #3
   1ed82:	2b04      	cmp	r3, #4
   1ed84:	d802      	bhi.n	1ed8c <nrf52_errata_16+0x20>
   1ed86:	4a02      	ldr	r2, [pc, #8]	; (1ed90 <nrf52_errata_16+0x24>)
   1ed88:	5cd0      	ldrb	r0, [r2, r3]
   1ed8a:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
   1ed8c:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   1ed8e:	4770      	bx	lr
   1ed90:	0002ae71 	.word	0x0002ae71

0001ed94 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ed94:	4a02      	ldr	r2, [pc, #8]	; (1eda0 <nvmc_wait+0xc>)
   1ed96:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1ed9a:	2b00      	cmp	r3, #0
   1ed9c:	d0fb      	beq.n	1ed96 <nvmc_wait+0x2>
}
   1ed9e:	4770      	bx	lr
   1eda0:	4001e000 	.word	0x4001e000

0001eda4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1eda4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1eda6:	f007 fefc 	bl	26ba2 <nrf52_errata_108>
   1edaa:	b140      	cbz	r0, 1edbe <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1edac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1edb0:	4a90      	ldr	r2, [pc, #576]	; (1eff4 <SystemInit+0x250>)
   1edb2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1edb6:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1edba:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1edbe:	f7ff ffd5 	bl	1ed6c <nrf52_errata_16>
   1edc2:	b110      	cbz	r0, 1edca <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1edc4:	4b8c      	ldr	r3, [pc, #560]	; (1eff8 <SystemInit+0x254>)
   1edc6:	4a8d      	ldr	r2, [pc, #564]	; (1effc <SystemInit+0x258>)
   1edc8:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1edca:	f007 feea 	bl	26ba2 <nrf52_errata_108>
   1edce:	b148      	cbz	r0, 1ede4 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1edd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1edd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1edd8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   1eddc:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1ede0:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1ede4:	f7ff ffc2 	bl	1ed6c <nrf52_errata_16>
   1ede8:	b130      	cbz	r0, 1edf8 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1edea:	4a85      	ldr	r2, [pc, #532]	; (1f000 <SystemInit+0x25c>)
   1edec:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1edf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1edf4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1edf8:	f007 fed3 	bl	26ba2 <nrf52_errata_108>
   1edfc:	b140      	cbz	r0, 1ee10 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   1edfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ee02:	2200      	movs	r2, #0
   1ee04:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1ee08:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1ee0c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1ee10:	f7ff ffac 	bl	1ed6c <nrf52_errata_16>
   1ee14:	b120      	cbz	r0, 1ee20 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1ee16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ee1a:	2203      	movs	r2, #3
   1ee1c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1ee20:	f7ff ffa4 	bl	1ed6c <nrf52_errata_16>
   1ee24:	b160      	cbz	r0, 1ee40 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1ee26:	4b77      	ldr	r3, [pc, #476]	; (1f004 <SystemInit+0x260>)
   1ee28:	2205      	movs	r2, #5
   1ee2a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1ee2e:	2201      	movs	r2, #1
   1ee30:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1ee34:	2200      	movs	r2, #0
   1ee36:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1ee3a:	223f      	movs	r2, #63	; 0x3f
   1ee3c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ee40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ee44:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ee48:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ee4a:	bf09      	itett	eq
   1ee4c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1ee50:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ee54:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ee58:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1ee5c:	bf08      	it	eq
   1ee5e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ee62:	2a06      	cmp	r2, #6
   1ee64:	d14d      	bne.n	1ef02 <SystemInit+0x15e>
            {
                switch(var2)
   1ee66:	3b03      	subs	r3, #3
   1ee68:	2b04      	cmp	r3, #4
   1ee6a:	d803      	bhi.n	1ee74 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1ee6c:	4a66      	ldr	r2, [pc, #408]	; (1f008 <SystemInit+0x264>)
   1ee6e:	5cd3      	ldrb	r3, [r2, r3]
   1ee70:	2b00      	cmp	r3, #0
   1ee72:	d046      	beq.n	1ef02 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ee74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ee78:	4b64      	ldr	r3, [pc, #400]	; (1f00c <SystemInit+0x268>)
   1ee7a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1ee7e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1ee82:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1ee86:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1ee8a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1ee8e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1ee92:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1ee96:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1ee9a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1ee9e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1eea2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1eea6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1eeaa:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1eeae:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1eeb2:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1eeb6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1eeba:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1eebe:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1eec2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1eec6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1eeca:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1eece:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1eed2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1eed6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1eeda:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1eede:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1eee2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1eee6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1eeea:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1eeee:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1eef2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1eef6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1eefa:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1eefe:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1ef02:	f007 fe4e 	bl	26ba2 <nrf52_errata_108>
   1ef06:	b148      	cbz	r0, 1ef1c <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1ef08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ef0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ef10:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1ef14:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1ef18:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1ef1c:	f007 fe41 	bl	26ba2 <nrf52_errata_108>
   1ef20:	b148      	cbz	r0, 1ef36 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1ef22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ef26:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1ef2a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1ef2c:	bf44      	itt	mi
   1ef2e:	f06f 0201 	mvnmi.w	r2, #1
   1ef32:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ef36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ef3a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ef3e:	2a06      	cmp	r2, #6
   1ef40:	d126      	bne.n	1ef90 <SystemInit+0x1ec>
            {
                switch(var2)
   1ef42:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1ef46:	3b03      	subs	r3, #3
   1ef48:	2b04      	cmp	r3, #4
   1ef4a:	d802      	bhi.n	1ef52 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1ef4c:	4a30      	ldr	r2, [pc, #192]	; (1f010 <SystemInit+0x26c>)
   1ef4e:	5cd3      	ldrb	r3, [r2, r3]
   1ef50:	b163      	cbz	r3, 1ef6c <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1ef52:	4a30      	ldr	r2, [pc, #192]	; (1f014 <SystemInit+0x270>)
   1ef54:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1ef58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ef5c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ef60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ef64:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1ef68:	2b06      	cmp	r3, #6
   1ef6a:	d111      	bne.n	1ef90 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ef6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ef70:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1ef74:	3b03      	subs	r3, #3
   1ef76:	2b04      	cmp	r3, #4
   1ef78:	d802      	bhi.n	1ef80 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1ef7a:	4a27      	ldr	r2, [pc, #156]	; (1f018 <SystemInit+0x274>)
   1ef7c:	5cd3      	ldrb	r3, [r2, r3]
   1ef7e:	b13b      	cbz	r3, 1ef90 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1ef80:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1ef84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1ef88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ef8c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1ef90:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1ef94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1ef98:	2a00      	cmp	r2, #0
   1ef9a:	db03      	blt.n	1efa4 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1ef9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1efa0:	2b00      	cmp	r3, #0
   1efa2:	da22      	bge.n	1efea <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1efa4:	491d      	ldr	r1, [pc, #116]	; (1f01c <SystemInit+0x278>)
   1efa6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1efa8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1efac:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1efb0:	2415      	movs	r4, #21
    nvmc_wait();
   1efb2:	f7ff feef 	bl	1ed94 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1efb6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1efba:	f7ff feeb 	bl	1ed94 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1efbe:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1efc2:	f7ff fee7 	bl	1ed94 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1efc6:	2300      	movs	r3, #0
   1efc8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1efcc:	f7ff fee2 	bl	1ed94 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1efd0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1efd4:	490a      	ldr	r1, [pc, #40]	; (1f000 <SystemInit+0x25c>)
   1efd6:	4b12      	ldr	r3, [pc, #72]	; (1f020 <SystemInit+0x27c>)
   1efd8:	68ca      	ldr	r2, [r1, #12]
   1efda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1efde:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1efe0:	60cb      	str	r3, [r1, #12]
   1efe2:	f3bf 8f4f 	dsb	sy
    __NOP();
   1efe6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1efe8:	e7fd      	b.n	1efe6 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1efea:	4b0e      	ldr	r3, [pc, #56]	; (1f024 <SystemInit+0x280>)
   1efec:	4a0e      	ldr	r2, [pc, #56]	; (1f028 <SystemInit+0x284>)
   1efee:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1eff0:	bd10      	pop	{r4, pc}
   1eff2:	bf00      	nop
   1eff4:	40013000 	.word	0x40013000
   1eff8:	4007c000 	.word	0x4007c000
   1effc:	baadf00d 	.word	0xbaadf00d
   1f000:	e000ed00 	.word	0xe000ed00
   1f004:	40005000 	.word	0x40005000
   1f008:	0002ae6c 	.word	0x0002ae6c
   1f00c:	4000c000 	.word	0x4000c000
   1f010:	0002ae67 	.word	0x0002ae67
   1f014:	40001000 	.word	0x40001000
   1f018:	0002ae62 	.word	0x0002ae62
   1f01c:	4001e000 	.word	0x4001e000
   1f020:	05fa0004 	.word	0x05fa0004
   1f024:	20000728 	.word	0x20000728
   1f028:	03d09000 	.word	0x03d09000

0001f02c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1f02c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f02e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1f030:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f032:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1f036:	fab2 f382 	clz	r3, r2
   1f03a:	f1c3 031f 	rsb	r3, r3, #31
   1f03e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f040:	fa05 f403 	lsl.w	r4, r5, r3
   1f044:	ea22 0404 	bic.w	r4, r2, r4
   1f048:	e850 6f00 	ldrex	r6, [r0]
   1f04c:	4296      	cmp	r6, r2
   1f04e:	d104      	bne.n	1f05a <nrfx_flag32_alloc+0x2e>
   1f050:	e840 4c00 	strex	ip, r4, [r0]
   1f054:	f1bc 0f00 	cmp.w	ip, #0
   1f058:	d1f6      	bne.n	1f048 <nrfx_flag32_alloc+0x1c>
   1f05a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f05e:	d1e7      	bne.n	1f030 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1f060:	4801      	ldr	r0, [pc, #4]	; (1f068 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1f062:	700b      	strb	r3, [r1, #0]
}
   1f064:	bd70      	pop	{r4, r5, r6, pc}
   1f066:	bf00      	nop
   1f068:	0bad0000 	.word	0x0bad0000

0001f06c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1f06c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1f06e:	6803      	ldr	r3, [r0, #0]
   1f070:	40cb      	lsrs	r3, r1
   1f072:	07db      	lsls	r3, r3, #31
   1f074:	d414      	bmi.n	1f0a0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1f076:	2301      	movs	r3, #1
   1f078:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1f07a:	6802      	ldr	r2, [r0, #0]
   1f07c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1f080:	ea43 0102 	orr.w	r1, r3, r2
   1f084:	e850 4f00 	ldrex	r4, [r0]
   1f088:	4294      	cmp	r4, r2
   1f08a:	d104      	bne.n	1f096 <nrfx_flag32_free+0x2a>
   1f08c:	e840 1c00 	strex	ip, r1, [r0]
   1f090:	f1bc 0f00 	cmp.w	ip, #0
   1f094:	d1f6      	bne.n	1f084 <nrfx_flag32_free+0x18>
   1f096:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f09a:	d1ee      	bne.n	1f07a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1f09c:	4801      	ldr	r0, [pc, #4]	; (1f0a4 <nrfx_flag32_free+0x38>)
}
   1f09e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f0a0:	4801      	ldr	r0, [pc, #4]	; (1f0a8 <nrfx_flag32_free+0x3c>)
   1f0a2:	e7fc      	b.n	1f09e <nrfx_flag32_free+0x32>
   1f0a4:	0bad0000 	.word	0x0bad0000
   1f0a8:	0bad0004 	.word	0x0bad0004

0001f0ac <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f0ac:	4b03      	ldr	r3, [pc, #12]	; (1f0bc <pin_in_use_by_te+0x10>)
   1f0ae:	3008      	adds	r0, #8
   1f0b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f0b8:	4770      	bx	lr
   1f0ba:	bf00      	nop
   1f0bc:	2000072c 	.word	0x2000072c

0001f0c0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f0c0:	4b04      	ldr	r3, [pc, #16]	; (1f0d4 <pin_has_trigger+0x14>)
   1f0c2:	3008      	adds	r0, #8
   1f0c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0c8:	f010 001c 	ands.w	r0, r0, #28
   1f0cc:	bf18      	it	ne
   1f0ce:	2001      	movne	r0, #1
   1f0d0:	4770      	bx	lr
   1f0d2:	bf00      	nop
   1f0d4:	2000072c 	.word	0x2000072c

0001f0d8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f0d8:	4b03      	ldr	r3, [pc, #12]	; (1f0e8 <pin_is_output+0x10>)
   1f0da:	3008      	adds	r0, #8
   1f0dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0e0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f0e4:	4770      	bx	lr
   1f0e6:	bf00      	nop
   1f0e8:	2000072c 	.word	0x2000072c

0001f0ec <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f0ec:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0ee:	f100 0308 	add.w	r3, r0, #8
   1f0f2:	4c0c      	ldr	r4, [pc, #48]	; (1f124 <call_handler+0x38>)
   1f0f4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1f0f8:	05da      	lsls	r2, r3, #23
{
   1f0fa:	4605      	mov	r5, r0
   1f0fc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0fe:	d507      	bpl.n	1f110 <call_handler+0x24>
   1f100:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f104:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f108:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f10c:	6852      	ldr	r2, [r2, #4]
   1f10e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f110:	68a3      	ldr	r3, [r4, #8]
   1f112:	b12b      	cbz	r3, 1f120 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f114:	68e2      	ldr	r2, [r4, #12]
   1f116:	4631      	mov	r1, r6
   1f118:	4628      	mov	r0, r5
    }
}
   1f11a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f11e:	4718      	bx	r3
}
   1f120:	bd70      	pop	{r4, r5, r6, pc}
   1f122:	bf00      	nop
   1f124:	2000072c 	.word	0x2000072c

0001f128 <release_handler>:
{
   1f128:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f12a:	4a18      	ldr	r2, [pc, #96]	; (1f18c <release_handler+0x64>)
   1f12c:	3008      	adds	r0, #8
   1f12e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f132:	05d9      	lsls	r1, r3, #23
   1f134:	d51d      	bpl.n	1f172 <release_handler+0x4a>
   1f136:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f13a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f13e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f142:	f102 040e 	add.w	r4, r2, #14
   1f146:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f148:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1f14c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f150:	d003      	beq.n	1f15a <release_handler+0x32>
   1f152:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f156:	4299      	cmp	r1, r3
   1f158:	d00b      	beq.n	1f172 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f15a:	3001      	adds	r0, #1
   1f15c:	2820      	cmp	r0, #32
   1f15e:	d1f3      	bne.n	1f148 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f160:	2300      	movs	r3, #0
   1f162:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f166:	480a      	ldr	r0, [pc, #40]	; (1f190 <release_handler+0x68>)
   1f168:	f7ff ff80 	bl	1f06c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f16c:	4b09      	ldr	r3, [pc, #36]	; (1f194 <release_handler+0x6c>)
   1f16e:	4298      	cmp	r0, r3
   1f170:	d100      	bne.n	1f174 <release_handler+0x4c>
}
   1f172:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f174:	4908      	ldr	r1, [pc, #32]	; (1f198 <release_handler+0x70>)
   1f176:	4809      	ldr	r0, [pc, #36]	; (1f19c <release_handler+0x74>)
   1f178:	f44f 7299 	mov.w	r2, #306	; 0x132
   1f17c:	f004 fc34 	bl	239e8 <assert_print>
   1f180:	4805      	ldr	r0, [pc, #20]	; (1f198 <release_handler+0x70>)
   1f182:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f186:	f004 fc28 	bl	239da <assert_post_action>
   1f18a:	bf00      	nop
   1f18c:	2000072c 	.word	0x2000072c
   1f190:	20000780 	.word	0x20000780
   1f194:	0bad0000 	.word	0x0bad0000
   1f198:	0002ae76 	.word	0x0002ae76
   1f19c:	000280bd 	.word	0x000280bd

0001f1a0 <pin_handler_trigger_uninit>:
{
   1f1a0:	b538      	push	{r3, r4, r5, lr}
   1f1a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f1a4:	f7ff ff82 	bl	1f0ac <pin_in_use_by_te>
   1f1a8:	4c09      	ldr	r4, [pc, #36]	; (1f1d0 <pin_handler_trigger_uninit+0x30>)
   1f1aa:	f102 0508 	add.w	r5, r2, #8
   1f1ae:	b140      	cbz	r0, 1f1c2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f1b0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f1b4:	4907      	ldr	r1, [pc, #28]	; (1f1d4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f1b6:	0b5b      	lsrs	r3, r3, #13
   1f1b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f1bc:	2000      	movs	r0, #0
   1f1be:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1f1c2:	4610      	mov	r0, r2
   1f1c4:	f7ff ffb0 	bl	1f128 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f1c8:	2300      	movs	r3, #0
   1f1ca:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f1ce:	bd38      	pop	{r3, r4, r5, pc}
   1f1d0:	2000072c 	.word	0x2000072c
   1f1d4:	40006000 	.word	0x40006000

0001f1d8 <nrf_gpio_pin_port_decode>:
{
   1f1d8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1da:	6802      	ldr	r2, [r0, #0]
{
   1f1dc:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1de:	4610      	mov	r0, r2
   1f1e0:	f007 fcf0 	bl	26bc4 <nrf_gpio_pin_present_check>
   1f1e4:	b950      	cbnz	r0, 1f1fc <nrf_gpio_pin_port_decode+0x24>
   1f1e6:	490e      	ldr	r1, [pc, #56]	; (1f220 <nrf_gpio_pin_port_decode+0x48>)
   1f1e8:	480e      	ldr	r0, [pc, #56]	; (1f224 <nrf_gpio_pin_port_decode+0x4c>)
   1f1ea:	f240 2247 	movw	r2, #583	; 0x247
   1f1ee:	f004 fbfb 	bl	239e8 <assert_print>
   1f1f2:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1f1f6:	480a      	ldr	r0, [pc, #40]	; (1f220 <nrf_gpio_pin_port_decode+0x48>)
   1f1f8:	f004 fbef 	bl	239da <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1f1fc:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f200:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1f202:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f204:	d008      	beq.n	1f218 <nrf_gpio_pin_port_decode+0x40>
            NRFX_ASSERT(0);
   1f206:	4906      	ldr	r1, [pc, #24]	; (1f220 <nrf_gpio_pin_port_decode+0x48>)
   1f208:	4806      	ldr	r0, [pc, #24]	; (1f224 <nrf_gpio_pin_port_decode+0x4c>)
   1f20a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1f20e:	f004 fbeb 	bl	239e8 <assert_print>
   1f212:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f216:	e7ee      	b.n	1f1f6 <nrf_gpio_pin_port_decode+0x1e>
}
   1f218:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1f21c:	bd08      	pop	{r3, pc}
   1f21e:	bf00      	nop
   1f220:	0002a7e4 	.word	0x0002a7e4
   1f224:	000280bd 	.word	0x000280bd

0001f228 <nrfx_gpiote_input_configure>:
{
   1f228:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f22a:	4604      	mov	r4, r0
   1f22c:	b085      	sub	sp, #20
   1f22e:	4617      	mov	r7, r2
   1f230:	461d      	mov	r5, r3
    if (p_input_config)
   1f232:	b1d9      	cbz	r1, 1f26c <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1f234:	f007 fcd2 	bl	26bdc <pin_is_task_output>
   1f238:	bb00      	cbnz	r0, 1f27c <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f23a:	460b      	mov	r3, r1
   1f23c:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f240:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f244:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f248:	f10d 020f 	add.w	r2, sp, #15
   1f24c:	f10d 010e 	add.w	r1, sp, #14
   1f250:	4620      	mov	r0, r4
   1f252:	f007 fcce 	bl	26bf2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f256:	4a44      	ldr	r2, [pc, #272]	; (1f368 <nrfx_gpiote_input_configure+0x140>)
   1f258:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f25c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f260:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f264:	f043 0301 	orr.w	r3, r3, #1
   1f268:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f26c:	b34f      	cbz	r7, 1f2c2 <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   1f26e:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f270:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f272:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f274:	f7ff ff30 	bl	1f0d8 <pin_is_output>
   1f278:	b110      	cbz	r0, 1f280 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1f27a:	b1ba      	cbz	r2, 1f2ac <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   1f27c:	483b      	ldr	r0, [pc, #236]	; (1f36c <nrfx_gpiote_input_configure+0x144>)
   1f27e:	e022      	b.n	1f2c6 <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f280:	4b39      	ldr	r3, [pc, #228]	; (1f368 <nrfx_gpiote_input_configure+0x140>)
   1f282:	f104 0c08 	add.w	ip, r4, #8
   1f286:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   1f28a:	f021 0120 	bic.w	r1, r1, #32
   1f28e:	04c9      	lsls	r1, r1, #19
   1f290:	0cc9      	lsrs	r1, r1, #19
   1f292:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   1f296:	b14a      	cbz	r2, 1f2ac <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   1f298:	2e03      	cmp	r6, #3
   1f29a:	d8ef      	bhi.n	1f27c <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f29c:	687a      	ldr	r2, [r7, #4]
   1f29e:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f2a0:	b99e      	cbnz	r6, 1f2ca <nrfx_gpiote_input_configure+0xa2>
   1f2a2:	4b33      	ldr	r3, [pc, #204]	; (1f370 <nrfx_gpiote_input_configure+0x148>)
   1f2a4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   1f2a8:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f2ac:	4a2e      	ldr	r2, [pc, #184]	; (1f368 <nrfx_gpiote_input_configure+0x140>)
   1f2ae:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f2b2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f2b6:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f2ba:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f2be:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f2c2:	bb3d      	cbnz	r5, 1f314 <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   1f2c4:	482b      	ldr	r0, [pc, #172]	; (1f374 <nrfx_gpiote_input_configure+0x14c>)
}
   1f2c6:	b005      	add	sp, #20
   1f2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f2ca:	00ba      	lsls	r2, r7, #2
   1f2cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f2d0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f2d4:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f2d8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f2dc:	f020 0003 	bic.w	r0, r0, #3
   1f2e0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f2e4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f2e8:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1f2ec:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1f2f0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f2f4:	0220      	lsls	r0, r4, #8
   1f2f6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f2fa:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   1f2fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1f302:	ea40 000e 	orr.w	r0, r0, lr
   1f306:	f041 0120 	orr.w	r1, r1, #32
   1f30a:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   1f30e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1f312:	e7cb      	b.n	1f2ac <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f314:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f318:	4620      	mov	r0, r4
   1f31a:	f7ff ff05 	bl	1f128 <release_handler>
    if (!handler)
   1f31e:	2e00      	cmp	r6, #0
   1f320:	d0d0      	beq.n	1f2c4 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f322:	4d11      	ldr	r5, [pc, #68]	; (1f368 <nrfx_gpiote_input_configure+0x140>)
   1f324:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f328:	4296      	cmp	r6, r2
   1f32a:	d101      	bne.n	1f330 <nrfx_gpiote_input_configure+0x108>
   1f32c:	429f      	cmp	r7, r3
   1f32e:	d018      	beq.n	1f362 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f330:	4811      	ldr	r0, [pc, #68]	; (1f378 <nrfx_gpiote_input_configure+0x150>)
   1f332:	f10d 010f 	add.w	r1, sp, #15
   1f336:	f7ff fe79 	bl	1f02c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f33a:	4b0e      	ldr	r3, [pc, #56]	; (1f374 <nrfx_gpiote_input_configure+0x14c>)
   1f33c:	4298      	cmp	r0, r3
   1f33e:	d1c2      	bne.n	1f2c6 <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   1f340:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1f344:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1f348:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f34c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f34e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f350:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1f354:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f35c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1f360:	e7b0      	b.n	1f2c4 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f362:	2200      	movs	r2, #0
   1f364:	e7ee      	b.n	1f344 <nrfx_gpiote_input_configure+0x11c>
   1f366:	bf00      	nop
   1f368:	2000072c 	.word	0x2000072c
   1f36c:	0bad0004 	.word	0x0bad0004
   1f370:	40006000 	.word	0x40006000
   1f374:	0bad0000 	.word	0x0bad0000
   1f378:	20000780 	.word	0x20000780

0001f37c <nrfx_gpiote_output_configure>:
{
   1f37c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f37e:	4604      	mov	r4, r0
   1f380:	b085      	sub	sp, #20
   1f382:	4615      	mov	r5, r2
    if (p_config)
   1f384:	b321      	cbz	r1, 1f3d0 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f386:	f7ff fea7 	bl	1f0d8 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f38a:	b920      	cbnz	r0, 1f396 <nrfx_gpiote_output_configure+0x1a>
   1f38c:	4620      	mov	r0, r4
   1f38e:	f7ff fe8d 	bl	1f0ac <pin_in_use_by_te>
   1f392:	2800      	cmp	r0, #0
   1f394:	d15e      	bne.n	1f454 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f396:	4620      	mov	r0, r4
   1f398:	f7ff fe92 	bl	1f0c0 <pin_has_trigger>
   1f39c:	b110      	cbz	r0, 1f3a4 <nrfx_gpiote_output_configure+0x28>
   1f39e:	784b      	ldrb	r3, [r1, #1]
   1f3a0:	2b01      	cmp	r3, #1
   1f3a2:	d057      	beq.n	1f454 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f3a4:	2301      	movs	r3, #1
   1f3a6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f3aa:	2300      	movs	r3, #0
   1f3ac:	e9cd 1300 	strd	r1, r3, [sp]
   1f3b0:	1c4a      	adds	r2, r1, #1
   1f3b2:	1c8b      	adds	r3, r1, #2
   1f3b4:	4620      	mov	r0, r4
   1f3b6:	f10d 010f 	add.w	r1, sp, #15
   1f3ba:	f007 fc1a 	bl	26bf2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f3be:	4a26      	ldr	r2, [pc, #152]	; (1f458 <nrfx_gpiote_output_configure+0xdc>)
   1f3c0:	f104 0108 	add.w	r1, r4, #8
   1f3c4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f3c8:	f043 0303 	orr.w	r3, r3, #3
   1f3cc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f3d0:	b915      	cbnz	r5, 1f3d8 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f3d2:	4822      	ldr	r0, [pc, #136]	; (1f45c <nrfx_gpiote_output_configure+0xe0>)
}
   1f3d4:	b005      	add	sp, #20
   1f3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f3d8:	4620      	mov	r0, r4
   1f3da:	f7ff fe7d 	bl	1f0d8 <pin_is_output>
        if (pin_is_input(pin))
   1f3de:	b3c8      	cbz	r0, 1f454 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f3e0:	4e1d      	ldr	r6, [pc, #116]	; (1f458 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   1f3e2:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f3e6:	f104 0708 	add.w	r7, r4, #8
   1f3ea:	4661      	mov	r1, ip
   1f3ec:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f3f0:	0089      	lsls	r1, r1, #2
   1f3f2:	f020 0020 	bic.w	r0, r0, #32
   1f3f6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f3fa:	04c0      	lsls	r0, r0, #19
   1f3fc:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1f400:	0cc0      	lsrs	r0, r0, #19
   1f402:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f406:	2300      	movs	r3, #0
   1f408:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f40c:	786a      	ldrb	r2, [r5, #1]
   1f40e:	2a00      	cmp	r2, #0
   1f410:	d0df      	beq.n	1f3d2 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f412:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1f416:	78ad      	ldrb	r5, [r5, #2]
   1f418:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1f41c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f420:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f424:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f428:	0223      	lsls	r3, r4, #8
   1f42a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f42e:	0412      	lsls	r2, r2, #16
   1f430:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f434:	ea43 030e 	orr.w	r3, r3, lr
   1f438:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f43a:	052a      	lsls	r2, r5, #20
   1f43c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f440:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f444:	4313      	orrs	r3, r2
   1f446:	f040 0020 	orr.w	r0, r0, #32
   1f44a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f44e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f452:	e7be      	b.n	1f3d2 <nrfx_gpiote_output_configure+0x56>
{
   1f454:	4802      	ldr	r0, [pc, #8]	; (1f460 <nrfx_gpiote_output_configure+0xe4>)
   1f456:	e7bd      	b.n	1f3d4 <nrfx_gpiote_output_configure+0x58>
   1f458:	2000072c 	.word	0x2000072c
   1f45c:	0bad0000 	.word	0x0bad0000
   1f460:	0bad0004 	.word	0x0bad0004

0001f464 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f464:	4b01      	ldr	r3, [pc, #4]	; (1f46c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f466:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f46a:	4770      	bx	lr
   1f46c:	2000072c 	.word	0x2000072c

0001f470 <nrfx_gpiote_channel_get>:
{
   1f470:	b508      	push	{r3, lr}
   1f472:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   1f474:	b951      	cbnz	r1, 1f48c <nrfx_gpiote_channel_get+0x1c>
   1f476:	490c      	ldr	r1, [pc, #48]	; (1f4a8 <nrfx_gpiote_channel_get+0x38>)
   1f478:	480c      	ldr	r0, [pc, #48]	; (1f4ac <nrfx_gpiote_channel_get+0x3c>)
   1f47a:	f240 2235 	movw	r2, #565	; 0x235
   1f47e:	f004 fab3 	bl	239e8 <assert_print>
   1f482:	4809      	ldr	r0, [pc, #36]	; (1f4a8 <nrfx_gpiote_channel_get+0x38>)
   1f484:	f240 2135 	movw	r1, #565	; 0x235
   1f488:	f004 faa7 	bl	239da <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f48c:	f7ff fe0e 	bl	1f0ac <pin_in_use_by_te>
   1f490:	b138      	cbz	r0, 1f4a2 <nrfx_gpiote_channel_get+0x32>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f492:	4b07      	ldr	r3, [pc, #28]	; (1f4b0 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_SUCCESS;
   1f494:	4807      	ldr	r0, [pc, #28]	; (1f4b4 <nrfx_gpiote_channel_get+0x44>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f496:	3208      	adds	r2, #8
   1f498:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1f49c:	0b5b      	lsrs	r3, r3, #13
   1f49e:	700b      	strb	r3, [r1, #0]
}
   1f4a0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f4a2:	4805      	ldr	r0, [pc, #20]	; (1f4b8 <nrfx_gpiote_channel_get+0x48>)
   1f4a4:	e7fc      	b.n	1f4a0 <nrfx_gpiote_channel_get+0x30>
   1f4a6:	bf00      	nop
   1f4a8:	0002ae76 	.word	0x0002ae76
   1f4ac:	000280bd 	.word	0x000280bd
   1f4b0:	2000072c 	.word	0x2000072c
   1f4b4:	0bad0000 	.word	0x0bad0000
   1f4b8:	0bad0004 	.word	0x0bad0004

0001f4bc <nrfx_gpiote_init>:
{
   1f4bc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f4be:	4c0f      	ldr	r4, [pc, #60]	; (1f4fc <nrfx_gpiote_init+0x40>)
   1f4c0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1f4c4:	b9bd      	cbnz	r5, 1f4f6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f4c6:	2240      	movs	r2, #64	; 0x40
   1f4c8:	4629      	mov	r1, r5
   1f4ca:	f104 0010 	add.w	r0, r4, #16
   1f4ce:	f005 f919 	bl	24704 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f4d2:	2006      	movs	r0, #6
   1f4d4:	f7f3 fd10 	bl	12ef8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f4d8:	4b09      	ldr	r3, [pc, #36]	; (1f500 <nrfx_gpiote_init+0x44>)
    return err_code;
   1f4da:	480a      	ldr	r0, [pc, #40]	; (1f504 <nrfx_gpiote_init+0x48>)
   1f4dc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f4e0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f4e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f4e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f4ec:	2301      	movs	r3, #1
   1f4ee:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f4f2:	6563      	str	r3, [r4, #84]	; 0x54
}
   1f4f4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f4f6:	4804      	ldr	r0, [pc, #16]	; (1f508 <nrfx_gpiote_init+0x4c>)
   1f4f8:	e7fc      	b.n	1f4f4 <nrfx_gpiote_init+0x38>
   1f4fa:	bf00      	nop
   1f4fc:	2000072c 	.word	0x2000072c
   1f500:	40006000 	.word	0x40006000
   1f504:	0bad0000 	.word	0x0bad0000
   1f508:	0bad0005 	.word	0x0bad0005

0001f50c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f50c:	4b03      	ldr	r3, [pc, #12]	; (1f51c <nrfx_gpiote_is_init+0x10>)
   1f50e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1f512:	3800      	subs	r0, #0
   1f514:	bf18      	it	ne
   1f516:	2001      	movne	r0, #1
   1f518:	4770      	bx	lr
   1f51a:	bf00      	nop
   1f51c:	2000072c 	.word	0x2000072c

0001f520 <nrfx_gpiote_channel_free>:
{
   1f520:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f522:	4801      	ldr	r0, [pc, #4]	; (1f528 <nrfx_gpiote_channel_free+0x8>)
   1f524:	f7ff bda2 	b.w	1f06c <nrfx_flag32_free>
   1f528:	2000077c 	.word	0x2000077c

0001f52c <nrfx_gpiote_channel_alloc>:
{
   1f52c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f52e:	4801      	ldr	r0, [pc, #4]	; (1f534 <nrfx_gpiote_channel_alloc+0x8>)
   1f530:	f7ff bd7c 	b.w	1f02c <nrfx_flag32_alloc>
   1f534:	2000077c 	.word	0x2000077c

0001f538 <nrfx_gpiote_trigger_enable>:
{
   1f538:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f53a:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1f53c:	f7ff fdc0 	bl	1f0c0 <pin_has_trigger>
   1f540:	b950      	cbnz	r0, 1f558 <nrfx_gpiote_trigger_enable+0x20>
   1f542:	492c      	ldr	r1, [pc, #176]	; (1f5f4 <nrfx_gpiote_trigger_enable+0xbc>)
   1f544:	482c      	ldr	r0, [pc, #176]	; (1f5f8 <nrfx_gpiote_trigger_enable+0xc0>)
   1f546:	f240 32df 	movw	r2, #991	; 0x3df
   1f54a:	f004 fa4d 	bl	239e8 <assert_print>
   1f54e:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1f552:	4828      	ldr	r0, [pc, #160]	; (1f5f4 <nrfx_gpiote_trigger_enable+0xbc>)
   1f554:	f004 fa41 	bl	239da <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f558:	4620      	mov	r0, r4
   1f55a:	f7ff fda7 	bl	1f0ac <pin_in_use_by_te>
   1f55e:	4a27      	ldr	r2, [pc, #156]	; (1f5fc <nrfx_gpiote_trigger_enable+0xc4>)
   1f560:	f104 0508 	add.w	r5, r4, #8
   1f564:	b1f8      	cbz	r0, 1f5a6 <nrfx_gpiote_trigger_enable+0x6e>
    return !pin_is_output(pin);
   1f566:	4620      	mov	r0, r4
   1f568:	f7ff fdb6 	bl	1f0d8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f56c:	b9d8      	cbnz	r0, 1f5a6 <nrfx_gpiote_trigger_enable+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f56e:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   1f572:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f574:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   1f576:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1f57a:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   1f57e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f582:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f586:	6020      	str	r0, [r4, #0]
   1f588:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f58a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1f58e:	f040 0001 	orr.w	r0, r0, #1
   1f592:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1f596:	b121      	cbz	r1, 1f5a2 <nrfx_gpiote_trigger_enable+0x6a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f598:	2301      	movs	r3, #1
   1f59a:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1f59c:	4a18      	ldr	r2, [pc, #96]	; (1f600 <nrfx_gpiote_trigger_enable+0xc8>)
   1f59e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f5a2:	b003      	add	sp, #12
   1f5a4:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1f5a6:	b941      	cbnz	r1, 1f5ba <nrfx_gpiote_trigger_enable+0x82>
   1f5a8:	4912      	ldr	r1, [pc, #72]	; (1f5f4 <nrfx_gpiote_trigger_enable+0xbc>)
   1f5aa:	4813      	ldr	r0, [pc, #76]	; (1f5f8 <nrfx_gpiote_trigger_enable+0xc0>)
   1f5ac:	f240 32ee 	movw	r2, #1006	; 0x3ee
   1f5b0:	f004 fa1a 	bl	239e8 <assert_print>
   1f5b4:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1f5b8:	e7cb      	b.n	1f552 <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f5ba:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1f5be:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f5c2:	2b04      	cmp	r3, #4
   1f5c4:	d012      	beq.n	1f5ec <nrfx_gpiote_trigger_enable+0xb4>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f5c6:	2b05      	cmp	r3, #5
   1f5c8:	d012      	beq.n	1f5f0 <nrfx_gpiote_trigger_enable+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f5ca:	a801      	add	r0, sp, #4
   1f5cc:	9401      	str	r4, [sp, #4]
   1f5ce:	f7ff fe03 	bl	1f1d8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f5d2:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f5d4:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f5d8:	40d9      	lsrs	r1, r3
   1f5da:	f001 0101 	and.w	r1, r1, #1
   1f5de:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f5e0:	4620      	mov	r0, r4
}
   1f5e2:	b003      	add	sp, #12
   1f5e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f5e8:	f007 bb50 	b.w	26c8c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f5ec:	2103      	movs	r1, #3
   1f5ee:	e7f7      	b.n	1f5e0 <nrfx_gpiote_trigger_enable+0xa8>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f5f0:	2102      	movs	r1, #2
   1f5f2:	e7f5      	b.n	1f5e0 <nrfx_gpiote_trigger_enable+0xa8>
   1f5f4:	0002ae76 	.word	0x0002ae76
   1f5f8:	000280bd 	.word	0x000280bd
   1f5fc:	2000072c 	.word	0x2000072c
   1f600:	40006000 	.word	0x40006000

0001f604 <nrfx_gpiote_trigger_disable>:
{
   1f604:	b508      	push	{r3, lr}
   1f606:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f608:	f7ff fd50 	bl	1f0ac <pin_in_use_by_te>
   1f60c:	b1c8      	cbz	r0, 1f642 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1f60e:	4610      	mov	r0, r2
   1f610:	f7ff fd62 	bl	1f0d8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f614:	b9a8      	cbnz	r0, 1f642 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f616:	3208      	adds	r2, #8
   1f618:	4b0d      	ldr	r3, [pc, #52]	; (1f650 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   1f61a:	490e      	ldr	r1, [pc, #56]	; (1f654 <nrfx_gpiote_trigger_disable+0x50>)
   1f61c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f620:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f622:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f624:	409a      	lsls	r2, r3
   1f626:	009b      	lsls	r3, r3, #2
   1f628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f62c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f630:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f634:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f638:	f022 0203 	bic.w	r2, r2, #3
   1f63c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f640:	bd08      	pop	{r3, pc}
   1f642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f646:	2100      	movs	r1, #0
   1f648:	4610      	mov	r0, r2
   1f64a:	f007 bb1f 	b.w	26c8c <nrf_gpio_cfg_sense_set>
   1f64e:	bf00      	nop
   1f650:	2000072c 	.word	0x2000072c
   1f654:	40006000 	.word	0x40006000

0001f658 <nrfx_gpiote_pin_uninit>:
{
   1f658:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f65a:	4b0e      	ldr	r3, [pc, #56]	; (1f694 <nrfx_gpiote_pin_uninit+0x3c>)
   1f65c:	f100 0208 	add.w	r2, r0, #8
{
   1f660:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f662:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1f666:	07db      	lsls	r3, r3, #31
   1f668:	d511      	bpl.n	1f68e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1f66a:	f7ff ffcb 	bl	1f604 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1f66e:	4620      	mov	r0, r4
   1f670:	f7ff fd96 	bl	1f1a0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f674:	a801      	add	r0, sp, #4
   1f676:	9401      	str	r4, [sp, #4]
   1f678:	f7ff fdae 	bl	1f1d8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1f67c:	9b01      	ldr	r3, [sp, #4]
   1f67e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f682:	2202      	movs	r2, #2
   1f684:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1f688:	4803      	ldr	r0, [pc, #12]	; (1f698 <nrfx_gpiote_pin_uninit+0x40>)
}
   1f68a:	b002      	add	sp, #8
   1f68c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f68e:	4803      	ldr	r0, [pc, #12]	; (1f69c <nrfx_gpiote_pin_uninit+0x44>)
   1f690:	e7fb      	b.n	1f68a <nrfx_gpiote_pin_uninit+0x32>
   1f692:	bf00      	nop
   1f694:	2000072c 	.word	0x2000072c
   1f698:	0bad0000 	.word	0x0bad0000
   1f69c:	0bad0004 	.word	0x0bad0004

0001f6a0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6a4:	4b59      	ldr	r3, [pc, #356]	; (1f80c <nrfx_gpiote_irq_handler+0x16c>)
    return p_reg->INTENSET & mask;
   1f6a6:	485a      	ldr	r0, [pc, #360]	; (1f810 <nrfx_gpiote_irq_handler+0x170>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f6a8:	495a      	ldr	r1, [pc, #360]	; (1f814 <nrfx_gpiote_irq_handler+0x174>)
    uint32_t status = 0;
   1f6aa:	2600      	movs	r6, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1f6ac:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6ae:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f6b0:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1f6b2:	b135      	cbz	r5, 1f6c2 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   1f6b4:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1f6b8:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6ba:	bf1e      	ittt	ne
   1f6bc:	601c      	strne	r4, [r3, #0]
   1f6be:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1f6c0:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f6c2:	3304      	adds	r3, #4
   1f6c4:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1f6c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f6ca:	d1f1      	bne.n	1f6b0 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f6cc:	4f50      	ldr	r7, [pc, #320]	; (1f810 <nrfx_gpiote_irq_handler+0x170>)
   1f6ce:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1f6d2:	b1bb      	cbz	r3, 1f704 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   1f6d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f6d8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1f6dc:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1f6de:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f6e2:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   1f6e6:	9c00      	ldr	r4, [sp, #0]
   1f6e8:	b994      	cbnz	r4, 1f710 <nrfx_gpiote_irq_handler+0x70>
        *p_masks = gpio_regs[i]->LATCH;
   1f6ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6ee:	f8c7 417c 	str.w	r4, [r7, #380]	; 0x17c
   1f6f2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1f6f6:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1f6fa:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1f6fc:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   1f700:	2b00      	cmp	r3, #0
   1f702:	d1ee      	bne.n	1f6e2 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   1f704:	2401      	movs	r4, #1
    while (mask)
   1f706:	2e00      	cmp	r6, #0
   1f708:	d168      	bne.n	1f7dc <nrfx_gpiote_irq_handler+0x13c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1f70a:	b003      	add	sp, #12
   1f70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1f710:	fa94 f4a4 	rbit	r4, r4
   1f714:	fab4 f484 	clz	r4, r4
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f718:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f71a:	4a3f      	ldr	r2, [pc, #252]	; (1f818 <nrfx_gpiote_irq_handler+0x178>)
   1f71c:	9401      	str	r4, [sp, #4]
   1f71e:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   1f722:	f004 0107 	and.w	r1, r4, #7
   1f726:	f832 a013 	ldrh.w	sl, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1f72a:	f81d 2000 	ldrb.w	r2, [sp, r0]
   1f72e:	fa08 f101 	lsl.w	r1, r8, r1
   1f732:	ea22 0201 	bic.w	r2, r2, r1
   1f736:	f80d 2000 	strb.w	r2, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f73a:	a801      	add	r0, sp, #4
   1f73c:	f7ff fd4c 	bl	1f1d8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f740:	9a01      	ldr	r2, [sp, #4]
   1f742:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1f746:	ea4f 099a 	mov.w	r9, sl, lsr #2
   1f74a:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   1f74e:	f3ca 0b82 	ubfx	fp, sl, #2, #3
    if (is_level(trigger))
   1f752:	f019 0f04 	tst.w	r9, #4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f756:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f758:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   1f75c:	d023      	beq.n	1f7a6 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   1f75e:	4659      	mov	r1, fp
   1f760:	4620      	mov	r0, r4
   1f762:	f7ff fcc3 	bl	1f0ec <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f766:	a801      	add	r0, sp, #4
   1f768:	9401      	str	r4, [sp, #4]
   1f76a:	f7ff fd35 	bl	1f1d8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f76e:	9b01      	ldr	r3, [sp, #4]
   1f770:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f774:	b2ed      	uxtb	r5, r5
   1f776:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f77a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f77e:	429d      	cmp	r5, r3
   1f780:	d107      	bne.n	1f792 <nrfx_gpiote_irq_handler+0xf2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f782:	2100      	movs	r1, #0
   1f784:	4620      	mov	r0, r4
   1f786:	f007 fa81 	bl	26c8c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1f78a:	4629      	mov	r1, r5
   1f78c:	4620      	mov	r0, r4
   1f78e:	f007 fa7d 	bl	26c8c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f792:	a801      	add	r0, sp, #4
   1f794:	9401      	str	r4, [sp, #4]
   1f796:	f7ff fd1f 	bl	1f1d8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1f79a:	9b01      	ldr	r3, [sp, #4]
   1f79c:	fa08 f303 	lsl.w	r3, r8, r3
   1f7a0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   1f7a4:	e79f      	b.n	1f6e6 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f7a6:	2d02      	cmp	r5, #2
   1f7a8:	d10c      	bne.n	1f7c4 <nrfx_gpiote_irq_handler+0x124>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f7aa:	2103      	movs	r1, #3
   1f7ac:	4620      	mov	r0, r4
   1f7ae:	f007 fa6d 	bl	26c8c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f7b2:	f00b 0305 	and.w	r3, fp, #5
   1f7b6:	2b01      	cmp	r3, #1
   1f7b8:	d1eb      	bne.n	1f792 <nrfx_gpiote_irq_handler+0xf2>
            call_handler(pin, trigger);
   1f7ba:	4651      	mov	r1, sl
   1f7bc:	4620      	mov	r0, r4
   1f7be:	f7ff fc95 	bl	1f0ec <call_handler>
   1f7c2:	e7e6      	b.n	1f792 <nrfx_gpiote_irq_handler+0xf2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f7c4:	2102      	movs	r1, #2
   1f7c6:	4620      	mov	r0, r4
   1f7c8:	f007 fa60 	bl	26c8c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f7cc:	f1bb 0f03 	cmp.w	fp, #3
   1f7d0:	d0f3      	beq.n	1f7ba <nrfx_gpiote_irq_handler+0x11a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f7d2:	2d03      	cmp	r5, #3
   1f7d4:	d1dd      	bne.n	1f792 <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f7d6:	f1bb 0f02 	cmp.w	fp, #2
   1f7da:	e7ed      	b.n	1f7b8 <nrfx_gpiote_irq_handler+0x118>
        uint32_t ch = NRF_CTZ(mask);
   1f7dc:	fa96 f3a6 	rbit	r3, r6
   1f7e0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1f7e4:	fa04 f203 	lsl.w	r2, r4, r3
   1f7e8:	009b      	lsls	r3, r3, #2
   1f7ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f7ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f7f2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f7f6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f7fa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f7fe:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1f802:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1f806:	f7ff fc71 	bl	1f0ec <call_handler>
   1f80a:	e77c      	b.n	1f706 <nrfx_gpiote_irq_handler+0x66>
   1f80c:	40006100 	.word	0x40006100
   1f810:	40006000 	.word	0x40006000
   1f814:	40006120 	.word	0x40006120
   1f818:	2000072c 	.word	0x2000072c

0001f81c <nvmc_word_write>:
   1f81c:	4a04      	ldr	r2, [pc, #16]	; (1f830 <nvmc_word_write+0x14>)
   1f81e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f822:	07db      	lsls	r3, r3, #31
   1f824:	d5fb      	bpl.n	1f81e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1f826:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1f828:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1f82c:	4770      	bx	lr
   1f82e:	bf00      	nop
   1f830:	4001e000 	.word	0x4001e000

0001f834 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1f834:	b508      	push	{r3, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1f836:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f83a:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   1f83c:	6959      	ldr	r1, [r3, #20]
    return flash_page_size_get() * flash_page_count_get();
   1f83e:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f840:	4290      	cmp	r0, r2
   1f842:	d207      	bcs.n	1f854 <nrfx_nvmc_page_erase+0x20>
    return p_reg->CODEPAGESIZE;
   1f844:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1f846:	fbb0 f3f2 	udiv	r3, r0, r2
   1f84a:	fb02 0313 	mls	r3, r2, r3, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1f84e:	b163      	cbz	r3, 1f86a <nrfx_nvmc_page_erase+0x36>
    {
        return NRFX_ERROR_INVALID_ADDR;
   1f850:	480d      	ldr	r0, [pc, #52]	; (1f888 <nrfx_nvmc_page_erase+0x54>)
   1f852:	e018      	b.n	1f886 <nrfx_nvmc_page_erase+0x52>
    NRFX_ASSERT(is_valid_address(addr, false));
   1f854:	490d      	ldr	r1, [pc, #52]	; (1f88c <nrfx_nvmc_page_erase+0x58>)
   1f856:	480e      	ldr	r0, [pc, #56]	; (1f890 <nrfx_nvmc_page_erase+0x5c>)
   1f858:	f44f 7283 	mov.w	r2, #262	; 0x106
   1f85c:	f004 f8c4 	bl	239e8 <assert_print>
   1f860:	480a      	ldr	r0, [pc, #40]	; (1f88c <nrfx_nvmc_page_erase+0x58>)
   1f862:	f44f 7183 	mov.w	r1, #262	; 0x106
   1f866:	f004 f8b8 	bl	239da <assert_post_action>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1f86a:	4b0a      	ldr	r3, [pc, #40]	; (1f894 <nrfx_nvmc_page_erase+0x60>)
   1f86c:	2202      	movs	r2, #2
   1f86e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1f872:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f876:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f87a:	07d2      	lsls	r2, r2, #31
   1f87c:	d5fb      	bpl.n	1f876 <nrfx_nvmc_page_erase+0x42>
    p_reg->CONFIG = (uint32_t)mode;
   1f87e:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1f880:	4805      	ldr	r0, [pc, #20]	; (1f898 <nrfx_nvmc_page_erase+0x64>)
   1f882:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1f886:	bd08      	pop	{r3, pc}
   1f888:	0bad000a 	.word	0x0bad000a
   1f88c:	0002aeb4 	.word	0x0002aeb4
   1f890:	000280bd 	.word	0x000280bd
   1f894:	4001e000 	.word	0x4001e000
   1f898:	0bad0000 	.word	0x0bad0000

0001f89c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1f89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f89e:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   1f8a0:	2101      	movs	r1, #1
{
   1f8a2:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   1f8a4:	f007 fa01 	bl	26caa <is_valid_address>
   1f8a8:	b950      	cbnz	r0, 1f8c0 <nrfx_nvmc_word_write+0x24>
   1f8aa:	4911      	ldr	r1, [pc, #68]	; (1f8f0 <nrfx_nvmc_word_write+0x54>)
   1f8ac:	4811      	ldr	r0, [pc, #68]	; (1f8f4 <nrfx_nvmc_word_write+0x58>)
   1f8ae:	f44f 72ca 	mov.w	r2, #404	; 0x194
   1f8b2:	f004 f899 	bl	239e8 <assert_print>
   1f8b6:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1f8ba:	480d      	ldr	r0, [pc, #52]	; (1f8f0 <nrfx_nvmc_word_write+0x54>)
   1f8bc:	f004 f88d 	bl	239da <assert_post_action>
   1f8c0:	f014 0703 	ands.w	r7, r4, #3
   1f8c4:	d008      	beq.n	1f8d8 <nrfx_nvmc_word_write+0x3c>
   1f8c6:	490a      	ldr	r1, [pc, #40]	; (1f8f0 <nrfx_nvmc_word_write+0x54>)
   1f8c8:	480a      	ldr	r0, [pc, #40]	; (1f8f4 <nrfx_nvmc_word_write+0x58>)
   1f8ca:	f240 1295 	movw	r2, #405	; 0x195
   1f8ce:	f004 f88b 	bl	239e8 <assert_print>
   1f8d2:	f240 1195 	movw	r1, #405	; 0x195
   1f8d6:	e7f0      	b.n	1f8ba <nrfx_nvmc_word_write+0x1e>
   1f8d8:	4e07      	ldr	r6, [pc, #28]	; (1f8f8 <nrfx_nvmc_word_write+0x5c>)
   1f8da:	2301      	movs	r3, #1
   1f8dc:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1f8e0:	4629      	mov	r1, r5
   1f8e2:	4620      	mov	r0, r4
   1f8e4:	f7ff ff9a 	bl	1f81c <nvmc_word_write>
   1f8e8:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1f8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f8ee:	bf00      	nop
   1f8f0:	0002aeb4 	.word	0x0002aeb4
   1f8f4:	000280bd 	.word	0x000280bd
   1f8f8:	4001e000 	.word	0x4001e000

0001f8fc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1f8fc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1f8fe:	4801      	ldr	r0, [pc, #4]	; (1f904 <nrfx_ppi_channel_alloc+0x8>)
   1f900:	f7ff bb94 	b.w	1f02c <nrfx_flag32_alloc>
   1f904:	20000788 	.word	0x20000788

0001f908 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1f908:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f90a:	4c14      	ldr	r4, [pc, #80]	; (1f95c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1f90c:	4a14      	ldr	r2, [pc, #80]	; (1f960 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1f90e:	4915      	ldr	r1, [pc, #84]	; (1f964 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f910:	2303      	movs	r3, #3
   1f912:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1f914:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f916:	4b14      	ldr	r3, [pc, #80]	; (1f968 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1f918:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f91a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1f91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f920:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1f922:	2300      	movs	r3, #0
   1f924:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1f926:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f928:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1f92a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1f92c:	4a0f      	ldr	r2, [pc, #60]	; (1f96c <_DoInit+0x64>)
   1f92e:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1f930:	2210      	movs	r2, #16
   1f932:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   1f934:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   1f936:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1f938:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f93a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1f93c:	f004 fe8d 	bl	2465a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1f940:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1f944:	490a      	ldr	r1, [pc, #40]	; (1f970 <_DoInit+0x68>)
   1f946:	4620      	mov	r0, r4
   1f948:	f004 fe87 	bl	2465a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1f94c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1f950:	2320      	movs	r3, #32
   1f952:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1f954:	f3bf 8f5f 	dmb	sy
}
   1f958:	bd10      	pop	{r4, pc}
   1f95a:	bf00      	nop
   1f95c:	20002458 	.word	0x20002458
   1f960:	0002aef0 	.word	0x0002aef0
   1f964:	0002aef9 	.word	0x0002aef9
   1f968:	20002eb2 	.word	0x20002eb2
   1f96c:	20002ea2 	.word	0x20002ea2
   1f970:	0002aefd 	.word	0x0002aefd

0001f974 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f974:	4b01      	ldr	r3, [pc, #4]	; (1f97c <z_impl_z_errno+0x8>)
   1f976:	6898      	ldr	r0, [r3, #8]
}
   1f978:	3064      	adds	r0, #100	; 0x64
   1f97a:	4770      	bx	lr
   1f97c:	20002500 	.word	0x20002500

0001f980 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f982:	4604      	mov	r4, r0
   1f984:	460e      	mov	r6, r1
	__asm__ volatile(
   1f986:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f98a:	f3ef 8711 	mrs	r7, BASEPRI
   1f98e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f992:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1f996:	f002 faf7 	bl	21f88 <z_impl_z_current_get>
   1f99a:	2c04      	cmp	r4, #4
   1f99c:	bf96      	itet	ls
   1f99e:	4b1e      	ldrls	r3, [pc, #120]	; (1fa18 <z_fatal_error+0x98>)
   1f9a0:	4b1e      	ldrhi	r3, [pc, #120]	; (1fa1c <z_fatal_error+0x9c>)
   1f9a2:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f9a6:	2200      	movs	r2, #0
   1f9a8:	4605      	mov	r5, r0
   1f9aa:	9200      	str	r2, [sp, #0]
   1f9ac:	481c      	ldr	r0, [pc, #112]	; (1fa20 <z_fatal_error+0xa0>)
   1f9ae:	4622      	mov	r2, r4
   1f9b0:	2145      	movs	r1, #69	; 0x45
   1f9b2:	f004 f827 	bl	23a04 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f9b6:	b13e      	cbz	r6, 1f9c8 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f9b8:	69f3      	ldr	r3, [r6, #28]
   1f9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f9be:	b11b      	cbz	r3, 1f9c8 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   1f9c0:	4818      	ldr	r0, [pc, #96]	; (1fa24 <z_fatal_error+0xa4>)
   1f9c2:	2145      	movs	r1, #69	; 0x45
   1f9c4:	f004 f81e 	bl	23a04 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f9c8:	b135      	cbz	r5, 1f9d8 <z_fatal_error+0x58>
   1f9ca:	4628      	mov	r0, r5
   1f9cc:	f007 f9cd 	bl	26d6a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f9d0:	4603      	mov	r3, r0
   1f9d2:	b108      	cbz	r0, 1f9d8 <z_fatal_error+0x58>
   1f9d4:	7802      	ldrb	r2, [r0, #0]
   1f9d6:	b902      	cbnz	r2, 1f9da <z_fatal_error+0x5a>
		thread_name = "unknown";
   1f9d8:	4b13      	ldr	r3, [pc, #76]	; (1fa28 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f9da:	4814      	ldr	r0, [pc, #80]	; (1fa2c <z_fatal_error+0xac>)
   1f9dc:	462a      	mov	r2, r5
   1f9de:	2145      	movs	r1, #69	; 0x45
   1f9e0:	f004 f810 	bl	23a04 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1f9e4:	4631      	mov	r1, r6
   1f9e6:	4620      	mov	r0, r4
   1f9e8:	f7fe f88e 	bl	1db08 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1f9ec:	2c04      	cmp	r4, #4
   1f9ee:	d108      	bne.n	1fa02 <z_fatal_error+0x82>
   1f9f0:	490f      	ldr	r1, [pc, #60]	; (1fa30 <z_fatal_error+0xb0>)
   1f9f2:	4810      	ldr	r0, [pc, #64]	; (1fa34 <z_fatal_error+0xb4>)
   1f9f4:	2293      	movs	r2, #147	; 0x93
   1f9f6:	f003 fff7 	bl	239e8 <assert_print>
   1f9fa:	480d      	ldr	r0, [pc, #52]	; (1fa30 <z_fatal_error+0xb0>)
   1f9fc:	2193      	movs	r1, #147	; 0x93
   1f9fe:	f003 ffec 	bl	239da <assert_post_action>
	__asm__ volatile(
   1fa02:	f387 8811 	msr	BASEPRI, r7
   1fa06:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1fa0a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1fa0c:	b003      	add	sp, #12
   1fa0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1fa12:	f7f3 be6d 	b.w	136f0 <z_impl_k_thread_abort>
   1fa16:	bf00      	nop
   1fa18:	00027c70 	.word	0x00027c70
   1fa1c:	0002af04 	.word	0x0002af04
   1fa20:	0002af1a 	.word	0x0002af1a
   1fa24:	0002af47 	.word	0x0002af47
   1fa28:	0002af12 	.word	0x0002af12
   1fa2c:	0002af6d 	.word	0x0002af6d
   1fa30:	0002af8a 	.word	0x0002af8a
   1fa34:	000280bd 	.word	0x000280bd

0001fa38 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fa38:	4b0f      	ldr	r3, [pc, #60]	; (1fa78 <z_sys_init_run_level+0x40>)
{
   1fa3a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fa3c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1fa40:	3001      	adds	r0, #1
   1fa42:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1fa46:	42a6      	cmp	r6, r4
   1fa48:	d800      	bhi.n	1fa4c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1fa4a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1fa4c:	e9d4 3500 	ldrd	r3, r5, [r4]
   1fa50:	4628      	mov	r0, r5
   1fa52:	4798      	blx	r3
		if (dev != NULL) {
   1fa54:	b16d      	cbz	r5, 1fa72 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1fa56:	b138      	cbz	r0, 1fa68 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1fa58:	2800      	cmp	r0, #0
   1fa5a:	bfb8      	it	lt
   1fa5c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1fa5e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1fa60:	28ff      	cmp	r0, #255	; 0xff
   1fa62:	bfa8      	it	ge
   1fa64:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1fa66:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1fa68:	68ea      	ldr	r2, [r5, #12]
   1fa6a:	7853      	ldrb	r3, [r2, #1]
   1fa6c:	f043 0301 	orr.w	r3, r3, #1
   1fa70:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fa72:	3408      	adds	r4, #8
   1fa74:	e7e7      	b.n	1fa46 <z_sys_init_run_level+0xe>
   1fa76:	bf00      	nop
   1fa78:	00027c84 	.word	0x00027c84

0001fa7c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1fa7c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1fa7e:	4b0a      	ldr	r3, [pc, #40]	; (1faa8 <bg_thread_main+0x2c>)
   1fa80:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1fa82:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1fa84:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1fa86:	f7ff ffd7 	bl	1fa38 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1fa8a:	f003 f9a7 	bl	22ddc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1fa8e:	2004      	movs	r0, #4
   1fa90:	f7ff ffd2 	bl	1fa38 <z_sys_init_run_level>

	z_init_static_threads();
   1fa94:	f000 faf6 	bl	20084 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1fa98:	f7f1 f97e 	bl	10d98 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1fa9c:	4a03      	ldr	r2, [pc, #12]	; (1faac <bg_thread_main+0x30>)
   1fa9e:	7b13      	ldrb	r3, [r2, #12]
   1faa0:	f023 0301 	bic.w	r3, r3, #1
   1faa4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1faa6:	bd08      	pop	{r3, pc}
   1faa8:	200032b2 	.word	0x200032b2
   1faac:	20001eb0 	.word	0x20001eb0

0001fab0 <z_bss_zero>:
{
   1fab0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1fab2:	4803      	ldr	r0, [pc, #12]	; (1fac0 <z_bss_zero+0x10>)
   1fab4:	4a03      	ldr	r2, [pc, #12]	; (1fac4 <z_bss_zero+0x14>)
   1fab6:	2100      	movs	r1, #0
   1fab8:	1a12      	subs	r2, r2, r0
   1faba:	f007 f92b 	bl	26d14 <z_early_memset>
}
   1fabe:	bd08      	pop	{r3, pc}
   1fac0:	20000a98 	.word	0x20000a98
   1fac4:	200032b4 	.word	0x200032b4

0001fac8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1fac8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1faca:	2300      	movs	r3, #0
{
   1facc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1face:	2201      	movs	r2, #1
   1fad0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1fad4:	4e13      	ldr	r6, [pc, #76]	; (1fb24 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fad6:	4d14      	ldr	r5, [pc, #80]	; (1fb28 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1fad8:	9301      	str	r3, [sp, #4]
   1fada:	220f      	movs	r2, #15
   1fadc:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1fae0:	4912      	ldr	r1, [pc, #72]	; (1fb2c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fae2:	2318      	movs	r3, #24
   1fae4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1fae8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1faec:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1faee:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1faf2:	fb00 1104 	mla	r1, r0, r4, r1
   1faf6:	4b0e      	ldr	r3, [pc, #56]	; (1fb30 <z_init_cpu+0x68>)
   1faf8:	9500      	str	r5, [sp, #0]
   1fafa:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fafe:	4630      	mov	r0, r6
   1fb00:	f000 fa36 	bl	1ff70 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fb04:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1fb06:	4a0b      	ldr	r2, [pc, #44]	; (1fb34 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1fb08:	60ee      	str	r6, [r5, #12]
   1fb0a:	f023 0304 	bic.w	r3, r3, #4
   1fb0e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1fb10:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1fb14:	fb04 3303 	mla	r3, r4, r3, r3
   1fb18:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1fb1a:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1fb1c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1fb1e:	b006      	add	sp, #24
   1fb20:	bd70      	pop	{r4, r5, r6, pc}
   1fb22:	bf00      	nop
   1fb24:	20001e30 	.word	0x20001e30
   1fb28:	20002500 	.word	0x20002500
   1fb2c:	20005800 	.word	0x20005800
   1fb30:	000201c1 	.word	0x000201c1
   1fb34:	20004fc0 	.word	0x20004fc0

0001fb38 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1fb38:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1fb3a:	2000      	movs	r0, #0
{
   1fb3c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1fb3e:	f7ff ff7b 	bl	1fa38 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1fb42:	4b2d      	ldr	r3, [pc, #180]	; (1fbf8 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1fb44:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1fb48:	4d2c      	ldr	r5, [pc, #176]	; (1fbfc <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1fb4a:	4e2d      	ldr	r6, [pc, #180]	; (1fc00 <z_cstart+0xc8>)
   1fb4c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb4e:	4f2d      	ldr	r7, [pc, #180]	; (1fc04 <z_cstart+0xcc>)
   1fb50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1fb54:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fb56:	23e0      	movs	r3, #224	; 0xe0
   1fb58:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1fb5c:	2400      	movs	r4, #0
   1fb5e:	2320      	movs	r3, #32
   1fb60:	77eb      	strb	r3, [r5, #31]
   1fb62:	762c      	strb	r4, [r5, #24]
   1fb64:	766c      	strb	r4, [r5, #25]
   1fb66:	76ac      	strb	r4, [r5, #26]
   1fb68:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1fb6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1fb6e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1fb72:	626b      	str	r3, [r5, #36]	; 0x24
   1fb74:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1fb78:	f7f3 fd2e 	bl	135d8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1fb7c:	f7f3 f970 	bl	12e60 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1fb80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb84:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1fb86:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1fb88:	f7f3 fe8e 	bl	138a8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1fb8c:	f7f3 fdc6 	bl	1371c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1fb90:	f240 1301 	movw	r3, #257	; 0x101
   1fb94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1fb98:	ab06      	add	r3, sp, #24
   1fb9a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1fb9c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1fba0:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1fba2:	f007 f8ab 	bl	26cfc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1fba6:	2001      	movs	r0, #1
   1fba8:	f7ff ff46 	bl	1fa38 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1fbac:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1fbae:	4d16      	ldr	r5, [pc, #88]	; (1fc08 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1fbb0:	f7ff ff42 	bl	1fa38 <z_sys_init_run_level>
	z_sched_init();
   1fbb4:	f002 f8b2 	bl	21d1c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fbb8:	4b14      	ldr	r3, [pc, #80]	; (1fc0c <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   1fbba:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fbbc:	9305      	str	r3, [sp, #20]
   1fbbe:	2301      	movs	r3, #1
   1fbc0:	4913      	ldr	r1, [pc, #76]	; (1fc10 <z_cstart+0xd8>)
   1fbc2:	9400      	str	r4, [sp, #0]
   1fbc4:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1fbc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fbcc:	463b      	mov	r3, r7
   1fbce:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1fbd2:	4628      	mov	r0, r5
   1fbd4:	f000 f9cc 	bl	1ff70 <z_setup_new_thread>
   1fbd8:	7b6a      	ldrb	r2, [r5, #13]
   1fbda:	4606      	mov	r6, r0
   1fbdc:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1fbe0:	4628      	mov	r0, r5
   1fbe2:	736a      	strb	r2, [r5, #13]
   1fbe4:	f001 fb9e 	bl	21324 <z_ready_thread>
	z_init_cpu(0);
   1fbe8:	4620      	mov	r0, r4
   1fbea:	f7ff ff6d 	bl	1fac8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1fbee:	463a      	mov	r2, r7
   1fbf0:	4631      	mov	r1, r6
   1fbf2:	4628      	mov	r0, r5
   1fbf4:	f7f3 fa8e 	bl	13114 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fbf8:	20005800 	.word	0x20005800
   1fbfc:	e000ed00 	.word	0xe000ed00
   1fc00:	20002500 	.word	0x20002500
   1fc04:	0001fa7d 	.word	0x0001fa7d
   1fc08:	20001eb0 	.word	0x20001eb0
   1fc0c:	0002aff6 	.word	0x0002aff6
   1fc10:	20005980 	.word	0x20005980

0001fc14 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1fc14:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fc16:	4c0b      	ldr	r4, [pc, #44]	; (1fc44 <statics_init+0x30>)
   1fc18:	4d0b      	ldr	r5, [pc, #44]	; (1fc48 <statics_init+0x34>)
   1fc1a:	42ac      	cmp	r4, r5
   1fc1c:	d90f      	bls.n	1fc3e <statics_init+0x2a>
   1fc1e:	490b      	ldr	r1, [pc, #44]	; (1fc4c <statics_init+0x38>)
   1fc20:	480b      	ldr	r0, [pc, #44]	; (1fc50 <statics_init+0x3c>)
   1fc22:	2218      	movs	r2, #24
   1fc24:	f003 fee0 	bl	239e8 <assert_print>
   1fc28:	4808      	ldr	r0, [pc, #32]	; (1fc4c <statics_init+0x38>)
   1fc2a:	2118      	movs	r1, #24
   1fc2c:	f003 fed5 	bl	239da <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1fc30:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1fc34:	4620      	mov	r0, r4
   1fc36:	f007 f871 	bl	26d1c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fc3a:	3418      	adds	r4, #24
   1fc3c:	e7ed      	b.n	1fc1a <statics_init+0x6>
   1fc3e:	d3f7      	bcc.n	1fc30 <statics_init+0x1c>
		}
	}
	return 0;
}
   1fc40:	2000      	movs	r0, #0
   1fc42:	bd38      	pop	{r3, r4, r5, pc}
   1fc44:	200008e8 	.word	0x200008e8
   1fc48:	200008e8 	.word	0x200008e8
   1fc4c:	0002affe 	.word	0x0002affe
   1fc50:	000280bd 	.word	0x000280bd

0001fc54 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1fc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc58:	b085      	sub	sp, #20
   1fc5a:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1fc5e:	4680      	mov	r8, r0
   1fc60:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fc62:	4648      	mov	r0, r9
   1fc64:	4659      	mov	r1, fp
{
   1fc66:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fc68:	f007 f976 	bl	26f58 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1fc6c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1fc70:	bf08      	it	eq
   1fc72:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fc76:	4605      	mov	r5, r0
   1fc78:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1fc7a:	bf04      	itt	eq
   1fc7c:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   1fc80:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fc84:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   1fc88:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fc8c:	f3ef 8411 	mrs	r4, BASEPRI
   1fc90:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc98:	4630      	mov	r0, r6
   1fc9a:	f000 fa6b 	bl	20174 <z_spin_lock_valid>
   1fc9e:	b938      	cbnz	r0, 1fcb0 <k_heap_aligned_alloc+0x5c>
   1fca0:	492c      	ldr	r1, [pc, #176]	; (1fd54 <k_heap_aligned_alloc+0x100>)
   1fca2:	482d      	ldr	r0, [pc, #180]	; (1fd58 <k_heap_aligned_alloc+0x104>)
   1fca4:	2294      	movs	r2, #148	; 0x94
   1fca6:	f003 fe9f 	bl	239e8 <assert_print>
   1fcaa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fcac:	4829      	ldr	r0, [pc, #164]	; (1fd54 <k_heap_aligned_alloc+0x100>)
   1fcae:	e027      	b.n	1fd00 <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   1fcb0:	4630      	mov	r0, r6
   1fcb2:	f000 fa7d 	bl	201b0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fcb6:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1fcba:	b113      	cbz	r3, 1fcc2 <k_heap_aligned_alloc+0x6e>
   1fcbc:	ea5b 0909 	orrs.w	r9, fp, r9
   1fcc0:	d117      	bne.n	1fcf2 <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fcc2:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1fcc6:	9903      	ldr	r1, [sp, #12]
   1fcc8:	4652      	mov	r2, sl
   1fcca:	4640      	mov	r0, r8
   1fccc:	f7f1 f986 	bl	10fdc <sys_heap_aligned_alloc>
   1fcd0:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1fcd2:	f002 fcad 	bl	22630 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1fcd6:	f1b9 0f00 	cmp.w	r9, #0
   1fcda:	d013      	beq.n	1fd04 <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fcdc:	4630      	mov	r0, r6
   1fcde:	f000 fa57 	bl	20190 <z_spin_unlock_valid>
   1fce2:	bb70      	cbnz	r0, 1fd42 <k_heap_aligned_alloc+0xee>
   1fce4:	491b      	ldr	r1, [pc, #108]	; (1fd54 <k_heap_aligned_alloc+0x100>)
   1fce6:	481c      	ldr	r0, [pc, #112]	; (1fd58 <k_heap_aligned_alloc+0x104>)
   1fce8:	22c2      	movs	r2, #194	; 0xc2
   1fcea:	f003 fe7d 	bl	239e8 <assert_print>
   1fcee:	21c2      	movs	r1, #194	; 0xc2
   1fcf0:	e7dc      	b.n	1fcac <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1fcf2:	491a      	ldr	r1, [pc, #104]	; (1fd5c <k_heap_aligned_alloc+0x108>)
   1fcf4:	4818      	ldr	r0, [pc, #96]	; (1fd58 <k_heap_aligned_alloc+0x104>)
   1fcf6:	224c      	movs	r2, #76	; 0x4c
   1fcf8:	f003 fe76 	bl	239e8 <assert_print>
   1fcfc:	4817      	ldr	r0, [pc, #92]	; (1fd5c <k_heap_aligned_alloc+0x108>)
   1fcfe:	214c      	movs	r1, #76	; 0x4c
   1fd00:	f003 fe6b 	bl	239da <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1fd04:	1a28      	subs	r0, r5, r0
   1fd06:	eb67 0101 	sbc.w	r1, r7, r1
   1fd0a:	2801      	cmp	r0, #1
   1fd0c:	f171 0300 	sbcs.w	r3, r1, #0
   1fd10:	dbe4      	blt.n	1fcdc <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fd12:	e9cd 0100 	strd	r0, r1, [sp]
   1fd16:	465a      	mov	r2, fp
   1fd18:	4621      	mov	r1, r4
   1fd1a:	4630      	mov	r0, r6
   1fd1c:	f001 fdbe 	bl	2189c <z_pend_curr>
   1fd20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd24:	f3ef 8411 	mrs	r4, BASEPRI
   1fd28:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd30:	4630      	mov	r0, r6
   1fd32:	f000 fa1f 	bl	20174 <z_spin_lock_valid>
   1fd36:	2800      	cmp	r0, #0
   1fd38:	d0b2      	beq.n	1fca0 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1fd3a:	4630      	mov	r0, r6
   1fd3c:	f000 fa38 	bl	201b0 <z_spin_lock_set_owner>
	return k;
   1fd40:	e7c1      	b.n	1fcc6 <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   1fd42:	f384 8811 	msr	BASEPRI, r4
   1fd46:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1fd4a:	4648      	mov	r0, r9
   1fd4c:	b005      	add	sp, #20
   1fd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd52:	bf00      	nop
   1fd54:	000280f7 	.word	0x000280f7
   1fd58:	000280bd 	.word	0x000280bd
   1fd5c:	0002affe 	.word	0x0002affe

0001fd60 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1fd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd62:	4604      	mov	r4, r0
   1fd64:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fd66:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   1fd6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd6e:	f3ef 8711 	mrs	r7, BASEPRI
   1fd72:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd7a:	4628      	mov	r0, r5
   1fd7c:	f000 f9fa 	bl	20174 <z_spin_lock_valid>
   1fd80:	b940      	cbnz	r0, 1fd94 <k_heap_free+0x34>
   1fd82:	4915      	ldr	r1, [pc, #84]	; (1fdd8 <k_heap_free+0x78>)
   1fd84:	4815      	ldr	r0, [pc, #84]	; (1fddc <k_heap_free+0x7c>)
   1fd86:	2294      	movs	r2, #148	; 0x94
   1fd88:	f003 fe2e 	bl	239e8 <assert_print>
   1fd8c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd8e:	4812      	ldr	r0, [pc, #72]	; (1fdd8 <k_heap_free+0x78>)
   1fd90:	f003 fe23 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   1fd94:	4628      	mov	r0, r5
   1fd96:	f000 fa0b 	bl	201b0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1fd9a:	4620      	mov	r0, r4
   1fd9c:	4631      	mov	r1, r6
   1fd9e:	f7f1 f8eb 	bl	10f78 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1fda2:	f104 000c 	add.w	r0, r4, #12
   1fda6:	f007 f8bd 	bl	26f24 <z_unpend_all>
   1fdaa:	b128      	cbz	r0, 1fdb8 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   1fdac:	4639      	mov	r1, r7
   1fdae:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1fdb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1fdb4:	f001 bb1e 	b.w	213f4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fdb8:	4628      	mov	r0, r5
   1fdba:	f000 f9e9 	bl	20190 <z_spin_unlock_valid>
   1fdbe:	b930      	cbnz	r0, 1fdce <k_heap_free+0x6e>
   1fdc0:	4905      	ldr	r1, [pc, #20]	; (1fdd8 <k_heap_free+0x78>)
   1fdc2:	4806      	ldr	r0, [pc, #24]	; (1fddc <k_heap_free+0x7c>)
   1fdc4:	22c2      	movs	r2, #194	; 0xc2
   1fdc6:	f003 fe0f 	bl	239e8 <assert_print>
   1fdca:	21c2      	movs	r1, #194	; 0xc2
   1fdcc:	e7df      	b.n	1fd8e <k_heap_free+0x2e>
	__asm__ volatile(
   1fdce:	f387 8811 	msr	BASEPRI, r7
   1fdd2:	f3bf 8f6f 	isb	sy
}
   1fdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fdd8:	000280f7 	.word	0x000280f7
   1fddc:	000280bd 	.word	0x000280bd

0001fde0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1fde0:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fde2:	4c0b      	ldr	r4, [pc, #44]	; (1fe10 <init_mem_slab_module+0x30>)
   1fde4:	4d0b      	ldr	r5, [pc, #44]	; (1fe14 <init_mem_slab_module+0x34>)
	int rc = 0;
   1fde6:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fde8:	42ac      	cmp	r4, r5
   1fdea:	d90f      	bls.n	1fe0c <init_mem_slab_module+0x2c>
   1fdec:	490a      	ldr	r1, [pc, #40]	; (1fe18 <init_mem_slab_module+0x38>)
   1fdee:	480b      	ldr	r0, [pc, #44]	; (1fe1c <init_mem_slab_module+0x3c>)
   1fdf0:	223d      	movs	r2, #61	; 0x3d
   1fdf2:	f003 fdf9 	bl	239e8 <assert_print>
   1fdf6:	4808      	ldr	r0, [pc, #32]	; (1fe18 <init_mem_slab_module+0x38>)
   1fdf8:	213d      	movs	r1, #61	; 0x3d
   1fdfa:	f003 fdee 	bl	239da <assert_post_action>
		rc = create_free_list(slab);
   1fdfe:	4620      	mov	r0, r4
   1fe00:	f006 ff94 	bl	26d2c <create_free_list>
		if (rc < 0) {
   1fe04:	2800      	cmp	r0, #0
   1fe06:	db02      	blt.n	1fe0e <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fe08:	3420      	adds	r4, #32
   1fe0a:	e7ed      	b.n	1fde8 <init_mem_slab_module+0x8>
   1fe0c:	d3f7      	bcc.n	1fdfe <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   1fe0e:	bd38      	pop	{r3, r4, r5, pc}
   1fe10:	20000888 	.word	0x20000888
   1fe14:	200008e8 	.word	0x200008e8
   1fe18:	0002b020 	.word	0x0002b020
   1fe1c:	000280bd 	.word	0x000280bd

0001fe20 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1fe20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fe24:	4604      	mov	r4, r0
   1fe26:	460d      	mov	r5, r1
   1fe28:	4690      	mov	r8, r2
   1fe2a:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1fe2c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1fe30:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe34:	f3ef 8911 	mrs	r9, BASEPRI
   1fe38:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe40:	4630      	mov	r0, r6
   1fe42:	f000 f997 	bl	20174 <z_spin_lock_valid>
   1fe46:	b940      	cbnz	r0, 1fe5a <k_mem_slab_alloc+0x3a>
   1fe48:	491e      	ldr	r1, [pc, #120]	; (1fec4 <k_mem_slab_alloc+0xa4>)
   1fe4a:	481f      	ldr	r0, [pc, #124]	; (1fec8 <k_mem_slab_alloc+0xa8>)
   1fe4c:	2294      	movs	r2, #148	; 0x94
   1fe4e:	f003 fdcb 	bl	239e8 <assert_print>
   1fe52:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe54:	481b      	ldr	r0, [pc, #108]	; (1fec4 <k_mem_slab_alloc+0xa4>)
   1fe56:	f003 fdc0 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   1fe5a:	4630      	mov	r0, r6
   1fe5c:	f000 f9a8 	bl	201b0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1fe60:	69a3      	ldr	r3, [r4, #24]
   1fe62:	b18b      	cbz	r3, 1fe88 <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   1fe64:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1fe66:	681b      	ldr	r3, [r3, #0]
   1fe68:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1fe6a:	69e3      	ldr	r3, [r4, #28]
   1fe6c:	3301      	adds	r3, #1
   1fe6e:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1fe70:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe72:	4630      	mov	r0, r6
   1fe74:	f000 f98c 	bl	20190 <z_spin_unlock_valid>
   1fe78:	b9f0      	cbnz	r0, 1feb8 <k_mem_slab_alloc+0x98>
   1fe7a:	4912      	ldr	r1, [pc, #72]	; (1fec4 <k_mem_slab_alloc+0xa4>)
   1fe7c:	4812      	ldr	r0, [pc, #72]	; (1fec8 <k_mem_slab_alloc+0xa8>)
   1fe7e:	22c2      	movs	r2, #194	; 0xc2
   1fe80:	f003 fdb2 	bl	239e8 <assert_print>
   1fe84:	21c2      	movs	r1, #194	; 0xc2
   1fe86:	e7e5      	b.n	1fe54 <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1fe88:	ea58 0207 	orrs.w	r2, r8, r7
   1fe8c:	d103      	bne.n	1fe96 <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   1fe8e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1fe90:	f06f 040b 	mvn.w	r4, #11
   1fe94:	e7ed      	b.n	1fe72 <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1fe96:	4622      	mov	r2, r4
   1fe98:	e9cd 8700 	strd	r8, r7, [sp]
   1fe9c:	4649      	mov	r1, r9
   1fe9e:	4630      	mov	r0, r6
   1fea0:	f001 fcfc 	bl	2189c <z_pend_curr>
		if (result == 0) {
   1fea4:	4604      	mov	r4, r0
   1fea6:	b918      	cbnz	r0, 1feb0 <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   1fea8:	4b08      	ldr	r3, [pc, #32]	; (1fecc <k_mem_slab_alloc+0xac>)
   1feaa:	689b      	ldr	r3, [r3, #8]
   1feac:	695b      	ldr	r3, [r3, #20]
   1feae:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1feb0:	4620      	mov	r0, r4
   1feb2:	b003      	add	sp, #12
   1feb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1feb8:	f389 8811 	msr	BASEPRI, r9
   1febc:	f3bf 8f6f 	isb	sy
	return result;
   1fec0:	e7f6      	b.n	1feb0 <k_mem_slab_alloc+0x90>
   1fec2:	bf00      	nop
   1fec4:	000280f7 	.word	0x000280f7
   1fec8:	000280bd 	.word	0x000280bd
   1fecc:	20002500 	.word	0x20002500

0001fed0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1fed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fed4:	4604      	mov	r4, r0
   1fed6:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1fed8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1fedc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fee0:	f3ef 8711 	mrs	r7, BASEPRI
   1fee4:	f383 8812 	msr	BASEPRI_MAX, r3
   1fee8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1feec:	4630      	mov	r0, r6
   1feee:	f000 f941 	bl	20174 <z_spin_lock_valid>
   1fef2:	b940      	cbnz	r0, 1ff06 <k_mem_slab_free+0x36>
   1fef4:	491c      	ldr	r1, [pc, #112]	; (1ff68 <k_mem_slab_free+0x98>)
   1fef6:	481d      	ldr	r0, [pc, #116]	; (1ff6c <k_mem_slab_free+0x9c>)
   1fef8:	2294      	movs	r2, #148	; 0x94
   1fefa:	f003 fd75 	bl	239e8 <assert_print>
   1fefe:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff00:	4819      	ldr	r0, [pc, #100]	; (1ff68 <k_mem_slab_free+0x98>)
   1ff02:	f003 fd6a 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   1ff06:	4630      	mov	r0, r6
   1ff08:	f000 f952 	bl	201b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ff0c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1ff10:	f1b8 0f00 	cmp.w	r8, #0
   1ff14:	d10f      	bne.n	1ff36 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ff16:	4620      	mov	r0, r4
   1ff18:	f001 fec2 	bl	21ca0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1ff1c:	b158      	cbz	r0, 1ff36 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ff1e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ff20:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ff22:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1ff26:	f001 f9fd 	bl	21324 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1ff2a:	4639      	mov	r1, r7
   1ff2c:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1ff2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1ff32:	f001 ba5f 	b.w	213f4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1ff36:	682b      	ldr	r3, [r5, #0]
   1ff38:	69a2      	ldr	r2, [r4, #24]
   1ff3a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1ff3c:	682b      	ldr	r3, [r5, #0]
   1ff3e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1ff40:	69e3      	ldr	r3, [r4, #28]
   1ff42:	3b01      	subs	r3, #1
   1ff44:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff46:	4630      	mov	r0, r6
   1ff48:	f000 f922 	bl	20190 <z_spin_unlock_valid>
   1ff4c:	b930      	cbnz	r0, 1ff5c <k_mem_slab_free+0x8c>
   1ff4e:	4906      	ldr	r1, [pc, #24]	; (1ff68 <k_mem_slab_free+0x98>)
   1ff50:	4806      	ldr	r0, [pc, #24]	; (1ff6c <k_mem_slab_free+0x9c>)
   1ff52:	22c2      	movs	r2, #194	; 0xc2
   1ff54:	f003 fd48 	bl	239e8 <assert_print>
   1ff58:	21c2      	movs	r1, #194	; 0xc2
   1ff5a:	e7d1      	b.n	1ff00 <k_mem_slab_free+0x30>
	__asm__ volatile(
   1ff5c:	f387 8811 	msr	BASEPRI, r7
   1ff60:	f3bf 8f6f 	isb	sy
}
   1ff64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ff68:	000280f7 	.word	0x000280f7
   1ff6c:	000280bd 	.word	0x000280bd

0001ff70 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff72:	b085      	sub	sp, #20
   1ff74:	4604      	mov	r4, r0
   1ff76:	980d      	ldr	r0, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1ff78:	280f      	cmp	r0, #15
   1ff7a:	d12e      	bne.n	1ffda <z_setup_new_thread+0x6a>
   1ff7c:	4d1e      	ldr	r5, [pc, #120]	; (1fff8 <z_setup_new_thread+0x88>)
   1ff7e:	42ab      	cmp	r3, r5
   1ff80:	d12f      	bne.n	1ffe2 <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1ff82:	f104 0558 	add.w	r5, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1ff86:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1ff8a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1ff8c:	7325      	strb	r5, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ff8e:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   1ff90:	2504      	movs	r5, #4
   1ff92:	7365      	strb	r5, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ff94:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1ff98:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   1ff9c:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   1ffa0:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ffa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->prio = priority;
   1ffa4:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1ffa6:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   1ffaa:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   1ffac:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   1ffae:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ffb0:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ffb4:	9202      	str	r2, [sp, #8]
   1ffb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ffb8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1ffba:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ffbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ffbe:	9200      	str	r2, [sp, #0]
   1ffc0:	4620      	mov	r0, r4
   1ffc2:	463a      	mov	r2, r7
   1ffc4:	f7f3 f874 	bl	130b0 <arch_new_thread>
	if (!_current) {
   1ffc8:	4b0c      	ldr	r3, [pc, #48]	; (1fffc <z_setup_new_thread+0x8c>)
	new_thread->init_data = NULL;
   1ffca:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   1ffcc:	689b      	ldr	r3, [r3, #8]
   1ffce:	b103      	cbz	r3, 1ffd2 <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   1ffd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1ffd2:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ffd4:	4638      	mov	r0, r7
   1ffd6:	b005      	add	sp, #20
   1ffd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1ffda:	f100 0510 	add.w	r5, r0, #16
   1ffde:	2d1e      	cmp	r5, #30
   1ffe0:	d9cf      	bls.n	1ff82 <z_setup_new_thread+0x12>
   1ffe2:	4907      	ldr	r1, [pc, #28]	; (20000 <z_setup_new_thread+0x90>)
   1ffe4:	4807      	ldr	r0, [pc, #28]	; (20004 <z_setup_new_thread+0x94>)
   1ffe6:	f44f 7206 	mov.w	r2, #536	; 0x218
   1ffea:	f003 fcfd 	bl	239e8 <assert_print>
   1ffee:	4804      	ldr	r0, [pc, #16]	; (20000 <z_setup_new_thread+0x90>)
   1fff0:	f44f 7106 	mov.w	r1, #536	; 0x218
   1fff4:	f003 fcf1 	bl	239da <assert_post_action>
   1fff8:	000201c1 	.word	0x000201c1
   1fffc:	20002500 	.word	0x20002500
   20000:	0002b045 	.word	0x0002b045
   20004:	000280bd 	.word	0x000280bd

00020008 <z_impl_k_thread_create>:
{
   20008:	b5f0      	push	{r4, r5, r6, r7, lr}
   2000a:	b087      	sub	sp, #28
   2000c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   20010:	4604      	mov	r4, r0
   20012:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   20016:	b155      	cbz	r5, 2002e <z_impl_k_thread_create+0x26>
   20018:	4917      	ldr	r1, [pc, #92]	; (20078 <z_impl_k_thread_create+0x70>)
   2001a:	4818      	ldr	r0, [pc, #96]	; (2007c <z_impl_k_thread_create+0x74>)
   2001c:	f240 2287 	movw	r2, #647	; 0x287
   20020:	f003 fce2 	bl	239e8 <assert_print>
   20024:	4814      	ldr	r0, [pc, #80]	; (20078 <z_impl_k_thread_create+0x70>)
   20026:	f240 2187 	movw	r1, #647	; 0x287
   2002a:	f003 fcd6 	bl	239da <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2002e:	9505      	str	r5, [sp, #20]
   20030:	9d10      	ldr	r5, [sp, #64]	; 0x40
   20032:	9504      	str	r5, [sp, #16]
   20034:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   20036:	9503      	str	r5, [sp, #12]
   20038:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2003a:	9502      	str	r5, [sp, #8]
   2003c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2003e:	9501      	str	r5, [sp, #4]
   20040:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20042:	9500      	str	r5, [sp, #0]
   20044:	f7ff ff94 	bl	1ff70 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20048:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   2004c:	bf08      	it	eq
   2004e:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   20052:	d005      	beq.n	20060 <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20054:	ea56 0307 	orrs.w	r3, r6, r7
   20058:	d105      	bne.n	20066 <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   2005a:	4620      	mov	r0, r4
   2005c:	f001 f9fe 	bl	2145c <z_sched_start>
}
   20060:	4620      	mov	r0, r4
   20062:	b007      	add	sp, #28
   20064:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   20066:	4906      	ldr	r1, [pc, #24]	; (20080 <z_impl_k_thread_create+0x78>)
   20068:	463a      	mov	r2, r7
   2006a:	4633      	mov	r3, r6
   2006c:	f104 0018 	add.w	r0, r4, #24
   20070:	f002 f8f8 	bl	22264 <z_add_timeout>
   20074:	e7f4      	b.n	20060 <z_impl_k_thread_create+0x58>
   20076:	bf00      	nop
   20078:	0002b045 	.word	0x0002b045
   2007c:	000280bd 	.word	0x000280bd
   20080:	00021ba1 	.word	0x00021ba1

00020084 <z_init_static_threads>:
{
   20084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20088:	4c35      	ldr	r4, [pc, #212]	; (20160 <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2008a:	4d36      	ldr	r5, [pc, #216]	; (20164 <z_init_static_threads+0xe0>)
{
   2008c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2008e:	42ac      	cmp	r4, r5
   20090:	4626      	mov	r6, r4
   20092:	d926      	bls.n	200e2 <z_init_static_threads+0x5e>
   20094:	4934      	ldr	r1, [pc, #208]	; (20168 <z_init_static_threads+0xe4>)
   20096:	4835      	ldr	r0, [pc, #212]	; (2016c <z_init_static_threads+0xe8>)
   20098:	f240 22ee 	movw	r2, #750	; 0x2ee
   2009c:	f003 fca4 	bl	239e8 <assert_print>
   200a0:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   200a4:	4830      	ldr	r0, [pc, #192]	; (20168 <z_init_static_threads+0xe4>)
   200a6:	f003 fc98 	bl	239da <assert_post_action>
		z_setup_new_thread(
   200aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   200ae:	9305      	str	r3, [sp, #20]
   200b0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   200b4:	9304      	str	r3, [sp, #16]
   200b6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   200ba:	9303      	str	r3, [sp, #12]
   200bc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   200c0:	9302      	str	r3, [sp, #8]
   200c2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   200c6:	9301      	str	r3, [sp, #4]
   200c8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   200cc:	9300      	str	r3, [sp, #0]
   200ce:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   200d2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   200d6:	f7ff ff4b 	bl	1ff70 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   200da:	f854 3c30 	ldr.w	r3, [r4, #-48]
   200de:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   200e0:	e7d5      	b.n	2008e <z_init_static_threads+0xa>
   200e2:	42ae      	cmp	r6, r5
   200e4:	f104 0430 	add.w	r4, r4, #48	; 0x30
   200e8:	d3df      	bcc.n	200aa <z_init_static_threads+0x26>
	k_sched_lock();
   200ea:	f001 f9f7 	bl	214dc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   200ee:	4c1c      	ldr	r4, [pc, #112]	; (20160 <z_init_static_threads+0xdc>)
   200f0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 20170 <z_init_static_threads+0xec>
   200f4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   200f8:	f240 37e7 	movw	r7, #999	; 0x3e7
   200fc:	42ac      	cmp	r4, r5
   200fe:	d928      	bls.n	20152 <z_init_static_threads+0xce>
   20100:	4919      	ldr	r1, [pc, #100]	; (20168 <z_init_static_threads+0xe4>)
   20102:	481a      	ldr	r0, [pc, #104]	; (2016c <z_init_static_threads+0xe8>)
   20104:	f240 320d 	movw	r2, #781	; 0x30d
   20108:	f003 fc6e 	bl	239e8 <assert_print>
   2010c:	f240 310d 	movw	r1, #781	; 0x30d
   20110:	e7c8      	b.n	200a4 <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20112:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20114:	1c5a      	adds	r2, r3, #1
   20116:	d00d      	beq.n	20134 <z_init_static_threads+0xb0>
					    K_MSEC(thread_data->init_delay));
   20118:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2011c:	2100      	movs	r1, #0
   2011e:	4638      	mov	r0, r7
   20120:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20124:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   20128:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2012c:	d104      	bne.n	20138 <z_init_static_threads+0xb4>
	z_sched_start(thread);
   2012e:	4640      	mov	r0, r8
   20130:	f001 f994 	bl	2145c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20134:	3430      	adds	r4, #48	; 0x30
   20136:	e7e1      	b.n	200fc <z_init_static_threads+0x78>
   20138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2013c:	2300      	movs	r3, #0
   2013e:	f7df ffcf 	bl	e0 <__aeabi_uldivmod>
   20142:	4602      	mov	r2, r0
   20144:	460b      	mov	r3, r1
   20146:	f108 0018 	add.w	r0, r8, #24
   2014a:	4649      	mov	r1, r9
   2014c:	f002 f88a 	bl	22264 <z_add_timeout>
   20150:	e7f0      	b.n	20134 <z_init_static_threads+0xb0>
   20152:	d3de      	bcc.n	20112 <z_init_static_threads+0x8e>
}
   20154:	b007      	add	sp, #28
   20156:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2015a:	f001 ba0b 	b.w	21574 <k_sched_unlock>
   2015e:	bf00      	nop
   20160:	000273b0 	.word	0x000273b0
   20164:	000273b0 	.word	0x000273b0
   20168:	0002b045 	.word	0x0002b045
   2016c:	000280bd 	.word	0x000280bd
   20170:	00021ba1 	.word	0x00021ba1

00020174 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   20174:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   20176:	b138      	cbz	r0, 20188 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   20178:	4b04      	ldr	r3, [pc, #16]	; (2018c <z_spin_lock_valid+0x18>)
   2017a:	7d1b      	ldrb	r3, [r3, #20]
   2017c:	f000 0003 	and.w	r0, r0, #3
   20180:	1ac0      	subs	r0, r0, r3
   20182:	bf18      	it	ne
   20184:	2001      	movne	r0, #1
   20186:	4770      	bx	lr
			return false;
		}
	}
	return true;
   20188:	2001      	movs	r0, #1
}
   2018a:	4770      	bx	lr
   2018c:	20002500 	.word	0x20002500

00020190 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20190:	4a06      	ldr	r2, [pc, #24]	; (201ac <z_spin_unlock_valid+0x1c>)
   20192:	7d11      	ldrb	r1, [r2, #20]
   20194:	6892      	ldr	r2, [r2, #8]
   20196:	430a      	orrs	r2, r1
   20198:	6801      	ldr	r1, [r0, #0]
{
   2019a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2019c:	4291      	cmp	r1, r2
   2019e:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   201a2:	bf04      	itt	eq
   201a4:	6018      	streq	r0, [r3, #0]
	return true;
   201a6:	2001      	moveq	r0, #1
}
   201a8:	4770      	bx	lr
   201aa:	bf00      	nop
   201ac:	20002500 	.word	0x20002500

000201b0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   201b0:	4b02      	ldr	r3, [pc, #8]	; (201bc <z_spin_lock_set_owner+0xc>)
   201b2:	7d1a      	ldrb	r2, [r3, #20]
   201b4:	689b      	ldr	r3, [r3, #8]
   201b6:	4313      	orrs	r3, r2
   201b8:	6003      	str	r3, [r0, #0]
}
   201ba:	4770      	bx	lr
   201bc:	20002500 	.word	0x20002500

000201c0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   201c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   201c2:	4c12      	ldr	r4, [pc, #72]	; (2020c <idle+0x4c>)
   201c4:	68a3      	ldr	r3, [r4, #8]
   201c6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   201ca:	2b00      	cmp	r3, #0
   201cc:	db10      	blt.n	201f0 <idle+0x30>
	return !z_sys_post_kernel;
   201ce:	4d10      	ldr	r5, [pc, #64]	; (20210 <idle+0x50>)
	__asm__ volatile(
   201d0:	f04f 0240 	mov.w	r2, #64	; 0x40
   201d4:	f3ef 8311 	mrs	r3, BASEPRI
   201d8:	f382 8812 	msr	BASEPRI_MAX, r2
   201dc:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   201e0:	f002 f926 	bl	22430 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   201e4:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   201e6:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   201e8:	b95b      	cbnz	r3, 20202 <idle+0x42>
	arch_cpu_idle();
   201ea:	f7f2 fe3f 	bl	12e6c <arch_cpu_idle>
}
   201ee:	e7ef      	b.n	201d0 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   201f0:	4908      	ldr	r1, [pc, #32]	; (20214 <idle+0x54>)
   201f2:	4809      	ldr	r0, [pc, #36]	; (20218 <idle+0x58>)
   201f4:	2227      	movs	r2, #39	; 0x27
   201f6:	f003 fbf7 	bl	239e8 <assert_print>
   201fa:	4806      	ldr	r0, [pc, #24]	; (20214 <idle+0x54>)
   201fc:	2127      	movs	r1, #39	; 0x27
   201fe:	f003 fbec 	bl	239da <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20202:	f7f2 fc6d 	bl	12ae0 <pm_system_suspend>
   20206:	2800      	cmp	r0, #0
   20208:	d1e2      	bne.n	201d0 <idle+0x10>
   2020a:	e7ee      	b.n	201ea <idle+0x2a>
   2020c:	20002500 	.word	0x20002500
   20210:	200032b2 	.word	0x200032b2
   20214:	0002b068 	.word	0x0002b068
   20218:	000280bd 	.word	0x000280bd

0002021c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2021c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20220:	4604      	mov	r4, r0
   20222:	4617      	mov	r7, r2
   20224:	461e      	mov	r6, r3
   20226:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2022a:	b145      	cbz	r5, 2023e <z_impl_k_mutex_lock+0x22>
   2022c:	4951      	ldr	r1, [pc, #324]	; (20374 <z_impl_k_mutex_lock+0x158>)
   2022e:	4852      	ldr	r0, [pc, #328]	; (20378 <z_impl_k_mutex_lock+0x15c>)
   20230:	2265      	movs	r2, #101	; 0x65
   20232:	f003 fbd9 	bl	239e8 <assert_print>
   20236:	484f      	ldr	r0, [pc, #316]	; (20374 <z_impl_k_mutex_lock+0x158>)
   20238:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2023a:	f003 fbce 	bl	239da <assert_post_action>
   2023e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20242:	f3ef 8811 	mrs	r8, BASEPRI
   20246:	f383 8812 	msr	BASEPRI_MAX, r3
   2024a:	f3bf 8f6f 	isb	sy
   2024e:	484b      	ldr	r0, [pc, #300]	; (2037c <z_impl_k_mutex_lock+0x160>)
   20250:	f7ff ff90 	bl	20174 <z_spin_lock_valid>
   20254:	b938      	cbnz	r0, 20266 <z_impl_k_mutex_lock+0x4a>
   20256:	494a      	ldr	r1, [pc, #296]	; (20380 <z_impl_k_mutex_lock+0x164>)
   20258:	4847      	ldr	r0, [pc, #284]	; (20378 <z_impl_k_mutex_lock+0x15c>)
   2025a:	2294      	movs	r2, #148	; 0x94
   2025c:	f003 fbc4 	bl	239e8 <assert_print>
   20260:	2194      	movs	r1, #148	; 0x94
   20262:	4847      	ldr	r0, [pc, #284]	; (20380 <z_impl_k_mutex_lock+0x164>)
   20264:	e7e9      	b.n	2023a <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   20266:	4845      	ldr	r0, [pc, #276]	; (2037c <z_impl_k_mutex_lock+0x160>)
   20268:	f7ff ffa2 	bl	201b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2026c:	68e3      	ldr	r3, [r4, #12]
   2026e:	4a45      	ldr	r2, [pc, #276]	; (20384 <z_impl_k_mutex_lock+0x168>)
   20270:	b19b      	cbz	r3, 2029a <z_impl_k_mutex_lock+0x7e>
   20272:	68a0      	ldr	r0, [r4, #8]
   20274:	6891      	ldr	r1, [r2, #8]
   20276:	4288      	cmp	r0, r1
   20278:	d022      	beq.n	202c0 <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2027a:	ea57 0306 	orrs.w	r3, r7, r6
   2027e:	d127      	bne.n	202d0 <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20280:	483e      	ldr	r0, [pc, #248]	; (2037c <z_impl_k_mutex_lock+0x160>)
   20282:	f7ff ff85 	bl	20190 <z_spin_unlock_valid>
   20286:	b1a0      	cbz	r0, 202b2 <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   20288:	f388 8811 	msr	BASEPRI, r8
   2028c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   20290:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   20294:	b002      	add	sp, #8
   20296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2029a:	6891      	ldr	r1, [r2, #8]
   2029c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   202a0:	4836      	ldr	r0, [pc, #216]	; (2037c <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   202a2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   202a4:	3301      	adds	r3, #1
   202a6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   202a8:	6893      	ldr	r3, [r2, #8]
   202aa:	60a3      	str	r3, [r4, #8]
   202ac:	f7ff ff70 	bl	20190 <z_spin_unlock_valid>
   202b0:	b940      	cbnz	r0, 202c4 <z_impl_k_mutex_lock+0xa8>
   202b2:	4933      	ldr	r1, [pc, #204]	; (20380 <z_impl_k_mutex_lock+0x164>)
   202b4:	4830      	ldr	r0, [pc, #192]	; (20378 <z_impl_k_mutex_lock+0x15c>)
   202b6:	22c2      	movs	r2, #194	; 0xc2
   202b8:	f003 fb96 	bl	239e8 <assert_print>
   202bc:	21c2      	movs	r1, #194	; 0xc2
   202be:	e7d0      	b.n	20262 <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   202c0:	6921      	ldr	r1, [r4, #16]
   202c2:	e7ed      	b.n	202a0 <z_impl_k_mutex_lock+0x84>
   202c4:	f388 8811 	msr	BASEPRI, r8
   202c8:	f3bf 8f6f 	isb	sy
		return 0;
   202cc:	2000      	movs	r0, #0
   202ce:	e7e1      	b.n	20294 <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   202d0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   202d4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   202d8:	4299      	cmp	r1, r3
   202da:	bfa8      	it	ge
   202dc:	4619      	movge	r1, r3
   202de:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   202e2:	4291      	cmp	r1, r2
   202e4:	bfb8      	it	lt
   202e6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   202e8:	428b      	cmp	r3, r1
   202ea:	dd02      	ble.n	202f2 <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   202ec:	f006 fd48 	bl	26d80 <adjust_owner_prio.isra.0>
   202f0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   202f2:	e9cd 7600 	strd	r7, r6, [sp]
   202f6:	4821      	ldr	r0, [pc, #132]	; (2037c <z_impl_k_mutex_lock+0x160>)
   202f8:	4622      	mov	r2, r4
   202fa:	4641      	mov	r1, r8
   202fc:	f001 face 	bl	2189c <z_pend_curr>
	if (got_mutex == 0) {
   20300:	2800      	cmp	r0, #0
   20302:	d0e3      	beq.n	202cc <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   20304:	f04f 0340 	mov.w	r3, #64	; 0x40
   20308:	f3ef 8611 	mrs	r6, BASEPRI
   2030c:	f383 8812 	msr	BASEPRI_MAX, r3
   20310:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20314:	4819      	ldr	r0, [pc, #100]	; (2037c <z_impl_k_mutex_lock+0x160>)
   20316:	f7ff ff2d 	bl	20174 <z_spin_lock_valid>
   2031a:	2800      	cmp	r0, #0
   2031c:	d09b      	beq.n	20256 <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   2031e:	4817      	ldr	r0, [pc, #92]	; (2037c <z_impl_k_mutex_lock+0x160>)
   20320:	f7ff ff46 	bl	201b0 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   20324:	68a0      	ldr	r0, [r4, #8]
   20326:	b1c0      	cbz	r0, 2035a <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20328:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2032a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2032c:	429c      	cmp	r4, r3
   2032e:	d00a      	beq.n	20346 <z_impl_k_mutex_lock+0x12a>
   20330:	b14b      	cbz	r3, 20346 <z_impl_k_mutex_lock+0x12a>
   20332:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20336:	4299      	cmp	r1, r3
   20338:	bfa8      	it	ge
   2033a:	4619      	movge	r1, r3
   2033c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   20340:	4299      	cmp	r1, r3
   20342:	bfb8      	it	lt
   20344:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   20346:	f006 fd1b 	bl	26d80 <adjust_owner_prio.isra.0>
   2034a:	b130      	cbz	r0, 2035a <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   2034c:	480b      	ldr	r0, [pc, #44]	; (2037c <z_impl_k_mutex_lock+0x160>)
   2034e:	4631      	mov	r1, r6
   20350:	f001 f850 	bl	213f4 <z_reschedule>
	return -EAGAIN;
   20354:	f06f 000a 	mvn.w	r0, #10
   20358:	e79c      	b.n	20294 <z_impl_k_mutex_lock+0x78>
	if (resched) {
   2035a:	2d00      	cmp	r5, #0
   2035c:	d1f6      	bne.n	2034c <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2035e:	4807      	ldr	r0, [pc, #28]	; (2037c <z_impl_k_mutex_lock+0x160>)
   20360:	f7ff ff16 	bl	20190 <z_spin_unlock_valid>
   20364:	2800      	cmp	r0, #0
   20366:	d0a4      	beq.n	202b2 <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   20368:	f386 8811 	msr	BASEPRI, r6
   2036c:	f3bf 8f6f 	isb	sy
   20370:	e7f0      	b.n	20354 <z_impl_k_mutex_lock+0x138>
   20372:	bf00      	nop
   20374:	0002b089 	.word	0x0002b089
   20378:	000280bd 	.word	0x000280bd
   2037c:	20002528 	.word	0x20002528
   20380:	000280f7 	.word	0x000280f7
   20384:	20002500 	.word	0x20002500

00020388 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20388:	b570      	push	{r4, r5, r6, lr}
   2038a:	4604      	mov	r4, r0
   2038c:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20390:	b146      	cbz	r6, 203a4 <z_impl_k_mutex_unlock+0x1c>
   20392:	4930      	ldr	r1, [pc, #192]	; (20454 <z_impl_k_mutex_unlock+0xcc>)
   20394:	4830      	ldr	r0, [pc, #192]	; (20458 <z_impl_k_mutex_unlock+0xd0>)
   20396:	22cd      	movs	r2, #205	; 0xcd
   20398:	f003 fb26 	bl	239e8 <assert_print>
   2039c:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2039e:	482d      	ldr	r0, [pc, #180]	; (20454 <z_impl_k_mutex_unlock+0xcc>)
   203a0:	f003 fb1b 	bl	239da <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   203a4:	6883      	ldr	r3, [r0, #8]
   203a6:	2b00      	cmp	r3, #0
   203a8:	d04e      	beq.n	20448 <z_impl_k_mutex_unlock+0xc0>
	CHECKIF(mutex->owner != _current) {
   203aa:	4a2c      	ldr	r2, [pc, #176]	; (2045c <z_impl_k_mutex_unlock+0xd4>)
   203ac:	6892      	ldr	r2, [r2, #8]
   203ae:	4293      	cmp	r3, r2
   203b0:	d14d      	bne.n	2044e <z_impl_k_mutex_unlock+0xc6>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   203b2:	68c3      	ldr	r3, [r0, #12]
   203b4:	b933      	cbnz	r3, 203c4 <z_impl_k_mutex_unlock+0x3c>
   203b6:	4927      	ldr	r1, [pc, #156]	; (20454 <z_impl_k_mutex_unlock+0xcc>)
   203b8:	4827      	ldr	r0, [pc, #156]	; (20458 <z_impl_k_mutex_unlock+0xd0>)
   203ba:	22e5      	movs	r2, #229	; 0xe5
   203bc:	f003 fb14 	bl	239e8 <assert_print>
   203c0:	21e5      	movs	r1, #229	; 0xe5
   203c2:	e7ec      	b.n	2039e <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   203c4:	2b01      	cmp	r3, #1
   203c6:	d003      	beq.n	203d0 <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   203c8:	3b01      	subs	r3, #1
   203ca:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   203cc:	2000      	movs	r0, #0
}
   203ce:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   203d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   203d4:	f3ef 8511 	mrs	r5, BASEPRI
   203d8:	f383 8812 	msr	BASEPRI_MAX, r3
   203dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203e0:	481f      	ldr	r0, [pc, #124]	; (20460 <z_impl_k_mutex_unlock+0xd8>)
   203e2:	f7ff fec7 	bl	20174 <z_spin_lock_valid>
   203e6:	b938      	cbnz	r0, 203f8 <z_impl_k_mutex_unlock+0x70>
   203e8:	491e      	ldr	r1, [pc, #120]	; (20464 <z_impl_k_mutex_unlock+0xdc>)
   203ea:	481b      	ldr	r0, [pc, #108]	; (20458 <z_impl_k_mutex_unlock+0xd0>)
   203ec:	2294      	movs	r2, #148	; 0x94
   203ee:	f003 fafb 	bl	239e8 <assert_print>
   203f2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   203f4:	481b      	ldr	r0, [pc, #108]	; (20464 <z_impl_k_mutex_unlock+0xdc>)
   203f6:	e7d3      	b.n	203a0 <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   203f8:	4819      	ldr	r0, [pc, #100]	; (20460 <z_impl_k_mutex_unlock+0xd8>)
   203fa:	f7ff fed9 	bl	201b0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   203fe:	6921      	ldr	r1, [r4, #16]
   20400:	68a0      	ldr	r0, [r4, #8]
   20402:	f006 fcbd 	bl	26d80 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20406:	4620      	mov	r0, r4
   20408:	f001 fc4a 	bl	21ca0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2040c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2040e:	b150      	cbz	r0, 20426 <z_impl_k_mutex_unlock+0x9e>
		mutex->owner_orig_prio = new_owner->base.prio;
   20410:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20414:	6122      	str	r2, [r4, #16]
   20416:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   20418:	f000 ff84 	bl	21324 <z_ready_thread>
		z_reschedule(&lock, key);
   2041c:	4810      	ldr	r0, [pc, #64]	; (20460 <z_impl_k_mutex_unlock+0xd8>)
   2041e:	4629      	mov	r1, r5
   20420:	f000 ffe8 	bl	213f4 <z_reschedule>
   20424:	e7d2      	b.n	203cc <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   20426:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20428:	480d      	ldr	r0, [pc, #52]	; (20460 <z_impl_k_mutex_unlock+0xd8>)
   2042a:	f7ff feb1 	bl	20190 <z_spin_unlock_valid>
   2042e:	b930      	cbnz	r0, 2043e <z_impl_k_mutex_unlock+0xb6>
   20430:	490c      	ldr	r1, [pc, #48]	; (20464 <z_impl_k_mutex_unlock+0xdc>)
   20432:	4809      	ldr	r0, [pc, #36]	; (20458 <z_impl_k_mutex_unlock+0xd0>)
   20434:	22c2      	movs	r2, #194	; 0xc2
   20436:	f003 fad7 	bl	239e8 <assert_print>
   2043a:	21c2      	movs	r1, #194	; 0xc2
   2043c:	e7da      	b.n	203f4 <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   2043e:	f385 8811 	msr	BASEPRI, r5
   20442:	f3bf 8f6f 	isb	sy
   20446:	e7c1      	b.n	203cc <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   20448:	f06f 0015 	mvn.w	r0, #21
   2044c:	e7bf      	b.n	203ce <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   2044e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20452:	e7bc      	b.n	203ce <z_impl_k_mutex_unlock+0x46>
   20454:	0002b089 	.word	0x0002b089
   20458:	000280bd 	.word	0x000280bd
   2045c:	20002500 	.word	0x20002500
   20460:	20002528 	.word	0x20002528
   20464:	000280f7 	.word	0x000280f7

00020468 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2046c:	4604      	mov	r4, r0
   2046e:	f89d a020 	ldrb.w	sl, [sp, #32]
   20472:	460d      	mov	r5, r1
   20474:	4690      	mov	r8, r2
   20476:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20478:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2047c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20480:	f3ef 8711 	mrs	r7, BASEPRI
   20484:	f383 8812 	msr	BASEPRI_MAX, r3
   20488:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2048c:	4630      	mov	r0, r6
   2048e:	f7ff fe71 	bl	20174 <z_spin_lock_valid>
   20492:	b940      	cbnz	r0, 204a6 <queue_insert+0x3e>
   20494:	4936      	ldr	r1, [pc, #216]	; (20570 <queue_insert+0x108>)
   20496:	4837      	ldr	r0, [pc, #220]	; (20574 <queue_insert+0x10c>)
   20498:	2294      	movs	r2, #148	; 0x94
   2049a:	f003 faa5 	bl	239e8 <assert_print>
   2049e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204a0:	4833      	ldr	r0, [pc, #204]	; (20570 <queue_insert+0x108>)
   204a2:	f003 fa9a 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   204a6:	4630      	mov	r0, r6
   204a8:	f7ff fe82 	bl	201b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   204ac:	f1ba 0f00 	cmp.w	sl, #0
   204b0:	d000      	beq.n	204b4 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   204b2:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   204b4:	f104 000c 	add.w	r0, r4, #12
   204b8:	f001 fbf2 	bl	21ca0 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   204bc:	b158      	cbz	r0, 204d6 <queue_insert+0x6e>
   204be:	2300      	movs	r3, #0
   204c0:	67c3      	str	r3, [r0, #124]	; 0x7c
   204c2:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   204c6:	f000 ff2d 	bl	21324 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   204ca:	4630      	mov	r0, r6
   204cc:	4639      	mov	r1, r7
   204ce:	f000 ff91 	bl	213f4 <z_reschedule>
		return 0;
   204d2:	2000      	movs	r0, #0
   204d4:	e017      	b.n	20506 <queue_insert+0x9e>
	if (alloc) {
   204d6:	f1b9 0f00 	cmp.w	r9, #0
   204da:	d026      	beq.n	2052a <queue_insert+0xc2>
	return z_thread_aligned_alloc(0, size);
   204dc:	2108      	movs	r1, #8
   204de:	f002 fc4d 	bl	22d7c <z_thread_aligned_alloc>
		if (anode == NULL) {
   204e2:	b990      	cbnz	r0, 2050a <queue_insert+0xa2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204e4:	4630      	mov	r0, r6
   204e6:	f7ff fe53 	bl	20190 <z_spin_unlock_valid>
   204ea:	b930      	cbnz	r0, 204fa <queue_insert+0x92>
   204ec:	4920      	ldr	r1, [pc, #128]	; (20570 <queue_insert+0x108>)
   204ee:	4821      	ldr	r0, [pc, #132]	; (20574 <queue_insert+0x10c>)
   204f0:	22c2      	movs	r2, #194	; 0xc2
   204f2:	f003 fa79 	bl	239e8 <assert_print>
   204f6:	21c2      	movs	r1, #194	; 0xc2
   204f8:	e7d2      	b.n	204a0 <queue_insert+0x38>
	__asm__ volatile(
   204fa:	f387 8811 	msr	BASEPRI, r7
   204fe:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20502:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   20506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2050a:	2201      	movs	r2, #1
		anode->data = data;
   2050c:	f8c0 8004 	str.w	r8, [r0, #4]
   20510:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20512:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20514:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20518:	b95d      	cbnz	r5, 20532 <queue_insert+0xca>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2051a:	6822      	ldr	r2, [r4, #0]
   2051c:	430a      	orrs	r2, r1
   2051e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20520:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   20522:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20524:	b96a      	cbnz	r2, 20542 <queue_insert+0xda>
	list->tail = node;
   20526:	6060      	str	r0, [r4, #4]
}
   20528:	e00b      	b.n	20542 <queue_insert+0xda>
	node->next_and_flags = flags;
   2052a:	f8c8 9000 	str.w	r9, [r8]
}
   2052e:	4640      	mov	r0, r8
   20530:	e7ef      	b.n	20512 <queue_insert+0xaa>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20532:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20534:	2a03      	cmp	r2, #3
   20536:	d810      	bhi.n	2055a <queue_insert+0xf2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20538:	6001      	str	r1, [r0, #0]
	return list->tail;
   2053a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2053c:	b939      	cbnz	r1, 2054e <queue_insert+0xe6>
	list->head = node;
   2053e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20542:	2104      	movs	r1, #4
   20544:	f104 0014 	add.w	r0, r4, #20
   20548:	f006 fdd0 	bl	270ec <z_handle_obj_poll_events>
   2054c:	e7bd      	b.n	204ca <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2054e:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20550:	f002 0203 	and.w	r2, r2, #3
   20554:	4302      	orrs	r2, r0
   20556:	600a      	str	r2, [r1, #0]
   20558:	e7e5      	b.n	20526 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2055a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2055e:	430a      	orrs	r2, r1
   20560:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20562:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20564:	f002 0203 	and.w	r2, r2, #3
   20568:	ea40 0302 	orr.w	r3, r0, r2
   2056c:	602b      	str	r3, [r5, #0]
}
   2056e:	e7e8      	b.n	20542 <queue_insert+0xda>
   20570:	000280f7 	.word	0x000280f7
   20574:	000280bd 	.word	0x000280bd

00020578 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   20578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2057c:	4605      	mov	r5, r0
   2057e:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   20580:	460c      	mov	r4, r1
   20582:	2900      	cmp	r1, #0
   20584:	d045      	beq.n	20612 <k_queue_append_list+0x9a>
   20586:	2a00      	cmp	r2, #0
   20588:	d043      	beq.n	20612 <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2058a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2058e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20592:	f3ef 8911 	mrs	r9, BASEPRI
   20596:	f383 8812 	msr	BASEPRI_MAX, r3
   2059a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2059e:	4638      	mov	r0, r7
   205a0:	f7ff fde8 	bl	20174 <z_spin_lock_valid>
   205a4:	b940      	cbnz	r0, 205b8 <k_queue_append_list+0x40>
   205a6:	491c      	ldr	r1, [pc, #112]	; (20618 <k_queue_append_list+0xa0>)
   205a8:	481c      	ldr	r0, [pc, #112]	; (2061c <k_queue_append_list+0xa4>)
   205aa:	2294      	movs	r2, #148	; 0x94
   205ac:	f003 fa1c 	bl	239e8 <assert_print>
   205b0:	4819      	ldr	r0, [pc, #100]	; (20618 <k_queue_append_list+0xa0>)
   205b2:	2194      	movs	r1, #148	; 0x94
   205b4:	f003 fa11 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   205b8:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   205ba:	f105 080c 	add.w	r8, r5, #12
   205be:	f7ff fdf7 	bl	201b0 <z_spin_lock_set_owner>
   205c2:	4640      	mov	r0, r8
   205c4:	f001 fb6c 	bl	21ca0 <z_unpend_first_thread>
	}

	while ((head != NULL) && (thread != NULL)) {
   205c8:	b168      	cbz	r0, 205e6 <k_queue_append_list+0x6e>
   205ca:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   205ce:	6144      	str	r4, [r0, #20]
   205d0:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   205d4:	f000 fea6 	bl	21324 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   205d8:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   205da:	4640      	mov	r0, r8
   205dc:	f001 fb60 	bl	21ca0 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   205e0:	b12c      	cbz	r4, 205ee <k_queue_append_list+0x76>
   205e2:	2800      	cmp	r0, #0
   205e4:	d1f3      	bne.n	205ce <k_queue_append_list+0x56>
	return list->tail;
   205e6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   205e8:	b96b      	cbnz	r3, 20606 <k_queue_append_list+0x8e>
	list->head = node;
   205ea:	602c      	str	r4, [r5, #0]
	list->tail = node;
   205ec:	606e      	str	r6, [r5, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   205ee:	2104      	movs	r1, #4
   205f0:	f105 0014 	add.w	r0, r5, #20
   205f4:	f006 fd7a 	bl	270ec <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   205f8:	4638      	mov	r0, r7
   205fa:	4649      	mov	r1, r9
   205fc:	f000 fefa 	bl	213f4 <z_reschedule>
	return 0;
   20600:	2000      	movs	r0, #0
}
   20602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20606:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20608:	f002 0203 	and.w	r2, r2, #3
   2060c:	4314      	orrs	r4, r2
   2060e:	601c      	str	r4, [r3, #0]
}
   20610:	e7ec      	b.n	205ec <k_queue_append_list+0x74>
		return -EINVAL;
   20612:	f06f 0015 	mvn.w	r0, #21
   20616:	e7f4      	b.n	20602 <k_queue_append_list+0x8a>
   20618:	000280f7 	.word	0x000280f7
   2061c:	000280bd 	.word	0x000280bd

00020620 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20624:	4605      	mov	r5, r0
   20626:	4691      	mov	r9, r2
   20628:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2062a:	f100 0608 	add.w	r6, r0, #8
   2062e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20632:	f3ef 8811 	mrs	r8, BASEPRI
   20636:	f383 8812 	msr	BASEPRI_MAX, r3
   2063a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2063e:	4630      	mov	r0, r6
   20640:	f7ff fd98 	bl	20174 <z_spin_lock_valid>
   20644:	b940      	cbnz	r0, 20658 <z_impl_k_queue_get+0x38>
   20646:	491f      	ldr	r1, [pc, #124]	; (206c4 <z_impl_k_queue_get+0xa4>)
   20648:	481f      	ldr	r0, [pc, #124]	; (206c8 <z_impl_k_queue_get+0xa8>)
   2064a:	2294      	movs	r2, #148	; 0x94
   2064c:	f003 f9cc 	bl	239e8 <assert_print>
   20650:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20652:	481c      	ldr	r0, [pc, #112]	; (206c4 <z_impl_k_queue_get+0xa4>)
   20654:	f003 f9c1 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   20658:	4630      	mov	r0, r6
   2065a:	f7ff fda9 	bl	201b0 <z_spin_lock_set_owner>
	return list->head;
   2065e:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20660:	b1bc      	cbz	r4, 20692 <z_impl_k_queue_get+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20662:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20664:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20666:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2066a:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2066c:	4620      	mov	r0, r4
	list->head = node;
   2066e:	602b      	str	r3, [r5, #0]
	list->tail = node;
   20670:	bf08      	it	eq
   20672:	606b      	streq	r3, [r5, #4]
   20674:	2101      	movs	r1, #1
   20676:	f006 fb92 	bl	26d9e <z_queue_node_peek>
   2067a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2067c:	4630      	mov	r0, r6
   2067e:	f7ff fd87 	bl	20190 <z_spin_unlock_valid>
   20682:	b9b0      	cbnz	r0, 206b2 <z_impl_k_queue_get+0x92>
   20684:	490f      	ldr	r1, [pc, #60]	; (206c4 <z_impl_k_queue_get+0xa4>)
   20686:	4810      	ldr	r0, [pc, #64]	; (206c8 <z_impl_k_queue_get+0xa8>)
   20688:	22c2      	movs	r2, #194	; 0xc2
   2068a:	f003 f9ad 	bl	239e8 <assert_print>
   2068e:	21c2      	movs	r1, #194	; 0xc2
   20690:	e7df      	b.n	20652 <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20692:	ea59 0307 	orrs.w	r3, r9, r7
   20696:	d0f1      	beq.n	2067c <z_impl_k_queue_get+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20698:	e9cd 9700 	strd	r9, r7, [sp]
   2069c:	f105 020c 	add.w	r2, r5, #12
   206a0:	4641      	mov	r1, r8
   206a2:	4630      	mov	r0, r6
   206a4:	f001 f8fa 	bl	2189c <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   206a8:	b938      	cbnz	r0, 206ba <z_impl_k_queue_get+0x9a>
   206aa:	4b08      	ldr	r3, [pc, #32]	; (206cc <z_impl_k_queue_get+0xac>)
   206ac:	689b      	ldr	r3, [r3, #8]
   206ae:	695c      	ldr	r4, [r3, #20]
   206b0:	e003      	b.n	206ba <z_impl_k_queue_get+0x9a>
	__asm__ volatile(
   206b2:	f388 8811 	msr	BASEPRI, r8
   206b6:	f3bf 8f6f 	isb	sy
}
   206ba:	4620      	mov	r0, r4
   206bc:	b003      	add	sp, #12
   206be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   206c2:	bf00      	nop
   206c4:	000280f7 	.word	0x000280f7
   206c8:	000280bd 	.word	0x000280bd
   206cc:	20002500 	.word	0x20002500

000206d0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   206d0:	b538      	push	{r3, r4, r5, lr}
   206d2:	4604      	mov	r4, r0
	__asm__ volatile(
   206d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   206d8:	f3ef 8511 	mrs	r5, BASEPRI
   206dc:	f383 8812 	msr	BASEPRI_MAX, r3
   206e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   206e4:	4814      	ldr	r0, [pc, #80]	; (20738 <z_impl_k_sem_give+0x68>)
   206e6:	f7ff fd45 	bl	20174 <z_spin_lock_valid>
   206ea:	b940      	cbnz	r0, 206fe <z_impl_k_sem_give+0x2e>
   206ec:	4913      	ldr	r1, [pc, #76]	; (2073c <z_impl_k_sem_give+0x6c>)
   206ee:	4814      	ldr	r0, [pc, #80]	; (20740 <z_impl_k_sem_give+0x70>)
   206f0:	2294      	movs	r2, #148	; 0x94
   206f2:	f003 f979 	bl	239e8 <assert_print>
   206f6:	4811      	ldr	r0, [pc, #68]	; (2073c <z_impl_k_sem_give+0x6c>)
   206f8:	2194      	movs	r1, #148	; 0x94
   206fa:	f003 f96e 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   206fe:	480e      	ldr	r0, [pc, #56]	; (20738 <z_impl_k_sem_give+0x68>)
   20700:	f7ff fd56 	bl	201b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20704:	4620      	mov	r0, r4
   20706:	f001 facb 	bl	21ca0 <z_unpend_first_thread>

	if (thread != NULL) {
   2070a:	b148      	cbz	r0, 20720 <z_impl_k_sem_give+0x50>
   2070c:	2200      	movs	r2, #0
   2070e:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20710:	f000 fe08 	bl	21324 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20714:	4629      	mov	r1, r5
   20716:	4808      	ldr	r0, [pc, #32]	; (20738 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   20718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2071c:	f000 be6a 	b.w	213f4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20720:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20724:	429a      	cmp	r2, r3
   20726:	bf18      	it	ne
   20728:	3301      	addne	r3, #1
   2072a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2072c:	2102      	movs	r1, #2
   2072e:	f104 0010 	add.w	r0, r4, #16
   20732:	f006 fcdb 	bl	270ec <z_handle_obj_poll_events>
}
   20736:	e7ed      	b.n	20714 <z_impl_k_sem_give+0x44>
   20738:	2000252c 	.word	0x2000252c
   2073c:	000280f7 	.word	0x000280f7
   20740:	000280bd 	.word	0x000280bd

00020744 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20746:	4604      	mov	r4, r0
   20748:	4616      	mov	r6, r2
   2074a:	461d      	mov	r5, r3
   2074c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   20750:	b15b      	cbz	r3, 2076a <z_impl_k_sem_take+0x26>
   20752:	ea52 0305 	orrs.w	r3, r2, r5
   20756:	d008      	beq.n	2076a <z_impl_k_sem_take+0x26>
   20758:	4926      	ldr	r1, [pc, #152]	; (207f4 <z_impl_k_sem_take+0xb0>)
   2075a:	4827      	ldr	r0, [pc, #156]	; (207f8 <z_impl_k_sem_take+0xb4>)
   2075c:	2279      	movs	r2, #121	; 0x79
   2075e:	f003 f943 	bl	239e8 <assert_print>
   20762:	4824      	ldr	r0, [pc, #144]	; (207f4 <z_impl_k_sem_take+0xb0>)
   20764:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20766:	f003 f938 	bl	239da <assert_post_action>
   2076a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2076e:	f3ef 8711 	mrs	r7, BASEPRI
   20772:	f383 8812 	msr	BASEPRI_MAX, r3
   20776:	f3bf 8f6f 	isb	sy
   2077a:	4820      	ldr	r0, [pc, #128]	; (207fc <z_impl_k_sem_take+0xb8>)
   2077c:	f7ff fcfa 	bl	20174 <z_spin_lock_valid>
   20780:	b938      	cbnz	r0, 20792 <z_impl_k_sem_take+0x4e>
   20782:	491f      	ldr	r1, [pc, #124]	; (20800 <z_impl_k_sem_take+0xbc>)
   20784:	481c      	ldr	r0, [pc, #112]	; (207f8 <z_impl_k_sem_take+0xb4>)
   20786:	2294      	movs	r2, #148	; 0x94
   20788:	f003 f92e 	bl	239e8 <assert_print>
   2078c:	2194      	movs	r1, #148	; 0x94
   2078e:	481c      	ldr	r0, [pc, #112]	; (20800 <z_impl_k_sem_take+0xbc>)
   20790:	e7e9      	b.n	20766 <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   20792:	481a      	ldr	r0, [pc, #104]	; (207fc <z_impl_k_sem_take+0xb8>)
   20794:	f7ff fd0c 	bl	201b0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   20798:	68a3      	ldr	r3, [r4, #8]
   2079a:	b19b      	cbz	r3, 207c4 <z_impl_k_sem_take+0x80>
		sem->count--;
   2079c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2079e:	4817      	ldr	r0, [pc, #92]	; (207fc <z_impl_k_sem_take+0xb8>)
   207a0:	60a3      	str	r3, [r4, #8]
   207a2:	f7ff fcf5 	bl	20190 <z_spin_unlock_valid>
   207a6:	b930      	cbnz	r0, 207b6 <z_impl_k_sem_take+0x72>
   207a8:	4915      	ldr	r1, [pc, #84]	; (20800 <z_impl_k_sem_take+0xbc>)
   207aa:	4813      	ldr	r0, [pc, #76]	; (207f8 <z_impl_k_sem_take+0xb4>)
   207ac:	22c2      	movs	r2, #194	; 0xc2
   207ae:	f003 f91b 	bl	239e8 <assert_print>
   207b2:	21c2      	movs	r1, #194	; 0xc2
   207b4:	e7eb      	b.n	2078e <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   207b6:	f387 8811 	msr	BASEPRI, r7
   207ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   207be:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   207c0:	b003      	add	sp, #12
   207c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   207c4:	ea56 0305 	orrs.w	r3, r6, r5
   207c8:	d10b      	bne.n	207e2 <z_impl_k_sem_take+0x9e>
   207ca:	480c      	ldr	r0, [pc, #48]	; (207fc <z_impl_k_sem_take+0xb8>)
   207cc:	f7ff fce0 	bl	20190 <z_spin_unlock_valid>
   207d0:	2800      	cmp	r0, #0
   207d2:	d0e9      	beq.n	207a8 <z_impl_k_sem_take+0x64>
   207d4:	f387 8811 	msr	BASEPRI, r7
   207d8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   207dc:	f06f 000f 	mvn.w	r0, #15
   207e0:	e7ee      	b.n	207c0 <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   207e2:	e9cd 6500 	strd	r6, r5, [sp]
   207e6:	4622      	mov	r2, r4
   207e8:	4639      	mov	r1, r7
   207ea:	4804      	ldr	r0, [pc, #16]	; (207fc <z_impl_k_sem_take+0xb8>)
   207ec:	f001 f856 	bl	2189c <z_pend_curr>
	return ret;
   207f0:	e7e6      	b.n	207c0 <z_impl_k_sem_take+0x7c>
   207f2:	bf00      	nop
   207f4:	0002b0ab 	.word	0x0002b0ab
   207f8:	000280bd 	.word	0x000280bd
   207fc:	2000252c 	.word	0x2000252c
   20800:	000280f7 	.word	0x000280f7

00020804 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   20804:	b570      	push	{r4, r5, r6, lr}
   20806:	4604      	mov	r4, r0
	__asm__ volatile(
   20808:	f04f 0340 	mov.w	r3, #64	; 0x40
   2080c:	f3ef 8511 	mrs	r5, BASEPRI
   20810:	f383 8812 	msr	BASEPRI_MAX, r3
   20814:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20818:	4812      	ldr	r0, [pc, #72]	; (20864 <z_impl_k_sem_reset+0x60>)
   2081a:	f7ff fcab 	bl	20174 <z_spin_lock_valid>
   2081e:	b940      	cbnz	r0, 20832 <z_impl_k_sem_reset+0x2e>
   20820:	4911      	ldr	r1, [pc, #68]	; (20868 <z_impl_k_sem_reset+0x64>)
   20822:	4812      	ldr	r0, [pc, #72]	; (2086c <z_impl_k_sem_reset+0x68>)
   20824:	2294      	movs	r2, #148	; 0x94
   20826:	f003 f8df 	bl	239e8 <assert_print>
   2082a:	480f      	ldr	r0, [pc, #60]	; (20868 <z_impl_k_sem_reset+0x64>)
   2082c:	2194      	movs	r1, #148	; 0x94
   2082e:	f003 f8d4 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   20832:	480c      	ldr	r0, [pc, #48]	; (20864 <z_impl_k_sem_reset+0x60>)
   20834:	f7ff fcbc 	bl	201b0 <z_spin_lock_set_owner>
   20838:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   2083c:	4620      	mov	r0, r4
   2083e:	f001 fa2f 	bl	21ca0 <z_unpend_first_thread>
		if (thread == NULL) {
   20842:	b118      	cbz	r0, 2084c <z_impl_k_sem_reset+0x48>
   20844:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   20846:	f000 fd6d 	bl	21324 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   2084a:	e7f7      	b.n	2083c <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   2084c:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2084e:	2102      	movs	r1, #2
   20850:	f104 0010 	add.w	r0, r4, #16
   20854:	f006 fc4a 	bl	270ec <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   20858:	4629      	mov	r1, r5
   2085a:	4802      	ldr	r0, [pc, #8]	; (20864 <z_impl_k_sem_reset+0x60>)
}
   2085c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   20860:	f000 bdc8 	b.w	213f4 <z_reschedule>
   20864:	2000252c 	.word	0x2000252c
   20868:	000280f7 	.word	0x000280f7
   2086c:	000280bd 	.word	0x000280bd

00020870 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   20870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   20872:	4b09      	ldr	r3, [pc, #36]	; (20898 <k_sys_work_q_init+0x28>)
   20874:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   20876:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   20878:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2087a:	9300      	str	r3, [sp, #0]
   2087c:	4907      	ldr	r1, [pc, #28]	; (2089c <k_sys_work_q_init+0x2c>)
   2087e:	4808      	ldr	r0, [pc, #32]	; (208a0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   20880:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   20884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20888:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2088c:	f000 fa66 	bl	20d5c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   20890:	4620      	mov	r0, r4
   20892:	b004      	add	sp, #16
   20894:	bd10      	pop	{r4, pc}
   20896:	bf00      	nop
   20898:	0002b0cb 	.word	0x0002b0cb
   2089c:	20005dc0 	.word	0x20005dc0
   208a0:	20001f30 	.word	0x20001f30

000208a4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   208a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   208a8:	4e68      	ldr	r6, [pc, #416]	; (20a4c <work_queue_main+0x1a8>)
	return list->head;
   208aa:	4f69      	ldr	r7, [pc, #420]	; (20a50 <work_queue_main+0x1ac>)
   208ac:	b085      	sub	sp, #20
   208ae:	4604      	mov	r4, r0
   208b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   208b4:	f3ef 8811 	mrs	r8, BASEPRI
   208b8:	f383 8812 	msr	BASEPRI_MAX, r3
   208bc:	f3bf 8f6f 	isb	sy
   208c0:	4630      	mov	r0, r6
   208c2:	f7ff fc57 	bl	20174 <z_spin_lock_valid>
   208c6:	b940      	cbnz	r0, 208da <work_queue_main+0x36>
   208c8:	4962      	ldr	r1, [pc, #392]	; (20a54 <work_queue_main+0x1b0>)
   208ca:	4863      	ldr	r0, [pc, #396]	; (20a58 <work_queue_main+0x1b4>)
   208cc:	2294      	movs	r2, #148	; 0x94
   208ce:	f003 f88b 	bl	239e8 <assert_print>
   208d2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208d4:	485f      	ldr	r0, [pc, #380]	; (20a54 <work_queue_main+0x1b0>)
   208d6:	f003 f880 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   208da:	4630      	mov	r0, r6
   208dc:	f7ff fc68 	bl	201b0 <z_spin_lock_set_owner>
   208e0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   208e4:	b9a5      	cbnz	r5, 20910 <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   208e6:	2102      	movs	r1, #2
   208e8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   208ec:	f006 fa95 	bl	26e1a <flag_test_and_clear>
   208f0:	bb80      	cbnz	r0, 20954 <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   208f2:	2300      	movs	r3, #0
   208f4:	9302      	str	r3, [sp, #8]
   208f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   208fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   208fe:	e9cd 2300 	strd	r2, r3, [sp]
   20902:	4641      	mov	r1, r8
   20904:	f104 0288 	add.w	r2, r4, #136	; 0x88
   20908:	4630      	mov	r0, r6
   2090a:	f001 fc31 	bl	22170 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   2090e:	e7cf      	b.n	208b0 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20910:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   20914:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   20916:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2091a:	4295      	cmp	r5, r2
	list->tail = node;
   2091c:	bf08      	it	eq
   2091e:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   20922:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   20926:	f043 0302 	orr.w	r3, r3, #2
   2092a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2092e:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   20930:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   20934:	f023 0304 	bic.w	r3, r3, #4
   20938:	f043 0301 	orr.w	r3, r3, #1
   2093c:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2093e:	4630      	mov	r0, r6
   20940:	f7ff fc26 	bl	20190 <z_spin_unlock_valid>
   20944:	b980      	cbnz	r0, 20968 <work_queue_main+0xc4>
   20946:	4943      	ldr	r1, [pc, #268]	; (20a54 <work_queue_main+0x1b0>)
   20948:	4843      	ldr	r0, [pc, #268]	; (20a58 <work_queue_main+0x1b4>)
   2094a:	22c2      	movs	r2, #194	; 0xc2
   2094c:	f003 f84c 	bl	239e8 <assert_print>
   20950:	21c2      	movs	r1, #194	; 0xc2
   20952:	e7bf      	b.n	208d4 <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   20954:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   20958:	2200      	movs	r2, #0
   2095a:	2101      	movs	r1, #1
   2095c:	4628      	mov	r0, r5
   2095e:	f001 fbbb 	bl	220d8 <z_sched_wake>
   20962:	2800      	cmp	r0, #0
   20964:	d1f8      	bne.n	20958 <work_queue_main+0xb4>
   20966:	e7c4      	b.n	208f2 <work_queue_main+0x4e>
	__asm__ volatile(
   20968:	f388 8811 	msr	BASEPRI, r8
   2096c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   20970:	f1b9 0f00 	cmp.w	r9, #0
   20974:	d109      	bne.n	2098a <work_queue_main+0xe6>
   20976:	4939      	ldr	r1, [pc, #228]	; (20a5c <work_queue_main+0x1b8>)
   20978:	4837      	ldr	r0, [pc, #220]	; (20a58 <work_queue_main+0x1b4>)
   2097a:	f240 229b 	movw	r2, #667	; 0x29b
   2097e:	f003 f833 	bl	239e8 <assert_print>
   20982:	4836      	ldr	r0, [pc, #216]	; (20a5c <work_queue_main+0x1b8>)
   20984:	f240 219b 	movw	r1, #667	; 0x29b
   20988:	e7a5      	b.n	208d6 <work_queue_main+0x32>
		handler(work);
   2098a:	4628      	mov	r0, r5
   2098c:	47c8      	blx	r9
	__asm__ volatile(
   2098e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20992:	f3ef 8a11 	mrs	sl, BASEPRI
   20996:	f383 8812 	msr	BASEPRI_MAX, r3
   2099a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2099e:	4630      	mov	r0, r6
   209a0:	f7ff fbe8 	bl	20174 <z_spin_lock_valid>
   209a4:	2800      	cmp	r0, #0
   209a6:	d08f      	beq.n	208c8 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   209a8:	4630      	mov	r0, r6
   209aa:	f7ff fc01 	bl	201b0 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   209ae:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   209b0:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   209b2:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   209b6:	d417      	bmi.n	209e8 <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   209b8:	60ea      	str	r2, [r5, #12]
   209ba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   209be:	f023 0302 	bic.w	r3, r3, #2
   209c2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209c6:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   209c8:	f3c3 2500 	ubfx	r5, r3, #8, #1
   209cc:	f7ff fbe0 	bl	20190 <z_spin_unlock_valid>
   209d0:	2800      	cmp	r0, #0
   209d2:	d0b8      	beq.n	20946 <work_queue_main+0xa2>
	__asm__ volatile(
   209d4:	f38a 8811 	msr	BASEPRI, sl
   209d8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   209dc:	2d00      	cmp	r5, #0
   209de:	f47f af67 	bne.w	208b0 <work_queue_main+0xc>
	z_impl_k_yield();
   209e2:	f001 f9a7 	bl	21d34 <z_impl_k_yield>
}
   209e6:	e763      	b.n	208b0 <work_queue_main+0xc>
	return list->head;
   209e8:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   209ea:	f023 0303 	bic.w	r3, r3, #3
   209ee:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   209f0:	2800      	cmp	r0, #0
   209f2:	d0e2      	beq.n	209ba <work_queue_main+0x116>
	return node->next;
   209f4:	f04f 0800 	mov.w	r8, #0
   209f8:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   209fc:	46c3      	mov	fp, r8
   209fe:	2800      	cmp	r0, #0
   20a00:	d0db      	beq.n	209ba <work_queue_main+0x116>
		if (wc->work == work) {
   20a02:	6843      	ldr	r3, [r0, #4]
   20a04:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   20a06:	4602      	mov	r2, r0
		if (wc->work == work) {
   20a08:	d10d      	bne.n	20a26 <work_queue_main+0x182>
	return node->next;
   20a0a:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20a0c:	f1b8 0f00 	cmp.w	r8, #0
   20a10:	d112      	bne.n	20a38 <work_queue_main+0x194>
   20a12:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   20a14:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   20a16:	4283      	cmp	r3, r0
   20a18:	d100      	bne.n	20a1c <work_queue_main+0x178>
	list->tail = node;
   20a1a:	607a      	str	r2, [r7, #4]
	parent->next = child;
   20a1c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   20a20:	f7ff fe56 	bl	206d0 <z_impl_k_sem_give>
}
   20a24:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20a26:	f1b9 0f00 	cmp.w	r9, #0
   20a2a:	d00d      	beq.n	20a48 <work_queue_main+0x1a4>
	return node->next;
   20a2c:	f8d9 3000 	ldr.w	r3, [r9]
   20a30:	4648      	mov	r0, r9
   20a32:	4690      	mov	r8, r2
   20a34:	4699      	mov	r9, r3
   20a36:	e7e2      	b.n	209fe <work_queue_main+0x15a>
	parent->next = child;
   20a38:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   20a3c:	687b      	ldr	r3, [r7, #4]
   20a3e:	4283      	cmp	r3, r0
	list->tail = node;
   20a40:	bf08      	it	eq
   20a42:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   20a46:	e7e9      	b.n	20a1c <work_queue_main+0x178>
   20a48:	464b      	mov	r3, r9
   20a4a:	e7f1      	b.n	20a30 <work_queue_main+0x18c>
   20a4c:	20002538 	.word	0x20002538
   20a50:	20002530 	.word	0x20002530
   20a54:	000280f7 	.word	0x000280f7
   20a58:	000280bd 	.word	0x000280bd
   20a5c:	0002b0d4 	.word	0x0002b0d4

00020a60 <cancel_sync_locked>:
{
   20a60:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   20a62:	68c3      	ldr	r3, [r0, #12]
   20a64:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   20a68:	079b      	lsls	r3, r3, #30
{
   20a6a:	4605      	mov	r5, r0
   20a6c:	460c      	mov	r4, r1
	if (ret) {
   20a6e:	d50d      	bpl.n	20a8c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20a70:	2201      	movs	r2, #1
   20a72:	2100      	movs	r1, #0
   20a74:	f104 0008 	add.w	r0, r4, #8
   20a78:	f006 f9bf 	bl	26dfa <z_impl_k_sem_init>
	parent->next = child;
   20a7c:	2300      	movs	r3, #0
   20a7e:	6023      	str	r3, [r4, #0]
	return list->tail;
   20a80:	4b05      	ldr	r3, [pc, #20]	; (20a98 <cancel_sync_locked+0x38>)
	canceler->work = work;
   20a82:	6065      	str	r5, [r4, #4]
   20a84:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   20a86:	b91a      	cbnz	r2, 20a90 <cancel_sync_locked+0x30>
	list->head = node;
   20a88:	e9c3 4400 	strd	r4, r4, [r3]
}
   20a8c:	4630      	mov	r0, r6
   20a8e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   20a90:	6014      	str	r4, [r2, #0]
	list->tail = node;
   20a92:	605c      	str	r4, [r3, #4]
}
   20a94:	e7fa      	b.n	20a8c <cancel_sync_locked+0x2c>
   20a96:	bf00      	nop
   20a98:	20002530 	.word	0x20002530

00020a9c <submit_to_queue_locked>:
{
   20a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   20a9e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20aa0:	079a      	lsls	r2, r3, #30
{
   20aa2:	4604      	mov	r4, r0
   20aa4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20aa6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   20aaa:	d438      	bmi.n	20b1e <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   20aac:	075b      	lsls	r3, r3, #29
   20aae:	d424      	bmi.n	20afa <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   20ab0:	680b      	ldr	r3, [r1, #0]
   20ab2:	b90b      	cbnz	r3, 20ab8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   20ab4:	6883      	ldr	r3, [r0, #8]
   20ab6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   20ab8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   20aba:	07dd      	lsls	r5, r3, #31
   20abc:	d520      	bpl.n	20b00 <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   20abe:	68a3      	ldr	r3, [r4, #8]
   20ac0:	b953      	cbnz	r3, 20ad8 <submit_to_queue_locked+0x3c>
   20ac2:	4928      	ldr	r1, [pc, #160]	; (20b64 <submit_to_queue_locked+0xc8>)
   20ac4:	4828      	ldr	r0, [pc, #160]	; (20b68 <submit_to_queue_locked+0xcc>)
   20ac6:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   20aca:	f002 ff8d 	bl	239e8 <assert_print>
   20ace:	4825      	ldr	r0, [pc, #148]	; (20b64 <submit_to_queue_locked+0xc8>)
   20ad0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   20ad4:	f002 ff81 	bl	239da <assert_post_action>
			*queuep = work->queue;
   20ad8:	603b      	str	r3, [r7, #0]
			ret = 2;
   20ada:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   20adc:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   20ade:	2d00      	cmp	r5, #0
   20ae0:	d03c      	beq.n	20b5c <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20ae2:	4b22      	ldr	r3, [pc, #136]	; (20b6c <submit_to_queue_locked+0xd0>)
   20ae4:	689b      	ldr	r3, [r3, #8]
   20ae6:	42ab      	cmp	r3, r5
   20ae8:	d00c      	beq.n	20b04 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   20aea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20aee:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   20af0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20af4:	d416      	bmi.n	20b24 <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   20af6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   20afa:	2300      	movs	r3, #0
   20afc:	603b      	str	r3, [r7, #0]
	return ret;
   20afe:	e027      	b.n	20b50 <submit_to_queue_locked+0xb4>
		ret = 1;
   20b00:	2601      	movs	r6, #1
   20b02:	e7eb      	b.n	20adc <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20b04:	f006 f928 	bl	26d58 <k_is_in_isr>
   20b08:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   20b0c:	2800      	cmp	r0, #0
   20b0e:	d1ee      	bne.n	20aee <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20b10:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   20b12:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20b16:	d5ee      	bpl.n	20af6 <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   20b18:	b152      	cbz	r2, 20b30 <submit_to_queue_locked+0x94>
   20b1a:	075b      	lsls	r3, r3, #29
   20b1c:	d408      	bmi.n	20b30 <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   20b1e:	f06f 060f 	mvn.w	r6, #15
   20b22:	e7ea      	b.n	20afa <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   20b24:	2a00      	cmp	r2, #0
   20b26:	d1fa      	bne.n	20b1e <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   20b28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   20b2c:	2b00      	cmp	r3, #0
   20b2e:	d1f6      	bne.n	20b1e <submit_to_queue_locked+0x82>
	parent->next = child;
   20b30:	2300      	movs	r3, #0
   20b32:	6023      	str	r3, [r4, #0]
	return list->tail;
   20b34:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   20b38:	b963      	cbnz	r3, 20b54 <submit_to_queue_locked+0xb8>
	list->head = node;
   20b3a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   20b3e:	4628      	mov	r0, r5
   20b40:	f006 f984 	bl	26e4c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   20b44:	68e3      	ldr	r3, [r4, #12]
   20b46:	f043 0304 	orr.w	r3, r3, #4
   20b4a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   20b4c:	683b      	ldr	r3, [r7, #0]
   20b4e:	60a3      	str	r3, [r4, #8]
}
   20b50:	4630      	mov	r0, r6
   20b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   20b54:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20b56:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   20b5a:	e7f0      	b.n	20b3e <submit_to_queue_locked+0xa2>
		return -EINVAL;
   20b5c:	f06f 0615 	mvn.w	r6, #21
   20b60:	e7cb      	b.n	20afa <submit_to_queue_locked+0x5e>
   20b62:	bf00      	nop
   20b64:	0002b0d4 	.word	0x0002b0d4
   20b68:	000280bd 	.word	0x000280bd
   20b6c:	20002500 	.word	0x20002500

00020b70 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   20b70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20b72:	4604      	mov	r4, r0
	__asm__ volatile(
   20b74:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b78:	f3ef 8511 	mrs	r5, BASEPRI
   20b7c:	f383 8812 	msr	BASEPRI_MAX, r3
   20b80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b84:	4817      	ldr	r0, [pc, #92]	; (20be4 <work_timeout+0x74>)
   20b86:	f7ff faf5 	bl	20174 <z_spin_lock_valid>
   20b8a:	b940      	cbnz	r0, 20b9e <work_timeout+0x2e>
   20b8c:	4916      	ldr	r1, [pc, #88]	; (20be8 <work_timeout+0x78>)
   20b8e:	4817      	ldr	r0, [pc, #92]	; (20bec <work_timeout+0x7c>)
   20b90:	2294      	movs	r2, #148	; 0x94
   20b92:	f002 ff29 	bl	239e8 <assert_print>
   20b96:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b98:	4813      	ldr	r0, [pc, #76]	; (20be8 <work_timeout+0x78>)
   20b9a:	f002 ff1e 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   20b9e:	4811      	ldr	r0, [pc, #68]	; (20be4 <work_timeout+0x74>)
   20ba0:	f7ff fb06 	bl	201b0 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   20ba4:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20ba6:	2103      	movs	r1, #3
   20ba8:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   20baa:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20bac:	f1a4 0610 	sub.w	r6, r4, #16
   20bb0:	f006 f933 	bl	26e1a <flag_test_and_clear>
   20bb4:	b128      	cbz	r0, 20bc2 <work_timeout+0x52>
		queue = dw->queue;
   20bb6:	69a3      	ldr	r3, [r4, #24]
   20bb8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   20bba:	a901      	add	r1, sp, #4
   20bbc:	4630      	mov	r0, r6
   20bbe:	f7ff ff6d 	bl	20a9c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bc2:	4808      	ldr	r0, [pc, #32]	; (20be4 <work_timeout+0x74>)
   20bc4:	f7ff fae4 	bl	20190 <z_spin_unlock_valid>
   20bc8:	b930      	cbnz	r0, 20bd8 <work_timeout+0x68>
   20bca:	4907      	ldr	r1, [pc, #28]	; (20be8 <work_timeout+0x78>)
   20bcc:	4807      	ldr	r0, [pc, #28]	; (20bec <work_timeout+0x7c>)
   20bce:	22c2      	movs	r2, #194	; 0xc2
   20bd0:	f002 ff0a 	bl	239e8 <assert_print>
   20bd4:	21c2      	movs	r1, #194	; 0xc2
   20bd6:	e7df      	b.n	20b98 <work_timeout+0x28>
	__asm__ volatile(
   20bd8:	f385 8811 	msr	BASEPRI, r5
   20bdc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   20be0:	b002      	add	sp, #8
   20be2:	bd70      	pop	{r4, r5, r6, pc}
   20be4:	20002538 	.word	0x20002538
   20be8:	000280f7 	.word	0x000280f7
   20bec:	000280bd 	.word	0x000280bd

00020bf0 <k_work_init>:
{
   20bf0:	b538      	push	{r3, r4, r5, lr}
   20bf2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   20bf4:	4604      	mov	r4, r0
   20bf6:	b940      	cbnz	r0, 20c0a <k_work_init+0x1a>
   20bf8:	490b      	ldr	r1, [pc, #44]	; (20c28 <k_work_init+0x38>)
   20bfa:	480c      	ldr	r0, [pc, #48]	; (20c2c <k_work_init+0x3c>)
   20bfc:	2289      	movs	r2, #137	; 0x89
   20bfe:	f002 fef3 	bl	239e8 <assert_print>
   20c02:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   20c04:	4808      	ldr	r0, [pc, #32]	; (20c28 <k_work_init+0x38>)
   20c06:	f002 fee8 	bl	239da <assert_post_action>
   20c0a:	b931      	cbnz	r1, 20c1a <k_work_init+0x2a>
   20c0c:	4906      	ldr	r1, [pc, #24]	; (20c28 <k_work_init+0x38>)
   20c0e:	4807      	ldr	r0, [pc, #28]	; (20c2c <k_work_init+0x3c>)
   20c10:	228a      	movs	r2, #138	; 0x8a
   20c12:	f002 fee9 	bl	239e8 <assert_print>
   20c16:	218a      	movs	r1, #138	; 0x8a
   20c18:	e7f4      	b.n	20c04 <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20c1a:	2210      	movs	r2, #16
   20c1c:	2100      	movs	r1, #0
   20c1e:	f003 fd71 	bl	24704 <memset>
   20c22:	6065      	str	r5, [r4, #4]
}
   20c24:	bd38      	pop	{r3, r4, r5, pc}
   20c26:	bf00      	nop
   20c28:	0002b0d4 	.word	0x0002b0d4
   20c2c:	000280bd 	.word	0x000280bd

00020c30 <k_work_busy_get>:
{
   20c30:	b538      	push	{r3, r4, r5, lr}
   20c32:	4604      	mov	r4, r0
	__asm__ volatile(
   20c34:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c38:	f3ef 8511 	mrs	r5, BASEPRI
   20c3c:	f383 8812 	msr	BASEPRI_MAX, r3
   20c40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c44:	4811      	ldr	r0, [pc, #68]	; (20c8c <k_work_busy_get+0x5c>)
   20c46:	f7ff fa95 	bl	20174 <z_spin_lock_valid>
   20c4a:	b940      	cbnz	r0, 20c5e <k_work_busy_get+0x2e>
   20c4c:	4910      	ldr	r1, [pc, #64]	; (20c90 <k_work_busy_get+0x60>)
   20c4e:	4811      	ldr	r0, [pc, #68]	; (20c94 <k_work_busy_get+0x64>)
   20c50:	2294      	movs	r2, #148	; 0x94
   20c52:	f002 fec9 	bl	239e8 <assert_print>
   20c56:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c58:	480d      	ldr	r0, [pc, #52]	; (20c90 <k_work_busy_get+0x60>)
   20c5a:	f002 febe 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   20c5e:	480b      	ldr	r0, [pc, #44]	; (20c8c <k_work_busy_get+0x5c>)
   20c60:	f7ff faa6 	bl	201b0 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   20c64:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c66:	4809      	ldr	r0, [pc, #36]	; (20c8c <k_work_busy_get+0x5c>)
   20c68:	f004 040f 	and.w	r4, r4, #15
   20c6c:	f7ff fa90 	bl	20190 <z_spin_unlock_valid>
   20c70:	b930      	cbnz	r0, 20c80 <k_work_busy_get+0x50>
   20c72:	4907      	ldr	r1, [pc, #28]	; (20c90 <k_work_busy_get+0x60>)
   20c74:	4807      	ldr	r0, [pc, #28]	; (20c94 <k_work_busy_get+0x64>)
   20c76:	22c2      	movs	r2, #194	; 0xc2
   20c78:	f002 feb6 	bl	239e8 <assert_print>
   20c7c:	21c2      	movs	r1, #194	; 0xc2
   20c7e:	e7eb      	b.n	20c58 <k_work_busy_get+0x28>
	__asm__ volatile(
   20c80:	f385 8811 	msr	BASEPRI, r5
   20c84:	f3bf 8f6f 	isb	sy
}
   20c88:	4620      	mov	r0, r4
   20c8a:	bd38      	pop	{r3, r4, r5, pc}
   20c8c:	20002538 	.word	0x20002538
   20c90:	000280f7 	.word	0x000280f7
   20c94:	000280bd 	.word	0x000280bd

00020c98 <z_work_submit_to_queue>:
{
   20c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   20c9a:	460c      	mov	r4, r1
{
   20c9c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   20c9e:	b951      	cbnz	r1, 20cb6 <z_work_submit_to_queue+0x1e>
   20ca0:	491c      	ldr	r1, [pc, #112]	; (20d14 <z_work_submit_to_queue+0x7c>)
   20ca2:	481d      	ldr	r0, [pc, #116]	; (20d18 <z_work_submit_to_queue+0x80>)
   20ca4:	f44f 72ba 	mov.w	r2, #372	; 0x174
   20ca8:	f002 fe9e 	bl	239e8 <assert_print>
   20cac:	4819      	ldr	r0, [pc, #100]	; (20d14 <z_work_submit_to_queue+0x7c>)
   20cae:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cb2:	f002 fe92 	bl	239da <assert_post_action>
	__asm__ volatile(
   20cb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cba:	f3ef 8511 	mrs	r5, BASEPRI
   20cbe:	f383 8812 	msr	BASEPRI_MAX, r3
   20cc2:	f3bf 8f6f 	isb	sy
   20cc6:	4815      	ldr	r0, [pc, #84]	; (20d1c <z_work_submit_to_queue+0x84>)
   20cc8:	f7ff fa54 	bl	20174 <z_spin_lock_valid>
   20ccc:	b938      	cbnz	r0, 20cde <z_work_submit_to_queue+0x46>
   20cce:	4914      	ldr	r1, [pc, #80]	; (20d20 <z_work_submit_to_queue+0x88>)
   20cd0:	4811      	ldr	r0, [pc, #68]	; (20d18 <z_work_submit_to_queue+0x80>)
   20cd2:	2294      	movs	r2, #148	; 0x94
   20cd4:	f002 fe88 	bl	239e8 <assert_print>
   20cd8:	2194      	movs	r1, #148	; 0x94
   20cda:	4811      	ldr	r0, [pc, #68]	; (20d20 <z_work_submit_to_queue+0x88>)
   20cdc:	e7e9      	b.n	20cb2 <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   20cde:	480f      	ldr	r0, [pc, #60]	; (20d1c <z_work_submit_to_queue+0x84>)
   20ce0:	f7ff fa66 	bl	201b0 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   20ce4:	4620      	mov	r0, r4
   20ce6:	a901      	add	r1, sp, #4
   20ce8:	f7ff fed8 	bl	20a9c <submit_to_queue_locked>
   20cec:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cee:	480b      	ldr	r0, [pc, #44]	; (20d1c <z_work_submit_to_queue+0x84>)
   20cf0:	f7ff fa4e 	bl	20190 <z_spin_unlock_valid>
   20cf4:	b930      	cbnz	r0, 20d04 <z_work_submit_to_queue+0x6c>
   20cf6:	490a      	ldr	r1, [pc, #40]	; (20d20 <z_work_submit_to_queue+0x88>)
   20cf8:	4807      	ldr	r0, [pc, #28]	; (20d18 <z_work_submit_to_queue+0x80>)
   20cfa:	22c2      	movs	r2, #194	; 0xc2
   20cfc:	f002 fe74 	bl	239e8 <assert_print>
   20d00:	21c2      	movs	r1, #194	; 0xc2
   20d02:	e7ea      	b.n	20cda <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   20d04:	f385 8811 	msr	BASEPRI, r5
   20d08:	f3bf 8f6f 	isb	sy
}
   20d0c:	4620      	mov	r0, r4
   20d0e:	b003      	add	sp, #12
   20d10:	bd30      	pop	{r4, r5, pc}
   20d12:	bf00      	nop
   20d14:	0002b0d4 	.word	0x0002b0d4
   20d18:	000280bd 	.word	0x000280bd
   20d1c:	20002538 	.word	0x20002538
   20d20:	000280f7 	.word	0x000280f7

00020d24 <k_work_submit>:
{
   20d24:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   20d26:	4801      	ldr	r0, [pc, #4]	; (20d2c <k_work_submit+0x8>)
   20d28:	f006 b8ca 	b.w	26ec0 <k_work_submit_to_queue>
   20d2c:	20001f30 	.word	0x20001f30

00020d30 <k_work_queue_init>:
{
   20d30:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   20d32:	b950      	cbnz	r0, 20d4a <k_work_queue_init+0x1a>
   20d34:	4907      	ldr	r1, [pc, #28]	; (20d54 <k_work_queue_init+0x24>)
   20d36:	4808      	ldr	r0, [pc, #32]	; (20d58 <k_work_queue_init+0x28>)
   20d38:	f240 22b9 	movw	r2, #697	; 0x2b9
   20d3c:	f002 fe54 	bl	239e8 <assert_print>
   20d40:	4804      	ldr	r0, [pc, #16]	; (20d54 <k_work_queue_init+0x24>)
   20d42:	f240 21b9 	movw	r1, #697	; 0x2b9
   20d46:	f002 fe48 	bl	239da <assert_post_action>
	*queue = (struct k_work_q) {
   20d4a:	22a0      	movs	r2, #160	; 0xa0
   20d4c:	2100      	movs	r1, #0
   20d4e:	f003 fcd9 	bl	24704 <memset>
}
   20d52:	bd08      	pop	{r3, pc}
   20d54:	0002b0d4 	.word	0x0002b0d4
   20d58:	000280bd 	.word	0x000280bd

00020d5c <k_work_queue_start>:
{
   20d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d5e:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   20d60:	4604      	mov	r4, r0
{
   20d62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   20d64:	b950      	cbnz	r0, 20d7c <k_work_queue_start+0x20>
   20d66:	492a      	ldr	r1, [pc, #168]	; (20e10 <k_work_queue_start+0xb4>)
   20d68:	482a      	ldr	r0, [pc, #168]	; (20e14 <k_work_queue_start+0xb8>)
   20d6a:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   20d6e:	f002 fe3b 	bl	239e8 <assert_print>
   20d72:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   20d76:	4826      	ldr	r0, [pc, #152]	; (20e10 <k_work_queue_start+0xb4>)
   20d78:	f002 fe2f 	bl	239da <assert_post_action>
   20d7c:	b941      	cbnz	r1, 20d90 <k_work_queue_start+0x34>
   20d7e:	4924      	ldr	r1, [pc, #144]	; (20e10 <k_work_queue_start+0xb4>)
   20d80:	4824      	ldr	r0, [pc, #144]	; (20e14 <k_work_queue_start+0xb8>)
   20d82:	f240 22c9 	movw	r2, #713	; 0x2c9
   20d86:	f002 fe2f 	bl	239e8 <assert_print>
   20d8a:	f240 21c9 	movw	r1, #713	; 0x2c9
   20d8e:	e7f2      	b.n	20d76 <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   20d90:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   20d94:	f010 0001 	ands.w	r0, r0, #1
   20d98:	d008      	beq.n	20dac <k_work_queue_start+0x50>
   20d9a:	491d      	ldr	r1, [pc, #116]	; (20e10 <k_work_queue_start+0xb4>)
   20d9c:	481d      	ldr	r0, [pc, #116]	; (20e14 <k_work_queue_start+0xb8>)
   20d9e:	f240 22ca 	movw	r2, #714	; 0x2ca
   20da2:	f002 fe21 	bl	239e8 <assert_print>
   20da6:	f240 21ca 	movw	r1, #714	; 0x2ca
   20daa:	e7e4      	b.n	20d76 <k_work_queue_start+0x1a>
	list->tail = NULL;
   20dac:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   20db0:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   20db4:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   20db8:	f104 0090 	add.w	r0, r4, #144	; 0x90
   20dbc:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   20dc0:	b31d      	cbz	r5, 20e0a <k_work_queue_start+0xae>
   20dc2:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   20dc4:	2800      	cmp	r0, #0
   20dc6:	f240 1001 	movw	r0, #257	; 0x101
   20dca:	bf08      	it	eq
   20dcc:	2001      	moveq	r0, #1
	*flagp = flags;
   20dce:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20dd2:	2000      	movs	r0, #0
   20dd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20dd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20ddc:	e9cd 3003 	strd	r3, r0, [sp, #12]
   20de0:	e9cd 0001 	strd	r0, r0, [sp, #4]
   20de4:	e9cd 6706 	strd	r6, r7, [sp, #24]
   20de8:	4b0b      	ldr	r3, [pc, #44]	; (20e18 <k_work_queue_start+0xbc>)
   20dea:	9400      	str	r4, [sp, #0]
   20dec:	4620      	mov	r0, r4
   20dee:	f7ff f90b 	bl	20008 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   20df2:	b125      	cbz	r5, 20dfe <k_work_queue_start+0xa2>
   20df4:	6829      	ldr	r1, [r5, #0]
   20df6:	b111      	cbz	r1, 20dfe <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   20df8:	4620      	mov	r0, r4
   20dfa:	f005 ffb3 	bl	26d64 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   20dfe:	4620      	mov	r0, r4
}
   20e00:	b009      	add	sp, #36	; 0x24
   20e02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20e06:	f005 bfb2 	b.w	26d6e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20e0a:	2001      	movs	r0, #1
   20e0c:	e7df      	b.n	20dce <k_work_queue_start+0x72>
   20e0e:	bf00      	nop
   20e10:	0002b0d4 	.word	0x0002b0d4
   20e14:	000280bd 	.word	0x000280bd
   20e18:	000208a5 	.word	0x000208a5

00020e1c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   20e1c:	b538      	push	{r3, r4, r5, lr}
   20e1e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   20e20:	4604      	mov	r4, r0
   20e22:	b950      	cbnz	r0, 20e3a <k_work_init_delayable+0x1e>
   20e24:	490e      	ldr	r1, [pc, #56]	; (20e60 <k_work_init_delayable+0x44>)
   20e26:	480f      	ldr	r0, [pc, #60]	; (20e64 <k_work_init_delayable+0x48>)
   20e28:	f44f 7250 	mov.w	r2, #832	; 0x340
   20e2c:	f002 fddc 	bl	239e8 <assert_print>
   20e30:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   20e34:	480a      	ldr	r0, [pc, #40]	; (20e60 <k_work_init_delayable+0x44>)
   20e36:	f002 fdd0 	bl	239da <assert_post_action>
   20e3a:	b941      	cbnz	r1, 20e4e <k_work_init_delayable+0x32>
   20e3c:	4908      	ldr	r1, [pc, #32]	; (20e60 <k_work_init_delayable+0x44>)
   20e3e:	4809      	ldr	r0, [pc, #36]	; (20e64 <k_work_init_delayable+0x48>)
   20e40:	f240 3241 	movw	r2, #833	; 0x341
   20e44:	f002 fdd0 	bl	239e8 <assert_print>
   20e48:	f240 3141 	movw	r1, #833	; 0x341
   20e4c:	e7f2      	b.n	20e34 <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   20e4e:	2230      	movs	r2, #48	; 0x30
   20e50:	2100      	movs	r1, #0
   20e52:	f003 fc57 	bl	24704 <memset>
   20e56:	f44f 7380 	mov.w	r3, #256	; 0x100
   20e5a:	6065      	str	r5, [r4, #4]
   20e5c:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   20e5e:	bd38      	pop	{r3, r4, r5, pc}
   20e60:	0002b0d4 	.word	0x0002b0d4
   20e64:	000280bd 	.word	0x000280bd

00020e68 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   20e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20e6a:	4616      	mov	r6, r2
   20e6c:	9001      	str	r0, [sp, #4]
   20e6e:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   20e70:	460c      	mov	r4, r1
   20e72:	b951      	cbnz	r1, 20e8a <k_work_schedule_for_queue+0x22>
   20e74:	4927      	ldr	r1, [pc, #156]	; (20f14 <k_work_schedule_for_queue+0xac>)
   20e76:	4828      	ldr	r0, [pc, #160]	; (20f18 <k_work_schedule_for_queue+0xb0>)
   20e78:	f240 32b7 	movw	r2, #951	; 0x3b7
   20e7c:	f002 fdb4 	bl	239e8 <assert_print>
   20e80:	4824      	ldr	r0, [pc, #144]	; (20f14 <k_work_schedule_for_queue+0xac>)
   20e82:	f240 31b7 	movw	r1, #951	; 0x3b7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e86:	f002 fda8 	bl	239da <assert_post_action>
	__asm__ volatile(
   20e8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e8e:	f3ef 8711 	mrs	r7, BASEPRI
   20e92:	f383 8812 	msr	BASEPRI_MAX, r3
   20e96:	f3bf 8f6f 	isb	sy
   20e9a:	4820      	ldr	r0, [pc, #128]	; (20f1c <k_work_schedule_for_queue+0xb4>)
   20e9c:	f7ff f96a 	bl	20174 <z_spin_lock_valid>
   20ea0:	b938      	cbnz	r0, 20eb2 <k_work_schedule_for_queue+0x4a>
   20ea2:	491f      	ldr	r1, [pc, #124]	; (20f20 <k_work_schedule_for_queue+0xb8>)
   20ea4:	481c      	ldr	r0, [pc, #112]	; (20f18 <k_work_schedule_for_queue+0xb0>)
   20ea6:	2294      	movs	r2, #148	; 0x94
   20ea8:	f002 fd9e 	bl	239e8 <assert_print>
   20eac:	2194      	movs	r1, #148	; 0x94
   20eae:	481c      	ldr	r0, [pc, #112]	; (20f20 <k_work_schedule_for_queue+0xb8>)
   20eb0:	e7e9      	b.n	20e86 <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   20eb2:	481a      	ldr	r0, [pc, #104]	; (20f1c <k_work_schedule_for_queue+0xb4>)
   20eb4:	f7ff f97c 	bl	201b0 <z_spin_lock_set_owner>
	return *flagp;
   20eb8:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   20eba:	f013 0f0e 	tst.w	r3, #14
   20ebe:	d120      	bne.n	20f02 <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20ec0:	ea55 0206 	orrs.w	r2, r5, r6
   20ec4:	d10f      	bne.n	20ee6 <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   20ec6:	4620      	mov	r0, r4
   20ec8:	a901      	add	r1, sp, #4
   20eca:	f7ff fde7 	bl	20a9c <submit_to_queue_locked>
   20ece:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ed0:	4812      	ldr	r0, [pc, #72]	; (20f1c <k_work_schedule_for_queue+0xb4>)
   20ed2:	f7ff f95d 	bl	20190 <z_spin_unlock_valid>
   20ed6:	b9b0      	cbnz	r0, 20f06 <k_work_schedule_for_queue+0x9e>
   20ed8:	4911      	ldr	r1, [pc, #68]	; (20f20 <k_work_schedule_for_queue+0xb8>)
   20eda:	480f      	ldr	r0, [pc, #60]	; (20f18 <k_work_schedule_for_queue+0xb0>)
   20edc:	22c2      	movs	r2, #194	; 0xc2
   20ede:	f002 fd83 	bl	239e8 <assert_print>
   20ee2:	21c2      	movs	r1, #194	; 0xc2
   20ee4:	e7e3      	b.n	20eae <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   20ee6:	f043 0308 	orr.w	r3, r3, #8
   20eea:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   20eec:	9b01      	ldr	r3, [sp, #4]
   20eee:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20ef0:	f104 0010 	add.w	r0, r4, #16
   20ef4:	490b      	ldr	r1, [pc, #44]	; (20f24 <k_work_schedule_for_queue+0xbc>)
   20ef6:	4632      	mov	r2, r6
   20ef8:	462b      	mov	r3, r5
   20efa:	f001 f9b3 	bl	22264 <z_add_timeout>
	return ret;
   20efe:	2401      	movs	r4, #1
   20f00:	e7e6      	b.n	20ed0 <k_work_schedule_for_queue+0x68>
	int ret = 0;
   20f02:	2400      	movs	r4, #0
   20f04:	e7e4      	b.n	20ed0 <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   20f06:	f387 8811 	msr	BASEPRI, r7
   20f0a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   20f0e:	4620      	mov	r0, r4
   20f10:	b003      	add	sp, #12
   20f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20f14:	0002b0d4 	.word	0x0002b0d4
   20f18:	000280bd 	.word	0x000280bd
   20f1c:	20002538 	.word	0x20002538
   20f20:	000280f7 	.word	0x000280f7
   20f24:	00020b71 	.word	0x00020b71

00020f28 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   20f28:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   20f2a:	4801      	ldr	r0, [pc, #4]	; (20f30 <k_work_schedule+0x8>)
   20f2c:	f7ff bf9c 	b.w	20e68 <k_work_schedule_for_queue>
   20f30:	20001f30 	.word	0x20001f30

00020f34 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   20f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20f36:	4616      	mov	r6, r2
   20f38:	9001      	str	r0, [sp, #4]
   20f3a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   20f3c:	460c      	mov	r4, r1
   20f3e:	b951      	cbnz	r1, 20f56 <k_work_reschedule_for_queue+0x22>
   20f40:	4926      	ldr	r1, [pc, #152]	; (20fdc <k_work_reschedule_for_queue+0xa8>)
   20f42:	4827      	ldr	r0, [pc, #156]	; (20fe0 <k_work_reschedule_for_queue+0xac>)
   20f44:	f240 32db 	movw	r2, #987	; 0x3db
   20f48:	f002 fd4e 	bl	239e8 <assert_print>
   20f4c:	4823      	ldr	r0, [pc, #140]	; (20fdc <k_work_reschedule_for_queue+0xa8>)
   20f4e:	f240 31db 	movw	r1, #987	; 0x3db
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f52:	f002 fd42 	bl	239da <assert_post_action>
	__asm__ volatile(
   20f56:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f5a:	f3ef 8711 	mrs	r7, BASEPRI
   20f5e:	f383 8812 	msr	BASEPRI_MAX, r3
   20f62:	f3bf 8f6f 	isb	sy
   20f66:	481f      	ldr	r0, [pc, #124]	; (20fe4 <k_work_reschedule_for_queue+0xb0>)
   20f68:	f7ff f904 	bl	20174 <z_spin_lock_valid>
   20f6c:	b938      	cbnz	r0, 20f7e <k_work_reschedule_for_queue+0x4a>
   20f6e:	491e      	ldr	r1, [pc, #120]	; (20fe8 <k_work_reschedule_for_queue+0xb4>)
   20f70:	481b      	ldr	r0, [pc, #108]	; (20fe0 <k_work_reschedule_for_queue+0xac>)
   20f72:	2294      	movs	r2, #148	; 0x94
   20f74:	f002 fd38 	bl	239e8 <assert_print>
   20f78:	2194      	movs	r1, #148	; 0x94
   20f7a:	481b      	ldr	r0, [pc, #108]	; (20fe8 <k_work_reschedule_for_queue+0xb4>)
   20f7c:	e7e9      	b.n	20f52 <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   20f7e:	4819      	ldr	r0, [pc, #100]	; (20fe4 <k_work_reschedule_for_queue+0xb0>)
   20f80:	f7ff f916 	bl	201b0 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   20f84:	4620      	mov	r0, r4
   20f86:	f005 ff53 	bl	26e30 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20f8a:	ea55 0306 	orrs.w	r3, r5, r6
   20f8e:	d10f      	bne.n	20fb0 <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   20f90:	4620      	mov	r0, r4
   20f92:	a901      	add	r1, sp, #4
   20f94:	f7ff fd82 	bl	20a9c <submit_to_queue_locked>
   20f98:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f9a:	4812      	ldr	r0, [pc, #72]	; (20fe4 <k_work_reschedule_for_queue+0xb0>)
   20f9c:	f7ff f8f8 	bl	20190 <z_spin_unlock_valid>
   20fa0:	b9a8      	cbnz	r0, 20fce <k_work_reschedule_for_queue+0x9a>
   20fa2:	4911      	ldr	r1, [pc, #68]	; (20fe8 <k_work_reschedule_for_queue+0xb4>)
   20fa4:	480e      	ldr	r0, [pc, #56]	; (20fe0 <k_work_reschedule_for_queue+0xac>)
   20fa6:	22c2      	movs	r2, #194	; 0xc2
   20fa8:	f002 fd1e 	bl	239e8 <assert_print>
   20fac:	21c2      	movs	r1, #194	; 0xc2
   20fae:	e7e4      	b.n	20f7a <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   20fb0:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20fb2:	490e      	ldr	r1, [pc, #56]	; (20fec <k_work_reschedule_for_queue+0xb8>)
	*flagp |= BIT(bit);
   20fb4:	f043 0308 	orr.w	r3, r3, #8
   20fb8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   20fba:	9b01      	ldr	r3, [sp, #4]
   20fbc:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20fbe:	f104 0010 	add.w	r0, r4, #16
   20fc2:	4632      	mov	r2, r6
   20fc4:	462b      	mov	r3, r5
   20fc6:	f001 f94d 	bl	22264 <z_add_timeout>
	return ret;
   20fca:	2401      	movs	r4, #1
   20fcc:	e7e5      	b.n	20f9a <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   20fce:	f387 8811 	msr	BASEPRI, r7
   20fd2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   20fd6:	4620      	mov	r0, r4
   20fd8:	b003      	add	sp, #12
   20fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20fdc:	0002b0d4 	.word	0x0002b0d4
   20fe0:	000280bd 	.word	0x000280bd
   20fe4:	20002538 	.word	0x20002538
   20fe8:	000280f7 	.word	0x000280f7
   20fec:	00020b71 	.word	0x00020b71

00020ff0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   20ff0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   20ff2:	4801      	ldr	r0, [pc, #4]	; (20ff8 <k_work_reschedule+0x8>)
   20ff4:	f7ff bf9e 	b.w	20f34 <k_work_reschedule_for_queue>
   20ff8:	20001f30 	.word	0x20001f30

00020ffc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   20ffc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   20ffe:	4604      	mov	r4, r0
   21000:	b950      	cbnz	r0, 21018 <k_work_cancel_delayable+0x1c>
   21002:	491d      	ldr	r1, [pc, #116]	; (21078 <k_work_cancel_delayable+0x7c>)
   21004:	481d      	ldr	r0, [pc, #116]	; (2107c <k_work_cancel_delayable+0x80>)
   21006:	f240 32fd 	movw	r2, #1021	; 0x3fd
   2100a:	f002 fced 	bl	239e8 <assert_print>
   2100e:	481a      	ldr	r0, [pc, #104]	; (21078 <k_work_cancel_delayable+0x7c>)
   21010:	f240 31fd 	movw	r1, #1021	; 0x3fd
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21014:	f002 fce1 	bl	239da <assert_post_action>
	__asm__ volatile(
   21018:	f04f 0340 	mov.w	r3, #64	; 0x40
   2101c:	f3ef 8511 	mrs	r5, BASEPRI
   21020:	f383 8812 	msr	BASEPRI_MAX, r3
   21024:	f3bf 8f6f 	isb	sy
   21028:	4815      	ldr	r0, [pc, #84]	; (21080 <k_work_cancel_delayable+0x84>)
   2102a:	f7ff f8a3 	bl	20174 <z_spin_lock_valid>
   2102e:	b938      	cbnz	r0, 21040 <k_work_cancel_delayable+0x44>
   21030:	4914      	ldr	r1, [pc, #80]	; (21084 <k_work_cancel_delayable+0x88>)
   21032:	4812      	ldr	r0, [pc, #72]	; (2107c <k_work_cancel_delayable+0x80>)
   21034:	2294      	movs	r2, #148	; 0x94
   21036:	f002 fcd7 	bl	239e8 <assert_print>
   2103a:	2194      	movs	r1, #148	; 0x94
   2103c:	4811      	ldr	r0, [pc, #68]	; (21084 <k_work_cancel_delayable+0x88>)
   2103e:	e7e9      	b.n	21014 <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   21040:	480f      	ldr	r0, [pc, #60]	; (21080 <k_work_cancel_delayable+0x84>)
   21042:	f7ff f8b5 	bl	201b0 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   21046:	4620      	mov	r0, r4
   21048:	f005 fef2 	bl	26e30 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2104c:	4620      	mov	r0, r4
   2104e:	f005 ff04 	bl	26e5a <cancel_async_locked>
   21052:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21054:	480a      	ldr	r0, [pc, #40]	; (21080 <k_work_cancel_delayable+0x84>)
   21056:	f7ff f89b 	bl	20190 <z_spin_unlock_valid>
   2105a:	b930      	cbnz	r0, 2106a <k_work_cancel_delayable+0x6e>
   2105c:	4909      	ldr	r1, [pc, #36]	; (21084 <k_work_cancel_delayable+0x88>)
   2105e:	4807      	ldr	r0, [pc, #28]	; (2107c <k_work_cancel_delayable+0x80>)
   21060:	22c2      	movs	r2, #194	; 0xc2
   21062:	f002 fcc1 	bl	239e8 <assert_print>
   21066:	21c2      	movs	r1, #194	; 0xc2
   21068:	e7e8      	b.n	2103c <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   2106a:	f385 8811 	msr	BASEPRI, r5
   2106e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   21072:	4620      	mov	r0, r4
   21074:	bd38      	pop	{r3, r4, r5, pc}
   21076:	bf00      	nop
   21078:	0002b0d4 	.word	0x0002b0d4
   2107c:	000280bd 	.word	0x000280bd
   21080:	20002538 	.word	0x20002538
   21084:	000280f7 	.word	0x000280f7

00021088 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   21088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2108c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2108e:	4605      	mov	r5, r0
   21090:	b950      	cbnz	r0, 210a8 <k_work_cancel_delayable_sync+0x20>
   21092:	4933      	ldr	r1, [pc, #204]	; (21160 <k_work_cancel_delayable_sync+0xd8>)
   21094:	4833      	ldr	r0, [pc, #204]	; (21164 <k_work_cancel_delayable_sync+0xdc>)
   21096:	f240 420e 	movw	r2, #1038	; 0x40e
   2109a:	f002 fca5 	bl	239e8 <assert_print>
   2109e:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   210a2:	482f      	ldr	r0, [pc, #188]	; (21160 <k_work_cancel_delayable_sync+0xd8>)
   210a4:	f002 fc99 	bl	239da <assert_post_action>
   210a8:	b941      	cbnz	r1, 210bc <k_work_cancel_delayable_sync+0x34>
   210aa:	492d      	ldr	r1, [pc, #180]	; (21160 <k_work_cancel_delayable_sync+0xd8>)
   210ac:	482d      	ldr	r0, [pc, #180]	; (21164 <k_work_cancel_delayable_sync+0xdc>)
   210ae:	f240 420f 	movw	r2, #1039	; 0x40f
   210b2:	f002 fc99 	bl	239e8 <assert_print>
   210b6:	f240 410f 	movw	r1, #1039	; 0x40f
   210ba:	e7f2      	b.n	210a2 <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   210bc:	f005 fe4c 	bl	26d58 <k_is_in_isr>
   210c0:	4604      	mov	r4, r0
   210c2:	b140      	cbz	r0, 210d6 <k_work_cancel_delayable_sync+0x4e>
   210c4:	4926      	ldr	r1, [pc, #152]	; (21160 <k_work_cancel_delayable_sync+0xd8>)
   210c6:	4827      	ldr	r0, [pc, #156]	; (21164 <k_work_cancel_delayable_sync+0xdc>)
   210c8:	f44f 6282 	mov.w	r2, #1040	; 0x410
   210cc:	f002 fc8c 	bl	239e8 <assert_print>
   210d0:	f44f 6182 	mov.w	r1, #1040	; 0x410
   210d4:	e7e5      	b.n	210a2 <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   210d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   210da:	f3ef 8811 	mrs	r8, BASEPRI
   210de:	f383 8812 	msr	BASEPRI_MAX, r3
   210e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   210e6:	4820      	ldr	r0, [pc, #128]	; (21168 <k_work_cancel_delayable_sync+0xe0>)
   210e8:	f7ff f844 	bl	20174 <z_spin_lock_valid>
   210ec:	b938      	cbnz	r0, 210fe <k_work_cancel_delayable_sync+0x76>
   210ee:	491f      	ldr	r1, [pc, #124]	; (2116c <k_work_cancel_delayable_sync+0xe4>)
   210f0:	481c      	ldr	r0, [pc, #112]	; (21164 <k_work_cancel_delayable_sync+0xdc>)
   210f2:	2294      	movs	r2, #148	; 0x94
   210f4:	f002 fc78 	bl	239e8 <assert_print>
   210f8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210fa:	481c      	ldr	r0, [pc, #112]	; (2116c <k_work_cancel_delayable_sync+0xe4>)
   210fc:	e7d2      	b.n	210a4 <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   210fe:	481a      	ldr	r0, [pc, #104]	; (21168 <k_work_cancel_delayable_sync+0xe0>)
   21100:	f7ff f856 	bl	201b0 <z_spin_lock_set_owner>
	return *flagp;
   21104:	68eb      	ldr	r3, [r5, #12]
   21106:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2110a:	2b00      	cmp	r3, #0
   2110c:	bf14      	ite	ne
   2110e:	2701      	movne	r7, #1
   21110:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   21112:	d00a      	beq.n	2112a <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   21114:	4628      	mov	r0, r5
   21116:	f005 fe8b 	bl	26e30 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2111a:	4628      	mov	r0, r5
   2111c:	f005 fe9d 	bl	26e5a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   21120:	4631      	mov	r1, r6
   21122:	4628      	mov	r0, r5
   21124:	f7ff fc9c 	bl	20a60 <cancel_sync_locked>
   21128:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2112a:	480f      	ldr	r0, [pc, #60]	; (21168 <k_work_cancel_delayable_sync+0xe0>)
   2112c:	f7ff f830 	bl	20190 <z_spin_unlock_valid>
   21130:	b930      	cbnz	r0, 21140 <k_work_cancel_delayable_sync+0xb8>
   21132:	490e      	ldr	r1, [pc, #56]	; (2116c <k_work_cancel_delayable_sync+0xe4>)
   21134:	480b      	ldr	r0, [pc, #44]	; (21164 <k_work_cancel_delayable_sync+0xdc>)
   21136:	22c2      	movs	r2, #194	; 0xc2
   21138:	f002 fc56 	bl	239e8 <assert_print>
   2113c:	21c2      	movs	r1, #194	; 0xc2
   2113e:	e7dc      	b.n	210fa <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   21140:	f388 8811 	msr	BASEPRI, r8
   21144:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   21148:	b13c      	cbz	r4, 2115a <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   2114a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2114e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21152:	f106 0008 	add.w	r0, r6, #8
   21156:	f7ff faf5 	bl	20744 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2115a:	4638      	mov	r0, r7
   2115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21160:	0002b0d4 	.word	0x0002b0d4
   21164:	000280bd 	.word	0x000280bd
   21168:	20002538 	.word	0x20002538
   2116c:	000280f7 	.word	0x000280f7

00021170 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   21170:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   21172:	4d07      	ldr	r5, [pc, #28]	; (21190 <z_reset_time_slice+0x20>)
   21174:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   21176:	b154      	cbz	r4, 2118e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   21178:	f7fc f94a 	bl	1d410 <sys_clock_elapsed>
   2117c:	4b05      	ldr	r3, [pc, #20]	; (21194 <z_reset_time_slice+0x24>)
   2117e:	4404      	add	r4, r0
   21180:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   21182:	6828      	ldr	r0, [r5, #0]
   21184:	2100      	movs	r1, #0
	}
}
   21186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2118a:	f001 b985 	b.w	22498 <z_set_timeout_expiry>
}
   2118e:	bd38      	pop	{r3, r4, r5, pc}
   21190:	20002544 	.word	0x20002544
   21194:	20002500 	.word	0x20002500

00021198 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   21198:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2119a:	4d12      	ldr	r5, [pc, #72]	; (211e4 <update_cache+0x4c>)
   2119c:	462b      	mov	r3, r5
   2119e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211a2:	429c      	cmp	r4, r3
   211a4:	d000      	beq.n	211a8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   211a6:	b904      	cbnz	r4, 211aa <update_cache+0x12>
   211a8:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   211aa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   211ac:	b988      	cbnz	r0, 211d2 <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   211ae:	b943      	cbnz	r3, 211c2 <update_cache+0x2a>
   211b0:	490d      	ldr	r1, [pc, #52]	; (211e8 <update_cache+0x50>)
   211b2:	480e      	ldr	r0, [pc, #56]	; (211ec <update_cache+0x54>)
   211b4:	2289      	movs	r2, #137	; 0x89
   211b6:	f002 fc17 	bl	239e8 <assert_print>
   211ba:	480b      	ldr	r0, [pc, #44]	; (211e8 <update_cache+0x50>)
   211bc:	2189      	movs	r1, #137	; 0x89
   211be:	f002 fc0c 	bl	239da <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   211c2:	7b5a      	ldrb	r2, [r3, #13]
   211c4:	06d2      	lsls	r2, r2, #27
   211c6:	d104      	bne.n	211d2 <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   211c8:	69a2      	ldr	r2, [r4, #24]
   211ca:	b912      	cbnz	r2, 211d2 <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   211cc:	89da      	ldrh	r2, [r3, #14]
   211ce:	2a7f      	cmp	r2, #127	; 0x7f
   211d0:	d805      	bhi.n	211de <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   211d2:	429c      	cmp	r4, r3
   211d4:	d002      	beq.n	211dc <update_cache+0x44>
			z_reset_time_slice(thread);
   211d6:	4620      	mov	r0, r4
   211d8:	f7ff ffca 	bl	21170 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   211dc:	4623      	mov	r3, r4
   211de:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   211e0:	bd38      	pop	{r3, r4, r5, pc}
   211e2:	bf00      	nop
   211e4:	20002500 	.word	0x20002500
   211e8:	0002b0f5 	.word	0x0002b0f5
   211ec:	000280bd 	.word	0x000280bd

000211f0 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   211f0:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   211f2:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   211f6:	7b42      	ldrb	r2, [r0, #13]
   211f8:	2b00      	cmp	r3, #0
   211fa:	db37      	blt.n	2126c <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   211fc:	06d3      	lsls	r3, r2, #27
   211fe:	d135      	bne.n	2126c <ready_thread+0x7c>
	return node->next != NULL;
   21200:	6983      	ldr	r3, [r0, #24]
   21202:	2b00      	cmp	r3, #0
   21204:	d132      	bne.n	2126c <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   21206:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2120a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2120c:	4a18      	ldr	r2, [pc, #96]	; (21270 <ready_thread+0x80>)
   2120e:	4290      	cmp	r0, r2
   21210:	d108      	bne.n	21224 <ready_thread+0x34>
   21212:	4918      	ldr	r1, [pc, #96]	; (21274 <ready_thread+0x84>)
   21214:	4818      	ldr	r0, [pc, #96]	; (21278 <ready_thread+0x88>)
   21216:	22ba      	movs	r2, #186	; 0xba
   21218:	f002 fbe6 	bl	239e8 <assert_print>
   2121c:	4815      	ldr	r0, [pc, #84]	; (21274 <ready_thread+0x84>)
   2121e:	21ba      	movs	r1, #186	; 0xba
   21220:	f002 fbdb 	bl	239da <assert_post_action>
	return list->head == list;
   21224:	4915      	ldr	r1, [pc, #84]	; (2127c <ready_thread+0x8c>)
   21226:	460a      	mov	r2, r1
   21228:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2122c:	4294      	cmp	r4, r2
   2122e:	bf18      	it	ne
   21230:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   21232:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21234:	b923      	cbnz	r3, 21240 <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   21236:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   2123a:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2123c:	6248      	str	r0, [r1, #36]	; 0x24
}
   2123e:	e00c      	b.n	2125a <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   21240:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21244:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   21248:	42b5      	cmp	r5, r6
   2124a:	d00b      	beq.n	21264 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2124c:	42ae      	cmp	r6, r5
   2124e:	dd09      	ble.n	21264 <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   21250:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   21252:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   21256:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   21258:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   2125a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2125e:	2000      	movs	r0, #0
   21260:	f7ff bf9a 	b.w	21198 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21264:	42a3      	cmp	r3, r4
   21266:	d0e6      	beq.n	21236 <ready_thread+0x46>
   21268:	681b      	ldr	r3, [r3, #0]
   2126a:	e7e3      	b.n	21234 <ready_thread+0x44>
}
   2126c:	bd70      	pop	{r4, r5, r6, pc}
   2126e:	bf00      	nop
   21270:	20001e30 	.word	0x20001e30
   21274:	0002b0f5 	.word	0x0002b0f5
   21278:	000280bd 	.word	0x000280bd
   2127c:	20002500 	.word	0x20002500

00021280 <k_sched_time_slice_set>:
{
   21280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21282:	4604      	mov	r4, r0
   21284:	460d      	mov	r5, r1
	__asm__ volatile(
   21286:	f04f 0340 	mov.w	r3, #64	; 0x40
   2128a:	f3ef 8711 	mrs	r7, BASEPRI
   2128e:	f383 8812 	msr	BASEPRI_MAX, r3
   21292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21296:	481d      	ldr	r0, [pc, #116]	; (2130c <k_sched_time_slice_set+0x8c>)
   21298:	f7fe ff6c 	bl	20174 <z_spin_lock_valid>
   2129c:	b940      	cbnz	r0, 212b0 <k_sched_time_slice_set+0x30>
   2129e:	491c      	ldr	r1, [pc, #112]	; (21310 <k_sched_time_slice_set+0x90>)
   212a0:	481c      	ldr	r0, [pc, #112]	; (21314 <k_sched_time_slice_set+0x94>)
   212a2:	2294      	movs	r2, #148	; 0x94
   212a4:	f002 fba0 	bl	239e8 <assert_print>
   212a8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212aa:	4819      	ldr	r0, [pc, #100]	; (21310 <k_sched_time_slice_set+0x90>)
   212ac:	f002 fb95 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   212b0:	4816      	ldr	r0, [pc, #88]	; (2130c <k_sched_time_slice_set+0x8c>)
			return (uint32_t)((t * to_hz + off) / from_hz);
   212b2:	2600      	movs	r6, #0
   212b4:	f7fe ff7c 	bl	201b0 <z_spin_lock_set_owner>
   212b8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   212bc:	f240 30e7 	movw	r0, #999	; 0x3e7
   212c0:	4631      	mov	r1, r6
   212c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   212c6:	2300      	movs	r3, #0
   212c8:	fbe4 010c 	umlal	r0, r1, r4, ip
   212cc:	f7de ff08 	bl	e0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   212d0:	42b4      	cmp	r4, r6
   212d2:	dd02      	ble.n	212da <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   212d4:	2802      	cmp	r0, #2
   212d6:	bfb8      	it	lt
   212d8:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   212da:	4a0f      	ldr	r2, [pc, #60]	; (21318 <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   212dc:	4b0f      	ldr	r3, [pc, #60]	; (2131c <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   212de:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   212e0:	4a0f      	ldr	r2, [pc, #60]	; (21320 <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   212e2:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   212e4:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   212e6:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   212e8:	f7ff ff42 	bl	21170 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212ec:	4807      	ldr	r0, [pc, #28]	; (2130c <k_sched_time_slice_set+0x8c>)
   212ee:	f7fe ff4f 	bl	20190 <z_spin_unlock_valid>
   212f2:	b930      	cbnz	r0, 21302 <k_sched_time_slice_set+0x82>
   212f4:	4906      	ldr	r1, [pc, #24]	; (21310 <k_sched_time_slice_set+0x90>)
   212f6:	4807      	ldr	r0, [pc, #28]	; (21314 <k_sched_time_slice_set+0x94>)
   212f8:	22c2      	movs	r2, #194	; 0xc2
   212fa:	f002 fb75 	bl	239e8 <assert_print>
   212fe:	21c2      	movs	r1, #194	; 0xc2
   21300:	e7d3      	b.n	212aa <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   21302:	f387 8811 	msr	BASEPRI, r7
   21306:	f3bf 8f6f 	isb	sy
}
   2130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2130c:	20002548 	.word	0x20002548
   21310:	000280f7 	.word	0x000280f7
   21314:	000280bd 	.word	0x000280bd
   21318:	20002544 	.word	0x20002544
   2131c:	20002500 	.word	0x20002500
   21320:	20002540 	.word	0x20002540

00021324 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   21324:	b538      	push	{r3, r4, r5, lr}
   21326:	4604      	mov	r4, r0
	__asm__ volatile(
   21328:	f04f 0340 	mov.w	r3, #64	; 0x40
   2132c:	f3ef 8511 	mrs	r5, BASEPRI
   21330:	f383 8812 	msr	BASEPRI_MAX, r3
   21334:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21338:	4811      	ldr	r0, [pc, #68]	; (21380 <z_ready_thread+0x5c>)
   2133a:	f7fe ff1b 	bl	20174 <z_spin_lock_valid>
   2133e:	b940      	cbnz	r0, 21352 <z_ready_thread+0x2e>
   21340:	4910      	ldr	r1, [pc, #64]	; (21384 <z_ready_thread+0x60>)
   21342:	4811      	ldr	r0, [pc, #68]	; (21388 <z_ready_thread+0x64>)
   21344:	2294      	movs	r2, #148	; 0x94
   21346:	f002 fb4f 	bl	239e8 <assert_print>
   2134a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2134c:	480d      	ldr	r0, [pc, #52]	; (21384 <z_ready_thread+0x60>)
   2134e:	f002 fb44 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   21352:	480b      	ldr	r0, [pc, #44]	; (21380 <z_ready_thread+0x5c>)
   21354:	f7fe ff2c 	bl	201b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   21358:	4620      	mov	r0, r4
   2135a:	f7ff ff49 	bl	211f0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2135e:	4808      	ldr	r0, [pc, #32]	; (21380 <z_ready_thread+0x5c>)
   21360:	f7fe ff16 	bl	20190 <z_spin_unlock_valid>
   21364:	b930      	cbnz	r0, 21374 <z_ready_thread+0x50>
   21366:	4907      	ldr	r1, [pc, #28]	; (21384 <z_ready_thread+0x60>)
   21368:	4807      	ldr	r0, [pc, #28]	; (21388 <z_ready_thread+0x64>)
   2136a:	22c2      	movs	r2, #194	; 0xc2
   2136c:	f002 fb3c 	bl	239e8 <assert_print>
   21370:	21c2      	movs	r1, #194	; 0xc2
   21372:	e7eb      	b.n	2134c <z_ready_thread+0x28>
	__asm__ volatile(
   21374:	f385 8811 	msr	BASEPRI, r5
   21378:	f3bf 8f6f 	isb	sy
		}
	}
}
   2137c:	bd38      	pop	{r3, r4, r5, pc}
   2137e:	bf00      	nop
   21380:	20002548 	.word	0x20002548
   21384:	000280f7 	.word	0x000280f7
   21388:	000280bd 	.word	0x000280bd

0002138c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   2138c:	b538      	push	{r3, r4, r5, lr}
   2138e:	4604      	mov	r4, r0
	__asm__ volatile(
   21390:	f04f 0340 	mov.w	r3, #64	; 0x40
   21394:	f3ef 8511 	mrs	r5, BASEPRI
   21398:	f383 8812 	msr	BASEPRI_MAX, r3
   2139c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   213a0:	4811      	ldr	r0, [pc, #68]	; (213e8 <z_unpend_thread_no_timeout+0x5c>)
   213a2:	f7fe fee7 	bl	20174 <z_spin_lock_valid>
   213a6:	b940      	cbnz	r0, 213ba <z_unpend_thread_no_timeout+0x2e>
   213a8:	4910      	ldr	r1, [pc, #64]	; (213ec <z_unpend_thread_no_timeout+0x60>)
   213aa:	4811      	ldr	r0, [pc, #68]	; (213f0 <z_unpend_thread_no_timeout+0x64>)
   213ac:	2294      	movs	r2, #148	; 0x94
   213ae:	f002 fb1b 	bl	239e8 <assert_print>
   213b2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213b4:	480d      	ldr	r0, [pc, #52]	; (213ec <z_unpend_thread_no_timeout+0x60>)
   213b6:	f002 fb10 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   213ba:	480b      	ldr	r0, [pc, #44]	; (213e8 <z_unpend_thread_no_timeout+0x5c>)
   213bc:	f7fe fef8 	bl	201b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   213c0:	4620      	mov	r0, r4
   213c2:	f000 fb97 	bl	21af4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213c6:	4808      	ldr	r0, [pc, #32]	; (213e8 <z_unpend_thread_no_timeout+0x5c>)
   213c8:	f7fe fee2 	bl	20190 <z_spin_unlock_valid>
   213cc:	b930      	cbnz	r0, 213dc <z_unpend_thread_no_timeout+0x50>
   213ce:	4907      	ldr	r1, [pc, #28]	; (213ec <z_unpend_thread_no_timeout+0x60>)
   213d0:	4807      	ldr	r0, [pc, #28]	; (213f0 <z_unpend_thread_no_timeout+0x64>)
   213d2:	22c2      	movs	r2, #194	; 0xc2
   213d4:	f002 fb08 	bl	239e8 <assert_print>
   213d8:	21c2      	movs	r1, #194	; 0xc2
   213da:	e7eb      	b.n	213b4 <z_unpend_thread_no_timeout+0x28>
	__asm__ volatile(
   213dc:	f385 8811 	msr	BASEPRI, r5
   213e0:	f3bf 8f6f 	isb	sy
	}
}
   213e4:	bd38      	pop	{r3, r4, r5, pc}
   213e6:	bf00      	nop
   213e8:	20002548 	.word	0x20002548
   213ec:	000280f7 	.word	0x000280f7
   213f0:	000280bd 	.word	0x000280bd

000213f4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   213f4:	b538      	push	{r3, r4, r5, lr}
   213f6:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   213f8:	460c      	mov	r4, r1
   213fa:	b9c1      	cbnz	r1, 2142e <z_reschedule+0x3a>
   213fc:	f3ef 8505 	mrs	r5, IPSR
   21400:	b9ad      	cbnz	r5, 2142e <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   21402:	4a13      	ldr	r2, [pc, #76]	; (21450 <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   21404:	69d1      	ldr	r1, [r2, #28]
   21406:	6892      	ldr	r2, [r2, #8]
   21408:	4291      	cmp	r1, r2
   2140a:	d010      	beq.n	2142e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2140c:	f7fe fec0 	bl	20190 <z_spin_unlock_valid>
   21410:	b940      	cbnz	r0, 21424 <z_reschedule+0x30>
   21412:	4910      	ldr	r1, [pc, #64]	; (21454 <z_reschedule+0x60>)
   21414:	4810      	ldr	r0, [pc, #64]	; (21458 <z_reschedule+0x64>)
   21416:	22e1      	movs	r2, #225	; 0xe1
   21418:	f002 fae6 	bl	239e8 <assert_print>
   2141c:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2141e:	480d      	ldr	r0, [pc, #52]	; (21454 <z_reschedule+0x60>)
   21420:	f002 fadb 	bl	239da <assert_post_action>
	ret = arch_swap(key);
   21424:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2142a:	f7f1 bded 	b.w	13008 <arch_swap>
   2142e:	4618      	mov	r0, r3
   21430:	f7fe feae 	bl	20190 <z_spin_unlock_valid>
   21434:	b930      	cbnz	r0, 21444 <z_reschedule+0x50>
   21436:	4907      	ldr	r1, [pc, #28]	; (21454 <z_reschedule+0x60>)
   21438:	4807      	ldr	r0, [pc, #28]	; (21458 <z_reschedule+0x64>)
   2143a:	22c2      	movs	r2, #194	; 0xc2
   2143c:	f002 fad4 	bl	239e8 <assert_print>
   21440:	21c2      	movs	r1, #194	; 0xc2
   21442:	e7ec      	b.n	2141e <z_reschedule+0x2a>
   21444:	f384 8811 	msr	BASEPRI, r4
   21448:	f3bf 8f6f 	isb	sy
   2144c:	bd38      	pop	{r3, r4, r5, pc}
   2144e:	bf00      	nop
   21450:	20002500 	.word	0x20002500
   21454:	000280f7 	.word	0x000280f7
   21458:	000280bd 	.word	0x000280bd

0002145c <z_sched_start>:
{
   2145c:	b538      	push	{r3, r4, r5, lr}
   2145e:	4604      	mov	r4, r0
	__asm__ volatile(
   21460:	f04f 0340 	mov.w	r3, #64	; 0x40
   21464:	f3ef 8511 	mrs	r5, BASEPRI
   21468:	f383 8812 	msr	BASEPRI_MAX, r3
   2146c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21470:	4817      	ldr	r0, [pc, #92]	; (214d0 <z_sched_start+0x74>)
   21472:	f7fe fe7f 	bl	20174 <z_spin_lock_valid>
   21476:	b940      	cbnz	r0, 2148a <z_sched_start+0x2e>
   21478:	4916      	ldr	r1, [pc, #88]	; (214d4 <z_sched_start+0x78>)
   2147a:	4817      	ldr	r0, [pc, #92]	; (214d8 <z_sched_start+0x7c>)
   2147c:	2294      	movs	r2, #148	; 0x94
   2147e:	f002 fab3 	bl	239e8 <assert_print>
   21482:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21484:	4813      	ldr	r0, [pc, #76]	; (214d4 <z_sched_start+0x78>)
   21486:	f002 faa8 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   2148a:	4811      	ldr	r0, [pc, #68]	; (214d0 <z_sched_start+0x74>)
   2148c:	f7fe fe90 	bl	201b0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21490:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21492:	075a      	lsls	r2, r3, #29
   21494:	d40f      	bmi.n	214b6 <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21496:	480e      	ldr	r0, [pc, #56]	; (214d0 <z_sched_start+0x74>)
   21498:	f7fe fe7a 	bl	20190 <z_spin_unlock_valid>
   2149c:	b930      	cbnz	r0, 214ac <z_sched_start+0x50>
   2149e:	490d      	ldr	r1, [pc, #52]	; (214d4 <z_sched_start+0x78>)
   214a0:	480d      	ldr	r0, [pc, #52]	; (214d8 <z_sched_start+0x7c>)
   214a2:	22c2      	movs	r2, #194	; 0xc2
   214a4:	f002 faa0 	bl	239e8 <assert_print>
   214a8:	21c2      	movs	r1, #194	; 0xc2
   214aa:	e7eb      	b.n	21484 <z_sched_start+0x28>
	__asm__ volatile(
   214ac:	f385 8811 	msr	BASEPRI, r5
   214b0:	f3bf 8f6f 	isb	sy
}
   214b4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   214b6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   214ba:	4620      	mov	r0, r4
   214bc:	7363      	strb	r3, [r4, #13]
   214be:	f7ff fe97 	bl	211f0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   214c2:	4629      	mov	r1, r5
   214c4:	4802      	ldr	r0, [pc, #8]	; (214d0 <z_sched_start+0x74>)
}
   214c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   214ca:	f7ff bf93 	b.w	213f4 <z_reschedule>
   214ce:	bf00      	nop
   214d0:	20002548 	.word	0x20002548
   214d4:	000280f7 	.word	0x000280f7
   214d8:	000280bd 	.word	0x000280bd

000214dc <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   214dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   214de:	f04f 0340 	mov.w	r3, #64	; 0x40
   214e2:	f3ef 8411 	mrs	r4, BASEPRI
   214e6:	f383 8812 	msr	BASEPRI_MAX, r3
   214ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214ee:	481c      	ldr	r0, [pc, #112]	; (21560 <k_sched_lock+0x84>)
   214f0:	f7fe fe40 	bl	20174 <z_spin_lock_valid>
   214f4:	b938      	cbnz	r0, 21506 <k_sched_lock+0x2a>
   214f6:	491b      	ldr	r1, [pc, #108]	; (21564 <k_sched_lock+0x88>)
   214f8:	481b      	ldr	r0, [pc, #108]	; (21568 <k_sched_lock+0x8c>)
   214fa:	2294      	movs	r2, #148	; 0x94
   214fc:	f002 fa74 	bl	239e8 <assert_print>
   21500:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21502:	4818      	ldr	r0, [pc, #96]	; (21564 <k_sched_lock+0x88>)
   21504:	e00c      	b.n	21520 <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   21506:	4816      	ldr	r0, [pc, #88]	; (21560 <k_sched_lock+0x84>)
   21508:	f7fe fe52 	bl	201b0 <z_spin_lock_set_owner>
   2150c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21510:	b143      	cbz	r3, 21524 <k_sched_lock+0x48>
   21512:	4916      	ldr	r1, [pc, #88]	; (2156c <k_sched_lock+0x90>)
   21514:	4814      	ldr	r0, [pc, #80]	; (21568 <k_sched_lock+0x8c>)
   21516:	22fd      	movs	r2, #253	; 0xfd
   21518:	f002 fa66 	bl	239e8 <assert_print>
   2151c:	21fd      	movs	r1, #253	; 0xfd
   2151e:	4813      	ldr	r0, [pc, #76]	; (2156c <k_sched_lock+0x90>)
   21520:	f002 fa5b 	bl	239da <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   21524:	4b12      	ldr	r3, [pc, #72]	; (21570 <k_sched_lock+0x94>)
   21526:	689a      	ldr	r2, [r3, #8]
   21528:	7bd3      	ldrb	r3, [r2, #15]
   2152a:	2b01      	cmp	r3, #1
   2152c:	d106      	bne.n	2153c <k_sched_lock+0x60>
   2152e:	490f      	ldr	r1, [pc, #60]	; (2156c <k_sched_lock+0x90>)
   21530:	480d      	ldr	r0, [pc, #52]	; (21568 <k_sched_lock+0x8c>)
   21532:	22fe      	movs	r2, #254	; 0xfe
   21534:	f002 fa58 	bl	239e8 <assert_print>
   21538:	21fe      	movs	r1, #254	; 0xfe
   2153a:	e7f0      	b.n	2151e <k_sched_lock+0x42>
	--_current->base.sched_locked;
   2153c:	3b01      	subs	r3, #1
   2153e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21540:	4807      	ldr	r0, [pc, #28]	; (21560 <k_sched_lock+0x84>)
   21542:	f7fe fe25 	bl	20190 <z_spin_unlock_valid>
   21546:	b930      	cbnz	r0, 21556 <k_sched_lock+0x7a>
   21548:	4906      	ldr	r1, [pc, #24]	; (21564 <k_sched_lock+0x88>)
   2154a:	4807      	ldr	r0, [pc, #28]	; (21568 <k_sched_lock+0x8c>)
   2154c:	22c2      	movs	r2, #194	; 0xc2
   2154e:	f002 fa4b 	bl	239e8 <assert_print>
   21552:	21c2      	movs	r1, #194	; 0xc2
   21554:	e7d5      	b.n	21502 <k_sched_lock+0x26>
	__asm__ volatile(
   21556:	f384 8811 	msr	BASEPRI, r4
   2155a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2155e:	bd10      	pop	{r4, pc}
   21560:	20002548 	.word	0x20002548
   21564:	000280f7 	.word	0x000280f7
   21568:	000280bd 	.word	0x000280bd
   2156c:	0002b117 	.word	0x0002b117
   21570:	20002500 	.word	0x20002500

00021574 <k_sched_unlock>:

void k_sched_unlock(void)
{
   21574:	b510      	push	{r4, lr}
	__asm__ volatile(
   21576:	f04f 0340 	mov.w	r3, #64	; 0x40
   2157a:	f3ef 8411 	mrs	r4, BASEPRI
   2157e:	f383 8812 	msr	BASEPRI_MAX, r3
   21582:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21586:	4820      	ldr	r0, [pc, #128]	; (21608 <k_sched_unlock+0x94>)
   21588:	f7fe fdf4 	bl	20174 <z_spin_lock_valid>
   2158c:	b938      	cbnz	r0, 2159e <k_sched_unlock+0x2a>
   2158e:	491f      	ldr	r1, [pc, #124]	; (2160c <k_sched_unlock+0x98>)
   21590:	481f      	ldr	r0, [pc, #124]	; (21610 <k_sched_unlock+0x9c>)
   21592:	2294      	movs	r2, #148	; 0x94
   21594:	f002 fa28 	bl	239e8 <assert_print>
   21598:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2159a:	481c      	ldr	r0, [pc, #112]	; (2160c <k_sched_unlock+0x98>)
   2159c:	e00f      	b.n	215be <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   2159e:	481a      	ldr	r0, [pc, #104]	; (21608 <k_sched_unlock+0x94>)
   215a0:	f7fe fe06 	bl	201b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   215a4:	4b1b      	ldr	r3, [pc, #108]	; (21614 <k_sched_unlock+0xa0>)
   215a6:	689a      	ldr	r2, [r3, #8]
   215a8:	7bd3      	ldrb	r3, [r2, #15]
   215aa:	b953      	cbnz	r3, 215c2 <k_sched_unlock+0x4e>
   215ac:	491a      	ldr	r1, [pc, #104]	; (21618 <k_sched_unlock+0xa4>)
   215ae:	4818      	ldr	r0, [pc, #96]	; (21610 <k_sched_unlock+0x9c>)
   215b0:	f240 32e7 	movw	r2, #999	; 0x3e7
   215b4:	f002 fa18 	bl	239e8 <assert_print>
   215b8:	f240 31e7 	movw	r1, #999	; 0x3e7
   215bc:	4816      	ldr	r0, [pc, #88]	; (21618 <k_sched_unlock+0xa4>)
   215be:	f002 fa0c 	bl	239da <assert_post_action>
   215c2:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   215c6:	b140      	cbz	r0, 215da <k_sched_unlock+0x66>
   215c8:	4913      	ldr	r1, [pc, #76]	; (21618 <k_sched_unlock+0xa4>)
   215ca:	4811      	ldr	r0, [pc, #68]	; (21610 <k_sched_unlock+0x9c>)
   215cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   215d0:	f002 fa0a 	bl	239e8 <assert_print>
   215d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   215d8:	e7f0      	b.n	215bc <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   215da:	3301      	adds	r3, #1
   215dc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   215de:	f7ff fddb 	bl	21198 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215e2:	4809      	ldr	r0, [pc, #36]	; (21608 <k_sched_unlock+0x94>)
   215e4:	f7fe fdd4 	bl	20190 <z_spin_unlock_valid>
   215e8:	b930      	cbnz	r0, 215f8 <k_sched_unlock+0x84>
   215ea:	4908      	ldr	r1, [pc, #32]	; (2160c <k_sched_unlock+0x98>)
   215ec:	4808      	ldr	r0, [pc, #32]	; (21610 <k_sched_unlock+0x9c>)
   215ee:	22c2      	movs	r2, #194	; 0xc2
   215f0:	f002 f9fa 	bl	239e8 <assert_print>
   215f4:	21c2      	movs	r1, #194	; 0xc2
   215f6:	e7d0      	b.n	2159a <k_sched_unlock+0x26>
	__asm__ volatile(
   215f8:	f384 8811 	msr	BASEPRI, r4
   215fc:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   21600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   21604:	f005 bc84 	b.w	26f10 <z_reschedule_unlocked>
   21608:	20002548 	.word	0x20002548
   2160c:	000280f7 	.word	0x000280f7
   21610:	000280bd 	.word	0x000280bd
   21614:	20002500 	.word	0x20002500
   21618:	0002b0f5 	.word	0x0002b0f5

0002161c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   2161c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2161e:	4b0b      	ldr	r3, [pc, #44]	; (2164c <z_priq_dumb_remove+0x30>)
   21620:	4299      	cmp	r1, r3
   21622:	d10a      	bne.n	2163a <z_priq_dumb_remove+0x1e>
   21624:	490a      	ldr	r1, [pc, #40]	; (21650 <z_priq_dumb_remove+0x34>)
   21626:	480b      	ldr	r0, [pc, #44]	; (21654 <z_priq_dumb_remove+0x38>)
   21628:	f240 4273 	movw	r2, #1139	; 0x473
   2162c:	f002 f9dc 	bl	239e8 <assert_print>
   21630:	4807      	ldr	r0, [pc, #28]	; (21650 <z_priq_dumb_remove+0x34>)
   21632:	f240 4173 	movw	r1, #1139	; 0x473
   21636:	f002 f9d0 	bl	239da <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2163a:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   2163e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21640:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21642:	2300      	movs	r3, #0
	node->prev = NULL;
   21644:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   21648:	bd08      	pop	{r3, pc}
   2164a:	bf00      	nop
   2164c:	20001e30 	.word	0x20001e30
   21650:	0002b0f5 	.word	0x0002b0f5
   21654:	000280bd 	.word	0x000280bd

00021658 <move_thread_to_end_of_prio_q>:
{
   21658:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2165a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2165e:	7b43      	ldrb	r3, [r0, #13]
   21660:	2a00      	cmp	r2, #0
{
   21662:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21664:	da06      	bge.n	21674 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2166a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2166c:	4601      	mov	r1, r0
   2166e:	481d      	ldr	r0, [pc, #116]	; (216e4 <move_thread_to_end_of_prio_q+0x8c>)
   21670:	f7ff ffd4 	bl	2161c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21674:	7b63      	ldrb	r3, [r4, #13]
   21676:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2167a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2167c:	4b1a      	ldr	r3, [pc, #104]	; (216e8 <move_thread_to_end_of_prio_q+0x90>)
   2167e:	429c      	cmp	r4, r3
   21680:	d108      	bne.n	21694 <move_thread_to_end_of_prio_q+0x3c>
   21682:	491a      	ldr	r1, [pc, #104]	; (216ec <move_thread_to_end_of_prio_q+0x94>)
   21684:	481a      	ldr	r0, [pc, #104]	; (216f0 <move_thread_to_end_of_prio_q+0x98>)
   21686:	22ba      	movs	r2, #186	; 0xba
   21688:	f002 f9ae 	bl	239e8 <assert_print>
   2168c:	4817      	ldr	r0, [pc, #92]	; (216ec <move_thread_to_end_of_prio_q+0x94>)
   2168e:	21ba      	movs	r1, #186	; 0xba
   21690:	f002 f9a3 	bl	239da <assert_post_action>
	return list->head == list;
   21694:	4a17      	ldr	r2, [pc, #92]	; (216f4 <move_thread_to_end_of_prio_q+0x9c>)
   21696:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   21698:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   2169a:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2169e:	428b      	cmp	r3, r1
   216a0:	bf08      	it	eq
   216a2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   216a4:	b923      	cbnz	r3, 216b0 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   216a6:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   216aa:	6004      	str	r4, [r0, #0]
	list->tail = node;
   216ac:	6254      	str	r4, [r2, #36]	; 0x24
}
   216ae:	e00c      	b.n	216ca <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   216b0:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   216b4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   216b8:	42b5      	cmp	r5, r6
   216ba:	d00e      	beq.n	216da <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   216bc:	42ae      	cmp	r6, r5
   216be:	dd0c      	ble.n	216da <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   216c0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   216c2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   216c6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   216c8:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   216ca:	6890      	ldr	r0, [r2, #8]
   216cc:	1b03      	subs	r3, r0, r4
   216ce:	4258      	negs	r0, r3
}
   216d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   216d4:	4158      	adcs	r0, r3
   216d6:	f7ff bd5f 	b.w	21198 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   216da:	4298      	cmp	r0, r3
   216dc:	d0e3      	beq.n	216a6 <move_thread_to_end_of_prio_q+0x4e>
   216de:	681b      	ldr	r3, [r3, #0]
   216e0:	e7e0      	b.n	216a4 <move_thread_to_end_of_prio_q+0x4c>
   216e2:	bf00      	nop
   216e4:	20002520 	.word	0x20002520
   216e8:	20001e30 	.word	0x20001e30
   216ec:	0002b0f5 	.word	0x0002b0f5
   216f0:	000280bd 	.word	0x000280bd
   216f4:	20002500 	.word	0x20002500

000216f8 <z_time_slice>:
{
   216f8:	b570      	push	{r4, r5, r6, lr}
   216fa:	4605      	mov	r5, r0
	__asm__ volatile(
   216fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   21700:	f3ef 8611 	mrs	r6, BASEPRI
   21704:	f383 8812 	msr	BASEPRI_MAX, r3
   21708:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2170c:	4824      	ldr	r0, [pc, #144]	; (217a0 <z_time_slice+0xa8>)
   2170e:	f7fe fd31 	bl	20174 <z_spin_lock_valid>
   21712:	b940      	cbnz	r0, 21726 <z_time_slice+0x2e>
   21714:	4923      	ldr	r1, [pc, #140]	; (217a4 <z_time_slice+0xac>)
   21716:	4824      	ldr	r0, [pc, #144]	; (217a8 <z_time_slice+0xb0>)
   21718:	2294      	movs	r2, #148	; 0x94
   2171a:	f002 f965 	bl	239e8 <assert_print>
   2171e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21720:	4820      	ldr	r0, [pc, #128]	; (217a4 <z_time_slice+0xac>)
   21722:	f002 f95a 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   21726:	481e      	ldr	r0, [pc, #120]	; (217a0 <z_time_slice+0xa8>)
   21728:	f7fe fd42 	bl	201b0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   2172c:	4b1f      	ldr	r3, [pc, #124]	; (217ac <z_time_slice+0xb4>)
   2172e:	4a20      	ldr	r2, [pc, #128]	; (217b0 <z_time_slice+0xb8>)
   21730:	689c      	ldr	r4, [r3, #8]
   21732:	6811      	ldr	r1, [r2, #0]
   21734:	428c      	cmp	r4, r1
   21736:	d10d      	bne.n	21754 <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   21738:	4620      	mov	r0, r4
   2173a:	f7ff fd19 	bl	21170 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2173e:	4818      	ldr	r0, [pc, #96]	; (217a0 <z_time_slice+0xa8>)
   21740:	f7fe fd26 	bl	20190 <z_spin_unlock_valid>
   21744:	bb30      	cbnz	r0, 21794 <z_time_slice+0x9c>
   21746:	4917      	ldr	r1, [pc, #92]	; (217a4 <z_time_slice+0xac>)
   21748:	4817      	ldr	r0, [pc, #92]	; (217a8 <z_time_slice+0xb0>)
   2174a:	22c2      	movs	r2, #194	; 0xc2
   2174c:	f002 f94c 	bl	239e8 <assert_print>
   21750:	21c2      	movs	r1, #194	; 0xc2
   21752:	e7e5      	b.n	21720 <z_time_slice+0x28>
	pending_current = NULL;
   21754:	2100      	movs	r1, #0
   21756:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   21758:	4a16      	ldr	r2, [pc, #88]	; (217b4 <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   2175a:	6812      	ldr	r2, [r2, #0]
   2175c:	b1c2      	cbz	r2, 21790 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   2175e:	89e2      	ldrh	r2, [r4, #14]
   21760:	2a7f      	cmp	r2, #127	; 0x7f
   21762:	d815      	bhi.n	21790 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   21764:	7b62      	ldrb	r2, [r4, #13]
   21766:	06d2      	lsls	r2, r2, #27
   21768:	d112      	bne.n	21790 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2176a:	4a13      	ldr	r2, [pc, #76]	; (217b8 <z_time_slice+0xc0>)
   2176c:	f994 100e 	ldrsb.w	r1, [r4, #14]
   21770:	6812      	ldr	r2, [r2, #0]
   21772:	4291      	cmp	r1, r2
   21774:	db0c      	blt.n	21790 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   21776:	4a11      	ldr	r2, [pc, #68]	; (217bc <z_time_slice+0xc4>)
   21778:	4294      	cmp	r4, r2
   2177a:	d009      	beq.n	21790 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   2177c:	691a      	ldr	r2, [r3, #16]
   2177e:	42aa      	cmp	r2, r5
   21780:	dc03      	bgt.n	2178a <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   21782:	4620      	mov	r0, r4
   21784:	f7ff ff68 	bl	21658 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   21788:	e7d6      	b.n	21738 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   2178a:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   2178c:	611a      	str	r2, [r3, #16]
   2178e:	e7d6      	b.n	2173e <z_time_slice+0x46>
   21790:	2200      	movs	r2, #0
   21792:	e7fb      	b.n	2178c <z_time_slice+0x94>
	__asm__ volatile(
   21794:	f386 8811 	msr	BASEPRI, r6
   21798:	f3bf 8f6f 	isb	sy
}
   2179c:	bd70      	pop	{r4, r5, r6, pc}
   2179e:	bf00      	nop
   217a0:	20002548 	.word	0x20002548
   217a4:	000280f7 	.word	0x000280f7
   217a8:	000280bd 	.word	0x000280bd
   217ac:	20002500 	.word	0x20002500
   217b0:	2000253c 	.word	0x2000253c
   217b4:	20002544 	.word	0x20002544
   217b8:	20002540 	.word	0x20002540
   217bc:	20001e30 	.word	0x20001e30

000217c0 <unready_thread>:
{
   217c0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   217c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
   217c6:	7b43      	ldrb	r3, [r0, #13]
   217c8:	2a00      	cmp	r2, #0
{
   217ca:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   217cc:	da06      	bge.n	217dc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   217ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   217d2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   217d4:	4601      	mov	r1, r0
   217d6:	4806      	ldr	r0, [pc, #24]	; (217f0 <unready_thread+0x30>)
   217d8:	f7ff ff20 	bl	2161c <z_priq_dumb_remove>
	update_cache(thread == _current);
   217dc:	4b05      	ldr	r3, [pc, #20]	; (217f4 <unready_thread+0x34>)
   217de:	6898      	ldr	r0, [r3, #8]
   217e0:	1b03      	subs	r3, r0, r4
   217e2:	4258      	negs	r0, r3
}
   217e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   217e8:	4158      	adcs	r0, r3
   217ea:	f7ff bcd5 	b.w	21198 <update_cache>
   217ee:	bf00      	nop
   217f0:	20002520 	.word	0x20002520
   217f4:	20002500 	.word	0x20002500

000217f8 <add_to_waitq_locked>:
{
   217f8:	b538      	push	{r3, r4, r5, lr}
   217fa:	4604      	mov	r4, r0
   217fc:	460d      	mov	r5, r1
	unready_thread(thread);
   217fe:	f7ff ffdf 	bl	217c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   21802:	7b63      	ldrb	r3, [r4, #13]
   21804:	f043 0302 	orr.w	r3, r3, #2
   21808:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2180a:	b345      	cbz	r5, 2185e <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2180c:	4b14      	ldr	r3, [pc, #80]	; (21860 <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   2180e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21810:	429c      	cmp	r4, r3
   21812:	d108      	bne.n	21826 <add_to_waitq_locked+0x2e>
   21814:	4913      	ldr	r1, [pc, #76]	; (21864 <add_to_waitq_locked+0x6c>)
   21816:	4814      	ldr	r0, [pc, #80]	; (21868 <add_to_waitq_locked+0x70>)
   21818:	22ba      	movs	r2, #186	; 0xba
   2181a:	f002 f8e5 	bl	239e8 <assert_print>
   2181e:	4811      	ldr	r0, [pc, #68]	; (21864 <add_to_waitq_locked+0x6c>)
   21820:	21ba      	movs	r1, #186	; 0xba
   21822:	f002 f8da 	bl	239da <assert_post_action>
	return list->head == list;
   21826:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21828:	429d      	cmp	r5, r3
   2182a:	d109      	bne.n	21840 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   2182c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2182e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21832:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21834:	606c      	str	r4, [r5, #4]
}
   21836:	e012      	b.n	2185e <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   21838:	686a      	ldr	r2, [r5, #4]
   2183a:	4293      	cmp	r3, r2
   2183c:	d0f6      	beq.n	2182c <add_to_waitq_locked+0x34>
   2183e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21840:	2b00      	cmp	r3, #0
   21842:	d0f3      	beq.n	2182c <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   21844:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21848:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2184c:	428a      	cmp	r2, r1
   2184e:	d0f3      	beq.n	21838 <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21850:	4291      	cmp	r1, r2
   21852:	ddf1      	ble.n	21838 <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   21854:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21856:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2185a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2185c:	605c      	str	r4, [r3, #4]
}
   2185e:	bd38      	pop	{r3, r4, r5, pc}
   21860:	20001e30 	.word	0x20001e30
   21864:	0002b0f5 	.word	0x0002b0f5
   21868:	000280bd 	.word	0x000280bd

0002186c <pend_locked>:
{
   2186c:	b570      	push	{r4, r5, r6, lr}
   2186e:	4615      	mov	r5, r2
   21870:	461c      	mov	r4, r3
   21872:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   21874:	f7ff ffc0 	bl	217f8 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21878:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2187c:	bf08      	it	eq
   2187e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   21882:	d008      	beq.n	21896 <pend_locked+0x2a>
   21884:	462a      	mov	r2, r5
   21886:	4623      	mov	r3, r4
   21888:	f106 0018 	add.w	r0, r6, #24
   2188c:	4902      	ldr	r1, [pc, #8]	; (21898 <pend_locked+0x2c>)
}
   2188e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21892:	f000 bce7 	b.w	22264 <z_add_timeout>
   21896:	bd70      	pop	{r4, r5, r6, pc}
   21898:	00021ba1 	.word	0x00021ba1

0002189c <z_pend_curr>:
{
   2189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   218a0:	f8df a094 	ldr.w	sl, [pc, #148]	; 21938 <z_pend_curr+0x9c>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   218a4:	4c25      	ldr	r4, [pc, #148]	; (2193c <z_pend_curr+0xa0>)
	pending_current = _current;
   218a6:	4b26      	ldr	r3, [pc, #152]	; (21940 <z_pend_curr+0xa4>)
{
   218a8:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   218aa:	42a0      	cmp	r0, r4
	pending_current = _current;
   218ac:	f8da 2008 	ldr.w	r2, [sl, #8]
   218b0:	601a      	str	r2, [r3, #0]
{
   218b2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   218b6:	4605      	mov	r5, r0
   218b8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   218ba:	d10a      	bne.n	218d2 <z_pend_curr+0x36>
   218bc:	4921      	ldr	r1, [pc, #132]	; (21944 <z_pend_curr+0xa8>)
   218be:	4822      	ldr	r0, [pc, #136]	; (21948 <z_pend_curr+0xac>)
   218c0:	f240 324e 	movw	r2, #846	; 0x34e
   218c4:	f002 f890 	bl	239e8 <assert_print>
   218c8:	481e      	ldr	r0, [pc, #120]	; (21944 <z_pend_curr+0xa8>)
   218ca:	f240 314e 	movw	r1, #846	; 0x34e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218ce:	f002 f884 	bl	239da <assert_post_action>
	__asm__ volatile(
   218d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   218d6:	f3ef 8311 	mrs	r3, BASEPRI
   218da:	f382 8812 	msr	BASEPRI_MAX, r2
   218de:	f3bf 8f6f 	isb	sy
   218e2:	4620      	mov	r0, r4
   218e4:	f7fe fc46 	bl	20174 <z_spin_lock_valid>
   218e8:	b938      	cbnz	r0, 218fa <z_pend_curr+0x5e>
   218ea:	4918      	ldr	r1, [pc, #96]	; (2194c <z_pend_curr+0xb0>)
   218ec:	4816      	ldr	r0, [pc, #88]	; (21948 <z_pend_curr+0xac>)
   218ee:	2294      	movs	r2, #148	; 0x94
   218f0:	f002 f87a 	bl	239e8 <assert_print>
   218f4:	2194      	movs	r1, #148	; 0x94
   218f6:	4815      	ldr	r0, [pc, #84]	; (2194c <z_pend_curr+0xb0>)
   218f8:	e7e9      	b.n	218ce <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   218fa:	4620      	mov	r0, r4
   218fc:	f7fe fc58 	bl	201b0 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   21900:	f8da 0008 	ldr.w	r0, [sl, #8]
   21904:	4642      	mov	r2, r8
   21906:	464b      	mov	r3, r9
   21908:	4639      	mov	r1, r7
   2190a:	f7ff ffaf 	bl	2186c <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2190e:	4628      	mov	r0, r5
   21910:	f7fe fc3e 	bl	20190 <z_spin_unlock_valid>
   21914:	b930      	cbnz	r0, 21924 <z_pend_curr+0x88>
   21916:	490d      	ldr	r1, [pc, #52]	; (2194c <z_pend_curr+0xb0>)
   21918:	480b      	ldr	r0, [pc, #44]	; (21948 <z_pend_curr+0xac>)
   2191a:	22e1      	movs	r2, #225	; 0xe1
   2191c:	f002 f864 	bl	239e8 <assert_print>
   21920:	21e1      	movs	r1, #225	; 0xe1
   21922:	e7e8      	b.n	218f6 <z_pend_curr+0x5a>
   21924:	4620      	mov	r0, r4
   21926:	f7fe fc33 	bl	20190 <z_spin_unlock_valid>
   2192a:	2800      	cmp	r0, #0
   2192c:	d0f3      	beq.n	21916 <z_pend_curr+0x7a>
   2192e:	4630      	mov	r0, r6
}
   21930:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21934:	f7f1 bb68 	b.w	13008 <arch_swap>
   21938:	20002500 	.word	0x20002500
   2193c:	20002548 	.word	0x20002548
   21940:	2000253c 	.word	0x2000253c
   21944:	0002b0f5 	.word	0x0002b0f5
   21948:	000280bd 	.word	0x000280bd
   2194c:	000280f7 	.word	0x000280f7

00021950 <z_set_prio>:
{
   21950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21954:	4604      	mov	r4, r0
   21956:	460e      	mov	r6, r1
   21958:	f04f 0340 	mov.w	r3, #64	; 0x40
   2195c:	f3ef 8911 	mrs	r9, BASEPRI
   21960:	f383 8812 	msr	BASEPRI_MAX, r3
   21964:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21968:	4831      	ldr	r0, [pc, #196]	; (21a30 <z_set_prio+0xe0>)
   2196a:	f7fe fc03 	bl	20174 <z_spin_lock_valid>
   2196e:	4607      	mov	r7, r0
   21970:	b938      	cbnz	r0, 21982 <z_set_prio+0x32>
   21972:	4930      	ldr	r1, [pc, #192]	; (21a34 <z_set_prio+0xe4>)
   21974:	4830      	ldr	r0, [pc, #192]	; (21a38 <z_set_prio+0xe8>)
   21976:	2294      	movs	r2, #148	; 0x94
   21978:	f002 f836 	bl	239e8 <assert_print>
   2197c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2197e:	482d      	ldr	r0, [pc, #180]	; (21a34 <z_set_prio+0xe4>)
   21980:	e020      	b.n	219c4 <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   21982:	482b      	ldr	r0, [pc, #172]	; (21a30 <z_set_prio+0xe0>)
   21984:	f7fe fc14 	bl	201b0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   21988:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2198a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2198c:	b276      	sxtb	r6, r6
   2198e:	d11b      	bne.n	219c8 <z_set_prio+0x78>
	return node->next != NULL;
   21990:	69a5      	ldr	r5, [r4, #24]
   21992:	b9cd      	cbnz	r5, 219c8 <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   21994:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 21a3c <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2199c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2199e:	4621      	mov	r1, r4
   219a0:	4640      	mov	r0, r8
   219a2:	f7ff fe3b 	bl	2161c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   219a6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   219a8:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   219aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   219ae:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   219b0:	4b23      	ldr	r3, [pc, #140]	; (21a40 <z_set_prio+0xf0>)
   219b2:	429c      	cmp	r4, r3
   219b4:	d115      	bne.n	219e2 <z_set_prio+0x92>
   219b6:	4923      	ldr	r1, [pc, #140]	; (21a44 <z_set_prio+0xf4>)
   219b8:	481f      	ldr	r0, [pc, #124]	; (21a38 <z_set_prio+0xe8>)
   219ba:	22ba      	movs	r2, #186	; 0xba
   219bc:	f002 f814 	bl	239e8 <assert_print>
   219c0:	4820      	ldr	r0, [pc, #128]	; (21a44 <z_set_prio+0xf4>)
   219c2:	21ba      	movs	r1, #186	; 0xba
   219c4:	f002 f809 	bl	239da <assert_post_action>
			thread->base.prio = prio;
   219c8:	73a6      	strb	r6, [r4, #14]
   219ca:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219cc:	4818      	ldr	r0, [pc, #96]	; (21a30 <z_set_prio+0xe0>)
   219ce:	f7fe fbdf 	bl	20190 <z_spin_unlock_valid>
   219d2:	bb30      	cbnz	r0, 21a22 <z_set_prio+0xd2>
   219d4:	4917      	ldr	r1, [pc, #92]	; (21a34 <z_set_prio+0xe4>)
   219d6:	4818      	ldr	r0, [pc, #96]	; (21a38 <z_set_prio+0xe8>)
   219d8:	22c2      	movs	r2, #194	; 0xc2
   219da:	f002 f805 	bl	239e8 <assert_print>
   219de:	21c2      	movs	r1, #194	; 0xc2
   219e0:	e7cd      	b.n	2197e <z_set_prio+0x2e>
	return list->head == list;
   219e2:	4643      	mov	r3, r8
   219e4:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   219e8:	4542      	cmp	r2, r8
   219ea:	bf18      	it	ne
   219ec:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   219ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   219f0:	b925      	cbnz	r5, 219fc <z_set_prio+0xac>
	node->prev = tail;
   219f2:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   219f6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   219f8:	625c      	str	r4, [r3, #36]	; 0x24
}
   219fa:	e00a      	b.n	21a12 <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   219fc:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   21a00:	428e      	cmp	r6, r1
   21a02:	d00a      	beq.n	21a1a <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21a04:	42b1      	cmp	r1, r6
   21a06:	dd08      	ble.n	21a1a <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   21a08:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   21a0a:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   21a0e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   21a10:	606c      	str	r4, [r5, #4]
			update_cache(1);
   21a12:	2001      	movs	r0, #1
   21a14:	f7ff fbc0 	bl	21198 <update_cache>
   21a18:	e7d8      	b.n	219cc <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   21a1a:	42aa      	cmp	r2, r5
   21a1c:	d0e9      	beq.n	219f2 <z_set_prio+0xa2>
   21a1e:	682d      	ldr	r5, [r5, #0]
   21a20:	e7e6      	b.n	219f0 <z_set_prio+0xa0>
	__asm__ volatile(
   21a22:	f389 8811 	msr	BASEPRI, r9
   21a26:	f3bf 8f6f 	isb	sy
}
   21a2a:	4638      	mov	r0, r7
   21a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21a30:	20002548 	.word	0x20002548
   21a34:	000280f7 	.word	0x000280f7
   21a38:	000280bd 	.word	0x000280bd
   21a3c:	20002520 	.word	0x20002520
   21a40:	20001e30 	.word	0x20001e30
   21a44:	0002b0f5 	.word	0x0002b0f5

00021a48 <z_impl_k_thread_suspend>:
{
   21a48:	b570      	push	{r4, r5, r6, lr}
   21a4a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21a4c:	3018      	adds	r0, #24
   21a4e:	f000 fcb5 	bl	223bc <z_abort_timeout>
	__asm__ volatile(
   21a52:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a56:	f3ef 8611 	mrs	r6, BASEPRI
   21a5a:	f383 8812 	msr	BASEPRI_MAX, r3
   21a5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a62:	481f      	ldr	r0, [pc, #124]	; (21ae0 <z_impl_k_thread_suspend+0x98>)
   21a64:	f7fe fb86 	bl	20174 <z_spin_lock_valid>
   21a68:	b940      	cbnz	r0, 21a7c <z_impl_k_thread_suspend+0x34>
   21a6a:	491e      	ldr	r1, [pc, #120]	; (21ae4 <z_impl_k_thread_suspend+0x9c>)
   21a6c:	481e      	ldr	r0, [pc, #120]	; (21ae8 <z_impl_k_thread_suspend+0xa0>)
   21a6e:	2294      	movs	r2, #148	; 0x94
   21a70:	f001 ffba 	bl	239e8 <assert_print>
   21a74:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a76:	481b      	ldr	r0, [pc, #108]	; (21ae4 <z_impl_k_thread_suspend+0x9c>)
   21a78:	f001 ffaf 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   21a7c:	4818      	ldr	r0, [pc, #96]	; (21ae0 <z_impl_k_thread_suspend+0x98>)
   21a7e:	f7fe fb97 	bl	201b0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21a82:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   21a86:	7b63      	ldrb	r3, [r4, #13]
   21a88:	2a00      	cmp	r2, #0
   21a8a:	da06      	bge.n	21a9a <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21a90:	4816      	ldr	r0, [pc, #88]	; (21aec <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a92:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21a94:	4621      	mov	r1, r4
   21a96:	f7ff fdc1 	bl	2161c <z_priq_dumb_remove>
		update_cache(thread == _current);
   21a9a:	4d15      	ldr	r5, [pc, #84]	; (21af0 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21a9c:	7b63      	ldrb	r3, [r4, #13]
   21a9e:	68a8      	ldr	r0, [r5, #8]
   21aa0:	f043 0310 	orr.w	r3, r3, #16
   21aa4:	7363      	strb	r3, [r4, #13]
   21aa6:	1b03      	subs	r3, r0, r4
   21aa8:	4258      	negs	r0, r3
   21aaa:	4158      	adcs	r0, r3
   21aac:	f7ff fb74 	bl	21198 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ab0:	480b      	ldr	r0, [pc, #44]	; (21ae0 <z_impl_k_thread_suspend+0x98>)
   21ab2:	f7fe fb6d 	bl	20190 <z_spin_unlock_valid>
   21ab6:	b930      	cbnz	r0, 21ac6 <z_impl_k_thread_suspend+0x7e>
   21ab8:	490a      	ldr	r1, [pc, #40]	; (21ae4 <z_impl_k_thread_suspend+0x9c>)
   21aba:	480b      	ldr	r0, [pc, #44]	; (21ae8 <z_impl_k_thread_suspend+0xa0>)
   21abc:	22c2      	movs	r2, #194	; 0xc2
   21abe:	f001 ff93 	bl	239e8 <assert_print>
   21ac2:	21c2      	movs	r1, #194	; 0xc2
   21ac4:	e7d7      	b.n	21a76 <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   21ac6:	f386 8811 	msr	BASEPRI, r6
   21aca:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21ace:	68ab      	ldr	r3, [r5, #8]
   21ad0:	42a3      	cmp	r3, r4
   21ad2:	d103      	bne.n	21adc <z_impl_k_thread_suspend+0x94>
}
   21ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21ad8:	f005 ba1a 	b.w	26f10 <z_reschedule_unlocked>
}
   21adc:	bd70      	pop	{r4, r5, r6, pc}
   21ade:	bf00      	nop
   21ae0:	20002548 	.word	0x20002548
   21ae4:	000280f7 	.word	0x000280f7
   21ae8:	000280bd 	.word	0x000280bd
   21aec:	20002520 	.word	0x20002520
   21af0:	20002500 	.word	0x20002500

00021af4 <unpend_thread_no_timeout>:
{
   21af4:	b510      	push	{r4, lr}
   21af6:	4604      	mov	r4, r0
   21af8:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   21afa:	b950      	cbnz	r0, 21b12 <unpend_thread_no_timeout+0x1e>
   21afc:	490a      	ldr	r1, [pc, #40]	; (21b28 <unpend_thread_no_timeout+0x34>)
   21afe:	480b      	ldr	r0, [pc, #44]	; (21b2c <unpend_thread_no_timeout+0x38>)
   21b00:	f240 22d6 	movw	r2, #726	; 0x2d6
   21b04:	f001 ff70 	bl	239e8 <assert_print>
   21b08:	4807      	ldr	r0, [pc, #28]	; (21b28 <unpend_thread_no_timeout+0x34>)
   21b0a:	f240 21d6 	movw	r1, #726	; 0x2d6
   21b0e:	f001 ff64 	bl	239da <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21b12:	4621      	mov	r1, r4
   21b14:	f7ff fd82 	bl	2161c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21b18:	7b63      	ldrb	r3, [r4, #13]
   21b1a:	f023 0302 	bic.w	r3, r3, #2
   21b1e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21b20:	2300      	movs	r3, #0
   21b22:	60a3      	str	r3, [r4, #8]
}
   21b24:	bd10      	pop	{r4, pc}
   21b26:	bf00      	nop
   21b28:	0002b0f5 	.word	0x0002b0f5
   21b2c:	000280bd 	.word	0x000280bd

00021b30 <z_unpend_thread>:
{
   21b30:	b538      	push	{r3, r4, r5, lr}
   21b32:	4604      	mov	r4, r0
	__asm__ volatile(
   21b34:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b38:	f3ef 8511 	mrs	r5, BASEPRI
   21b3c:	f383 8812 	msr	BASEPRI_MAX, r3
   21b40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b44:	4813      	ldr	r0, [pc, #76]	; (21b94 <z_unpend_thread+0x64>)
   21b46:	f7fe fb15 	bl	20174 <z_spin_lock_valid>
   21b4a:	b940      	cbnz	r0, 21b5e <z_unpend_thread+0x2e>
   21b4c:	4912      	ldr	r1, [pc, #72]	; (21b98 <z_unpend_thread+0x68>)
   21b4e:	4813      	ldr	r0, [pc, #76]	; (21b9c <z_unpend_thread+0x6c>)
   21b50:	2294      	movs	r2, #148	; 0x94
   21b52:	f001 ff49 	bl	239e8 <assert_print>
   21b56:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b58:	480f      	ldr	r0, [pc, #60]	; (21b98 <z_unpend_thread+0x68>)
   21b5a:	f001 ff3e 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   21b5e:	480d      	ldr	r0, [pc, #52]	; (21b94 <z_unpend_thread+0x64>)
   21b60:	f7fe fb26 	bl	201b0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   21b64:	4620      	mov	r0, r4
   21b66:	f7ff ffc5 	bl	21af4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b6a:	480a      	ldr	r0, [pc, #40]	; (21b94 <z_unpend_thread+0x64>)
   21b6c:	f7fe fb10 	bl	20190 <z_spin_unlock_valid>
   21b70:	b930      	cbnz	r0, 21b80 <z_unpend_thread+0x50>
   21b72:	4909      	ldr	r1, [pc, #36]	; (21b98 <z_unpend_thread+0x68>)
   21b74:	4809      	ldr	r0, [pc, #36]	; (21b9c <z_unpend_thread+0x6c>)
   21b76:	22c2      	movs	r2, #194	; 0xc2
   21b78:	f001 ff36 	bl	239e8 <assert_print>
   21b7c:	21c2      	movs	r1, #194	; 0xc2
   21b7e:	e7eb      	b.n	21b58 <z_unpend_thread+0x28>
	__asm__ volatile(
   21b80:	f385 8811 	msr	BASEPRI, r5
   21b84:	f3bf 8f6f 	isb	sy
   21b88:	f104 0018 	add.w	r0, r4, #24
}
   21b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21b90:	f000 bc14 	b.w	223bc <z_abort_timeout>
   21b94:	20002548 	.word	0x20002548
   21b98:	000280f7 	.word	0x000280f7
   21b9c:	000280bd 	.word	0x000280bd

00021ba0 <z_thread_timeout>:
{
   21ba0:	b570      	push	{r4, r5, r6, lr}
   21ba2:	4604      	mov	r4, r0
	__asm__ volatile(
   21ba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ba8:	f3ef 8611 	mrs	r6, BASEPRI
   21bac:	f383 8812 	msr	BASEPRI_MAX, r3
   21bb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bb4:	481a      	ldr	r0, [pc, #104]	; (21c20 <z_thread_timeout+0x80>)
   21bb6:	f7fe fadd 	bl	20174 <z_spin_lock_valid>
   21bba:	b940      	cbnz	r0, 21bce <z_thread_timeout+0x2e>
   21bbc:	4919      	ldr	r1, [pc, #100]	; (21c24 <z_thread_timeout+0x84>)
   21bbe:	481a      	ldr	r0, [pc, #104]	; (21c28 <z_thread_timeout+0x88>)
   21bc0:	2294      	movs	r2, #148	; 0x94
   21bc2:	f001 ff11 	bl	239e8 <assert_print>
   21bc6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21bc8:	4816      	ldr	r0, [pc, #88]	; (21c24 <z_thread_timeout+0x84>)
   21bca:	f001 ff06 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   21bce:	4814      	ldr	r0, [pc, #80]	; (21c20 <z_thread_timeout+0x80>)
   21bd0:	f7fe faee 	bl	201b0 <z_spin_lock_set_owner>
		if (!killed) {
   21bd4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21bd8:	f013 0f28 	tst.w	r3, #40	; 0x28
   21bdc:	d110      	bne.n	21c00 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   21bde:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   21be2:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   21be6:	b113      	cbz	r3, 21bee <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   21be8:	4628      	mov	r0, r5
   21bea:	f7ff ff83 	bl	21af4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21bee:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21bf2:	f023 0314 	bic.w	r3, r3, #20
   21bf6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   21bfa:	4628      	mov	r0, r5
   21bfc:	f7ff faf8 	bl	211f0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c00:	4807      	ldr	r0, [pc, #28]	; (21c20 <z_thread_timeout+0x80>)
   21c02:	f7fe fac5 	bl	20190 <z_spin_unlock_valid>
   21c06:	b930      	cbnz	r0, 21c16 <z_thread_timeout+0x76>
   21c08:	4906      	ldr	r1, [pc, #24]	; (21c24 <z_thread_timeout+0x84>)
   21c0a:	4807      	ldr	r0, [pc, #28]	; (21c28 <z_thread_timeout+0x88>)
   21c0c:	22c2      	movs	r2, #194	; 0xc2
   21c0e:	f001 feeb 	bl	239e8 <assert_print>
   21c12:	21c2      	movs	r1, #194	; 0xc2
   21c14:	e7d8      	b.n	21bc8 <z_thread_timeout+0x28>
	__asm__ volatile(
   21c16:	f386 8811 	msr	BASEPRI, r6
   21c1a:	f3bf 8f6f 	isb	sy
}
   21c1e:	bd70      	pop	{r4, r5, r6, pc}
   21c20:	20002548 	.word	0x20002548
   21c24:	000280f7 	.word	0x000280f7
   21c28:	000280bd 	.word	0x000280bd

00021c2c <z_unpend1_no_timeout>:
{
   21c2c:	b570      	push	{r4, r5, r6, lr}
   21c2e:	4605      	mov	r5, r0
	__asm__ volatile(
   21c30:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c34:	f3ef 8611 	mrs	r6, BASEPRI
   21c38:	f383 8812 	msr	BASEPRI_MAX, r3
   21c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c40:	4814      	ldr	r0, [pc, #80]	; (21c94 <z_unpend1_no_timeout+0x68>)
   21c42:	f7fe fa97 	bl	20174 <z_spin_lock_valid>
   21c46:	b940      	cbnz	r0, 21c5a <z_unpend1_no_timeout+0x2e>
   21c48:	4913      	ldr	r1, [pc, #76]	; (21c98 <z_unpend1_no_timeout+0x6c>)
   21c4a:	4814      	ldr	r0, [pc, #80]	; (21c9c <z_unpend1_no_timeout+0x70>)
   21c4c:	2294      	movs	r2, #148	; 0x94
   21c4e:	f001 fecb 	bl	239e8 <assert_print>
   21c52:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c54:	4810      	ldr	r0, [pc, #64]	; (21c98 <z_unpend1_no_timeout+0x6c>)
   21c56:	f001 fec0 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   21c5a:	480e      	ldr	r0, [pc, #56]	; (21c94 <z_unpend1_no_timeout+0x68>)
   21c5c:	f7fe faa8 	bl	201b0 <z_spin_lock_set_owner>
	return list->head == list;
   21c60:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c62:	42a5      	cmp	r5, r4
   21c64:	d00e      	beq.n	21c84 <z_unpend1_no_timeout+0x58>
		if (thread != NULL) {
   21c66:	b114      	cbz	r4, 21c6e <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
   21c68:	4620      	mov	r0, r4
   21c6a:	f7ff ff43 	bl	21af4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c6e:	4809      	ldr	r0, [pc, #36]	; (21c94 <z_unpend1_no_timeout+0x68>)
   21c70:	f7fe fa8e 	bl	20190 <z_spin_unlock_valid>
   21c74:	b940      	cbnz	r0, 21c88 <z_unpend1_no_timeout+0x5c>
   21c76:	4908      	ldr	r1, [pc, #32]	; (21c98 <z_unpend1_no_timeout+0x6c>)
   21c78:	4808      	ldr	r0, [pc, #32]	; (21c9c <z_unpend1_no_timeout+0x70>)
   21c7a:	22c2      	movs	r2, #194	; 0xc2
   21c7c:	f001 feb4 	bl	239e8 <assert_print>
   21c80:	21c2      	movs	r1, #194	; 0xc2
   21c82:	e7e7      	b.n	21c54 <z_unpend1_no_timeout+0x28>
   21c84:	2400      	movs	r4, #0
   21c86:	e7f2      	b.n	21c6e <z_unpend1_no_timeout+0x42>
	__asm__ volatile(
   21c88:	f386 8811 	msr	BASEPRI, r6
   21c8c:	f3bf 8f6f 	isb	sy
}
   21c90:	4620      	mov	r0, r4
   21c92:	bd70      	pop	{r4, r5, r6, pc}
   21c94:	20002548 	.word	0x20002548
   21c98:	000280f7 	.word	0x000280f7
   21c9c:	000280bd 	.word	0x000280bd

00021ca0 <z_unpend_first_thread>:
{
   21ca0:	b570      	push	{r4, r5, r6, lr}
   21ca2:	4605      	mov	r5, r0
	__asm__ volatile(
   21ca4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ca8:	f3ef 8611 	mrs	r6, BASEPRI
   21cac:	f383 8812 	msr	BASEPRI_MAX, r3
   21cb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21cb4:	4816      	ldr	r0, [pc, #88]	; (21d10 <z_unpend_first_thread+0x70>)
   21cb6:	f7fe fa5d 	bl	20174 <z_spin_lock_valid>
   21cba:	b940      	cbnz	r0, 21cce <z_unpend_first_thread+0x2e>
   21cbc:	4915      	ldr	r1, [pc, #84]	; (21d14 <z_unpend_first_thread+0x74>)
   21cbe:	4816      	ldr	r0, [pc, #88]	; (21d18 <z_unpend_first_thread+0x78>)
   21cc0:	2294      	movs	r2, #148	; 0x94
   21cc2:	f001 fe91 	bl	239e8 <assert_print>
   21cc6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cc8:	4812      	ldr	r0, [pc, #72]	; (21d14 <z_unpend_first_thread+0x74>)
   21cca:	f001 fe86 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   21cce:	4810      	ldr	r0, [pc, #64]	; (21d10 <z_unpend_first_thread+0x70>)
   21cd0:	f7fe fa6e 	bl	201b0 <z_spin_lock_set_owner>
	return list->head == list;
   21cd4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21cd6:	42a5      	cmp	r5, r4
   21cd8:	d012      	beq.n	21d00 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   21cda:	b134      	cbz	r4, 21cea <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   21cdc:	4620      	mov	r0, r4
   21cde:	f7ff ff09 	bl	21af4 <unpend_thread_no_timeout>
   21ce2:	f104 0018 	add.w	r0, r4, #24
   21ce6:	f000 fb69 	bl	223bc <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cea:	4809      	ldr	r0, [pc, #36]	; (21d10 <z_unpend_first_thread+0x70>)
   21cec:	f7fe fa50 	bl	20190 <z_spin_unlock_valid>
   21cf0:	b940      	cbnz	r0, 21d04 <z_unpend_first_thread+0x64>
   21cf2:	4908      	ldr	r1, [pc, #32]	; (21d14 <z_unpend_first_thread+0x74>)
   21cf4:	4808      	ldr	r0, [pc, #32]	; (21d18 <z_unpend_first_thread+0x78>)
   21cf6:	22c2      	movs	r2, #194	; 0xc2
   21cf8:	f001 fe76 	bl	239e8 <assert_print>
   21cfc:	21c2      	movs	r1, #194	; 0xc2
   21cfe:	e7e3      	b.n	21cc8 <z_unpend_first_thread+0x28>
   21d00:	2400      	movs	r4, #0
   21d02:	e7f2      	b.n	21cea <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   21d04:	f386 8811 	msr	BASEPRI, r6
   21d08:	f3bf 8f6f 	isb	sy
}
   21d0c:	4620      	mov	r0, r4
   21d0e:	bd70      	pop	{r4, r5, r6, pc}
   21d10:	20002548 	.word	0x20002548
   21d14:	000280f7 	.word	0x000280f7
   21d18:	000280bd 	.word	0x000280bd

00021d1c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21d1c:	4b04      	ldr	r3, [pc, #16]	; (21d30 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21d1e:	2100      	movs	r1, #0
   21d20:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   21d24:	e9c3 2208 	strd	r2, r2, [r3, #32]
   21d28:	4608      	mov	r0, r1
   21d2a:	f7ff baa9 	b.w	21280 <k_sched_time_slice_set>
   21d2e:	bf00      	nop
   21d30:	20002500 	.word	0x20002500

00021d34 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   21d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d36:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21d3a:	b14b      	cbz	r3, 21d50 <z_impl_k_yield+0x1c>
   21d3c:	4935      	ldr	r1, [pc, #212]	; (21e14 <z_impl_k_yield+0xe0>)
   21d3e:	4836      	ldr	r0, [pc, #216]	; (21e18 <z_impl_k_yield+0xe4>)
   21d40:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   21d44:	f001 fe50 	bl	239e8 <assert_print>
   21d48:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21d4c:	4831      	ldr	r0, [pc, #196]	; (21e14 <z_impl_k_yield+0xe0>)
   21d4e:	e012      	b.n	21d76 <z_impl_k_yield+0x42>
	__asm__ volatile(
   21d50:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d54:	f3ef 8611 	mrs	r6, BASEPRI
   21d58:	f383 8812 	msr	BASEPRI_MAX, r3
   21d5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d60:	482e      	ldr	r0, [pc, #184]	; (21e1c <z_impl_k_yield+0xe8>)
   21d62:	f7fe fa07 	bl	20174 <z_spin_lock_valid>
   21d66:	b940      	cbnz	r0, 21d7a <z_impl_k_yield+0x46>
   21d68:	492d      	ldr	r1, [pc, #180]	; (21e20 <z_impl_k_yield+0xec>)
   21d6a:	482b      	ldr	r0, [pc, #172]	; (21e18 <z_impl_k_yield+0xe4>)
   21d6c:	2294      	movs	r2, #148	; 0x94
   21d6e:	f001 fe3b 	bl	239e8 <assert_print>
   21d72:	2194      	movs	r1, #148	; 0x94
   21d74:	482a      	ldr	r0, [pc, #168]	; (21e20 <z_impl_k_yield+0xec>)
   21d76:	f001 fe30 	bl	239da <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   21d7a:	4c2a      	ldr	r4, [pc, #168]	; (21e24 <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   21d7c:	4827      	ldr	r0, [pc, #156]	; (21e1c <z_impl_k_yield+0xe8>)
   21d7e:	f7fe fa17 	bl	201b0 <z_spin_lock_set_owner>
   21d82:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21d84:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21d86:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21d8e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21d90:	4628      	mov	r0, r5
   21d92:	f7ff fc43 	bl	2161c <z_priq_dumb_remove>
	}
	queue_thread(_current);
   21d96:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21d98:	7b5a      	ldrb	r2, [r3, #13]
   21d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21d9e:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21da0:	4a21      	ldr	r2, [pc, #132]	; (21e28 <z_impl_k_yield+0xf4>)
   21da2:	4293      	cmp	r3, r2
   21da4:	d106      	bne.n	21db4 <z_impl_k_yield+0x80>
   21da6:	491b      	ldr	r1, [pc, #108]	; (21e14 <z_impl_k_yield+0xe0>)
   21da8:	481b      	ldr	r0, [pc, #108]	; (21e18 <z_impl_k_yield+0xe4>)
   21daa:	22ba      	movs	r2, #186	; 0xba
   21dac:	f001 fe1c 	bl	239e8 <assert_print>
   21db0:	21ba      	movs	r1, #186	; 0xba
   21db2:	e7cb      	b.n	21d4c <z_impl_k_yield+0x18>
	return list->head == list;
   21db4:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   21db6:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21db8:	42aa      	cmp	r2, r5
   21dba:	bf08      	it	eq
   21dbc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21dbe:	b922      	cbnz	r2, 21dca <z_impl_k_yield+0x96>
	node->prev = tail;
   21dc0:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   21dc4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   21dc6:	6263      	str	r3, [r4, #36]	; 0x24
}
   21dc8:	e00c      	b.n	21de4 <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   21dca:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   21dce:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   21dd2:	42b8      	cmp	r0, r7
   21dd4:	d014      	beq.n	21e00 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21dd6:	4287      	cmp	r7, r0
   21dd8:	dd12      	ble.n	21e00 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   21dda:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21ddc:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   21de0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21de2:	6053      	str	r3, [r2, #4]
	update_cache(1);
   21de4:	2001      	movs	r0, #1
   21de6:	f7ff f9d7 	bl	21198 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dea:	480c      	ldr	r0, [pc, #48]	; (21e1c <z_impl_k_yield+0xe8>)
   21dec:	f7fe f9d0 	bl	20190 <z_spin_unlock_valid>
   21df0:	b950      	cbnz	r0, 21e08 <z_impl_k_yield+0xd4>
   21df2:	490b      	ldr	r1, [pc, #44]	; (21e20 <z_impl_k_yield+0xec>)
   21df4:	4808      	ldr	r0, [pc, #32]	; (21e18 <z_impl_k_yield+0xe4>)
   21df6:	22e1      	movs	r2, #225	; 0xe1
   21df8:	f001 fdf6 	bl	239e8 <assert_print>
   21dfc:	21e1      	movs	r1, #225	; 0xe1
   21dfe:	e7b9      	b.n	21d74 <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   21e00:	428a      	cmp	r2, r1
   21e02:	d0dd      	beq.n	21dc0 <z_impl_k_yield+0x8c>
   21e04:	6812      	ldr	r2, [r2, #0]
   21e06:	e7da      	b.n	21dbe <z_impl_k_yield+0x8a>
   21e08:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   21e0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21e0e:	f7f1 b8fb 	b.w	13008 <arch_swap>
   21e12:	bf00      	nop
   21e14:	0002b0f5 	.word	0x0002b0f5
   21e18:	000280bd 	.word	0x000280bd
   21e1c:	20002548 	.word	0x20002548
   21e20:	000280f7 	.word	0x000280f7
   21e24:	20002500 	.word	0x20002500
   21e28:	20001e30 	.word	0x20001e30

00021e2c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   21e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e30:	4605      	mov	r5, r0
   21e32:	460e      	mov	r6, r1
   21e34:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21e38:	b14b      	cbz	r3, 21e4e <z_tick_sleep+0x22>
   21e3a:	4936      	ldr	r1, [pc, #216]	; (21f14 <z_tick_sleep+0xe8>)
   21e3c:	4836      	ldr	r0, [pc, #216]	; (21f18 <z_tick_sleep+0xec>)
   21e3e:	f240 528c 	movw	r2, #1420	; 0x58c
   21e42:	f001 fdd1 	bl	239e8 <assert_print>
   21e46:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21e4a:	4832      	ldr	r0, [pc, #200]	; (21f14 <z_tick_sleep+0xe8>)
   21e4c:	e020      	b.n	21e90 <z_tick_sleep+0x64>
	if (ticks == 0) {
   21e4e:	ea50 0301 	orrs.w	r3, r0, r1
   21e52:	d103      	bne.n	21e5c <z_tick_sleep+0x30>
	z_impl_k_yield();
   21e54:	f7ff ff6e 	bl	21d34 <z_impl_k_yield>
		return 0;
   21e58:	2000      	movs	r0, #0
   21e5a:	e058      	b.n	21f0e <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   21e5c:	1c82      	adds	r2, r0, #2
   21e5e:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   21e62:	db17      	blt.n	21e94 <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21e64:	f005 f86e 	bl	26f44 <sys_clock_tick_get_32>
   21e68:	1944      	adds	r4, r0, r5
   21e6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e6e:	f3ef 8811 	mrs	r8, BASEPRI
   21e72:	f383 8812 	msr	BASEPRI_MAX, r3
   21e76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e7a:	4828      	ldr	r0, [pc, #160]	; (21f1c <z_tick_sleep+0xf0>)
   21e7c:	f7fe f97a 	bl	20174 <z_spin_lock_valid>
   21e80:	b960      	cbnz	r0, 21e9c <z_tick_sleep+0x70>
   21e82:	4927      	ldr	r1, [pc, #156]	; (21f20 <z_tick_sleep+0xf4>)
   21e84:	4824      	ldr	r0, [pc, #144]	; (21f18 <z_tick_sleep+0xec>)
   21e86:	2294      	movs	r2, #148	; 0x94
   21e88:	f001 fdae 	bl	239e8 <assert_print>
   21e8c:	2194      	movs	r1, #148	; 0x94
   21e8e:	4824      	ldr	r0, [pc, #144]	; (21f20 <z_tick_sleep+0xf4>)
   21e90:	f001 fda3 	bl	239da <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   21e94:	f06f 0401 	mvn.w	r4, #1
   21e98:	1a24      	subs	r4, r4, r0
   21e9a:	e7e6      	b.n	21e6a <z_tick_sleep+0x3e>
	pending_current = _current;
   21e9c:	4f21      	ldr	r7, [pc, #132]	; (21f24 <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   21e9e:	481f      	ldr	r0, [pc, #124]	; (21f1c <z_tick_sleep+0xf0>)
   21ea0:	f7fe f986 	bl	201b0 <z_spin_lock_set_owner>
   21ea4:	4b20      	ldr	r3, [pc, #128]	; (21f28 <z_tick_sleep+0xfc>)
   21ea6:	68b8      	ldr	r0, [r7, #8]
   21ea8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21eaa:	f7ff fc89 	bl	217c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21eae:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21eb0:	491e      	ldr	r1, [pc, #120]	; (21f2c <z_tick_sleep+0x100>)
   21eb2:	462a      	mov	r2, r5
   21eb4:	4633      	mov	r3, r6
   21eb6:	3018      	adds	r0, #24
   21eb8:	f000 f9d4 	bl	22264 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21ebc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ebe:	4817      	ldr	r0, [pc, #92]	; (21f1c <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21ec0:	7b53      	ldrb	r3, [r2, #13]
   21ec2:	f043 0310 	orr.w	r3, r3, #16
   21ec6:	7353      	strb	r3, [r2, #13]
   21ec8:	f7fe f962 	bl	20190 <z_spin_unlock_valid>
   21ecc:	b930      	cbnz	r0, 21edc <z_tick_sleep+0xb0>
   21ece:	4914      	ldr	r1, [pc, #80]	; (21f20 <z_tick_sleep+0xf4>)
   21ed0:	4811      	ldr	r0, [pc, #68]	; (21f18 <z_tick_sleep+0xec>)
   21ed2:	22e1      	movs	r2, #225	; 0xe1
   21ed4:	f001 fd88 	bl	239e8 <assert_print>
   21ed8:	21e1      	movs	r1, #225	; 0xe1
   21eda:	e7d8      	b.n	21e8e <z_tick_sleep+0x62>
   21edc:	4640      	mov	r0, r8
   21ede:	f7f1 f893 	bl	13008 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   21ee2:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21ee4:	7b5b      	ldrb	r3, [r3, #13]
   21ee6:	06db      	lsls	r3, r3, #27
   21ee8:	d508      	bpl.n	21efc <z_tick_sleep+0xd0>
   21eea:	490a      	ldr	r1, [pc, #40]	; (21f14 <z_tick_sleep+0xe8>)
   21eec:	480a      	ldr	r0, [pc, #40]	; (21f18 <z_tick_sleep+0xec>)
   21eee:	f240 52ad 	movw	r2, #1453	; 0x5ad
   21ef2:	f001 fd79 	bl	239e8 <assert_print>
   21ef6:	f240 51ad 	movw	r1, #1453	; 0x5ad
   21efa:	e7a6      	b.n	21e4a <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21efc:	f005 f822 	bl	26f44 <sys_clock_tick_get_32>
   21f00:	1a20      	subs	r0, r4, r0
   21f02:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   21f06:	2801      	cmp	r0, #1
   21f08:	f173 0300 	sbcs.w	r3, r3, #0
   21f0c:	dba4      	blt.n	21e58 <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   21f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21f12:	bf00      	nop
   21f14:	0002b0f5 	.word	0x0002b0f5
   21f18:	000280bd 	.word	0x000280bd
   21f1c:	20002548 	.word	0x20002548
   21f20:	000280f7 	.word	0x000280f7
   21f24:	20002500 	.word	0x20002500
   21f28:	2000253c 	.word	0x2000253c
   21f2c:	00021ba1 	.word	0x00021ba1

00021f30 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21f30:	b508      	push	{r3, lr}
   21f32:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21f36:	b153      	cbz	r3, 21f4e <z_impl_k_sleep+0x1e>
   21f38:	4910      	ldr	r1, [pc, #64]	; (21f7c <z_impl_k_sleep+0x4c>)
   21f3a:	4811      	ldr	r0, [pc, #68]	; (21f80 <z_impl_k_sleep+0x50>)
   21f3c:	f240 52bc 	movw	r2, #1468	; 0x5bc
   21f40:	f001 fd52 	bl	239e8 <assert_print>
   21f44:	480d      	ldr	r0, [pc, #52]	; (21f7c <z_impl_k_sleep+0x4c>)
   21f46:	f240 51bc 	movw	r1, #1468	; 0x5bc
   21f4a:	f001 fd46 	bl	239da <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21f4e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   21f52:	bf08      	it	eq
   21f54:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   21f58:	d106      	bne.n	21f68 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   21f5a:	4b0a      	ldr	r3, [pc, #40]	; (21f84 <z_impl_k_sleep+0x54>)
   21f5c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21f5e:	f7ff fd73 	bl	21a48 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   21f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   21f66:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   21f68:	f7ff ff60 	bl	21e2c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   21f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21f70:	fb80 0303 	smull	r0, r3, r0, r3
   21f74:	0bc0      	lsrs	r0, r0, #15
   21f76:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   21f7a:	e7f4      	b.n	21f66 <z_impl_k_sleep+0x36>
   21f7c:	0002b0f5 	.word	0x0002b0f5
   21f80:	000280bd 	.word	0x000280bd
   21f84:	20002500 	.word	0x20002500

00021f88 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21f88:	4b01      	ldr	r3, [pc, #4]	; (21f90 <z_impl_z_current_get+0x8>)
   21f8a:	6898      	ldr	r0, [r3, #8]
   21f8c:	4770      	bx	lr
   21f8e:	bf00      	nop
   21f90:	20002500 	.word	0x20002500

00021f94 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   21f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f98:	4604      	mov	r4, r0
   21f9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f9e:	f3ef 8611 	mrs	r6, BASEPRI
   21fa2:	f383 8812 	msr	BASEPRI_MAX, r3
   21fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21faa:	4845      	ldr	r0, [pc, #276]	; (220c0 <z_thread_abort+0x12c>)
   21fac:	f7fe f8e2 	bl	20174 <z_spin_lock_valid>
   21fb0:	b940      	cbnz	r0, 21fc4 <z_thread_abort+0x30>
   21fb2:	4944      	ldr	r1, [pc, #272]	; (220c4 <z_thread_abort+0x130>)
   21fb4:	4844      	ldr	r0, [pc, #272]	; (220c8 <z_thread_abort+0x134>)
   21fb6:	2294      	movs	r2, #148	; 0x94
   21fb8:	f001 fd16 	bl	239e8 <assert_print>
   21fbc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fbe:	4841      	ldr	r0, [pc, #260]	; (220c4 <z_thread_abort+0x130>)
   21fc0:	f001 fd0b 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   21fc4:	483e      	ldr	r0, [pc, #248]	; (220c0 <z_thread_abort+0x12c>)
   21fc6:	f7fe f8f3 	bl	201b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   21fca:	7b23      	ldrb	r3, [r4, #12]
   21fcc:	07d9      	lsls	r1, r3, #31
   21fce:	d518      	bpl.n	22002 <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fd0:	483b      	ldr	r0, [pc, #236]	; (220c0 <z_thread_abort+0x12c>)
   21fd2:	f7fe f8dd 	bl	20190 <z_spin_unlock_valid>
   21fd6:	b930      	cbnz	r0, 21fe6 <z_thread_abort+0x52>
   21fd8:	493a      	ldr	r1, [pc, #232]	; (220c4 <z_thread_abort+0x130>)
   21fda:	483b      	ldr	r0, [pc, #236]	; (220c8 <z_thread_abort+0x134>)
   21fdc:	22c2      	movs	r2, #194	; 0xc2
   21fde:	f001 fd03 	bl	239e8 <assert_print>
   21fe2:	21c2      	movs	r1, #194	; 0xc2
   21fe4:	e7eb      	b.n	21fbe <z_thread_abort+0x2a>
	__asm__ volatile(
   21fe6:	f386 8811 	msr	BASEPRI, r6
   21fea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   21fee:	4937      	ldr	r1, [pc, #220]	; (220cc <z_thread_abort+0x138>)
   21ff0:	4835      	ldr	r0, [pc, #212]	; (220c8 <z_thread_abort+0x134>)
   21ff2:	f44f 62d9 	mov.w	r2, #1736	; 0x6c8
   21ff6:	f001 fcf7 	bl	239e8 <assert_print>
   21ffa:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   21ffe:	4833      	ldr	r0, [pc, #204]	; (220cc <z_thread_abort+0x138>)
   22000:	e7de      	b.n	21fc0 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22002:	7b63      	ldrb	r3, [r4, #13]
   22004:	071a      	lsls	r2, r3, #28
   22006:	d50a      	bpl.n	2201e <z_thread_abort+0x8a>
   22008:	482d      	ldr	r0, [pc, #180]	; (220c0 <z_thread_abort+0x12c>)
   2200a:	f7fe f8c1 	bl	20190 <z_spin_unlock_valid>
   2200e:	2800      	cmp	r0, #0
   22010:	d0e2      	beq.n	21fd8 <z_thread_abort+0x44>
   22012:	f386 8811 	msr	BASEPRI, r6
   22016:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2201a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2201e:	f023 0220 	bic.w	r2, r3, #32
   22022:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   22026:	09d2      	lsrs	r2, r2, #7
   22028:	d127      	bne.n	2207a <z_thread_abort+0xe6>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2202a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   2202c:	68a3      	ldr	r3, [r4, #8]
   2202e:	b113      	cbz	r3, 22036 <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   22030:	4620      	mov	r0, r4
   22032:	f7ff fd5f 	bl	21af4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   22036:	f104 0018 	add.w	r0, r4, #24
   2203a:	f000 f9bf 	bl	223bc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2203e:	f104 0758 	add.w	r7, r4, #88	; 0x58
   22042:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   22046:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22048:	42bd      	cmp	r5, r7
   2204a:	d000      	beq.n	2204e <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2204c:	b9fd      	cbnz	r5, 2208e <z_thread_abort+0xfa>
		update_cache(1);
   2204e:	2001      	movs	r0, #1
   22050:	f7ff f8a2 	bl	21198 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   22054:	4b1e      	ldr	r3, [pc, #120]	; (220d0 <z_thread_abort+0x13c>)
   22056:	689b      	ldr	r3, [r3, #8]
   22058:	42a3      	cmp	r3, r4
   2205a:	d1d5      	bne.n	22008 <z_thread_abort+0x74>
   2205c:	f3ef 8305 	mrs	r3, IPSR
   22060:	2b00      	cmp	r3, #0
   22062:	d1d1      	bne.n	22008 <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22064:	4816      	ldr	r0, [pc, #88]	; (220c0 <z_thread_abort+0x12c>)
   22066:	f7fe f893 	bl	20190 <z_spin_unlock_valid>
   2206a:	b9e8      	cbnz	r0, 220a8 <z_thread_abort+0x114>
   2206c:	4915      	ldr	r1, [pc, #84]	; (220c4 <z_thread_abort+0x130>)
   2206e:	4816      	ldr	r0, [pc, #88]	; (220c8 <z_thread_abort+0x134>)
   22070:	22e1      	movs	r2, #225	; 0xe1
   22072:	f001 fcb9 	bl	239e8 <assert_print>
   22076:	21e1      	movs	r1, #225	; 0xe1
   22078:	e7a1      	b.n	21fbe <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2207a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2207e:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   22082:	4814      	ldr	r0, [pc, #80]	; (220d4 <z_thread_abort+0x140>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22084:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22086:	4621      	mov	r1, r4
   22088:	f7ff fac8 	bl	2161c <z_priq_dumb_remove>
}
   2208c:	e7ce      	b.n	2202c <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   2208e:	4628      	mov	r0, r5
   22090:	f7ff fd30 	bl	21af4 <unpend_thread_no_timeout>
   22094:	f105 0018 	add.w	r0, r5, #24
   22098:	f000 f990 	bl	223bc <z_abort_timeout>
   2209c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   220a0:	4628      	mov	r0, r5
   220a2:	f7ff f8a5 	bl	211f0 <ready_thread>
   220a6:	e7ce      	b.n	22046 <z_thread_abort+0xb2>
   220a8:	4630      	mov	r0, r6
   220aa:	f7f0 ffad 	bl	13008 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   220ae:	4907      	ldr	r1, [pc, #28]	; (220cc <z_thread_abort+0x138>)
   220b0:	4805      	ldr	r0, [pc, #20]	; (220c8 <z_thread_abort+0x134>)
   220b2:	f240 62f7 	movw	r2, #1783	; 0x6f7
   220b6:	f001 fc97 	bl	239e8 <assert_print>
   220ba:	f240 61f7 	movw	r1, #1783	; 0x6f7
   220be:	e79e      	b.n	21ffe <z_thread_abort+0x6a>
   220c0:	20002548 	.word	0x20002548
   220c4:	000280f7 	.word	0x000280f7
   220c8:	000280bd 	.word	0x000280bd
   220cc:	0002b0f5 	.word	0x0002b0f5
   220d0:	20002500 	.word	0x20002500
   220d4:	20002520 	.word	0x20002520

000220d8 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   220d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   220dc:	4606      	mov	r6, r0
   220de:	4688      	mov	r8, r1
   220e0:	4617      	mov	r7, r2
	__asm__ volatile(
   220e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   220e6:	f3ef 8911 	mrs	r9, BASEPRI
   220ea:	f383 8812 	msr	BASEPRI_MAX, r3
   220ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   220f2:	481c      	ldr	r0, [pc, #112]	; (22164 <z_sched_wake+0x8c>)
   220f4:	f7fe f83e 	bl	20174 <z_spin_lock_valid>
   220f8:	4605      	mov	r5, r0
   220fa:	b940      	cbnz	r0, 2210e <z_sched_wake+0x36>
   220fc:	491a      	ldr	r1, [pc, #104]	; (22168 <z_sched_wake+0x90>)
   220fe:	481b      	ldr	r0, [pc, #108]	; (2216c <z_sched_wake+0x94>)
   22100:	2294      	movs	r2, #148	; 0x94
   22102:	f001 fc71 	bl	239e8 <assert_print>
   22106:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22108:	4817      	ldr	r0, [pc, #92]	; (22168 <z_sched_wake+0x90>)
   2210a:	f001 fc66 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   2210e:	4815      	ldr	r0, [pc, #84]	; (22164 <z_sched_wake+0x8c>)
   22110:	f7fe f84e 	bl	201b0 <z_spin_lock_set_owner>
	return list->head == list;
   22114:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22116:	42a6      	cmp	r6, r4
   22118:	d018      	beq.n	2214c <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   2211a:	b1cc      	cbz	r4, 22150 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   2211c:	4620      	mov	r0, r4
   2211e:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
   22122:	6167      	str	r7, [r4, #20]
   22124:	f7ff fce6 	bl	21af4 <unpend_thread_no_timeout>
   22128:	f104 0018 	add.w	r0, r4, #24
   2212c:	f000 f946 	bl	223bc <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   22130:	4620      	mov	r0, r4
   22132:	f7ff f85d 	bl	211f0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22136:	480b      	ldr	r0, [pc, #44]	; (22164 <z_sched_wake+0x8c>)
   22138:	f7fe f82a 	bl	20190 <z_spin_unlock_valid>
   2213c:	b950      	cbnz	r0, 22154 <z_sched_wake+0x7c>
   2213e:	490a      	ldr	r1, [pc, #40]	; (22168 <z_sched_wake+0x90>)
   22140:	480a      	ldr	r0, [pc, #40]	; (2216c <z_sched_wake+0x94>)
   22142:	22c2      	movs	r2, #194	; 0xc2
   22144:	f001 fc50 	bl	239e8 <assert_print>
   22148:	21c2      	movs	r1, #194	; 0xc2
   2214a:	e7dd      	b.n	22108 <z_sched_wake+0x30>
	bool ret = false;
   2214c:	2500      	movs	r5, #0
   2214e:	e7f2      	b.n	22136 <z_sched_wake+0x5e>
   22150:	4625      	mov	r5, r4
   22152:	e7f0      	b.n	22136 <z_sched_wake+0x5e>
	__asm__ volatile(
   22154:	f389 8811 	msr	BASEPRI, r9
   22158:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   2215c:	4628      	mov	r0, r5
   2215e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22162:	bf00      	nop
   22164:	20002548 	.word	0x20002548
   22168:	000280f7 	.word	0x000280f7
   2216c:	000280bd 	.word	0x000280bd

00022170 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22170:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22172:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22176:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22178:	e9cd 6700 	strd	r6, r7, [sp]
   2217c:	f7ff fb8e 	bl	2189c <z_pend_curr>

	if (data != NULL) {
   22180:	b11c      	cbz	r4, 2218a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22182:	4b03      	ldr	r3, [pc, #12]	; (22190 <z_sched_wait+0x20>)
   22184:	689b      	ldr	r3, [r3, #8]
   22186:	695b      	ldr	r3, [r3, #20]
   22188:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2218a:	b002      	add	sp, #8
   2218c:	bdd0      	pop	{r4, r6, r7, pc}
   2218e:	bf00      	nop
   22190:	20002500 	.word	0x20002500

00022194 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22194:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22196:	4806      	ldr	r0, [pc, #24]	; (221b0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22198:	4a06      	ldr	r2, [pc, #24]	; (221b4 <z_data_copy+0x20>)
   2219a:	4907      	ldr	r1, [pc, #28]	; (221b8 <z_data_copy+0x24>)
   2219c:	1a12      	subs	r2, r2, r0
   2219e:	f004 fdbb 	bl	26d18 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   221a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   221a6:	4a05      	ldr	r2, [pc, #20]	; (221bc <z_data_copy+0x28>)
   221a8:	4905      	ldr	r1, [pc, #20]	; (221c0 <z_data_copy+0x2c>)
   221aa:	4806      	ldr	r0, [pc, #24]	; (221c4 <z_data_copy+0x30>)
   221ac:	f004 bdb4 	b.w	26d18 <z_early_memcpy>
   221b0:	20000000 	.word	0x20000000
   221b4:	20000a98 	.word	0x20000a98
   221b8:	0002b1dc 	.word	0x0002b1dc
   221bc:	00000000 	.word	0x00000000
   221c0:	0002b1dc 	.word	0x0002b1dc
   221c4:	20000000 	.word	0x20000000

000221c8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   221c8:	4b03      	ldr	r3, [pc, #12]	; (221d8 <elapsed+0x10>)
   221ca:	681b      	ldr	r3, [r3, #0]
   221cc:	b90b      	cbnz	r3, 221d2 <elapsed+0xa>
   221ce:	f7fb b91f 	b.w	1d410 <sys_clock_elapsed>
}
   221d2:	2000      	movs	r0, #0
   221d4:	4770      	bx	lr
   221d6:	bf00      	nop
   221d8:	2000254c 	.word	0x2000254c

000221dc <next_timeout>:

static int32_t next_timeout(void)
{
   221dc:	b510      	push	{r4, lr}
	return list->head == list;
   221de:	4b11      	ldr	r3, [pc, #68]	; (22224 <next_timeout+0x48>)
   221e0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   221e2:	429c      	cmp	r4, r3
   221e4:	d10a      	bne.n	221fc <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   221e6:	f7ff ffef 	bl	221c8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   221ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   221ee:	4b0e      	ldr	r3, [pc, #56]	; (22228 <next_timeout+0x4c>)
   221f0:	691b      	ldr	r3, [r3, #16]
   221f2:	b113      	cbz	r3, 221fa <next_timeout+0x1e>
   221f4:	4298      	cmp	r0, r3
   221f6:	bfa8      	it	ge
   221f8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   221fa:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   221fc:	f7ff ffe4 	bl	221c8 <elapsed>
	if ((to == NULL) ||
   22200:	2c00      	cmp	r4, #0
   22202:	d0f2      	beq.n	221ea <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22204:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22208:	1a1b      	subs	r3, r3, r0
   2220a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2220e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22212:	f172 0100 	sbcs.w	r1, r2, #0
   22216:	dae8      	bge.n	221ea <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   22218:	2a00      	cmp	r2, #0
   2221a:	bfac      	ite	ge
   2221c:	4618      	movge	r0, r3
   2221e:	2000      	movlt	r0, #0
   22220:	e7e5      	b.n	221ee <next_timeout+0x12>
   22222:	bf00      	nop
   22224:	2000078c 	.word	0x2000078c
   22228:	20002500 	.word	0x20002500

0002222c <remove_timeout>:
{
   2222c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2222e:	b170      	cbz	r0, 2224e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22230:	4b0b      	ldr	r3, [pc, #44]	; (22260 <remove_timeout+0x34>)
   22232:	685b      	ldr	r3, [r3, #4]
   22234:	4298      	cmp	r0, r3
   22236:	d00a      	beq.n	2224e <remove_timeout+0x22>
   22238:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2223a:	b143      	cbz	r3, 2224e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2223c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22240:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22244:	1912      	adds	r2, r2, r4
   22246:	eb41 0105 	adc.w	r1, r1, r5
   2224a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   2224e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22252:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22254:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22256:	2300      	movs	r3, #0
	node->prev = NULL;
   22258:	e9c0 3300 	strd	r3, r3, [r0]
}
   2225c:	bd30      	pop	{r4, r5, pc}
   2225e:	bf00      	nop
   22260:	2000078c 	.word	0x2000078c

00022264 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22268:	bf08      	it	eq
   2226a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2226e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22272:	4604      	mov	r4, r0
   22274:	4692      	mov	sl, r2
   22276:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22278:	f000 8090 	beq.w	2239c <z_add_timeout+0x138>
	return node->next != NULL;
   2227c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2227e:	b146      	cbz	r6, 22292 <z_add_timeout+0x2e>
   22280:	4947      	ldr	r1, [pc, #284]	; (223a0 <z_add_timeout+0x13c>)
   22282:	4848      	ldr	r0, [pc, #288]	; (223a4 <z_add_timeout+0x140>)
   22284:	2263      	movs	r2, #99	; 0x63
   22286:	f001 fbaf 	bl	239e8 <assert_print>
   2228a:	4845      	ldr	r0, [pc, #276]	; (223a0 <z_add_timeout+0x13c>)
   2228c:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2228e:	f001 fba4 	bl	239da <assert_post_action>
	to->fn = fn;
   22292:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22294:	f04f 0340 	mov.w	r3, #64	; 0x40
   22298:	f3ef 8711 	mrs	r7, BASEPRI
   2229c:	f383 8812 	msr	BASEPRI_MAX, r3
   222a0:	f3bf 8f6f 	isb	sy
   222a4:	4840      	ldr	r0, [pc, #256]	; (223a8 <z_add_timeout+0x144>)
   222a6:	f7fd ff65 	bl	20174 <z_spin_lock_valid>
   222aa:	b938      	cbnz	r0, 222bc <z_add_timeout+0x58>
   222ac:	493f      	ldr	r1, [pc, #252]	; (223ac <z_add_timeout+0x148>)
   222ae:	483d      	ldr	r0, [pc, #244]	; (223a4 <z_add_timeout+0x140>)
   222b0:	2294      	movs	r2, #148	; 0x94
   222b2:	f001 fb99 	bl	239e8 <assert_print>
   222b6:	2194      	movs	r1, #148	; 0x94
   222b8:	483c      	ldr	r0, [pc, #240]	; (223ac <z_add_timeout+0x148>)
   222ba:	e7e8      	b.n	2228e <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   222bc:	483a      	ldr	r0, [pc, #232]	; (223a8 <z_add_timeout+0x144>)
   222be:	f7fd ff77 	bl	201b0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   222c2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   222c6:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   222ca:	da23      	bge.n	22314 <z_add_timeout+0xb0>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   222cc:	4938      	ldr	r1, [pc, #224]	; (223b0 <z_add_timeout+0x14c>)
   222ce:	e9d1 2000 	ldrd	r2, r0, [r1]
   222d2:	f06f 0301 	mvn.w	r3, #1
   222d6:	1a9b      	subs	r3, r3, r2
   222d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   222dc:	eb62 0000 	sbc.w	r0, r2, r0
   222e0:	ebb3 030a 	subs.w	r3, r3, sl
   222e4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   222e8:	2b01      	cmp	r3, #1
   222ea:	f170 0200 	sbcs.w	r2, r0, #0
   222ee:	da01      	bge.n	222f4 <z_add_timeout+0x90>
   222f0:	2301      	movs	r3, #1
   222f2:	4630      	mov	r0, r6
   222f4:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   222f8:	4b2e      	ldr	r3, [pc, #184]	; (223b4 <z_add_timeout+0x150>)
   222fa:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   222fc:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22300:	429a      	cmp	r2, r3
   22302:	bf18      	it	ne
   22304:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   22306:	b986      	cbnz	r6, 2232a <z_add_timeout+0xc6>
	node->prev = tail;
   22308:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   2230c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   22310:	605c      	str	r4, [r3, #4]
}
   22312:	e01c      	b.n	2234e <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   22314:	f7ff ff58 	bl	221c8 <elapsed>
   22318:	f11a 0801 	adds.w	r8, sl, #1
   2231c:	f145 0500 	adc.w	r5, r5, #0
   22320:	eb18 0300 	adds.w	r3, r8, r0
   22324:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   22328:	e7e4      	b.n	222f4 <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   2232a:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   2232e:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   22332:	428a      	cmp	r2, r1
   22334:	eb70 0e05 	sbcs.w	lr, r0, r5
   22338:	da23      	bge.n	22382 <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   2233a:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   2233c:	6872      	ldr	r2, [r6, #4]
   2233e:	eb65 0500 	sbc.w	r5, r5, r0
   22342:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   22346:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   2234a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2234c:	6074      	str	r4, [r6, #4]
	return list->head == list;
   2234e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22350:	429a      	cmp	r2, r3
   22352:	d00b      	beq.n	2236c <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22354:	4294      	cmp	r4, r2
   22356:	d109      	bne.n	2236c <z_add_timeout+0x108>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22358:	f7ff ff40 	bl	221dc <next_timeout>

			if (next_time == 0 ||
   2235c:	b118      	cbz	r0, 22366 <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   2235e:	4b16      	ldr	r3, [pc, #88]	; (223b8 <z_add_timeout+0x154>)
			if (next_time == 0 ||
   22360:	691b      	ldr	r3, [r3, #16]
   22362:	4283      	cmp	r3, r0
   22364:	d002      	beq.n	2236c <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   22366:	2100      	movs	r1, #0
   22368:	f7fb f828 	bl	1d3bc <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2236c:	480e      	ldr	r0, [pc, #56]	; (223a8 <z_add_timeout+0x144>)
   2236e:	f7fd ff0f 	bl	20190 <z_spin_unlock_valid>
   22372:	b978      	cbnz	r0, 22394 <z_add_timeout+0x130>
   22374:	490d      	ldr	r1, [pc, #52]	; (223ac <z_add_timeout+0x148>)
   22376:	480b      	ldr	r0, [pc, #44]	; (223a4 <z_add_timeout+0x140>)
   22378:	22c2      	movs	r2, #194	; 0xc2
   2237a:	f001 fb35 	bl	239e8 <assert_print>
   2237e:	21c2      	movs	r1, #194	; 0xc2
   22380:	e79a      	b.n	222b8 <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   22382:	1a52      	subs	r2, r2, r1
   22384:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   22388:	4566      	cmp	r6, ip
   2238a:	e9c4 2004 	strd	r2, r0, [r4, #16]
   2238e:	d0bb      	beq.n	22308 <z_add_timeout+0xa4>
   22390:	6836      	ldr	r6, [r6, #0]
   22392:	e7b8      	b.n	22306 <z_add_timeout+0xa2>
	__asm__ volatile(
   22394:	f387 8811 	msr	BASEPRI, r7
   22398:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2239c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   223a0:	0002b142 	.word	0x0002b142
   223a4:	000280bd 	.word	0x000280bd
   223a8:	20002550 	.word	0x20002550
   223ac:	000280f7 	.word	0x000280f7
   223b0:	20001fd0 	.word	0x20001fd0
   223b4:	2000078c 	.word	0x2000078c
   223b8:	20002500 	.word	0x20002500

000223bc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   223bc:	b538      	push	{r3, r4, r5, lr}
   223be:	4604      	mov	r4, r0
	__asm__ volatile(
   223c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   223c4:	f3ef 8511 	mrs	r5, BASEPRI
   223c8:	f383 8812 	msr	BASEPRI_MAX, r3
   223cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223d0:	4814      	ldr	r0, [pc, #80]	; (22424 <z_abort_timeout+0x68>)
   223d2:	f7fd fecf 	bl	20174 <z_spin_lock_valid>
   223d6:	b940      	cbnz	r0, 223ea <z_abort_timeout+0x2e>
   223d8:	4913      	ldr	r1, [pc, #76]	; (22428 <z_abort_timeout+0x6c>)
   223da:	4814      	ldr	r0, [pc, #80]	; (2242c <z_abort_timeout+0x70>)
   223dc:	2294      	movs	r2, #148	; 0x94
   223de:	f001 fb03 	bl	239e8 <assert_print>
   223e2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223e4:	4810      	ldr	r0, [pc, #64]	; (22428 <z_abort_timeout+0x6c>)
   223e6:	f001 faf8 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   223ea:	480e      	ldr	r0, [pc, #56]	; (22424 <z_abort_timeout+0x68>)
   223ec:	f7fd fee0 	bl	201b0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   223f0:	6823      	ldr	r3, [r4, #0]
   223f2:	b173      	cbz	r3, 22412 <z_abort_timeout+0x56>
			remove_timeout(to);
   223f4:	4620      	mov	r0, r4
   223f6:	f7ff ff19 	bl	2222c <remove_timeout>
			ret = 0;
   223fa:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223fc:	4809      	ldr	r0, [pc, #36]	; (22424 <z_abort_timeout+0x68>)
   223fe:	f7fd fec7 	bl	20190 <z_spin_unlock_valid>
   22402:	b948      	cbnz	r0, 22418 <z_abort_timeout+0x5c>
   22404:	4908      	ldr	r1, [pc, #32]	; (22428 <z_abort_timeout+0x6c>)
   22406:	4809      	ldr	r0, [pc, #36]	; (2242c <z_abort_timeout+0x70>)
   22408:	22c2      	movs	r2, #194	; 0xc2
   2240a:	f001 faed 	bl	239e8 <assert_print>
   2240e:	21c2      	movs	r1, #194	; 0xc2
   22410:	e7e8      	b.n	223e4 <z_abort_timeout+0x28>
	int ret = -EINVAL;
   22412:	f06f 0415 	mvn.w	r4, #21
   22416:	e7f1      	b.n	223fc <z_abort_timeout+0x40>
	__asm__ volatile(
   22418:	f385 8811 	msr	BASEPRI, r5
   2241c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   22420:	4620      	mov	r0, r4
   22422:	bd38      	pop	{r3, r4, r5, pc}
   22424:	20002550 	.word	0x20002550
   22428:	000280f7 	.word	0x000280f7
   2242c:	000280bd 	.word	0x000280bd

00022430 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   22430:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22432:	f04f 0340 	mov.w	r3, #64	; 0x40
   22436:	f3ef 8511 	mrs	r5, BASEPRI
   2243a:	f383 8812 	msr	BASEPRI_MAX, r3
   2243e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22442:	4812      	ldr	r0, [pc, #72]	; (2248c <z_get_next_timeout_expiry+0x5c>)
   22444:	f7fd fe96 	bl	20174 <z_spin_lock_valid>
   22448:	b940      	cbnz	r0, 2245c <z_get_next_timeout_expiry+0x2c>
   2244a:	4911      	ldr	r1, [pc, #68]	; (22490 <z_get_next_timeout_expiry+0x60>)
   2244c:	4811      	ldr	r0, [pc, #68]	; (22494 <z_get_next_timeout_expiry+0x64>)
   2244e:	2294      	movs	r2, #148	; 0x94
   22450:	f001 faca 	bl	239e8 <assert_print>
   22454:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22456:	480e      	ldr	r0, [pc, #56]	; (22490 <z_get_next_timeout_expiry+0x60>)
   22458:	f001 fabf 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   2245c:	480b      	ldr	r0, [pc, #44]	; (2248c <z_get_next_timeout_expiry+0x5c>)
   2245e:	f7fd fea7 	bl	201b0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   22462:	f7ff febb 	bl	221dc <next_timeout>
   22466:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22468:	4808      	ldr	r0, [pc, #32]	; (2248c <z_get_next_timeout_expiry+0x5c>)
   2246a:	f7fd fe91 	bl	20190 <z_spin_unlock_valid>
   2246e:	b930      	cbnz	r0, 2247e <z_get_next_timeout_expiry+0x4e>
   22470:	4907      	ldr	r1, [pc, #28]	; (22490 <z_get_next_timeout_expiry+0x60>)
   22472:	4808      	ldr	r0, [pc, #32]	; (22494 <z_get_next_timeout_expiry+0x64>)
   22474:	22c2      	movs	r2, #194	; 0xc2
   22476:	f001 fab7 	bl	239e8 <assert_print>
   2247a:	21c2      	movs	r1, #194	; 0xc2
   2247c:	e7eb      	b.n	22456 <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   2247e:	f385 8811 	msr	BASEPRI, r5
   22482:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   22486:	4620      	mov	r0, r4
   22488:	bd38      	pop	{r3, r4, r5, pc}
   2248a:	bf00      	nop
   2248c:	20002550 	.word	0x20002550
   22490:	000280f7 	.word	0x000280f7
   22494:	000280bd 	.word	0x000280bd

00022498 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   22498:	b570      	push	{r4, r5, r6, lr}
   2249a:	4604      	mov	r4, r0
   2249c:	460d      	mov	r5, r1
	__asm__ volatile(
   2249e:	f04f 0340 	mov.w	r3, #64	; 0x40
   224a2:	f3ef 8611 	mrs	r6, BASEPRI
   224a6:	f383 8812 	msr	BASEPRI_MAX, r3
   224aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224ae:	4816      	ldr	r0, [pc, #88]	; (22508 <z_set_timeout_expiry+0x70>)
   224b0:	f7fd fe60 	bl	20174 <z_spin_lock_valid>
   224b4:	b940      	cbnz	r0, 224c8 <z_set_timeout_expiry+0x30>
   224b6:	4915      	ldr	r1, [pc, #84]	; (2250c <z_set_timeout_expiry+0x74>)
   224b8:	4815      	ldr	r0, [pc, #84]	; (22510 <z_set_timeout_expiry+0x78>)
   224ba:	2294      	movs	r2, #148	; 0x94
   224bc:	f001 fa94 	bl	239e8 <assert_print>
   224c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224c2:	4812      	ldr	r0, [pc, #72]	; (2250c <z_set_timeout_expiry+0x74>)
   224c4:	f001 fa89 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   224c8:	480f      	ldr	r0, [pc, #60]	; (22508 <z_set_timeout_expiry+0x70>)
   224ca:	f7fd fe71 	bl	201b0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   224ce:	f7ff fe85 	bl	221dc <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   224d2:	2801      	cmp	r0, #1
   224d4:	dd07      	ble.n	224e6 <z_set_timeout_expiry+0x4e>
   224d6:	42a0      	cmp	r0, r4
   224d8:	db05      	blt.n	224e6 <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   224da:	42a0      	cmp	r0, r4
   224dc:	4629      	mov	r1, r5
   224de:	bfa8      	it	ge
   224e0:	4620      	movge	r0, r4
   224e2:	f7fa ff6b 	bl	1d3bc <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224e6:	4808      	ldr	r0, [pc, #32]	; (22508 <z_set_timeout_expiry+0x70>)
   224e8:	f7fd fe52 	bl	20190 <z_spin_unlock_valid>
   224ec:	b930      	cbnz	r0, 224fc <z_set_timeout_expiry+0x64>
   224ee:	4907      	ldr	r1, [pc, #28]	; (2250c <z_set_timeout_expiry+0x74>)
   224f0:	4807      	ldr	r0, [pc, #28]	; (22510 <z_set_timeout_expiry+0x78>)
   224f2:	22c2      	movs	r2, #194	; 0xc2
   224f4:	f001 fa78 	bl	239e8 <assert_print>
   224f8:	21c2      	movs	r1, #194	; 0xc2
   224fa:	e7e2      	b.n	224c2 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   224fc:	f386 8811 	msr	BASEPRI, r6
   22500:	f3bf 8f6f 	isb	sy
		}
	}
}
   22504:	bd70      	pop	{r4, r5, r6, pc}
   22506:	bf00      	nop
   22508:	20002550 	.word	0x20002550
   2250c:	000280f7 	.word	0x000280f7
   22510:	000280bd 	.word	0x000280bd

00022514 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   22514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22518:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2251a:	f7ff f8ed 	bl	216f8 <z_time_slice>
	__asm__ volatile(
   2251e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22522:	f3ef 8711 	mrs	r7, BASEPRI
   22526:	f383 8812 	msr	BASEPRI_MAX, r3
   2252a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2252e:	483a      	ldr	r0, [pc, #232]	; (22618 <sys_clock_announce+0x104>)
   22530:	f7fd fe20 	bl	20174 <z_spin_lock_valid>
   22534:	b940      	cbnz	r0, 22548 <sys_clock_announce+0x34>
   22536:	4939      	ldr	r1, [pc, #228]	; (2261c <sys_clock_announce+0x108>)
   22538:	4839      	ldr	r0, [pc, #228]	; (22620 <sys_clock_announce+0x10c>)
   2253a:	2294      	movs	r2, #148	; 0x94
   2253c:	f001 fa54 	bl	239e8 <assert_print>
   22540:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22542:	4836      	ldr	r0, [pc, #216]	; (2261c <sys_clock_announce+0x108>)
   22544:	f001 fa49 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   22548:	4833      	ldr	r0, [pc, #204]	; (22618 <sys_clock_announce+0x104>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2254a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 22624 <sys_clock_announce+0x110>
	return list->head == list;
   2254e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 22628 <sys_clock_announce+0x114>
   22552:	f7fd fe2d 	bl	201b0 <z_spin_lock_set_owner>
   22556:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2255a:	4a34      	ldr	r2, [pc, #208]	; (2262c <sys_clock_announce+0x118>)
	announce_remaining = ticks;
   2255c:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22560:	454d      	cmp	r5, r9
		curr_tick += dt;
   22562:	e9d2 3c00 	ldrd	r3, ip, [r2]
   22566:	ea4f 71e4 	mov.w	r1, r4, asr #31
   2256a:	d00b      	beq.n	22584 <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2256c:	b155      	cbz	r5, 22584 <sys_clock_announce+0x70>
   2256e:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   22572:	42b4      	cmp	r4, r6
   22574:	eb71 0e00 	sbcs.w	lr, r1, r0
   22578:	da1b      	bge.n	225b2 <sys_clock_announce+0x9e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2257a:	1b36      	subs	r6, r6, r4
   2257c:	eb60 0001 	sbc.w	r0, r0, r1
   22580:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   22584:	18e3      	adds	r3, r4, r3
   22586:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   2258a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2258c:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   22590:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   22594:	f7ff fe22 	bl	221dc <next_timeout>
   22598:	4621      	mov	r1, r4
   2259a:	f7fa ff0f 	bl	1d3bc <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2259e:	481e      	ldr	r0, [pc, #120]	; (22618 <sys_clock_announce+0x104>)
   225a0:	f7fd fdf6 	bl	20190 <z_spin_unlock_valid>
   225a4:	b1a8      	cbz	r0, 225d2 <sys_clock_announce+0xbe>
	__asm__ volatile(
   225a6:	f387 8811 	msr	BASEPRI, r7
   225aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   225ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   225b2:	18f3      	adds	r3, r6, r3
   225b4:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   225b8:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   225bc:	2200      	movs	r2, #0
   225be:	2300      	movs	r3, #0
		remove_timeout(t);
   225c0:	4628      	mov	r0, r5
		t->dticks = 0;
   225c2:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   225c6:	f7ff fe31 	bl	2222c <remove_timeout>
   225ca:	4813      	ldr	r0, [pc, #76]	; (22618 <sys_clock_announce+0x104>)
   225cc:	f7fd fde0 	bl	20190 <z_spin_unlock_valid>
   225d0:	b930      	cbnz	r0, 225e0 <sys_clock_announce+0xcc>
   225d2:	4912      	ldr	r1, [pc, #72]	; (2261c <sys_clock_announce+0x108>)
   225d4:	4812      	ldr	r0, [pc, #72]	; (22620 <sys_clock_announce+0x10c>)
   225d6:	22c2      	movs	r2, #194	; 0xc2
   225d8:	f001 fa06 	bl	239e8 <assert_print>
   225dc:	21c2      	movs	r1, #194	; 0xc2
   225de:	e7b0      	b.n	22542 <sys_clock_announce+0x2e>
   225e0:	f387 8811 	msr	BASEPRI, r7
   225e4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   225e8:	68ab      	ldr	r3, [r5, #8]
   225ea:	4628      	mov	r0, r5
   225ec:	4798      	blx	r3
	__asm__ volatile(
   225ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   225f2:	f3ef 8711 	mrs	r7, BASEPRI
   225f6:	f383 8812 	msr	BASEPRI_MAX, r3
   225fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225fe:	4806      	ldr	r0, [pc, #24]	; (22618 <sys_clock_announce+0x104>)
   22600:	f7fd fdb8 	bl	20174 <z_spin_lock_valid>
   22604:	2800      	cmp	r0, #0
   22606:	d096      	beq.n	22536 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   22608:	4803      	ldr	r0, [pc, #12]	; (22618 <sys_clock_announce+0x104>)
   2260a:	f7fd fdd1 	bl	201b0 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   2260e:	f8d8 4000 	ldr.w	r4, [r8]
   22612:	1ba4      	subs	r4, r4, r6
   22614:	e79f      	b.n	22556 <sys_clock_announce+0x42>
   22616:	bf00      	nop
   22618:	20002550 	.word	0x20002550
   2261c:	000280f7 	.word	0x000280f7
   22620:	000280bd 	.word	0x000280bd
   22624:	2000254c 	.word	0x2000254c
   22628:	2000078c 	.word	0x2000078c
   2262c:	20001fd0 	.word	0x20001fd0

00022630 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   22630:	b570      	push	{r4, r5, r6, lr}
   22632:	f04f 0340 	mov.w	r3, #64	; 0x40
   22636:	f3ef 8611 	mrs	r6, BASEPRI
   2263a:	f383 8812 	msr	BASEPRI_MAX, r3
   2263e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22642:	4815      	ldr	r0, [pc, #84]	; (22698 <sys_clock_tick_get+0x68>)
   22644:	f7fd fd96 	bl	20174 <z_spin_lock_valid>
   22648:	b940      	cbnz	r0, 2265c <sys_clock_tick_get+0x2c>
   2264a:	4914      	ldr	r1, [pc, #80]	; (2269c <sys_clock_tick_get+0x6c>)
   2264c:	4814      	ldr	r0, [pc, #80]	; (226a0 <sys_clock_tick_get+0x70>)
   2264e:	2294      	movs	r2, #148	; 0x94
   22650:	f001 f9ca 	bl	239e8 <assert_print>
   22654:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22656:	4811      	ldr	r0, [pc, #68]	; (2269c <sys_clock_tick_get+0x6c>)
   22658:	f001 f9bf 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   2265c:	480e      	ldr	r0, [pc, #56]	; (22698 <sys_clock_tick_get+0x68>)
   2265e:	f7fd fda7 	bl	201b0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   22662:	f7ff fdb1 	bl	221c8 <elapsed>
   22666:	4a0f      	ldr	r2, [pc, #60]	; (226a4 <sys_clock_tick_get+0x74>)
   22668:	e9d2 4500 	ldrd	r4, r5, [r2]
   2266c:	1904      	adds	r4, r0, r4
   2266e:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22672:	4809      	ldr	r0, [pc, #36]	; (22698 <sys_clock_tick_get+0x68>)
   22674:	f7fd fd8c 	bl	20190 <z_spin_unlock_valid>
   22678:	b930      	cbnz	r0, 22688 <sys_clock_tick_get+0x58>
   2267a:	4908      	ldr	r1, [pc, #32]	; (2269c <sys_clock_tick_get+0x6c>)
   2267c:	4808      	ldr	r0, [pc, #32]	; (226a0 <sys_clock_tick_get+0x70>)
   2267e:	22c2      	movs	r2, #194	; 0xc2
   22680:	f001 f9b2 	bl	239e8 <assert_print>
   22684:	21c2      	movs	r1, #194	; 0xc2
   22686:	e7e6      	b.n	22656 <sys_clock_tick_get+0x26>
	__asm__ volatile(
   22688:	f386 8811 	msr	BASEPRI, r6
   2268c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22690:	4620      	mov	r0, r4
   22692:	4629      	mov	r1, r5
   22694:	bd70      	pop	{r4, r5, r6, pc}
   22696:	bf00      	nop
   22698:	20002550 	.word	0x20002550
   2269c:	000280f7 	.word	0x000280f7
   226a0:	000280bd 	.word	0x000280bd
   226a4:	20001fd0 	.word	0x20001fd0

000226a8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   226a8:	b570      	push	{r4, r5, r6, lr}
   226aa:	4604      	mov	r4, r0
	__asm__ volatile(
   226ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   226b0:	f3ef 8511 	mrs	r5, BASEPRI
   226b4:	f383 8812 	msr	BASEPRI_MAX, r3
   226b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226bc:	4844      	ldr	r0, [pc, #272]	; (227d0 <z_timer_expiration_handler+0x128>)
   226be:	f7fd fd59 	bl	20174 <z_spin_lock_valid>
   226c2:	b940      	cbnz	r0, 226d6 <z_timer_expiration_handler+0x2e>
   226c4:	4943      	ldr	r1, [pc, #268]	; (227d4 <z_timer_expiration_handler+0x12c>)
   226c6:	4844      	ldr	r0, [pc, #272]	; (227d8 <z_timer_expiration_handler+0x130>)
   226c8:	2294      	movs	r2, #148	; 0x94
   226ca:	f001 f98d 	bl	239e8 <assert_print>
   226ce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226d0:	4840      	ldr	r0, [pc, #256]	; (227d4 <z_timer_expiration_handler+0x12c>)
   226d2:	f001 f982 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   226d6:	483e      	ldr	r0, [pc, #248]	; (227d0 <z_timer_expiration_handler+0x128>)
   226d8:	f7fd fd6a 	bl	201b0 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   226dc:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   226e0:	3301      	adds	r3, #1
   226e2:	f142 0200 	adc.w	r2, r2, #0
   226e6:	2b02      	cmp	r3, #2
   226e8:	f172 0200 	sbcs.w	r2, r2, #0
   226ec:	d322      	bcc.n	22734 <z_timer_expiration_handler+0x8c>
	return z_impl_k_uptime_ticks();
   226ee:	f004 fc2d 	bl	26f4c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   226f2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   226f6:	3001      	adds	r0, #1
   226f8:	f141 0100 	adc.w	r1, r1, #0
   226fc:	18c0      	adds	r0, r0, r3
   226fe:	eb41 0102 	adc.w	r1, r1, r2
   22702:	2801      	cmp	r0, #1
   22704:	f171 0100 	sbcs.w	r1, r1, #0
   22708:	db24      	blt.n	22754 <z_timer_expiration_handler+0xac>
   2270a:	f004 fc1f 	bl	26f4c <z_impl_k_uptime_ticks>
   2270e:	3001      	adds	r0, #1
   22710:	f141 0300 	adc.w	r3, r1, #0
   22714:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   22718:	1880      	adds	r0, r0, r2
   2271a:	f06f 0201 	mvn.w	r2, #1
   2271e:	eb43 0301 	adc.w	r3, r3, r1
   22722:	1a12      	subs	r2, r2, r0
   22724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22728:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2272c:	492b      	ldr	r1, [pc, #172]	; (227dc <z_timer_expiration_handler+0x134>)
   2272e:	4620      	mov	r0, r4
   22730:	f7ff fd98 	bl	22264 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   22734:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22736:	3301      	adds	r3, #1
   22738:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2273a:	6a23      	ldr	r3, [r4, #32]
   2273c:	b333      	cbz	r3, 2278c <z_timer_expiration_handler+0xe4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2273e:	4824      	ldr	r0, [pc, #144]	; (227d0 <z_timer_expiration_handler+0x128>)
   22740:	f7fd fd26 	bl	20190 <z_spin_unlock_valid>
   22744:	b958      	cbnz	r0, 2275e <z_timer_expiration_handler+0xb6>
   22746:	4923      	ldr	r1, [pc, #140]	; (227d4 <z_timer_expiration_handler+0x12c>)
   22748:	4823      	ldr	r0, [pc, #140]	; (227d8 <z_timer_expiration_handler+0x130>)
   2274a:	22c2      	movs	r2, #194	; 0xc2
   2274c:	f001 f94c 	bl	239e8 <assert_print>
   22750:	21c2      	movs	r1, #194	; 0xc2
   22752:	e7bd      	b.n	226d0 <z_timer_expiration_handler+0x28>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   22754:	f06f 0201 	mvn.w	r2, #1
   22758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2275c:	e7e6      	b.n	2272c <z_timer_expiration_handler+0x84>
	__asm__ volatile(
   2275e:	f385 8811 	msr	BASEPRI, r5
   22762:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   22766:	6a23      	ldr	r3, [r4, #32]
   22768:	4620      	mov	r0, r4
   2276a:	4798      	blx	r3
	__asm__ volatile(
   2276c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22770:	f3ef 8511 	mrs	r5, BASEPRI
   22774:	f383 8812 	msr	BASEPRI_MAX, r3
   22778:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2277c:	4814      	ldr	r0, [pc, #80]	; (227d0 <z_timer_expiration_handler+0x128>)
   2277e:	f7fd fcf9 	bl	20174 <z_spin_lock_valid>
   22782:	2800      	cmp	r0, #0
   22784:	d09e      	beq.n	226c4 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   22786:	4812      	ldr	r0, [pc, #72]	; (227d0 <z_timer_expiration_handler+0x128>)
   22788:	f7fd fd12 	bl	201b0 <z_spin_lock_set_owner>
	return list->head == list;
   2278c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22790:	42a6      	cmp	r6, r4
   22792:	d000      	beq.n	22796 <z_timer_expiration_handler+0xee>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22794:	b94e      	cbnz	r6, 227aa <z_timer_expiration_handler+0x102>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22796:	480e      	ldr	r0, [pc, #56]	; (227d0 <z_timer_expiration_handler+0x128>)
   22798:	f7fd fcfa 	bl	20190 <z_spin_unlock_valid>
   2279c:	2800      	cmp	r0, #0
   2279e:	d0d2      	beq.n	22746 <z_timer_expiration_handler+0x9e>
	__asm__ volatile(
   227a0:	f385 8811 	msr	BASEPRI, r5
   227a4:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   227a8:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   227aa:	4630      	mov	r0, r6
   227ac:	f7fe fdee 	bl	2138c <z_unpend_thread_no_timeout>
   227b0:	2300      	movs	r3, #0
   227b2:	4807      	ldr	r0, [pc, #28]	; (227d0 <z_timer_expiration_handler+0x128>)
   227b4:	67f3      	str	r3, [r6, #124]	; 0x7c
   227b6:	f7fd fceb 	bl	20190 <z_spin_unlock_valid>
   227ba:	2800      	cmp	r0, #0
   227bc:	d0c3      	beq.n	22746 <z_timer_expiration_handler+0x9e>
   227be:	f385 8811 	msr	BASEPRI, r5
   227c2:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   227c6:	4630      	mov	r0, r6
}
   227c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   227cc:	f7fe bdaa 	b.w	21324 <z_ready_thread>
   227d0:	20002554 	.word	0x20002554
   227d4:	000280f7 	.word	0x000280f7
   227d8:	000280bd 	.word	0x000280bd
   227dc:	000226a9 	.word	0x000226a9

000227e0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   227e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   227e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   227e8:	bf08      	it	eq
   227ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   227ee:	4605      	mov	r5, r0
   227f0:	4614      	mov	r4, r2
   227f2:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   227f6:	4619      	mov	r1, r3
   227f8:	4691      	mov	r9, r2
   227fa:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   227fc:	d037      	beq.n	2286e <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   227fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   22802:	bf08      	it	eq
   22804:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   22808:	4637      	mov	r7, r6
   2280a:	4682      	mov	sl, r0
   2280c:	d011      	beq.n	22832 <z_impl_k_timer_start+0x52>
   2280e:	ea50 0306 	orrs.w	r3, r0, r6
   22812:	d00e      	beq.n	22832 <z_impl_k_timer_start+0x52>
   22814:	1c72      	adds	r2, r6, #1
   22816:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   2281a:	db0a      	blt.n	22832 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   2281c:	2e02      	cmp	r6, #2
   2281e:	4684      	mov	ip, r0
   22820:	f170 0000 	sbcs.w	r0, r0, #0
   22824:	bfbc      	itt	lt
   22826:	2702      	movlt	r7, #2
   22828:	f04f 0c00 	movlt.w	ip, #0
   2282c:	3f01      	subs	r7, #1
   2282e:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22832:	1c63      	adds	r3, r4, #1
   22834:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   22838:	db0a      	blt.n	22850 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2283a:	2c01      	cmp	r4, #1
   2283c:	f171 0300 	sbcs.w	r3, r1, #0
   22840:	4622      	mov	r2, r4
   22842:	bfbc      	itt	lt
   22844:	2201      	movlt	r2, #1
   22846:	2100      	movlt	r1, #0
   22848:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   2284c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   22850:	4628      	mov	r0, r5
   22852:	f7ff fdb3 	bl	223bc <z_abort_timeout>
	timer->period = period;
   22856:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   2285a:	2300      	movs	r3, #0
   2285c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2285e:	464a      	mov	r2, r9
   22860:	4643      	mov	r3, r8
   22862:	4628      	mov	r0, r5
   22864:	4903      	ldr	r1, [pc, #12]	; (22874 <z_impl_k_timer_start+0x94>)
		     duration);
}
   22866:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2286a:	f7ff bcfb 	b.w	22264 <z_add_timeout>
}
   2286e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22872:	bf00      	nop
   22874:	000226a9 	.word	0x000226a9

00022878 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   22878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2287c:	2500      	movs	r5, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2287e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 22a14 <register_events+0x19c>
{
   22882:	9301      	str	r3, [sp, #4]
   22884:	460f      	mov	r7, r1
   22886:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   22888:	4680      	mov	r8, r0
	int events_registered = 0;
   2288a:	462e      	mov	r6, r5
	event->poller = NULL;
   2288c:	46aa      	mov	sl, r5
	for (int ii = 0; ii < num_events; ii++) {
   2288e:	42bd      	cmp	r5, r7
   22890:	db03      	blt.n	2289a <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   22892:	4630      	mov	r0, r6
   22894:	b003      	add	sp, #12
   22896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2289a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2289e:	f3ef 8b11 	mrs	fp, BASEPRI
   228a2:	f383 8812 	msr	BASEPRI_MAX, r3
   228a6:	f3bf 8f6f 	isb	sy
   228aa:	4648      	mov	r0, r9
   228ac:	f7fd fc62 	bl	20174 <z_spin_lock_valid>
   228b0:	b938      	cbnz	r0, 228c2 <register_events+0x4a>
   228b2:	4959      	ldr	r1, [pc, #356]	; (22a18 <register_events+0x1a0>)
   228b4:	4859      	ldr	r0, [pc, #356]	; (22a1c <register_events+0x1a4>)
   228b6:	2294      	movs	r2, #148	; 0x94
   228b8:	f001 f896 	bl	239e8 <assert_print>
   228bc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228be:	4856      	ldr	r0, [pc, #344]	; (22a18 <register_events+0x1a0>)
   228c0:	e05b      	b.n	2297a <register_events+0x102>
	z_spin_lock_set_owner(l);
   228c2:	4648      	mov	r0, r9
   228c4:	f7fd fc74 	bl	201b0 <z_spin_lock_set_owner>
	switch (event->type) {
   228c8:	f898 300d 	ldrb.w	r3, [r8, #13]
   228cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   228d0:	2b08      	cmp	r3, #8
   228d2:	d84b      	bhi.n	2296c <register_events+0xf4>
   228d4:	e8df f003 	tbb	[pc, r3]
   228d8:	4a053c29 	.word	0x4a053c29
   228dc:	4a4a4a25 	.word	0x4a4a4a25
   228e0:	43          	.byte	0x43
   228e1:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   228e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   228e6:	689b      	ldr	r3, [r3, #8]
   228e8:	b1fb      	cbz	r3, 2292a <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   228ea:	2302      	movs	r3, #2
	event->state |= state;
   228ec:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   228f0:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   228f4:	f3c2 3086 	ubfx	r0, r2, #14, #7
   228f8:	4303      	orrs	r3, r0
   228fa:	f363 3294 	bfi	r2, r3, #14, #7
   228fe:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   22902:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22906:	4648      	mov	r0, r9
   22908:	f7fd fc42 	bl	20190 <z_spin_unlock_valid>
   2290c:	f108 0814 	add.w	r8, r8, #20
   22910:	2800      	cmp	r0, #0
   22912:	d179      	bne.n	22a08 <register_events+0x190>
   22914:	4940      	ldr	r1, [pc, #256]	; (22a18 <register_events+0x1a0>)
   22916:	4841      	ldr	r0, [pc, #260]	; (22a1c <register_events+0x1a4>)
   22918:	22c2      	movs	r2, #194	; 0xc2
   2291a:	f001 f865 	bl	239e8 <assert_print>
   2291e:	21c2      	movs	r1, #194	; 0xc2
   22920:	e7cd      	b.n	228be <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   22922:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22926:	681b      	ldr	r3, [r3, #0]
   22928:	bb4b      	cbnz	r3, 2297e <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   2292a:	9b01      	ldr	r3, [sp, #4]
   2292c:	2b00      	cmp	r3, #0
   2292e:	d1ea      	bne.n	22906 <register_events+0x8e>
   22930:	7823      	ldrb	r3, [r4, #0]
   22932:	2b00      	cmp	r3, #0
   22934:	d0e7      	beq.n	22906 <register_events+0x8e>
	switch (event->type) {
   22936:	f898 300d 	ldrb.w	r3, [r8, #13]
   2293a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2293e:	2b08      	cmp	r3, #8
   22940:	d85b      	bhi.n	229fa <register_events+0x182>
   22942:	e8df f003 	tbb	[pc, r3]
   22946:	3f2d      	.short	0x3f2d
   22948:	5a315a1e 	.word	0x5a315a1e
   2294c:	5a5a      	.short	0x5a5a
   2294e:	4c          	.byte	0x4c
   2294f:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   22950:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22954:	689b      	ldr	r3, [r3, #8]
   22956:	2b00      	cmp	r3, #0
   22958:	d0e7      	beq.n	2292a <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   2295a:	2301      	movs	r3, #1
   2295c:	e7c6      	b.n	228ec <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   2295e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22964:	2b00      	cmp	r3, #0
   22966:	d0e0      	beq.n	2292a <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   22968:	2310      	movs	r3, #16
   2296a:	e7bf      	b.n	228ec <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2296c:	492c      	ldr	r1, [pc, #176]	; (22a20 <register_events+0x1a8>)
   2296e:	482b      	ldr	r0, [pc, #172]	; (22a1c <register_events+0x1a4>)
   22970:	2263      	movs	r2, #99	; 0x63
   22972:	f001 f839 	bl	239e8 <assert_print>
   22976:	2163      	movs	r1, #99	; 0x63
   22978:	4829      	ldr	r0, [pc, #164]	; (22a20 <register_events+0x1a8>)
   2297a:	f001 f82e 	bl	239da <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2297e:	2304      	movs	r3, #4
   22980:	e7b4      	b.n	228ec <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22982:	f8d8 0010 	ldr.w	r0, [r8, #16]
   22986:	b930      	cbnz	r0, 22996 <register_events+0x11e>
   22988:	4925      	ldr	r1, [pc, #148]	; (22a20 <register_events+0x1a8>)
   2298a:	4824      	ldr	r0, [pc, #144]	; (22a1c <register_events+0x1a4>)
   2298c:	228d      	movs	r2, #141	; 0x8d
   2298e:	f001 f82b 	bl	239e8 <assert_print>
   22992:	218d      	movs	r1, #141	; 0x8d
   22994:	e7f0      	b.n	22978 <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   22996:	4622      	mov	r2, r4
   22998:	4641      	mov	r1, r8
   2299a:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2299c:	f004 fb1b 	bl	26fd6 <add_event>
	event->poller = poller;
   229a0:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   229a4:	3601      	adds	r6, #1
   229a6:	e7ae      	b.n	22906 <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   229a8:	f8d8 0010 	ldr.w	r0, [r8, #16]
   229ac:	b930      	cbnz	r0, 229bc <register_events+0x144>
   229ae:	491c      	ldr	r1, [pc, #112]	; (22a20 <register_events+0x1a8>)
   229b0:	481a      	ldr	r0, [pc, #104]	; (22a1c <register_events+0x1a4>)
   229b2:	2291      	movs	r2, #145	; 0x91
   229b4:	f001 f818 	bl	239e8 <assert_print>
   229b8:	2191      	movs	r1, #145	; 0x91
   229ba:	e7dd      	b.n	22978 <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   229bc:	4622      	mov	r2, r4
   229be:	4641      	mov	r1, r8
   229c0:	3014      	adds	r0, #20
   229c2:	e7eb      	b.n	2299c <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   229c4:	f8d8 0010 	ldr.w	r0, [r8, #16]
   229c8:	b930      	cbnz	r0, 229d8 <register_events+0x160>
   229ca:	4915      	ldr	r1, [pc, #84]	; (22a20 <register_events+0x1a8>)
   229cc:	4813      	ldr	r0, [pc, #76]	; (22a1c <register_events+0x1a4>)
   229ce:	2295      	movs	r2, #149	; 0x95
   229d0:	f001 f80a 	bl	239e8 <assert_print>
   229d4:	2195      	movs	r1, #149	; 0x95
   229d6:	e7cf      	b.n	22978 <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   229d8:	4622      	mov	r2, r4
   229da:	4641      	mov	r1, r8
   229dc:	e7de      	b.n	2299c <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   229de:	f8d8 0010 	ldr.w	r0, [r8, #16]
   229e2:	b930      	cbnz	r0, 229f2 <register_events+0x17a>
   229e4:	490e      	ldr	r1, [pc, #56]	; (22a20 <register_events+0x1a8>)
   229e6:	480d      	ldr	r0, [pc, #52]	; (22a1c <register_events+0x1a4>)
   229e8:	2299      	movs	r2, #153	; 0x99
   229ea:	f000 fffd 	bl	239e8 <assert_print>
   229ee:	2199      	movs	r1, #153	; 0x99
   229f0:	e7c2      	b.n	22978 <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   229f2:	4622      	mov	r2, r4
   229f4:	4641      	mov	r1, r8
   229f6:	3028      	adds	r0, #40	; 0x28
   229f8:	e7d0      	b.n	2299c <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   229fa:	4909      	ldr	r1, [pc, #36]	; (22a20 <register_events+0x1a8>)
   229fc:	4807      	ldr	r0, [pc, #28]	; (22a1c <register_events+0x1a4>)
   229fe:	22a6      	movs	r2, #166	; 0xa6
   22a00:	f000 fff2 	bl	239e8 <assert_print>
   22a04:	21a6      	movs	r1, #166	; 0xa6
   22a06:	e7b7      	b.n	22978 <register_events+0x100>
	__asm__ volatile(
   22a08:	f38b 8811 	msr	BASEPRI, fp
   22a0c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22a10:	3501      	adds	r5, #1
   22a12:	e73c      	b.n	2288e <register_events+0x16>
   22a14:	20002558 	.word	0x20002558
   22a18:	000280f7 	.word	0x000280f7
   22a1c:	000280bd 	.word	0x000280bd
   22a20:	0002b166 	.word	0x0002b166

00022a24 <clear_event_registrations>:
{
   22a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a28:	2314      	movs	r3, #20
   22a2a:	4f3e      	ldr	r7, [pc, #248]	; (22b24 <clear_event_registrations+0x100>)
   22a2c:	4615      	mov	r5, r2
	while (num_events--) {
   22a2e:	460c      	mov	r4, r1
   22a30:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   22a34:	2600      	movs	r6, #0
	while (num_events--) {
   22a36:	b90c      	cbnz	r4, 22a3c <clear_event_registrations+0x18>
}
   22a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   22a3c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   22a40:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   22a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22a48:	f1a0 0814 	sub.w	r8, r0, #20
   22a4c:	2b08      	cmp	r3, #8
   22a4e:	d830      	bhi.n	22ab2 <clear_event_registrations+0x8e>
   22a50:	e8df f003 	tbb	[pc, r3]
   22a54:	2f051b3f 	.word	0x2f051b3f
   22a58:	2f2f2f11 	.word	0x2f2f2f11
   22a5c:	25          	.byte	0x25
   22a5d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22a5e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22a62:	bb6b      	cbnz	r3, 22ac0 <clear_event_registrations+0x9c>
   22a64:	4930      	ldr	r1, [pc, #192]	; (22b28 <clear_event_registrations+0x104>)
   22a66:	4831      	ldr	r0, [pc, #196]	; (22b2c <clear_event_registrations+0x108>)
   22a68:	22b6      	movs	r2, #182	; 0xb6
   22a6a:	f000 ffbd 	bl	239e8 <assert_print>
   22a6e:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22a70:	482d      	ldr	r0, [pc, #180]	; (22b28 <clear_event_registrations+0x104>)
   22a72:	f000 ffb2 	bl	239da <assert_post_action>
   22a76:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22a7a:	bb0b      	cbnz	r3, 22ac0 <clear_event_registrations+0x9c>
   22a7c:	492a      	ldr	r1, [pc, #168]	; (22b28 <clear_event_registrations+0x104>)
   22a7e:	482b      	ldr	r0, [pc, #172]	; (22b2c <clear_event_registrations+0x108>)
   22a80:	22ba      	movs	r2, #186	; 0xba
   22a82:	f000 ffb1 	bl	239e8 <assert_print>
   22a86:	21ba      	movs	r1, #186	; 0xba
   22a88:	e7f2      	b.n	22a70 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22a8a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22a8e:	b9bb      	cbnz	r3, 22ac0 <clear_event_registrations+0x9c>
   22a90:	4925      	ldr	r1, [pc, #148]	; (22b28 <clear_event_registrations+0x104>)
   22a92:	4826      	ldr	r0, [pc, #152]	; (22b2c <clear_event_registrations+0x108>)
   22a94:	22be      	movs	r2, #190	; 0xbe
   22a96:	f000 ffa7 	bl	239e8 <assert_print>
   22a9a:	21be      	movs	r1, #190	; 0xbe
   22a9c:	e7e8      	b.n	22a70 <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22a9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22aa2:	b96b      	cbnz	r3, 22ac0 <clear_event_registrations+0x9c>
   22aa4:	4920      	ldr	r1, [pc, #128]	; (22b28 <clear_event_registrations+0x104>)
   22aa6:	4821      	ldr	r0, [pc, #132]	; (22b2c <clear_event_registrations+0x108>)
   22aa8:	22c2      	movs	r2, #194	; 0xc2
   22aaa:	f000 ff9d 	bl	239e8 <assert_print>
   22aae:	21c2      	movs	r1, #194	; 0xc2
   22ab0:	e7de      	b.n	22a70 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   22ab2:	491d      	ldr	r1, [pc, #116]	; (22b28 <clear_event_registrations+0x104>)
   22ab4:	481d      	ldr	r0, [pc, #116]	; (22b2c <clear_event_registrations+0x108>)
   22ab6:	22cf      	movs	r2, #207	; 0xcf
   22ab8:	f000 ff96 	bl	239e8 <assert_print>
   22abc:	21cf      	movs	r1, #207	; 0xcf
   22abe:	e7d7      	b.n	22a70 <clear_event_registrations+0x4c>
	return node->next != NULL;
   22ac0:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22ac4:	b12b      	cbz	r3, 22ad2 <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   22ac6:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   22aca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22acc:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   22ace:	e940 6605 	strd	r6, r6, [r0, #-20]
   22ad2:	4638      	mov	r0, r7
   22ad4:	f7fd fb5c 	bl	20190 <z_spin_unlock_valid>
   22ad8:	b938      	cbnz	r0, 22aea <clear_event_registrations+0xc6>
   22ada:	4915      	ldr	r1, [pc, #84]	; (22b30 <clear_event_registrations+0x10c>)
   22adc:	4813      	ldr	r0, [pc, #76]	; (22b2c <clear_event_registrations+0x108>)
   22ade:	22c2      	movs	r2, #194	; 0xc2
   22ae0:	f000 ff82 	bl	239e8 <assert_print>
   22ae4:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ae6:	4812      	ldr	r0, [pc, #72]	; (22b30 <clear_event_registrations+0x10c>)
   22ae8:	e7c3      	b.n	22a72 <clear_event_registrations+0x4e>
   22aea:	f385 8811 	msr	BASEPRI, r5
   22aee:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22af2:	f04f 0340 	mov.w	r3, #64	; 0x40
   22af6:	f3ef 8511 	mrs	r5, BASEPRI
   22afa:	f383 8812 	msr	BASEPRI_MAX, r3
   22afe:	f3bf 8f6f 	isb	sy
   22b02:	4638      	mov	r0, r7
   22b04:	f7fd fb36 	bl	20174 <z_spin_lock_valid>
   22b08:	3c01      	subs	r4, #1
   22b0a:	b930      	cbnz	r0, 22b1a <clear_event_registrations+0xf6>
   22b0c:	4908      	ldr	r1, [pc, #32]	; (22b30 <clear_event_registrations+0x10c>)
   22b0e:	4807      	ldr	r0, [pc, #28]	; (22b2c <clear_event_registrations+0x108>)
   22b10:	2294      	movs	r2, #148	; 0x94
   22b12:	f000 ff69 	bl	239e8 <assert_print>
   22b16:	2194      	movs	r1, #148	; 0x94
   22b18:	e7e5      	b.n	22ae6 <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   22b1a:	4638      	mov	r0, r7
   22b1c:	f7fd fb48 	bl	201b0 <z_spin_lock_set_owner>
	return k;
   22b20:	4640      	mov	r0, r8
   22b22:	e788      	b.n	22a36 <clear_event_registrations+0x12>
   22b24:	20002558 	.word	0x20002558
   22b28:	0002b166 	.word	0x0002b166
   22b2c:	000280bd 	.word	0x000280bd
   22b30:	000280f7 	.word	0x000280f7

00022b34 <k_poll_event_init>:
{
   22b34:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   22b36:	b142      	cbz	r2, 22b4a <k_poll_event_init+0x16>
   22b38:	4911      	ldr	r1, [pc, #68]	; (22b80 <k_poll_event_init+0x4c>)
   22b3a:	4812      	ldr	r0, [pc, #72]	; (22b84 <k_poll_event_init+0x50>)
   22b3c:	222d      	movs	r2, #45	; 0x2d
   22b3e:	f000 ff53 	bl	239e8 <assert_print>
   22b42:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22b44:	480e      	ldr	r0, [pc, #56]	; (22b80 <k_poll_event_init+0x4c>)
   22b46:	f000 ff48 	bl	239da <assert_post_action>
   22b4a:	293f      	cmp	r1, #63	; 0x3f
   22b4c:	d906      	bls.n	22b5c <k_poll_event_init+0x28>
   22b4e:	490c      	ldr	r1, [pc, #48]	; (22b80 <k_poll_event_init+0x4c>)
   22b50:	480c      	ldr	r0, [pc, #48]	; (22b84 <k_poll_event_init+0x50>)
   22b52:	222f      	movs	r2, #47	; 0x2f
   22b54:	f000 ff48 	bl	239e8 <assert_print>
   22b58:	212f      	movs	r1, #47	; 0x2f
   22b5a:	e7f3      	b.n	22b44 <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   22b5c:	b933      	cbnz	r3, 22b6c <k_poll_event_init+0x38>
   22b5e:	4908      	ldr	r1, [pc, #32]	; (22b80 <k_poll_event_init+0x4c>)
   22b60:	4808      	ldr	r0, [pc, #32]	; (22b84 <k_poll_event_init+0x50>)
   22b62:	2230      	movs	r2, #48	; 0x30
   22b64:	f000 ff40 	bl	239e8 <assert_print>
   22b68:	2130      	movs	r1, #48	; 0x30
   22b6a:	e7eb      	b.n	22b44 <k_poll_event_init+0x10>
	event->poller = NULL;
   22b6c:	6082      	str	r2, [r0, #8]
	event->type = type;
   22b6e:	0209      	lsls	r1, r1, #8
   22b70:	7b02      	ldrb	r2, [r0, #12]
   22b72:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   22b76:	4311      	orrs	r1, r2
	event->obj = obj;
   22b78:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   22b7c:	bd08      	pop	{r3, pc}
   22b7e:	bf00      	nop
   22b80:	0002b166 	.word	0x0002b166
   22b84:	000280bd 	.word	0x000280bd

00022b88 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b8c:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   22b8e:	4b51      	ldr	r3, [pc, #324]	; (22cd4 <z_impl_k_poll+0x14c>)
   22b90:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   22b94:	2301      	movs	r3, #1
{
   22b96:	4617      	mov	r7, r2
   22b98:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   22b9a:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   22b9e:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   22ba2:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   22ba6:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   22baa:	f1bb 0f00 	cmp.w	fp, #0
   22bae:	d00a      	beq.n	22bc6 <z_impl_k_poll+0x3e>
   22bb0:	4949      	ldr	r1, [pc, #292]	; (22cd8 <z_impl_k_poll+0x150>)
   22bb2:	484a      	ldr	r0, [pc, #296]	; (22cdc <z_impl_k_poll+0x154>)
   22bb4:	f240 122d 	movw	r2, #301	; 0x12d
   22bb8:	f000 ff16 	bl	239e8 <assert_print>
   22bbc:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   22bc0:	4845      	ldr	r0, [pc, #276]	; (22cd8 <z_impl_k_poll+0x150>)
   22bc2:	f000 ff0a 	bl	239da <assert_post_action>
   22bc6:	b940      	cbnz	r0, 22bda <z_impl_k_poll+0x52>
   22bc8:	4943      	ldr	r1, [pc, #268]	; (22cd8 <z_impl_k_poll+0x150>)
   22bca:	4844      	ldr	r0, [pc, #272]	; (22cdc <z_impl_k_poll+0x154>)
   22bcc:	f44f 7297 	mov.w	r2, #302	; 0x12e
   22bd0:	f000 ff0a 	bl	239e8 <assert_print>
   22bd4:	f44f 7197 	mov.w	r1, #302	; 0x12e
   22bd8:	e7f2      	b.n	22bc0 <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   22bda:	2900      	cmp	r1, #0
   22bdc:	da08      	bge.n	22bf0 <z_impl_k_poll+0x68>
   22bde:	493e      	ldr	r1, [pc, #248]	; (22cd8 <z_impl_k_poll+0x150>)
   22be0:	483e      	ldr	r0, [pc, #248]	; (22cdc <z_impl_k_poll+0x154>)
   22be2:	f240 122f 	movw	r2, #303	; 0x12f
   22be6:	f000 feff 	bl	239e8 <assert_print>
   22bea:	f240 112f 	movw	r1, #303	; 0x12f
   22bee:	e7e7      	b.n	22bc0 <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22bf0:	ea57 0306 	orrs.w	r3, r7, r6
   22bf4:	bf0c      	ite	eq
   22bf6:	2301      	moveq	r3, #1
   22bf8:	2300      	movne	r3, #0
   22bfa:	f7ff fe3d 	bl	22878 <register_events>
   22bfe:	4681      	mov	r9, r0
   22c00:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c04:	f3ef 8a11 	mrs	sl, BASEPRI
   22c08:	f383 8812 	msr	BASEPRI_MAX, r3
   22c0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c10:	4833      	ldr	r0, [pc, #204]	; (22ce0 <z_impl_k_poll+0x158>)
   22c12:	f7fd faaf 	bl	20174 <z_spin_lock_valid>
   22c16:	b938      	cbnz	r0, 22c28 <z_impl_k_poll+0xa0>
   22c18:	4932      	ldr	r1, [pc, #200]	; (22ce4 <z_impl_k_poll+0x15c>)
   22c1a:	4830      	ldr	r0, [pc, #192]	; (22cdc <z_impl_k_poll+0x154>)
   22c1c:	2294      	movs	r2, #148	; 0x94
   22c1e:	f000 fee3 	bl	239e8 <assert_print>
   22c22:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c24:	482f      	ldr	r0, [pc, #188]	; (22ce4 <z_impl_k_poll+0x15c>)
   22c26:	e7cc      	b.n	22bc2 <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   22c28:	482d      	ldr	r0, [pc, #180]	; (22ce0 <z_impl_k_poll+0x158>)
   22c2a:	f7fd fac1 	bl	201b0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22c2e:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   22c32:	b9bc      	cbnz	r4, 22c64 <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   22c34:	4628      	mov	r0, r5
   22c36:	4652      	mov	r2, sl
   22c38:	4649      	mov	r1, r9
   22c3a:	f7ff fef3 	bl	22a24 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c3e:	4828      	ldr	r0, [pc, #160]	; (22ce0 <z_impl_k_poll+0x158>)
   22c40:	f7fd faa6 	bl	20190 <z_spin_unlock_valid>
   22c44:	b930      	cbnz	r0, 22c54 <z_impl_k_poll+0xcc>
   22c46:	4927      	ldr	r1, [pc, #156]	; (22ce4 <z_impl_k_poll+0x15c>)
   22c48:	4824      	ldr	r0, [pc, #144]	; (22cdc <z_impl_k_poll+0x154>)
   22c4a:	22c2      	movs	r2, #194	; 0xc2
   22c4c:	f000 fecc 	bl	239e8 <assert_print>
   22c50:	21c2      	movs	r1, #194	; 0xc2
   22c52:	e7e7      	b.n	22c24 <z_impl_k_poll+0x9c>
	__asm__ volatile(
   22c54:	f38a 8811 	msr	BASEPRI, sl
   22c58:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22c5c:	4620      	mov	r0, r4
   22c5e:	b003      	add	sp, #12
   22c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22c64:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   22c68:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22c6c:	d10b      	bne.n	22c86 <z_impl_k_poll+0xfe>
   22c6e:	481c      	ldr	r0, [pc, #112]	; (22ce0 <z_impl_k_poll+0x158>)
   22c70:	f7fd fa8e 	bl	20190 <z_spin_unlock_valid>
   22c74:	2800      	cmp	r0, #0
   22c76:	d0e6      	beq.n	22c46 <z_impl_k_poll+0xbe>
   22c78:	f38a 8811 	msr	BASEPRI, sl
   22c7c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22c80:	f06f 040a 	mvn.w	r4, #10
   22c84:	e7ea      	b.n	22c5c <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22c86:	e9cd 7600 	strd	r7, r6, [sp]
   22c8a:	4a17      	ldr	r2, [pc, #92]	; (22ce8 <z_impl_k_poll+0x160>)
   22c8c:	4814      	ldr	r0, [pc, #80]	; (22ce0 <z_impl_k_poll+0x158>)
   22c8e:	4651      	mov	r1, sl
   22c90:	f7fe fe04 	bl	2189c <z_pend_curr>
   22c94:	4604      	mov	r4, r0
	__asm__ volatile(
   22c96:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c9a:	f3ef 8611 	mrs	r6, BASEPRI
   22c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   22ca2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ca6:	480e      	ldr	r0, [pc, #56]	; (22ce0 <z_impl_k_poll+0x158>)
   22ca8:	f7fd fa64 	bl	20174 <z_spin_lock_valid>
   22cac:	2800      	cmp	r0, #0
   22cae:	d0b3      	beq.n	22c18 <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   22cb0:	480b      	ldr	r0, [pc, #44]	; (22ce0 <z_impl_k_poll+0x158>)
   22cb2:	f7fd fa7d 	bl	201b0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   22cb6:	4628      	mov	r0, r5
   22cb8:	4632      	mov	r2, r6
   22cba:	4649      	mov	r1, r9
   22cbc:	f7ff feb2 	bl	22a24 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cc0:	4807      	ldr	r0, [pc, #28]	; (22ce0 <z_impl_k_poll+0x158>)
   22cc2:	f7fd fa65 	bl	20190 <z_spin_unlock_valid>
   22cc6:	2800      	cmp	r0, #0
   22cc8:	d0bd      	beq.n	22c46 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   22cca:	f386 8811 	msr	BASEPRI, r6
   22cce:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22cd2:	e7c3      	b.n	22c5c <z_impl_k_poll+0xd4>
   22cd4:	20002500 	.word	0x20002500
   22cd8:	0002b166 	.word	0x0002b166
   22cdc:	000280bd 	.word	0x000280bd
   22ce0:	20002558 	.word	0x20002558
   22ce4:	000280f7 	.word	0x000280f7
   22ce8:	20000794 	.word	0x20000794

00022cec <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22cec:	b570      	push	{r4, r5, r6, lr}
   22cee:	4604      	mov	r4, r0
   22cf0:	460d      	mov	r5, r1
	__asm__ volatile(
   22cf2:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cf6:	f3ef 8611 	mrs	r6, BASEPRI
   22cfa:	f383 8812 	msr	BASEPRI_MAX, r3
   22cfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d02:	481b      	ldr	r0, [pc, #108]	; (22d70 <z_impl_k_poll_signal_raise+0x84>)
   22d04:	f7fd fa36 	bl	20174 <z_spin_lock_valid>
   22d08:	b940      	cbnz	r0, 22d1c <z_impl_k_poll_signal_raise+0x30>
   22d0a:	491a      	ldr	r1, [pc, #104]	; (22d74 <z_impl_k_poll_signal_raise+0x88>)
   22d0c:	481a      	ldr	r0, [pc, #104]	; (22d78 <z_impl_k_poll_signal_raise+0x8c>)
   22d0e:	2294      	movs	r2, #148	; 0x94
   22d10:	f000 fe6a 	bl	239e8 <assert_print>
   22d14:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d16:	4817      	ldr	r0, [pc, #92]	; (22d74 <z_impl_k_poll_signal_raise+0x88>)
   22d18:	f000 fe5f 	bl	239da <assert_post_action>
	z_spin_lock_set_owner(l);
   22d1c:	4814      	ldr	r0, [pc, #80]	; (22d70 <z_impl_k_poll_signal_raise+0x84>)
   22d1e:	f7fd fa47 	bl	201b0 <z_spin_lock_set_owner>
	return list->head == list;
   22d22:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   22d24:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   22d26:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22d28:	4284      	cmp	r4, r0
   22d2a:	60a1      	str	r1, [r4, #8]
   22d2c:	d10a      	bne.n	22d44 <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d2e:	4810      	ldr	r0, [pc, #64]	; (22d70 <z_impl_k_poll_signal_raise+0x84>)
   22d30:	f7fd fa2e 	bl	20190 <z_spin_unlock_valid>
   22d34:	b9b0      	cbnz	r0, 22d64 <z_impl_k_poll_signal_raise+0x78>
   22d36:	490f      	ldr	r1, [pc, #60]	; (22d74 <z_impl_k_poll_signal_raise+0x88>)
   22d38:	480f      	ldr	r0, [pc, #60]	; (22d78 <z_impl_k_poll_signal_raise+0x8c>)
   22d3a:	22c2      	movs	r2, #194	; 0xc2
   22d3c:	f000 fe54 	bl	239e8 <assert_print>
   22d40:	21c2      	movs	r1, #194	; 0xc2
   22d42:	e7e8      	b.n	22d16 <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   22d44:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22d48:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22d4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22d4c:	2300      	movs	r3, #0
	node->prev = NULL;
   22d4e:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22d52:	f004 f971 	bl	27038 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   22d56:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22d58:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   22d5a:	4805      	ldr	r0, [pc, #20]	; (22d70 <z_impl_k_poll_signal_raise+0x84>)
   22d5c:	f7fe fb4a 	bl	213f4 <z_reschedule>
	return rc;
}
   22d60:	4620      	mov	r0, r4
   22d62:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   22d64:	f386 8811 	msr	BASEPRI, r6
   22d68:	f3bf 8f6f 	isb	sy
		return 0;
   22d6c:	2400      	movs	r4, #0
   22d6e:	e7f7      	b.n	22d60 <z_impl_k_poll_signal_raise+0x74>
   22d70:	20002558 	.word	0x20002558
   22d74:	000280f7 	.word	0x000280f7
   22d78:	000280bd 	.word	0x000280bd

00022d7c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   22d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22d7e:	4605      	mov	r5, r0
   22d80:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22d82:	f003 ffe9 	bl	26d58 <k_is_in_isr>
   22d86:	b9f0      	cbnz	r0, 22dc6 <z_thread_aligned_alloc+0x4a>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22d88:	4b11      	ldr	r3, [pc, #68]	; (22dd0 <z_thread_aligned_alloc+0x54>)
   22d8a:	689b      	ldr	r3, [r3, #8]
   22d8c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   22d8e:	b1dc      	cbz	r4, 22dc8 <z_thread_aligned_alloc+0x4c>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22d90:	1d32      	adds	r2, r6, #4
   22d92:	d218      	bcs.n	22dc6 <z_thread_aligned_alloc+0x4a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22d94:	2000      	movs	r0, #0
   22d96:	2100      	movs	r1, #0
   22d98:	e9cd 0100 	strd	r0, r1, [sp]
   22d9c:	f045 0104 	orr.w	r1, r5, #4
   22da0:	4620      	mov	r0, r4
   22da2:	f7fc ff57 	bl	1fc54 <k_heap_aligned_alloc>
	if (mem == NULL) {
   22da6:	b170      	cbz	r0, 22dc6 <z_thread_aligned_alloc+0x4a>
	*heap_ref = heap;
   22da8:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   22daa:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   22dac:	b165      	cbz	r5, 22dc8 <z_thread_aligned_alloc+0x4c>
   22dae:	3d01      	subs	r5, #1
   22db0:	422c      	tst	r4, r5
   22db2:	d009      	beq.n	22dc8 <z_thread_aligned_alloc+0x4c>
   22db4:	4907      	ldr	r1, [pc, #28]	; (22dd4 <z_thread_aligned_alloc+0x58>)
   22db6:	4808      	ldr	r0, [pc, #32]	; (22dd8 <z_thread_aligned_alloc+0x5c>)
   22db8:	2225      	movs	r2, #37	; 0x25
   22dba:	f000 fe15 	bl	239e8 <assert_print>
   22dbe:	4805      	ldr	r0, [pc, #20]	; (22dd4 <z_thread_aligned_alloc+0x58>)
   22dc0:	2125      	movs	r1, #37	; 0x25
   22dc2:	f000 fe0a 	bl	239da <assert_post_action>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   22dc6:	2400      	movs	r4, #0
	}

	return ret;
}
   22dc8:	4620      	mov	r0, r4
   22dca:	b002      	add	sp, #8
   22dcc:	bd70      	pop	{r4, r5, r6, pc}
   22dce:	bf00      	nop
   22dd0:	20002500 	.word	0x20002500
   22dd4:	0002b187 	.word	0x0002b187
   22dd8:	000280bd 	.word	0x000280bd

00022ddc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   22ddc:	4801      	ldr	r0, [pc, #4]	; (22de4 <boot_banner+0x8>)
   22dde:	f000 bbfb 	b.w	235d8 <printk>
   22de2:	bf00      	nop
   22de4:	0002b1ab 	.word	0x0002b1ab

00022de8 <ocrypto_ecdh_p256_public_key>:
   22de8:	b530      	push	{r4, r5, lr}
   22dea:	b099      	sub	sp, #100	; 0x64
   22dec:	4605      	mov	r5, r0
   22dee:	4668      	mov	r0, sp
   22df0:	f000 f828 	bl	22e44 <ocrypto_sc_p256_from32bytes>
   22df4:	4669      	mov	r1, sp
   22df6:	4604      	mov	r4, r0
   22df8:	a808      	add	r0, sp, #32
   22dfa:	f000 fa53 	bl	232a4 <ocrypto_curve_p256_scalarmult_base>
   22dfe:	a908      	add	r1, sp, #32
   22e00:	4304      	orrs	r4, r0
   22e02:	4628      	mov	r0, r5
   22e04:	f000 f98a 	bl	2311c <ocrypto_curve_p256_to64bytes>
   22e08:	4620      	mov	r0, r4
   22e0a:	b019      	add	sp, #100	; 0x64
   22e0c:	bd30      	pop	{r4, r5, pc}
   22e0e:	bf00      	nop

00022e10 <ocrypto_ecdh_p256_common_secret>:
   22e10:	b570      	push	{r4, r5, r6, lr}
   22e12:	b098      	sub	sp, #96	; 0x60
   22e14:	4605      	mov	r5, r0
   22e16:	4668      	mov	r0, sp
   22e18:	4616      	mov	r6, r2
   22e1a:	f000 f813 	bl	22e44 <ocrypto_sc_p256_from32bytes>
   22e1e:	4631      	mov	r1, r6
   22e20:	4604      	mov	r4, r0
   22e22:	a808      	add	r0, sp, #32
   22e24:	f000 f946 	bl	230b4 <ocrypto_curve_p256_from64bytes>
   22e28:	a908      	add	r1, sp, #32
   22e2a:	466a      	mov	r2, sp
   22e2c:	4304      	orrs	r4, r0
   22e2e:	4608      	mov	r0, r1
   22e30:	f000 f982 	bl	23138 <ocrypto_curve_p256_scalarmult>
   22e34:	a908      	add	r1, sp, #32
   22e36:	4304      	orrs	r4, r0
   22e38:	4628      	mov	r0, r5
   22e3a:	f000 f96d 	bl	23118 <ocrypto_curve_p256_to32bytes>
   22e3e:	4620      	mov	r0, r4
   22e40:	b018      	add	sp, #96	; 0x60
   22e42:	bd70      	pop	{r4, r5, r6, pc}

00022e44 <ocrypto_sc_p256_from32bytes>:
   22e44:	b570      	push	{r4, r5, r6, lr}
   22e46:	680b      	ldr	r3, [r1, #0]
   22e48:	4e12      	ldr	r6, [pc, #72]	; (22e94 <ocrypto_sc_p256_from32bytes+0x50>)
   22e4a:	ba1b      	rev	r3, r3
   22e4c:	61c3      	str	r3, [r0, #28]
   22e4e:	684b      	ldr	r3, [r1, #4]
   22e50:	ba1b      	rev	r3, r3
   22e52:	6183      	str	r3, [r0, #24]
   22e54:	688b      	ldr	r3, [r1, #8]
   22e56:	ba1b      	rev	r3, r3
   22e58:	6143      	str	r3, [r0, #20]
   22e5a:	68cb      	ldr	r3, [r1, #12]
   22e5c:	ba1b      	rev	r3, r3
   22e5e:	6103      	str	r3, [r0, #16]
   22e60:	690b      	ldr	r3, [r1, #16]
   22e62:	ba1b      	rev	r3, r3
   22e64:	60c3      	str	r3, [r0, #12]
   22e66:	694b      	ldr	r3, [r1, #20]
   22e68:	ba1b      	rev	r3, r3
   22e6a:	6083      	str	r3, [r0, #8]
   22e6c:	698b      	ldr	r3, [r1, #24]
   22e6e:	ba1b      	rev	r3, r3
   22e70:	6043      	str	r3, [r0, #4]
   22e72:	69cb      	ldr	r3, [r1, #28]
   22e74:	ba1b      	rev	r3, r3
   22e76:	4632      	mov	r2, r6
   22e78:	6003      	str	r3, [r0, #0]
   22e7a:	4601      	mov	r1, r0
   22e7c:	4604      	mov	r4, r0
   22e7e:	f7dd f969 	bl	154 <ocrypto_bigint_sub256>
   22e82:	4631      	mov	r1, r6
   22e84:	4605      	mov	r5, r0
   22e86:	4602      	mov	r2, r0
   22e88:	4620      	mov	r0, r4
   22e8a:	f7dd f983 	bl	194 <ocrypto_bigint_cadd256>
   22e8e:	1e68      	subs	r0, r5, #1
   22e90:	bd70      	pop	{r4, r5, r6, pc}
   22e92:	bf00      	nop
   22e94:	00027c9c 	.word	0x00027c9c

00022e98 <p256_zdblu>:
   22e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e9c:	b088      	sub	sp, #32
   22e9e:	460c      	mov	r4, r1
   22ea0:	4606      	mov	r6, r0
   22ea2:	f102 0120 	add.w	r1, r2, #32
   22ea6:	4668      	mov	r0, sp
   22ea8:	f106 0720 	add.w	r7, r6, #32
   22eac:	4690      	mov	r8, r2
   22eae:	f7dd fc5b 	bl	768 <ocrypto_mod_p256_sqr>
   22eb2:	466a      	mov	r2, sp
   22eb4:	4669      	mov	r1, sp
   22eb6:	4668      	mov	r0, sp
   22eb8:	f7dd fb68 	bl	58c <ocrypto_mod_p256_add>
   22ebc:	4669      	mov	r1, sp
   22ebe:	4638      	mov	r0, r7
   22ec0:	f7dd fc52 	bl	768 <ocrypto_mod_p256_sqr>
   22ec4:	463a      	mov	r2, r7
   22ec6:	4639      	mov	r1, r7
   22ec8:	4638      	mov	r0, r7
   22eca:	f104 0520 	add.w	r5, r4, #32
   22ece:	f7dd fb5d 	bl	58c <ocrypto_mod_p256_add>
   22ed2:	466a      	mov	r2, sp
   22ed4:	4669      	mov	r1, sp
   22ed6:	4668      	mov	r0, sp
   22ed8:	f7dd fb58 	bl	58c <ocrypto_mod_p256_add>
   22edc:	4641      	mov	r1, r8
   22ede:	4628      	mov	r0, r5
   22ee0:	f7dd fc42 	bl	768 <ocrypto_mod_p256_sqr>
   22ee4:	466a      	mov	r2, sp
   22ee6:	4641      	mov	r1, r8
   22ee8:	4630      	mov	r0, r6
   22eea:	f7dd fc25 	bl	738 <ocrypto_mod_p256_mul>
   22eee:	462a      	mov	r2, r5
   22ef0:	4629      	mov	r1, r5
   22ef2:	4668      	mov	r0, sp
   22ef4:	f7dd fb4a 	bl	58c <ocrypto_mod_p256_add>
   22ef8:	462a      	mov	r2, r5
   22efa:	4669      	mov	r1, sp
   22efc:	4668      	mov	r0, sp
   22efe:	f7dd fb45 	bl	58c <ocrypto_mod_p256_add>
   22f02:	4a12      	ldr	r2, [pc, #72]	; (22f4c <p256_zdblu+0xb4>)
   22f04:	4669      	mov	r1, sp
   22f06:	4668      	mov	r0, sp
   22f08:	f7dd fb40 	bl	58c <ocrypto_mod_p256_add>
   22f0c:	4669      	mov	r1, sp
   22f0e:	4620      	mov	r0, r4
   22f10:	f7dd fc2a 	bl	768 <ocrypto_mod_p256_sqr>
   22f14:	4632      	mov	r2, r6
   22f16:	4621      	mov	r1, r4
   22f18:	4620      	mov	r0, r4
   22f1a:	f7dd fb75 	bl	608 <ocrypto_mod_p256_sub>
   22f1e:	4632      	mov	r2, r6
   22f20:	4621      	mov	r1, r4
   22f22:	4620      	mov	r0, r4
   22f24:	f7dd fb70 	bl	608 <ocrypto_mod_p256_sub>
   22f28:	4622      	mov	r2, r4
   22f2a:	4631      	mov	r1, r6
   22f2c:	4628      	mov	r0, r5
   22f2e:	f7dd fb6b 	bl	608 <ocrypto_mod_p256_sub>
   22f32:	466a      	mov	r2, sp
   22f34:	4629      	mov	r1, r5
   22f36:	4628      	mov	r0, r5
   22f38:	f7dd fbfe 	bl	738 <ocrypto_mod_p256_mul>
   22f3c:	463a      	mov	r2, r7
   22f3e:	4629      	mov	r1, r5
   22f40:	4628      	mov	r0, r5
   22f42:	f7dd fb61 	bl	608 <ocrypto_mod_p256_sub>
   22f46:	b008      	add	sp, #32
   22f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f4c:	00027d3c 	.word	0x00027d3c

00022f50 <p256_zaddc>:
   22f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   22f52:	b099      	sub	sp, #100	; 0x64
   22f54:	4604      	mov	r4, r0
   22f56:	460d      	mov	r5, r1
   22f58:	460a      	mov	r2, r1
   22f5a:	4601      	mov	r1, r0
   22f5c:	4668      	mov	r0, sp
   22f5e:	f7dd fb53 	bl	608 <ocrypto_mod_p256_sub>
   22f62:	4669      	mov	r1, sp
   22f64:	4668      	mov	r0, sp
   22f66:	f7dd fbff 	bl	768 <ocrypto_mod_p256_sqr>
   22f6a:	466a      	mov	r2, sp
   22f6c:	4621      	mov	r1, r4
   22f6e:	a808      	add	r0, sp, #32
   22f70:	f105 0620 	add.w	r6, r5, #32
   22f74:	f104 0720 	add.w	r7, r4, #32
   22f78:	f7dd fbde 	bl	738 <ocrypto_mod_p256_mul>
   22f7c:	466a      	mov	r2, sp
   22f7e:	4629      	mov	r1, r5
   22f80:	4668      	mov	r0, sp
   22f82:	f7dd fbd9 	bl	738 <ocrypto_mod_p256_mul>
   22f86:	4632      	mov	r2, r6
   22f88:	4639      	mov	r1, r7
   22f8a:	a810      	add	r0, sp, #64	; 0x40
   22f8c:	f7dd fafe 	bl	58c <ocrypto_mod_p256_add>
   22f90:	4632      	mov	r2, r6
   22f92:	4639      	mov	r1, r7
   22f94:	4630      	mov	r0, r6
   22f96:	f7dd fb37 	bl	608 <ocrypto_mod_p256_sub>
   22f9a:	4631      	mov	r1, r6
   22f9c:	4628      	mov	r0, r5
   22f9e:	f7dd fbe3 	bl	768 <ocrypto_mod_p256_sqr>
   22fa2:	466a      	mov	r2, sp
   22fa4:	a908      	add	r1, sp, #32
   22fa6:	4620      	mov	r0, r4
   22fa8:	f7dd faf0 	bl	58c <ocrypto_mod_p256_add>
   22fac:	4622      	mov	r2, r4
   22fae:	4629      	mov	r1, r5
   22fb0:	4628      	mov	r0, r5
   22fb2:	f7dd fb29 	bl	608 <ocrypto_mod_p256_sub>
   22fb6:	466a      	mov	r2, sp
   22fb8:	a908      	add	r1, sp, #32
   22fba:	4668      	mov	r0, sp
   22fbc:	f7dd fb24 	bl	608 <ocrypto_mod_p256_sub>
   22fc0:	466a      	mov	r2, sp
   22fc2:	4639      	mov	r1, r7
   22fc4:	4638      	mov	r0, r7
   22fc6:	f7dd fbb7 	bl	738 <ocrypto_mod_p256_mul>
   22fca:	462a      	mov	r2, r5
   22fcc:	a908      	add	r1, sp, #32
   22fce:	4668      	mov	r0, sp
   22fd0:	f7dd fb1a 	bl	608 <ocrypto_mod_p256_sub>
   22fd4:	466a      	mov	r2, sp
   22fd6:	4631      	mov	r1, r6
   22fd8:	4630      	mov	r0, r6
   22fda:	f7dd fbad 	bl	738 <ocrypto_mod_p256_mul>
   22fde:	463a      	mov	r2, r7
   22fe0:	4631      	mov	r1, r6
   22fe2:	4630      	mov	r0, r6
   22fe4:	f7dd fb10 	bl	608 <ocrypto_mod_p256_sub>
   22fe8:	a910      	add	r1, sp, #64	; 0x40
   22fea:	4668      	mov	r0, sp
   22fec:	f7dd fbbc 	bl	768 <ocrypto_mod_p256_sqr>
   22ff0:	4622      	mov	r2, r4
   22ff2:	4669      	mov	r1, sp
   22ff4:	4620      	mov	r0, r4
   22ff6:	f7dd fb07 	bl	608 <ocrypto_mod_p256_sub>
   22ffa:	a908      	add	r1, sp, #32
   22ffc:	4622      	mov	r2, r4
   22ffe:	4608      	mov	r0, r1
   23000:	f7dd fb02 	bl	608 <ocrypto_mod_p256_sub>
   23004:	a910      	add	r1, sp, #64	; 0x40
   23006:	aa08      	add	r2, sp, #32
   23008:	4608      	mov	r0, r1
   2300a:	f7dd fb95 	bl	738 <ocrypto_mod_p256_mul>
   2300e:	463a      	mov	r2, r7
   23010:	a910      	add	r1, sp, #64	; 0x40
   23012:	4638      	mov	r0, r7
   23014:	f7dd faf8 	bl	608 <ocrypto_mod_p256_sub>
   23018:	b019      	add	sp, #100	; 0x64
   2301a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002301c <p256_zaddu>:
   2301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23020:	b088      	sub	sp, #32
   23022:	460c      	mov	r4, r1
   23024:	4605      	mov	r5, r0
   23026:	4690      	mov	r8, r2
   23028:	460a      	mov	r2, r1
   2302a:	4601      	mov	r1, r0
   2302c:	4668      	mov	r0, sp
   2302e:	f7dd faeb 	bl	608 <ocrypto_mod_p256_sub>
   23032:	4669      	mov	r1, sp
   23034:	4668      	mov	r0, sp
   23036:	f7dd fb97 	bl	768 <ocrypto_mod_p256_sqr>
   2303a:	466a      	mov	r2, sp
   2303c:	4629      	mov	r1, r5
   2303e:	4628      	mov	r0, r5
   23040:	f104 0620 	add.w	r6, r4, #32
   23044:	f7dd fb78 	bl	738 <ocrypto_mod_p256_mul>
   23048:	f105 0720 	add.w	r7, r5, #32
   2304c:	466a      	mov	r2, sp
   2304e:	4621      	mov	r1, r4
   23050:	4668      	mov	r0, sp
   23052:	f7dd fb71 	bl	738 <ocrypto_mod_p256_mul>
   23056:	4632      	mov	r2, r6
   23058:	4639      	mov	r1, r7
   2305a:	4630      	mov	r0, r6
   2305c:	f7dd fad4 	bl	608 <ocrypto_mod_p256_sub>
   23060:	4631      	mov	r1, r6
   23062:	4620      	mov	r0, r4
   23064:	f7dd fb80 	bl	768 <ocrypto_mod_p256_sqr>
   23068:	462a      	mov	r2, r5
   2306a:	4621      	mov	r1, r4
   2306c:	4620      	mov	r0, r4
   2306e:	f7dd facb 	bl	608 <ocrypto_mod_p256_sub>
   23072:	466a      	mov	r2, sp
   23074:	4621      	mov	r1, r4
   23076:	4620      	mov	r0, r4
   23078:	f7dd fac6 	bl	608 <ocrypto_mod_p256_sub>
   2307c:	466a      	mov	r2, sp
   2307e:	4629      	mov	r1, r5
   23080:	4640      	mov	r0, r8
   23082:	f7dd fac1 	bl	608 <ocrypto_mod_p256_sub>
   23086:	4642      	mov	r2, r8
   23088:	4639      	mov	r1, r7
   2308a:	4638      	mov	r0, r7
   2308c:	f7dd fb54 	bl	738 <ocrypto_mod_p256_mul>
   23090:	4622      	mov	r2, r4
   23092:	4629      	mov	r1, r5
   23094:	4668      	mov	r0, sp
   23096:	f7dd fab7 	bl	608 <ocrypto_mod_p256_sub>
   2309a:	466a      	mov	r2, sp
   2309c:	4631      	mov	r1, r6
   2309e:	4630      	mov	r0, r6
   230a0:	f7dd fb4a 	bl	738 <ocrypto_mod_p256_mul>
   230a4:	463a      	mov	r2, r7
   230a6:	4631      	mov	r1, r6
   230a8:	4630      	mov	r0, r6
   230aa:	f7dd faad 	bl	608 <ocrypto_mod_p256_sub>
   230ae:	b008      	add	sp, #32
   230b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000230b4 <ocrypto_curve_p256_from64bytes>:
   230b4:	b570      	push	{r4, r5, r6, lr}
   230b6:	f100 0620 	add.w	r6, r0, #32
   230ba:	b090      	sub	sp, #64	; 0x40
   230bc:	460d      	mov	r5, r1
   230be:	4604      	mov	r4, r0
   230c0:	f000 f914 	bl	232ec <ocrypto_mod_p256_from_bytes>
   230c4:	f105 0120 	add.w	r1, r5, #32
   230c8:	4630      	mov	r0, r6
   230ca:	f000 f90f 	bl	232ec <ocrypto_mod_p256_from_bytes>
   230ce:	4621      	mov	r1, r4
   230d0:	a808      	add	r0, sp, #32
   230d2:	f7dd fb49 	bl	768 <ocrypto_mod_p256_sqr>
   230d6:	a908      	add	r1, sp, #32
   230d8:	4608      	mov	r0, r1
   230da:	4a0d      	ldr	r2, [pc, #52]	; (23110 <ocrypto_curve_p256_from64bytes+0x5c>)
   230dc:	f7dd fa56 	bl	58c <ocrypto_mod_p256_add>
   230e0:	a908      	add	r1, sp, #32
   230e2:	4622      	mov	r2, r4
   230e4:	4608      	mov	r0, r1
   230e6:	f7dd fb27 	bl	738 <ocrypto_mod_p256_mul>
   230ea:	a908      	add	r1, sp, #32
   230ec:	4a09      	ldr	r2, [pc, #36]	; (23114 <ocrypto_curve_p256_from64bytes+0x60>)
   230ee:	4608      	mov	r0, r1
   230f0:	f7dd fa4c 	bl	58c <ocrypto_mod_p256_add>
   230f4:	4631      	mov	r1, r6
   230f6:	4668      	mov	r0, sp
   230f8:	f7dd fb36 	bl	768 <ocrypto_mod_p256_sqr>
   230fc:	2220      	movs	r2, #32
   230fe:	4669      	mov	r1, sp
   23100:	eb0d 0002 	add.w	r0, sp, r2
   23104:	f7dd fa14 	bl	530 <ocrypto_constant_time_equal>
   23108:	3801      	subs	r0, #1
   2310a:	b010      	add	sp, #64	; 0x40
   2310c:	bd70      	pop	{r4, r5, r6, pc}
   2310e:	bf00      	nop
   23110:	00027d3c 	.word	0x00027d3c
   23114:	00027d5c 	.word	0x00027d5c

00023118 <ocrypto_curve_p256_to32bytes>:
   23118:	f000 b902 	b.w	23320 <ocrypto_mod_p256_to_bytes>

0002311c <ocrypto_curve_p256_to64bytes>:
   2311c:	b538      	push	{r3, r4, r5, lr}
   2311e:	4604      	mov	r4, r0
   23120:	460d      	mov	r5, r1
   23122:	f000 f8fd 	bl	23320 <ocrypto_mod_p256_to_bytes>
   23126:	f105 0120 	add.w	r1, r5, #32
   2312a:	f104 0020 	add.w	r0, r4, #32
   2312e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23132:	f000 b8f5 	b.w	23320 <ocrypto_mod_p256_to_bytes>
   23136:	bf00      	nop

00023138 <ocrypto_curve_p256_scalarmult>:
   23138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2313c:	4613      	mov	r3, r2
   2313e:	b0b8      	sub	sp, #224	; 0xe0
   23140:	4a54      	ldr	r2, [pc, #336]	; (23294 <ocrypto_curve_p256_scalarmult+0x15c>)
   23142:	4689      	mov	r9, r1
   23144:	4680      	mov	r8, r0
   23146:	4619      	mov	r1, r3
   23148:	a810      	add	r0, sp, #64	; 0x40
   2314a:	f7dd f803 	bl	154 <ocrypto_bigint_sub256>
   2314e:	4952      	ldr	r1, [pc, #328]	; (23298 <ocrypto_curve_p256_scalarmult+0x160>)
   23150:	4602      	mov	r2, r0
   23152:	a810      	add	r0, sp, #64	; 0x40
   23154:	f7dd f81e 	bl	194 <ocrypto_bigint_cadd256>
   23158:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2315a:	494e      	ldr	r1, [pc, #312]	; (23294 <ocrypto_curve_p256_scalarmult+0x15c>)
   2315c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   23160:	4607      	mov	r7, r0
   23162:	f1c6 0201 	rsb	r2, r6, #1
   23166:	a810      	add	r0, sp, #64	; 0x40
   23168:	f7dd f814 	bl	194 <ocrypto_bigint_cadd256>
   2316c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2316e:	464a      	mov	r2, r9
   23170:	ea6f 0a03 	mvn.w	sl, r3
   23174:	a928      	add	r1, sp, #160	; 0xa0
   23176:	a818      	add	r0, sp, #96	; 0x60
   23178:	f7ff fe8e 	bl	22e98 <p256_zdblu>
   2317c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   23180:	a920      	add	r1, sp, #128	; 0x80
   23182:	f1ca 0201 	rsb	r2, sl, #1
   23186:	4608      	mov	r0, r1
   23188:	f000 f892 	bl	232b0 <ocrypto_mod_p256_cneg>
   2318c:	f1c7 0701 	rsb	r7, r7, #1
   23190:	24fe      	movs	r4, #254	; 0xfe
   23192:	466a      	mov	r2, sp
   23194:	a918      	add	r1, sp, #96	; 0x60
   23196:	a828      	add	r0, sp, #160	; 0xa0
   23198:	f7ff ff40 	bl	2301c <p256_zaddu>
   2319c:	1162      	asrs	r2, r4, #5
   2319e:	ab38      	add	r3, sp, #224	; 0xe0
   231a0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   231a4:	f004 011f 	and.w	r1, r4, #31
   231a8:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   231ac:	40cb      	lsrs	r3, r1
   231ae:	4655      	mov	r5, sl
   231b0:	f003 0a01 	and.w	sl, r3, #1
   231b4:	ea8a 0505 	eor.w	r5, sl, r5
   231b8:	462a      	mov	r2, r5
   231ba:	a928      	add	r1, sp, #160	; 0xa0
   231bc:	a818      	add	r0, sp, #96	; 0x60
   231be:	f7dd f845 	bl	24c <ocrypto_bigint_cswap256>
   231c2:	462a      	mov	r2, r5
   231c4:	a930      	add	r1, sp, #192	; 0xc0
   231c6:	a820      	add	r0, sp, #128	; 0x80
   231c8:	f7dd f840 	bl	24c <ocrypto_bigint_cswap256>
   231cc:	3c01      	subs	r4, #1
   231ce:	a928      	add	r1, sp, #160	; 0xa0
   231d0:	a818      	add	r0, sp, #96	; 0x60
   231d2:	f7ff febd 	bl	22f50 <p256_zaddc>
   231d6:	1c63      	adds	r3, r4, #1
   231d8:	d1db      	bne.n	23192 <ocrypto_curve_p256_scalarmult+0x5a>
   231da:	f1ca 0201 	rsb	r2, sl, #1
   231de:	a920      	add	r1, sp, #128	; 0x80
   231e0:	a808      	add	r0, sp, #32
   231e2:	f000 f865 	bl	232b0 <ocrypto_mod_p256_cneg>
   231e6:	ea86 060a 	eor.w	r6, r6, sl
   231ea:	466a      	mov	r2, sp
   231ec:	a918      	add	r1, sp, #96	; 0x60
   231ee:	a828      	add	r0, sp, #160	; 0xa0
   231f0:	f7ff ff14 	bl	2301c <p256_zaddu>
   231f4:	a928      	add	r1, sp, #160	; 0xa0
   231f6:	4632      	mov	r2, r6
   231f8:	a818      	add	r0, sp, #96	; 0x60
   231fa:	f7dd f827 	bl	24c <ocrypto_bigint_cswap256>
   231fe:	4632      	mov	r2, r6
   23200:	a930      	add	r1, sp, #192	; 0xc0
   23202:	a820      	add	r0, sp, #128	; 0x80
   23204:	f7dd f822 	bl	24c <ocrypto_bigint_cswap256>
   23208:	a908      	add	r1, sp, #32
   2320a:	466a      	mov	r2, sp
   2320c:	4608      	mov	r0, r1
   2320e:	f7dd fa93 	bl	738 <ocrypto_mod_p256_mul>
   23212:	a908      	add	r1, sp, #32
   23214:	4608      	mov	r0, r1
   23216:	f000 f89d 	bl	23354 <ocrypto_mod_p256_inv>
   2321a:	a908      	add	r1, sp, #32
   2321c:	f108 0420 	add.w	r4, r8, #32
   23220:	f109 0220 	add.w	r2, r9, #32
   23224:	4608      	mov	r0, r1
   23226:	f7dd fa87 	bl	738 <ocrypto_mod_p256_mul>
   2322a:	a920      	add	r1, sp, #128	; 0x80
   2322c:	aa08      	add	r2, sp, #32
   2322e:	4620      	mov	r0, r4
   23230:	f7dd fa82 	bl	738 <ocrypto_mod_p256_mul>
   23234:	aa08      	add	r2, sp, #32
   23236:	a918      	add	r1, sp, #96	; 0x60
   23238:	4668      	mov	r0, sp
   2323a:	f7dd fa7d 	bl	738 <ocrypto_mod_p256_mul>
   2323e:	4669      	mov	r1, sp
   23240:	4668      	mov	r0, sp
   23242:	f7dd fa91 	bl	768 <ocrypto_mod_p256_sqr>
   23246:	aa18      	add	r2, sp, #96	; 0x60
   23248:	4669      	mov	r1, sp
   2324a:	a808      	add	r0, sp, #32
   2324c:	f7dd fa74 	bl	738 <ocrypto_mod_p256_mul>
   23250:	4621      	mov	r1, r4
   23252:	4668      	mov	r0, sp
   23254:	f7dd fa88 	bl	768 <ocrypto_mod_p256_sqr>
   23258:	aa08      	add	r2, sp, #32
   2325a:	4669      	mov	r1, sp
   2325c:	4610      	mov	r0, r2
   2325e:	f7dd f9d3 	bl	608 <ocrypto_mod_p256_sub>
   23262:	4a0e      	ldr	r2, [pc, #56]	; (2329c <ocrypto_curve_p256_scalarmult+0x164>)
   23264:	a908      	add	r1, sp, #32
   23266:	4668      	mov	r0, sp
   23268:	f7dd f9ce 	bl	608 <ocrypto_mod_p256_sub>
   2326c:	4620      	mov	r0, r4
   2326e:	2120      	movs	r1, #32
   23270:	f7dd f972 	bl	558 <ocrypto_constant_time_is_zero>
   23274:	a908      	add	r1, sp, #32
   23276:	4243      	negs	r3, r0
   23278:	4602      	mov	r2, r0
   2327a:	4668      	mov	r0, sp
   2327c:	431f      	orrs	r7, r3
   2327e:	f7dc ffe5 	bl	24c <ocrypto_bigint_cswap256>
   23282:	4640      	mov	r0, r8
   23284:	4a06      	ldr	r2, [pc, #24]	; (232a0 <ocrypto_curve_p256_scalarmult+0x168>)
   23286:	4669      	mov	r1, sp
   23288:	f7dd fa56 	bl	738 <ocrypto_mod_p256_mul>
   2328c:	4638      	mov	r0, r7
   2328e:	b038      	add	sp, #224	; 0xe0
   23290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23294:	00027d7c 	.word	0x00027d7c
   23298:	00027cfc 	.word	0x00027cfc
   2329c:	00027d5c 	.word	0x00027d5c
   232a0:	00027d1c 	.word	0x00027d1c

000232a4 <ocrypto_curve_p256_scalarmult_base>:
   232a4:	460a      	mov	r2, r1
   232a6:	4901      	ldr	r1, [pc, #4]	; (232ac <ocrypto_curve_p256_scalarmult_base+0x8>)
   232a8:	f7ff bf46 	b.w	23138 <ocrypto_curve_p256_scalarmult>
   232ac:	00027cbc 	.word	0x00027cbc

000232b0 <ocrypto_mod_p256_cneg>:
   232b0:	b570      	push	{r4, r5, r6, lr}
   232b2:	b088      	sub	sp, #32
   232b4:	4604      	mov	r4, r0
   232b6:	460d      	mov	r5, r1
   232b8:	4616      	mov	r6, r2
   232ba:	2100      	movs	r1, #0
   232bc:	2220      	movs	r2, #32
   232be:	4668      	mov	r0, sp
   232c0:	f001 fa20 	bl	24704 <memset>
   232c4:	2300      	movs	r3, #0
   232c6:	4629      	mov	r1, r5
   232c8:	2220      	movs	r2, #32
   232ca:	4620      	mov	r0, r4
   232cc:	9300      	str	r3, [sp, #0]
   232ce:	f001 fa0e 	bl	246ee <memcpy>
   232d2:	462a      	mov	r2, r5
   232d4:	4669      	mov	r1, sp
   232d6:	4668      	mov	r0, sp
   232d8:	f7dd f996 	bl	608 <ocrypto_mod_p256_sub>
   232dc:	4632      	mov	r2, r6
   232de:	4669      	mov	r1, sp
   232e0:	4620      	mov	r0, r4
   232e2:	f7dc ffb3 	bl	24c <ocrypto_bigint_cswap256>
   232e6:	b008      	add	sp, #32
   232e8:	bd70      	pop	{r4, r5, r6, pc}
   232ea:	bf00      	nop

000232ec <ocrypto_mod_p256_from_bytes>:
   232ec:	680b      	ldr	r3, [r1, #0]
   232ee:	ba1b      	rev	r3, r3
   232f0:	61c3      	str	r3, [r0, #28]
   232f2:	684b      	ldr	r3, [r1, #4]
   232f4:	ba1b      	rev	r3, r3
   232f6:	6183      	str	r3, [r0, #24]
   232f8:	688b      	ldr	r3, [r1, #8]
   232fa:	ba1b      	rev	r3, r3
   232fc:	6143      	str	r3, [r0, #20]
   232fe:	68cb      	ldr	r3, [r1, #12]
   23300:	ba1b      	rev	r3, r3
   23302:	6103      	str	r3, [r0, #16]
   23304:	690b      	ldr	r3, [r1, #16]
   23306:	ba1b      	rev	r3, r3
   23308:	60c3      	str	r3, [r0, #12]
   2330a:	694b      	ldr	r3, [r1, #20]
   2330c:	ba1b      	rev	r3, r3
   2330e:	6083      	str	r3, [r0, #8]
   23310:	698b      	ldr	r3, [r1, #24]
   23312:	ba1b      	rev	r3, r3
   23314:	6043      	str	r3, [r0, #4]
   23316:	69cb      	ldr	r3, [r1, #28]
   23318:	ba1b      	rev	r3, r3
   2331a:	6003      	str	r3, [r0, #0]
   2331c:	4770      	bx	lr
   2331e:	bf00      	nop

00023320 <ocrypto_mod_p256_to_bytes>:
   23320:	69cb      	ldr	r3, [r1, #28]
   23322:	ba1b      	rev	r3, r3
   23324:	6003      	str	r3, [r0, #0]
   23326:	698b      	ldr	r3, [r1, #24]
   23328:	ba1b      	rev	r3, r3
   2332a:	6043      	str	r3, [r0, #4]
   2332c:	694b      	ldr	r3, [r1, #20]
   2332e:	ba1b      	rev	r3, r3
   23330:	6083      	str	r3, [r0, #8]
   23332:	690b      	ldr	r3, [r1, #16]
   23334:	ba1b      	rev	r3, r3
   23336:	60c3      	str	r3, [r0, #12]
   23338:	68cb      	ldr	r3, [r1, #12]
   2333a:	ba1b      	rev	r3, r3
   2333c:	6103      	str	r3, [r0, #16]
   2333e:	688b      	ldr	r3, [r1, #8]
   23340:	ba1b      	rev	r3, r3
   23342:	6143      	str	r3, [r0, #20]
   23344:	684b      	ldr	r3, [r1, #4]
   23346:	ba1b      	rev	r3, r3
   23348:	6183      	str	r3, [r0, #24]
   2334a:	680b      	ldr	r3, [r1, #0]
   2334c:	ba1b      	rev	r3, r3
   2334e:	61c3      	str	r3, [r0, #28]
   23350:	4770      	bx	lr
   23352:	bf00      	nop

00023354 <ocrypto_mod_p256_inv>:
   23354:	b570      	push	{r4, r5, r6, lr}
   23356:	b098      	sub	sp, #96	; 0x60
   23358:	460d      	mov	r5, r1
   2335a:	4606      	mov	r6, r0
   2335c:	a810      	add	r0, sp, #64	; 0x40
   2335e:	f7dd fa03 	bl	768 <ocrypto_mod_p256_sqr>
   23362:	462a      	mov	r2, r5
   23364:	a910      	add	r1, sp, #64	; 0x40
   23366:	4668      	mov	r0, sp
   23368:	f7dd f9e6 	bl	738 <ocrypto_mod_p256_mul>
   2336c:	4669      	mov	r1, sp
   2336e:	a810      	add	r0, sp, #64	; 0x40
   23370:	f7dd f9fa 	bl	768 <ocrypto_mod_p256_sqr>
   23374:	a910      	add	r1, sp, #64	; 0x40
   23376:	4608      	mov	r0, r1
   23378:	f7dd f9f6 	bl	768 <ocrypto_mod_p256_sqr>
   2337c:	466a      	mov	r2, sp
   2337e:	a910      	add	r1, sp, #64	; 0x40
   23380:	a808      	add	r0, sp, #32
   23382:	f7dd f9d9 	bl	738 <ocrypto_mod_p256_mul>
   23386:	a908      	add	r1, sp, #32
   23388:	a810      	add	r0, sp, #64	; 0x40
   2338a:	f7dd f9ed 	bl	768 <ocrypto_mod_p256_sqr>
   2338e:	a910      	add	r1, sp, #64	; 0x40
   23390:	4608      	mov	r0, r1
   23392:	f7dd f9e9 	bl	768 <ocrypto_mod_p256_sqr>
   23396:	a910      	add	r1, sp, #64	; 0x40
   23398:	4608      	mov	r0, r1
   2339a:	f7dd f9e5 	bl	768 <ocrypto_mod_p256_sqr>
   2339e:	a910      	add	r1, sp, #64	; 0x40
   233a0:	4608      	mov	r0, r1
   233a2:	f7dd f9e1 	bl	768 <ocrypto_mod_p256_sqr>
   233a6:	a910      	add	r1, sp, #64	; 0x40
   233a8:	aa08      	add	r2, sp, #32
   233aa:	4608      	mov	r0, r1
   233ac:	f7dd f9c4 	bl	738 <ocrypto_mod_p256_mul>
   233b0:	a910      	add	r1, sp, #64	; 0x40
   233b2:	4608      	mov	r0, r1
   233b4:	f7dd f9d8 	bl	768 <ocrypto_mod_p256_sqr>
   233b8:	a910      	add	r1, sp, #64	; 0x40
   233ba:	4608      	mov	r0, r1
   233bc:	f7dd f9d4 	bl	768 <ocrypto_mod_p256_sqr>
   233c0:	a910      	add	r1, sp, #64	; 0x40
   233c2:	466a      	mov	r2, sp
   233c4:	a808      	add	r0, sp, #32
   233c6:	f7dd f9b7 	bl	738 <ocrypto_mod_p256_mul>
   233ca:	2405      	movs	r4, #5
   233cc:	a908      	add	r1, sp, #32
   233ce:	a810      	add	r0, sp, #64	; 0x40
   233d0:	f7dd f9ca 	bl	768 <ocrypto_mod_p256_sqr>
   233d4:	a910      	add	r1, sp, #64	; 0x40
   233d6:	4608      	mov	r0, r1
   233d8:	f7dd f9c6 	bl	768 <ocrypto_mod_p256_sqr>
   233dc:	3c01      	subs	r4, #1
   233de:	a910      	add	r1, sp, #64	; 0x40
   233e0:	d1f5      	bne.n	233ce <ocrypto_mod_p256_inv+0x7a>
   233e2:	aa08      	add	r2, sp, #32
   233e4:	4608      	mov	r0, r1
   233e6:	f7dd f9a7 	bl	738 <ocrypto_mod_p256_mul>
   233ea:	2405      	movs	r4, #5
   233ec:	a910      	add	r1, sp, #64	; 0x40
   233ee:	4608      	mov	r0, r1
   233f0:	f7dd f9ba 	bl	768 <ocrypto_mod_p256_sqr>
   233f4:	a910      	add	r1, sp, #64	; 0x40
   233f6:	4608      	mov	r0, r1
   233f8:	f7dd f9b6 	bl	768 <ocrypto_mod_p256_sqr>
   233fc:	3c01      	subs	r4, #1
   233fe:	d1f5      	bne.n	233ec <ocrypto_mod_p256_inv+0x98>
   23400:	a910      	add	r1, sp, #64	; 0x40
   23402:	aa08      	add	r2, sp, #32
   23404:	4608      	mov	r0, r1
   23406:	f7dd f997 	bl	738 <ocrypto_mod_p256_mul>
   2340a:	a910      	add	r1, sp, #64	; 0x40
   2340c:	a808      	add	r0, sp, #32
   2340e:	f7dd f9ab 	bl	768 <ocrypto_mod_p256_sqr>
   23412:	a908      	add	r1, sp, #32
   23414:	4608      	mov	r0, r1
   23416:	f7dd f9a7 	bl	768 <ocrypto_mod_p256_sqr>
   2341a:	a908      	add	r1, sp, #32
   2341c:	466a      	mov	r2, sp
   2341e:	4668      	mov	r0, sp
   23420:	f7dd f98a 	bl	738 <ocrypto_mod_p256_mul>
   23424:	2410      	movs	r4, #16
   23426:	4669      	mov	r1, sp
   23428:	a810      	add	r0, sp, #64	; 0x40
   2342a:	f7dd f99d 	bl	768 <ocrypto_mod_p256_sqr>
   2342e:	a910      	add	r1, sp, #64	; 0x40
   23430:	4608      	mov	r0, r1
   23432:	f7dd f999 	bl	768 <ocrypto_mod_p256_sqr>
   23436:	3c01      	subs	r4, #1
   23438:	a910      	add	r1, sp, #64	; 0x40
   2343a:	d1f5      	bne.n	23428 <ocrypto_mod_p256_inv+0xd4>
   2343c:	462a      	mov	r2, r5
   2343e:	4608      	mov	r0, r1
   23440:	f7dd f97a 	bl	738 <ocrypto_mod_p256_mul>
   23444:	2440      	movs	r4, #64	; 0x40
   23446:	a910      	add	r1, sp, #64	; 0x40
   23448:	4608      	mov	r0, r1
   2344a:	f7dd f98d 	bl	768 <ocrypto_mod_p256_sqr>
   2344e:	a910      	add	r1, sp, #64	; 0x40
   23450:	4608      	mov	r0, r1
   23452:	f7dd f989 	bl	768 <ocrypto_mod_p256_sqr>
   23456:	3c01      	subs	r4, #1
   23458:	d1f5      	bne.n	23446 <ocrypto_mod_p256_inv+0xf2>
   2345a:	a910      	add	r1, sp, #64	; 0x40
   2345c:	466a      	mov	r2, sp
   2345e:	4608      	mov	r0, r1
   23460:	f7dd f96a 	bl	738 <ocrypto_mod_p256_mul>
   23464:	2410      	movs	r4, #16
   23466:	a910      	add	r1, sp, #64	; 0x40
   23468:	4608      	mov	r0, r1
   2346a:	f7dd f97d 	bl	768 <ocrypto_mod_p256_sqr>
   2346e:	a910      	add	r1, sp, #64	; 0x40
   23470:	4608      	mov	r0, r1
   23472:	f7dd f979 	bl	768 <ocrypto_mod_p256_sqr>
   23476:	3c01      	subs	r4, #1
   23478:	d1f5      	bne.n	23466 <ocrypto_mod_p256_inv+0x112>
   2347a:	a910      	add	r1, sp, #64	; 0x40
   2347c:	466a      	mov	r2, sp
   2347e:	4608      	mov	r0, r1
   23480:	f7dd f95a 	bl	738 <ocrypto_mod_p256_mul>
   23484:	2410      	movs	r4, #16
   23486:	a910      	add	r1, sp, #64	; 0x40
   23488:	4608      	mov	r0, r1
   2348a:	f7dd f96d 	bl	768 <ocrypto_mod_p256_sqr>
   2348e:	a910      	add	r1, sp, #64	; 0x40
   23490:	4608      	mov	r0, r1
   23492:	f7dd f969 	bl	768 <ocrypto_mod_p256_sqr>
   23496:	3c01      	subs	r4, #1
   23498:	d1f5      	bne.n	23486 <ocrypto_mod_p256_inv+0x132>
   2349a:	a910      	add	r1, sp, #64	; 0x40
   2349c:	aa08      	add	r2, sp, #32
   2349e:	4608      	mov	r0, r1
   234a0:	f7dd f94a 	bl	738 <ocrypto_mod_p256_mul>
   234a4:	462a      	mov	r2, r5
   234a6:	a910      	add	r1, sp, #64	; 0x40
   234a8:	4630      	mov	r0, r6
   234aa:	f7dd f945 	bl	738 <ocrypto_mod_p256_mul>
   234ae:	b018      	add	sp, #96	; 0x60
   234b0:	bd70      	pop	{r4, r5, r6, pc}
   234b2:	bf00      	nop

000234b4 <app_led_cb>:
{
   234b4:	4601      	mov	r1, r0
	dk_set_led(USER_LED, led_state);
   234b6:	2002      	movs	r0, #2
   234b8:	f7fa baf6 	b.w	1daa8 <dk_set_led>

000234bc <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   234bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   234be:	2364      	movs	r3, #100	; 0x64
{
   234c0:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   234c2:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   234c4:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   234c6:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   234c8:	b969      	cbnz	r1, 234e6 <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   234ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   234cc:	429a      	cmp	r2, r3
   234ce:	fbb2 f4f3 	udiv	r4, r2, r3
   234d2:	d20c      	bcs.n	234ee <u8_to_dec+0x32>
   234d4:	2b01      	cmp	r3, #1
   234d6:	d00a      	beq.n	234ee <u8_to_dec+0x32>
   234d8:	b948      	cbnz	r0, 234ee <u8_to_dec+0x32>
		value -= digit * divisor;
   234da:	fb03 2214 	mls	r2, r3, r4, r2
   234de:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   234e0:	240a      	movs	r4, #10
   234e2:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   234e6:	3e01      	subs	r6, #1
   234e8:	d1f0      	bne.n	234cc <u8_to_dec+0x10>
		*buf = '\0';
   234ea:	702e      	strb	r6, [r5, #0]
	return num_digits;
   234ec:	e7ed      	b.n	234ca <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   234ee:	3430      	adds	r4, #48	; 0x30
   234f0:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   234f4:	fbb2 f4f3 	udiv	r4, r2, r3
   234f8:	3901      	subs	r1, #1
   234fa:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   234fe:	3001      	adds	r0, #1
		divisor /= 10;
   23500:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   23504:	b2c9      	uxtb	r1, r1
			num_digits++;
   23506:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   23508:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2350a:	b2db      	uxtb	r3, r3
   2350c:	e7dc      	b.n	234c8 <u8_to_dec+0xc>

0002350e <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2350e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   23512:	b2db      	uxtb	r3, r3
   23514:	2b09      	cmp	r3, #9
   23516:	d802      	bhi.n	2351e <char2hex+0x10>
		*x = c - '0';
   23518:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2351a:	2000      	movs	r0, #0
   2351c:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2351e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   23522:	2b05      	cmp	r3, #5
   23524:	d802      	bhi.n	2352c <char2hex+0x1e>
		*x = c - 'a' + 10;
   23526:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   23528:	b2c3      	uxtb	r3, r0
   2352a:	e7f5      	b.n	23518 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   2352c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   23530:	2b05      	cmp	r3, #5
   23532:	d801      	bhi.n	23538 <char2hex+0x2a>
		*x = c - 'A' + 10;
   23534:	3837      	subs	r0, #55	; 0x37
   23536:	e7f7      	b.n	23528 <char2hex+0x1a>
		return -EINVAL;
   23538:	f06f 0015 	mvn.w	r0, #21
}
   2353c:	4770      	bx	lr

0002353e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2353e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23540:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   23542:	f001 0001 	and.w	r0, r1, #1
   23546:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   2354a:	429e      	cmp	r6, r3
   2354c:	ea4f 0751 	mov.w	r7, r1, lsr #1
   23550:	d903      	bls.n	2355a <hex2bin+0x1c>
		return 0;
   23552:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   23554:	4630      	mov	r0, r6
   23556:	b003      	add	sp, #12
   23558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2355a:	b158      	cbz	r0, 23574 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2355c:	7828      	ldrb	r0, [r5, #0]
   2355e:	f10d 0107 	add.w	r1, sp, #7
   23562:	f7ff ffd4 	bl	2350e <char2hex>
   23566:	2800      	cmp	r0, #0
   23568:	dbf3      	blt.n	23552 <hex2bin+0x14>
		buf[0] = dec;
   2356a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2356e:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   23572:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   23574:	3501      	adds	r5, #1
   23576:	4417      	add	r7, r2
   23578:	42ba      	cmp	r2, r7
   2357a:	d0eb      	beq.n	23554 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2357c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   23580:	f10d 0107 	add.w	r1, sp, #7
   23584:	f7ff ffc3 	bl	2350e <char2hex>
   23588:	2800      	cmp	r0, #0
   2358a:	dbe2      	blt.n	23552 <hex2bin+0x14>
		buf[i] = dec << 4;
   2358c:	f89d 4007 	ldrb.w	r4, [sp, #7]
   23590:	0124      	lsls	r4, r4, #4
   23592:	b2e4      	uxtb	r4, r4
   23594:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   23596:	f815 0b02 	ldrb.w	r0, [r5], #2
   2359a:	f7ff ffb8 	bl	2350e <char2hex>
   2359e:	2800      	cmp	r0, #0
   235a0:	dbd7      	blt.n	23552 <hex2bin+0x14>
		buf[i] += dec;
   235a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   235a6:	441c      	add	r4, r3
   235a8:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   235ac:	e7e4      	b.n	23578 <hex2bin+0x3a>

000235ae <arch_printk_char_out>:
}
   235ae:	2000      	movs	r0, #0
   235b0:	4770      	bx	lr

000235b2 <str_out>:
{
   235b2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   235b4:	688a      	ldr	r2, [r1, #8]
   235b6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   235b8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   235ba:	b114      	cbz	r4, 235c2 <str_out+0x10>
   235bc:	684b      	ldr	r3, [r1, #4]
   235be:	4293      	cmp	r3, r2
   235c0:	dc01      	bgt.n	235c6 <str_out+0x14>
		ctx->count++;
   235c2:	608d      	str	r5, [r1, #8]
}
   235c4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   235c6:	3b01      	subs	r3, #1
   235c8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   235ca:	bf08      	it	eq
   235cc:	2200      	moveq	r2, #0
   235ce:	608d      	str	r5, [r1, #8]
   235d0:	bf0c      	ite	eq
   235d2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   235d4:	54a0      	strbne	r0, [r4, r2]
   235d6:	e7f5      	b.n	235c4 <str_out+0x12>

000235d8 <printk>:
{
   235d8:	b40f      	push	{r0, r1, r2, r3}
   235da:	b507      	push	{r0, r1, r2, lr}
   235dc:	a904      	add	r1, sp, #16
   235de:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   235e2:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   235e4:	f7ed fca4 	bl	10f30 <vprintk>
}
   235e8:	b003      	add	sp, #12
   235ea:	f85d eb04 	ldr.w	lr, [sp], #4
   235ee:	b004      	add	sp, #16
   235f0:	4770      	bx	lr

000235f2 <snprintk>:
{
   235f2:	b40c      	push	{r2, r3}
   235f4:	b507      	push	{r0, r1, r2, lr}
   235f6:	ab04      	add	r3, sp, #16
   235f8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   235fc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   235fe:	f7ed fca5 	bl	10f4c <vsnprintk>
}
   23602:	b003      	add	sp, #12
   23604:	f85d eb04 	ldr.w	lr, [sp], #4
   23608:	b002      	add	sp, #8
   2360a:	4770      	bx	lr

0002360c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2360c:	4604      	mov	r4, r0
   2360e:	b508      	push	{r3, lr}
   23610:	4608      	mov	r0, r1
   23612:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   23614:	461a      	mov	r2, r3
   23616:	47a0      	blx	r4
	return z_impl_z_current_get();
   23618:	f7fe fcb6 	bl	21f88 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2361c:	f7f0 f868 	bl	136f0 <z_impl_k_thread_abort>

00023620 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   23620:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   23624:	8840      	ldrh	r0, [r0, #2]
}
   23626:	0840      	lsrs	r0, r0, #1
   23628:	4770      	bx	lr

0002362a <free_list_add>:
{
   2362a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2362c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2362e:	f7ff fff7 	bl	23620 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   23632:	fab0 f080 	clz	r0, r0
   23636:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2363a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2363e:	00ca      	lsls	r2, r1, #3
   23640:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   23644:	1d17      	adds	r7, r2, #4
{
   23646:	460c      	mov	r4, r1
   23648:	3206      	adds	r2, #6
   2364a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2364c:	b956      	cbnz	r6, 23664 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2364e:	2101      	movs	r1, #1
   23650:	fa01 f000 	lsl.w	r0, r1, r0
   23654:	68d9      	ldr	r1, [r3, #12]
   23656:	4301      	orrs	r1, r0
   23658:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2365a:	f8cc 4010 	str.w	r4, [ip, #16]
   2365e:	53dd      	strh	r5, [r3, r7]
   23660:	529d      	strh	r5, [r3, r2]
}
   23662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   23664:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   23666:	3104      	adds	r1, #4
   23668:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2366a:	53d8      	strh	r0, [r3, r7]
   2366c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23670:	529e      	strh	r6, [r3, r2]
   23672:	80c5      	strh	r5, [r0, #6]
   23674:	525d      	strh	r5, [r3, r1]
   23676:	e7f4      	b.n	23662 <free_list_add+0x38>

00023678 <free_list_remove_bidx>:
{
   23678:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2367a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2367e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   23680:	4299      	cmp	r1, r3
   23682:	f102 0104 	add.w	r1, r2, #4
   23686:	d10a      	bne.n	2369e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   23688:	2301      	movs	r3, #1
   2368a:	fa03 f202 	lsl.w	r2, r3, r2
   2368e:	68c3      	ldr	r3, [r0, #12]
   23690:	ea23 0302 	bic.w	r3, r3, r2
   23694:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   23696:	2300      	movs	r3, #0
   23698:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2369c:	bd10      	pop	{r4, pc}
   2369e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   236a0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   236a4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   236a8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   236ac:	80cb      	strh	r3, [r1, #6]
   236ae:	8082      	strh	r2, [r0, #4]
}
   236b0:	e7f4      	b.n	2369c <free_list_remove_bidx+0x24>

000236b2 <free_list_remove>:
{
   236b2:	b508      	push	{r3, lr}
   236b4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   236b6:	f7ff ffb3 	bl	23620 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   236ba:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   236be:	f1c2 021f 	rsb	r2, r2, #31
   236c2:	4618      	mov	r0, r3
}
   236c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   236c8:	f7ff bfd6 	b.w	23678 <free_list_remove_bidx>

000236cc <alloc_chunk>:
{
   236cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   236d0:	fab1 f581 	clz	r5, r1
   236d4:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   236d8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   236dc:	4603      	mov	r3, r0
	if (b->next) {
   236de:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   236e2:	460e      	mov	r6, r1
	if (b->next) {
   236e4:	b1c2      	cbz	r2, 23718 <alloc_chunk+0x4c>
   236e6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   236e8:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   236ec:	4618      	mov	r0, r3
   236ee:	4621      	mov	r1, r4
   236f0:	f7ff ff96 	bl	23620 <chunk_size>
   236f4:	42b0      	cmp	r0, r6
   236f6:	d306      	bcc.n	23706 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   236f8:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   236fa:	4618      	mov	r0, r3
   236fc:	f7ff ffbc 	bl	23678 <free_list_remove_bidx>
}
   23700:	4620      	mov	r0, r4
   23702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   23706:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2370a:	3f01      	subs	r7, #1
   2370c:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   2370e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   23712:	d001      	beq.n	23718 <alloc_chunk+0x4c>
   23714:	4282      	cmp	r2, r0
   23716:	d1e7      	bne.n	236e8 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   23718:	f1c5 0220 	rsb	r2, r5, #32
   2371c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23720:	4094      	lsls	r4, r2
   23722:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   23724:	4014      	ands	r4, r2
   23726:	d0eb      	beq.n	23700 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   23728:	fa94 f2a4 	rbit	r2, r4
   2372c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23730:	1d11      	adds	r1, r2, #4
   23732:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   23736:	4621      	mov	r1, r4
   23738:	e7df      	b.n	236fa <alloc_chunk+0x2e>

0002373a <merge_chunks>:
{
   2373a:	b538      	push	{r3, r4, r5, lr}
   2373c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2373e:	f7ff ff6f 	bl	23620 <chunk_size>
{
   23742:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23744:	4604      	mov	r4, r0
   23746:	4611      	mov	r1, r2
   23748:	4618      	mov	r0, r3
   2374a:	f7ff ff69 	bl	23620 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2374e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   23752:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23754:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   23756:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   23758:	4618      	mov	r0, r3
   2375a:	f7ff ff61 	bl	23620 <chunk_size>
	void *cmem = &buf[c];
   2375e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23760:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   23764:	bd38      	pop	{r3, r4, r5, pc}

00023766 <split_chunks>:
{
   23766:	b538      	push	{r3, r4, r5, lr}
   23768:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2376a:	f7ff ff59 	bl	23620 <chunk_size>
{
   2376e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   23770:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   23772:	1a51      	subs	r1, r2, r1
   23774:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   23778:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2377a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2377c:	8060      	strh	r0, [r4, #2]
   2377e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23782:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   23784:	8044      	strh	r4, [r0, #2]
   23786:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2378a:	4618      	mov	r0, r3
   2378c:	4611      	mov	r1, r2
   2378e:	f7ff ff47 	bl	23620 <chunk_size>
	void *cmem = &buf[c];
   23792:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23794:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   23798:	bd38      	pop	{r3, r4, r5, pc}

0002379a <free_chunk>:
{
   2379a:	b538      	push	{r3, r4, r5, lr}
   2379c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2379e:	f7ff ff3f 	bl	23620 <chunk_size>
   237a2:	460c      	mov	r4, r1
   237a4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   237a6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   237aa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   237ac:	07da      	lsls	r2, r3, #31
   237ae:	d40a      	bmi.n	237c6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   237b0:	4628      	mov	r0, r5
   237b2:	f7ff ff7e 	bl	236b2 <free_list_remove>
	return c + chunk_size(h, c);
   237b6:	4621      	mov	r1, r4
   237b8:	4628      	mov	r0, r5
   237ba:	f7ff ff31 	bl	23620 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   237be:	1822      	adds	r2, r4, r0
   237c0:	4628      	mov	r0, r5
   237c2:	f7ff ffba 	bl	2373a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   237c6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   237ca:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   237cc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   237d0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   237d2:	07db      	lsls	r3, r3, #31
   237d4:	d40c      	bmi.n	237f0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   237d6:	4628      	mov	r0, r5
   237d8:	f7ff ff6b 	bl	236b2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   237dc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   237e0:	4622      	mov	r2, r4
   237e2:	1a61      	subs	r1, r4, r1
   237e4:	4628      	mov	r0, r5
   237e6:	f7ff ffa8 	bl	2373a <merge_chunks>
   237ea:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   237ee:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   237f0:	4621      	mov	r1, r4
   237f2:	4628      	mov	r0, r5
}
   237f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   237f8:	f7ff bf17 	b.w	2362a <free_list_add>

000237fc <sys_heap_alloc>:
{
   237fc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   237fe:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   23800:	b909      	cbnz	r1, 23806 <sys_heap_alloc+0xa>
		return NULL;
   23802:	2000      	movs	r0, #0
}
   23804:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   23806:	68ab      	ldr	r3, [r5, #8]
   23808:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2380c:	d9f9      	bls.n	23802 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2380e:	310b      	adds	r1, #11
   23810:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   23812:	4621      	mov	r1, r4
   23814:	4628      	mov	r0, r5
   23816:	f7ff ff59 	bl	236cc <alloc_chunk>
	if (c == 0U) {
   2381a:	4606      	mov	r6, r0
   2381c:	2800      	cmp	r0, #0
   2381e:	d0f0      	beq.n	23802 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   23820:	4601      	mov	r1, r0
   23822:	4628      	mov	r0, r5
   23824:	f7ff fefc 	bl	23620 <chunk_size>
   23828:	42a0      	cmp	r0, r4
   2382a:	d907      	bls.n	2383c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2382c:	1932      	adds	r2, r6, r4
   2382e:	4628      	mov	r0, r5
   23830:	f7ff ff99 	bl	23766 <split_chunks>
		free_list_add(h, c + chunk_sz);
   23834:	4611      	mov	r1, r2
   23836:	4628      	mov	r0, r5
   23838:	f7ff fef7 	bl	2362a <free_list_add>
	void *cmem = &buf[c];
   2383c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   23840:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23842:	8853      	ldrh	r3, [r2, #2]
   23844:	f043 0301 	orr.w	r3, r3, #1
   23848:	8053      	strh	r3, [r2, #2]
   2384a:	3004      	adds	r0, #4
	return mem;
   2384c:	e7da      	b.n	23804 <sys_heap_alloc+0x8>

0002384e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2384e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   23850:	f013 0307 	ands.w	r3, r3, #7
   23854:	d105      	bne.n	23862 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   23856:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   23858:	2b00      	cmp	r3, #0
   2385a:	bf0c      	ite	eq
   2385c:	2000      	moveq	r0, #0
   2385e:	2003      	movne	r0, #3
   23860:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   23862:	2b02      	cmp	r3, #2
   23864:	d105      	bne.n	23872 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   23866:	8bc0      	ldrh	r0, [r0, #30]
   23868:	fab0 f080 	clz	r0, r0
   2386c:	0940      	lsrs	r0, r0, #5
   2386e:	0080      	lsls	r0, r0, #2
   23870:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   23872:	2b01      	cmp	r3, #1
   23874:	d105      	bne.n	23882 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   23876:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   23878:	2b00      	cmp	r3, #0
   2387a:	bf0c      	ite	eq
   2387c:	2000      	moveq	r0, #0
   2387e:	2005      	movne	r0, #5
   23880:	4770      	bx	lr
	int evt = EVT_NOP;
   23882:	2000      	movs	r0, #0
}
   23884:	4770      	bx	lr

00023886 <validate_args>:
{
   23886:	b510      	push	{r4, lr}
   23888:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2388a:	b100      	cbz	r0, 2388e <validate_args+0x8>
   2388c:	b911      	cbnz	r1, 23894 <validate_args+0xe>
		return -EINVAL;
   2388e:	f06f 0015 	mvn.w	r0, #21
}
   23892:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   23894:	1d08      	adds	r0, r1, #4
   23896:	f000 f82f 	bl	238f8 <sys_notify_validate>
	if ((rv == 0)
   2389a:	2800      	cmp	r0, #0
   2389c:	d1f9      	bne.n	23892 <validate_args+0xc>
	    && ((cli->notify.flags
   2389e:	68a3      	ldr	r3, [r4, #8]
   238a0:	2b03      	cmp	r3, #3
   238a2:	d9f6      	bls.n	23892 <validate_args+0xc>
   238a4:	e7f3      	b.n	2388e <validate_args+0x8>

000238a6 <notify_one>:
{
   238a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   238aa:	460d      	mov	r5, r1
   238ac:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   238ae:	4619      	mov	r1, r3
   238b0:	1d28      	adds	r0, r5, #4
{
   238b2:	4690      	mov	r8, r2
   238b4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   238b6:	f7ed fec1 	bl	1163c <sys_notify_finalize>
	if (cb) {
   238ba:	4604      	mov	r4, r0
   238bc:	b138      	cbz	r0, 238ce <notify_one+0x28>
		cb(mgr, cli, state, res);
   238be:	4633      	mov	r3, r6
   238c0:	4642      	mov	r2, r8
   238c2:	4629      	mov	r1, r5
   238c4:	4638      	mov	r0, r7
   238c6:	46a4      	mov	ip, r4
}
   238c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   238cc:	4760      	bx	ip
}
   238ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000238d2 <onoff_manager_init>:
{
   238d2:	b538      	push	{r3, r4, r5, lr}
   238d4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   238d6:	4605      	mov	r5, r0
   238d8:	b158      	cbz	r0, 238f2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   238da:	b151      	cbz	r1, 238f2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   238dc:	680b      	ldr	r3, [r1, #0]
   238de:	b143      	cbz	r3, 238f2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   238e0:	684b      	ldr	r3, [r1, #4]
   238e2:	b133      	cbz	r3, 238f2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   238e4:	2220      	movs	r2, #32
   238e6:	2100      	movs	r1, #0
   238e8:	f000 ff0c 	bl	24704 <memset>
   238ec:	612c      	str	r4, [r5, #16]
	return 0;
   238ee:	2000      	movs	r0, #0
}
   238f0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   238f2:	f06f 0015 	mvn.w	r0, #21
   238f6:	e7fb      	b.n	238f0 <onoff_manager_init+0x1e>

000238f8 <sys_notify_validate>:
	if (notify == NULL) {
   238f8:	4603      	mov	r3, r0
   238fa:	b140      	cbz	r0, 2390e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   238fc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   238fe:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   23902:	2a02      	cmp	r2, #2
   23904:	d006      	beq.n	23914 <sys_notify_validate+0x1c>
   23906:	2a03      	cmp	r2, #3
   23908:	d004      	beq.n	23914 <sys_notify_validate+0x1c>
   2390a:	2a01      	cmp	r2, #1
   2390c:	d005      	beq.n	2391a <sys_notify_validate+0x22>
   2390e:	f06f 0015 	mvn.w	r0, #21
}
   23912:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   23914:	681a      	ldr	r2, [r3, #0]
   23916:	2a00      	cmp	r2, #0
   23918:	d0f9      	beq.n	2390e <sys_notify_validate+0x16>
		notify->result = 0;
   2391a:	2000      	movs	r0, #0
   2391c:	6098      	str	r0, [r3, #8]
   2391e:	4770      	bx	lr

00023920 <encode_uint>:
{
   23920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23924:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   23926:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   23928:	2b6f      	cmp	r3, #111	; 0x6f
{
   2392a:	4680      	mov	r8, r0
   2392c:	460f      	mov	r7, r1
   2392e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   23930:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   23934:	d029      	beq.n	2398a <encode_uint+0x6a>
   23936:	d824      	bhi.n	23982 <encode_uint+0x62>
		return 10;
   23938:	2b58      	cmp	r3, #88	; 0x58
   2393a:	bf0c      	ite	eq
   2393c:	2610      	moveq	r6, #16
   2393e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   23940:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   23944:	4632      	mov	r2, r6
   23946:	2300      	movs	r3, #0
   23948:	4640      	mov	r0, r8
   2394a:	4639      	mov	r1, r7
   2394c:	f7dc fbc8 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23950:	2a09      	cmp	r2, #9
   23952:	b2d4      	uxtb	r4, r2
   23954:	d81e      	bhi.n	23994 <encode_uint+0x74>
   23956:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   23958:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2395a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2395c:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23960:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   23964:	d301      	bcc.n	2396a <encode_uint+0x4a>
   23966:	45d1      	cmp	r9, sl
   23968:	d811      	bhi.n	2398e <encode_uint+0x6e>
	if (conv->flag_hash) {
   2396a:	782b      	ldrb	r3, [r5, #0]
   2396c:	069b      	lsls	r3, r3, #26
   2396e:	d505      	bpl.n	2397c <encode_uint+0x5c>
		if (radix == 8) {
   23970:	2e08      	cmp	r6, #8
   23972:	d115      	bne.n	239a0 <encode_uint+0x80>
			conv->altform_0 = true;
   23974:	78ab      	ldrb	r3, [r5, #2]
   23976:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2397a:	70ab      	strb	r3, [r5, #2]
}
   2397c:	4648      	mov	r0, r9
   2397e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   23982:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   23986:	2b70      	cmp	r3, #112	; 0x70
   23988:	e7d7      	b.n	2393a <encode_uint+0x1a>
	switch (specifier) {
   2398a:	2608      	movs	r6, #8
   2398c:	e7d8      	b.n	23940 <encode_uint+0x20>
		value /= radix;
   2398e:	4680      	mov	r8, r0
   23990:	460f      	mov	r7, r1
   23992:	e7d7      	b.n	23944 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23994:	f1bb 0f19 	cmp.w	fp, #25
   23998:	bf94      	ite	ls
   2399a:	3437      	addls	r4, #55	; 0x37
   2399c:	3457      	addhi	r4, #87	; 0x57
   2399e:	e7db      	b.n	23958 <encode_uint+0x38>
		} else if (radix == 16) {
   239a0:	2e10      	cmp	r6, #16
   239a2:	d1eb      	bne.n	2397c <encode_uint+0x5c>
			conv->altform_0c = true;
   239a4:	78ab      	ldrb	r3, [r5, #2]
   239a6:	f043 0310 	orr.w	r3, r3, #16
   239aa:	e7e6      	b.n	2397a <encode_uint+0x5a>

000239ac <outs>:
{
   239ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239b0:	4607      	mov	r7, r0
   239b2:	4688      	mov	r8, r1
   239b4:	4615      	mov	r5, r2
   239b6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   239b8:	4614      	mov	r4, r2
   239ba:	42b4      	cmp	r4, r6
   239bc:	d305      	bcc.n	239ca <outs+0x1e>
   239be:	b10e      	cbz	r6, 239c4 <outs+0x18>
	return (int)count;
   239c0:	1b60      	subs	r0, r4, r5
   239c2:	e008      	b.n	239d6 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   239c4:	7823      	ldrb	r3, [r4, #0]
   239c6:	2b00      	cmp	r3, #0
   239c8:	d0fa      	beq.n	239c0 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   239ca:	f814 0b01 	ldrb.w	r0, [r4], #1
   239ce:	4641      	mov	r1, r8
   239d0:	47b8      	blx	r7
		if (rc < 0) {
   239d2:	2800      	cmp	r0, #0
   239d4:	daf1      	bge.n	239ba <outs+0xe>
}
   239d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000239da <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   239da:	4040      	eors	r0, r0
   239dc:	f380 8811 	msr	BASEPRI, r0
   239e0:	f04f 0004 	mov.w	r0, #4
   239e4:	df02      	svc	2
}
   239e6:	4770      	bx	lr

000239e8 <assert_print>:

void assert_print(const char *fmt, ...)
{
   239e8:	b40f      	push	{r0, r1, r2, r3}
   239ea:	b507      	push	{r0, r1, r2, lr}
   239ec:	a904      	add	r1, sp, #16
   239ee:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   239f2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   239f4:	f7ed fa9c 	bl	10f30 <vprintk>

	va_end(ap);
}
   239f8:	b003      	add	sp, #12
   239fa:	f85d eb04 	ldr.w	lr, [sp], #4
   239fe:	b004      	add	sp, #16
   23a00:	4770      	bx	lr

00023a02 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   23a02:	4770      	bx	lr

00023a04 <z_log_minimal_printk>:
{
   23a04:	b40f      	push	{r0, r1, r2, r3}
   23a06:	b507      	push	{r0, r1, r2, lr}
   23a08:	a904      	add	r1, sp, #16
   23a0a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23a0e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   23a10:	f7ed fa8e 	bl	10f30 <vprintk>
}
   23a14:	b003      	add	sp, #12
   23a16:	f85d eb04 	ldr.w	lr, [sp], #4
   23a1a:	b004      	add	sp, #16
   23a1c:	4770      	bx	lr

00023a1e <nvs_flash_rd>:
{
   23a1e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   23a20:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23a22:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   23a24:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23a26:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   23a28:	fa16 f181 	uxtah	r1, r6, r1
   23a2c:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   23a30:	6884      	ldr	r4, [r0, #8]
   23a32:	6824      	ldr	r4, [r4, #0]
   23a34:	46a4      	mov	ip, r4
}
   23a36:	bc70      	pop	{r4, r5, r6}
   23a38:	4760      	bx	ip

00023a3a <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   23a3a:	680b      	ldr	r3, [r1, #0]
   23a3c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   23a40:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   23a42:	89c0      	ldrh	r0, [r0, #14]
   23a44:	0c1a      	lsrs	r2, r3, #16
   23a46:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   23a4a:	bf04      	itt	eq
   23a4c:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   23a50:	600b      	streq	r3, [r1, #0]
}
   23a52:	4770      	bx	lr

00023a54 <nvs_flash_block_cmp>:
{
   23a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23a58:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   23a5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   23a5c:	681d      	ldr	r5, [r3, #0]
   23a5e:	426d      	negs	r5, r5
{
   23a60:	b089      	sub	sp, #36	; 0x24
   23a62:	4681      	mov	r9, r0
   23a64:	460e      	mov	r6, r1
   23a66:	4617      	mov	r7, r2
	block_size =
   23a68:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   23a6c:	b91c      	cbnz	r4, 23a76 <nvs_flash_block_cmp+0x22>
	return 0;
   23a6e:	4620      	mov	r0, r4
}
   23a70:	b009      	add	sp, #36	; 0x24
   23a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   23a76:	42ac      	cmp	r4, r5
   23a78:	46a0      	mov	r8, r4
   23a7a:	bf28      	it	cs
   23a7c:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   23a7e:	4643      	mov	r3, r8
   23a80:	466a      	mov	r2, sp
   23a82:	4631      	mov	r1, r6
   23a84:	4648      	mov	r0, r9
   23a86:	f7ff ffca 	bl	23a1e <nvs_flash_rd>
		if (rc) {
   23a8a:	2800      	cmp	r0, #0
   23a8c:	d1f0      	bne.n	23a70 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   23a8e:	4642      	mov	r2, r8
   23a90:	4669      	mov	r1, sp
   23a92:	4638      	mov	r0, r7
   23a94:	f000 fe1b 	bl	246ce <memcmp>
		if (rc) {
   23a98:	b920      	cbnz	r0, 23aa4 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   23a9a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   23a9e:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   23aa0:	4447      	add	r7, r8
   23aa2:	e7e3      	b.n	23a6c <nvs_flash_block_cmp+0x18>
			return 1;
   23aa4:	2001      	movs	r0, #1
   23aa6:	e7e3      	b.n	23a70 <nvs_flash_block_cmp+0x1c>

00023aa8 <nvs_flash_cmp_const>:
{
   23aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23aac:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   23aae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   23ab0:	681d      	ldr	r5, [r3, #0]
   23ab2:	426d      	negs	r5, r5
{
   23ab4:	b088      	sub	sp, #32
	block_size =
   23ab6:	f005 0520 	and.w	r5, r5, #32
{
   23aba:	4607      	mov	r7, r0
   23abc:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   23abe:	4668      	mov	r0, sp
{
   23ac0:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   23ac2:	462a      	mov	r2, r5
   23ac4:	f000 fe1e 	bl	24704 <memset>
	while (len) {
   23ac8:	b91c      	cbnz	r4, 23ad2 <nvs_flash_cmp_const+0x2a>
	return 0;
   23aca:	4620      	mov	r0, r4
}
   23acc:	b008      	add	sp, #32
   23ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   23ad2:	42ac      	cmp	r4, r5
   23ad4:	46a0      	mov	r8, r4
   23ad6:	bf28      	it	cs
   23ad8:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   23ada:	4643      	mov	r3, r8
   23adc:	466a      	mov	r2, sp
   23ade:	4631      	mov	r1, r6
   23ae0:	4638      	mov	r0, r7
   23ae2:	f7ff ffb7 	bl	23a54 <nvs_flash_block_cmp>
		if (rc) {
   23ae6:	2800      	cmp	r0, #0
   23ae8:	d1f0      	bne.n	23acc <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   23aea:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   23aee:	4446      	add	r6, r8
   23af0:	e7ea      	b.n	23ac8 <nvs_flash_cmp_const+0x20>

00023af2 <nvs_flash_erase_sector>:
{
   23af2:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23af4:	8982      	ldrh	r2, [r0, #12]
   23af6:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   23af8:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23afa:	0c09      	lsrs	r1, r1, #16
{
   23afc:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   23afe:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   23b00:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23b02:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   23b06:	6883      	ldr	r3, [r0, #8]
   23b08:	689b      	ldr	r3, [r3, #8]
   23b0a:	4798      	blx	r3
	if (rc) {
   23b0c:	b950      	cbnz	r0, 23b24 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   23b0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   23b10:	89a3      	ldrh	r3, [r4, #12]
   23b12:	7912      	ldrb	r2, [r2, #4]
   23b14:	4629      	mov	r1, r5
   23b16:	4620      	mov	r0, r4
   23b18:	f7ff ffc6 	bl	23aa8 <nvs_flash_cmp_const>
		rc = -ENXIO;
   23b1c:	2800      	cmp	r0, #0
   23b1e:	bf18      	it	ne
   23b20:	f06f 0005 	mvnne.w	r0, #5
}
   23b24:	bd38      	pop	{r3, r4, r5, pc}

00023b26 <nvs_ate_crc8_update>:
{
   23b26:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23b28:	4601      	mov	r1, r0
{
   23b2a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23b2c:	2207      	movs	r2, #7
   23b2e:	20ff      	movs	r0, #255	; 0xff
   23b30:	f7ed f9dc 	bl	10eec <crc8_ccitt>
	entry->crc8 = crc8;
   23b34:	71e0      	strb	r0, [r4, #7]
}
   23b36:	bd10      	pop	{r4, pc}

00023b38 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   23b38:	7803      	ldrb	r3, [r0, #0]
   23b3a:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   23b3c:	bf81      	itttt	hi
   23b3e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   23b42:	18c9      	addhi	r1, r1, r3
   23b44:	425b      	neghi	r3, r3
   23b46:	4019      	andhi	r1, r3
}
   23b48:	4608      	mov	r0, r1
   23b4a:	4770      	bx	lr

00023b4c <nvs_ate_valid>:
{
   23b4c:	b570      	push	{r4, r5, r6, lr}
   23b4e:	460c      	mov	r4, r1
   23b50:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23b52:	2108      	movs	r1, #8
   23b54:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   23b56:	f7ff ffef 	bl	23b38 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23b5a:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23b5c:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   23b5e:	4621      	mov	r1, r4
   23b60:	20ff      	movs	r0, #255	; 0xff
   23b62:	f7ed f9c3 	bl	10eec <crc8_ccitt>
	if (crc8 == entry->crc8) {
   23b66:	79e3      	ldrb	r3, [r4, #7]
   23b68:	4283      	cmp	r3, r0
   23b6a:	d107      	bne.n	23b7c <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   23b6c:	89aa      	ldrh	r2, [r5, #12]
   23b6e:	8863      	ldrh	r3, [r4, #2]
   23b70:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   23b72:	4283      	cmp	r3, r0
   23b74:	bf2c      	ite	cs
   23b76:	2000      	movcs	r0, #0
   23b78:	2001      	movcc	r0, #1
}
   23b7a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   23b7c:	2000      	movs	r0, #0
   23b7e:	e7fc      	b.n	23b7a <nvs_ate_valid+0x2e>

00023b80 <nvs_close_ate_valid>:
{
   23b80:	b538      	push	{r3, r4, r5, lr}
   23b82:	4605      	mov	r5, r0
   23b84:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   23b86:	f7ff ffe1 	bl	23b4c <nvs_ate_valid>
   23b8a:	b1a0      	cbz	r0, 23bb6 <nvs_close_ate_valid+0x36>
   23b8c:	88a0      	ldrh	r0, [r4, #4]
   23b8e:	b998      	cbnz	r0, 23bb8 <nvs_close_ate_valid+0x38>
   23b90:	8822      	ldrh	r2, [r4, #0]
   23b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23b96:	429a      	cmp	r2, r3
   23b98:	d10d      	bne.n	23bb6 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23b9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   23b9c:	2108      	movs	r1, #8
   23b9e:	f7ff ffcb 	bl	23b38 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   23ba2:	8862      	ldrh	r2, [r4, #2]
   23ba4:	89ab      	ldrh	r3, [r5, #12]
   23ba6:	1a9b      	subs	r3, r3, r2
   23ba8:	fbb3 f2f0 	udiv	r2, r3, r0
   23bac:	fb02 3010 	mls	r0, r2, r0, r3
   23bb0:	fab0 f080 	clz	r0, r0
   23bb4:	0940      	lsrs	r0, r0, #5
}
   23bb6:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   23bb8:	2000      	movs	r0, #0
   23bba:	e7fc      	b.n	23bb6 <nvs_close_ate_valid+0x36>

00023bbc <nvs_prev_ate>:
{
   23bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23bbe:	4604      	mov	r4, r0
   23bc0:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23bc2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   23bc4:	2108      	movs	r1, #8
   23bc6:	f7ff ffb7 	bl	23b38 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   23bca:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23bcc:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   23bce:	2308      	movs	r3, #8
   23bd0:	4620      	mov	r0, r4
   23bd2:	f7ff ff24 	bl	23a1e <nvs_flash_rd>
	if (rc) {
   23bd6:	4606      	mov	r6, r0
   23bd8:	2800      	cmp	r0, #0
   23bda:	d136      	bne.n	23c4a <nvs_prev_ate+0x8e>
	*addr += ate_size;
   23bdc:	682b      	ldr	r3, [r5, #0]
   23bde:	443b      	add	r3, r7
   23be0:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   23be2:	89a2      	ldrh	r2, [r4, #12]
   23be4:	b299      	uxth	r1, r3
   23be6:	1bd2      	subs	r2, r2, r7
   23be8:	4291      	cmp	r1, r2
   23bea:	d12e      	bne.n	23c4a <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   23bec:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   23bee:	bf03      	ittte	eq
   23bf0:	89e2      	ldrheq	r2, [r4, #14]
   23bf2:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   23bf6:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   23bfa:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   23bfe:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   23c00:	2308      	movs	r3, #8
   23c02:	466a      	mov	r2, sp
   23c04:	4620      	mov	r0, r4
   23c06:	f7ff ff0a 	bl	23a1e <nvs_flash_rd>
	if (rc) {
   23c0a:	b9e8      	cbnz	r0, 23c48 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   23c0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23c0e:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   23c10:	466b      	mov	r3, sp
		if (data8[i] != value) {
   23c12:	f813 1b01 	ldrb.w	r1, [r3], #1
   23c16:	428a      	cmp	r2, r1
   23c18:	d10c      	bne.n	23c34 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   23c1a:	3001      	adds	r0, #1
   23c1c:	2808      	cmp	r0, #8
   23c1e:	d1f8      	bne.n	23c12 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   23c20:	6863      	ldr	r3, [r4, #4]
   23c22:	e005      	b.n	23c30 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   23c24:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   23c26:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   23c2a:	0c1b      	lsrs	r3, r3, #16
   23c2c:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   23c2e:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   23c30:	602b      	str	r3, [r5, #0]
		return 0;
   23c32:	e00a      	b.n	23c4a <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   23c34:	4669      	mov	r1, sp
   23c36:	4620      	mov	r0, r4
   23c38:	f7ff ffa2 	bl	23b80 <nvs_close_ate_valid>
   23c3c:	2800      	cmp	r0, #0
   23c3e:	d1f1      	bne.n	23c24 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   23c40:	4629      	mov	r1, r5
   23c42:	4620      	mov	r0, r4
   23c44:	f7ee f938 	bl	11eb8 <nvs_recover_last_ate>
   23c48:	4606      	mov	r6, r0
}
   23c4a:	4630      	mov	r0, r6
   23c4c:	b003      	add	sp, #12
   23c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023c50 <nvs_flash_al_wrt>:
{
   23c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c54:	4607      	mov	r7, r0
   23c56:	b089      	sub	sp, #36	; 0x24
   23c58:	4690      	mov	r8, r2
	if (!len) {
   23c5a:	461e      	mov	r6, r3
   23c5c:	b91b      	cbnz	r3, 23c66 <nvs_flash_al_wrt+0x16>
		return 0;
   23c5e:	2000      	movs	r0, #0
}
   23c60:	b009      	add	sp, #36	; 0x24
   23c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   23c66:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23c68:	8983      	ldrh	r3, [r0, #12]
   23c6a:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   23c6c:	fa14 f181 	uxtah	r1, r4, r1
   23c70:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   23c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23c76:	681d      	ldr	r5, [r3, #0]
   23c78:	426d      	negs	r5, r5
	if (blen > 0) {
   23c7a:	4035      	ands	r5, r6
   23c7c:	d00c      	beq.n	23c98 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   23c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   23c80:	6883      	ldr	r3, [r0, #8]
   23c82:	4621      	mov	r1, r4
   23c84:	f8d3 9004 	ldr.w	r9, [r3, #4]
   23c88:	462b      	mov	r3, r5
   23c8a:	47c8      	blx	r9
		if (rc) {
   23c8c:	2800      	cmp	r0, #0
   23c8e:	d1e7      	bne.n	23c60 <nvs_flash_al_wrt+0x10>
	if (len) {
   23c90:	1b76      	subs	r6, r6, r5
   23c92:	d0e4      	beq.n	23c5e <nvs_flash_al_wrt+0xe>
		offset += blen;
   23c94:	442c      	add	r4, r5
		data8 += blen;
   23c96:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   23c98:	4632      	mov	r2, r6
   23c9a:	4641      	mov	r1, r8
   23c9c:	4668      	mov	r0, sp
   23c9e:	f000 fd26 	bl	246ee <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   23ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23ca4:	681a      	ldr	r2, [r3, #0]
   23ca6:	7919      	ldrb	r1, [r3, #4]
   23ca8:	1b92      	subs	r2, r2, r6
   23caa:	eb0d 0006 	add.w	r0, sp, r6
   23cae:	f000 fd29 	bl	24704 <memset>
				 fs->flash_parameters->write_block_size);
   23cb2:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   23cb6:	681b      	ldr	r3, [r3, #0]
   23cb8:	6882      	ldr	r2, [r0, #8]
   23cba:	4621      	mov	r1, r4
   23cbc:	6855      	ldr	r5, [r2, #4]
   23cbe:	466a      	mov	r2, sp
   23cc0:	47a8      	blx	r5
	return rc;
   23cc2:	e7cd      	b.n	23c60 <nvs_flash_al_wrt+0x10>

00023cc4 <nvs_flash_ate_wrt>:
{
   23cc4:	b510      	push	{r4, lr}
   23cc6:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   23cc8:	2308      	movs	r3, #8
   23cca:	6841      	ldr	r1, [r0, #4]
{
   23ccc:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   23cce:	f7ff ffbf 	bl	23c50 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   23cd2:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   23cd4:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   23cd6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   23cd8:	f7ff ff2e 	bl	23b38 <nvs_al_size.isra.0>
   23cdc:	6863      	ldr	r3, [r4, #4]
   23cde:	1a1b      	subs	r3, r3, r0
   23ce0:	6063      	str	r3, [r4, #4]
}
   23ce2:	4610      	mov	r0, r2
   23ce4:	bd10      	pop	{r4, pc}

00023ce6 <nvs_add_gc_done_ate>:
{
   23ce6:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   23ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23cec:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   23cf0:	2300      	movs	r3, #0
{
   23cf2:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   23cf4:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   23cf8:	6883      	ldr	r3, [r0, #8]
   23cfa:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   23cfe:	4668      	mov	r0, sp
   23d00:	f7ff ff11 	bl	23b26 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   23d04:	4669      	mov	r1, sp
   23d06:	4620      	mov	r0, r4
   23d08:	f7ff ffdc 	bl	23cc4 <nvs_flash_ate_wrt>
}
   23d0c:	b002      	add	sp, #8
   23d0e:	bd10      	pop	{r4, pc}

00023d10 <nvs_gc>:
{
   23d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d14:	4604      	mov	r4, r0
   23d16:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23d18:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   23d1a:	2108      	movs	r1, #8
   23d1c:	f7ff ff0c 	bl	23b38 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   23d20:	6863      	ldr	r3, [r4, #4]
   23d22:	0c1b      	lsrs	r3, r3, #16
   23d24:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23d26:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   23d28:	a903      	add	r1, sp, #12
   23d2a:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   23d2c:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   23d2e:	f7ff fe84 	bl	23a3a <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   23d32:	f8dd b00c 	ldr.w	fp, [sp, #12]
   23d36:	89a6      	ldrh	r6, [r4, #12]
   23d38:	445e      	add	r6, fp
   23d3a:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   23d3c:	aa06      	add	r2, sp, #24
   23d3e:	2308      	movs	r3, #8
   23d40:	4631      	mov	r1, r6
   23d42:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   23d44:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   23d46:	f7ff fe6a 	bl	23a1e <nvs_flash_rd>
	if (rc < 0) {
   23d4a:	1e02      	subs	r2, r0, #0
   23d4c:	f2c0 80a9 	blt.w	23ea2 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   23d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23d52:	aa06      	add	r2, sp, #24
   23d54:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   23d56:	2300      	movs	r3, #0
		if (data8[i] != value) {
   23d58:	f812 0b01 	ldrb.w	r0, [r2], #1
   23d5c:	4281      	cmp	r1, r0
   23d5e:	f040 808f 	bne.w	23e80 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   23d62:	3301      	adds	r3, #1
   23d64:	2b08      	cmp	r3, #8
   23d66:	d1f7      	bne.n	23d58 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   23d68:	68a3      	ldr	r3, [r4, #8]
   23d6a:	6862      	ldr	r2, [r4, #4]
   23d6c:	442b      	add	r3, r5
   23d6e:	429a      	cmp	r2, r3
   23d70:	d27e      	bcs.n	23e70 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   23d72:	4659      	mov	r1, fp
   23d74:	4620      	mov	r0, r4
   23d76:	f7ff febc 	bl	23af2 <nvs_flash_erase_sector>
   23d7a:	4602      	mov	r2, r0
	if (rc) {
   23d7c:	e091      	b.n	23ea2 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   23d7e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   23d82:	0c36      	lsrs	r6, r6, #16
   23d84:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   23d86:	441e      	add	r6, r3
   23d88:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   23d8a:	aa08      	add	r2, sp, #32
   23d8c:	a904      	add	r1, sp, #16
   23d8e:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   23d90:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   23d94:	f7ff ff12 	bl	23bbc <nvs_prev_ate>
		if (rc) {
   23d98:	4602      	mov	r2, r0
   23d9a:	2800      	cmp	r0, #0
   23d9c:	f040 8081 	bne.w	23ea2 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   23da0:	a908      	add	r1, sp, #32
   23da2:	4620      	mov	r0, r4
   23da4:	f7ff fed2 	bl	23b4c <nvs_ate_valid>
   23da8:	b918      	cbnz	r0, 23db2 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   23daa:	9b01      	ldr	r3, [sp, #4]
   23dac:	459a      	cmp	sl, r3
   23dae:	d1ec      	bne.n	23d8a <nvs_gc+0x7a>
   23db0:	e7da      	b.n	23d68 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   23db2:	6863      	ldr	r3, [r4, #4]
   23db4:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   23db6:	aa0a      	add	r2, sp, #40	; 0x28
   23db8:	a905      	add	r1, sp, #20
   23dba:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   23dbc:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   23dbe:	f7ff fefd 	bl	23bbc <nvs_prev_ate>
			if (rc) {
   23dc2:	4602      	mov	r2, r0
   23dc4:	2800      	cmp	r0, #0
   23dc6:	d16c      	bne.n	23ea2 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   23dc8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   23dcc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   23dd0:	429a      	cmp	r2, r3
   23dd2:	d027      	beq.n	23e24 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   23dd4:	6862      	ldr	r2, [r4, #4]
   23dd6:	9b05      	ldr	r3, [sp, #20]
   23dd8:	429a      	cmp	r2, r3
   23dda:	d1ec      	bne.n	23db6 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   23ddc:	4556      	cmp	r6, sl
   23dde:	d1e4      	bne.n	23daa <nvs_gc+0x9a>
   23de0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   23de4:	2b00      	cmp	r3, #0
   23de6:	d0e0      	beq.n	23daa <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   23de8:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   23dec:	ea4f 431a 	mov.w	r3, sl, lsr #16
   23df0:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   23df2:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   23df4:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   23df6:	68a3      	ldr	r3, [r4, #8]
   23df8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   23dfc:	f7ff fe93 	bl	23b26 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   23e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   23e02:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   23e06:	681e      	ldr	r6, [r3, #0]
   23e08:	4276      	negs	r6, r6
	block_size =
   23e0a:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   23e0e:	f1b9 0f00 	cmp.w	r9, #0
   23e12:	d10e      	bne.n	23e32 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   23e14:	a908      	add	r1, sp, #32
   23e16:	4620      	mov	r0, r4
   23e18:	f7ff ff54 	bl	23cc4 <nvs_flash_ate_wrt>
			if (rc) {
   23e1c:	4602      	mov	r2, r0
   23e1e:	2800      	cmp	r0, #0
   23e20:	d0c3      	beq.n	23daa <nvs_gc+0x9a>
   23e22:	e03e      	b.n	23ea2 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   23e24:	a90a      	add	r1, sp, #40	; 0x28
   23e26:	4620      	mov	r0, r4
   23e28:	f7ff fe90 	bl	23b4c <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   23e2c:	2800      	cmp	r0, #0
   23e2e:	d0d1      	beq.n	23dd4 <nvs_gc+0xc4>
   23e30:	e7d4      	b.n	23ddc <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   23e32:	454e      	cmp	r6, r9
   23e34:	46b0      	mov	r8, r6
   23e36:	bf28      	it	cs
   23e38:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   23e3a:	aa0c      	add	r2, sp, #48	; 0x30
   23e3c:	4643      	mov	r3, r8
   23e3e:	4639      	mov	r1, r7
   23e40:	4620      	mov	r0, r4
   23e42:	f7ff fdec 	bl	23a1e <nvs_flash_rd>
		if (rc) {
   23e46:	4602      	mov	r2, r0
   23e48:	bb58      	cbnz	r0, 23ea2 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   23e4a:	4643      	mov	r3, r8
   23e4c:	68a1      	ldr	r1, [r4, #8]
   23e4e:	aa0c      	add	r2, sp, #48	; 0x30
   23e50:	4620      	mov	r0, r4
   23e52:	f7ff fefd 	bl	23c50 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   23e56:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   23e58:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   23e5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   23e5c:	f7ff fe6c 	bl	23b38 <nvs_al_size.isra.0>
   23e60:	68a3      	ldr	r3, [r4, #8]
   23e62:	4403      	add	r3, r0
   23e64:	60a3      	str	r3, [r4, #8]
		if (rc) {
   23e66:	b9e2      	cbnz	r2, 23ea2 <nvs_gc+0x192>
		len -= bytes_to_copy;
   23e68:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   23e6c:	4447      	add	r7, r8
   23e6e:	e7ce      	b.n	23e0e <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   23e70:	4620      	mov	r0, r4
   23e72:	f7ff ff38 	bl	23ce6 <nvs_add_gc_done_ate>
		if (rc) {
   23e76:	4602      	mov	r2, r0
   23e78:	2800      	cmp	r0, #0
   23e7a:	f43f af7a 	beq.w	23d72 <nvs_gc+0x62>
   23e7e:	e010      	b.n	23ea2 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   23e80:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   23e82:	a906      	add	r1, sp, #24
   23e84:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   23e86:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   23e88:	f7ff fe7a 	bl	23b80 <nvs_close_ate_valid>
   23e8c:	2800      	cmp	r0, #0
   23e8e:	f47f af76 	bne.w	23d7e <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   23e92:	a904      	add	r1, sp, #16
   23e94:	4620      	mov	r0, r4
   23e96:	f7ee f80f 	bl	11eb8 <nvs_recover_last_ate>
		if (rc) {
   23e9a:	4602      	mov	r2, r0
   23e9c:	2800      	cmp	r0, #0
   23e9e:	f43f af74 	beq.w	23d8a <nvs_gc+0x7a>
}
   23ea2:	4610      	mov	r0, r2
   23ea4:	b015      	add	sp, #84	; 0x54
   23ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023eaa <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   23eaa:	2300      	movs	r3, #0
   23eac:	461a      	mov	r2, r3
   23eae:	f7ee b9cf 	b.w	12250 <nvs_write>

00023eb2 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   23eb2:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   23eb4:	2400      	movs	r4, #0
   23eb6:	9400      	str	r4, [sp, #0]
   23eb8:	f7ee fa9e 	bl	123f8 <nvs_read_hist>
	return rc;
}
   23ebc:	b002      	add	sp, #8
   23ebe:	bd10      	pop	{r4, pc}

00023ec0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   23ec0:	4770      	bx	lr

00023ec2 <get_sectors_cb>:
{
   23ec2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   23ec4:	684c      	ldr	r4, [r1, #4]
   23ec6:	6803      	ldr	r3, [r0, #0]
   23ec8:	42a3      	cmp	r3, r4
   23eca:	d201      	bcs.n	23ed0 <get_sectors_cb+0xe>
		*bail_value = true;
   23ecc:	2001      	movs	r0, #1
}
   23ece:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   23ed0:	688a      	ldr	r2, [r1, #8]
   23ed2:	4422      	add	r2, r4
   23ed4:	4293      	cmp	r3, r2
   23ed6:	d301      	bcc.n	23edc <get_sectors_cb+0x1a>
		*bail_value = false;
   23ed8:	2000      	movs	r0, #0
   23eda:	e7f8      	b.n	23ece <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   23edc:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   23ee0:	694e      	ldr	r6, [r1, #20]
   23ee2:	42b5      	cmp	r5, r6
   23ee4:	d303      	bcc.n	23eee <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   23ee6:	f06f 030b 	mvn.w	r3, #11
   23eea:	618b      	str	r3, [r1, #24]
		return true;
   23eec:	e7f4      	b.n	23ed8 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   23eee:	1b1b      	subs	r3, r3, r4
   23ef0:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   23ef4:	6843      	ldr	r3, [r0, #4]
   23ef6:	6908      	ldr	r0, [r1, #16]
   23ef8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   23efc:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   23efe:	690b      	ldr	r3, [r1, #16]
   23f00:	3301      	adds	r3, #1
   23f02:	610b      	str	r3, [r1, #16]
	return true;
   23f04:	e7e2      	b.n	23ecc <get_sectors_cb+0xa>

00023f06 <settings_load>:
	return settings_load_subtree(NULL);
   23f06:	2000      	movs	r0, #0
   23f08:	f7ee bb6e 	b.w	125e8 <settings_load_subtree>

00023f0c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   23f0c:	2200      	movs	r2, #0
   23f0e:	4611      	mov	r1, r2
   23f10:	f7ee bb30 	b.w	12574 <settings_save_one>

00023f14 <settings_name_steq>:
{
   23f14:	4603      	mov	r3, r0
   23f16:	b510      	push	{r4, lr}
   23f18:	4608      	mov	r0, r1
	if (next) {
   23f1a:	b10a      	cbz	r2, 23f20 <settings_name_steq+0xc>
		*next = NULL;
   23f1c:	2100      	movs	r1, #0
   23f1e:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   23f20:	b153      	cbz	r3, 23f38 <settings_name_steq+0x24>
   23f22:	b1d0      	cbz	r0, 23f5a <settings_name_steq+0x46>
   23f24:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   23f26:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   23f2a:	b180      	cbz	r0, 23f4e <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   23f2c:	f813 4b01 	ldrb.w	r4, [r3], #1
   23f30:	42a0      	cmp	r0, r4
   23f32:	d101      	bne.n	23f38 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   23f34:	283d      	cmp	r0, #61	; 0x3d
   23f36:	d1f6      	bne.n	23f26 <settings_name_steq+0x12>
		return 0;
   23f38:	2000      	movs	r0, #0
   23f3a:	e00e      	b.n	23f5a <settings_name_steq+0x46>
			*next = name + 1;
   23f3c:	3301      	adds	r3, #1
   23f3e:	6013      	str	r3, [r2, #0]
   23f40:	e00a      	b.n	23f58 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   23f42:	283d      	cmp	r0, #61	; 0x3d
   23f44:	d008      	beq.n	23f58 <settings_name_steq+0x44>
   23f46:	fab0 f080 	clz	r0, r0
   23f4a:	0940      	lsrs	r0, r0, #5
   23f4c:	e005      	b.n	23f5a <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   23f4e:	7818      	ldrb	r0, [r3, #0]
   23f50:	282f      	cmp	r0, #47	; 0x2f
   23f52:	d1f6      	bne.n	23f42 <settings_name_steq+0x2e>
		if (next) {
   23f54:	2a00      	cmp	r2, #0
   23f56:	d1f1      	bne.n	23f3c <settings_name_steq+0x28>
		return 1;
   23f58:	2001      	movs	r0, #1
}
   23f5a:	bd10      	pop	{r4, pc}

00023f5c <settings_name_next>:
{
   23f5c:	b510      	push	{r4, lr}
	if (next) {
   23f5e:	b109      	cbz	r1, 23f64 <settings_name_next+0x8>
		*next = NULL;
   23f60:	2300      	movs	r3, #0
   23f62:	600b      	str	r3, [r1, #0]
	if (!name) {
   23f64:	b158      	cbz	r0, 23f7e <settings_name_next+0x22>
   23f66:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   23f68:	781a      	ldrb	r2, [r3, #0]
   23f6a:	461c      	mov	r4, r3
   23f6c:	3301      	adds	r3, #1
   23f6e:	b12a      	cbz	r2, 23f7c <settings_name_next+0x20>
   23f70:	2a3d      	cmp	r2, #61	; 0x3d
   23f72:	d003      	beq.n	23f7c <settings_name_next+0x20>
   23f74:	2a2f      	cmp	r2, #47	; 0x2f
   23f76:	d1f7      	bne.n	23f68 <settings_name_next+0xc>
		if (next) {
   23f78:	b101      	cbz	r1, 23f7c <settings_name_next+0x20>
			*next = name + 1;
   23f7a:	600b      	str	r3, [r1, #0]
   23f7c:	1a20      	subs	r0, r4, r0
}
   23f7e:	bd10      	pop	{r4, pc}

00023f80 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   23f80:	3008      	adds	r0, #8
   23f82:	4770      	bx	lr

00023f84 <settings_nvs_read_fn>:
{
   23f84:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   23f86:	4613      	mov	r3, r2
{
   23f88:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   23f8a:	460a      	mov	r2, r1
   23f8c:	8881      	ldrh	r1, [r0, #4]
   23f8e:	6800      	ldr	r0, [r0, #0]
   23f90:	f7ff ff8f 	bl	23eb2 <nvs_read>
}
   23f94:	42a0      	cmp	r0, r4
   23f96:	bfa8      	it	ge
   23f98:	4620      	movge	r0, r4
   23f9a:	bd10      	pop	{r4, pc}

00023f9c <settings_nvs_save>:
{
   23f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fa0:	b097      	sub	sp, #92	; 0x5c
   23fa2:	4604      	mov	r4, r0
   23fa4:	9201      	str	r2, [sp, #4]
   23fa6:	469a      	mov	sl, r3
	if (!name) {
   23fa8:	4689      	mov	r9, r1
   23faa:	2900      	cmp	r1, #0
   23fac:	d07e      	beq.n	240ac <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   23fae:	b1da      	cbz	r2, 23fe8 <settings_nvs_save+0x4c>
   23fb0:	faba f78a 	clz	r7, sl
   23fb4:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   23fb6:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   23fb8:	3501      	adds	r5, #1
   23fba:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   23fbc:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   23fbe:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   23fc2:	1e6e      	subs	r6, r5, #1
   23fc4:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   23fc6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   23fca:	d040      	beq.n	2404e <settings_nvs_save+0xb2>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   23fcc:	234a      	movs	r3, #74	; 0x4a
   23fce:	aa03      	add	r2, sp, #12
   23fd0:	4631      	mov	r1, r6
   23fd2:	4658      	mov	r0, fp
   23fd4:	f7ff ff6d 	bl	23eb2 <nvs_read>
		if (rc < 0) {
   23fd8:	2800      	cmp	r0, #0
   23fda:	da07      	bge.n	23fec <settings_nvs_save+0x50>
		name_id--;
   23fdc:	f110 0f02 	cmn.w	r0, #2
   23fe0:	bf08      	it	eq
   23fe2:	46b0      	moveq	r8, r6
   23fe4:	4635      	mov	r5, r6
   23fe6:	e7ec      	b.n	23fc2 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   23fe8:	2701      	movs	r7, #1
   23fea:	e7e4      	b.n	23fb6 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   23fec:	f100 0358 	add.w	r3, r0, #88	; 0x58
   23ff0:	eb0d 0003 	add.w	r0, sp, r3
   23ff4:	2300      	movs	r3, #0
   23ff6:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   23ffa:	a903      	add	r1, sp, #12
   23ffc:	4648      	mov	r0, r9
   23ffe:	f000 fb46 	bl	2468e <strcmp>
   24002:	2800      	cmp	r0, #0
   24004:	d1ee      	bne.n	23fe4 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   24006:	b32f      	cbz	r7, 24054 <settings_nvs_save+0xb8>
   24008:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2400a:	42b3      	cmp	r3, r6
   2400c:	d008      	beq.n	24020 <settings_nvs_save+0x84>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   2400e:	4631      	mov	r1, r6
   24010:	4658      	mov	r0, fp
   24012:	f7ff ff4a 	bl	23eaa <nvs_delete>
			if (rc >= 0) {
   24016:	2800      	cmp	r0, #0
   24018:	da0f      	bge.n	2403a <settings_nvs_save+0x9e>
}
   2401a:	b017      	add	sp, #92	; 0x5c
   2401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cf->last_name_id--;
   24020:	4622      	mov	r2, r4
   24022:	1e73      	subs	r3, r6, #1
   24024:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   24028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2402c:	2302      	movs	r3, #2
   2402e:	4658      	mov	r0, fp
   24030:	f7ee f90e 	bl	12250 <nvs_write>
			if (rc < 0) {
   24034:	2800      	cmp	r0, #0
   24036:	daea      	bge.n	2400e <settings_nvs_save+0x72>
   24038:	e7ef      	b.n	2401a <settings_nvs_save+0x7e>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   2403a:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2403e:	313f      	adds	r1, #63	; 0x3f
   24040:	b289      	uxth	r1, r1
   24042:	4658      	mov	r0, fp
   24044:	f7ff ff31 	bl	23eaa <nvs_delete>
	if (rc < 0) {
   24048:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2404c:	e7e5      	b.n	2401a <settings_nvs_save+0x7e>
	if (delete) {
   2404e:	b1ff      	cbz	r7, 24090 <settings_nvs_save+0xf4>
			return 0;
   24050:	2000      	movs	r0, #0
   24052:	e7e2      	b.n	2401a <settings_nvs_save+0x7e>
		name_id--;
   24054:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   24056:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2405a:	d02a      	beq.n	240b2 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2405c:	f104 0508 	add.w	r5, r4, #8
   24060:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   24064:	9a01      	ldr	r2, [sp, #4]
   24066:	4653      	mov	r3, sl
   24068:	b289      	uxth	r1, r1
   2406a:	4628      	mov	r0, r5
   2406c:	f7ee f8f0 	bl	12250 <nvs_write>
	if (rc < 0) {
   24070:	2800      	cmp	r0, #0
   24072:	dbd2      	blt.n	2401a <settings_nvs_save+0x7e>
	if (write_name) {
   24074:	b977      	cbnz	r7, 24094 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   24076:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   24078:	4543      	cmp	r3, r8
   2407a:	d2e9      	bcs.n	24050 <settings_nvs_save+0xb4>
		cf->last_name_id = write_name_id;
   2407c:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2407e:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   24080:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   24084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24088:	4628      	mov	r0, r5
   2408a:	f7ee f8e1 	bl	12250 <nvs_write>
   2408e:	e7db      	b.n	24048 <settings_nvs_save+0xac>
	write_name = true;
   24090:	2701      	movs	r7, #1
   24092:	e7e0      	b.n	24056 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   24094:	4648      	mov	r0, r9
   24096:	f000 faea 	bl	2466e <strlen>
   2409a:	464a      	mov	r2, r9
   2409c:	4603      	mov	r3, r0
   2409e:	4641      	mov	r1, r8
   240a0:	4628      	mov	r0, r5
   240a2:	f7ee f8d5 	bl	12250 <nvs_write>
		if (rc < 0) {
   240a6:	2800      	cmp	r0, #0
   240a8:	dae5      	bge.n	24076 <settings_nvs_save+0xda>
   240aa:	e7b6      	b.n	2401a <settings_nvs_save+0x7e>
		return -EINVAL;
   240ac:	f06f 0015 	mvn.w	r0, #21
   240b0:	e7b3      	b.n	2401a <settings_nvs_save+0x7e>
		return -ENOMEM;
   240b2:	f06f 000b 	mvn.w	r0, #11
   240b6:	e7b0      	b.n	2401a <settings_nvs_save+0x7e>

000240b8 <settings_nvs_backend_init>:
{
   240b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   240ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   240bc:	6303      	str	r3, [r0, #48]	; 0x30
{
   240be:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   240c0:	b1c3      	cbz	r3, 240f4 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   240c2:	f100 0608 	add.w	r6, r0, #8
   240c6:	4630      	mov	r0, r6
   240c8:	f7ed ff28 	bl	11f1c <nvs_mount>
	if (rc) {
   240cc:	4605      	mov	r5, r0
   240ce:	b970      	cbnz	r0, 240ee <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   240d0:	2302      	movs	r3, #2
   240d2:	f10d 0206 	add.w	r2, sp, #6
   240d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   240da:	4630      	mov	r0, r6
   240dc:	f7ff fee9 	bl	23eb2 <nvs_read>
	if (rc < 0) {
   240e0:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   240e2:	bfac      	ite	ge
   240e4:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   240e8:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   240ec:	8723      	strh	r3, [r4, #56]	; 0x38
}
   240ee:	4628      	mov	r0, r5
   240f0:	b002      	add	sp, #8
   240f2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   240f4:	f06f 0512 	mvn.w	r5, #18
   240f8:	e7f9      	b.n	240ee <settings_nvs_backend_init+0x36>

000240fa <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   240fa:	b538      	push	{r3, r4, r5, lr}
   240fc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   240fe:	42ab      	cmp	r3, r5
{
   24100:	4611      	mov	r1, r2
   24102:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   24104:	d804      	bhi.n	24110 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   24106:	461a      	mov	r2, r3
   24108:	f000 faf1 	bl	246ee <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2410c:	4620      	mov	r0, r4
   2410e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   24110:	2400      	movs	r4, #0
   24112:	e7fb      	b.n	2410c <_copy+0x12>

00024114 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   24114:	f000 baf6 	b.w	24704 <memset>

00024118 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   24118:	09c3      	lsrs	r3, r0, #7
   2411a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2411e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24122:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   24126:	b2c0      	uxtb	r0, r0
   24128:	4770      	bx	lr

0002412a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2412a:	78cb      	ldrb	r3, [r1, #3]
   2412c:	7802      	ldrb	r2, [r0, #0]
   2412e:	4053      	eors	r3, r2
   24130:	7003      	strb	r3, [r0, #0]
   24132:	884b      	ldrh	r3, [r1, #2]
   24134:	7842      	ldrb	r2, [r0, #1]
   24136:	4053      	eors	r3, r2
   24138:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2413a:	680a      	ldr	r2, [r1, #0]
   2413c:	7883      	ldrb	r3, [r0, #2]
   2413e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24142:	7083      	strb	r3, [r0, #2]
   24144:	680a      	ldr	r2, [r1, #0]
   24146:	78c3      	ldrb	r3, [r0, #3]
   24148:	4053      	eors	r3, r2
   2414a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2414c:	79cb      	ldrb	r3, [r1, #7]
   2414e:	7902      	ldrb	r2, [r0, #4]
   24150:	4053      	eors	r3, r2
   24152:	7103      	strb	r3, [r0, #4]
   24154:	88cb      	ldrh	r3, [r1, #6]
   24156:	7942      	ldrb	r2, [r0, #5]
   24158:	4053      	eors	r3, r2
   2415a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2415c:	684a      	ldr	r2, [r1, #4]
   2415e:	7983      	ldrb	r3, [r0, #6]
   24160:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24164:	7183      	strb	r3, [r0, #6]
   24166:	684a      	ldr	r2, [r1, #4]
   24168:	79c3      	ldrb	r3, [r0, #7]
   2416a:	4053      	eors	r3, r2
   2416c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2416e:	7acb      	ldrb	r3, [r1, #11]
   24170:	7a02      	ldrb	r2, [r0, #8]
   24172:	4053      	eors	r3, r2
   24174:	7203      	strb	r3, [r0, #8]
   24176:	7a42      	ldrb	r2, [r0, #9]
   24178:	894b      	ldrh	r3, [r1, #10]
   2417a:	4053      	eors	r3, r2
   2417c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2417e:	688a      	ldr	r2, [r1, #8]
   24180:	7a83      	ldrb	r3, [r0, #10]
   24182:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24186:	7283      	strb	r3, [r0, #10]
   24188:	688a      	ldr	r2, [r1, #8]
   2418a:	7ac3      	ldrb	r3, [r0, #11]
   2418c:	4053      	eors	r3, r2
   2418e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   24190:	7bcb      	ldrb	r3, [r1, #15]
   24192:	7b02      	ldrb	r2, [r0, #12]
   24194:	4053      	eors	r3, r2
   24196:	7303      	strb	r3, [r0, #12]
   24198:	89cb      	ldrh	r3, [r1, #14]
   2419a:	7b42      	ldrb	r2, [r0, #13]
   2419c:	4053      	eors	r3, r2
   2419e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   241a0:	68ca      	ldr	r2, [r1, #12]
   241a2:	7b83      	ldrb	r3, [r0, #14]
   241a4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   241a8:	7383      	strb	r3, [r0, #14]
   241aa:	68ca      	ldr	r2, [r1, #12]
   241ac:	7bc3      	ldrb	r3, [r0, #15]
   241ae:	4053      	eors	r3, r2
   241b0:	73c3      	strb	r3, [r0, #15]
}
   241b2:	4770      	bx	lr

000241b4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   241b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   241b6:	7802      	ldrb	r2, [r0, #0]
   241b8:	f88d 2000 	strb.w	r2, [sp]
   241bc:	7942      	ldrb	r2, [r0, #5]
   241be:	f88d 2001 	strb.w	r2, [sp, #1]
   241c2:	7a82      	ldrb	r2, [r0, #10]
   241c4:	f88d 2002 	strb.w	r2, [sp, #2]
   241c8:	7bc2      	ldrb	r2, [r0, #15]
   241ca:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   241ce:	7902      	ldrb	r2, [r0, #4]
   241d0:	f88d 2004 	strb.w	r2, [sp, #4]
   241d4:	7a42      	ldrb	r2, [r0, #9]
   241d6:	f88d 2005 	strb.w	r2, [sp, #5]
   241da:	7b82      	ldrb	r2, [r0, #14]
   241dc:	f88d 2006 	strb.w	r2, [sp, #6]
   241e0:	78c2      	ldrb	r2, [r0, #3]
   241e2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   241e6:	7a02      	ldrb	r2, [r0, #8]
   241e8:	f88d 2008 	strb.w	r2, [sp, #8]
   241ec:	7b42      	ldrb	r2, [r0, #13]
   241ee:	f88d 2009 	strb.w	r2, [sp, #9]
   241f2:	7882      	ldrb	r2, [r0, #2]
   241f4:	f88d 200a 	strb.w	r2, [sp, #10]
   241f8:	79c2      	ldrb	r2, [r0, #7]
   241fa:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   241fe:	7b02      	ldrb	r2, [r0, #12]
   24200:	f88d 200c 	strb.w	r2, [sp, #12]
   24204:	7842      	ldrb	r2, [r0, #1]
   24206:	7ac3      	ldrb	r3, [r0, #11]
   24208:	f88d 200d 	strb.w	r2, [sp, #13]
   2420c:	7982      	ldrb	r2, [r0, #6]
   2420e:	f88d 200e 	strb.w	r2, [sp, #14]
   24212:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24216:	2310      	movs	r3, #16
   24218:	466a      	mov	r2, sp
   2421a:	4619      	mov	r1, r3
   2421c:	f7ff ff6d 	bl	240fa <_copy>
}
   24220:	b005      	add	sp, #20
   24222:	f85d fb04 	ldr.w	pc, [sp], #4

00024226 <mult_row_column>:
{
   24226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24228:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2422a:	7808      	ldrb	r0, [r1, #0]
{
   2422c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2422e:	f7ff ff73 	bl	24118 <_double_byte>
   24232:	4605      	mov	r5, r0
   24234:	7860      	ldrb	r0, [r4, #1]
   24236:	f7ff ff6f 	bl	24118 <_double_byte>
   2423a:	78a2      	ldrb	r2, [r4, #2]
   2423c:	7863      	ldrb	r3, [r4, #1]
   2423e:	4053      	eors	r3, r2
   24240:	78e2      	ldrb	r2, [r4, #3]
   24242:	4053      	eors	r3, r2
   24244:	405d      	eors	r5, r3
   24246:	4068      	eors	r0, r5
   24248:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2424a:	7860      	ldrb	r0, [r4, #1]
   2424c:	7827      	ldrb	r7, [r4, #0]
   2424e:	f7ff ff63 	bl	24118 <_double_byte>
   24252:	4605      	mov	r5, r0
   24254:	78a0      	ldrb	r0, [r4, #2]
   24256:	f7ff ff5f 	bl	24118 <_double_byte>
   2425a:	78a3      	ldrb	r3, [r4, #2]
   2425c:	405f      	eors	r7, r3
   2425e:	78e3      	ldrb	r3, [r4, #3]
   24260:	405f      	eors	r7, r3
   24262:	407d      	eors	r5, r7
   24264:	4068      	eors	r0, r5
   24266:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24268:	7863      	ldrb	r3, [r4, #1]
   2426a:	7827      	ldrb	r7, [r4, #0]
   2426c:	78a0      	ldrb	r0, [r4, #2]
   2426e:	405f      	eors	r7, r3
   24270:	f7ff ff52 	bl	24118 <_double_byte>
   24274:	4605      	mov	r5, r0
   24276:	78e0      	ldrb	r0, [r4, #3]
   24278:	f7ff ff4e 	bl	24118 <_double_byte>
   2427c:	78e3      	ldrb	r3, [r4, #3]
   2427e:	405f      	eors	r7, r3
   24280:	407d      	eors	r5, r7
   24282:	4068      	eors	r0, r5
   24284:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   24286:	7820      	ldrb	r0, [r4, #0]
   24288:	f7ff ff46 	bl	24118 <_double_byte>
   2428c:	7862      	ldrb	r2, [r4, #1]
   2428e:	7823      	ldrb	r3, [r4, #0]
   24290:	4053      	eors	r3, r2
   24292:	78a2      	ldrb	r2, [r4, #2]
   24294:	4053      	eors	r3, r2
   24296:	ea80 0503 	eor.w	r5, r0, r3
   2429a:	78e0      	ldrb	r0, [r4, #3]
   2429c:	f7ff ff3c 	bl	24118 <_double_byte>
   242a0:	b2ed      	uxtb	r5, r5
   242a2:	4045      	eors	r5, r0
   242a4:	70f5      	strb	r5, [r6, #3]
}
   242a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000242a8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   242a8:	b570      	push	{r4, r5, r6, lr}
   242aa:	4614      	mov	r4, r2
   242ac:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   242ae:	4605      	mov	r5, r0
   242b0:	2800      	cmp	r0, #0
   242b2:	d049      	beq.n	24348 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   242b4:	2900      	cmp	r1, #0
   242b6:	d049      	beq.n	2434c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   242b8:	2a00      	cmp	r2, #0
   242ba:	d049      	beq.n	24350 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   242bc:	2310      	movs	r3, #16
   242be:	460a      	mov	r2, r1
   242c0:	4668      	mov	r0, sp
   242c2:	4619      	mov	r1, r3
   242c4:	f7ff ff19 	bl	240fa <_copy>
	add_round_key(state, s->words);
   242c8:	4621      	mov	r1, r4
   242ca:	4668      	mov	r0, sp
   242cc:	f7ff ff2d 	bl	2412a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   242d0:	3410      	adds	r4, #16
   242d2:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   242d6:	4668      	mov	r0, sp
   242d8:	f7ee fd64 	bl	12da4 <sub_bytes>
		shift_rows(state);
   242dc:	4668      	mov	r0, sp
   242de:	f7ff ff69 	bl	241b4 <shift_rows>
	mult_row_column(t, s);
   242e2:	4669      	mov	r1, sp
   242e4:	a804      	add	r0, sp, #16
   242e6:	f7ff ff9e 	bl	24226 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   242ea:	a901      	add	r1, sp, #4
   242ec:	a805      	add	r0, sp, #20
   242ee:	f7ff ff9a 	bl	24226 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   242f2:	a902      	add	r1, sp, #8
   242f4:	a806      	add	r0, sp, #24
   242f6:	f7ff ff96 	bl	24226 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   242fa:	a903      	add	r1, sp, #12
   242fc:	a807      	add	r0, sp, #28
   242fe:	f7ff ff92 	bl	24226 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24302:	2310      	movs	r3, #16
   24304:	4619      	mov	r1, r3
   24306:	eb0d 0203 	add.w	r2, sp, r3
   2430a:	4668      	mov	r0, sp
   2430c:	f7ff fef5 	bl	240fa <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   24310:	4621      	mov	r1, r4
   24312:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   24314:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   24316:	f7ff ff08 	bl	2412a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2431a:	42b4      	cmp	r4, r6
   2431c:	d1db      	bne.n	242d6 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2431e:	f7ee fd41 	bl	12da4 <sub_bytes>
	shift_rows(state);
   24322:	4668      	mov	r0, sp
   24324:	f7ff ff46 	bl	241b4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   24328:	4621      	mov	r1, r4
   2432a:	4668      	mov	r0, sp
   2432c:	f7ff fefd 	bl	2412a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   24330:	2310      	movs	r3, #16
   24332:	4619      	mov	r1, r3
   24334:	466a      	mov	r2, sp
   24336:	4628      	mov	r0, r5
   24338:	f7ff fedf 	bl	240fa <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2433c:	4668      	mov	r0, sp
   2433e:	2210      	movs	r2, #16
   24340:	2100      	movs	r1, #0
   24342:	f7ff fee7 	bl	24114 <_set>

	return TC_CRYPTO_SUCCESS;
   24346:	2001      	movs	r0, #1
}
   24348:	b008      	add	sp, #32
   2434a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2434c:	4608      	mov	r0, r1
   2434e:	e7fb      	b.n	24348 <tc_aes_encrypt+0xa0>
   24350:	4610      	mov	r0, r2
   24352:	e7f9      	b.n	24348 <tc_aes_encrypt+0xa0>

00024354 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   24354:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24356:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   24358:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2435a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2435e:	2b00      	cmp	r3, #0
   24360:	bfac      	ite	ge
   24362:	2300      	movge	r3, #0
   24364:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24366:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2436a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2436e:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   24370:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   24374:	d002      	beq.n	2437c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   24376:	7813      	ldrb	r3, [r2, #0]
   24378:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2437a:	e7f4      	b.n	24366 <gf_double+0x12>
	}
}
   2437c:	bd10      	pop	{r4, pc}

0002437e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2437e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   24380:	b120      	cbz	r0, 2438c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   24382:	2258      	movs	r2, #88	; 0x58
   24384:	2100      	movs	r1, #0
   24386:	f7ff fec5 	bl	24114 <_set>
   2438a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2438c:	bd08      	pop	{r3, pc}

0002438e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2438e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24390:	4604      	mov	r4, r0
   24392:	b188      	cbz	r0, 243b8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24394:	2210      	movs	r2, #16
   24396:	2100      	movs	r1, #0
   24398:	f7ff febc 	bl	24114 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2439c:	2210      	movs	r2, #16
   2439e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   243a2:	2100      	movs	r1, #0
   243a4:	f7ff feb6 	bl	24114 <_set>
	s->leftover_offset = 0;
   243a8:	2300      	movs	r3, #0
   243aa:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   243ac:	2200      	movs	r2, #0
   243ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   243b2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   243b6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   243b8:	bd10      	pop	{r4, pc}

000243ba <tc_cmac_setup>:
{
   243ba:	b570      	push	{r4, r5, r6, lr}
   243bc:	4604      	mov	r4, r0
   243be:	460d      	mov	r5, r1
   243c0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   243c2:	b310      	cbz	r0, 2440a <tc_cmac_setup+0x50>
   243c4:	b311      	cbz	r1, 2440c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   243c6:	2258      	movs	r2, #88	; 0x58
   243c8:	2100      	movs	r1, #0
   243ca:	f7ff fea3 	bl	24114 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   243ce:	4629      	mov	r1, r5
	s->sched = sched;
   243d0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   243d2:	4630      	mov	r0, r6
   243d4:	f7ee fcf2 	bl	12dbc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   243d8:	2210      	movs	r2, #16
   243da:	2100      	movs	r1, #0
   243dc:	4620      	mov	r0, r4
   243de:	f7ff fe99 	bl	24114 <_set>
	gf_double (s->K1, s->iv);
   243e2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   243e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   243e8:	4621      	mov	r1, r4
   243ea:	4620      	mov	r0, r4
   243ec:	f7ff ff5c 	bl	242a8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   243f0:	4621      	mov	r1, r4
   243f2:	4628      	mov	r0, r5
   243f4:	f7ff ffae 	bl	24354 <gf_double>
	gf_double (s->K2, s->K1);
   243f8:	4629      	mov	r1, r5
   243fa:	f104 0020 	add.w	r0, r4, #32
   243fe:	f7ff ffa9 	bl	24354 <gf_double>
	tc_cmac_init(s);
   24402:	4620      	mov	r0, r4
   24404:	f7ff ffc3 	bl	2438e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24408:	2001      	movs	r0, #1
}
   2440a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2440c:	4608      	mov	r0, r1
   2440e:	e7fc      	b.n	2440a <tc_cmac_setup+0x50>

00024410 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   24410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24414:	460e      	mov	r6, r1
   24416:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24418:	4604      	mov	r4, r0
   2441a:	2800      	cmp	r0, #0
   2441c:	d060      	beq.n	244e0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2441e:	b1fa      	cbz	r2, 24460 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   24420:	2900      	cmp	r1, #0
   24422:	d05d      	beq.n	244e0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   24424:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   24428:	ea53 0102 	orrs.w	r1, r3, r2
   2442c:	d058      	beq.n	244e0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2442e:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   24430:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   24434:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   24438:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2443c:	f1b8 0f00 	cmp.w	r8, #0
   24440:	d02c      	beq.n	2449c <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24442:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24446:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2444a:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2444c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2444e:	d20a      	bcs.n	24466 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24450:	462b      	mov	r3, r5
   24452:	4632      	mov	r2, r6
   24454:	4629      	mov	r1, r5
   24456:	f7ff fe50 	bl	240fa <_copy>
			s->leftover_offset += data_length;
   2445a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2445c:	442b      	add	r3, r5
   2445e:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   24460:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   24462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   24466:	463b      	mov	r3, r7
   24468:	4632      	mov	r2, r6
   2446a:	4639      	mov	r1, r7
   2446c:	f7ff fe45 	bl	240fa <_copy>
		data_length -= remaining_space;
   24470:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   24472:	2300      	movs	r3, #0
   24474:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   24476:	4445      	add	r5, r8
		data += remaining_space;
   24478:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2447a:	1e63      	subs	r3, r4, #1
   2447c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   24480:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24484:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24488:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2448a:	ea82 0200 	eor.w	r2, r2, r0
   2448e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24490:	d1f6      	bne.n	24480 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24492:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24494:	4621      	mov	r1, r4
   24496:	4620      	mov	r0, r4
   24498:	f7ff ff06 	bl	242a8 <tc_aes_encrypt>
   2449c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   244a0:	2d10      	cmp	r5, #16
   244a2:	d80a      	bhi.n	244ba <tc_cmac_update+0xaa>
	if (data_length > 0) {
   244a4:	2d00      	cmp	r5, #0
   244a6:	d0db      	beq.n	24460 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   244a8:	462b      	mov	r3, r5
   244aa:	4632      	mov	r2, r6
   244ac:	4629      	mov	r1, r5
   244ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   244b2:	f7ff fe22 	bl	240fa <_copy>
		s->leftover_offset = data_length;
   244b6:	6465      	str	r5, [r4, #68]	; 0x44
   244b8:	e7d2      	b.n	24460 <tc_cmac_update+0x50>
   244ba:	1e63      	subs	r3, r4, #1
   244bc:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   244be:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   244c2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   244c6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   244c8:	ea82 0200 	eor.w	r2, r2, r0
   244cc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   244ce:	d1f6      	bne.n	244be <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   244d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   244d2:	4621      	mov	r1, r4
   244d4:	4620      	mov	r0, r4
   244d6:	f7ff fee7 	bl	242a8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   244da:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   244dc:	3d10      	subs	r5, #16
   244de:	e7df      	b.n	244a0 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   244e0:	2000      	movs	r0, #0
   244e2:	e7be      	b.n	24462 <tc_cmac_update+0x52>

000244e4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   244e4:	b570      	push	{r4, r5, r6, lr}
   244e6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   244e8:	4605      	mov	r5, r0
   244ea:	b1e8      	cbz	r0, 24528 <tc_cmac_final+0x44>
   244ec:	b369      	cbz	r1, 2454a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   244ee:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   244f0:	2a10      	cmp	r2, #16
   244f2:	d11a      	bne.n	2452a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   244f4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   244f6:	1e63      	subs	r3, r4, #1
   244f8:	3901      	subs	r1, #1
   244fa:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   244fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24502:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24506:	4072      	eors	r2, r6
   24508:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2450c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2450e:	ea82 0206 	eor.w	r2, r2, r6
   24512:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24514:	d1f3      	bne.n	244fe <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24516:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24518:	4621      	mov	r1, r4
   2451a:	4628      	mov	r0, r5
   2451c:	f7ff fec4 	bl	242a8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24520:	4620      	mov	r0, r4
   24522:	f7ff ff2c 	bl	2437e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24526:	2001      	movs	r0, #1
}
   24528:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2452a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2452e:	2100      	movs	r1, #0
   24530:	f1c2 0210 	rsb	r2, r2, #16
   24534:	4420      	add	r0, r4
   24536:	f7ff fded 	bl	24114 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2453a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2453c:	4423      	add	r3, r4
   2453e:	2280      	movs	r2, #128	; 0x80
   24540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24544:	f104 0120 	add.w	r1, r4, #32
   24548:	e7d5      	b.n	244f6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2454a:	4608      	mov	r0, r1
   2454c:	e7ec      	b.n	24528 <tc_cmac_final+0x44>

0002454e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2454e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24550:	6800      	ldr	r0, [r0, #0]
   24552:	f7ee bca3 	b.w	12e9c <z_arm_fatal_error>

00024556 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24556:	2100      	movs	r1, #0
   24558:	2001      	movs	r0, #1
   2455a:	f7ee bc9f 	b.w	12e9c <z_arm_fatal_error>

0002455e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2455e:	b508      	push	{r3, lr}
	handler();
   24560:	f7ee fd32 	bl	12fc8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24568:	f7ee be0a 	b.w	13180 <z_arm_exc_exit>

0002456c <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24570:	4684      	mov	ip, r0
   24572:	460f      	mov	r7, r1
	register const char *s = nptr;
   24574:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   24576:	4621      	mov	r1, r4
   24578:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2457c:	2b20      	cmp	r3, #32
   2457e:	d0fa      	beq.n	24576 <strtoul+0xa>
   24580:	f1a3 0009 	sub.w	r0, r3, #9
   24584:	2804      	cmp	r0, #4
   24586:	d9f6      	bls.n	24576 <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   24588:	2b2d      	cmp	r3, #45	; 0x2d
   2458a:	d125      	bne.n	245d8 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   2458c:	784b      	ldrb	r3, [r1, #1]
   2458e:	1c8c      	adds	r4, r1, #2
		neg = 1;
   24590:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   24594:	bb3a      	cbnz	r2, 245e6 <strtoul+0x7a>
   24596:	2b30      	cmp	r3, #48	; 0x30
   24598:	d032      	beq.n	24600 <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   2459a:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2459c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   245a0:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   245a2:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   245a6:	fb02 f801 	mul.w	r8, r2, r1
   245aa:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   245ae:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   245b0:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   245b4:	2e09      	cmp	r6, #9
   245b6:	d82a      	bhi.n	2460e <strtoul+0xa2>
			c -= '0';
   245b8:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   245ba:	429a      	cmp	r2, r3
   245bc:	dd37      	ble.n	2462e <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   245be:	1c6e      	adds	r6, r5, #1
   245c0:	d007      	beq.n	245d2 <strtoul+0x66>
   245c2:	4288      	cmp	r0, r1
   245c4:	d830      	bhi.n	24628 <strtoul+0xbc>
   245c6:	d101      	bne.n	245cc <strtoul+0x60>
   245c8:	4543      	cmp	r3, r8
   245ca:	dc2d      	bgt.n	24628 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   245cc:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   245d0:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   245d2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   245d6:	e7eb      	b.n	245b0 <strtoul+0x44>
	} else if (c == '+') {
   245d8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   245da:	bf04      	itt	eq
   245dc:	784b      	ldrbeq	r3, [r1, #1]
   245de:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   245e0:	f04f 0e00 	mov.w	lr, #0
   245e4:	e7d6      	b.n	24594 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   245e6:	2a10      	cmp	r2, #16
   245e8:	d1d8      	bne.n	2459c <strtoul+0x30>
   245ea:	2b30      	cmp	r3, #48	; 0x30
   245ec:	d1d6      	bne.n	2459c <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   245ee:	7821      	ldrb	r1, [r4, #0]
   245f0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   245f4:	2958      	cmp	r1, #88	; 0x58
   245f6:	d1d1      	bne.n	2459c <strtoul+0x30>
		c = s[1];
   245f8:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   245fa:	2210      	movs	r2, #16
		s += 2;
   245fc:	3402      	adds	r4, #2
	if (base == 0) {
   245fe:	e7cd      	b.n	2459c <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24600:	7822      	ldrb	r2, [r4, #0]
   24602:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   24606:	2a58      	cmp	r2, #88	; 0x58
   24608:	d0f6      	beq.n	245f8 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   2460a:	2208      	movs	r2, #8
   2460c:	e7c6      	b.n	2459c <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2460e:	f043 0620 	orr.w	r6, r3, #32
   24612:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   24614:	2e19      	cmp	r6, #25
   24616:	d80a      	bhi.n	2462e <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24618:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   2461c:	2e1a      	cmp	r6, #26
   2461e:	bf34      	ite	cc
   24620:	2637      	movcc	r6, #55	; 0x37
   24622:	2657      	movcs	r6, #87	; 0x57
   24624:	1b9b      	subs	r3, r3, r6
   24626:	e7c8      	b.n	245ba <strtoul+0x4e>
			any = -1;
   24628:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2462c:	e7d1      	b.n	245d2 <strtoul+0x66>
		}
	}
	if (any < 0) {
   2462e:	1c6b      	adds	r3, r5, #1
   24630:	d107      	bne.n	24642 <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24632:	f7fb f99f 	bl	1f974 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   24636:	2322      	movs	r3, #34	; 0x22
   24638:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2463a:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2463c:	b947      	cbnz	r7, 24650 <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   24642:	f1be 0f00 	cmp.w	lr, #0
   24646:	d000      	beq.n	2464a <strtoul+0xde>
		acc = -acc;
   24648:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2464a:	2f00      	cmp	r7, #0
   2464c:	d0f7      	beq.n	2463e <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   2464e:	b10d      	cbz	r5, 24654 <strtoul+0xe8>
   24650:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   24654:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   24658:	e7f1      	b.n	2463e <strtoul+0xd2>

0002465a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2465a:	3901      	subs	r1, #1
   2465c:	4603      	mov	r3, r0
   2465e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24662:	b90a      	cbnz	r2, 24668 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   24664:	701a      	strb	r2, [r3, #0]

	return dest;
}
   24666:	4770      	bx	lr
		*d = *s;
   24668:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2466c:	e7f7      	b.n	2465e <strcpy+0x4>

0002466e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2466e:	4603      	mov	r3, r0
	size_t n = 0;
   24670:	2000      	movs	r0, #0

	while (*s != '\0') {
   24672:	5c1a      	ldrb	r2, [r3, r0]
   24674:	b902      	cbnz	r2, 24678 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   24676:	4770      	bx	lr
		n++;
   24678:	3001      	adds	r0, #1
   2467a:	e7fa      	b.n	24672 <strlen+0x4>

0002467c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2467c:	4603      	mov	r3, r0
	size_t n = 0;
   2467e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   24680:	5c1a      	ldrb	r2, [r3, r0]
   24682:	b10a      	cbz	r2, 24688 <strnlen+0xc>
   24684:	4288      	cmp	r0, r1
   24686:	d100      	bne.n	2468a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   24688:	4770      	bx	lr
		n++;
   2468a:	3001      	adds	r0, #1
   2468c:	e7f8      	b.n	24680 <strnlen+0x4>

0002468e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2468e:	1e43      	subs	r3, r0, #1
   24690:	3901      	subs	r1, #1
   24692:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24696:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2469a:	4282      	cmp	r2, r0
   2469c:	d101      	bne.n	246a2 <strcmp+0x14>
   2469e:	2a00      	cmp	r2, #0
   246a0:	d1f7      	bne.n	24692 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   246a2:	1a10      	subs	r0, r2, r0
   246a4:	4770      	bx	lr

000246a6 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   246a6:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   246a8:	460b      	mov	r3, r1
   246aa:	4605      	mov	r5, r0
   246ac:	b16a      	cbz	r2, 246ca <strncmp+0x24>
   246ae:	f810 6b01 	ldrb.w	r6, [r0], #1
   246b2:	781c      	ldrb	r4, [r3, #0]
   246b4:	42b4      	cmp	r4, r6
   246b6:	f101 0101 	add.w	r1, r1, #1
   246ba:	d100      	bne.n	246be <strncmp+0x18>
   246bc:	b91c      	cbnz	r4, 246c6 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   246be:	782a      	ldrb	r2, [r5, #0]
   246c0:	781b      	ldrb	r3, [r3, #0]
   246c2:	1ad0      	subs	r0, r2, r3
   246c4:	e002      	b.n	246cc <strncmp+0x26>
		n--;
   246c6:	3a01      	subs	r2, #1
   246c8:	e7ee      	b.n	246a8 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   246ca:	4610      	mov	r0, r2
}
   246cc:	bd70      	pop	{r4, r5, r6, pc}

000246ce <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   246ce:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   246d0:	b15a      	cbz	r2, 246ea <memcmp+0x1c>
   246d2:	3901      	subs	r1, #1
   246d4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   246d6:	f810 2b01 	ldrb.w	r2, [r0], #1
   246da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   246de:	42a0      	cmp	r0, r4
   246e0:	d001      	beq.n	246e6 <memcmp+0x18>
   246e2:	429a      	cmp	r2, r3
   246e4:	d0f7      	beq.n	246d6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   246e6:	1ad0      	subs	r0, r2, r3
}
   246e8:	bd10      	pop	{r4, pc}
		return 0;
   246ea:	4610      	mov	r0, r2
   246ec:	e7fc      	b.n	246e8 <memcmp+0x1a>

000246ee <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   246ee:	b510      	push	{r4, lr}
   246f0:	1e43      	subs	r3, r0, #1
   246f2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   246f4:	4291      	cmp	r1, r2
   246f6:	d100      	bne.n	246fa <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   246f8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   246fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   246fe:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24702:	e7f7      	b.n	246f4 <memcpy+0x6>

00024704 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   24704:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   24706:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   24708:	4603      	mov	r3, r0
	while (n > 0) {
   2470a:	4293      	cmp	r3, r2
   2470c:	d100      	bne.n	24710 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2470e:	4770      	bx	lr
		*(d_byte++) = c_byte;
   24710:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24714:	e7f9      	b.n	2470a <memset+0x6>

00024716 <_stdout_hook_default>:
}
   24716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2471a:	4770      	bx	lr

0002471c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2471c:	2806      	cmp	r0, #6
   2471e:	d108      	bne.n	24732 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24724:	2201      	movs	r2, #1
   24726:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2472a:	f3bf 8f4f 	dsb	sy
        __WFE();
   2472e:	bf20      	wfe
    while (true)
   24730:	e7fd      	b.n	2472e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   24732:	4770      	bx	lr

00024734 <pm_state_exit_post_ops>:
   24734:	2300      	movs	r3, #0
   24736:	f383 8811 	msr	BASEPRI, r3
   2473a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2473e:	4770      	bx	lr

00024740 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   24740:	b530      	push	{r4, r5, lr}
	memcpy(res, r, 3);
   24742:	2203      	movs	r2, #3
{
   24744:	b087      	sub	sp, #28
   24746:	4605      	mov	r5, r0
   24748:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   2474a:	a802      	add	r0, sp, #8
   2474c:	4411      	add	r1, r2
   2474e:	f7ff ffce 	bl	246ee <memcpy>
	(void)memset(res + 3, 0, 13);
   24752:	220d      	movs	r2, #13
   24754:	2100      	movs	r1, #0
   24756:	f10d 000b 	add.w	r0, sp, #11
   2475a:	f7ff ffd3 	bl	24704 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2475e:	aa02      	add	r2, sp, #8
   24760:	4611      	mov	r1, r2
   24762:	4628      	mov	r0, r5
   24764:	f002 f9b8 	bl	26ad8 <bt_encrypt_le>
	if (err) {
   24768:	b110      	cbz	r0, 24770 <bt_rpa_irk_matches+0x30>

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   2476a:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2476c:	b007      	add	sp, #28
   2476e:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   24770:	2203      	movs	r2, #3
   24772:	a902      	add	r1, sp, #8
   24774:	a801      	add	r0, sp, #4
   24776:	f7ff ffba 	bl	246ee <memcpy>
	return !memcmp(addr->val, hash, 3);
   2477a:	2203      	movs	r2, #3
   2477c:	a901      	add	r1, sp, #4
   2477e:	4620      	mov	r0, r4
   24780:	f7ff ffa5 	bl	246ce <memcmp>
   24784:	fab0 f080 	clz	r0, r0
   24788:	0940      	lsrs	r0, r0, #5
   2478a:	e7ef      	b.n	2476c <bt_rpa_irk_matches+0x2c>

0002478c <bt_settings_decode_key>:
{
   2478c:	b570      	push	{r4, r5, r6, lr}
   2478e:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   24790:	2100      	movs	r1, #0
{
   24792:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   24794:	f7ff fbe2 	bl	23f5c <settings_name_next>
   24798:	280d      	cmp	r0, #13
   2479a:	d118      	bne.n	247ce <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2479c:	7b23      	ldrb	r3, [r4, #12]
   2479e:	2b30      	cmp	r3, #48	; 0x30
   247a0:	d013      	beq.n	247ca <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   247a2:	2b31      	cmp	r3, #49	; 0x31
   247a4:	d113      	bne.n	247ce <bt_settings_decode_key+0x42>
   247a6:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   247a8:	f805 3b06 	strb.w	r3, [r5], #6
   247ac:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   247b0:	462a      	mov	r2, r5
   247b2:	4620      	mov	r0, r4
   247b4:	2301      	movs	r3, #1
   247b6:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   247b8:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   247ba:	f7fe fec0 	bl	2353e <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   247be:	42b4      	cmp	r4, r6
   247c0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   247c4:	d1f4      	bne.n	247b0 <bt_settings_decode_key+0x24>
	return 0;
   247c6:	2000      	movs	r0, #0
}
   247c8:	bd70      	pop	{r4, r5, r6, pc}
   247ca:	2300      	movs	r3, #0
   247cc:	e7ec      	b.n	247a8 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   247ce:	f06f 0015 	mvn.w	r0, #21
   247d2:	e7f9      	b.n	247c8 <bt_settings_decode_key+0x3c>

000247d4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   247d4:	b510      	push	{r4, lr}
   247d6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   247d8:	7801      	ldrb	r1, [r0, #0]
   247da:	7822      	ldrb	r2, [r4, #0]
   247dc:	428a      	cmp	r2, r1
{
   247de:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   247e0:	d00f      	beq.n	24802 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   247e2:	4669      	mov	r1, sp
   247e4:	f7ef fa64 	bl	13cb0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   247e8:	a905      	add	r1, sp, #20
   247ea:	4620      	mov	r0, r4
   247ec:	f7ef fa60 	bl	13cb0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   247f0:	2210      	movs	r2, #16
   247f2:	f10d 0115 	add.w	r1, sp, #21
   247f6:	f10d 0001 	add.w	r0, sp, #1
   247fa:	f7ff ff68 	bl	246ce <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   247fe:	b00a      	add	sp, #40	; 0x28
   24800:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24802:	2a01      	cmp	r2, #1
   24804:	d006      	beq.n	24814 <bt_uuid_cmp+0x40>
   24806:	2a02      	cmp	r2, #2
   24808:	d007      	beq.n	2481a <bt_uuid_cmp+0x46>
   2480a:	b972      	cbnz	r2, 2482a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2480c:	8840      	ldrh	r0, [r0, #2]
   2480e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24810:	1ac0      	subs	r0, r0, r3
   24812:	e7f4      	b.n	247fe <bt_uuid_cmp+0x2a>
   24814:	6840      	ldr	r0, [r0, #4]
   24816:	6863      	ldr	r3, [r4, #4]
   24818:	e7fa      	b.n	24810 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2481a:	2210      	movs	r2, #16
   2481c:	1c61      	adds	r1, r4, #1
   2481e:	3001      	adds	r0, #1
}
   24820:	b00a      	add	sp, #40	; 0x28
   24822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24826:	f7ff bf52 	b.w	246ce <memcmp>
	switch (u1->type) {
   2482a:	f06f 0015 	mvn.w	r0, #21
   2482e:	e7e6      	b.n	247fe <bt_uuid_cmp+0x2a>

00024830 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24830:	2a04      	cmp	r2, #4
{
   24832:	b510      	push	{r4, lr}
	switch (data_len) {
   24834:	d00a      	beq.n	2484c <bt_uuid_create+0x1c>
   24836:	2a10      	cmp	r2, #16
   24838:	d00d      	beq.n	24856 <bt_uuid_create+0x26>
   2483a:	2a02      	cmp	r2, #2
   2483c:	f04f 0300 	mov.w	r3, #0
   24840:	d10f      	bne.n	24862 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   24842:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24844:	880b      	ldrh	r3, [r1, #0]
   24846:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24848:	2001      	movs	r0, #1
}
   2484a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2484c:	2301      	movs	r3, #1
   2484e:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24850:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24852:	6043      	str	r3, [r0, #4]
		break;
   24854:	e7f8      	b.n	24848 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   24856:	2302      	movs	r3, #2
   24858:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2485c:	f7ff ff47 	bl	246ee <memcpy>
		break;
   24860:	e7f2      	b.n	24848 <bt_uuid_create+0x18>
	switch (data_len) {
   24862:	4618      	mov	r0, r3
   24864:	e7f1      	b.n	2484a <bt_uuid_create+0x1a>

00024866 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   24866:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   24868:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2486a:	2106      	movs	r1, #6
{
   2486c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2486e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24872:	f7f9 fed3 	bl	1e61c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   24876:	b918      	cbnz	r0, 24880 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   24878:	79a3      	ldrb	r3, [r4, #6]
   2487a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2487e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24880:	bd10      	pop	{r4, pc}

00024882 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24882:	280f      	cmp	r0, #15
   24884:	d807      	bhi.n	24896 <bt_hci_evt_get_flags+0x14>
   24886:	280d      	cmp	r0, #13
   24888:	d80b      	bhi.n	248a2 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2488a:	2805      	cmp	r0, #5
   2488c:	bf08      	it	eq
   2488e:	2003      	moveq	r0, #3
   24890:	bf18      	it	ne
   24892:	2002      	movne	r0, #2
   24894:	4770      	bx	lr
	switch (evt) {
   24896:	2813      	cmp	r0, #19
   24898:	d003      	beq.n	248a2 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2489a:	281a      	cmp	r0, #26
   2489c:	bf08      	it	eq
   2489e:	2001      	moveq	r0, #1
   248a0:	e7f6      	b.n	24890 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   248a2:	2001      	movs	r0, #1
	}
}
   248a4:	4770      	bx	lr

000248a6 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   248a6:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   248aa:	b183      	cbz	r3, 248ce <update_sec_level+0x28>
   248ac:	7b5a      	ldrb	r2, [r3, #13]
   248ae:	07d1      	lsls	r1, r2, #31
   248b0:	d50d      	bpl.n	248ce <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   248b2:	06d2      	lsls	r2, r2, #27
   248b4:	d50d      	bpl.n	248d2 <update_sec_level+0x2c>
   248b6:	7b1b      	ldrb	r3, [r3, #12]
   248b8:	2b10      	cmp	r3, #16
   248ba:	bf14      	ite	ne
   248bc:	2303      	movne	r3, #3
   248be:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   248c0:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   248c2:	7a80      	ldrb	r0, [r0, #10]
}
   248c4:	4298      	cmp	r0, r3
   248c6:	bf8c      	ite	hi
   248c8:	2000      	movhi	r0, #0
   248ca:	2001      	movls	r0, #1
   248cc:	4770      	bx	lr
   248ce:	2302      	movs	r3, #2
   248d0:	e7f6      	b.n	248c0 <update_sec_level+0x1a>
   248d2:	2303      	movs	r3, #3
   248d4:	e7f4      	b.n	248c0 <update_sec_level+0x1a>

000248d6 <hci_vendor_event>:
}
   248d6:	4770      	bx	lr

000248d8 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   248d8:	2207      	movs	r2, #7
   248da:	f7ff bf08 	b.w	246ee <memcpy>

000248de <atomic_or>:
{
   248de:	b510      	push	{r4, lr}
   248e0:	4603      	mov	r3, r0
}
   248e2:	f3bf 8f5b 	dmb	ish
   248e6:	e853 0f00 	ldrex	r0, [r3]
   248ea:	ea40 0201 	orr.w	r2, r0, r1
   248ee:	e843 2400 	strex	r4, r2, [r3]
   248f2:	2c00      	cmp	r4, #0
   248f4:	d1f7      	bne.n	248e6 <atomic_or+0x8>
   248f6:	f3bf 8f5b 	dmb	ish
   248fa:	bd10      	pop	{r4, pc}

000248fc <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   248fc:	f3bf 8f5b 	dmb	ish
   24900:	e850 3f00 	ldrex	r3, [r0]
   24904:	400b      	ands	r3, r1
   24906:	e840 3200 	strex	r2, r3, [r0]
   2490a:	2a00      	cmp	r2, #0
   2490c:	d1f8      	bne.n	24900 <atomic_and.isra.0+0x4>
   2490e:	f3bf 8f5b 	dmb	ish
}
   24912:	4770      	bx	lr

00024914 <sys_put_le64>:
	dst[1] = val >> 8;
   24914:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24918:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2491a:	0e00      	lsrs	r0, r0, #24
   2491c:	7053      	strb	r3, [r2, #1]
   2491e:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   24920:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   24922:	f3c1 2007 	ubfx	r0, r1, #8, #8
   24926:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   24928:	7093      	strb	r3, [r2, #2]
   2492a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2492c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2492e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   24930:	71d1      	strb	r1, [r2, #7]
}
   24932:	4770      	bx	lr

00024934 <bt_hci_disconnect>:
{
   24934:	b570      	push	{r4, r5, r6, lr}
   24936:	4606      	mov	r6, r0
   24938:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2493a:	f240 4006 	movw	r0, #1030	; 0x406
   2493e:	2103      	movs	r1, #3
   24940:	f7ef fd7e 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   24944:	4604      	mov	r4, r0
   24946:	b168      	cbz	r0, 24964 <bt_hci_disconnect+0x30>
   24948:	2103      	movs	r1, #3
   2494a:	3008      	adds	r0, #8
   2494c:	f7f7 f8fe 	bl	1bb4c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   24950:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   24952:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24954:	4621      	mov	r1, r4
   24956:	2200      	movs	r2, #0
}
   24958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2495c:	f240 4006 	movw	r0, #1030	; 0x406
   24960:	f7ef bdb8 	b.w	144d4 <bt_hci_cmd_send_sync>
}
   24964:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24968:	bd70      	pop	{r4, r5, r6, pc}

0002496a <bt_le_set_data_len>:
{
   2496a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2496c:	4607      	mov	r7, r0
   2496e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24970:	f242 0022 	movw	r0, #8226	; 0x2022
   24974:	2106      	movs	r1, #6
{
   24976:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24978:	f7ef fd62 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   2497c:	4604      	mov	r4, r0
   2497e:	b178      	cbz	r0, 249a0 <bt_le_set_data_len+0x36>
   24980:	2106      	movs	r1, #6
   24982:	3008      	adds	r0, #8
   24984:	f7f7 f8e2 	bl	1bb4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24988:	883b      	ldrh	r3, [r7, #0]
   2498a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2498c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2498e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24990:	4621      	mov	r1, r4
   24992:	2200      	movs	r2, #0
}
   24994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24998:	f242 0022 	movw	r0, #8226	; 0x2022
   2499c:	f7ef bd9a 	b.w	144d4 <bt_hci_cmd_send_sync>
}
   249a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   249a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000249a6 <bt_le_set_phy>:
{
   249a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   249aa:	4681      	mov	r9, r0
   249ac:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   249ae:	f242 0032 	movw	r0, #8242	; 0x2032
   249b2:	2107      	movs	r1, #7
{
   249b4:	f89d a020 	ldrb.w	sl, [sp, #32]
   249b8:	4617      	mov	r7, r2
   249ba:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   249bc:	f7ef fd40 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   249c0:	4605      	mov	r5, r0
   249c2:	b1a0      	cbz	r0, 249ee <bt_le_set_phy+0x48>
   249c4:	2107      	movs	r1, #7
   249c6:	3008      	adds	r0, #8
   249c8:	f7f7 f8c0 	bl	1bb4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   249cc:	f8b9 3000 	ldrh.w	r3, [r9]
   249d0:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   249d2:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   249d6:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   249d8:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   249da:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   249de:	4629      	mov	r1, r5
   249e0:	2200      	movs	r2, #0
}
   249e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   249e6:	f242 0032 	movw	r0, #8242	; 0x2032
   249ea:	f7ef bd73 	b.w	144d4 <bt_hci_cmd_send_sync>
}
   249ee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   249f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000249f6 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   249f6:	6880      	ldr	r0, [r0, #8]
   249f8:	f7ef be18 	b.w	1462c <bt_hci_le_enh_conn_complete>

000249fc <bt_le_conn_params_valid>:
{
   249fc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   249fe:	8803      	ldrh	r3, [r0, #0]
   24a00:	8842      	ldrh	r2, [r0, #2]
   24a02:	4293      	cmp	r3, r2
   24a04:	d819      	bhi.n	24a3a <bt_le_conn_params_valid+0x3e>
   24a06:	2b05      	cmp	r3, #5
   24a08:	d917      	bls.n	24a3a <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24a0a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   24a0e:	d814      	bhi.n	24a3a <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   24a10:	8883      	ldrh	r3, [r0, #4]
   24a12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   24a16:	d210      	bcs.n	24a3a <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24a18:	88c0      	ldrh	r0, [r0, #6]
   24a1a:	f1a0 010a 	sub.w	r1, r0, #10
   24a1e:	b289      	uxth	r1, r1
   24a20:	f640 4476 	movw	r4, #3190	; 0xc76
   24a24:	42a1      	cmp	r1, r4
   24a26:	d808      	bhi.n	24a3a <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24a28:	3301      	adds	r3, #1
   24a2a:	b29b      	uxth	r3, r3
   24a2c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   24a2e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   24a32:	bf34      	ite	cc
   24a34:	2001      	movcc	r0, #1
   24a36:	2000      	movcs	r0, #0
}
   24a38:	bd10      	pop	{r4, pc}
		return false;
   24a3a:	2000      	movs	r0, #0
   24a3c:	e7fc      	b.n	24a38 <bt_le_conn_params_valid+0x3c>

00024a3e <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   24a3e:	2000      	movs	r0, #0
   24a40:	4770      	bx	lr

00024a42 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   24a42:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   24a44:	f7f6 fbfc 	bl	1b240 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   24a48:	b118      	cbz	r0, 24a52 <bt_addr_le_is_bonded+0x10>
   24a4a:	89c0      	ldrh	r0, [r0, #14]
   24a4c:	3800      	subs	r0, #0
   24a4e:	bf18      	it	ne
   24a50:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   24a52:	bd08      	pop	{r3, pc}

00024a54 <bt_addr_le_eq>:
{
   24a54:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   24a56:	2207      	movs	r2, #7
   24a58:	f7ff fe39 	bl	246ce <memcmp>
}
   24a5c:	fab0 f080 	clz	r0, r0
   24a60:	0940      	lsrs	r0, r0, #5
   24a62:	bd08      	pop	{r3, pc}

00024a64 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24a64:	2207      	movs	r2, #7
   24a66:	f7ff be42 	b.w	246ee <memcpy>

00024a6a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24a6a:	f3bf 8f5b 	dmb	ish
   24a6e:	6800      	ldr	r0, [r0, #0]
   24a70:	f3bf 8f5b 	dmb	ish
}
   24a74:	4770      	bx	lr

00024a76 <hci_id_add>:
{
   24a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a7a:	4688      	mov	r8, r1
   24a7c:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   24a7e:	4605      	mov	r5, r0
   24a80:	bb08      	cbnz	r0, 24ac6 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   24a82:	2127      	movs	r1, #39	; 0x27
   24a84:	f242 0027 	movw	r0, #8231	; 0x2027
   24a88:	f7ef fcda 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   24a8c:	4604      	mov	r4, r0
   24a8e:	b1f0      	cbz	r0, 24ace <hci_id_add+0x58>
   24a90:	2127      	movs	r1, #39	; 0x27
   24a92:	3008      	adds	r0, #8
   24a94:	f7f7 f85a 	bl	1bb4c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   24a98:	4641      	mov	r1, r8
   24a9a:	4606      	mov	r6, r0
   24a9c:	f7ff ffe2 	bl	24a64 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   24aa0:	4639      	mov	r1, r7
   24aa2:	2210      	movs	r2, #16
   24aa4:	1df0      	adds	r0, r6, #7
   24aa6:	f7ff fe22 	bl	246ee <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   24aaa:	4629      	mov	r1, r5
   24aac:	2210      	movs	r2, #16
   24aae:	f106 0017 	add.w	r0, r6, #23
   24ab2:	f7ff fe27 	bl	24704 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   24ab6:	462a      	mov	r2, r5
   24ab8:	4621      	mov	r1, r4
   24aba:	f242 0027 	movw	r0, #8231	; 0x2027
}
   24abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   24ac2:	f7ef bd07 	b.w	144d4 <bt_hci_cmd_send_sync>
		return -EINVAL;
   24ac6:	f06f 0015 	mvn.w	r0, #21
}
   24aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   24ace:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24ad2:	e7fa      	b.n	24aca <hci_id_add+0x54>

00024ad4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   24ad4:	7a03      	ldrb	r3, [r0, #8]
   24ad6:	075b      	lsls	r3, r3, #29
{
   24ad8:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   24ada:	d505      	bpl.n	24ae8 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   24adc:	4601      	mov	r1, r0
   24ade:	322a      	adds	r2, #42	; 0x2a
   24ae0:	f811 0b01 	ldrb.w	r0, [r1], #1
   24ae4:	f7ff bfc7 	b.w	24a76 <hci_id_add>
}
   24ae8:	4770      	bx	lr

00024aea <addr_res_enable>:
{
   24aea:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24aec:	2101      	movs	r1, #1
{
   24aee:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24af0:	f242 002d 	movw	r0, #8237	; 0x202d
   24af4:	f7ef fca4 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   24af8:	4604      	mov	r4, r0
   24afa:	b158      	cbz	r0, 24b14 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   24afc:	4629      	mov	r1, r5
   24afe:	3008      	adds	r0, #8
   24b00:	f001 fd38 	bl	26574 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24b04:	4621      	mov	r1, r4
   24b06:	2200      	movs	r2, #0
}
   24b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24b0c:	f242 002d 	movw	r0, #8237	; 0x202d
   24b10:	f7ef bce0 	b.w	144d4 <bt_hci_cmd_send_sync>
}
   24b14:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24b18:	bd38      	pop	{r3, r4, r5, pc}

00024b1a <adv_unpause_enabled>:
{
   24b1a:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24b1c:	f100 0310 	add.w	r3, r0, #16
   24b20:	f3bf 8f5b 	dmb	ish
   24b24:	e853 2f00 	ldrex	r2, [r3]
   24b28:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   24b2c:	e843 1400 	strex	r4, r1, [r3]
   24b30:	2c00      	cmp	r4, #0
   24b32:	d1f7      	bne.n	24b24 <adv_unpause_enabled+0xa>
   24b34:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   24b38:	0413      	lsls	r3, r2, #16
   24b3a:	d503      	bpl.n	24b44 <adv_unpause_enabled+0x2a>
}
   24b3c:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   24b3e:	2101      	movs	r1, #1
   24b40:	f000 b946 	b.w	24dd0 <bt_le_adv_set_enable>
}
   24b44:	bc10      	pop	{r4}
   24b46:	4770      	bx	lr

00024b48 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   24b48:	f100 0210 	add.w	r2, r0, #16
{
   24b4c:	b508      	push	{r3, lr}
   24b4e:	4603      	mov	r3, r0
   24b50:	4610      	mov	r0, r2
   24b52:	f7ff ff8a 	bl	24a6a <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   24b56:	0601      	lsls	r1, r0, #24
   24b58:	d511      	bpl.n	24b7e <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24b5a:	f3bf 8f5b 	dmb	ish
   24b5e:	e852 0f00 	ldrex	r0, [r2]
   24b62:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   24b66:	e842 0100 	strex	r1, r0, [r2]
   24b6a:	2900      	cmp	r1, #0
   24b6c:	d1f7      	bne.n	24b5e <adv_pause_enabled+0x16>
   24b6e:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   24b72:	4618      	mov	r0, r3
   24b74:	2100      	movs	r1, #0
}
   24b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   24b7a:	f000 b929 	b.w	24dd0 <bt_le_adv_set_enable>
}
   24b7e:	bd08      	pop	{r3, pc}

00024b80 <bt_lookup_id_addr>:
{
   24b80:	b510      	push	{r4, lr}
   24b82:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   24b84:	b930      	cbnz	r0, 24b94 <bt_lookup_id_addr+0x14>
   24b86:	b119      	cbz	r1, 24b90 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   24b88:	f7f6 fb08 	bl	1b19c <bt_keys_find_irk>
		if (keys) {
   24b8c:	b100      	cbz	r0, 24b90 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   24b8e:	1c44      	adds	r4, r0, #1
}
   24b90:	4620      	mov	r0, r4
   24b92:	bd10      	pop	{r4, pc}
		return NULL;
   24b94:	2400      	movs	r4, #0
   24b96:	e7fb      	b.n	24b90 <bt_lookup_id_addr+0x10>

00024b98 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   24b98:	b118      	cbz	r0, 24ba2 <bt_id_set_adv_random_addr+0xa>
   24b9a:	b111      	cbz	r1, 24ba2 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   24b9c:	4608      	mov	r0, r1
   24b9e:	f7f0 ba61 	b.w	15064 <set_random_address>
}
   24ba2:	f06f 0015 	mvn.w	r0, #21
   24ba6:	4770      	bx	lr

00024ba8 <bt_id_set_adv_private_addr>:
{
   24ba8:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   24baa:	4604      	mov	r4, r0
   24bac:	b180      	cbz	r0, 24bd0 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   24bae:	2106      	movs	r1, #6
   24bb0:	4668      	mov	r0, sp
   24bb2:	f7f9 fd33 	bl	1e61c <bt_rand>
	if (err) {
   24bb6:	b948      	cbnz	r0, 24bcc <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   24bb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24bbc:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   24bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24bc2:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   24bc4:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24bc8:	f7ff ffe6 	bl	24b98 <bt_id_set_adv_random_addr>
}
   24bcc:	b002      	add	sp, #8
   24bce:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24bd0:	f06f 0015 	mvn.w	r0, #21
   24bd4:	e7fa      	b.n	24bcc <bt_id_set_adv_private_addr+0x24>

00024bd6 <bt_id_adv_random_addr_check>:
}
   24bd6:	3800      	subs	r0, #0
   24bd8:	bf18      	it	ne
   24bda:	2001      	movne	r0, #1
   24bdc:	4770      	bx	lr

00024bde <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   24bde:	7a03      	ldrb	r3, [r0, #8]
   24be0:	07d9      	lsls	r1, r3, #31
   24be2:	d504      	bpl.n	24bee <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   24be4:	f023 0301 	bic.w	r3, r3, #1
   24be8:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   24bea:	f7f0 baef 	b.w	151cc <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   24bee:	0799      	lsls	r1, r3, #30
   24bf0:	d504      	bpl.n	24bfc <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   24bf2:	f023 0302 	bic.w	r3, r3, #2
   24bf6:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   24bf8:	f7f0 bb9c 	b.w	15334 <bt_id_del>
}
   24bfc:	4770      	bx	lr

00024bfe <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   24bfe:	2000      	movs	r0, #0
   24c00:	4770      	bx	lr

00024c02 <get_adv_channel_map>:
{
   24c02:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24c04:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24c08:	bf0c      	ite	eq
   24c0a:	2007      	moveq	r0, #7
   24c0c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24c0e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24c10:	bf48      	it	mi
   24c12:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24c16:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24c18:	bf48      	it	mi
   24c1a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24c1e:	4770      	bx	lr

00024c20 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24c20:	f3bf 8f5b 	dmb	ish
   24c24:	6800      	ldr	r0, [r0, #0]
   24c26:	f3bf 8f5b 	dmb	ish
}
   24c2a:	4770      	bx	lr

00024c2c <atomic_and>:
{
   24c2c:	b510      	push	{r4, lr}
   24c2e:	4603      	mov	r3, r0
}
   24c30:	f3bf 8f5b 	dmb	ish
   24c34:	e853 0f00 	ldrex	r0, [r3]
   24c38:	ea00 0201 	and.w	r2, r0, r1
   24c3c:	e843 2400 	strex	r4, r2, [r3]
   24c40:	2c00      	cmp	r4, #0
   24c42:	d1f7      	bne.n	24c34 <atomic_and+0x8>
   24c44:	f3bf 8f5b 	dmb	ish
   24c48:	bd10      	pop	{r4, pc}

00024c4a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24c4a:	2301      	movs	r3, #1
{
   24c4c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24c4e:	fa03 f101 	lsl.w	r1, r3, r1
{
   24c52:	4604      	mov	r4, r0
	if (val) {
   24c54:	b162      	cbz	r2, 24c70 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24c56:	f3bf 8f5b 	dmb	ish
   24c5a:	e854 3f00 	ldrex	r3, [r4]
   24c5e:	430b      	orrs	r3, r1
   24c60:	e844 3200 	strex	r2, r3, [r4]
   24c64:	2a00      	cmp	r2, #0
   24c66:	d1f8      	bne.n	24c5a <atomic_set_bit_to+0x10>
   24c68:	f3bf 8f5b 	dmb	ish
	}
}
   24c6c:	bc10      	pop	{r4}
   24c6e:	4770      	bx	lr
   24c70:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24c72:	43c9      	mvns	r1, r1
   24c74:	f7ff bfda 	b.w	24c2c <atomic_and>

00024c78 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   24c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c7c:	b087      	sub	sp, #28
   24c7e:	4605      	mov	r5, r0
   24c80:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   24c84:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   24c88:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   24c8c:	460c      	mov	r4, r1
   24c8e:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   24c90:	2100      	movs	r1, #0
   24c92:	2210      	movs	r2, #16
   24c94:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   24c96:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   24c98:	f7ff fd34 	bl	24704 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   24c9c:	b9ee      	cbnz	r6, 24cda <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   24c9e:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   24ca2:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   24ca4:	a902      	add	r1, sp, #8
   24ca6:	f242 0008 	movw	r0, #8200	; 0x2008
   24caa:	f7f0 fd47 	bl	1573c <hci_set_ad>
		if (err) {
   24cae:	4604      	mov	r4, r0
   24cb0:	b978      	cbnz	r0, 24cd2 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   24cb2:	f1ba 0f00 	cmp.w	sl, #0
   24cb6:	d13e      	bne.n	24d36 <le_adv_update.constprop.0+0xbe>
   24cb8:	3510      	adds	r5, #16
   24cba:	f3bf 8f5b 	dmb	ish
   24cbe:	e855 3f00 	ldrex	r3, [r5]
   24cc2:	f043 0304 	orr.w	r3, r3, #4
   24cc6:	e845 3200 	strex	r2, r3, [r5]
   24cca:	2a00      	cmp	r2, #0
   24ccc:	d1f7      	bne.n	24cbe <le_adv_update.constprop.0+0x46>
   24cce:	f3bf 8f5b 	dmb	ish
}
   24cd2:	4620      	mov	r0, r4
   24cd4:	b007      	add	sp, #28
   24cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   24cda:	f7f0 f96f 	bl	14fbc <bt_get_name>
   24cde:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   24ce0:	b9e4      	cbnz	r4, 24d1c <le_adv_update.constprop.0+0xa4>
   24ce2:	bb37      	cbnz	r7, 24d32 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   24ce4:	4658      	mov	r0, fp
   24ce6:	f7ff fcc2 	bl	2466e <strlen>
   24cea:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   24cec:	2e01      	cmp	r6, #1
		d[0].data = ad;
   24cee:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   24cf2:	f88d 3000 	strb.w	r3, [sp]
   24cf6:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   24cfa:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   24cfe:	d1d0      	bne.n	24ca2 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   24d00:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   24d04:	9605      	str	r6, [sp, #20]
			d_len = 2;
   24d06:	2202      	movs	r2, #2
   24d08:	e7cc      	b.n	24ca4 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24d0a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   24d0e:	3a08      	subs	r2, #8
   24d10:	2a01      	cmp	r2, #1
   24d12:	d925      	bls.n	24d60 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24d14:	3301      	adds	r3, #1
   24d16:	4598      	cmp	r8, r3
   24d18:	d1f7      	bne.n	24d0a <le_adv_update.constprop.0+0x92>
   24d1a:	e7e2      	b.n	24ce2 <le_adv_update.constprop.0+0x6a>
   24d1c:	2300      	movs	r3, #0
   24d1e:	e7fa      	b.n	24d16 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24d20:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   24d24:	3a08      	subs	r2, #8
   24d26:	2a01      	cmp	r2, #1
   24d28:	d91a      	bls.n	24d60 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24d2a:	3301      	adds	r3, #1
   24d2c:	4599      	cmp	r9, r3
   24d2e:	d1f7      	bne.n	24d20 <le_adv_update.constprop.0+0xa8>
   24d30:	e7d8      	b.n	24ce4 <le_adv_update.constprop.0+0x6c>
   24d32:	2300      	movs	r3, #0
   24d34:	e7fa      	b.n	24d2c <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   24d36:	2e02      	cmp	r6, #2
   24d38:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   24d3c:	bf08      	it	eq
   24d3e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24d40:	a902      	add	r1, sp, #8
			d_len = 2;
   24d42:	bf08      	it	eq
   24d44:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24d46:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   24d4a:	bf08      	it	eq
   24d4c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   24d50:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24d54:	f7f0 fcf2 	bl	1573c <hci_set_ad>
		if (err) {
   24d58:	2800      	cmp	r0, #0
   24d5a:	d0ad      	beq.n	24cb8 <le_adv_update.constprop.0+0x40>
   24d5c:	4604      	mov	r4, r0
   24d5e:	e7b8      	b.n	24cd2 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   24d60:	f06f 0415 	mvn.w	r4, #21
   24d64:	e7b5      	b.n	24cd2 <le_adv_update.constprop.0+0x5a>

00024d66 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   24d66:	6843      	ldr	r3, [r0, #4]
   24d68:	f013 0008 	ands.w	r0, r3, #8
   24d6c:	d00a      	beq.n	24d84 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   24d6e:	035a      	lsls	r2, r3, #13
   24d70:	d407      	bmi.n	24d82 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   24d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   24d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24d7a:	bf14      	ite	ne
   24d7c:	2002      	movne	r0, #2
   24d7e:	2001      	moveq	r0, #1
   24d80:	4770      	bx	lr
   24d82:	2001      	movs	r0, #1
}
   24d84:	4770      	bx	lr

00024d86 <bt_le_adv_set_enable_legacy>:
{
   24d86:	b570      	push	{r4, r5, r6, lr}
   24d88:	4606      	mov	r6, r0
   24d8a:	b086      	sub	sp, #24
   24d8c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   24d8e:	f242 000a 	movw	r0, #8202	; 0x200a
   24d92:	2101      	movs	r1, #1
   24d94:	f7ef fb54 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   24d98:	4604      	mov	r4, r0
   24d9a:	b1b0      	cbz	r0, 24dca <bt_le_adv_set_enable_legacy+0x44>
   24d9c:	3008      	adds	r0, #8
	if (enable) {
   24d9e:	b195      	cbz	r5, 24dc6 <bt_le_adv_set_enable_legacy+0x40>
   24da0:	2101      	movs	r1, #1
   24da2:	f001 fbe7 	bl	26574 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   24da6:	f106 0210 	add.w	r2, r6, #16
   24daa:	a903      	add	r1, sp, #12
   24dac:	4620      	mov	r0, r4
   24dae:	9500      	str	r5, [sp, #0]
   24db0:	2307      	movs	r3, #7
   24db2:	f7ef fb33 	bl	1441c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   24db6:	2200      	movs	r2, #0
   24db8:	4621      	mov	r1, r4
   24dba:	f242 000a 	movw	r0, #8202	; 0x200a
   24dbe:	f7ef fb89 	bl	144d4 <bt_hci_cmd_send_sync>
}
   24dc2:	b006      	add	sp, #24
   24dc4:	bd70      	pop	{r4, r5, r6, pc}
   24dc6:	4629      	mov	r1, r5
   24dc8:	e7eb      	b.n	24da2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   24dca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24dce:	e7f8      	b.n	24dc2 <bt_le_adv_set_enable_legacy+0x3c>

00024dd0 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   24dd0:	f7ff bfd9 	b.w	24d86 <bt_le_adv_set_enable_legacy>

00024dd4 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   24dd4:	3018      	adds	r0, #24
   24dd6:	f7fc b911 	b.w	20ffc <k_work_cancel_delayable>

00024dda <sys_slist_find_and_remove>:
	return list->head;
   24dda:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24ddc:	2200      	movs	r2, #0
   24dde:	b90b      	cbnz	r3, 24de4 <sys_slist_find_and_remove+0xa>
   24de0:	4618      	mov	r0, r3
   24de2:	4770      	bx	lr
   24de4:	428b      	cmp	r3, r1
   24de6:	d110      	bne.n	24e0a <sys_slist_find_and_remove+0x30>
	return node->next;
   24de8:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   24dea:	b942      	cbnz	r2, 24dfe <sys_slist_find_and_remove+0x24>
   24dec:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   24dee:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24df0:	4291      	cmp	r1, r2
   24df2:	d100      	bne.n	24df6 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   24df4:	6043      	str	r3, [r0, #4]
	parent->next = child;
   24df6:	2300      	movs	r3, #0
   24df8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24dfa:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   24dfc:	4770      	bx	lr
	parent->next = child;
   24dfe:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24e00:	6843      	ldr	r3, [r0, #4]
   24e02:	4299      	cmp	r1, r3
	list->tail = node;
   24e04:	bf08      	it	eq
   24e06:	6042      	streq	r2, [r0, #4]
}
   24e08:	e7f5      	b.n	24df6 <sys_slist_find_and_remove+0x1c>
	return node->next;
   24e0a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24e0c:	681b      	ldr	r3, [r3, #0]
   24e0e:	e7e6      	b.n	24dde <sys_slist_find_and_remove+0x4>

00024e10 <atomic_and>:
{
   24e10:	b510      	push	{r4, lr}
   24e12:	4603      	mov	r3, r0
}
   24e14:	f3bf 8f5b 	dmb	ish
   24e18:	e853 0f00 	ldrex	r0, [r3]
   24e1c:	ea00 0201 	and.w	r2, r0, r1
   24e20:	e843 2400 	strex	r4, r2, [r3]
   24e24:	2c00      	cmp	r4, #0
   24e26:	d1f7      	bne.n	24e18 <atomic_and+0x8>
   24e28:	f3bf 8f5b 	dmb	ish
   24e2c:	bd10      	pop	{r4, pc}

00024e2e <tx_complete_work>:
	tx_notify(conn);
   24e2e:	3828      	subs	r0, #40	; 0x28
   24e30:	f7f1 b8c2 	b.w	15fb8 <tx_notify>

00024e34 <bt_conn_reset_rx_state>:
{
   24e34:	b510      	push	{r4, lr}
   24e36:	4604      	mov	r4, r0
	if (!conn->rx) {
   24e38:	6900      	ldr	r0, [r0, #16]
   24e3a:	b118      	cbz	r0, 24e44 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24e3c:	f7f6 fd80 	bl	1b940 <net_buf_unref>
	conn->rx = NULL;
   24e40:	2300      	movs	r3, #0
   24e42:	6123      	str	r3, [r4, #16]
}
   24e44:	bd10      	pop	{r4, pc}

00024e46 <conn_lookup_handle>:
{
   24e46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24e4a:	4607      	mov	r7, r0
   24e4c:	460e      	mov	r6, r1
   24e4e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24e50:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24e52:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   24e56:	42b4      	cmp	r4, r6
   24e58:	d103      	bne.n	24e62 <conn_lookup_handle+0x1c>
	return NULL;
   24e5a:	2300      	movs	r3, #0
}
   24e5c:	4618      	mov	r0, r3
   24e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24e62:	fb09 7004 	mla	r0, r9, r4, r7
   24e66:	f7f1 fb0b 	bl	16480 <bt_conn_ref>
   24e6a:	4603      	mov	r3, r0
		if (!conn) {
   24e6c:	b158      	cbz	r0, 24e86 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24e6e:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24e70:	2d01      	cmp	r5, #1
   24e72:	d002      	beq.n	24e7a <conn_lookup_handle+0x34>
   24e74:	3d07      	subs	r5, #7
   24e76:	2d01      	cmp	r5, #1
   24e78:	d803      	bhi.n	24e82 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   24e7a:	881a      	ldrh	r2, [r3, #0]
   24e7c:	4542      	cmp	r2, r8
   24e7e:	d0ed      	beq.n	24e5c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24e80:	4618      	mov	r0, r3
   24e82:	f7f1 fb29 	bl	164d8 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24e86:	3401      	adds	r4, #1
   24e88:	e7e5      	b.n	24e56 <conn_lookup_handle+0x10>

00024e8a <bt_conn_connected>:
{
   24e8a:	b510      	push	{r4, lr}
   24e8c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   24e8e:	f7f1 ffd1 	bl	16e34 <bt_l2cap_connected>
	notify_connected(conn);
   24e92:	4620      	mov	r0, r4
}
   24e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   24e98:	f7f1 b860 	b.w	15f5c <notify_connected>

00024e9c <bt_conn_disconnect>:
{
   24e9c:	b510      	push	{r4, lr}
	switch (conn->state) {
   24e9e:	7b43      	ldrb	r3, [r0, #13]
   24ea0:	3b02      	subs	r3, #2
{
   24ea2:	4604      	mov	r4, r0
	switch (conn->state) {
   24ea4:	2b06      	cmp	r3, #6
   24ea6:	d816      	bhi.n	24ed6 <bt_conn_disconnect+0x3a>
   24ea8:	e8df f003 	tbb	[pc, r3]
   24eac:	15151504 	.word	0x15151504
   24eb0:	0b09      	.short	0x0b09
   24eb2:	09          	.byte	0x09
   24eb3:	00          	.byte	0x00
		conn->err = reason;
   24eb4:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   24eb6:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   24eb8:	4620      	mov	r0, r4
   24eba:	f7f1 fb45 	bl	16548 <bt_conn_set_state>
{
   24ebe:	2000      	movs	r0, #0
}
   24ec0:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   24ec2:	8800      	ldrh	r0, [r0, #0]
   24ec4:	f7ff fd36 	bl	24934 <bt_hci_disconnect>
	if (err) {
   24ec8:	2800      	cmp	r0, #0
   24eca:	d1f9      	bne.n	24ec0 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   24ecc:	7b63      	ldrb	r3, [r4, #13]
   24ece:	2b07      	cmp	r3, #7
   24ed0:	d1f5      	bne.n	24ebe <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   24ed2:	2108      	movs	r1, #8
   24ed4:	e7f0      	b.n	24eb8 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   24ed6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   24eda:	e7f1      	b.n	24ec0 <bt_conn_disconnect+0x24>

00024edc <bt_conn_set_security>:
{
   24edc:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   24ede:	7b43      	ldrb	r3, [r0, #13]
   24ee0:	2b07      	cmp	r3, #7
{
   24ee2:	4604      	mov	r4, r0
   24ee4:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   24ee6:	d126      	bne.n	24f36 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   24ee8:	7a43      	ldrb	r3, [r0, #9]
   24eea:	428b      	cmp	r3, r1
   24eec:	d219      	bcs.n	24f22 <bt_conn_set_security+0x46>
   24eee:	7a83      	ldrb	r3, [r0, #10]
   24ef0:	428b      	cmp	r3, r1
   24ef2:	d216      	bcs.n	24f22 <bt_conn_set_security+0x46>
	if (val) {
   24ef4:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   24ef6:	f100 0004 	add.w	r0, r0, #4
   24efa:	d514      	bpl.n	24f26 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24efc:	f3bf 8f5b 	dmb	ish
   24f00:	e850 3f00 	ldrex	r3, [r0]
   24f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   24f08:	e840 3200 	strex	r2, r3, [r0]
   24f0c:	2a00      	cmp	r2, #0
   24f0e:	d1f7      	bne.n	24f00 <bt_conn_set_security+0x24>
   24f10:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   24f14:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   24f18:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   24f1a:	4620      	mov	r0, r4
   24f1c:	f7f5 fb60 	bl	1a5e0 <bt_smp_start_security>
	if (err) {
   24f20:	b930      	cbnz	r0, 24f30 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   24f22:	2000      	movs	r0, #0
}
   24f24:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24f26:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   24f2a:	f7ff ff71 	bl	24e10 <atomic_and>
   24f2e:	e7f1      	b.n	24f14 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   24f30:	7a63      	ldrb	r3, [r4, #9]
   24f32:	72a3      	strb	r3, [r4, #10]
   24f34:	e7f6      	b.n	24f24 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   24f36:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   24f3a:	e7f3      	b.n	24f24 <bt_conn_set_security+0x48>

00024f3c <bt_conn_get_security>:
}
   24f3c:	7a40      	ldrb	r0, [r0, #9]
   24f3e:	4770      	bx	lr

00024f40 <bt_conn_is_peer_addr_le>:
{
   24f40:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24f42:	7a03      	ldrb	r3, [r0, #8]
   24f44:	428b      	cmp	r3, r1
{
   24f46:	4604      	mov	r4, r0
   24f48:	4615      	mov	r5, r2
	if (id != conn->id) {
   24f4a:	d115      	bne.n	24f78 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   24f4c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   24f50:	2207      	movs	r2, #7
   24f52:	4628      	mov	r0, r5
   24f54:	f7ff fbbb 	bl	246ce <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   24f58:	b180      	cbz	r0, 24f7c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   24f5a:	78e3      	ldrb	r3, [r4, #3]
   24f5c:	2207      	movs	r2, #7
   24f5e:	b943      	cbnz	r3, 24f72 <bt_conn_is_peer_addr_le+0x32>
   24f60:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   24f64:	4628      	mov	r0, r5
   24f66:	f7ff fbb2 	bl	246ce <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   24f6a:	fab0 f080 	clz	r0, r0
   24f6e:	0940      	lsrs	r0, r0, #5
}
   24f70:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   24f72:	f104 0197 	add.w	r1, r4, #151	; 0x97
   24f76:	e7f5      	b.n	24f64 <bt_conn_is_peer_addr_le+0x24>
		return false;
   24f78:	2000      	movs	r0, #0
   24f7a:	e7f9      	b.n	24f70 <bt_conn_is_peer_addr_le+0x30>
		return true;
   24f7c:	2001      	movs	r0, #1
   24f7e:	e7f7      	b.n	24f70 <bt_conn_is_peer_addr_le+0x30>

00024f80 <bt_conn_get_dst>:
}
   24f80:	3090      	adds	r0, #144	; 0x90
   24f82:	4770      	bx	lr

00024f84 <bt_conn_le_conn_update>:
{
   24f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f86:	4607      	mov	r7, r0
   24f88:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   24f8a:	f242 0013 	movw	r0, #8211	; 0x2013
   24f8e:	210e      	movs	r1, #14
   24f90:	f7ef fa56 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   24f94:	4606      	mov	r6, r0
   24f96:	b1d0      	cbz	r0, 24fce <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   24f98:	210e      	movs	r1, #14
   24f9a:	3008      	adds	r0, #8
   24f9c:	f7f6 fdd6 	bl	1bb4c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   24fa0:	220e      	movs	r2, #14
   24fa2:	4604      	mov	r4, r0
   24fa4:	2100      	movs	r1, #0
   24fa6:	f7ff fbad 	bl	24704 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   24faa:	883b      	ldrh	r3, [r7, #0]
   24fac:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24fae:	882b      	ldrh	r3, [r5, #0]
   24fb0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24fb2:	886b      	ldrh	r3, [r5, #2]
   24fb4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24fb6:	88ab      	ldrh	r3, [r5, #4]
   24fb8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   24fba:	88eb      	ldrh	r3, [r5, #6]
   24fbc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24fbe:	4631      	mov	r1, r6
   24fc0:	2200      	movs	r2, #0
}
   24fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24fc6:	f242 0013 	movw	r0, #8211	; 0x2013
   24fca:	f7ef ba83 	b.w	144d4 <bt_hci_cmd_send_sync>
}
   24fce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024fd4 <l2cap_connected>:
}
   24fd4:	4770      	bx	lr

00024fd6 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   24fd6:	4770      	bx	lr

00024fd8 <bt_l2cap_chan_del>:
{
   24fd8:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   24fda:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   24fde:	4604      	mov	r4, r0
	if (!chan->conn) {
   24fe0:	b123      	cbz	r3, 24fec <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24fe2:	686b      	ldr	r3, [r5, #4]
   24fe4:	b103      	cbz	r3, 24fe8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24fe6:	4798      	blx	r3
	chan->conn = NULL;
   24fe8:	2300      	movs	r3, #0
   24fea:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   24fec:	68e3      	ldr	r3, [r4, #12]
   24fee:	b10b      	cbz	r3, 24ff4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24ff0:	4620      	mov	r0, r4
   24ff2:	4798      	blx	r3
	if (ops->released) {
   24ff4:	6a2b      	ldr	r3, [r5, #32]
   24ff6:	b11b      	cbz	r3, 25000 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   24ff8:	4620      	mov	r0, r4
}
   24ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   24ffe:	4718      	bx	r3
}
   25000:	bd70      	pop	{r4, r5, r6, pc}

00025002 <bt_l2cap_disconnected>:
{
   25002:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   25004:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25006:	b130      	cbz	r0, 25016 <bt_l2cap_disconnected+0x14>
	return node->next;
   25008:	f850 4908 	ldr.w	r4, [r0], #-8
   2500c:	b104      	cbz	r4, 25010 <bt_l2cap_disconnected+0xe>
   2500e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   25010:	f7ff ffe2 	bl	24fd8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25014:	b904      	cbnz	r4, 25018 <bt_l2cap_disconnected+0x16>
}
   25016:	bd38      	pop	{r3, r4, r5, pc}
   25018:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2501a:	b12d      	cbz	r5, 25028 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2501c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2501e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   25020:	f7ff ffda 	bl	24fd8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25024:	462c      	mov	r4, r5
   25026:	e7f7      	b.n	25018 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   25028:	4620      	mov	r0, r4
}
   2502a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2502e:	f7ff bfd3 	b.w	24fd8 <bt_l2cap_chan_del>

00025032 <bt_l2cap_security_changed>:
{
   25032:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   25034:	6d43      	ldr	r3, [r0, #84]	; 0x54
   25036:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25038:	b1bb      	cbz	r3, 2506a <bt_l2cap_security_changed+0x38>
   2503a:	4618      	mov	r0, r3
	return node->next;
   2503c:	f850 4908 	ldr.w	r4, [r0], #-8
   25040:	b104      	cbz	r4, 25044 <bt_l2cap_security_changed+0x12>
   25042:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   25044:	f853 3c04 	ldr.w	r3, [r3, #-4]
   25048:	689b      	ldr	r3, [r3, #8]
   2504a:	b10b      	cbz	r3, 25050 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2504c:	4629      	mov	r1, r5
   2504e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25050:	b15c      	cbz	r4, 2506a <bt_l2cap_security_changed+0x38>
   25052:	4620      	mov	r0, r4
   25054:	68a4      	ldr	r4, [r4, #8]
   25056:	6843      	ldr	r3, [r0, #4]
   25058:	b124      	cbz	r4, 25064 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2505a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2505c:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2505e:	2b00      	cmp	r3, #0
   25060:	d1f4      	bne.n	2504c <bt_l2cap_security_changed+0x1a>
   25062:	e7f6      	b.n	25052 <bt_l2cap_security_changed+0x20>
   25064:	689b      	ldr	r3, [r3, #8]
   25066:	2b00      	cmp	r3, #0
   25068:	d1f0      	bne.n	2504c <bt_l2cap_security_changed+0x1a>
}
   2506a:	bd38      	pop	{r3, r4, r5, pc}

0002506c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2506c:	3104      	adds	r1, #4
   2506e:	f7f1 bb63 	b.w	16738 <bt_conn_create_pdu_timeout>

00025072 <bt_l2cap_send_cb>:
{
   25072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25076:	4614      	mov	r4, r2
   25078:	4605      	mov	r5, r0
   2507a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2507c:	f102 0008 	add.w	r0, r2, #8
   25080:	2104      	movs	r1, #4
   25082:	461e      	mov	r6, r3
   25084:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25088:	f7f6 fd10 	bl	1baac <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2508c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2508e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25090:	3a04      	subs	r2, #4
   25092:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25094:	4643      	mov	r3, r8
   25096:	4632      	mov	r2, r6
   25098:	4621      	mov	r1, r4
   2509a:	4628      	mov	r0, r5
}
   2509c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   250a0:	f7f1 b960 	b.w	16364 <bt_conn_send_cb>

000250a4 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   250a4:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   250a6:	b130      	cbz	r0, 250b6 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   250a8:	8b83      	ldrh	r3, [r0, #28]
   250aa:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   250ac:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   250b0:	d001      	beq.n	250b6 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   250b2:	6880      	ldr	r0, [r0, #8]
   250b4:	e7f7      	b.n	250a6 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   250b6:	4770      	bx	lr

000250b8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   250b8:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   250ba:	b130      	cbz	r0, 250ca <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   250bc:	8983      	ldrh	r3, [r0, #12]
   250be:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   250c0:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   250c4:	d001      	beq.n	250ca <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   250c6:	6880      	ldr	r0, [r0, #8]
   250c8:	e7f7      	b.n	250ba <bt_l2cap_le_lookup_rx_cid+0x2>
}
   250ca:	4770      	bx	lr

000250cc <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   250cc:	4770      	bx	lr

000250ce <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   250ce:	4603      	mov	r3, r0
	return list->head;
   250d0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   250d2:	b128      	cbz	r0, 250e0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   250d4:	6859      	ldr	r1, [r3, #4]
	return node->next;
   250d6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   250d8:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   250da:	4288      	cmp	r0, r1
	list->tail = node;
   250dc:	bf08      	it	eq
   250de:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   250e0:	4770      	bx	lr

000250e2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   250e2:	4603      	mov	r3, r0
	size_t bytes = 0;
   250e4:	2000      	movs	r0, #0

	while (buf) {
   250e6:	b903      	cbnz	r3, 250ea <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   250e8:	4770      	bx	lr
		bytes += buf->len;
   250ea:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   250ec:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   250ee:	4410      	add	r0, r2
		buf = buf->frags;
   250f0:	e7f9      	b.n	250e6 <net_buf_frags_len+0x4>

000250f2 <attr_read_type_cb>:
{
   250f2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   250f4:	68d4      	ldr	r4, [r2, #12]
   250f6:	7823      	ldrb	r3, [r4, #0]
   250f8:	3102      	adds	r1, #2
   250fa:	b913      	cbnz	r3, 25102 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   250fc:	7021      	strb	r1, [r4, #0]
	return true;
   250fe:	2001      	movs	r0, #1
}
   25100:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   25102:	428b      	cmp	r3, r1
   25104:	d0fb      	beq.n	250fe <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   25106:	8983      	ldrh	r3, [r0, #12]
   25108:	3b02      	subs	r3, #2
   2510a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2510c:	2000      	movs	r0, #0
   2510e:	6110      	str	r0, [r2, #16]
		return false;
   25110:	e7f6      	b.n	25100 <attr_read_type_cb+0xe>

00025112 <att_prepare_write_req>:
}
   25112:	2006      	movs	r0, #6
   25114:	4770      	bx	lr

00025116 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25116:	f3bf 8f5b 	dmb	ish
   2511a:	6800      	ldr	r0, [r0, #0]
   2511c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25120:	4108      	asrs	r0, r1
}
   25122:	f000 0001 	and.w	r0, r0, #1
   25126:	4770      	bx	lr

00025128 <write_cb>:
{
   25128:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2512a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2512c:	4601      	mov	r1, r0
{
   2512e:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25130:	f44f 7295 	mov.w	r2, #298	; 0x12a
   25134:	6820      	ldr	r0, [r4, #0]
   25136:	f000 fe1e 	bl	25d76 <bt_gatt_check_perm>
   2513a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2513c:	bb00      	cbnz	r0, 25180 <write_cb+0x58>
	if (!data->req) {
   2513e:	7a23      	ldrb	r3, [r4, #8]
   25140:	b1b3      	cbz	r3, 25170 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   25142:	f1a3 0218 	sub.w	r2, r3, #24
   25146:	4253      	negs	r3, r2
   25148:	4153      	adcs	r3, r2
   2514a:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2514c:	9301      	str	r3, [sp, #4]
   2514e:	8a63      	ldrh	r3, [r4, #18]
   25150:	9300      	str	r3, [sp, #0]
   25152:	68ae      	ldr	r6, [r5, #8]
   25154:	8a23      	ldrh	r3, [r4, #16]
   25156:	68e2      	ldr	r2, [r4, #12]
   25158:	6820      	ldr	r0, [r4, #0]
   2515a:	4629      	mov	r1, r5
   2515c:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2515e:	2800      	cmp	r0, #0
   25160:	db08      	blt.n	25174 <write_cb+0x4c>
   25162:	8a23      	ldrh	r3, [r4, #16]
   25164:	4298      	cmp	r0, r3
   25166:	d10e      	bne.n	25186 <write_cb+0x5e>
	data->err = 0U;
   25168:	2300      	movs	r3, #0
   2516a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2516c:	2001      	movs	r0, #1
   2516e:	e008      	b.n	25182 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   25170:	2302      	movs	r3, #2
   25172:	e7eb      	b.n	2514c <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   25174:	f110 0fff 	cmn.w	r0, #255	; 0xff
   25178:	d305      	bcc.n	25186 <write_cb+0x5e>
		return -err;
   2517a:	4240      	negs	r0, r0
   2517c:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2517e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   25180:	2000      	movs	r0, #0
}
   25182:	b002      	add	sp, #8
   25184:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   25186:	200e      	movs	r0, #14
   25188:	e7f9      	b.n	2517e <write_cb+0x56>

0002518a <bt_gatt_foreach_attr>:
{
   2518a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2518c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25190:	2300      	movs	r3, #0
   25192:	9300      	str	r3, [sp, #0]
   25194:	461a      	mov	r2, r3
   25196:	f7f3 fcbf 	bl	18b18 <bt_gatt_foreach_attr_type>
}
   2519a:	b005      	add	sp, #20
   2519c:	f85d fb04 	ldr.w	pc, [sp], #4

000251a0 <find_info_cb>:
{
   251a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   251a2:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   251a4:	6817      	ldr	r7, [r2, #0]
{
   251a6:	4605      	mov	r5, r0
   251a8:	460e      	mov	r6, r1
   251aa:	4614      	mov	r4, r2
	if (!data->rsp) {
   251ac:	b963      	cbnz	r3, 251c8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   251ae:	6850      	ldr	r0, [r2, #4]
   251b0:	2101      	movs	r1, #1
   251b2:	3008      	adds	r0, #8
   251b4:	f7f6 fcca 	bl	1bb4c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   251b8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   251ba:	682b      	ldr	r3, [r5, #0]
   251bc:	781b      	ldrb	r3, [r3, #0]
   251be:	2b00      	cmp	r3, #0
   251c0:	bf14      	ite	ne
   251c2:	2302      	movne	r3, #2
   251c4:	2301      	moveq	r3, #1
   251c6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   251c8:	68a3      	ldr	r3, [r4, #8]
   251ca:	781b      	ldrb	r3, [r3, #0]
   251cc:	2b01      	cmp	r3, #1
   251ce:	d003      	beq.n	251d8 <find_info_cb+0x38>
   251d0:	2b02      	cmp	r3, #2
   251d2:	d019      	beq.n	25208 <find_info_cb+0x68>
   251d4:	2000      	movs	r0, #0
   251d6:	e016      	b.n	25206 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   251d8:	682b      	ldr	r3, [r5, #0]
   251da:	781b      	ldrb	r3, [r3, #0]
   251dc:	2b00      	cmp	r3, #0
   251de:	d1f9      	bne.n	251d4 <find_info_cb+0x34>
   251e0:	6860      	ldr	r0, [r4, #4]
   251e2:	2104      	movs	r1, #4
   251e4:	3008      	adds	r0, #8
   251e6:	f7f6 fcb1 	bl	1bb4c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   251ea:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   251ec:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   251ee:	682a      	ldr	r2, [r5, #0]
   251f0:	68e3      	ldr	r3, [r4, #12]
   251f2:	8852      	ldrh	r2, [r2, #2]
   251f4:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   251f6:	6863      	ldr	r3, [r4, #4]
   251f8:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   251fa:	899b      	ldrh	r3, [r3, #12]
   251fc:	1ac0      	subs	r0, r0, r3
   251fe:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   25200:	bf94      	ite	ls
   25202:	2000      	movls	r0, #0
   25204:	2001      	movhi	r0, #1
}
   25206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25208:	682b      	ldr	r3, [r5, #0]
   2520a:	781b      	ldrb	r3, [r3, #0]
   2520c:	2b02      	cmp	r3, #2
   2520e:	d1e1      	bne.n	251d4 <find_info_cb+0x34>
   25210:	6860      	ldr	r0, [r4, #4]
   25212:	2112      	movs	r1, #18
   25214:	3008      	adds	r0, #8
   25216:	f7f6 fc99 	bl	1bb4c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2521a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2521c:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2521e:	6829      	ldr	r1, [r5, #0]
   25220:	68e0      	ldr	r0, [r4, #12]
   25222:	2210      	movs	r2, #16
   25224:	3101      	adds	r1, #1
   25226:	3002      	adds	r0, #2
   25228:	f7ff fa61 	bl	246ee <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2522c:	6863      	ldr	r3, [r4, #4]
   2522e:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   25230:	899b      	ldrh	r3, [r3, #12]
   25232:	1ac0      	subs	r0, r0, r3
   25234:	2812      	cmp	r0, #18
   25236:	e7e3      	b.n	25200 <find_info_cb+0x60>

00025238 <att_chan_mtu_updated>:
{
   25238:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2523a:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2523c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2523e:	b352      	cbz	r2, 25296 <att_chan_mtu_updated+0x5e>
	return node->next;
   25240:	6813      	ldr	r3, [r2, #0]
   25242:	b103      	cbz	r3, 25246 <att_chan_mtu_updated+0xe>
   25244:	3bf0      	subs	r3, #240	; 0xf0
   25246:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   2524a:	2200      	movs	r2, #0
   2524c:	4611      	mov	r1, r2
   2524e:	e000      	b.n	25252 <att_chan_mtu_updated+0x1a>
   25250:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   25252:	4284      	cmp	r4, r0
   25254:	d007      	beq.n	25266 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25256:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25258:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2525a:	42b1      	cmp	r1, r6
   2525c:	bf38      	it	cc
   2525e:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25260:	42a2      	cmp	r2, r4
   25262:	bf38      	it	cc
   25264:	4622      	movcc	r2, r4
   25266:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25268:	b12b      	cbz	r3, 25276 <att_chan_mtu_updated+0x3e>
   2526a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2526e:	2b00      	cmp	r3, #0
   25270:	d1ee      	bne.n	25250 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   25272:	4284      	cmp	r4, r0
   25274:	d1ef      	bne.n	25256 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25276:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   25278:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2527a:	428b      	cmp	r3, r1
   2527c:	d801      	bhi.n	25282 <att_chan_mtu_updated+0x4a>
   2527e:	4290      	cmp	r0, r2
   25280:	d90b      	bls.n	2529a <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25282:	4282      	cmp	r2, r0
   25284:	bf38      	it	cc
   25286:	4602      	movcc	r2, r0
   25288:	4299      	cmp	r1, r3
   2528a:	6828      	ldr	r0, [r5, #0]
   2528c:	bf38      	it	cc
   2528e:	4619      	movcc	r1, r3
}
   25290:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25292:	f7f4 ba23 	b.w	196dc <bt_gatt_att_max_mtu_changed>
   25296:	4611      	mov	r1, r2
   25298:	e7ed      	b.n	25276 <att_chan_mtu_updated+0x3e>
}
   2529a:	bc70      	pop	{r4, r5, r6}
   2529c:	4770      	bx	lr

0002529e <attr_read_group_cb>:
	if (!data->rsp->len) {
   2529e:	68d0      	ldr	r0, [r2, #12]
   252a0:	7803      	ldrb	r3, [r0, #0]
   252a2:	3104      	adds	r1, #4
   252a4:	b913      	cbnz	r3, 252ac <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   252a6:	7001      	strb	r1, [r0, #0]
	return true;
   252a8:	2001      	movs	r0, #1
   252aa:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   252ac:	428b      	cmp	r3, r1
   252ae:	d0fb      	beq.n	252a8 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   252b0:	6891      	ldr	r1, [r2, #8]
   252b2:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   252b4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   252b6:	3b04      	subs	r3, #4
   252b8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   252ba:	6110      	str	r0, [r2, #16]
}
   252bc:	4770      	bx	lr

000252be <chan_req_send>:
{
   252be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252c0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   252c2:	6888      	ldr	r0, [r1, #8]
   252c4:	f7ff ff0d 	bl	250e2 <net_buf_frags_len>
   252c8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   252ca:	4283      	cmp	r3, r0
{
   252cc:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   252ce:	d30d      	bcc.n	252ec <chan_req_send+0x2e>
	chan->req = req;
   252d0:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   252d4:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   252d6:	2600      	movs	r6, #0
   252d8:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   252da:	4628      	mov	r0, r5
   252dc:	4639      	mov	r1, r7
   252de:	f7f1 ffe9 	bl	172b4 <chan_send>
	if (err) {
   252e2:	b110      	cbz	r0, 252ea <chan_req_send+0x2c>
		req->buf = buf;
   252e4:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   252e6:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   252ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   252ec:	f06f 0079 	mvn.w	r0, #121	; 0x79
   252f0:	e7fb      	b.n	252ea <chan_req_send+0x2c>

000252f2 <bt_att_chan_send_rsp>:
{
   252f2:	b538      	push	{r3, r4, r5, lr}
   252f4:	4604      	mov	r4, r0
   252f6:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   252f8:	f7f1 ffdc 	bl	172b4 <chan_send>
	if (err) {
   252fc:	b130      	cbz	r0, 2530c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   252fe:	4629      	mov	r1, r5
   25300:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   25304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   25308:	f7f6 baf0 	b.w	1b8ec <net_buf_put>
}
   2530c:	bd38      	pop	{r3, r4, r5, pc}

0002530e <process_queue>:
{
   2530e:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   25310:	2200      	movs	r2, #0
{
   25312:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   25314:	2300      	movs	r3, #0
   25316:	4608      	mov	r0, r1
{
   25318:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2531a:	f7f6 f9df 	bl	1b6dc <net_buf_get>
	if (buf) {
   2531e:	4605      	mov	r5, r0
   25320:	b158      	cbz	r0, 2533a <process_queue+0x2c>
	return chan_send(chan, buf);
   25322:	4601      	mov	r1, r0
   25324:	4620      	mov	r0, r4
   25326:	f7f1 ffc5 	bl	172b4 <chan_send>
		if (err) {
   2532a:	4604      	mov	r4, r0
   2532c:	b118      	cbz	r0, 25336 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2532e:	4629      	mov	r1, r5
   25330:	4630      	mov	r0, r6
   25332:	f001 fd58 	bl	26de6 <k_queue_prepend>
}
   25336:	4620      	mov	r0, r4
   25338:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2533a:	f06f 0401 	mvn.w	r4, #1
   2533e:	e7fa      	b.n	25336 <process_queue+0x28>

00025340 <att_chan_read>:
{
   25340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25344:	4680      	mov	r8, r0
   25346:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25348:	4610      	mov	r0, r2
{
   2534a:	4699      	mov	r9, r3
   2534c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2534e:	f7ff fec8 	bl	250e2 <net_buf_frags_len>
   25352:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   25356:	4283      	cmp	r3, r0
{
   25358:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2535a:	d97a      	bls.n	25452 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2535c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25360:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25362:	4630      	mov	r0, r6
   25364:	f7f6 fb44 	bl	1b9f0 <net_buf_frag_last>
	size_t len, total = 0;
   25368:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2536c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2536e:	4630      	mov	r0, r6
   25370:	f7ff feb7 	bl	250e2 <net_buf_frags_len>
   25374:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   25378:	f105 0708 	add.w	r7, r5, #8
   2537c:	1a24      	subs	r4, r4, r0
   2537e:	4638      	mov	r0, r7
   25380:	f001 f8e4 	bl	2654c <net_buf_simple_tailroom>
   25384:	4284      	cmp	r4, r0
   25386:	d211      	bcs.n	253ac <att_chan_read+0x6c>
   25388:	4630      	mov	r0, r6
   2538a:	f7ff feaa 	bl	250e2 <net_buf_frags_len>
   2538e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25392:	1a24      	subs	r4, r4, r0
		if (!len) {
   25394:	bb34      	cbnz	r4, 253e4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   25396:	79b0      	ldrb	r0, [r6, #6]
   25398:	f7f6 f896 	bl	1b4c8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2539c:	2200      	movs	r2, #0
   2539e:	2300      	movs	r3, #0
   253a0:	f001 f8c3 	bl	2652a <net_buf_alloc_fixed>
			if (!frag) {
   253a4:	4605      	mov	r5, r0
   253a6:	b930      	cbnz	r0, 253b6 <att_chan_read+0x76>
	return total;
   253a8:	4657      	mov	r7, sl
   253aa:	e02c      	b.n	25406 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   253ac:	4638      	mov	r0, r7
   253ae:	f001 f8cd 	bl	2654c <net_buf_simple_tailroom>
   253b2:	4604      	mov	r4, r0
   253b4:	e7ee      	b.n	25394 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   253b6:	4601      	mov	r1, r0
   253b8:	4630      	mov	r0, r6
   253ba:	f7f6 fb57 	bl	1ba6c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   253be:	4630      	mov	r0, r6
   253c0:	f7ff fe8f 	bl	250e2 <net_buf_frags_len>
   253c4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   253c8:	f105 0708 	add.w	r7, r5, #8
   253cc:	1a24      	subs	r4, r4, r0
   253ce:	4638      	mov	r0, r7
   253d0:	f001 f8bc 	bl	2654c <net_buf_simple_tailroom>
   253d4:	4284      	cmp	r4, r0
   253d6:	d21a      	bcs.n	2540e <att_chan_read+0xce>
   253d8:	4630      	mov	r0, r6
   253da:	f7ff fe82 	bl	250e2 <net_buf_frags_len>
   253de:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   253e2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   253e4:	68a9      	ldr	r1, [r5, #8]
   253e6:	89aa      	ldrh	r2, [r5, #12]
   253e8:	f8cd 9000 	str.w	r9, [sp]
   253ec:	f8db 7004 	ldr.w	r7, [fp, #4]
   253f0:	9803      	ldr	r0, [sp, #12]
   253f2:	440a      	add	r2, r1
   253f4:	b2a3      	uxth	r3, r4
   253f6:	4659      	mov	r1, fp
   253f8:	47b8      	blx	r7
		if (read < 0) {
   253fa:	1e07      	subs	r7, r0, #0
   253fc:	da0c      	bge.n	25418 <att_chan_read+0xd8>
				return total;
   253fe:	f1ba 0f00 	cmp.w	sl, #0
   25402:	bf18      	it	ne
   25404:	4657      	movne	r7, sl
}
   25406:	4638      	mov	r0, r7
   25408:	b005      	add	sp, #20
   2540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2540e:	4638      	mov	r0, r7
   25410:	f001 f89c 	bl	2654c <net_buf_simple_tailroom>
   25414:	4604      	mov	r4, r0
   25416:	e7e5      	b.n	253e4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   25418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2541a:	b993      	cbnz	r3, 25442 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2541c:	4639      	mov	r1, r7
   2541e:	f105 0008 	add.w	r0, r5, #8
   25422:	f7f6 fb93 	bl	1bb4c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25426:	4630      	mov	r0, r6
   25428:	f7ff fe5b 	bl	250e2 <net_buf_frags_len>
   2542c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   25430:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25432:	4283      	cmp	r3, r0
		total += read;
   25434:	44ba      	add	sl, r7
		offset += read;
   25436:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2543a:	d9b5      	bls.n	253a8 <att_chan_read+0x68>
   2543c:	42a7      	cmp	r7, r4
   2543e:	d096      	beq.n	2536e <att_chan_read+0x2e>
   25440:	e7b2      	b.n	253a8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25442:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25446:	4639      	mov	r1, r7
   25448:	4628      	mov	r0, r5
   2544a:	4798      	blx	r3
   2544c:	2800      	cmp	r0, #0
   2544e:	d1e5      	bne.n	2541c <att_chan_read+0xdc>
   25450:	e7aa      	b.n	253a8 <att_chan_read+0x68>
		return 0;
   25452:	2700      	movs	r7, #0
   25454:	e7d7      	b.n	25406 <att_chan_read+0xc6>

00025456 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   25456:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25458:	2200      	movs	r2, #0
   2545a:	b903      	cbnz	r3, 2545e <sys_slist_find_and_remove.isra.0+0x8>
   2545c:	4770      	bx	lr
   2545e:	428b      	cmp	r3, r1
   25460:	d10f      	bne.n	25482 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   25462:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   25464:	b93a      	cbnz	r2, 25476 <sys_slist_find_and_remove.isra.0+0x20>
   25466:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   25468:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2546a:	4291      	cmp	r1, r2
   2546c:	d100      	bne.n	25470 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2546e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   25470:	2300      	movs	r3, #0
   25472:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   25474:	4770      	bx	lr
	parent->next = child;
   25476:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25478:	6843      	ldr	r3, [r0, #4]
   2547a:	4299      	cmp	r1, r3
	list->tail = node;
   2547c:	bf08      	it	eq
   2547e:	6042      	streq	r2, [r0, #4]
}
   25480:	e7f6      	b.n	25470 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   25482:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25484:	681b      	ldr	r3, [r3, #0]
   25486:	e7e8      	b.n	2545a <sys_slist_find_and_remove.isra.0+0x4>

00025488 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   25488:	2006      	movs	r0, #6
   2548a:	4770      	bx	lr

0002548c <atomic_test_and_set_bit>:
{
   2548c:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2548e:	2301      	movs	r3, #1
   25490:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25494:	f3bf 8f5b 	dmb	ish
   25498:	e850 3f00 	ldrex	r3, [r0]
   2549c:	ea43 0201 	orr.w	r2, r3, r1
   254a0:	e840 2400 	strex	r4, r2, [r0]
   254a4:	2c00      	cmp	r4, #0
   254a6:	d1f7      	bne.n	25498 <atomic_test_and_set_bit+0xc>
   254a8:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   254ac:	4219      	tst	r1, r3
}
   254ae:	bf14      	ite	ne
   254b0:	2001      	movne	r0, #1
   254b2:	2000      	moveq	r0, #0
   254b4:	bd10      	pop	{r4, pc}

000254b6 <read_cb>:
{
   254b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   254b8:	6816      	ldr	r6, [r2, #0]
{
   254ba:	4605      	mov	r5, r0
	data->err = 0x00;
   254bc:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   254be:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   254c0:	7313      	strb	r3, [r2, #12]
{
   254c2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   254c4:	4629      	mov	r1, r5
   254c6:	2295      	movs	r2, #149	; 0x95
   254c8:	f000 fc55 	bl	25d76 <bt_gatt_check_perm>
   254cc:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   254ce:	b980      	cbnz	r0, 254f2 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   254d0:	e9cd 0000 	strd	r0, r0, [sp]
   254d4:	4629      	mov	r1, r5
   254d6:	88a3      	ldrh	r3, [r4, #4]
   254d8:	68a2      	ldr	r2, [r4, #8]
   254da:	4630      	mov	r0, r6
   254dc:	f7ff ff30 	bl	25340 <att_chan_read>
	if (ret < 0) {
   254e0:	2800      	cmp	r0, #0
   254e2:	da09      	bge.n	254f8 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   254e4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   254e8:	bf26      	itte	cs
   254ea:	4240      	negcs	r0, r0
   254ec:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   254ee:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   254f0:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   254f2:	2000      	movs	r0, #0
}
   254f4:	b002      	add	sp, #8
   254f6:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   254f8:	2001      	movs	r0, #1
   254fa:	e7fb      	b.n	254f4 <read_cb+0x3e>

000254fc <read_vl_cb>:
{
   254fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   25500:	f8d2 8000 	ldr.w	r8, [r2]
{
   25504:	4606      	mov	r6, r0
	data->err = 0x00;
   25506:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25508:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2550c:	7313      	strb	r3, [r2, #12]
{
   2550e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25510:	4631      	mov	r1, r6
   25512:	2295      	movs	r2, #149	; 0x95
   25514:	f000 fc2f 	bl	25d76 <bt_gatt_check_perm>
   25518:	4605      	mov	r5, r0
   2551a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2551c:	b9e0      	cbnz	r0, 25558 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2551e:	68a0      	ldr	r0, [r4, #8]
   25520:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   25524:	8982      	ldrh	r2, [r0, #12]
   25526:	1a9b      	subs	r3, r3, r2
   25528:	2b01      	cmp	r3, #1
   2552a:	dd15      	ble.n	25558 <read_vl_cb+0x5c>
   2552c:	2102      	movs	r1, #2
   2552e:	3008      	adds	r0, #8
   25530:	f7f6 fb0c 	bl	1bb4c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25534:	e9cd 5500 	strd	r5, r5, [sp]
   25538:	4607      	mov	r7, r0
   2553a:	88a3      	ldrh	r3, [r4, #4]
   2553c:	68a2      	ldr	r2, [r4, #8]
   2553e:	4631      	mov	r1, r6
   25540:	4640      	mov	r0, r8
   25542:	f7ff fefd 	bl	25340 <att_chan_read>
	if (read < 0) {
   25546:	1e03      	subs	r3, r0, #0
   25548:	da0a      	bge.n	25560 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2554a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2554e:	bf26      	itte	cs
   25550:	425b      	negcs	r3, r3
   25552:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   25554:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   25556:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   25558:	2000      	movs	r0, #0
}
   2555a:	b002      	add	sp, #8
   2555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   25560:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   25562:	2001      	movs	r0, #1
   25564:	e7f9      	b.n	2555a <read_vl_cb+0x5e>

00025566 <bt_att_sent>:
{
   25566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25568:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2556a:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2556c:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   25570:	f850 4c04 	ldr.w	r4, [r0, #-4]
   25574:	f3bf 8f5b 	dmb	ish
   25578:	e853 1f00 	ldrex	r1, [r3]
   2557c:	f021 0110 	bic.w	r1, r1, #16
   25580:	e843 1200 	strex	r2, r1, [r3]
   25584:	2a00      	cmp	r2, #0
   25586:	d1f7      	bne.n	25578 <bt_att_sent+0x12>
   25588:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2558c:	b30c      	cbz	r4, 255d2 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2558e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   25592:	b98b      	cbnz	r3, 255b8 <bt_att_sent+0x52>
   25594:	6863      	ldr	r3, [r4, #4]
   25596:	b17b      	cbz	r3, 255b8 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25598:	1d20      	adds	r0, r4, #4
   2559a:	f7ff fd98 	bl	250ce <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2559e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   255a0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   255a2:	4638      	mov	r0, r7
   255a4:	f7ff fe8b 	bl	252be <chan_req_send>
   255a8:	2800      	cmp	r0, #0
   255aa:	da12      	bge.n	255d2 <bt_att_sent+0x6c>
	return list->head;
   255ac:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   255ae:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   255b0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   255b2:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   255b4:	b903      	cbnz	r3, 255b8 <bt_att_sent+0x52>
	list->tail = node;
   255b6:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   255b8:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   255bc:	4638      	mov	r0, r7
   255be:	f7ff fea6 	bl	2530e <process_queue>
	if (!err) {
   255c2:	b130      	cbz	r0, 255d2 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   255c4:	f104 010c 	add.w	r1, r4, #12
   255c8:	4638      	mov	r0, r7
}
   255ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   255ce:	f7ff be9e 	b.w	2530e <process_queue>
}
   255d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000255d4 <att_req_send_process>:
{
   255d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   255d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
   255da:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   255dc:	2c00      	cmp	r4, #0
   255de:	d03b      	beq.n	25658 <att_req_send_process+0x84>
	return node->next;
   255e0:	f854 69f0 	ldr.w	r6, [r4], #-240
   255e4:	b106      	cbz	r6, 255e8 <att_req_send_process+0x14>
   255e6:	3ef0      	subs	r6, #240	; 0xf0
{
   255e8:	2300      	movs	r3, #0
   255ea:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   255ec:	f108 0704 	add.w	r7, r8, #4
   255f0:	e013      	b.n	2561a <att_req_send_process+0x46>
		if (!req && prev &&
   255f2:	b1c3      	cbz	r3, 25626 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   255f4:	2103      	movs	r1, #3
   255f6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   255fa:	f7ff fd8c 	bl	25116 <atomic_test_bit>
   255fe:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   25600:	f103 0098 	add.w	r0, r3, #152	; 0x98
   25604:	f7ff fd87 	bl	25116 <atomic_test_bit>
		if (!req && prev &&
   25608:	4282      	cmp	r2, r0
   2560a:	d10c      	bne.n	25626 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2560c:	b326      	cbz	r6, 25658 <att_req_send_process+0x84>
   2560e:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   25612:	b102      	cbz	r2, 25616 <att_req_send_process+0x42>
   25614:	3af0      	subs	r2, #240	; 0xf0
{
   25616:	4634      	mov	r4, r6
   25618:	4616      	mov	r6, r2
		if (chan->req) {
   2561a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2561e:	2a00      	cmp	r2, #0
   25620:	d1f4      	bne.n	2560c <att_req_send_process+0x38>
		if (!req && prev &&
   25622:	2d00      	cmp	r5, #0
   25624:	d0e5      	beq.n	255f2 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   25626:	4638      	mov	r0, r7
   25628:	f7ff fd51 	bl	250ce <sys_slist_get>
	if (node) {
   2562c:	4605      	mov	r5, r0
   2562e:	b908      	cbnz	r0, 25634 <att_req_send_process+0x60>
   25630:	4623      	mov	r3, r4
   25632:	e7eb      	b.n	2560c <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   25634:	4601      	mov	r1, r0
   25636:	4620      	mov	r0, r4
   25638:	f7f1 fe9c 	bl	17374 <bt_att_chan_req_send>
   2563c:	2800      	cmp	r0, #0
   2563e:	da0b      	bge.n	25658 <att_req_send_process+0x84>
	return list->head;
   25640:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   25644:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   25646:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2564a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2564e:	2b00      	cmp	r3, #0
   25650:	d1ee      	bne.n	25630 <att_req_send_process+0x5c>
	list->tail = node;
   25652:	f8c8 5008 	str.w	r5, [r8, #8]
}
   25656:	e7eb      	b.n	25630 <att_req_send_process+0x5c>
}
   25658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002565c <bt_att_status>:
{
   2565c:	b538      	push	{r3, r4, r5, lr}
   2565e:	4605      	mov	r5, r0
   25660:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25662:	2100      	movs	r1, #0
   25664:	f7ff fd57 	bl	25116 <atomic_test_bit>
   25668:	b1c0      	cbz	r0, 2569c <bt_att_status+0x40>
	if (!chan->att) {
   2566a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2566e:	b1a8      	cbz	r0, 2569c <bt_att_status+0x40>
	if (chan->req) {
   25670:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   25674:	b993      	cbnz	r3, 2569c <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   25676:	3004      	adds	r0, #4
   25678:	f7ff fd29 	bl	250ce <sys_slist_get>
	if (!node) {
   2567c:	4604      	mov	r4, r0
   2567e:	b168      	cbz	r0, 2569c <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25680:	4601      	mov	r1, r0
   25682:	1f28      	subs	r0, r5, #4
   25684:	f7f1 fe76 	bl	17374 <bt_att_chan_req_send>
   25688:	2800      	cmp	r0, #0
   2568a:	da07      	bge.n	2569c <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2568c:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   25690:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25692:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25694:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25696:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25698:	b902      	cbnz	r2, 2569c <bt_att_status+0x40>
	list->tail = node;
   2569a:	609c      	str	r4, [r3, #8]
}
   2569c:	bd38      	pop	{r3, r4, r5, pc}

0002569e <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2569e:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   256a0:	6883      	ldr	r3, [r0, #8]
   256a2:	699b      	ldr	r3, [r3, #24]
   256a4:	b10b      	cbz	r3, 256aa <att_sent+0xc>
		chan->ops->sent(chan);
   256a6:	3004      	adds	r0, #4
   256a8:	4718      	bx	r3
}
   256aa:	4770      	bx	lr

000256ac <att_tx_complete>:
{
   256ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   256b0:	4606      	mov	r6, r0
   256b2:	460d      	mov	r5, r1
	if (!err) {
   256b4:	4614      	mov	r4, r2
   256b6:	b122      	cbz	r2, 256c2 <att_tx_complete+0x16>
}
   256b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   256bc:	4608      	mov	r0, r1
   256be:	f7f1 bddd 	b.w	1727c <tx_meta_data_free>
		att_sent(conn, user_data);
   256c2:	f7ff ffec 	bl	2569e <att_sent>
	bt_gatt_complete_func_t func = data->func;
   256c6:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   256c8:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   256cc:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   256d0:	4628      	mov	r0, r5
   256d2:	f7f1 fdd3 	bl	1727c <tx_meta_data_free>
	if (!err && func) {
   256d6:	b92f      	cbnz	r7, 256e4 <att_tx_complete+0x38>
}
   256d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   256dc:	4649      	mov	r1, r9
   256de:	4630      	mov	r0, r6
   256e0:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   256e2:	3401      	adds	r4, #1
   256e4:	b2a3      	uxth	r3, r4
   256e6:	4543      	cmp	r3, r8
   256e8:	d3f8      	bcc.n	256dc <att_tx_complete+0x30>
   256ea:	e7f5      	b.n	256d8 <att_tx_complete+0x2c>

000256ec <att_req_sent>:
{
   256ec:	b510      	push	{r4, lr}
   256ee:	460c      	mov	r4, r1
	if (!err) {
   256f0:	b90a      	cbnz	r2, 256f6 <att_req_sent+0xa>
		att_sent(conn, user_data);
   256f2:	f7ff ffd4 	bl	2569e <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   256f6:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   256f8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   256fc:	b12b      	cbz	r3, 2570a <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   256fe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25702:	2300      	movs	r3, #0
   25704:	30c0      	adds	r0, #192	; 0xc0
   25706:	f7fb fc73 	bl	20ff0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2570a:	4620      	mov	r0, r4
}
   2570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   25710:	f7f1 bdb4 	b.w	1727c <tx_meta_data_free>

00025714 <att_cfm_sent>:
{
   25714:	b510      	push	{r4, lr}
   25716:	460c      	mov	r4, r1
	if (!err) {
   25718:	b90a      	cbnz	r2, 2571e <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2571a:	f7ff ffc0 	bl	2569e <att_sent>
   2571e:	6823      	ldr	r3, [r4, #0]
   25720:	f3bf 8f5b 	dmb	ish
   25724:	3398      	adds	r3, #152	; 0x98
   25726:	e853 1f00 	ldrex	r1, [r3]
   2572a:	f021 0102 	bic.w	r1, r1, #2
   2572e:	e843 1200 	strex	r2, r1, [r3]
   25732:	2a00      	cmp	r2, #0
   25734:	d1f7      	bne.n	25726 <att_cfm_sent+0x12>
   25736:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2573a:	4620      	mov	r0, r4
}
   2573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   25740:	f7f1 bd9c 	b.w	1727c <tx_meta_data_free>

00025744 <att_rsp_sent>:
{
   25744:	b510      	push	{r4, lr}
   25746:	460c      	mov	r4, r1
	if (!err) {
   25748:	b90a      	cbnz	r2, 2574e <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2574a:	f7ff ffa8 	bl	2569e <att_sent>
   2574e:	6823      	ldr	r3, [r4, #0]
   25750:	f3bf 8f5b 	dmb	ish
   25754:	3398      	adds	r3, #152	; 0x98
   25756:	e853 1f00 	ldrex	r1, [r3]
   2575a:	f021 0101 	bic.w	r1, r1, #1
   2575e:	e843 1200 	strex	r2, r1, [r3]
   25762:	2a00      	cmp	r2, #0
   25764:	d1f7      	bne.n	25756 <att_rsp_sent+0x12>
   25766:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2576a:	4620      	mov	r0, r4
}
   2576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   25770:	f7f1 bd84 	b.w	1727c <tx_meta_data_free>

00025774 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25778:	4688      	mov	r8, r1
   2577a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2577c:	2101      	movs	r1, #1
   2577e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25780:	4605      	mov	r5, r0
   25782:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25784:	f7f1 ff62 	bl	1764c <bt_att_chan_create_pdu>
	if (!buf) {
   25788:	4604      	mov	r4, r0
   2578a:	b170      	cbz	r0, 257aa <send_err_rsp.part.0+0x36>
   2578c:	2104      	movs	r1, #4
   2578e:	3008      	adds	r0, #8
   25790:	f7f6 f9dc 	bl	1bb4c <net_buf_simple_add>
	rsp->request = req;
   25794:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   25798:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2579c:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2579e:	4621      	mov	r1, r4
   257a0:	4628      	mov	r0, r5
}
   257a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   257a6:	f7ff bda4 	b.w	252f2 <bt_att_chan_send_rsp>
}
   257aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000257ae <att_write_req>:
{
   257ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   257b0:	460c      	mov	r4, r1
   257b2:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   257b4:	f101 0008 	add.w	r0, r1, #8
   257b8:	f000 febc 	bl	26534 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   257bc:	89a2      	ldrh	r2, [r4, #12]
   257be:	9201      	str	r2, [sp, #4]
   257c0:	68a2      	ldr	r2, [r4, #8]
   257c2:	9200      	str	r2, [sp, #0]
   257c4:	4603      	mov	r3, r0
   257c6:	2213      	movs	r2, #19
   257c8:	2112      	movs	r1, #18
   257ca:	4628      	mov	r0, r5
   257cc:	f7f2 f804 	bl	177d8 <att_write_rsp.constprop.0>
}
   257d0:	b003      	add	sp, #12
   257d2:	bd30      	pop	{r4, r5, pc}

000257d4 <att_write_cmd>:
{
   257d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   257d6:	460c      	mov	r4, r1
   257d8:	4605      	mov	r5, r0
   257da:	f101 0008 	add.w	r0, r1, #8
   257de:	f000 fea9 	bl	26534 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   257e2:	89a2      	ldrh	r2, [r4, #12]
   257e4:	9201      	str	r2, [sp, #4]
   257e6:	68a2      	ldr	r2, [r4, #8]
   257e8:	9200      	str	r2, [sp, #0]
   257ea:	2200      	movs	r2, #0
   257ec:	4603      	mov	r3, r0
   257ee:	4611      	mov	r1, r2
   257f0:	4628      	mov	r0, r5
   257f2:	f7f1 fff1 	bl	177d8 <att_write_rsp.constprop.0>
}
   257f6:	b003      	add	sp, #12
   257f8:	bd30      	pop	{r4, r5, pc}

000257fa <att_read_blob_req>:
{
   257fa:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   257fc:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   257fe:	8813      	ldrh	r3, [r2, #0]
   25800:	8852      	ldrh	r2, [r2, #2]
   25802:	9200      	str	r2, [sp, #0]
   25804:	210c      	movs	r1, #12
   25806:	220d      	movs	r2, #13
   25808:	f7f2 f99e 	bl	17b48 <att_read_rsp>
}
   2580c:	b003      	add	sp, #12
   2580e:	f85d fb04 	ldr.w	pc, [sp], #4

00025812 <att_read_req>:
{
   25812:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25814:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25816:	2200      	movs	r2, #0
   25818:	881b      	ldrh	r3, [r3, #0]
   2581a:	9200      	str	r2, [sp, #0]
   2581c:	210a      	movs	r1, #10
   2581e:	220b      	movs	r2, #11
   25820:	f7f2 f992 	bl	17b48 <att_read_rsp>
}
   25824:	b003      	add	sp, #12
   25826:	f85d fb04 	ldr.w	pc, [sp], #4

0002582a <att_mtu_req>:
{
   2582a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2582c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2582e:	f850 2b98 	ldr.w	r2, [r0], #152
{
   25832:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   25834:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   25836:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   25838:	f7ff fc6d 	bl	25116 <atomic_test_bit>
   2583c:	4604      	mov	r4, r0
   2583e:	b9f0      	cbnz	r0, 2587e <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   25840:	689b      	ldr	r3, [r3, #8]
   25842:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   25844:	2e16      	cmp	r6, #22
   25846:	d91c      	bls.n	25882 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   25848:	4638      	mov	r0, r7
   2584a:	2202      	movs	r2, #2
   2584c:	f7f2 f828 	bl	178a0 <bt_att_create_pdu>
	if (!pdu) {
   25850:	4607      	mov	r7, r0
   25852:	b1c0      	cbz	r0, 25886 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   25854:	2102      	movs	r1, #2
   25856:	3008      	adds	r0, #8
   25858:	f7f6 f978 	bl	1bb4c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2585c:	2341      	movs	r3, #65	; 0x41
   2585e:	7003      	strb	r3, [r0, #0]
   25860:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   25862:	4639      	mov	r1, r7
   25864:	4628      	mov	r0, r5
   25866:	f7ff fd44 	bl	252f2 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2586a:	2e41      	cmp	r6, #65	; 0x41
   2586c:	bf28      	it	cs
   2586e:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   25870:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   25872:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   25874:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   25876:	f7ff fcdf 	bl	25238 <att_chan_mtu_updated>
	return 0;
   2587a:	4620      	mov	r0, r4
}
   2587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2587e:	2006      	movs	r0, #6
   25880:	e7fc      	b.n	2587c <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   25882:	2004      	movs	r0, #4
   25884:	e7fa      	b.n	2587c <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   25886:	200e      	movs	r0, #14
   25888:	e7f8      	b.n	2587c <att_mtu_req+0x52>

0002588a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2588a:	898a      	ldrh	r2, [r1, #12]
   2588c:	6889      	ldr	r1, [r1, #8]
   2588e:	2300      	movs	r3, #0
   25890:	f7f2 bb06 	b.w	17ea0 <att_handle_rsp>

00025894 <bt_att_encrypt_change>:
{
   25894:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   25896:	4606      	mov	r6, r0
	if (!att_chan->att) {
   25898:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   2589c:	f856 5904 	ldr.w	r5, [r6], #-4
{
   258a0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   258a2:	2b00      	cmp	r3, #0
   258a4:	d038      	beq.n	25918 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   258a6:	b141      	cbz	r1, 258ba <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   258a8:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   258ac:	2b00      	cmp	r3, #0
   258ae:	d033      	beq.n	25918 <bt_att_encrypt_change+0x84>
   258b0:	7c1b      	ldrb	r3, [r3, #16]
   258b2:	07da      	lsls	r2, r3, #31
   258b4:	d530      	bpl.n	25918 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   258b6:	2305      	movs	r3, #5
   258b8:	e021      	b.n	258fe <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   258ba:	4628      	mov	r0, r5
   258bc:	f7f3 ff22 	bl	19704 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   258c0:	7a6b      	ldrb	r3, [r5, #9]
   258c2:	2b01      	cmp	r3, #1
   258c4:	d028      	beq.n	25918 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   258c6:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   258ca:	b32d      	cbz	r5, 25918 <bt_att_encrypt_change+0x84>
   258cc:	7c2b      	ldrb	r3, [r5, #16]
   258ce:	07db      	lsls	r3, r3, #31
   258d0:	d522      	bpl.n	25918 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   258d2:	68eb      	ldr	r3, [r5, #12]
   258d4:	2b00      	cmp	r3, #0
   258d6:	d0ee      	beq.n	258b6 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   258d8:	696a      	ldr	r2, [r5, #20]
   258da:	7c69      	ldrb	r1, [r5, #17]
   258dc:	4630      	mov	r0, r6
   258de:	f7f1 feb5 	bl	1764c <bt_att_chan_create_pdu>
	if (!buf) {
   258e2:	4604      	mov	r4, r0
   258e4:	b150      	cbz	r0, 258fc <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   258e6:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   258ea:	68eb      	ldr	r3, [r5, #12]
   258ec:	4798      	blx	r3
   258ee:	b168      	cbz	r0, 2590c <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   258f0:	6960      	ldr	r0, [r4, #20]
   258f2:	f7f1 fcc3 	bl	1727c <tx_meta_data_free>
		net_buf_unref(buf);
   258f6:	4620      	mov	r0, r4
   258f8:	f7f6 f822 	bl	1b940 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   258fc:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   258fe:	2200      	movs	r2, #0
   25900:	4630      	mov	r0, r6
   25902:	4611      	mov	r1, r2
}
   25904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   25908:	f7f2 baca 	b.w	17ea0 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2590c:	4621      	mov	r1, r4
   2590e:	4630      	mov	r0, r6
   25910:	f7f1 fcd0 	bl	172b4 <chan_send>
   25914:	2800      	cmp	r0, #0
   25916:	d1eb      	bne.n	258f0 <bt_att_encrypt_change+0x5c>
}
   25918:	bd70      	pop	{r4, r5, r6, pc}

0002591a <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2591a:	2001      	movs	r0, #1
   2591c:	4770      	bx	lr

0002591e <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2591e:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   25920:	f7f1 fbd0 	bl	170c4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   25924:	b198      	cbz	r0, 2594e <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   25926:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   25928:	b18b      	cbz	r3, 2594e <bt_att_clear_out_of_sync_sent+0x30>
   2592a:	f3bf 8f5b 	dmb	ish
   2592e:	3bf0      	subs	r3, #240	; 0xf0
   25930:	f103 0298 	add.w	r2, r3, #152	; 0x98
   25934:	e852 0f00 	ldrex	r0, [r2]
   25938:	f020 0020 	bic.w	r0, r0, #32
   2593c:	e842 0100 	strex	r1, r0, [r2]
   25940:	2900      	cmp	r1, #0
   25942:	d1f7      	bne.n	25934 <bt_att_clear_out_of_sync_sent+0x16>
   25944:	f3bf 8f5b 	dmb	ish
	return node->next;
   25948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2594c:	e7ec      	b.n	25928 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2594e:	bd08      	pop	{r3, pc}

00025950 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   25950:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   25952:	2104      	movs	r1, #4
   25954:	f7ff fbb0 	bl	250b8 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   25958:	b128      	cbz	r0, 25966 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2595a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2595e:	2105      	movs	r1, #5
   25960:	3094      	adds	r0, #148	; 0x94
   25962:	f7ff bbd8 	b.w	25116 <atomic_test_bit>
}
   25966:	bd08      	pop	{r3, pc}

00025968 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   25968:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   2596a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2596e:	2201      	movs	r2, #1
   25970:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   25972:	7403      	strb	r3, [r0, #16]
}
   25974:	4770      	bx	lr

00025976 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   25976:	6010      	str	r0, [r2, #0]
}
   25978:	2000      	movs	r0, #0
   2597a:	4770      	bx	lr

0002597c <gatt_ccc_changed>:
{
   2597c:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2597e:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   25980:	895a      	ldrh	r2, [r3, #10]
   25982:	428a      	cmp	r2, r1
   25984:	d003      	beq.n	2598e <gatt_ccc_changed+0x12>
		ccc->value = value;
   25986:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   25988:	68db      	ldr	r3, [r3, #12]
   2598a:	b103      	cbz	r3, 2598e <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2598c:	4718      	bx	r3
}
   2598e:	4770      	bx	lr

00025990 <gatt_indicate_rsp>:
{
   25990:	b510      	push	{r4, lr}
   25992:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25994:	68a3      	ldr	r3, [r4, #8]
{
   25996:	460a      	mov	r2, r1
	if (params->func) {
   25998:	b10b      	cbz	r3, 2599e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2599a:	4621      	mov	r1, r4
   2599c:	4798      	blx	r3
	params->_ref--;
   2599e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   259a0:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   259a2:	3b01      	subs	r3, #1
   259a4:	b2db      	uxtb	r3, r3
   259a6:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   259a8:	b122      	cbz	r2, 259b4 <gatt_indicate_rsp+0x24>
   259aa:	b91b      	cbnz	r3, 259b4 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   259ac:	4620      	mov	r0, r4
}
   259ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   259b2:	4710      	bx	r2
}
   259b4:	bd10      	pop	{r4, pc}

000259b6 <match_uuid>:
	data->attr = attr;
   259b6:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   259b8:	8091      	strh	r1, [r2, #4]
}
   259ba:	2000      	movs	r0, #0
   259bc:	4770      	bx	lr

000259be <ccc_set_cb>:
}
   259be:	2000      	movs	r0, #0
   259c0:	4770      	bx	lr

000259c2 <gen_hash_m>:
{
   259c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   259c4:	6807      	ldr	r7, [r0, #0]
   259c6:	783d      	ldrb	r5, [r7, #0]
{
   259c8:	b089      	sub	sp, #36	; 0x24
   259ca:	4606      	mov	r6, r0
   259cc:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   259ce:	b9dd      	cbnz	r5, 25a08 <gen_hash_m+0x46>
	switch (u16->val) {
   259d0:	887b      	ldrh	r3, [r7, #2]
   259d2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   259d6:	d004      	beq.n	259e2 <gen_hash_m+0x20>
   259d8:	d810      	bhi.n	259fc <gen_hash_m+0x3a>
   259da:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   259de:	2b03      	cmp	r3, #3
   259e0:	d812      	bhi.n	25a08 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   259e2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   259e6:	2202      	movs	r2, #2
   259e8:	f10d 010a 	add.w	r1, sp, #10
   259ec:	4620      	mov	r0, r4
   259ee:	f7fe fd0f 	bl	24410 <tc_cmac_update>
   259f2:	b968      	cbnz	r0, 25a10 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   259f4:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   259f8:	65a2      	str	r2, [r4, #88]	; 0x58
   259fa:	e006      	b.n	25a0a <gen_hash_m+0x48>
	switch (u16->val) {
   259fc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25a00:	33ff      	adds	r3, #255	; 0xff
   25a02:	b29b      	uxth	r3, r3
   25a04:	2b04      	cmp	r3, #4
   25a06:	d91e      	bls.n	25a46 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   25a08:	2501      	movs	r5, #1
}
   25a0a:	4628      	mov	r0, r5
   25a0c:	b009      	add	sp, #36	; 0x24
   25a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   25a10:	887b      	ldrh	r3, [r7, #2]
   25a12:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a16:	2202      	movs	r2, #2
   25a18:	f10d 010a 	add.w	r1, sp, #10
   25a1c:	4620      	mov	r0, r4
   25a1e:	f7fe fcf7 	bl	24410 <tc_cmac_update>
   25a22:	2800      	cmp	r0, #0
   25a24:	d0e6      	beq.n	259f4 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25a26:	2000      	movs	r0, #0
   25a28:	9000      	str	r0, [sp, #0]
   25a2a:	aa03      	add	r2, sp, #12
   25a2c:	6877      	ldr	r7, [r6, #4]
   25a2e:	2313      	movs	r3, #19
   25a30:	4631      	mov	r1, r6
   25a32:	47b8      	blx	r7
		if (len < 0) {
   25a34:	1e02      	subs	r2, r0, #0
   25a36:	dbdf      	blt.n	259f8 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   25a38:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a3a:	4620      	mov	r0, r4
   25a3c:	f7fe fce8 	bl	24410 <tc_cmac_update>
   25a40:	2800      	cmp	r0, #0
   25a42:	d1e1      	bne.n	25a08 <gen_hash_m+0x46>
   25a44:	e7d6      	b.n	259f4 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   25a46:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a4a:	2202      	movs	r2, #2
   25a4c:	f10d 010a 	add.w	r1, sp, #10
   25a50:	4620      	mov	r0, r4
   25a52:	f7fe fcdd 	bl	24410 <tc_cmac_update>
   25a56:	2800      	cmp	r0, #0
   25a58:	d0cc      	beq.n	259f4 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   25a5a:	887b      	ldrh	r3, [r7, #2]
   25a5c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a60:	2202      	movs	r2, #2
   25a62:	f10d 010a 	add.w	r1, sp, #10
   25a66:	e7e8      	b.n	25a3a <gen_hash_m+0x78>

00025a68 <bt_addr_le_eq>:
{
   25a68:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   25a6a:	2207      	movs	r2, #7
   25a6c:	f7fe fe2f 	bl	246ce <memcmp>
}
   25a70:	fab0 f080 	clz	r0, r0
   25a74:	0940      	lsrs	r0, r0, #5
   25a76:	bd08      	pop	{r3, pc}

00025a78 <ccc_find_cfg>:
{
   25a78:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   25a7a:	7803      	ldrb	r3, [r0, #0]
   25a7c:	4293      	cmp	r3, r2
{
   25a7e:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   25a80:	d105      	bne.n	25a8e <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   25a82:	3001      	adds	r0, #1
   25a84:	f7ff fff0 	bl	25a68 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   25a88:	b108      	cbz	r0, 25a8e <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   25a8a:	4620      	mov	r0, r4
}
   25a8c:	bd10      	pop	{r4, pc}
	return NULL;
   25a8e:	2000      	movs	r0, #0
   25a90:	e7fc      	b.n	25a8c <ccc_find_cfg+0x14>

00025a92 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25a92:	f3bf 8f5b 	dmb	ish
   25a96:	6800      	ldr	r0, [r0, #0]
   25a98:	f3bf 8f5b 	dmb	ish
}
   25a9c:	4770      	bx	lr

00025a9e <atomic_or>:
{
   25a9e:	b510      	push	{r4, lr}
   25aa0:	4603      	mov	r3, r0
}
   25aa2:	f3bf 8f5b 	dmb	ish
   25aa6:	e853 0f00 	ldrex	r0, [r3]
   25aaa:	ea40 0201 	orr.w	r2, r0, r1
   25aae:	e843 2400 	strex	r4, r2, [r3]
   25ab2:	2c00      	cmp	r4, #0
   25ab4:	d1f7      	bne.n	25aa6 <atomic_or+0x8>
   25ab6:	f3bf 8f5b 	dmb	ish
   25aba:	bd10      	pop	{r4, pc}

00025abc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25abc:	2207      	movs	r2, #7
   25abe:	f7fe be16 	b.w	246ee <memcpy>

00025ac2 <atomic_and>:
{
   25ac2:	b510      	push	{r4, lr}
   25ac4:	4603      	mov	r3, r0
}
   25ac6:	f3bf 8f5b 	dmb	ish
   25aca:	e853 0f00 	ldrex	r0, [r3]
   25ace:	ea00 0201 	and.w	r2, r0, r1
   25ad2:	e843 2400 	strex	r4, r2, [r3]
   25ad6:	2c00      	cmp	r4, #0
   25ad8:	d1f7      	bne.n	25aca <atomic_and+0x8>
   25ada:	f3bf 8f5b 	dmb	ish
   25ade:	bd10      	pop	{r4, pc}

00025ae0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25ae0:	2a02      	cmp	r2, #2
{
   25ae2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25ae4:	d108      	bne.n	25af8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25ae6:	2300      	movs	r3, #0
   25ae8:	f100 0190 	add.w	r1, r0, #144	; 0x90
   25aec:	461a      	mov	r2, r3
   25aee:	7a00      	ldrb	r0, [r0, #8]
   25af0:	f7f2 fc78 	bl	183e4 <sc_save>
}
   25af4:	2002      	movs	r0, #2
   25af6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25af8:	f7f2 fe0c 	bl	18714 <sc_clear>
   25afc:	e7fa      	b.n	25af4 <sc_ccc_cfg_write+0x14>

00025afe <read_appearance>:
{
   25afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25b00:	4615      	mov	r5, r2
   25b02:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   25b06:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25b08:	f7fe ff99 	bl	24a3e <bt_get_appearance>
	if (offset > value_len) {
   25b0c:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25b0e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25b12:	d80e      	bhi.n	25b32 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   25b14:	f1c6 0402 	rsb	r4, r6, #2
   25b18:	42bc      	cmp	r4, r7
   25b1a:	bfa8      	it	ge
   25b1c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25b1e:	f10d 0306 	add.w	r3, sp, #6
   25b22:	4622      	mov	r2, r4
   25b24:	1999      	adds	r1, r3, r6
   25b26:	4628      	mov	r0, r5
   25b28:	f7fe fde1 	bl	246ee <memcpy>
}
   25b2c:	4620      	mov	r0, r4
   25b2e:	b003      	add	sp, #12
   25b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25b32:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25b36:	e7f9      	b.n	25b2c <read_appearance+0x2e>

00025b38 <read_name>:
{
   25b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b3c:	4698      	mov	r8, r3
   25b3e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   25b42:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   25b44:	f7ef fa3a 	bl	14fbc <bt_get_name>
   25b48:	4607      	mov	r7, r0
				 strlen(name));
   25b4a:	f7fe fd90 	bl	2466e <strlen>
	if (offset > value_len) {
   25b4e:	b283      	uxth	r3, r0
   25b50:	42b3      	cmp	r3, r6
   25b52:	d30c      	bcc.n	25b6e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   25b54:	1b9c      	subs	r4, r3, r6
   25b56:	4544      	cmp	r4, r8
   25b58:	bfa8      	it	ge
   25b5a:	4644      	movge	r4, r8
   25b5c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25b5e:	4622      	mov	r2, r4
   25b60:	19b9      	adds	r1, r7, r6
   25b62:	4628      	mov	r0, r5
   25b64:	f7fe fdc3 	bl	246ee <memcpy>
}
   25b68:	4620      	mov	r0, r4
   25b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25b6e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25b72:	e7f9      	b.n	25b68 <read_name+0x30>

00025b74 <cf_read>:
{
   25b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25b76:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   25b78:	2300      	movs	r3, #0
{
   25b7a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   25b7e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25b82:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   25b84:	f7f2 faf0 	bl	18168 <find_cf_cfg>
	if (cfg) {
   25b88:	b128      	cbz	r0, 25b96 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   25b8a:	f100 0108 	add.w	r1, r0, #8
   25b8e:	2201      	movs	r2, #1
   25b90:	a801      	add	r0, sp, #4
   25b92:	f7fe fdac 	bl	246ee <memcpy>
	if (offset > value_len) {
   25b96:	2e01      	cmp	r6, #1
   25b98:	d80d      	bhi.n	25bb6 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   25b9a:	f1c6 0401 	rsb	r4, r6, #1
   25b9e:	42bc      	cmp	r4, r7
   25ba0:	bfa8      	it	ge
   25ba2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25ba4:	ab01      	add	r3, sp, #4
   25ba6:	4622      	mov	r2, r4
   25ba8:	1999      	adds	r1, r3, r6
   25baa:	4628      	mov	r0, r5
   25bac:	f7fe fd9f 	bl	246ee <memcpy>
}
   25bb0:	4620      	mov	r0, r4
   25bb2:	b003      	add	sp, #12
   25bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25bb6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   25bba:	e7f9      	b.n	25bb0 <cf_read+0x3c>

00025bbc <bt_gatt_attr_read_service>:
{
   25bbc:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   25bbe:	68c9      	ldr	r1, [r1, #12]
{
   25bc0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   25bc2:	780a      	ldrb	r2, [r1, #0]
{
   25bc4:	461c      	mov	r4, r3
   25bc6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   25bca:	b992      	cbnz	r2, 25bf2 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25bcc:	884a      	ldrh	r2, [r1, #2]
   25bce:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   25bd2:	2b02      	cmp	r3, #2
   25bd4:	d818      	bhi.n	25c08 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   25bd6:	f1c3 0202 	rsb	r2, r3, #2
   25bda:	4294      	cmp	r4, r2
   25bdc:	bfa8      	it	ge
   25bde:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25be0:	4622      	mov	r2, r4
   25be2:	f10d 0106 	add.w	r1, sp, #6
   25be6:	4419      	add	r1, r3
   25be8:	f7fe fd81 	bl	246ee <memcpy>
}
   25bec:	4620      	mov	r0, r4
   25bee:	b002      	add	sp, #8
   25bf0:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   25bf2:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   25bf4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   25bf8:	d806      	bhi.n	25c08 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   25bfa:	f1c3 0210 	rsb	r2, r3, #16
   25bfe:	4294      	cmp	r4, r2
   25c00:	bfa8      	it	ge
   25c02:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25c04:	4622      	mov	r2, r4
   25c06:	e7ee      	b.n	25be6 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25c08:	f06f 0406 	mvn.w	r4, #6
   25c0c:	e7ee      	b.n	25bec <bt_gatt_attr_read_service+0x30>

00025c0e <bt_gatt_attr_read_ccc>:
{
   25c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   25c10:	68c9      	ldr	r1, [r1, #12]
{
   25c12:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   25c16:	4615      	mov	r5, r2
   25c18:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   25c1a:	f7f2 faf5 	bl	18208 <find_ccc_cfg>
	if (cfg) {
   25c1e:	b100      	cbz	r0, 25c22 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   25c20:	8900      	ldrh	r0, [r0, #8]
   25c22:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25c26:	2e02      	cmp	r6, #2
   25c28:	d80e      	bhi.n	25c48 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   25c2a:	f1c6 0402 	rsb	r4, r6, #2
   25c2e:	42bc      	cmp	r4, r7
   25c30:	bfa8      	it	ge
   25c32:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25c34:	f10d 0306 	add.w	r3, sp, #6
   25c38:	4622      	mov	r2, r4
   25c3a:	1999      	adds	r1, r3, r6
   25c3c:	4628      	mov	r0, r5
   25c3e:	f7fe fd56 	bl	246ee <memcpy>
}
   25c42:	4620      	mov	r0, r4
   25c44:	b003      	add	sp, #12
   25c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25c48:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25c4c:	e7f9      	b.n	25c42 <bt_gatt_attr_read_ccc+0x34>

00025c4e <sc_restore_rsp>:
{
   25c4e:	b538      	push	{r3, r4, r5, lr}
   25c50:	4604      	mov	r4, r0
   25c52:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   25c54:	f7ff fe61 	bl	2591a <bt_att_fixed_chan_only>
   25c58:	b150      	cbz	r0, 25c70 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   25c5a:	4620      	mov	r0, r4
   25c5c:	f7f2 fa84 	bl	18168 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   25c60:	b130      	cbz	r0, 25c70 <sc_restore_rsp+0x22>
   25c62:	7a03      	ldrb	r3, [r0, #8]
   25c64:	07db      	lsls	r3, r3, #31
   25c66:	d503      	bpl.n	25c70 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25c68:	2101      	movs	r1, #1
   25c6a:	300c      	adds	r0, #12
   25c6c:	f7ff ff17 	bl	25a9e <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   25c70:	b985      	cbnz	r5, 25c94 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   25c72:	7a20      	ldrb	r0, [r4, #8]
   25c74:	f104 0190 	add.w	r1, r4, #144	; 0x90
   25c78:	f7f2 faa4 	bl	181c4 <find_sc_cfg>
		if (sc_cfg) {
   25c7c:	4604      	mov	r4, r0
   25c7e:	b148      	cbz	r0, 25c94 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   25c80:	4629      	mov	r1, r5
   25c82:	2204      	movs	r2, #4
   25c84:	3008      	adds	r0, #8
   25c86:	f7fe fd3d 	bl	24704 <memset>
		sc_store(cfg);
   25c8a:	4620      	mov	r0, r4
}
   25c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   25c90:	f7f2 bb80 	b.w	18394 <sc_store>
}
   25c94:	bd38      	pop	{r3, r4, r5, pc}

00025c96 <bt_gatt_attr_read>:
{
   25c96:	b510      	push	{r4, lr}
   25c98:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   25c9c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   25ca0:	42a1      	cmp	r1, r4
{
   25ca2:	4610      	mov	r0, r2
	if (offset > value_len) {
   25ca4:	d80b      	bhi.n	25cbe <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   25ca6:	1a64      	subs	r4, r4, r1
   25ca8:	429c      	cmp	r4, r3
   25caa:	bfa8      	it	ge
   25cac:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25cae:	9b03      	ldr	r3, [sp, #12]
   25cb0:	b2a4      	uxth	r4, r4
   25cb2:	4622      	mov	r2, r4
   25cb4:	4419      	add	r1, r3
   25cb6:	f7fe fd1a 	bl	246ee <memcpy>
}
   25cba:	4620      	mov	r0, r4
   25cbc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25cbe:	f06f 0406 	mvn.w	r4, #6
   25cc2:	e7fa      	b.n	25cba <bt_gatt_attr_read+0x24>

00025cc4 <bt_gatt_attr_value_handle>:
{
   25cc4:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25cc6:	4604      	mov	r4, r0
   25cc8:	b910      	cbnz	r0, 25cd0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   25cca:	2000      	movs	r0, #0
}
   25ccc:	b002      	add	sp, #8
   25cce:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25cd0:	2300      	movs	r3, #0
   25cd2:	f88d 3004 	strb.w	r3, [sp, #4]
   25cd6:	6800      	ldr	r0, [r0, #0]
   25cd8:	f642 0303 	movw	r3, #10243	; 0x2803
   25cdc:	a901      	add	r1, sp, #4
   25cde:	f8ad 3006 	strh.w	r3, [sp, #6]
   25ce2:	f7fe fd77 	bl	247d4 <bt_uuid_cmp>
   25ce6:	2800      	cmp	r0, #0
   25ce8:	d1ef      	bne.n	25cca <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25cea:	68e3      	ldr	r3, [r4, #12]
   25cec:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   25cee:	2800      	cmp	r0, #0
   25cf0:	d1ec      	bne.n	25ccc <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   25cf2:	4620      	mov	r0, r4
   25cf4:	f7f2 fed0 	bl	18a98 <bt_gatt_attr_get_handle>
   25cf8:	3001      	adds	r0, #1
   25cfa:	b280      	uxth	r0, r0
	return handle;
   25cfc:	e7e6      	b.n	25ccc <bt_gatt_attr_value_handle+0x8>

00025cfe <bt_gatt_attr_read_chrc>:
{
   25cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25d00:	68cc      	ldr	r4, [r1, #12]
{
   25d02:	b087      	sub	sp, #28
   25d04:	4608      	mov	r0, r1
   25d06:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   25d08:	79a3      	ldrb	r3, [r4, #6]
   25d0a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25d0e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   25d12:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25d14:	f7ff ffd6 	bl	25cc4 <bt_gatt_attr_value_handle>
   25d18:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25d1c:	6821      	ldr	r1, [r4, #0]
   25d1e:	780b      	ldrb	r3, [r1, #0]
   25d20:	b99b      	cbnz	r3, 25d4a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25d22:	884b      	ldrh	r3, [r1, #2]
   25d24:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   25d28:	2405      	movs	r4, #5
	if (offset > value_len) {
   25d2a:	42b4      	cmp	r4, r6
   25d2c:	d315      	bcc.n	25d5a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   25d2e:	1ba4      	subs	r4, r4, r6
   25d30:	42bc      	cmp	r4, r7
   25d32:	bfa8      	it	ge
   25d34:	463c      	movge	r4, r7
   25d36:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25d38:	ab01      	add	r3, sp, #4
   25d3a:	4622      	mov	r2, r4
   25d3c:	1999      	adds	r1, r3, r6
   25d3e:	4628      	mov	r0, r5
   25d40:	f7fe fcd5 	bl	246ee <memcpy>
}
   25d44:	4620      	mov	r0, r4
   25d46:	b007      	add	sp, #28
   25d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25d4a:	2210      	movs	r2, #16
   25d4c:	3101      	adds	r1, #1
   25d4e:	f10d 0007 	add.w	r0, sp, #7
   25d52:	f7fe fccc 	bl	246ee <memcpy>
		value_len += 16U;
   25d56:	2413      	movs	r4, #19
   25d58:	e7e7      	b.n	25d2a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25d5a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25d5e:	e7f1      	b.n	25d44 <bt_gatt_attr_read_chrc+0x46>

00025d60 <bt_gatt_foreach_attr>:
{
   25d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25d62:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25d66:	2300      	movs	r3, #0
   25d68:	9300      	str	r3, [sp, #0]
   25d6a:	461a      	mov	r2, r3
   25d6c:	f7f2 fed4 	bl	18b18 <bt_gatt_foreach_attr_type>
}
   25d70:	b005      	add	sp, #20
   25d72:	f85d fb04 	ldr.w	pc, [sp], #4

00025d76 <bt_gatt_check_perm>:
{
   25d76:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   25d78:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25d7a:	8a4b      	ldrh	r3, [r1, #18]
{
   25d7c:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   25d7e:	d504      	bpl.n	25d8a <bt_gatt_check_perm+0x14>
   25d80:	f013 0f95 	tst.w	r3, #149	; 0x95
   25d84:	d027      	beq.n	25dd6 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25d86:	6848      	ldr	r0, [r1, #4]
   25d88:	b328      	cbz	r0, 25dd6 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25d8a:	0790      	lsls	r0, r2, #30
   25d8c:	d504      	bpl.n	25d98 <bt_gatt_check_perm+0x22>
   25d8e:	f413 7f95 	tst.w	r3, #298	; 0x12a
   25d92:	d022      	beq.n	25dda <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25d94:	6889      	ldr	r1, [r1, #8]
   25d96:	b301      	cbz	r1, 25dda <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   25d98:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   25d9c:	f414 7fc0 	tst.w	r4, #384	; 0x180
   25da0:	d007      	beq.n	25db2 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   25da2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   25da6:	b90b      	cbnz	r3, 25dac <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   25da8:	2005      	movs	r0, #5
}
   25daa:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   25dac:	7b5b      	ldrb	r3, [r3, #13]
   25dae:	06db      	lsls	r3, r3, #27
   25db0:	d5fa      	bpl.n	25da8 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25db2:	f014 0f30 	tst.w	r4, #48	; 0x30
   25db6:	d108      	bne.n	25dca <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   25db8:	f014 000c 	ands.w	r0, r4, #12
   25dbc:	d0f5      	beq.n	25daa <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   25dbe:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   25dc0:	2b00      	cmp	r3, #0
   25dc2:	bf14      	ite	ne
   25dc4:	2000      	movne	r0, #0
   25dc6:	200f      	moveq	r0, #15
   25dc8:	e7ef      	b.n	25daa <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25dca:	4628      	mov	r0, r5
   25dcc:	f7ff f8b6 	bl	24f3c <bt_conn_get_security>
   25dd0:	2802      	cmp	r0, #2
   25dd2:	d8f1      	bhi.n	25db8 <bt_gatt_check_perm+0x42>
   25dd4:	e7e8      	b.n	25da8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25dd6:	2002      	movs	r0, #2
   25dd8:	e7e7      	b.n	25daa <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25dda:	2003      	movs	r0, #3
   25ddc:	e7e5      	b.n	25daa <bt_gatt_check_perm+0x34>

00025dde <bt_gatt_change_aware>:
{
   25dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25de0:	4605      	mov	r5, r0
   25de2:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   25de4:	f7f2 f9c0 	bl	18168 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25de8:	b1d0      	cbz	r0, 25e20 <bt_gatt_change_aware+0x42>
   25dea:	7a03      	ldrb	r3, [r0, #8]
   25dec:	07db      	lsls	r3, r3, #31
   25dee:	d517      	bpl.n	25e20 <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25df0:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   25df4:	4620      	mov	r0, r4
   25df6:	f7ff fe4c 	bl	25a92 <atomic_get>
   25dfa:	f010 0601 	ands.w	r6, r0, #1
   25dfe:	d10f      	bne.n	25e20 <bt_gatt_change_aware+0x42>
	if (!req) {
   25e00:	b17f      	cbz	r7, 25e22 <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25e02:	f06f 0102 	mvn.w	r1, #2
   25e06:	4620      	mov	r0, r4
   25e08:	f7ff fe5b 	bl	25ac2 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   25e0c:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   25e10:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   25e12:	d008      	beq.n	25e26 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   25e14:	f7ff fd83 	bl	2591e <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25e18:	2101      	movs	r1, #1
   25e1a:	4620      	mov	r0, r4
   25e1c:	f7ff fe3f 	bl	25a9e <atomic_or>
		return true;
   25e20:	2601      	movs	r6, #1
}
   25e22:	4630      	mov	r0, r6
   25e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   25e26:	f7ff fd78 	bl	2591a <bt_att_fixed_chan_only>
   25e2a:	2800      	cmp	r0, #0
   25e2c:	d0f9      	beq.n	25e22 <bt_gatt_change_aware+0x44>
   25e2e:	4628      	mov	r0, r5
   25e30:	f7ff fd8e 	bl	25950 <bt_att_out_of_sync_sent_on_fixed>
   25e34:	2800      	cmp	r0, #0
   25e36:	d0f4      	beq.n	25e22 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25e38:	f06f 0102 	mvn.w	r1, #2
   25e3c:	4620      	mov	r0, r4
   25e3e:	f7ff fe40 	bl	25ac2 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   25e42:	4628      	mov	r0, r5
   25e44:	e7e6      	b.n	25e14 <bt_gatt_change_aware+0x36>

00025e46 <ccc_delayed_store>:
{
   25e46:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   25e48:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   25e4c:	4605      	mov	r5, r0
		if (!conn) {
   25e4e:	b184      	cbz	r4, 25e72 <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25e50:	f104 0690 	add.w	r6, r4, #144	; 0x90
   25e54:	7a20      	ldrb	r0, [r4, #8]
   25e56:	4631      	mov	r1, r6
   25e58:	f7fe fdf3 	bl	24a42 <bt_addr_le_is_bonded>
   25e5c:	b148      	cbz	r0, 25e72 <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   25e5e:	2300      	movs	r3, #0
   25e60:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   25e64:	7a20      	ldrb	r0, [r4, #8]
   25e66:	4631      	mov	r1, r6
   25e68:	f7f3 fc5c 	bl	19724 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   25e6c:	4620      	mov	r0, r4
   25e6e:	f7f0 fb33 	bl	164d8 <bt_conn_unref>
}
   25e72:	bd70      	pop	{r4, r5, r6, pc}

00025e74 <smp_pairing_rsp>:
}
   25e74:	2007      	movs	r0, #7
   25e76:	4770      	bx	lr

00025e78 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25e78:	f3bf 8f5b 	dmb	ish
   25e7c:	6800      	ldr	r0, [r0, #0]
   25e7e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25e82:	4108      	asrs	r0, r1
}
   25e84:	f000 0001 	and.w	r0, r0, #1
   25e88:	4770      	bx	lr

00025e8a <update_keys_check>:
{
   25e8a:	b510      	push	{r4, lr}
   25e8c:	4603      	mov	r3, r0
	if (!keys ||
   25e8e:	b1d9      	cbz	r1, 25ec8 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   25e90:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   25e92:	f010 0f24 	tst.w	r0, #36	; 0x24
   25e96:	d017      	beq.n	25ec8 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   25e98:	7d1a      	ldrb	r2, [r3, #20]
   25e9a:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   25e9c:	7b09      	ldrb	r1, [r1, #12]
   25e9e:	42a2      	cmp	r2, r4
   25ea0:	bf28      	it	cs
   25ea2:	4622      	movcs	r2, r4
   25ea4:	4291      	cmp	r1, r2
   25ea6:	d901      	bls.n	25eac <update_keys_check+0x22>
			return false;
   25ea8:	2000      	movs	r0, #0
}
   25eaa:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   25eac:	0682      	lsls	r2, r0, #26
   25eae:	d404      	bmi.n	25eba <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   25eb0:	7a18      	ldrb	r0, [r3, #8]
   25eb2:	3800      	subs	r0, #0
   25eb4:	bf18      	it	ne
   25eb6:	2001      	movne	r0, #1
   25eb8:	e7f7      	b.n	25eaa <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   25eba:	2105      	movs	r1, #5
   25ebc:	1d18      	adds	r0, r3, #4
   25ebe:	f7ff ffdb 	bl	25e78 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   25ec2:	2800      	cmp	r0, #0
   25ec4:	d1f4      	bne.n	25eb0 <update_keys_check+0x26>
   25ec6:	e7ef      	b.n	25ea8 <update_keys_check+0x1e>
	return true;
   25ec8:	2001      	movs	r0, #1
   25eca:	e7ee      	b.n	25eaa <update_keys_check+0x20>

00025ecc <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25ecc:	2301      	movs	r3, #1
   25ece:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25ed0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25ed2:	f3bf 8f5b 	dmb	ish
   25ed6:	e850 2f00 	ldrex	r2, [r0]
   25eda:	401a      	ands	r2, r3
   25edc:	e840 2100 	strex	r1, r2, [r0]
   25ee0:	2900      	cmp	r1, #0
   25ee2:	d1f8      	bne.n	25ed6 <atomic_clear_bit+0xa>
   25ee4:	f3bf 8f5b 	dmb	ish
}
   25ee8:	4770      	bx	lr

00025eea <bt_smp_aes_cmac>:
{
   25eea:	b570      	push	{r4, r5, r6, lr}
   25eec:	b0c2      	sub	sp, #264	; 0x108
   25eee:	460d      	mov	r5, r1
   25ef0:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25ef2:	4601      	mov	r1, r0
   25ef4:	aa16      	add	r2, sp, #88	; 0x58
   25ef6:	4668      	mov	r0, sp
{
   25ef8:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25efa:	f7fe fa5e 	bl	243ba <tc_cmac_setup>
   25efe:	b918      	cbnz	r0, 25f08 <bt_smp_aes_cmac+0x1e>
		return -EIO;
   25f00:	f06f 0004 	mvn.w	r0, #4
}
   25f04:	b042      	add	sp, #264	; 0x108
   25f06:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   25f08:	4632      	mov	r2, r6
   25f0a:	4629      	mov	r1, r5
   25f0c:	4668      	mov	r0, sp
   25f0e:	f7fe fa7f 	bl	24410 <tc_cmac_update>
   25f12:	2800      	cmp	r0, #0
   25f14:	d0f4      	beq.n	25f00 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   25f16:	4669      	mov	r1, sp
   25f18:	4620      	mov	r0, r4
   25f1a:	f7fe fae3 	bl	244e4 <tc_cmac_final>
   25f1e:	2800      	cmp	r0, #0
   25f20:	d0ee      	beq.n	25f00 <bt_smp_aes_cmac+0x16>
	return 0;
   25f22:	2000      	movs	r0, #0
   25f24:	e7ee      	b.n	25f04 <bt_smp_aes_cmac+0x1a>

00025f26 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   25f26:	2007      	movs	r0, #7
   25f28:	4770      	bx	lr

00025f2a <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   25f2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25f2c:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   25f2e:	2200      	movs	r2, #0
   25f30:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   25f32:	4604      	mov	r4, r0
   25f34:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   25f36:	460a      	mov	r2, r1
   25f38:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   25f3c:	2106      	movs	r1, #6
   25f3e:	f7ff f898 	bl	25072 <bt_l2cap_send_cb>
   25f42:	b128      	cbz	r0, 25f50 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   25f44:	4628      	mov	r0, r5
}
   25f46:	b003      	add	sp, #12
   25f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   25f4c:	f7f5 bcf8 	b.w	1b940 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   25f50:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25f54:	2300      	movs	r3, #0
   25f56:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   25f5a:	b003      	add	sp, #12
   25f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   25f60:	f7fb b846 	b.w	20ff0 <k_work_reschedule>

00025f64 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   25f64:	b510      	push	{r4, lr}
   25f66:	1e43      	subs	r3, r0, #1
   25f68:	f100 0210 	add.w	r2, r0, #16
   25f6c:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   25f6e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   25f72:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   25f76:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   25f78:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   25f7a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   25f7c:	d1f7      	bne.n	25f6e <sys_mem_swap.constprop.0+0xa>
	}
}
   25f7e:	bd10      	pop	{r4, pc}

00025f80 <smp_f6>:
{
   25f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f82:	b097      	sub	sp, #92	; 0x5c
   25f84:	4605      	mov	r5, r0
   25f86:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   25f88:	a805      	add	r0, sp, #20
   25f8a:	2210      	movs	r2, #16
{
   25f8c:	461c      	mov	r4, r3
   25f8e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   25f90:	f7f3 fd28 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   25f94:	2210      	movs	r2, #16
   25f96:	4631      	mov	r1, r6
   25f98:	a809      	add	r0, sp, #36	; 0x24
   25f9a:	f7f3 fd23 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   25f9e:	4621      	mov	r1, r4
   25fa0:	2210      	movs	r2, #16
   25fa2:	a80d      	add	r0, sp, #52	; 0x34
   25fa4:	f7f3 fd1e 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   25fa8:	991c      	ldr	r1, [sp, #112]	; 0x70
   25faa:	2203      	movs	r2, #3
   25fac:	a811      	add	r0, sp, #68	; 0x44
   25fae:	f7f3 fd19 	bl	199e4 <sys_memcpy_swap>
	m[51] = a1->type;
   25fb2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   25fb4:	f814 3b01 	ldrb.w	r3, [r4], #1
   25fb8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   25fbc:	4621      	mov	r1, r4
   25fbe:	2206      	movs	r2, #6
   25fc0:	a812      	add	r0, sp, #72	; 0x48
   25fc2:	f7fe fb94 	bl	246ee <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   25fc6:	4621      	mov	r1, r4
   25fc8:	2206      	movs	r2, #6
   25fca:	a812      	add	r0, sp, #72	; 0x48
   25fcc:	f7f3 fd0a 	bl	199e4 <sys_memcpy_swap>
	m[58] = a2->type;
   25fd0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   25fd2:	f814 3b01 	ldrb.w	r3, [r4], #1
   25fd6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   25fda:	4621      	mov	r1, r4
   25fdc:	2206      	movs	r2, #6
   25fde:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   25fe2:	f7fe fb84 	bl	246ee <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   25fe6:	4621      	mov	r1, r4
   25fe8:	2206      	movs	r2, #6
   25fea:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   25fee:	f7f3 fcf9 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   25ff2:	2210      	movs	r2, #16
   25ff4:	4629      	mov	r1, r5
   25ff6:	a801      	add	r0, sp, #4
   25ff8:	f7f3 fcf4 	bl	199e4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   25ffc:	463b      	mov	r3, r7
   25ffe:	2241      	movs	r2, #65	; 0x41
   26000:	a905      	add	r1, sp, #20
   26002:	a801      	add	r0, sp, #4
   26004:	f7ff ff71 	bl	25eea <bt_smp_aes_cmac>
	if (err) {
   26008:	4604      	mov	r4, r0
   2600a:	b910      	cbnz	r0, 26012 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   2600c:	4638      	mov	r0, r7
   2600e:	f7ff ffa9 	bl	25f64 <sys_mem_swap.constprop.0>
}
   26012:	4620      	mov	r0, r4
   26014:	b017      	add	sp, #92	; 0x5c
   26016:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026018 <smp_f4>:
{
   26018:	b5f0      	push	{r4, r5, r6, r7, lr}
   2601a:	b097      	sub	sp, #92	; 0x5c
   2601c:	4614      	mov	r4, r2
   2601e:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   26020:	2220      	movs	r2, #32
   26022:	4601      	mov	r1, r0
   26024:	a805      	add	r0, sp, #20
{
   26026:	461d      	mov	r5, r3
   26028:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2602a:	f7f3 fcdb 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2602e:	2220      	movs	r2, #32
   26030:	4631      	mov	r1, r6
   26032:	a80d      	add	r0, sp, #52	; 0x34
   26034:	f7f3 fcd6 	bl	199e4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   26038:	4621      	mov	r1, r4
   2603a:	2210      	movs	r2, #16
   2603c:	a801      	add	r0, sp, #4
	m[64] = z;
   2603e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   26042:	f7f3 fccf 	bl	199e4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   26046:	463b      	mov	r3, r7
   26048:	2241      	movs	r2, #65	; 0x41
   2604a:	a905      	add	r1, sp, #20
   2604c:	a801      	add	r0, sp, #4
   2604e:	f7ff ff4c 	bl	25eea <bt_smp_aes_cmac>
	if (err) {
   26052:	4604      	mov	r4, r0
   26054:	b910      	cbnz	r0, 2605c <smp_f4+0x44>
	sys_mem_swap(res, 16);
   26056:	4638      	mov	r0, r7
   26058:	f7ff ff84 	bl	25f64 <sys_mem_swap.constprop.0>
}
   2605c:	4620      	mov	r0, r4
   2605e:	b017      	add	sp, #92	; 0x5c
   26060:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026062 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26062:	2301      	movs	r3, #1
   26064:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26066:	f3bf 8f5b 	dmb	ish
   2606a:	e850 2f00 	ldrex	r2, [r0]
   2606e:	431a      	orrs	r2, r3
   26070:	e840 2100 	strex	r1, r2, [r0]
   26074:	2900      	cmp	r1, #0
   26076:	d1f8      	bne.n	2606a <atomic_set_bit+0x8>
   26078:	f3bf 8f5b 	dmb	ish
}
   2607c:	4770      	bx	lr

0002607e <smp_keypress_notif>:
{
   2607e:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   26080:	210e      	movs	r1, #14
   26082:	f7ff ffee 	bl	26062 <atomic_set_bit>
}
   26086:	2000      	movs	r0, #0
   26088:	bd08      	pop	{r3, pc}

0002608a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2608a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2608c:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2608e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   26090:	4628      	mov	r0, r5
   26092:	2104      	movs	r1, #4
   26094:	f7ff fef0 	bl	25e78 <atomic_test_bit>
   26098:	b168      	cbz	r0, 260b6 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2609a:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2609c:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2609e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   260a0:	4608      	mov	r0, r1
   260a2:	f7fe ffe3 	bl	2506c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   260a6:	4604      	mov	r4, r0
   260a8:	b940      	cbnz	r0, 260bc <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   260aa:	2104      	movs	r1, #4
   260ac:	4628      	mov	r0, r5
   260ae:	f7ff ffd8 	bl	26062 <atomic_set_bit>
}
   260b2:	4620      	mov	r0, r4
   260b4:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   260b6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   260ba:	e7ef      	b.n	2609c <smp_create_pdu.constprop.0+0x12>
   260bc:	2101      	movs	r1, #1
   260be:	3008      	adds	r0, #8
   260c0:	f7f5 fd44 	bl	1bb4c <net_buf_simple_add>
	hdr->code = op;
   260c4:	7006      	strb	r6, [r0, #0]
	return buf;
   260c6:	e7f4      	b.n	260b2 <smp_create_pdu.constprop.0+0x28>

000260c8 <send_pairing_rsp>:
{
   260c8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   260ca:	2102      	movs	r1, #2
{
   260cc:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   260ce:	f7ff ffdc 	bl	2608a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   260d2:	4604      	mov	r4, r0
   260d4:	b178      	cbz	r0, 260f6 <send_pairing_rsp+0x2e>
   260d6:	2106      	movs	r1, #6
   260d8:	3008      	adds	r0, #8
   260da:	f7f5 fd37 	bl	1bb4c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   260de:	2206      	movs	r2, #6
   260e0:	f105 0111 	add.w	r1, r5, #17
   260e4:	f7fe fb03 	bl	246ee <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   260e8:	4628      	mov	r0, r5
   260ea:	2200      	movs	r2, #0
   260ec:	4621      	mov	r1, r4
   260ee:	f7ff ff1c 	bl	25f2a <smp_send.constprop.0>
	return 0;
   260f2:	2000      	movs	r0, #0
}
   260f4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   260f6:	2008      	movs	r0, #8
   260f8:	e7fc      	b.n	260f4 <send_pairing_rsp+0x2c>

000260fa <smp_send_pairing_random>:
{
   260fa:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   260fc:	2104      	movs	r1, #4
{
   260fe:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26100:	f7ff ffc3 	bl	2608a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   26104:	4604      	mov	r4, r0
   26106:	b178      	cbz	r0, 26128 <smp_send_pairing_random+0x2e>
   26108:	2110      	movs	r1, #16
   2610a:	3008      	adds	r0, #8
   2610c:	f7f5 fd1e 	bl	1bb4c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   26110:	2210      	movs	r2, #16
   26112:	f105 0127 	add.w	r1, r5, #39	; 0x27
   26116:	f7fe faea 	bl	246ee <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2611a:	4628      	mov	r0, r5
   2611c:	2200      	movs	r2, #0
   2611e:	4621      	mov	r1, r4
   26120:	f7ff ff03 	bl	25f2a <smp_send.constprop.0>
	return 0;
   26124:	2000      	movs	r0, #0
}
   26126:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26128:	2008      	movs	r0, #8
   2612a:	e7fc      	b.n	26126 <smp_send_pairing_random+0x2c>

0002612c <smp_dhkey_check>:
{
   2612c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2612e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   26132:	78db      	ldrb	r3, [r3, #3]
   26134:	2b01      	cmp	r3, #1
{
   26136:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   26138:	d114      	bne.n	26164 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2613a:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2613c:	1d05      	adds	r5, r0, #4
   2613e:	2110      	movs	r1, #16
   26140:	4628      	mov	r0, r5
   26142:	f7ff fec3 	bl	25ecc <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   26146:	4631      	mov	r1, r6
   26148:	2210      	movs	r2, #16
   2614a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2614e:	f7fe face 	bl	246ee <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   26152:	2107      	movs	r1, #7
   26154:	4628      	mov	r0, r5
   26156:	f7ff fe8f 	bl	25e78 <atomic_test_bit>
   2615a:	b128      	cbz	r0, 26168 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2615c:	2109      	movs	r1, #9
   2615e:	4628      	mov	r0, r5
   26160:	f7ff ff7f 	bl	26062 <atomic_set_bit>
}
   26164:	2000      	movs	r0, #0
   26166:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26168:	210a      	movs	r1, #10
   2616a:	4628      	mov	r0, r5
   2616c:	f7ff fe84 	bl	25e78 <atomic_test_bit>
   26170:	2800      	cmp	r0, #0
   26172:	d1f3      	bne.n	2615c <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   26174:	4620      	mov	r0, r4
}
   26176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2617a:	f7f3 bfc1 	b.w	1a100 <compute_and_check_and_send_periph_dhcheck>

0002617e <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2617e:	2007      	movs	r0, #7
   26180:	4770      	bx	lr

00026182 <atomic_test_and_clear_bit>:
{
   26182:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26184:	2301      	movs	r3, #1
   26186:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2618a:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2618c:	f3bf 8f5b 	dmb	ish
   26190:	e850 3f00 	ldrex	r3, [r0]
   26194:	ea03 0402 	and.w	r4, r3, r2
   26198:	e840 4500 	strex	r5, r4, [r0]
   2619c:	2d00      	cmp	r5, #0
   2619e:	d1f7      	bne.n	26190 <atomic_test_and_clear_bit+0xe>
   261a0:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   261a4:	4219      	tst	r1, r3
}
   261a6:	bf14      	ite	ne
   261a8:	2001      	movne	r0, #1
   261aa:	2000      	moveq	r0, #0
   261ac:	bd30      	pop	{r4, r5, pc}

000261ae <smp_reset>:
{
   261ae:	b538      	push	{r3, r4, r5, lr}
   261b0:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   261b2:	1d03      	adds	r3, r0, #4
   261b4:	2500      	movs	r5, #0
   261b6:	f3bf 8f5b 	dmb	ish
   261ba:	e853 2f00 	ldrex	r2, [r3]
   261be:	e843 5100 	strex	r1, r5, [r3]
   261c2:	2900      	cmp	r1, #0
   261c4:	d1f9      	bne.n	261ba <smp_reset+0xc>
   261c6:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   261ca:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   261ce:	f7fa ff15 	bl	20ffc <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   261d2:	7225      	strb	r5, [r4, #8]
   261d4:	f3bf 8f5b 	dmb	ish
   261d8:	e854 3f00 	ldrex	r3, [r4]
   261dc:	e844 5200 	strex	r2, r5, [r4]
   261e0:	2a00      	cmp	r2, #0
   261e2:	d1f9      	bne.n	261d8 <smp_reset+0x2a>
   261e4:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   261e8:	4620      	mov	r0, r4
   261ea:	2101      	movs	r1, #1
}
   261ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   261f0:	f7ff bf37 	b.w	26062 <atomic_set_bit>

000261f4 <smp_c1>:
{
   261f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   261f8:	b089      	sub	sp, #36	; 0x24
   261fa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   261fe:	4699      	mov	r9, r3
	p1[0] = ia->type;
   26200:	783b      	ldrb	r3, [r7, #0]
{
   26202:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   26204:	f88d 3000 	strb.w	r3, [sp]
{
   26208:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2620a:	f898 3000 	ldrb.w	r3, [r8]
   2620e:	f88d 3001 	strb.w	r3, [sp, #1]
{
   26212:	4611      	mov	r1, r2
   26214:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   26216:	2207      	movs	r2, #7
   26218:	f10d 0002 	add.w	r0, sp, #2
   2621c:	f7fe fa67 	bl	246ee <memcpy>
	memcpy(p1 + 9, pres, 7);
   26220:	2207      	movs	r2, #7
   26222:	4649      	mov	r1, r9
   26224:	f10d 0009 	add.w	r0, sp, #9
   26228:	f7fe fa61 	bl	246ee <memcpy>
	while (len--) {
   2622c:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   26230:	462a      	mov	r2, r5
   26232:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   26234:	f814 3b01 	ldrb.w	r3, [r4], #1
   26238:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   2623c:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   2623e:	ea83 030c 	eor.w	r3, r3, ip
   26242:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   26246:	d1f5      	bne.n	26234 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   26248:	462a      	mov	r2, r5
   2624a:	4629      	mov	r1, r5
   2624c:	4630      	mov	r0, r6
   2624e:	f000 fc43 	bl	26ad8 <bt_encrypt_le>
	if (err) {
   26252:	4604      	mov	r4, r0
   26254:	bb20      	cbnz	r0, 262a0 <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   26256:	2206      	movs	r2, #6
   26258:	f108 0101 	add.w	r1, r8, #1
   2625c:	a804      	add	r0, sp, #16
   2625e:	f7fe fa46 	bl	246ee <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   26262:	2206      	movs	r2, #6
   26264:	1c79      	adds	r1, r7, #1
   26266:	f10d 0016 	add.w	r0, sp, #22
   2626a:	f7fe fa40 	bl	246ee <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2626e:	2204      	movs	r2, #4
   26270:	4621      	mov	r1, r4
   26272:	a807      	add	r0, sp, #28
   26274:	f7fe fa46 	bl	24704 <memset>
	while (len--) {
   26278:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   2627c:	462a      	mov	r2, r5
   2627e:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   26280:	f812 1b01 	ldrb.w	r1, [r2], #1
   26284:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   26288:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   2628a:	ea81 0104 	eor.w	r1, r1, r4
   2628e:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   26292:	d1f5      	bne.n	26280 <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   26294:	462a      	mov	r2, r5
   26296:	4629      	mov	r1, r5
   26298:	4630      	mov	r0, r6
   2629a:	f000 fc1d 	bl	26ad8 <bt_encrypt_le>
   2629e:	4604      	mov	r4, r0
}
   262a0:	4620      	mov	r0, r4
   262a2:	b009      	add	sp, #36	; 0x24
   262a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000262a8 <legacy_pairing_confirm>:
{
   262a8:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   262aa:	1d07      	adds	r7, r0, #4
{
   262ac:	b085      	sub	sp, #20
   262ae:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   262b0:	210a      	movs	r1, #10
   262b2:	4638      	mov	r0, r7
   262b4:	f7ff fde0 	bl	25e78 <atomic_test_bit>
   262b8:	bb88      	cbnz	r0, 2631e <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   262ba:	2104      	movs	r1, #4
   262bc:	4620      	mov	r0, r4
   262be:	f7ff fed0 	bl	26062 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   262c2:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   262c4:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   262c8:	f7ff fedf 	bl	2608a <smp_create_pdu.constprop.0>
	if (!buf) {
   262cc:	4605      	mov	r5, r0
   262ce:	b1c0      	cbz	r0, 26302 <legacy_pairing_confirm+0x5a>
   262d0:	2110      	movs	r1, #16
   262d2:	3008      	adds	r0, #8
   262d4:	f7f5 fc3a 	bl	1bb4c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   262d8:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   262dc:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   262de:	9002      	str	r0, [sp, #8]
   262e0:	9301      	str	r3, [sp, #4]
   262e2:	9600      	str	r6, [sp, #0]
   262e4:	f104 0310 	add.w	r3, r4, #16
   262e8:	f104 0209 	add.w	r2, r4, #9
   262ec:	f104 0127 	add.w	r1, r4, #39	; 0x27
   262f0:	f104 0047 	add.w	r0, r4, #71	; 0x47
   262f4:	f7ff ff7e 	bl	261f4 <smp_c1>
   262f8:	4606      	mov	r6, r0
   262fa:	b128      	cbz	r0, 26308 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   262fc:	4628      	mov	r0, r5
   262fe:	f7f5 fb1f 	bl	1b940 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26302:	2008      	movs	r0, #8
}
   26304:	b005      	add	sp, #20
   26306:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   26308:	4602      	mov	r2, r0
   2630a:	4629      	mov	r1, r5
   2630c:	4620      	mov	r0, r4
   2630e:	f7ff fe0c 	bl	25f2a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26312:	4631      	mov	r1, r6
   26314:	4638      	mov	r0, r7
   26316:	f7ff fdd9 	bl	25ecc <atomic_clear_bit>
	return 0;
   2631a:	2000      	movs	r0, #0
   2631c:	e7f2      	b.n	26304 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2631e:	2100      	movs	r1, #0
   26320:	4638      	mov	r0, r7
   26322:	f7ff fe9e 	bl	26062 <atomic_set_bit>
	return 0;
   26326:	e7f8      	b.n	2631a <legacy_pairing_confirm+0x72>

00026328 <bt_smp_request_ltk>:
{
   26328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2632c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2632e:	e9cd 2300 	strd	r2, r3, [sp]
   26332:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   26334:	f7f3 fb2a 	bl	1998c <smp_chan_get>
	if (!smp) {
   26338:	4605      	mov	r5, r0
   2633a:	2800      	cmp	r0, #0
   2633c:	d07c      	beq.n	26438 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2633e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26342:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   26344:	f1b8 0f00 	cmp.w	r8, #0
   26348:	d128      	bne.n	2639c <bt_smp_request_ltk+0x74>
   2634a:	e9dd 3200 	ldrd	r3, r2, [sp]
   2634e:	4313      	orrs	r3, r2
   26350:	d124      	bne.n	2639c <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26352:	2103      	movs	r1, #3
   26354:	4630      	mov	r0, r6
   26356:	f7ff fd8f 	bl	25e78 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2635a:	b1f8      	cbz	r0, 2639c <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2635c:	2101      	movs	r1, #1
   2635e:	4630      	mov	r0, r6
   26360:	f7ff fd8a 	bl	25e78 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26364:	b1d0      	cbz	r0, 2639c <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   26366:	7d2c      	ldrb	r4, [r5, #20]
   26368:	7b6b      	ldrb	r3, [r5, #13]
   2636a:	429c      	cmp	r4, r3
   2636c:	bf28      	it	cs
   2636e:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   26370:	4622      	mov	r2, r4
   26372:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   26376:	4638      	mov	r0, r7
   26378:	f7fe f9b9 	bl	246ee <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2637c:	2c0f      	cmp	r4, #15
   2637e:	d805      	bhi.n	2638c <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   26380:	f1c4 0210 	rsb	r2, r4, #16
   26384:	4641      	mov	r1, r8
   26386:	1938      	adds	r0, r7, r4
   26388:	f7fe f9bc 	bl	24704 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2638c:	4630      	mov	r0, r6
   2638e:	2101      	movs	r1, #1
   26390:	f7ff fe67 	bl	26062 <atomic_set_bit>
		return true;
   26394:	2001      	movs	r0, #1
}
   26396:	b002      	add	sp, #8
   26398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2639c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   263a0:	b983      	cbnz	r3, 263c4 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   263a2:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   263a6:	7a21      	ldrb	r1, [r4, #8]
   263a8:	4642      	mov	r2, r8
   263aa:	2020      	movs	r0, #32
   263ac:	f7f4 feca 	bl	1b144 <bt_keys_find>
   263b0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   263b4:	b930      	cbnz	r0, 263c4 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   263b6:	7a21      	ldrb	r1, [r4, #8]
   263b8:	4642      	mov	r2, r8
   263ba:	2001      	movs	r0, #1
   263bc:	f7f4 fec2 	bl	1b144 <bt_keys_find>
   263c0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   263c4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   263c8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   263cc:	f1b8 0f00 	cmp.w	r8, #0
   263d0:	d10c      	bne.n	263ec <bt_smp_request_ltk+0xc4>
   263d2:	e9dd 3200 	ldrd	r3, r2, [sp]
   263d6:	4313      	orrs	r3, r2
   263d8:	d108      	bne.n	263ec <bt_smp_request_ltk+0xc4>
   263da:	b300      	cbz	r0, 2641e <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   263dc:	89c3      	ldrh	r3, [r0, #14]
   263de:	069a      	lsls	r2, r3, #26
   263e0:	d505      	bpl.n	263ee <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   263e2:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   263e4:	f100 011a 	add.w	r1, r0, #26
   263e8:	4622      	mov	r2, r4
   263ea:	e7c4      	b.n	26376 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   263ec:	b1b8      	cbz	r0, 2641e <bt_smp_request_ltk+0xf6>
   263ee:	89c3      	ldrh	r3, [r0, #14]
   263f0:	07db      	lsls	r3, r3, #31
   263f2:	d514      	bpl.n	2641e <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   263f4:	2208      	movs	r2, #8
   263f6:	4669      	mov	r1, sp
   263f8:	3040      	adds	r0, #64	; 0x40
   263fa:	f7fe f968 	bl	246ce <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   263fe:	b970      	cbnz	r0, 2641e <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   26400:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   26404:	2202      	movs	r2, #2
   26406:	a908      	add	r1, sp, #32
   26408:	3048      	adds	r0, #72	; 0x48
   2640a:	f7fe f960 	bl	246ce <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2640e:	4680      	mov	r8, r0
   26410:	b928      	cbnz	r0, 2641e <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   26412:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   26416:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   26418:	314a      	adds	r1, #74	; 0x4a
   2641a:	4622      	mov	r2, r4
   2641c:	e7ab      	b.n	26376 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2641e:	210f      	movs	r1, #15
   26420:	4630      	mov	r0, r6
   26422:	f7ff fd29 	bl	25e78 <atomic_test_bit>
   26426:	b120      	cbz	r0, 26432 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   26428:	2202      	movs	r2, #2
   2642a:	2106      	movs	r1, #6
   2642c:	4620      	mov	r0, r4
   2642e:	f7f0 fa91 	bl	16954 <bt_conn_security_changed>
	smp_reset(smp);
   26432:	4628      	mov	r0, r5
   26434:	f7ff febb 	bl	261ae <smp_reset>
		return false;
   26438:	2000      	movs	r0, #0
   2643a:	e7ac      	b.n	26396 <bt_smp_request_ltk+0x6e>

0002643c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2643c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26440:	4770      	bx	lr

00026442 <bt_smp_dhkey_ready>:
{
   26442:	b570      	push	{r4, r5, r6, lr}
   26444:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   26446:	2008      	movs	r0, #8
   26448:	f7f3 fa30 	bl	198ac <smp_find>
	if (smp) {
   2644c:	4604      	mov	r4, r0
   2644e:	b1b8      	cbz	r0, 26480 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   26450:	1d05      	adds	r5, r0, #4
   26452:	2108      	movs	r1, #8
   26454:	4628      	mov	r0, r5
   26456:	f7ff fd39 	bl	25ecc <atomic_clear_bit>
	if (!dhkey) {
   2645a:	b38e      	cbz	r6, 264c0 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2645c:	2107      	movs	r1, #7
   2645e:	f7ff fd35 	bl	25ecc <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   26462:	4631      	mov	r1, r6
   26464:	2220      	movs	r2, #32
   26466:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2646a:	f7fe f940 	bl	246ee <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2646e:	210a      	movs	r1, #10
   26470:	4628      	mov	r0, r5
   26472:	f7ff fd01 	bl	25e78 <atomic_test_bit>
   26476:	b168      	cbz	r0, 26494 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26478:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2647a:	4628      	mov	r0, r5
   2647c:	f7ff fdf1 	bl	26062 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   26480:	2007      	movs	r0, #7
   26482:	f7f3 fa13 	bl	198ac <smp_find>
		if (smp) {
   26486:	4604      	mov	r4, r0
   26488:	b118      	cbz	r0, 26492 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2648a:	f7f3 faeb 	bl	19a64 <smp_dhkey_generate>
			if (err) {
   2648e:	4601      	mov	r1, r0
   26490:	b990      	cbnz	r0, 264b8 <bt_smp_dhkey_ready+0x76>
}
   26492:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26494:	2110      	movs	r1, #16
   26496:	4628      	mov	r0, r5
   26498:	f7ff fcee 	bl	25e78 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2649c:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2649e:	2800      	cmp	r0, #0
   264a0:	d1eb      	bne.n	2647a <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   264a2:	4628      	mov	r0, r5
   264a4:	f7ff fce8 	bl	25e78 <atomic_test_bit>
   264a8:	2800      	cmp	r0, #0
   264aa:	d0e9      	beq.n	26480 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   264ac:	4620      	mov	r0, r4
   264ae:	f7f3 fe27 	bl	1a100 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   264b2:	4601      	mov	r1, r0
   264b4:	2800      	cmp	r0, #0
   264b6:	d0e3      	beq.n	26480 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   264b8:	4620      	mov	r0, r4
   264ba:	f7f4 f9db 	bl	1a874 <smp_error>
   264be:	e7df      	b.n	26480 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   264c0:	210b      	movs	r1, #11
   264c2:	e7f9      	b.n	264b8 <bt_smp_dhkey_ready+0x76>

000264c4 <bt_smp_disconnected>:
{
   264c4:	b570      	push	{r4, r5, r6, lr}
   264c6:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   264c8:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   264cc:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   264d0:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   264d2:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   264d6:	f7fa fd91 	bl	20ffc <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   264da:	2103      	movs	r1, #3
   264dc:	4620      	mov	r0, r4
   264de:	f7ff fccb 	bl	25e78 <atomic_test_bit>
   264e2:	b1a0      	cbz	r0, 2650e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   264e4:	2108      	movs	r1, #8
   264e6:	4630      	mov	r0, r6
   264e8:	f7f4 f940 	bl	1a76c <smp_pairing_complete>
	if (keys) {
   264ec:	b13d      	cbz	r5, 264fe <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   264ee:	89eb      	ldrh	r3, [r5, #14]
   264f0:	b113      	cbz	r3, 264f8 <bt_smp_disconnected+0x34>
   264f2:	7b6b      	ldrb	r3, [r5, #13]
   264f4:	079b      	lsls	r3, r3, #30
   264f6:	d502      	bpl.n	264fe <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   264f8:	4628      	mov	r0, r5
   264fa:	f7f4 fef9 	bl	1b2f0 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   264fe:	4630      	mov	r0, r6
   26500:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
}
   26504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   26508:	2100      	movs	r1, #0
   2650a:	f7fe b8fb 	b.w	24704 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2650e:	2101      	movs	r1, #1
   26510:	4620      	mov	r0, r4
   26512:	f7ff fcb1 	bl	25e78 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26516:	2800      	cmp	r0, #0
   26518:	d1e4      	bne.n	264e4 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2651a:	210f      	movs	r1, #15
   2651c:	4620      	mov	r0, r4
   2651e:	f7ff fcab 	bl	25e78 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26522:	2800      	cmp	r0, #0
   26524:	d1de      	bne.n	264e4 <bt_smp_disconnected+0x20>
   26526:	e7e1      	b.n	264ec <bt_smp_disconnected+0x28>

00026528 <fixed_data_unref>:
}
   26528:	4770      	bx	lr

0002652a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2652a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2652c:	6849      	ldr	r1, [r1, #4]
   2652e:	6809      	ldr	r1, [r1, #0]
   26530:	f7f4 bffc 	b.w	1b52c <net_buf_alloc_len>

00026534 <net_buf_simple_pull_le16>:
{
   26534:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   26536:	6803      	ldr	r3, [r0, #0]
   26538:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2653a:	2102      	movs	r1, #2
   2653c:	f7f5 fad2 	bl	1bae4 <net_buf_simple_pull>
}
   26540:	4620      	mov	r0, r4
   26542:	bd10      	pop	{r4, pc}

00026544 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   26544:	6802      	ldr	r2, [r0, #0]
   26546:	6880      	ldr	r0, [r0, #8]
}
   26548:	1a10      	subs	r0, r2, r0
   2654a:	4770      	bx	lr

0002654c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2654c:	8883      	ldrh	r3, [r0, #4]
   2654e:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   26550:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26552:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   26554:	6803      	ldr	r3, [r0, #0]
   26556:	1a5b      	subs	r3, r3, r1
}
   26558:	1ad0      	subs	r0, r2, r3
   2655a:	4770      	bx	lr

0002655c <net_buf_simple_add_mem>:
{
   2655c:	b538      	push	{r3, r4, r5, lr}
   2655e:	460d      	mov	r5, r1
   26560:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26562:	4611      	mov	r1, r2
   26564:	f7f5 faf2 	bl	1bb4c <net_buf_simple_add>
   26568:	4622      	mov	r2, r4
   2656a:	4629      	mov	r1, r5
}
   2656c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26570:	f7fe b8bd 	b.w	246ee <memcpy>

00026574 <net_buf_simple_add_u8>:
{
   26574:	b510      	push	{r4, lr}
   26576:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   26578:	2101      	movs	r1, #1
   2657a:	f7f5 fae7 	bl	1bb4c <net_buf_simple_add>
	*u8 = val;
   2657e:	7004      	strb	r4, [r0, #0]
}
   26580:	bd10      	pop	{r4, pc}

00026582 <adc_context_on_timer_expired>:
{
   26582:	b410      	push	{r4}
   26584:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26586:	3808      	subs	r0, #8
   26588:	f3bf 8f5b 	dmb	ish
   2658c:	e850 2f00 	ldrex	r2, [r0]
   26590:	1c51      	adds	r1, r2, #1
   26592:	e840 1400 	strex	r4, r1, [r0]
   26596:	2c00      	cmp	r4, #0
   26598:	d1f8      	bne.n	2658c <adc_context_on_timer_expired+0xa>
   2659a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2659e:	b912      	cbnz	r2, 265a6 <adc_context_on_timer_expired+0x24>
}
   265a0:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   265a2:	f7f5 bafd 	b.w	1bba0 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   265a6:	f06f 020f 	mvn.w	r2, #15
}
   265aa:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   265ac:	669a      	str	r2, [r3, #104]	; 0x68
}
   265ae:	4770      	bx	lr

000265b0 <set_on_state>:
	__asm__ volatile(
   265b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   265b4:	f3ef 8211 	mrs	r2, BASEPRI
   265b8:	f383 8812 	msr	BASEPRI_MAX, r3
   265bc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   265c0:	6803      	ldr	r3, [r0, #0]
   265c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   265c6:	f043 0302 	orr.w	r3, r3, #2
   265ca:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   265cc:	f382 8811 	msr	BASEPRI, r2
   265d0:	f3bf 8f6f 	isb	sy
}
   265d4:	4770      	bx	lr

000265d6 <async_start>:
{
   265d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265d8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   265da:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   265dc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   265de:	f04f 0540 	mov.w	r5, #64	; 0x40
   265e2:	f3ef 8611 	mrs	r6, BASEPRI
   265e6:	f385 8812 	msr	BASEPRI_MAX, r5
   265ea:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   265ee:	250c      	movs	r5, #12
   265f0:	4369      	muls	r1, r5
   265f2:	440c      	add	r4, r1
   265f4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   265f6:	f005 0c07 	and.w	ip, r5, #7
   265fa:	f1bc 0f01 	cmp.w	ip, #1
   265fe:	d10b      	bne.n	26618 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   26600:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   26602:	f386 8811 	msr	BASEPRI, r6
   26606:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2660a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2660e:	6843      	ldr	r3, [r0, #4]
   26610:	585b      	ldr	r3, [r3, r1]
   26612:	4798      	blx	r3
	return 0;
   26614:	2000      	movs	r0, #0
}
   26616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   26618:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2661c:	42af      	cmp	r7, r5
   2661e:	f386 8811 	msr	BASEPRI, r6
   26622:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   26626:	bf0c      	ite	eq
   26628:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2662c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26630:	e7f1      	b.n	26616 <async_start+0x40>

00026632 <api_start>:
{
   26632:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   26634:	2480      	movs	r4, #128	; 0x80
   26636:	9400      	str	r4, [sp, #0]
   26638:	f7ff ffcd 	bl	265d6 <async_start>
}
   2663c:	b002      	add	sp, #8
   2663e:	bd10      	pop	{r4, pc}

00026640 <onoff_started_callback>:
	return &data->mgr[type];
   26640:	6900      	ldr	r0, [r0, #16]
   26642:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   26644:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   26648:	2100      	movs	r1, #0
   2664a:	4710      	bx	r2

0002664c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2664c:	2000      	movs	r0, #0
   2664e:	f7f8 ba45 	b.w	1eadc <nrfx_clock_stop>

00026652 <blocking_start_callback>:
{
   26652:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   26654:	f7fa b83c 	b.w	206d0 <z_impl_k_sem_give>

00026658 <api_stop>:
	return stop(dev, subsys, CTX_API);
   26658:	2280      	movs	r2, #128	; 0x80
   2665a:	f7f5 bd15 	b.w	1c088 <stop>

0002665e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2665e:	6843      	ldr	r3, [r0, #4]
   26660:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26662:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   26666:	600b      	str	r3, [r1, #0]
}
   26668:	2000      	movs	r0, #0
   2666a:	4770      	bx	lr

0002666c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2666c:	6843      	ldr	r3, [r0, #4]
   2666e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   26670:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   26674:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   26678:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2667c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   26680:	2000      	movs	r0, #0
   26682:	4770      	bx	lr

00026684 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26684:	6843      	ldr	r3, [r0, #4]
   26686:	685b      	ldr	r3, [r3, #4]
}
   26688:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2668a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2668e:	4770      	bx	lr

00026690 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26690:	6843      	ldr	r3, [r0, #4]
   26692:	685b      	ldr	r3, [r3, #4]
}
   26694:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26696:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2669a:	4770      	bx	lr

0002669c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2669c:	6843      	ldr	r3, [r0, #4]
   2669e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   266a0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   266a4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   266a8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   266aa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   266ae:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   266b2:	2000      	movs	r0, #0
   266b4:	4770      	bx	lr

000266b6 <erase_op>:
{
   266b6:	b570      	push	{r4, r5, r6, lr}
   266b8:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   266ba:	f000 fb10 	bl	26cde <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   266be:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   266c0:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   266c2:	b10b      	cbz	r3, 266c8 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   266c4:	f000 fa6c 	bl	26ba0 <nrf_flash_sync_get_timestamp_begin>
{
   266c8:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   266ca:	6860      	ldr	r0, [r4, #4]
   266cc:	f7f9 f8b2 	bl	1f834 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   266d0:	68a3      	ldr	r3, [r4, #8]
   266d2:	1b5b      	subs	r3, r3, r5
   266d4:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   266d6:	6863      	ldr	r3, [r4, #4]
   266d8:	442b      	add	r3, r5
   266da:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   266dc:	7b23      	ldrb	r3, [r4, #12]
		i++;
   266de:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   266e0:	b93b      	cbnz	r3, 266f2 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   266e2:	68a3      	ldr	r3, [r4, #8]
   266e4:	2b00      	cmp	r3, #0
   266e6:	d1f0      	bne.n	266ca <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   266e8:	68a0      	ldr	r0, [r4, #8]
}
   266ea:	3800      	subs	r0, #0
   266ec:	bf18      	it	ne
   266ee:	2001      	movne	r0, #1
   266f0:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   266f2:	4630      	mov	r0, r6
   266f4:	f7f8 fb26 	bl	1ed44 <nrf_flash_sync_check_time_limit>
   266f8:	2800      	cmp	r0, #0
   266fa:	d0f2      	beq.n	266e2 <erase_op+0x2c>
   266fc:	e7f4      	b.n	266e8 <erase_op+0x32>

000266fe <is_regular_addr_valid>:
{
   266fe:	b538      	push	{r3, r4, r5, lr}
   26700:	4605      	mov	r5, r0
   26702:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   26704:	f000 fae5 	bl	26cd2 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   26708:	2d00      	cmp	r5, #0
   2670a:	db07      	blt.n	2671c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2670c:	42a8      	cmp	r0, r5
   2670e:	d905      	bls.n	2671c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   26710:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   26712:	4284      	cmp	r4, r0
   26714:	bf8c      	ite	hi
   26716:	2000      	movhi	r0, #0
   26718:	2001      	movls	r0, #1
}
   2671a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2671c:	2000      	movs	r0, #0
   2671e:	e7fc      	b.n	2671a <is_regular_addr_valid+0x1c>

00026720 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   26720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26722:	461c      	mov	r4, r3
   26724:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   26726:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   26728:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2672a:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2672c:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2672e:	6913      	ldr	r3, [r2, #16]
{
   26730:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   26732:	aa01      	add	r2, sp, #4
   26734:	4669      	mov	r1, sp
   26736:	4798      	blx	r3

	while (layout_size--) {
   26738:	9b01      	ldr	r3, [sp, #4]
   2673a:	1e5a      	subs	r2, r3, #1
   2673c:	9201      	str	r2, [sp, #4]
   2673e:	b91b      	cbnz	r3, 26748 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   26740:	f06f 0015 	mvn.w	r0, #21
}
   26744:	b003      	add	sp, #12
   26746:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   26748:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2674a:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2674c:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2674e:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   26750:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   26752:	b985      	cbnz	r5, 26776 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   26754:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   26756:	f8d0 c000 	ldr.w	ip, [r0]
   2675a:	4563      	cmp	r3, ip
   2675c:	bf28      	it	cs
   2675e:	4663      	movcs	r3, ip
		info->index += index_jmp;
   26760:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   26762:	fb03 1107 	mla	r1, r3, r7, r1
   26766:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   26768:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2676a:	6802      	ldr	r2, [r0, #0]
   2676c:	429a      	cmp	r2, r3
   2676e:	d806      	bhi.n	2677e <flash_get_page_info+0x5e>
		layout++;
   26770:	3008      	adds	r0, #8
   26772:	9000      	str	r0, [sp, #0]
   26774:	e7e0      	b.n	26738 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   26776:	1a6b      	subs	r3, r5, r1
   26778:	fbb3 f3f7 	udiv	r3, r3, r7
   2677c:	e7eb      	b.n	26756 <flash_get_page_info+0x36>
			return 0;
   2677e:	2000      	movs	r0, #0
   26780:	e7e0      	b.n	26744 <flash_get_page_info+0x24>

00026782 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   26782:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   26784:	2200      	movs	r2, #0
   26786:	f7ff bfcb 	b.w	26720 <flash_get_page_info>

0002678a <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2678a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2678e:	6883      	ldr	r3, [r0, #8]
{
   26790:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   26792:	691b      	ldr	r3, [r3, #16]
{
   26794:	4688      	mov	r8, r1
   26796:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   26798:	a901      	add	r1, sp, #4
   2679a:	aa02      	add	r2, sp, #8
   2679c:	4798      	blx	r3
	off_t off = 0;
   2679e:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   267a0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   267a2:	4625      	mov	r5, r4
   267a4:	9b02      	ldr	r3, [sp, #8]
   267a6:	42ab      	cmp	r3, r5
   267a8:	d802      	bhi.n	267b0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   267aa:	b006      	add	sp, #24
   267ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   267b0:	9f01      	ldr	r7, [sp, #4]
   267b2:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   267b6:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   267b8:	687b      	ldr	r3, [r7, #4]
   267ba:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   267bc:	683a      	ldr	r2, [r7, #0]
   267be:	42b2      	cmp	r2, r6
   267c0:	eb0a 0306 	add.w	r3, sl, r6
   267c4:	d802      	bhi.n	267cc <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   267c6:	3501      	adds	r5, #1
   267c8:	469a      	mov	sl, r3
   267ca:	e7eb      	b.n	267a4 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   267cc:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   267ce:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   267d0:	4649      	mov	r1, r9
   267d2:	a803      	add	r0, sp, #12
   267d4:	47c0      	blx	r8
   267d6:	2800      	cmp	r0, #0
   267d8:	d0e7      	beq.n	267aa <flash_page_foreach+0x20>
			off += page_info.size;
   267da:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   267dc:	3601      	adds	r6, #1
			off += page_info.size;
   267de:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   267e0:	e7ec      	b.n	267bc <flash_page_foreach+0x32>

000267e2 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   267e2:	6902      	ldr	r2, [r0, #16]
{
   267e4:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   267e6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   267ea:	e883 0003 	stmia.w	r3, {r0, r1}
}
   267ee:	2000      	movs	r0, #0
   267f0:	4770      	bx	lr

000267f2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   267f2:	6843      	ldr	r3, [r0, #4]
   267f4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   267f6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   267fa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   267fe:	4770      	bx	lr

00026800 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26800:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   26802:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   26804:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26806:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2680a:	b150      	cbz	r0, 26822 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2680c:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2680e:	2000      	movs	r0, #0
   26810:	7812      	ldrb	r2, [r2, #0]
   26812:	700a      	strb	r2, [r1, #0]
   26814:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26818:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2681c:	2201      	movs	r2, #1
   2681e:	601a      	str	r2, [r3, #0]
	return 0;
   26820:	4770      	bx	lr
		return -1;
   26822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   26826:	4770      	bx	lr

00026828 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   26828:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2682a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2682c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26830:	b940      	cbnz	r0, 26844 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   26832:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26834:	079b      	lsls	r3, r3, #30
   26836:	d406      	bmi.n	26846 <is_tx_ready.isra.0+0x1e>
   26838:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2683c:	3800      	subs	r0, #0
   2683e:	bf18      	it	ne
   26840:	2001      	movne	r0, #1
   26842:	4770      	bx	lr
   26844:	2001      	movs	r0, #1
}
   26846:	4770      	bx	lr

00026848 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   26848:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2684a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2684c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   26850:	05c9      	lsls	r1, r1, #23
   26852:	d518      	bpl.n	26886 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26854:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   26858:	b1a9      	cbz	r1, 26886 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2685a:	f04f 0040 	mov.w	r0, #64	; 0x40
   2685e:	f3ef 8111 	mrs	r1, BASEPRI
   26862:	f380 8812 	msr	BASEPRI_MAX, r0
   26866:	f3bf 8f6f 	isb	sy
   2686a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2686e:	b130      	cbz	r0, 2687e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26870:	2000      	movs	r0, #0
   26872:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   26876:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2687a:	2001      	movs	r0, #1
   2687c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2687e:	f381 8811 	msr	BASEPRI, r1
   26882:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26886:	6852      	ldr	r2, [r2, #4]
   26888:	06d2      	lsls	r2, r2, #27
   2688a:	d515      	bpl.n	268b8 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2688c:	f04f 0140 	mov.w	r1, #64	; 0x40
   26890:	f3ef 8211 	mrs	r2, BASEPRI
   26894:	f381 8812 	msr	BASEPRI_MAX, r1
   26898:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2689c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   268a0:	b111      	cbz	r1, 268a8 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   268a2:	2100      	movs	r1, #0
   268a4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   268a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   268ac:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   268b0:	f382 8811 	msr	BASEPRI, r2
   268b4:	f3bf 8f6f 	isb	sy
}
   268b8:	4770      	bx	lr

000268ba <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   268ba:	2000      	movs	r0, #0
   268bc:	4770      	bx	lr

000268be <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   268be:	b538      	push	{r3, r4, r5, lr}
   268c0:	460c      	mov	r4, r1
   268c2:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   268c4:	f7ee fb6e 	bl	14fa4 <bt_is_ready>
   268c8:	b128      	cbz	r0, 268d6 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   268ca:	4629      	mov	r1, r5
   268cc:	4620      	mov	r0, r4
}
   268ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   268d2:	f7ed be7f 	b.w	145d4 <bt_hci_le_rand>
}
   268d6:	f06f 000a 	mvn.w	r0, #10
   268da:	bd38      	pop	{r3, r4, r5, pc}

000268dc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   268dc:	4770      	bx	lr

000268de <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   268de:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   268e0:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   268e2:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   268e6:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   268e8:	7a05      	ldrb	r5, [r0, #8]
   268ea:	6844      	ldr	r4, [r0, #4]
   268ec:	4435      	add	r5, r6
   268ee:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   268f2:	42a3      	cmp	r3, r4
   268f4:	d902      	bls.n	268fc <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   268f6:	f06f 0001 	mvn.w	r0, #1
}
   268fa:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   268fc:	795c      	ldrb	r4, [r3, #5]
   268fe:	428c      	cmp	r4, r1
   26900:	d001      	beq.n	26906 <pinctrl_lookup_state+0x28>
		(*state)++;
   26902:	3308      	adds	r3, #8
   26904:	e7ef      	b.n	268e6 <pinctrl_lookup_state+0x8>
			return 0;
   26906:	2000      	movs	r0, #0
   26908:	e7f7      	b.n	268fa <pinctrl_lookup_state+0x1c>

0002690a <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2690a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2690e:	4615      	mov	r5, r2
   26910:	b085      	sub	sp, #20
   26912:	4681      	mov	r9, r0
   26914:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26918:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2691c:	454f      	cmp	r7, r9
   2691e:	d103      	bne.n	26928 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   26920:	2000      	movs	r0, #0
}
   26922:	b005      	add	sp, #20
   26924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   26928:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2692c:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   26930:	f3c3 2643 	ubfx	r6, r3, #9, #4
			pin = 0xFFFFFFFFU;
   26934:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   26936:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2693a:	bf08      	it	eq
   2693c:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   26940:	2b19      	cmp	r3, #25
   26942:	d876      	bhi.n	26a32 <pinctrl_configure_pins+0x128>
   26944:	e8df f003 	tbb	[pc, r3]
   26948:	23201a0d 	.word	0x23201a0d
   2694c:	75233526 	.word	0x75233526
   26950:	3a757575 	.word	0x3a757575
   26954:	75757560 	.word	0x75757560
   26958:	75757575 	.word	0x75757575
   2695c:	6c637575 	.word	0x6c637575
   26960:	726f      	.short	0x726f
			NRF_PSEL_UART(reg, TXD) = pin;
   26962:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26966:	a803      	add	r0, sp, #12
   26968:	9403      	str	r4, [sp, #12]
   2696a:	f7f6 fd5b 	bl	1d424 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2696e:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTSET = set_mask;
   26972:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   26976:	f04f 0a01 	mov.w	sl, #1
   2697a:	e003      	b.n	26984 <pinctrl_configure_pins+0x7a>
			NRF_PSEL_UART(reg, RXD) = pin;
   2697c:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   26980:	f04f 0a00 	mov.w	sl, #0
   26984:	46d3      	mov	fp, sl
   26986:	e021      	b.n	269cc <pinctrl_configure_pins+0xc2>
			NRF_PSEL_UART(reg, RTS) = pin;
   26988:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2698c:	e7eb      	b.n	26966 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_UART(reg, CTS) = pin;
   2698e:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   26992:	e7f5      	b.n	26980 <pinctrl_configure_pins+0x76>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   26994:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   26998:	f04f 0a00 	mov.w	sl, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2699c:	a803      	add	r0, sp, #12
   2699e:	9403      	str	r4, [sp, #12]
   269a0:	f7f6 fd40 	bl	1d424 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   269a4:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTCLR = clr_mask;
   269a8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   269ac:	f04f 0b01 	mov.w	fp, #1
   269b0:	e00c      	b.n	269cc <pinctrl_configure_pins+0xc2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   269b2:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   269b6:	f04f 0a01 	mov.w	sl, #1
   269ba:	e7ef      	b.n	2699c <pinctrl_configure_pins+0x92>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   269bc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   269c0:	2e00      	cmp	r6, #0
   269c2:	d1dd      	bne.n	26980 <pinctrl_configure_pins+0x76>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   269c4:	f04f 0a00 	mov.w	sl, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   269c8:	46d3      	mov	fp, sl
				drive = NRF_DRIVE_S0D1;
   269ca:	2606      	movs	r6, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   269cc:	f859 3b04 	ldr.w	r3, [r9], #4
   269d0:	9301      	str	r3, [sp, #4]
   269d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   269d6:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   269d8:	a803      	add	r0, sp, #12
   269da:	bf1c      	itt	ne
   269dc:	f04f 0a01 	movne.w	sl, #1
   269e0:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   269e4:	9403      	str	r4, [sp, #12]
   269e6:	f7f6 fd1d 	bl	1d424 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   269ea:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   269ec:	0236      	lsls	r6, r6, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   269ee:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   269f2:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
   269f6:	ea46 060b 	orr.w	r6, r6, fp
    reg->PIN_CNF[pin_number] = cnf;
   269fa:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   269fe:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   26a02:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   26a06:	e789      	b.n	2691c <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   26a08:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   26a0c:	e7d8      	b.n	269c0 <pinctrl_configure_pins+0xb6>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   26a0e:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   26a12:	f8d9 3000 	ldr.w	r3, [r9]
   26a16:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   26a1a:	2b00      	cmp	r3, #0
   26a1c:	d0cb      	beq.n	269b6 <pinctrl_configure_pins+0xac>
   26a1e:	e7a2      	b.n	26966 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   26a20:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   26a24:	e7f5      	b.n	26a12 <pinctrl_configure_pins+0x108>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   26a26:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   26a2a:	e7f2      	b.n	26a12 <pinctrl_configure_pins+0x108>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   26a2c:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   26a30:	e7ef      	b.n	26a12 <pinctrl_configure_pins+0x108>
		switch (NRF_GET_FUN(pins[i])) {
   26a32:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26a36:	e774      	b.n	26922 <pinctrl_configure_pins+0x18>

00026a38 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   26a38:	2101      	movs	r1, #1
   26a3a:	f7f7 b835 	b.w	1daa8 <dk_set_led>

00026a3e <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   26a3e:	2100      	movs	r1, #0
   26a40:	f7f7 b832 	b.w	1daa8 <dk_set_led>

00026a44 <hci_driver_close>:
{
   26a44:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   26a46:	f7f7 ff49 	bl	1e8dc <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   26a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26a52:	f7f7 f84b 	bl	1daec <multithreading_lock_acquire>
	if (err) {
   26a56:	4604      	mov	r4, r0
   26a58:	b920      	cbnz	r0, 26a64 <hci_driver_close+0x20>
	err = sdc_disable();
   26a5a:	f7dd fcf3 	bl	4444 <sdc_disable>
	if (err) {
   26a5e:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   26a60:	f7f7 f84c 	bl	1dafc <multithreading_lock_release>
}
   26a64:	4620      	mov	r0, r4
   26a66:	bd10      	pop	{r4, pc}

00026a68 <hci_driver_send>:
{
   26a68:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   26a6a:	8983      	ldrh	r3, [r0, #12]
{
   26a6c:	4605      	mov	r5, r0
	if (!buf->len) {
   26a6e:	b373      	cbz	r3, 26ace <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   26a70:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   26a72:	b1a3      	cbz	r3, 26a9e <hci_driver_send+0x36>
   26a74:	2b02      	cmp	r3, #2
   26a76:	d12a      	bne.n	26ace <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   26a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26a80:	f7f7 f834 	bl	1daec <multithreading_lock_acquire>
	if (!errcode) {
   26a84:	4604      	mov	r4, r0
   26a86:	b940      	cbnz	r0, 26a9a <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   26a88:	68a8      	ldr	r0, [r5, #8]
   26a8a:	f7e6 f8db 	bl	cc44 <sdc_hci_data_put>
   26a8e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   26a90:	f7f7 f834 	bl	1dafc <multithreading_lock_release>
		if (errcode) {
   26a94:	b1b4      	cbz	r4, 26ac4 <hci_driver_send+0x5c>
			receive_signal_raise();
   26a96:	f7f7 f963 	bl	1dd60 <receive_signal_raise>
}
   26a9a:	4620      	mov	r0, r4
   26a9c:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   26a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26aa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26aa6:	f7f7 f821 	bl	1daec <multithreading_lock_acquire>
	if (!errcode) {
   26aaa:	4604      	mov	r4, r0
   26aac:	2800      	cmp	r0, #0
   26aae:	d1f4      	bne.n	26a9a <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   26ab0:	68a8      	ldr	r0, [r5, #8]
   26ab2:	f7f7 f9ef 	bl	1de94 <hci_internal_cmd_put>
   26ab6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   26ab8:	f7f7 f820 	bl	1dafc <multithreading_lock_release>
	if (errcode) {
   26abc:	2c00      	cmp	r4, #0
   26abe:	d1ec      	bne.n	26a9a <hci_driver_send+0x32>
	receive_signal_raise();
   26ac0:	f7f7 f94e 	bl	1dd60 <receive_signal_raise>
		net_buf_unref(buf);
   26ac4:	4628      	mov	r0, r5
   26ac6:	f7f4 ff3b 	bl	1b940 <net_buf_unref>
   26aca:	2400      	movs	r4, #0
   26acc:	e7e5      	b.n	26a9a <hci_driver_send+0x32>
	switch (type) {
   26ace:	f06f 0415 	mvn.w	r4, #21
   26ad2:	e7e2      	b.n	26a9a <hci_driver_send+0x32>

00026ad4 <receive_work_handler>:
	hci_driver_receive_process();
   26ad4:	f7f7 b96c 	b.w	1ddb0 <hci_driver_receive_process>

00026ad8 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   26ad8:	b530      	push	{r4, r5, lr}
   26ada:	b08d      	sub	sp, #52	; 0x34
   26adc:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	LOG_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   26ade:	4601      	mov	r1, r0
   26ae0:	4668      	mov	r0, sp
{
   26ae2:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   26ae4:	f7f7 fd76 	bl	1e5d4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   26ae8:	4621      	mov	r1, r4
   26aea:	a804      	add	r0, sp, #16
   26aec:	f7f7 fd72 	bl	1e5d4 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   26af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26af8:	f7f6 fff8 	bl	1daec <multithreading_lock_acquire>

	if (!errcode) {
   26afc:	4604      	mov	r4, r0
   26afe:	b960      	cbnz	r0, 26b1a <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   26b00:	aa08      	add	r2, sp, #32
   26b02:	a904      	add	r1, sp, #16
   26b04:	4668      	mov	r0, sp
   26b06:	f7e5 fe1e 	bl	c746 <sdc_soc_ecb_block_encrypt>
   26b0a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   26b0c:	f7f6 fff6 	bl	1dafc <multithreading_lock_release>
	}

	if (!errcode) {
   26b10:	b91c      	cbnz	r4, 26b1a <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   26b12:	a908      	add	r1, sp, #32
   26b14:	4628      	mov	r0, r5
   26b16:	f7f7 fd5d 	bl	1e5d4 <sys_memcpy_swap.constprop.0>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   26b1a:	4620      	mov	r0, r4
   26b1c:	b00d      	add	sp, #52	; 0x34
   26b1e:	bd30      	pop	{r4, r5, pc}

00026b20 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   26b20:	2100      	movs	r1, #0
   26b22:	f7f7 befd 	b.w	1e920 <cmd_le_generate_dhkey>

00026b26 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   26b26:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   26b2a:	2901      	cmp	r1, #1
   26b2c:	d801      	bhi.n	26b32 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   26b2e:	f7f7 bef7 	b.w	1e920 <cmd_le_generate_dhkey>
}
   26b32:	2012      	movs	r0, #18
   26b34:	4770      	bx	lr

00026b36 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   26b36:	4668      	mov	r0, sp
   26b38:	f020 0107 	bic.w	r1, r0, #7
   26b3c:	468d      	mov	sp, r1
   26b3e:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   26b40:	f7dc fa56 	bl	2ff0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   26b44:	f7ec fa32 	bl	12fac <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   26b48:	f7ec fb1a 	bl	13180 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   26b4c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26b50:	4685      	mov	sp, r0
   26b52:	4770      	bx	lr

00026b54 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   26b54:	4668      	mov	r0, sp
   26b56:	f020 0107 	bic.w	r1, r0, #7
   26b5a:	468d      	mov	sp, r1
   26b5c:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   26b5e:	f7dc f9bd 	bl	2edc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   26b62:	f7ec fa23 	bl	12fac <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   26b66:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26b6a:	4685      	mov	sp, r0
   26b6c:	4770      	bx	lr

00026b6e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   26b6e:	4668      	mov	r0, sp
   26b70:	f020 0107 	bic.w	r1, r0, #7
   26b74:	468d      	mov	sp, r1
   26b76:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   26b78:	f7d9 ff1c 	bl	9b4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   26b7c:	f7ec fa16 	bl	12fac <_arch_isr_direct_pm>
   26b80:	f7ec fafe 	bl	13180 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   26b84:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26b88:	4685      	mov	sp, r0
   26b8a:	4770      	bx	lr

00026b8c <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   26b8c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   26b8e:	f7e5 fd79 	bl	c684 <mpsl_fem_init>

	return 0;
}
   26b92:	2000      	movs	r0, #0
   26b94:	bd08      	pop	{r3, pc}

00026b96 <nrfx_clock_enable>:
}
   26b96:	4770      	bx	lr

00026b98 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   26b98:	f7dc be9a 	b.w	38d0 <MPSL_IRQ_CLOCK_Handler>

00026b9c <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   26b9c:	f7dd ba54 	b.w	4048 <mpsl_is_initialized>

00026ba0 <nrf_flash_sync_get_timestamp_begin>:
}
   26ba0:	4770      	bx	lr

00026ba2 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   26ba2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26ba6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   26baa:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   26bac:	bf04      	itt	eq
   26bae:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   26bb2:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   26bb6:	1f83      	subs	r3, r0, #6
   26bb8:	4258      	negs	r0, r3
   26bba:	4158      	adcs	r0, r3
   26bbc:	4770      	bx	lr

00026bbe <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   26bbe:	4700      	bx	r0

00026bc0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   26bc0:	f000 b9c6 	b.w	26f50 <z_impl_k_busy_wait>

00026bc4 <nrf_gpio_pin_present_check>:
    switch (port)
   26bc4:	0943      	lsrs	r3, r0, #5
   26bc6:	bf0c      	ite	eq
   26bc8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   26bcc:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   26bce:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   26bd2:	fa23 f000 	lsr.w	r0, r3, r0
}
   26bd6:	f000 0001 	and.w	r0, r0, #1
   26bda:	4770      	bx	lr

00026bdc <pin_is_task_output>:
{
   26bdc:	b508      	push	{r3, lr}
   26bde:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   26be0:	f7f8 fa7a 	bl	1f0d8 <pin_is_output>
   26be4:	b110      	cbz	r0, 26bec <pin_is_task_output+0x10>
   26be6:	4610      	mov	r0, r2
   26be8:	f7f8 fa60 	bl	1f0ac <pin_in_use_by_te>
}
   26bec:	f000 0001 	and.w	r0, r0, #1
   26bf0:	bd08      	pop	{r3, pc}

00026bf2 <nrf_gpio_reconfigure>:
{
   26bf2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26bf6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26bf8:	a801      	add	r0, sp, #4
{
   26bfa:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   26bfe:	460c      	mov	r4, r1
   26c00:	4617      	mov	r7, r2
   26c02:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26c04:	f7f8 fae8 	bl	1f1d8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   26c08:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   26c0a:	1e39      	subs	r1, r7, #0
   26c0c:	bf18      	it	ne
   26c0e:	2101      	movne	r1, #1
   26c10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   26c14:	1e23      	subs	r3, r4, #0
   26c16:	bf18      	it	ne
   26c18:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   26c1a:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   26c1c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   26c20:	bf14      	ite	ne
   26c22:	210c      	movne	r1, #12
   26c24:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   26c26:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   26c28:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   26c2c:	bf14      	ite	ne
   26c2e:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   26c32:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   26c34:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   26c38:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   26c3c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   26c40:	bf14      	ite	ne
   26c42:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   26c46:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   26c48:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   26c4a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   26c4e:	b104      	cbz	r4, 26c52 <nrf_gpio_reconfigure+0x60>
   26c50:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   26c52:	b10f      	cbz	r7, 26c58 <nrf_gpio_reconfigure+0x66>
   26c54:	783f      	ldrb	r7, [r7, #0]
   26c56:	007f      	lsls	r7, r7, #1
   26c58:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   26c5a:	b10e      	cbz	r6, 26c60 <nrf_gpio_reconfigure+0x6e>
   26c5c:	7836      	ldrb	r6, [r6, #0]
   26c5e:	00b6      	lsls	r6, r6, #2
   26c60:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   26c62:	b18d      	cbz	r5, 26c88 <nrf_gpio_reconfigure+0x96>
   26c64:	7829      	ldrb	r1, [r5, #0]
   26c66:	0209      	lsls	r1, r1, #8
   26c68:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   26c6a:	f1b8 0f00 	cmp.w	r8, #0
   26c6e:	d003      	beq.n	26c78 <nrf_gpio_reconfigure+0x86>
   26c70:	f898 8000 	ldrb.w	r8, [r8]
   26c74:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   26c78:	4321      	orrs	r1, r4
   26c7a:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   26c7e:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   26c82:	b002      	add	sp, #8
   26c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   26c88:	4629      	mov	r1, r5
   26c8a:	e7ed      	b.n	26c68 <nrf_gpio_reconfigure+0x76>

00026c8c <nrf_gpio_cfg_sense_set>:
{
   26c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   26c8e:	f10d 030f 	add.w	r3, sp, #15
   26c92:	9301      	str	r3, [sp, #4]
   26c94:	2300      	movs	r3, #0
{
   26c96:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   26c9a:	9300      	str	r3, [sp, #0]
   26c9c:	461a      	mov	r2, r3
   26c9e:	4619      	mov	r1, r3
   26ca0:	f7ff ffa7 	bl	26bf2 <nrf_gpio_reconfigure>
}
   26ca4:	b005      	add	sp, #20
   26ca6:	f85d fb04 	ldr.w	pc, [sp], #4

00026caa <is_valid_address>:
{
   26caa:	4603      	mov	r3, r0
   26cac:	4608      	mov	r0, r1
   26cae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   26cb2:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   26cb4:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   26cb6:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   26cb8:	4293      	cmp	r3, r2
   26cba:	d308      	bcc.n	26cce <is_valid_address+0x24>
    if (uicr_allowed &&
   26cbc:	b140      	cbz	r0, 26cd0 <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   26cbe:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   26cc2:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   26cc6:	bf2c      	ite	cs
   26cc8:	2000      	movcs	r0, #0
   26cca:	2001      	movcc	r0, #1
   26ccc:	4770      	bx	lr
        return true;
   26cce:	2001      	movs	r0, #1
}
   26cd0:	4770      	bx	lr

00026cd2 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   26cd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26cd6:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   26cd8:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   26cda:	4350      	muls	r0, r2
   26cdc:	4770      	bx	lr

00026cde <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   26cde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26ce2:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   26ce4:	4770      	bx	lr

00026ce6 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   26ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26cea:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   26cec:	4770      	bx	lr

00026cee <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   26cee:	f7f8 be0b 	b.w	1f908 <_DoInit>

00026cf2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   26cf2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   26cf4:	f7ff fffb 	bl	26cee <SEGGER_RTT_Init>

	return 0;
}
   26cf8:	2000      	movs	r0, #0
   26cfa:	bd08      	pop	{r3, pc}

00026cfc <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   26cfc:	4770      	bx	lr

00026cfe <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   26cfe:	b140      	cbz	r0, 26d12 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   26d00:	68c3      	ldr	r3, [r0, #12]
   26d02:	7858      	ldrb	r0, [r3, #1]
   26d04:	f010 0001 	ands.w	r0, r0, #1
   26d08:	bf1e      	ittt	ne
   26d0a:	7818      	ldrbne	r0, [r3, #0]
   26d0c:	fab0 f080 	clzne	r0, r0
   26d10:	0940      	lsrne	r0, r0, #5
}
   26d12:	4770      	bx	lr

00026d14 <z_early_memset>:
	(void) memset(dst, c, n);
   26d14:	f7fd bcf6 	b.w	24704 <memset>

00026d18 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   26d18:	f7fd bce9 	b.w	246ee <memcpy>

00026d1c <k_heap_init>:
{
   26d1c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   26d1e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   26d22:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26d26:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   26d28:	f7ea b9d2 	b.w	110d0 <sys_heap_init>

00026d2c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26d2c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   26d30:	4313      	orrs	r3, r2
   26d32:	f013 0303 	ands.w	r3, r3, #3
   26d36:	d10c      	bne.n	26d52 <create_free_list+0x26>
	slab->free_list = NULL;
   26d38:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   26d3a:	68c1      	ldr	r1, [r0, #12]
   26d3c:	4299      	cmp	r1, r3
   26d3e:	d801      	bhi.n	26d44 <create_free_list+0x18>
	return 0;
   26d40:	2000      	movs	r0, #0
   26d42:	4770      	bx	lr
		*(char **)p = slab->free_list;
   26d44:	6981      	ldr	r1, [r0, #24]
   26d46:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   26d48:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   26d4a:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   26d4c:	3301      	adds	r3, #1
		p += slab->block_size;
   26d4e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   26d50:	e7f3      	b.n	26d3a <create_free_list+0xe>
		return -EINVAL;
   26d52:	f06f 0015 	mvn.w	r0, #21
}
   26d56:	4770      	bx	lr

00026d58 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26d58:	f3ef 8005 	mrs	r0, IPSR
}
   26d5c:	3800      	subs	r0, #0
   26d5e:	bf18      	it	ne
   26d60:	2001      	movne	r0, #1
   26d62:	4770      	bx	lr

00026d64 <z_impl_k_thread_name_set>:
}
   26d64:	f06f 0057 	mvn.w	r0, #87	; 0x57
   26d68:	4770      	bx	lr

00026d6a <k_thread_name_get>:
}
   26d6a:	2000      	movs	r0, #0
   26d6c:	4770      	bx	lr

00026d6e <z_impl_k_thread_start>:
	z_sched_start(thread);
   26d6e:	f7fa bb75 	b.w	2145c <z_sched_start>

00026d72 <z_pm_save_idle_exit>:
{
   26d72:	b508      	push	{r3, lr}
	pm_system_resume();
   26d74:	f7eb fe78 	bl	12a68 <pm_system_resume>
}
   26d78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   26d7c:	f7ff bdae 	b.w	268dc <sys_clock_idle_exit>

00026d80 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   26d80:	f990 300e 	ldrsb.w	r3, [r0, #14]
   26d84:	428b      	cmp	r3, r1
   26d86:	d001      	beq.n	26d8c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   26d88:	f7fa bde2 	b.w	21950 <z_set_prio>
}
   26d8c:	2000      	movs	r0, #0
   26d8e:	4770      	bx	lr

00026d90 <z_impl_k_mutex_init>:
{
   26d90:	4603      	mov	r3, r0
	mutex->owner = NULL;
   26d92:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   26d94:	e9c3 0002 	strd	r0, r0, [r3, #8]
   26d98:	e9c3 3300 	strd	r3, r3, [r3]
}
   26d9c:	4770      	bx	lr

00026d9e <z_queue_node_peek>:
{
   26d9e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   26da0:	4604      	mov	r4, r0
   26da2:	b130      	cbz	r0, 26db2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26da4:	6802      	ldr	r2, [r0, #0]
   26da6:	0793      	lsls	r3, r2, #30
   26da8:	d003      	beq.n	26db2 <z_queue_node_peek+0x14>
		ret = anode->data;
   26daa:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26dac:	b109      	cbz	r1, 26db2 <z_queue_node_peek+0x14>
			k_free(anode);
   26dae:	f000 f9b3 	bl	27118 <k_free>
}
   26db2:	4620      	mov	r0, r4
   26db4:	bd10      	pop	{r4, pc}

00026db6 <z_impl_k_queue_init>:
	list->head = NULL;
   26db6:	2300      	movs	r3, #0
	list->tail = NULL;
   26db8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   26dbc:	6083      	str	r3, [r0, #8]
   26dbe:	f100 030c 	add.w	r3, r0, #12
   26dc2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   26dc6:	f100 0314 	add.w	r3, r0, #20
   26dca:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   26dce:	4770      	bx	lr

00026dd0 <k_queue_append>:
{
   26dd0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   26dd2:	2301      	movs	r3, #1
   26dd4:	9300      	str	r3, [sp, #0]
   26dd6:	2300      	movs	r3, #0
{
   26dd8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26dda:	4619      	mov	r1, r3
   26ddc:	f7f9 fb44 	bl	20468 <queue_insert>
}
   26de0:	b003      	add	sp, #12
   26de2:	f85d fb04 	ldr.w	pc, [sp], #4

00026de6 <k_queue_prepend>:
{
   26de6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26de8:	2300      	movs	r3, #0
{
   26dea:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26dec:	9300      	str	r3, [sp, #0]
   26dee:	4619      	mov	r1, r3
   26df0:	f7f9 fb3a 	bl	20468 <queue_insert>
}
   26df4:	b003      	add	sp, #12
   26df6:	f85d fb04 	ldr.w	pc, [sp], #4

00026dfa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   26dfa:	b15a      	cbz	r2, 26e14 <z_impl_k_sem_init+0x1a>
   26dfc:	428a      	cmp	r2, r1
   26dfe:	d309      	bcc.n	26e14 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   26e00:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   26e04:	e9c0 1202 	strd	r1, r2, [r0, #8]
   26e08:	e9c0 0000 	strd	r0, r0, [r0]
   26e0c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   26e10:	2000      	movs	r0, #0
   26e12:	4770      	bx	lr
		return -EINVAL;
   26e14:	f06f 0015 	mvn.w	r0, #21
}
   26e18:	4770      	bx	lr

00026e1a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   26e1a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   26e1c:	2301      	movs	r3, #1
   26e1e:	408b      	lsls	r3, r1
   26e20:	ea22 0303 	bic.w	r3, r2, r3
   26e24:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   26e26:	fa22 f001 	lsr.w	r0, r2, r1
}
   26e2a:	f000 0001 	and.w	r0, r0, #1
   26e2e:	4770      	bx	lr

00026e30 <unschedule_locked>:
{
   26e30:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26e32:	2103      	movs	r1, #3
{
   26e34:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26e36:	300c      	adds	r0, #12
   26e38:	f7ff ffef 	bl	26e1a <flag_test_and_clear>
   26e3c:	4604      	mov	r4, r0
   26e3e:	b118      	cbz	r0, 26e48 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   26e40:	f105 0010 	add.w	r0, r5, #16
   26e44:	f7fb faba 	bl	223bc <z_abort_timeout>
}
   26e48:	4620      	mov	r0, r4
   26e4a:	bd38      	pop	{r3, r4, r5, pc}

00026e4c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   26e4c:	b120      	cbz	r0, 26e58 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   26e4e:	2200      	movs	r2, #0
   26e50:	4611      	mov	r1, r2
   26e52:	3088      	adds	r0, #136	; 0x88
   26e54:	f7fb b940 	b.w	220d8 <z_sched_wake>
}
   26e58:	4770      	bx	lr

00026e5a <cancel_async_locked>:
{
   26e5a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   26e5c:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26e5e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   26e62:	079b      	lsls	r3, r3, #30
{
   26e64:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26e66:	d416      	bmi.n	26e96 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   26e68:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   26e6a:	2102      	movs	r1, #2
   26e6c:	300c      	adds	r0, #12
   26e6e:	f7ff ffd4 	bl	26e1a <flag_test_and_clear>
   26e72:	b180      	cbz	r0, 26e96 <cancel_async_locked+0x3c>
	return list->head;
   26e74:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e78:	b16a      	cbz	r2, 26e96 <cancel_async_locked+0x3c>
   26e7a:	4294      	cmp	r4, r2
   26e7c:	d11d      	bne.n	26eba <cancel_async_locked+0x60>
	return node->next;
   26e7e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26e80:	b99e      	cbnz	r6, 26eaa <cancel_async_locked+0x50>
   26e82:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   26e86:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   26e8a:	429c      	cmp	r4, r3
   26e8c:	d101      	bne.n	26e92 <cancel_async_locked+0x38>
	list->tail = node;
   26e8e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   26e92:	2300      	movs	r3, #0
   26e94:	6023      	str	r3, [r4, #0]
	return *flagp;
   26e96:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   26e98:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   26e9c:	bf1e      	ittt	ne
   26e9e:	f043 0302 	orrne.w	r3, r3, #2
   26ea2:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   26ea4:	f040 0002 	orrne.w	r0, r0, #2
}
   26ea8:	bd70      	pop	{r4, r5, r6, pc}
   26eaa:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   26eac:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   26eb0:	4294      	cmp	r4, r2
	list->tail = node;
   26eb2:	bf08      	it	eq
   26eb4:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   26eb8:	e7eb      	b.n	26e92 <cancel_async_locked+0x38>
	return node->next;
   26eba:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26ebc:	6812      	ldr	r2, [r2, #0]
   26ebe:	e7db      	b.n	26e78 <cancel_async_locked+0x1e>

00026ec0 <k_work_submit_to_queue>:
{
   26ec0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   26ec2:	f7f9 fee9 	bl	20c98 <z_work_submit_to_queue>
	if (ret > 0) {
   26ec6:	1e04      	subs	r4, r0, #0
   26ec8:	dd09      	ble.n	26ede <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   26eca:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ece:	f3ef 8011 	mrs	r0, BASEPRI
   26ed2:	f383 8812 	msr	BASEPRI_MAX, r3
   26ed6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26eda:	f000 f80d 	bl	26ef8 <z_reschedule_irqlock>
}
   26ede:	4620      	mov	r0, r4
   26ee0:	bd10      	pop	{r4, pc}

00026ee2 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   26ee2:	f7f9 bea5 	b.w	20c30 <k_work_busy_get>

00026ee6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   26ee6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   26eea:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   26eee:	4283      	cmp	r3, r0
		return b2 - b1;
   26ef0:	bf14      	ite	ne
   26ef2:	1ac0      	subne	r0, r0, r3
	return 0;
   26ef4:	2000      	moveq	r0, #0
}
   26ef6:	4770      	bx	lr

00026ef8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26ef8:	4603      	mov	r3, r0
   26efa:	b920      	cbnz	r0, 26f06 <z_reschedule_irqlock+0xe>
   26efc:	f3ef 8205 	mrs	r2, IPSR
   26f00:	b90a      	cbnz	r2, 26f06 <z_reschedule_irqlock+0xe>
   26f02:	f7ec b881 	b.w	13008 <arch_swap>
	__asm__ volatile(
   26f06:	f383 8811 	msr	BASEPRI, r3
   26f0a:	f3bf 8f6f 	isb	sy
}
   26f0e:	4770      	bx	lr

00026f10 <z_reschedule_unlocked>:
	__asm__ volatile(
   26f10:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f14:	f3ef 8011 	mrs	r0, BASEPRI
   26f18:	f383 8812 	msr	BASEPRI_MAX, r3
   26f1c:	f3bf 8f6f 	isb	sy
   26f20:	f7ff bfea 	b.w	26ef8 <z_reschedule_irqlock>

00026f24 <z_unpend_all>:
{
   26f24:	b538      	push	{r3, r4, r5, lr}
   26f26:	4605      	mov	r5, r0
	int need_sched = 0;
   26f28:	2000      	movs	r0, #0
	return list->head == list;
   26f2a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f2c:	42a5      	cmp	r5, r4
   26f2e:	d000      	beq.n	26f32 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26f30:	b904      	cbnz	r4, 26f34 <z_unpend_all+0x10>
}
   26f32:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   26f34:	4620      	mov	r0, r4
   26f36:	f7fa fdfb 	bl	21b30 <z_unpend_thread>
		z_ready_thread(thread);
   26f3a:	4620      	mov	r0, r4
   26f3c:	f7fa f9f2 	bl	21324 <z_ready_thread>
		need_sched = 1;
   26f40:	2001      	movs	r0, #1
   26f42:	e7f2      	b.n	26f2a <z_unpend_all+0x6>

00026f44 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   26f44:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   26f46:	f7fb fb73 	bl	22630 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   26f4a:	bd08      	pop	{r3, pc}

00026f4c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   26f4c:	f7fb bb70 	b.w	22630 <sys_clock_tick_get>

00026f50 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   26f50:	b108      	cbz	r0, 26f56 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   26f52:	f7ec bd29 	b.w	139a8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   26f56:	4770      	bx	lr

00026f58 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26f58:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   26f5c:	bf08      	it	eq
   26f5e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   26f62:	b538      	push	{r3, r4, r5, lr}
   26f64:	460c      	mov	r4, r1
   26f66:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26f68:	d014      	beq.n	26f94 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26f6a:	4308      	orrs	r0, r1
   26f6c:	d103      	bne.n	26f76 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   26f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   26f72:	f7fb bb5d 	b.w	22630 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   26f76:	f06f 0001 	mvn.w	r0, #1
   26f7a:	1b40      	subs	r0, r0, r5
   26f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26f80:	eb63 0101 	sbc.w	r1, r3, r1
   26f84:	2900      	cmp	r1, #0
   26f86:	da04      	bge.n	26f92 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   26f88:	f7fb fb52 	bl	22630 <sys_clock_tick_get>
   26f8c:	1940      	adds	r0, r0, r5
   26f8e:	eb41 0104 	adc.w	r1, r1, r4
}
   26f92:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   26f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26f98:	4601      	mov	r1, r0
   26f9a:	e7fa      	b.n	26f92 <sys_clock_timeout_end_calc+0x3a>

00026f9c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   26f9c:	b510      	push	{r4, lr}
   26f9e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   26fa0:	f7fb fa0c 	bl	223bc <z_abort_timeout>

	if (inactive) {
   26fa4:	b9b0      	cbnz	r0, 26fd4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   26fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26fa8:	b10b      	cbz	r3, 26fae <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   26faa:	4620      	mov	r0, r4
   26fac:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   26fae:	f104 0018 	add.w	r0, r4, #24
   26fb2:	f7fa fe3b 	bl	21c2c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   26fb6:	b168      	cbz	r0, 26fd4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   26fb8:	f7fa f9b4 	bl	21324 <z_ready_thread>
   26fbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   26fc0:	f3ef 8011 	mrs	r0, BASEPRI
   26fc4:	f383 8812 	msr	BASEPRI_MAX, r3
   26fc8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   26fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26fd0:	f7ff bf92 	b.w	26ef8 <z_reschedule_irqlock>
   26fd4:	bd10      	pop	{r4, pc}

00026fd6 <add_event>:
{
   26fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26fd8:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26fda:	e9d0 1300 	ldrd	r1, r3, [r0]
   26fde:	4288      	cmp	r0, r1
   26fe0:	4604      	mov	r4, r0
   26fe2:	d105      	bne.n	26ff0 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   26fe4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   26fe6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   26fea:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26fec:	6065      	str	r5, [r4, #4]
   26fee:	e01d      	b.n	2702c <add_event+0x56>
	if ((pending == NULL) ||
   26ff0:	2b00      	cmp	r3, #0
   26ff2:	d0f7      	beq.n	26fe4 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   26ff4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26ff6:	b100      	cbz	r0, 26ffa <add_event+0x24>
   26ff8:	3860      	subs	r0, #96	; 0x60
   26ffa:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   26ffe:	4639      	mov	r1, r7
   27000:	f7ff ff71 	bl	26ee6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   27004:	2800      	cmp	r0, #0
   27006:	dced      	bgt.n	26fe4 <add_event+0xe>
	return list->head == list;
   27008:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2700a:	42b4      	cmp	r4, r6
   2700c:	d0ea      	beq.n	26fe4 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2700e:	2e00      	cmp	r6, #0
   27010:	d0e8      	beq.n	26fe4 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   27012:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27014:	b101      	cbz	r1, 27018 <add_event+0x42>
   27016:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   27018:	4638      	mov	r0, r7
   2701a:	f7ff ff64 	bl	26ee6 <z_sched_prio_cmp>
   2701e:	2800      	cmp	r0, #0
   27020:	dd05      	ble.n	2702e <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   27022:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   27024:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   27028:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2702a:	6075      	str	r5, [r6, #4]
}
   2702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2702e:	6863      	ldr	r3, [r4, #4]
   27030:	429e      	cmp	r6, r3
   27032:	d0d7      	beq.n	26fe4 <add_event+0xe>
   27034:	6836      	ldr	r6, [r6, #0]
   27036:	e7ea      	b.n	2700e <add_event+0x38>

00027038 <signal_poll_event>:
{
   27038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2703c:	6884      	ldr	r4, [r0, #8]
{
   2703e:	4605      	mov	r5, r0
   27040:	460e      	mov	r6, r1
	if (poller != NULL) {
   27042:	b144      	cbz	r4, 27056 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   27044:	7863      	ldrb	r3, [r4, #1]
   27046:	2b01      	cmp	r3, #1
   27048:	d12e      	bne.n	270a8 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2704a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2704e:	f013 0302 	ands.w	r3, r3, #2
   27052:	d10a      	bne.n	2706a <signal_poll_event+0x32>
		poller->is_polling = false;
   27054:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   27056:	68eb      	ldr	r3, [r5, #12]
   27058:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2705c:	4316      	orrs	r6, r2
	event->poller = NULL;
   2705e:	2000      	movs	r0, #0
	event->state |= state;
   27060:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   27064:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   27066:	60eb      	str	r3, [r5, #12]
	return retcode;
   27068:	e03e      	b.n	270e8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2706a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2706e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27072:	bf08      	it	eq
   27074:	f112 0f02 	cmneq.w	r2, #2
   27078:	d032      	beq.n	270e0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2707a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2707e:	4640      	mov	r0, r8
   27080:	f7fa fd56 	bl	21b30 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   27084:	2e08      	cmp	r6, #8
   27086:	bf0c      	ite	eq
   27088:	f06f 0303 	mvneq.w	r3, #3
   2708c:	2300      	movne	r3, #0
   2708e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27090:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   27094:	06db      	lsls	r3, r3, #27
   27096:	d109      	bne.n	270ac <signal_poll_event+0x74>
   27098:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2709c:	b937      	cbnz	r7, 270ac <signal_poll_event+0x74>
	z_ready_thread(thread);
   2709e:	4640      	mov	r0, r8
   270a0:	f7fa f940 	bl	21324 <z_ready_thread>
		poller->is_polling = false;
   270a4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   270a6:	e7d6      	b.n	27056 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   270a8:	2b02      	cmp	r3, #2
   270aa:	d001      	beq.n	270b0 <signal_poll_event+0x78>
		poller->is_polling = false;
   270ac:	2300      	movs	r3, #0
   270ae:	e7d1      	b.n	27054 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   270b0:	7823      	ldrb	r3, [r4, #0]
   270b2:	2b00      	cmp	r3, #0
   270b4:	d0cf      	beq.n	27056 <signal_poll_event+0x1e>
   270b6:	f854 7c04 	ldr.w	r7, [r4, #-4]
   270ba:	2f00      	cmp	r7, #0
   270bc:	d0f2      	beq.n	270a4 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   270be:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   270c2:	f1a4 0914 	sub.w	r9, r4, #20
   270c6:	f104 0014 	add.w	r0, r4, #20
   270ca:	f7fb f977 	bl	223bc <z_abort_timeout>
		twork->poll_result = 0;
   270ce:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   270d2:	4649      	mov	r1, r9
   270d4:	4638      	mov	r0, r7
   270d6:	f7f9 fddf 	bl	20c98 <z_work_submit_to_queue>
		poller->is_polling = false;
   270da:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   270de:	e7ba      	b.n	27056 <signal_poll_event+0x1e>
		poller->is_polling = false;
   270e0:	2300      	movs	r3, #0
   270e2:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   270e4:	f06f 000a 	mvn.w	r0, #10
}
   270e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000270ec <z_handle_obj_poll_events>:
{
   270ec:	4603      	mov	r3, r0
	return list->head == list;
   270ee:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   270f0:	4283      	cmp	r3, r0
   270f2:	d008      	beq.n	27106 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   270f4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   270f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   270fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   270fc:	2300      	movs	r3, #0
	node->prev = NULL;
   270fe:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   27102:	f7ff bf99 	b.w	27038 <signal_poll_event>
}
   27106:	4770      	bx	lr

00027108 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   27108:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2710a:	e9c0 0000 	strd	r0, r0, [r0]
   2710e:	6083      	str	r3, [r0, #8]
}
   27110:	4770      	bx	lr

00027112 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   27112:	2300      	movs	r3, #0
   27114:	6083      	str	r3, [r0, #8]
}
   27116:	4770      	bx	lr

00027118 <k_free>:
	if (ptr != NULL) {
   27118:	b120      	cbz	r0, 27124 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2711a:	1f01      	subs	r1, r0, #4
   2711c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   27120:	f7f8 be1e 	b.w	1fd60 <k_heap_free>
}
   27124:	4770      	bx	lr

00027126 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   27126:	4770      	bx	lr
